
ExUppgift2014.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00006a5c  00080000  00080000  00008000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00086a5c  00086a5c  0000ea5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000009bc  20070000  00086a64  00010000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          000082e8  200709c0  00087428  000109c0  2**3
                  ALLOC
  4 .stack        00002000  20078ca8  0008f710  000109c0  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  000109bc  2**0
                  CONTENTS, READONLY
  6 .comment      0000005b  00000000  00000000  000109e5  2**0
                  CONTENTS, READONLY
  7 .debug_info   000168da  00000000  00000000  00010a40  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00003b29  00000000  00000000  0002731a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000086e6  00000000  00000000  0002ae43  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00001000  00000000  00000000  00033529  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000ec8  00000000  00000000  00034529  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0001c5ad  00000000  00000000  000353f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   000168e3  00000000  00000000  0005199e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0006b215  00000000  00000000  00068281  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00003094  00000000  00000000  000d3498  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <_sfixed>:
   80000:	2007aca8 	.word	0x2007aca8
   80004:	00082935 	.word	0x00082935
   80008:	00082931 	.word	0x00082931
   8000c:	00082931 	.word	0x00082931
   80010:	00082931 	.word	0x00082931
   80014:	00082931 	.word	0x00082931
   80018:	00082931 	.word	0x00082931
	...
   8002c:	00080c15 	.word	0x00080c15
   80030:	00082931 	.word	0x00082931
   80034:	00000000 	.word	0x00000000
   80038:	00080c91 	.word	0x00080c91
   8003c:	00080ccd 	.word	0x00080ccd
   80040:	00082931 	.word	0x00082931
   80044:	00082931 	.word	0x00082931
   80048:	00082931 	.word	0x00082931
   8004c:	00082931 	.word	0x00082931
   80050:	00082931 	.word	0x00082931
   80054:	00082931 	.word	0x00082931
   80058:	00082931 	.word	0x00082931
   8005c:	00082931 	.word	0x00082931
   80060:	00082931 	.word	0x00082931
   80064:	00082931 	.word	0x00082931
   80068:	00000000 	.word	0x00000000
   8006c:	000827a1 	.word	0x000827a1
   80070:	000827b5 	.word	0x000827b5
   80074:	000827c9 	.word	0x000827c9
   80078:	000827dd 	.word	0x000827dd
	...
   80084:	00082931 	.word	0x00082931
   80088:	00082931 	.word	0x00082931
   8008c:	00082931 	.word	0x00082931
   80090:	00082931 	.word	0x00082931
   80094:	00082931 	.word	0x00082931
   80098:	00082931 	.word	0x00082931
   8009c:	00082931 	.word	0x00082931
   800a0:	00082931 	.word	0x00082931
   800a4:	00000000 	.word	0x00000000
   800a8:	00082931 	.word	0x00082931
   800ac:	00082931 	.word	0x00082931
   800b0:	00082931 	.word	0x00082931
   800b4:	00082931 	.word	0x00082931
   800b8:	00082931 	.word	0x00082931
   800bc:	00082931 	.word	0x00082931
   800c0:	00082931 	.word	0x00082931
   800c4:	00082931 	.word	0x00082931
   800c8:	00082931 	.word	0x00082931
   800cc:	00082931 	.word	0x00082931
   800d0:	00082931 	.word	0x00082931
   800d4:	00082931 	.word	0x00082931
   800d8:	00082931 	.word	0x00082931
   800dc:	00082931 	.word	0x00082931
   800e0:	00082931 	.word	0x00082931
   800e4:	00082931 	.word	0x00082931
   800e8:	00082931 	.word	0x00082931
   800ec:	00082931 	.word	0x00082931
   800f0:	00082931 	.word	0x00082931

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	200709c0 	.word	0x200709c0
   80110:	00000000 	.word	0x00000000
   80114:	00086a64 	.word	0x00086a64

00080118 <frame_dummy>:
   80118:	4b08      	ldr	r3, [pc, #32]	; (8013c <frame_dummy+0x24>)
   8011a:	b510      	push	{r4, lr}
   8011c:	b11b      	cbz	r3, 80126 <frame_dummy+0xe>
   8011e:	4808      	ldr	r0, [pc, #32]	; (80140 <frame_dummy+0x28>)
   80120:	4908      	ldr	r1, [pc, #32]	; (80144 <frame_dummy+0x2c>)
   80122:	f3af 8000 	nop.w
   80126:	4808      	ldr	r0, [pc, #32]	; (80148 <frame_dummy+0x30>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b903      	cbnz	r3, 8012e <frame_dummy+0x16>
   8012c:	bd10      	pop	{r4, pc}
   8012e:	4b07      	ldr	r3, [pc, #28]	; (8014c <frame_dummy+0x34>)
   80130:	2b00      	cmp	r3, #0
   80132:	d0fb      	beq.n	8012c <frame_dummy+0x14>
   80134:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   80138:	4718      	bx	r3
   8013a:	bf00      	nop
   8013c:	00000000 	.word	0x00000000
   80140:	00086a64 	.word	0x00086a64
   80144:	200709c4 	.word	0x200709c4
   80148:	00086a64 	.word	0x00086a64
   8014c:	00000000 	.word	0x00000000

00080150 <ADCSetup>:
#include "global_variables.h"
#include "PWMCustom.h"

/* Setup Function for ADC */
void ADCSetup()
{
   80150:	b538      	push	{r3, r4, r5, lr}
	pmc_enable_periph_clk(ID_ADC);
   80152:	2025      	movs	r0, #37	; 0x25
   80154:	4b0e      	ldr	r3, [pc, #56]	; (80190 <ADCSetup+0x40>)
   80156:	4798      	blx	r3
	adc_init(ADC, sysclk_get_main_hz(), 20000000, 0);		// Configure for maximum frequency @ 20 MHz
   80158:	4c0e      	ldr	r4, [pc, #56]	; (80194 <ADCSetup+0x44>)
   8015a:	4620      	mov	r0, r4
   8015c:	490e      	ldr	r1, [pc, #56]	; (80198 <ADCSetup+0x48>)
   8015e:	4a0f      	ldr	r2, [pc, #60]	; (8019c <ADCSetup+0x4c>)
   80160:	2300      	movs	r3, #0
   80162:	4d0f      	ldr	r5, [pc, #60]	; (801a0 <ADCSetup+0x50>)
   80164:	47a8      	blx	r5
	adc_configure_timing(ADC, 0, 0, 0);
   80166:	4620      	mov	r0, r4
   80168:	2100      	movs	r1, #0
   8016a:	460a      	mov	r2, r1
   8016c:	460b      	mov	r3, r1
   8016e:	4d0d      	ldr	r5, [pc, #52]	; (801a4 <ADCSetup+0x54>)
   80170:	47a8      	blx	r5
	adc_set_resolution(ADC, ADC_MR_LOWRES);			// 0-1024
   80172:	4620      	mov	r0, r4
   80174:	2110      	movs	r1, #16
   80176:	4b0c      	ldr	r3, [pc, #48]	; (801a8 <ADCSetup+0x58>)
   80178:	4798      	blx	r3
	adc_configure_trigger(ADC, ADC_TRIG_SW, 0);				// trig just by software
   8017a:	4620      	mov	r0, r4
   8017c:	2100      	movs	r1, #0
   8017e:	460a      	mov	r2, r1
   80180:	4b0a      	ldr	r3, [pc, #40]	; (801ac <ADCSetup+0x5c>)
   80182:	4798      	blx	r3
	adc_enable_channel(ADC, ADC_CHANNEL_10);				// PB17 - AD8 for Arduino Due
   80184:	4620      	mov	r0, r4
   80186:	210a      	movs	r1, #10
   80188:	4b09      	ldr	r3, [pc, #36]	; (801b0 <ADCSetup+0x60>)
   8018a:	4798      	blx	r3
   8018c:	bd38      	pop	{r3, r4, r5, pc}
   8018e:	bf00      	nop
   80190:	000828dd 	.word	0x000828dd
   80194:	400c0000 	.word	0x400c0000
   80198:	0a037a00 	.word	0x0a037a00
   8019c:	01312d00 	.word	0x01312d00
   801a0:	000802cd 	.word	0x000802cd
   801a4:	00080321 	.word	0x00080321
   801a8:	00080301 	.word	0x00080301
   801ac:	00080311 	.word	0x00080311
   801b0:	00080349 	.word	0x00080349

000801b4 <ADCReadSensor>:
}

/* Read ADC value*/
int ADCReadSensor()
{
   801b4:	b538      	push	{r3, r4, r5, lr}
	adc_start(ADC);
   801b6:	4807      	ldr	r0, [pc, #28]	; (801d4 <ADCReadSensor+0x20>)
   801b8:	4b07      	ldr	r3, [pc, #28]	; (801d8 <ADCReadSensor+0x24>)
   801ba:	4798      	blx	r3
	while((adc_get_status(ADC) & 0x1<<24)==0);  // Wait until DRDY(Data Ready) is HIGH
   801bc:	4d05      	ldr	r5, [pc, #20]	; (801d4 <ADCReadSensor+0x20>)
   801be:	4c07      	ldr	r4, [pc, #28]	; (801dc <ADCReadSensor+0x28>)
   801c0:	4628      	mov	r0, r5
   801c2:	47a0      	blx	r4
   801c4:	f010 7f80 	tst.w	r0, #16777216	; 0x1000000
   801c8:	d0fa      	beq.n	801c0 <ADCReadSensor+0xc>
	return adc_get_latest_value(ADC);
   801ca:	4802      	ldr	r0, [pc, #8]	; (801d4 <ADCReadSensor+0x20>)
   801cc:	4b04      	ldr	r3, [pc, #16]	; (801e0 <ADCReadSensor+0x2c>)
   801ce:	4798      	blx	r3
}
   801d0:	bd38      	pop	{r3, r4, r5, pc}
   801d2:	bf00      	nop
   801d4:	400c0000 	.word	0x400c0000
   801d8:	00080341 	.word	0x00080341
   801dc:	00080355 	.word	0x00080355
   801e0:	00080351 	.word	0x00080351

000801e4 <ADCLinearValues>:

/* Linear ADC Value*/
int ADCLinearValues()
{
   801e4:	b510      	push	{r4, lr}
	for(int i = 0; i<4; i++){ // Remove the oldest value
		adc_filter_values[i] = adc_filter_values[i+1];
   801e6:	4c27      	ldr	r4, [pc, #156]	; (80284 <ADCLinearValues+0xa0>)
   801e8:	6863      	ldr	r3, [r4, #4]
   801ea:	6023      	str	r3, [r4, #0]
   801ec:	68a3      	ldr	r3, [r4, #8]
   801ee:	6063      	str	r3, [r4, #4]
   801f0:	68e3      	ldr	r3, [r4, #12]
   801f2:	60a3      	str	r3, [r4, #8]
   801f4:	6923      	ldr	r3, [r4, #16]
   801f6:	60e3      	str	r3, [r4, #12]
	}
	adc_filter_values[4] = ADCReadSensor(); // Save the latest ADC value at the back of the array.
   801f8:	4b23      	ldr	r3, [pc, #140]	; (80288 <ADCLinearValues+0xa4>)
   801fa:	4798      	blx	r3
   801fc:	6120      	str	r0, [r4, #16]
   801fe:	4622      	mov	r2, r4
   80200:	3414      	adds	r4, #20
	uint32_t adc_filter_values_total = 0;
   80202:	2300      	movs	r3, #0
	for(int i = 0; i<5; i++) {// Add up all the values
		adc_filter_values_total += adc_filter_values[i];
   80204:	f852 1b04 	ldr.w	r1, [r2], #4
   80208:	440b      	add	r3, r1
	for(int i = 0; i<4; i++){ // Remove the oldest value
		adc_filter_values[i] = adc_filter_values[i+1];
	}
	adc_filter_values[4] = ADCReadSensor(); // Save the latest ADC value at the back of the array.
	uint32_t adc_filter_values_total = 0;
	for(int i = 0; i<5; i++) {// Add up all the values
   8020a:	42a2      	cmp	r2, r4
   8020c:	d1fa      	bne.n	80204 <ADCLinearValues+0x20>
		adc_filter_values_total += adc_filter_values[i];
	}
	int tempADCValue = adc_filter_values_total / 5; // Get the average
   8020e:	4a1f      	ldr	r2, [pc, #124]	; (8028c <ADCLinearValues+0xa8>)
   80210:	fba2 2303 	umull	r2, r3, r2, r3
   80214:	089b      	lsrs	r3, r3, #2
	
	if (tempADCValue <= 290)
   80216:	f5b3 7f91 	cmp.w	r3, #290	; 0x122
   8021a:	dd20      	ble.n	8025e <ADCLinearValues+0x7a>
	{
		return 50;
	} else if(tempADCValue > 290 && tempADCValue <= 310)
   8021c:	f2a3 1223 	subw	r2, r3, #291	; 0x123
   80220:	2a13      	cmp	r2, #19
   80222:	d91e      	bls.n	80262 <ADCLinearValues+0x7e>
	{
		return 45;
	}else if(tempADCValue > 310 && tempADCValue <= 340)
   80224:	f2a3 1237 	subw	r2, r3, #311	; 0x137
   80228:	2a1d      	cmp	r2, #29
   8022a:	d91c      	bls.n	80266 <ADCLinearValues+0x82>
	{
		return 40;
	}else if(tempADCValue > 340 && tempADCValue <= 360)
   8022c:	f2a3 1255 	subw	r2, r3, #341	; 0x155
   80230:	2a13      	cmp	r2, #19
   80232:	d91a      	bls.n	8026a <ADCLinearValues+0x86>
	{
		return 35;
	}else if(tempADCValue > 360 && tempADCValue <= 405)
   80234:	f2a3 1269 	subw	r2, r3, #361	; 0x169
   80238:	2a2c      	cmp	r2, #44	; 0x2c
   8023a:	d918      	bls.n	8026e <ADCLinearValues+0x8a>
	{
		return 30;
	}else if(tempADCValue > 405 && tempADCValue <= 470)
   8023c:	f5a3 72cb 	sub.w	r2, r3, #406	; 0x196
   80240:	2a40      	cmp	r2, #64	; 0x40
   80242:	d916      	bls.n	80272 <ADCLinearValues+0x8e>
	{
		return 25;
	}else if(tempADCValue > 470 && tempADCValue <= 525)
   80244:	f2a3 12d7 	subw	r2, r3, #471	; 0x1d7
   80248:	2a36      	cmp	r2, #54	; 0x36
   8024a:	d914      	bls.n	80276 <ADCLinearValues+0x92>
	{
		return 20;
	}else if(tempADCValue > 525 && tempADCValue <= 650)
   8024c:	f2a3 220e 	subw	r2, r3, #526	; 0x20e
   80250:	2a7c      	cmp	r2, #124	; 0x7c
   80252:	d912      	bls.n	8027a <ADCLinearValues+0x96>
	{
		return 15;
	}else if(tempADCValue > 650)
   80254:	f240 228a 	movw	r2, #650	; 0x28a
   80258:	4293      	cmp	r3, r2
   8025a:	dc10      	bgt.n	8027e <ADCLinearValues+0x9a>
   8025c:	bd10      	pop	{r4, pc}
	}
	int tempADCValue = adc_filter_values_total / 5; // Get the average
	
	if (tempADCValue <= 290)
	{
		return 50;
   8025e:	2032      	movs	r0, #50	; 0x32
   80260:	bd10      	pop	{r4, pc}
	} else if(tempADCValue > 290 && tempADCValue <= 310)
	{
		return 45;
   80262:	202d      	movs	r0, #45	; 0x2d
   80264:	bd10      	pop	{r4, pc}
	}else if(tempADCValue > 310 && tempADCValue <= 340)
	{
		return 40;
   80266:	2028      	movs	r0, #40	; 0x28
   80268:	bd10      	pop	{r4, pc}
	}else if(tempADCValue > 340 && tempADCValue <= 360)
	{
		return 35;
   8026a:	2023      	movs	r0, #35	; 0x23
   8026c:	bd10      	pop	{r4, pc}
	}else if(tempADCValue > 360 && tempADCValue <= 405)
	{
		return 30;
   8026e:	201e      	movs	r0, #30
   80270:	bd10      	pop	{r4, pc}
	}else if(tempADCValue > 405 && tempADCValue <= 470)
	{
		return 25;
   80272:	2019      	movs	r0, #25
   80274:	bd10      	pop	{r4, pc}
	}else if(tempADCValue > 470 && tempADCValue <= 525)
	{
		return 20;
   80276:	2014      	movs	r0, #20
   80278:	bd10      	pop	{r4, pc}
	}else if(tempADCValue > 525 && tempADCValue <= 650)
	{
		return 15;
   8027a:	200f      	movs	r0, #15
   8027c:	bd10      	pop	{r4, pc}
	}else if(tempADCValue > 650)
	{
		return 10;
   8027e:	200a      	movs	r0, #10
	}
   80280:	bd10      	pop	{r4, pc}
   80282:	bf00      	nop
   80284:	2007012c 	.word	0x2007012c
   80288:	000801b5 	.word	0x000801b5
   8028c:	cccccccd 	.word	0xcccccccd

00080290 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
   80290:	b9a8      	cbnz	r0, 802be <_read+0x2e>
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
   80292:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   80296:	460c      	mov	r4, r1
   80298:	4690      	mov	r8, r2

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
   8029a:	2a00      	cmp	r2, #0
   8029c:	dd0a      	ble.n	802b4 <_read+0x24>
   8029e:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
   802a0:	4e08      	ldr	r6, [pc, #32]	; (802c4 <_read+0x34>)
   802a2:	4d09      	ldr	r5, [pc, #36]	; (802c8 <_read+0x38>)
   802a4:	6830      	ldr	r0, [r6, #0]
   802a6:	4621      	mov	r1, r4
   802a8:	682b      	ldr	r3, [r5, #0]
   802aa:	4798      	blx	r3
		ptr++;
   802ac:	3401      	adds	r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
   802ae:	42bc      	cmp	r4, r7
   802b0:	d1f8      	bne.n	802a4 <_read+0x14>
   802b2:	e001      	b.n	802b8 <_read+0x28>
   802b4:	f04f 0800 	mov.w	r8, #0
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
   802b8:	4640      	mov	r0, r8
   802ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
   802be:	f04f 30ff 	mov.w	r0, #4294967295
   802c2:	4770      	bx	lr
   802c4:	20078ca0 	.word	0x20078ca0
   802c8:	20078c98 	.word	0x20078c98

000802cc <adc_init>:
 *
 * \return 0 on success.
 */
uint32_t adc_init(Adc *p_adc, const uint32_t ul_mck,
		const uint32_t ul_adc_clock, const enum adc_startup_time startup)
{
   802cc:	b430      	push	{r4, r5}
	uint32_t ul_prescal;

	/*  Reset the controller. */
	p_adc->ADC_CR = ADC_CR_SWRST;
   802ce:	2401      	movs	r4, #1
   802d0:	6004      	str	r4, [r0, #0]

	/* Reset Mode Register. */
	p_adc->ADC_MR = 0;
   802d2:	2400      	movs	r4, #0
   802d4:	6044      	str	r4, [r0, #4]

	/* Reset PDC transfer. */
	p_adc->ADC_PTCR = (ADC_PTCR_RXTDIS | ADC_PTCR_TXTDIS);
   802d6:	f240 2502 	movw	r5, #514	; 0x202
   802da:	f8c0 5120 	str.w	r5, [r0, #288]	; 0x120
	p_adc->ADC_RCR = 0;
   802de:	f8c0 4104 	str.w	r4, [r0, #260]	; 0x104
	p_adc->ADC_RNCR = 0;
   802e2:	f8c0 4114 	str.w	r4, [r0, #276]	; 0x114

	ul_prescal = ul_mck / (2 * ul_adc_clock) - 1;
	p_adc->ADC_MR |= ADC_MR_PRESCAL(ul_prescal) | startup;
   802e6:	6845      	ldr	r5, [r0, #4]
   802e8:	432b      	orrs	r3, r5
	/* Reset PDC transfer. */
	p_adc->ADC_PTCR = (ADC_PTCR_RXTDIS | ADC_PTCR_TXTDIS);
	p_adc->ADC_RCR = 0;
	p_adc->ADC_RNCR = 0;

	ul_prescal = ul_mck / (2 * ul_adc_clock) - 1;
   802ea:	0052      	lsls	r2, r2, #1
   802ec:	fbb1 f1f2 	udiv	r1, r1, r2
   802f0:	1e4a      	subs	r2, r1, #1
	p_adc->ADC_MR |= ADC_MR_PRESCAL(ul_prescal) | startup;
   802f2:	0212      	lsls	r2, r2, #8
   802f4:	b292      	uxth	r2, r2
   802f6:	4313      	orrs	r3, r2
   802f8:	6043      	str	r3, [r0, #4]
	return 0;
}
   802fa:	4620      	mov	r0, r4
   802fc:	bc30      	pop	{r4, r5}
   802fe:	4770      	bx	lr

00080300 <adc_set_resolution>:
		p_adc->ADC_MR &= ~ADC_MR_LOWRES;
		p_adc->ADC_EMR |= resolution;
		break;
	}
#else
	p_adc->ADC_MR &= ~ADC_MR_LOWRES;
   80300:	6843      	ldr	r3, [r0, #4]
   80302:	f023 0310 	bic.w	r3, r3, #16
   80306:	6043      	str	r3, [r0, #4]
	p_adc->ADC_MR |= resolution;
   80308:	6843      	ldr	r3, [r0, #4]
   8030a:	4319      	orrs	r1, r3
   8030c:	6041      	str	r1, [r0, #4]
   8030e:	4770      	bx	lr

00080310 <adc_configure_trigger>:
 *
 */
void adc_configure_trigger(Adc *p_adc, const enum adc_trigger_t trigger,
		uint8_t uc_freerun)
{
	p_adc->ADC_MR |= trigger | ((uc_freerun << 7) & ADC_MR_FREERUN);
   80310:	6843      	ldr	r3, [r0, #4]
   80312:	4319      	orrs	r1, r3
   80314:	01d2      	lsls	r2, r2, #7
   80316:	b2d2      	uxtb	r2, r2
   80318:	4311      	orrs	r1, r2
   8031a:	6041      	str	r1, [r0, #4]
   8031c:	4770      	bx	lr
   8031e:	bf00      	nop

00080320 <adc_configure_timing>:
 * \param uc_settling Analog settling time = (uc_settling + 1) / ADC clock.
 * \param uc_transfer Data transfer time = (uc_transfer * 2 + 3) / ADC clock.
 */
void adc_configure_timing(Adc *p_adc, const uint8_t uc_tracking,
		const enum adc_settling_time_t settling,const uint8_t uc_transfer)
{
   80320:	b410      	push	{r4}
	p_adc->ADC_MR |= ADC_MR_TRANSFER(uc_transfer)
   80322:	6844      	ldr	r4, [r0, #4]
   80324:	4322      	orrs	r2, r4
			| settling | ADC_MR_TRACKTIM(uc_tracking);
   80326:	0609      	lsls	r1, r1, #24
   80328:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
   8032c:	430a      	orrs	r2, r1
 * \param uc_transfer Data transfer time = (uc_transfer * 2 + 3) / ADC clock.
 */
void adc_configure_timing(Adc *p_adc, const uint8_t uc_tracking,
		const enum adc_settling_time_t settling,const uint8_t uc_transfer)
{
	p_adc->ADC_MR |= ADC_MR_TRANSFER(uc_transfer)
   8032e:	071b      	lsls	r3, r3, #28
   80330:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
   80334:	4313      	orrs	r3, r2
   80336:	6043      	str	r3, [r0, #4]
			| settling | ADC_MR_TRACKTIM(uc_tracking);
}
   80338:	f85d 4b04 	ldr.w	r4, [sp], #4
   8033c:	4770      	bx	lr
   8033e:	bf00      	nop

00080340 <adc_start>:
 * \param p_adc Pointer to an ADC instance.
 */

void adc_start(Adc *p_adc)
{
	p_adc->ADC_CR = ADC_CR_START;
   80340:	2302      	movs	r3, #2
   80342:	6003      	str	r3, [r0, #0]
   80344:	4770      	bx	lr
   80346:	bf00      	nop

00080348 <adc_enable_channel>:
 * \param p_adc Pointer to an ADC instance.
 * \param adc_ch ADC channel number.
 */
void adc_enable_channel(Adc *p_adc, const enum adc_channel_num_t adc_ch)
{
	p_adc->ADC_CHER = 1 << adc_ch;
   80348:	2301      	movs	r3, #1
   8034a:	408b      	lsls	r3, r1
   8034c:	6103      	str	r3, [r0, #16]
   8034e:	4770      	bx	lr

00080350 <adc_get_latest_value>:
 *
 * \return ADC latest value.
 */
uint32_t adc_get_latest_value(const Adc *p_adc)
{
	return p_adc->ADC_LCDR;
   80350:	6a00      	ldr	r0, [r0, #32]
}
   80352:	4770      	bx	lr

00080354 <adc_get_status>:
 *
 * \return ADC status structure.
 */
uint32_t adc_get_status(const Adc *p_adc)
{
	return p_adc->ADC_ISR;
   80354:	6b00      	ldr	r0, [r0, #48]	; 0x30
}
   80356:	4770      	bx	lr

00080358 <usart_write>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
   80358:	6943      	ldr	r3, [r0, #20]
   8035a:	f013 0f02 	tst.w	r3, #2
		return 1;
	}

	p_usart->US_THR = US_THR_TXCHR(c);
   8035e:	bf1d      	ittte	ne
   80360:	f3c1 0108 	ubfxne	r1, r1, #0, #9
   80364:	61c1      	strne	r1, [r0, #28]
	return 0;
   80366:	2000      	movne	r0, #0
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
		return 1;
   80368:	2001      	moveq	r0, #1
	}

	p_usart->US_THR = US_THR_TXCHR(c);
	return 0;
}
   8036a:	4770      	bx	lr

0008036c <usart_read>:
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
   8036c:	6943      	ldr	r3, [r0, #20]
   8036e:	f013 0f01 	tst.w	r3, #1
   80372:	d005      	beq.n	80380 <usart_read+0x14>
		return 1;
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
   80374:	6983      	ldr	r3, [r0, #24]
   80376:	f3c3 0308 	ubfx	r3, r3, #0, #9
   8037a:	600b      	str	r3, [r1, #0]

	return 0;
   8037c:	2000      	movs	r0, #0
   8037e:	4770      	bx	lr
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
		return 1;
   80380:	2001      	movs	r0, #1

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;

	return 0;
}
   80382:	4770      	bx	lr
   80384:	0000      	movs	r0, r0
	...

00080388 <PIDRegulate>:
#include "ADCCustom.h"
#include "global_variables.h"
#include "UARTFunctions.h"

/* PID Function */
void PIDRegulate(void){
   80388:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8038c:	b083      	sub	sp, #12
	distance = ADCLinearValues();
   8038e:	4b70      	ldr	r3, [pc, #448]	; (80550 <PIDRegulate+0x1c8>)
   80390:	4798      	blx	r3
   80392:	4b70      	ldr	r3, [pc, #448]	; (80554 <PIDRegulate+0x1cc>)
   80394:	6018      	str	r0, [r3, #0]
	
	//uncomment for linear calibration
	//distance = ADCReadSensor();
	
	// P-regulation and invert error
	error = -1*(setPoint - distance);
   80396:	4b70      	ldr	r3, [pc, #448]	; (80558 <PIDRegulate+0x1d0>)
   80398:	681e      	ldr	r6, [r3, #0]
   8039a:	1b86      	subs	r6, r0, r6
   8039c:	4b6f      	ldr	r3, [pc, #444]	; (8055c <PIDRegulate+0x1d4>)
   8039e:	601e      	str	r6, [r3, #0]
	
	// I-regulation
	I_Output += error*DT_SECONDS;
   803a0:	4630      	mov	r0, r6
   803a2:	4b6f      	ldr	r3, [pc, #444]	; (80560 <PIDRegulate+0x1d8>)
   803a4:	4798      	blx	r3
   803a6:	e9cd 0100 	strd	r0, r1, [sp]
   803aa:	4b6e      	ldr	r3, [pc, #440]	; (80564 <PIDRegulate+0x1dc>)
   803ac:	6818      	ldr	r0, [r3, #0]
   803ae:	4b6e      	ldr	r3, [pc, #440]	; (80568 <PIDRegulate+0x1e0>)
   803b0:	4798      	blx	r3
   803b2:	4680      	mov	r8, r0
   803b4:	4689      	mov	r9, r1
   803b6:	e9dd 0100 	ldrd	r0, r1, [sp]
   803ba:	a363      	add	r3, pc, #396	; (adr r3, 80548 <PIDRegulate+0x1c0>)
   803bc:	e9d3 2300 	ldrd	r2, r3, [r3]
   803c0:	4f6a      	ldr	r7, [pc, #424]	; (8056c <PIDRegulate+0x1e4>)
   803c2:	47b8      	blx	r7
   803c4:	4602      	mov	r2, r0
   803c6:	460b      	mov	r3, r1
   803c8:	4640      	mov	r0, r8
   803ca:	4649      	mov	r1, r9
   803cc:	4f68      	ldr	r7, [pc, #416]	; (80570 <PIDRegulate+0x1e8>)
   803ce:	47b8      	blx	r7
   803d0:	4b68      	ldr	r3, [pc, #416]	; (80574 <PIDRegulate+0x1ec>)
   803d2:	4798      	blx	r3
   803d4:	4607      	mov	r7, r0
	if(I_Output > 20){ // Remove windup induced lag
   803d6:	4968      	ldr	r1, [pc, #416]	; (80578 <PIDRegulate+0x1f0>)
   803d8:	4b68      	ldr	r3, [pc, #416]	; (8057c <PIDRegulate+0x1f4>)
   803da:	4798      	blx	r3
   803dc:	b118      	cbz	r0, 803e6 <PIDRegulate+0x5e>
		I_Output = 20;
   803de:	4a66      	ldr	r2, [pc, #408]	; (80578 <PIDRegulate+0x1f0>)
   803e0:	4b60      	ldr	r3, [pc, #384]	; (80564 <PIDRegulate+0x1dc>)
   803e2:	601a      	str	r2, [r3, #0]
   803e4:	e00a      	b.n	803fc <PIDRegulate+0x74>
		} else if(I_Output < -20){
   803e6:	4638      	mov	r0, r7
   803e8:	4965      	ldr	r1, [pc, #404]	; (80580 <PIDRegulate+0x1f8>)
   803ea:	4b66      	ldr	r3, [pc, #408]	; (80584 <PIDRegulate+0x1fc>)
   803ec:	4798      	blx	r3
   803ee:	b910      	cbnz	r0, 803f6 <PIDRegulate+0x6e>
	
	// P-regulation and invert error
	error = -1*(setPoint - distance);
	
	// I-regulation
	I_Output += error*DT_SECONDS;
   803f0:	4b5c      	ldr	r3, [pc, #368]	; (80564 <PIDRegulate+0x1dc>)
   803f2:	601f      	str	r7, [r3, #0]
   803f4:	e002      	b.n	803fc <PIDRegulate+0x74>
	if(I_Output > 20){ // Remove windup induced lag
		I_Output = 20;
		} else if(I_Output < -20){
		I_Output = -20;
   803f6:	4a62      	ldr	r2, [pc, #392]	; (80580 <PIDRegulate+0x1f8>)
   803f8:	4b5a      	ldr	r3, [pc, #360]	; (80564 <PIDRegulate+0x1dc>)
   803fa:	601a      	str	r2, [r3, #0]
	}
	
	// D-regulation
	D_Output = (float)(error-error_old);
   803fc:	4f62      	ldr	r7, [pc, #392]	; (80588 <PIDRegulate+0x200>)
   803fe:	6838      	ldr	r0, [r7, #0]
   80400:	1a30      	subs	r0, r6, r0
   80402:	4b62      	ldr	r3, [pc, #392]	; (8058c <PIDRegulate+0x204>)
   80404:	4798      	blx	r3
   80406:	4682      	mov	sl, r0
   80408:	4b61      	ldr	r3, [pc, #388]	; (80590 <PIDRegulate+0x208>)
   8040a:	6018      	str	r0, [r3, #0]
	error_old = error;
   8040c:	603e      	str	r6, [r7, #0]
	
	// Add up P, I and D outputs
	if(kI_Gain != 0 && kD_Gain != 0){ // PID
   8040e:	4b61      	ldr	r3, [pc, #388]	; (80594 <PIDRegulate+0x20c>)
   80410:	e9d3 6700 	ldrd	r6, r7, [r3]
   80414:	4630      	mov	r0, r6
   80416:	4639      	mov	r1, r7
   80418:	2200      	movs	r2, #0
   8041a:	2300      	movs	r3, #0
   8041c:	4c5e      	ldr	r4, [pc, #376]	; (80598 <PIDRegulate+0x210>)
   8041e:	47a0      	blx	r4
   80420:	2800      	cmp	r0, #0
   80422:	d147      	bne.n	804b4 <PIDRegulate+0x12c>
   80424:	4b5d      	ldr	r3, [pc, #372]	; (8059c <PIDRegulate+0x214>)
   80426:	e9d3 8900 	ldrd	r8, r9, [r3]
   8042a:	4640      	mov	r0, r8
   8042c:	4649      	mov	r1, r9
   8042e:	2200      	movs	r2, #0
   80430:	2300      	movs	r3, #0
   80432:	47a0      	blx	r4
   80434:	bb30      	cbnz	r0, 80484 <PIDRegulate+0xfc>
		output_value = kP_Gain * (error +  (I_Output/kI_Gain) + (kD_Gain*D_Output));
   80436:	f8df b130 	ldr.w	fp, [pc, #304]	; 80568 <PIDRegulate+0x1e0>
   8043a:	4b4a      	ldr	r3, [pc, #296]	; (80564 <PIDRegulate+0x1dc>)
   8043c:	6818      	ldr	r0, [r3, #0]
   8043e:	47d8      	blx	fp
   80440:	4632      	mov	r2, r6
   80442:	463b      	mov	r3, r7
   80444:	4e56      	ldr	r6, [pc, #344]	; (805a0 <PIDRegulate+0x218>)
   80446:	47b0      	blx	r6
   80448:	4602      	mov	r2, r0
   8044a:	460b      	mov	r3, r1
   8044c:	4e48      	ldr	r6, [pc, #288]	; (80570 <PIDRegulate+0x1e8>)
   8044e:	e9dd 0100 	ldrd	r0, r1, [sp]
   80452:	47b0      	blx	r6
   80454:	4604      	mov	r4, r0
   80456:	460d      	mov	r5, r1
   80458:	4650      	mov	r0, sl
   8045a:	47d8      	blx	fp
   8045c:	4602      	mov	r2, r0
   8045e:	460b      	mov	r3, r1
   80460:	4f42      	ldr	r7, [pc, #264]	; (8056c <PIDRegulate+0x1e4>)
   80462:	4640      	mov	r0, r8
   80464:	4649      	mov	r1, r9
   80466:	47b8      	blx	r7
   80468:	4602      	mov	r2, r0
   8046a:	460b      	mov	r3, r1
   8046c:	4620      	mov	r0, r4
   8046e:	4629      	mov	r1, r5
   80470:	47b0      	blx	r6
   80472:	4b4c      	ldr	r3, [pc, #304]	; (805a4 <PIDRegulate+0x21c>)
   80474:	e9d3 2300 	ldrd	r2, r3, [r3]
   80478:	47b8      	blx	r7
   8047a:	4b4b      	ldr	r3, [pc, #300]	; (805a8 <PIDRegulate+0x220>)
   8047c:	4798      	blx	r3
   8047e:	4b4b      	ldr	r3, [pc, #300]	; (805ac <PIDRegulate+0x224>)
   80480:	6018      	str	r0, [r3, #0]
   80482:	e046      	b.n	80512 <PIDRegulate+0x18a>
		} else if(kI_Gain != 0 && kD_Gain == 0){ // PI
		output_value = kP_Gain * (error +  (I_Output/kI_Gain));
   80484:	4b37      	ldr	r3, [pc, #220]	; (80564 <PIDRegulate+0x1dc>)
   80486:	6818      	ldr	r0, [r3, #0]
   80488:	4b37      	ldr	r3, [pc, #220]	; (80568 <PIDRegulate+0x1e0>)
   8048a:	4798      	blx	r3
   8048c:	4632      	mov	r2, r6
   8048e:	463b      	mov	r3, r7
   80490:	4e43      	ldr	r6, [pc, #268]	; (805a0 <PIDRegulate+0x218>)
   80492:	47b0      	blx	r6
   80494:	4602      	mov	r2, r0
   80496:	460b      	mov	r3, r1
   80498:	e9dd 0100 	ldrd	r0, r1, [sp]
   8049c:	4c34      	ldr	r4, [pc, #208]	; (80570 <PIDRegulate+0x1e8>)
   8049e:	47a0      	blx	r4
   804a0:	4b40      	ldr	r3, [pc, #256]	; (805a4 <PIDRegulate+0x21c>)
   804a2:	e9d3 2300 	ldrd	r2, r3, [r3]
   804a6:	4c31      	ldr	r4, [pc, #196]	; (8056c <PIDRegulate+0x1e4>)
   804a8:	47a0      	blx	r4
   804aa:	4b3f      	ldr	r3, [pc, #252]	; (805a8 <PIDRegulate+0x220>)
   804ac:	4798      	blx	r3
   804ae:	4b3f      	ldr	r3, [pc, #252]	; (805ac <PIDRegulate+0x224>)
   804b0:	6018      	str	r0, [r3, #0]
   804b2:	e02e      	b.n	80512 <PIDRegulate+0x18a>
		} else if(kI_Gain == 0 && kD_Gain != 0){ // PD
   804b4:	4b39      	ldr	r3, [pc, #228]	; (8059c <PIDRegulate+0x214>)
   804b6:	e9d3 6700 	ldrd	r6, r7, [r3]
   804ba:	4630      	mov	r0, r6
   804bc:	4639      	mov	r1, r7
   804be:	2200      	movs	r2, #0
   804c0:	2300      	movs	r3, #0
   804c2:	f8df c0d4 	ldr.w	ip, [pc, #212]	; 80598 <PIDRegulate+0x210>
   804c6:	47e0      	blx	ip
   804c8:	b9c0      	cbnz	r0, 804fc <PIDRegulate+0x174>
		output_value = kP_Gain * (error + (kD_Gain*D_Output));
   804ca:	4650      	mov	r0, sl
   804cc:	4b26      	ldr	r3, [pc, #152]	; (80568 <PIDRegulate+0x1e0>)
   804ce:	4798      	blx	r3
   804d0:	4602      	mov	r2, r0
   804d2:	460b      	mov	r3, r1
   804d4:	f8df 8094 	ldr.w	r8, [pc, #148]	; 8056c <PIDRegulate+0x1e4>
   804d8:	4630      	mov	r0, r6
   804da:	4639      	mov	r1, r7
   804dc:	47c0      	blx	r8
   804de:	4602      	mov	r2, r0
   804e0:	460b      	mov	r3, r1
   804e2:	e9dd 0100 	ldrd	r0, r1, [sp]
   804e6:	4c22      	ldr	r4, [pc, #136]	; (80570 <PIDRegulate+0x1e8>)
   804e8:	47a0      	blx	r4
   804ea:	4b2e      	ldr	r3, [pc, #184]	; (805a4 <PIDRegulate+0x21c>)
   804ec:	e9d3 2300 	ldrd	r2, r3, [r3]
   804f0:	47c0      	blx	r8
   804f2:	4b2d      	ldr	r3, [pc, #180]	; (805a8 <PIDRegulate+0x220>)
   804f4:	4798      	blx	r3
   804f6:	4b2d      	ldr	r3, [pc, #180]	; (805ac <PIDRegulate+0x224>)
   804f8:	6018      	str	r0, [r3, #0]
   804fa:	e00a      	b.n	80512 <PIDRegulate+0x18a>
		} else if(kI_Gain == 0 && kD_Gain == 0){ //P
		output_value = kP_Gain * error;
   804fc:	e9dd 0100 	ldrd	r0, r1, [sp]
   80500:	4b28      	ldr	r3, [pc, #160]	; (805a4 <PIDRegulate+0x21c>)
   80502:	e9d3 2300 	ldrd	r2, r3, [r3]
   80506:	4c19      	ldr	r4, [pc, #100]	; (8056c <PIDRegulate+0x1e4>)
   80508:	47a0      	blx	r4
   8050a:	4b27      	ldr	r3, [pc, #156]	; (805a8 <PIDRegulate+0x220>)
   8050c:	4798      	blx	r3
   8050e:	4b27      	ldr	r3, [pc, #156]	; (805ac <PIDRegulate+0x224>)
   80510:	6018      	str	r0, [r3, #0]
	//output_value = (kP_Gain*error)+I_Output+D_Output;
	//output_value = (kP_Gain*error); // P regulator
	
	//Apply output from PID to pwm control
	//pwm_val = pwm_val+(float)(output_value*PWM_CHANGE_GAIN);
	pwm_val = pwm_val+output_value;
   80512:	4b27      	ldr	r3, [pc, #156]	; (805b0 <PIDRegulate+0x228>)
   80514:	681b      	ldr	r3, [r3, #0]
   80516:	4a25      	ldr	r2, [pc, #148]	; (805ac <PIDRegulate+0x224>)
   80518:	6812      	ldr	r2, [r2, #0]
	//pwm_val = output_value;

	// Protection vs overflow/underflow
	if (pwm_val < PID_PWM_MIN)
   8051a:	189b      	adds	r3, r3, r2
   8051c:	d503      	bpl.n	80526 <PIDRegulate+0x19e>
	{
		pwm_val = PID_PWM_MIN;
   8051e:	2200      	movs	r2, #0
   80520:	4b23      	ldr	r3, [pc, #140]	; (805b0 <PIDRegulate+0x228>)
   80522:	601a      	str	r2, [r3, #0]
   80524:	e007      	b.n	80536 <PIDRegulate+0x1ae>
	}
	else if (pwm_val > PID_PWM_MAX)
   80526:	2b64      	cmp	r3, #100	; 0x64
   80528:	dc02      	bgt.n	80530 <PIDRegulate+0x1a8>
	//output_value = (kP_Gain*error)+I_Output+D_Output;
	//output_value = (kP_Gain*error); // P regulator
	
	//Apply output from PID to pwm control
	//pwm_val = pwm_val+(float)(output_value*PWM_CHANGE_GAIN);
	pwm_val = pwm_val+output_value;
   8052a:	4a21      	ldr	r2, [pc, #132]	; (805b0 <PIDRegulate+0x228>)
   8052c:	6013      	str	r3, [r2, #0]
   8052e:	e002      	b.n	80536 <PIDRegulate+0x1ae>
	{
		pwm_val = PID_PWM_MIN;
	}
	else if (pwm_val > PID_PWM_MAX)
	{
		pwm_val = PID_PWM_MAX;
   80530:	2264      	movs	r2, #100	; 0x64
   80532:	4b1f      	ldr	r3, [pc, #124]	; (805b0 <PIDRegulate+0x228>)
   80534:	601a      	str	r2, [r3, #0]
	}
	
	// Write PID value to PWM
	PWMDutyCycle(pwm_val);
   80536:	4b1e      	ldr	r3, [pc, #120]	; (805b0 <PIDRegulate+0x228>)
   80538:	6818      	ldr	r0, [r3, #0]
   8053a:	4b1e      	ldr	r3, [pc, #120]	; (805b4 <PIDRegulate+0x22c>)
   8053c:	4798      	blx	r3
	
}
   8053e:	b003      	add	sp, #12
   80540:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   80544:	f3af 8000 	nop.w
   80548:	9999999a 	.word	0x9999999a
   8054c:	3fb99999 	.word	0x3fb99999
   80550:	000801e5 	.word	0x000801e5
   80554:	200709ec 	.word	0x200709ec
   80558:	20070a10 	.word	0x20070a10
   8055c:	200709f0 	.word	0x200709f0
   80560:	00082edd 	.word	0x00082edd
   80564:	200709e0 	.word	0x200709e0
   80568:	00082f01 	.word	0x00082f01
   8056c:	00082fa9 	.word	0x00082fa9
   80570:	00082c45 	.word	0x00082c45
   80574:	0008352d 	.word	0x0008352d
   80578:	41a00000 	.word	0x41a00000
   8057c:	000838c1 	.word	0x000838c1
   80580:	c1a00000 	.word	0xc1a00000
   80584:	00083885 	.word	0x00083885
   80588:	200709e8 	.word	0x200709e8
   8058c:	00083741 	.word	0x00083741
   80590:	20070a08 	.word	0x20070a08
   80594:	20070a18 	.word	0x20070a18
   80598:	00083479 	.word	0x00083479
   8059c:	20070a00 	.word	0x20070a00
   805a0:	000831fd 	.word	0x000831fd
   805a4:	200709f8 	.word	0x200709f8
   805a8:	000834dd 	.word	0x000834dd
   805ac:	20070a0c 	.word	0x20070a0c
   805b0:	200709e4 	.word	0x200709e4
   805b4:	000806ad 	.word	0x000806ad

000805b8 <PIDRegulationTask>:
#include "global_variables.h"
#include "PIDRegulation.h"
#include "testFunctions.h"

void PIDRegulationTask (void *pvParameters)
{
   805b8:	b570      	push	{r4, r5, r6, lr}
   805ba:	b082      	sub	sp, #8
	//	printf("PID Task initialized and PAUSED\n\r");

	// Pause here untill Matlab sent values
	xSemaphoreTake(sem, portMAX_DELAY);
   805bc:	4d16      	ldr	r5, [pc, #88]	; (80618 <PIDRegulationTask+0x60>)
   805be:	6828      	ldr	r0, [r5, #0]
   805c0:	2100      	movs	r1, #0
   805c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
   805c6:	460b      	mov	r3, r1
   805c8:	4c14      	ldr	r4, [pc, #80]	; (8061c <PIDRegulationTask+0x64>)
   805ca:	47a0      	blx	r4
	xSemaphoreTake(sem, portMAX_DELAY);
   805cc:	6828      	ldr	r0, [r5, #0]
   805ce:	2100      	movs	r1, #0
   805d0:	f64f 72ff 	movw	r2, #65535	; 0xffff
   805d4:	460b      	mov	r3, r1
   805d6:	47a0      	blx	r4

	portTickType xLastWakeTime = xTaskGetTickCount();
   805d8:	4b11      	ldr	r3, [pc, #68]	; (80620 <PIDRegulationTask+0x68>)
   805da:	4798      	blx	r3
   805dc:	ac02      	add	r4, sp, #8
   805de:	f824 0d02 	strh.w	r0, [r4, #-2]!
	const portTickType xFrequency =  DTIME_MS; // Run between 50-100ms

	vTaskDelay(1000);
   805e2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   805e6:	4b0f      	ldr	r3, [pc, #60]	; (80624 <PIDRegulationTask+0x6c>)
   805e8:	4798      	blx	r3

	//set constants
	kD_Gain = kD_Gain/DT_SECONDS;
   805ea:	4d0f      	ldr	r5, [pc, #60]	; (80628 <PIDRegulationTask+0x70>)
   805ec:	e9d5 0100 	ldrd	r0, r1, [r5]
   805f0:	a307      	add	r3, pc, #28	; (adr r3, 80610 <PIDRegulationTask+0x58>)
   805f2:	e9d3 2300 	ldrd	r2, r3, [r3]
   805f6:	4e0d      	ldr	r6, [pc, #52]	; (8062c <PIDRegulationTask+0x74>)
   805f8:	47b0      	blx	r6
   805fa:	e9c5 0100 	strd	r0, r1, [r5]


	for(;;){
		vTaskDelayUntil(&xLastWakeTime,xFrequency);	// Samplingstid
   805fe:	4e0c      	ldr	r6, [pc, #48]	; (80630 <PIDRegulationTask+0x78>)
		PIDRegulate(); // Run PID
   80600:	4d0c      	ldr	r5, [pc, #48]	; (80634 <PIDRegulationTask+0x7c>)
	//set constants
	kD_Gain = kD_Gain/DT_SECONDS;


	for(;;){
		vTaskDelayUntil(&xLastWakeTime,xFrequency);	// Samplingstid
   80602:	4620      	mov	r0, r4
   80604:	2164      	movs	r1, #100	; 0x64
   80606:	47b0      	blx	r6
		PIDRegulate(); // Run PID
   80608:	47a8      	blx	r5
		//PRegulatorZN(); // Zieg
	}
   8060a:	e7fa      	b.n	80602 <PIDRegulationTask+0x4a>
   8060c:	f3af 8000 	nop.w
   80610:	9999999a 	.word	0x9999999a
   80614:	3fb99999 	.word	0x3fb99999
   80618:	200709dc 	.word	0x200709dc
   8061c:	00081249 	.word	0x00081249
   80620:	000816d5 	.word	0x000816d5
   80624:	000819bd 	.word	0x000819bd
   80628:	20070a00 	.word	0x20070a00
   8062c:	000831fd 	.word	0x000831fd
   80630:	00081925 	.word	0x00081925
   80634:	00080389 	.word	0x00080389

00080638 <PWMSetup>:
#include <asf.h>
#include "PWMCustom.h"
#include "global_variables.h"

void PWMSetup()
{
   80638:	b530      	push	{r4, r5, lr}
   8063a:	b085      	sub	sp, #20
	pmc_enable_periph_clk(ID_PWM);
   8063c:	2024      	movs	r0, #36	; 0x24
   8063e:	4b12      	ldr	r3, [pc, #72]	; (80688 <PWMSetup+0x50>)
   80640:	4798      	blx	r3
	pwm_channel_disable(PWM, PWM_CHANNEL_6);
   80642:	4c12      	ldr	r4, [pc, #72]	; (8068c <PWMSetup+0x54>)
   80644:	4620      	mov	r0, r4
   80646:	2106      	movs	r1, #6
   80648:	4b11      	ldr	r3, [pc, #68]	; (80690 <PWMSetup+0x58>)
   8064a:	4798      	blx	r3
	pwm_clock_t pwm_clock ={
   8064c:	4b11      	ldr	r3, [pc, #68]	; (80694 <PWMSetup+0x5c>)
   8064e:	9301      	str	r3, [sp, #4]
   80650:	2500      	movs	r5, #0
   80652:	9502      	str	r5, [sp, #8]
   80654:	4b10      	ldr	r3, [pc, #64]	; (80698 <PWMSetup+0x60>)
   80656:	9303      	str	r3, [sp, #12]
		.ul_clka = 10000*100,
		.ul_clkb = 0,
		.ul_mck = sysclk_get_cpu_hz()
	};
	pwm_init(PWM, &pwm_clock);
   80658:	4620      	mov	r0, r4
   8065a:	a901      	add	r1, sp, #4
   8065c:	4b0f      	ldr	r3, [pc, #60]	; (8069c <PWMSetup+0x64>)
   8065e:	4798      	blx	r3

	pwm_channel.alignment = PWM_ALIGN_LEFT;
   80660:	490f      	ldr	r1, [pc, #60]	; (806a0 <PWMSetup+0x68>)
   80662:	810d      	strh	r5, [r1, #8]
	pwm_channel.polarity = PWM_LOW;
   80664:	728d      	strb	r5, [r1, #10]
	pwm_channel.ul_prescaler = PWM_CMR_CPRE_CLKA;
   80666:	230b      	movs	r3, #11
   80668:	604b      	str	r3, [r1, #4]
	pwm_channel.ul_duty = 0;
   8066a:	60cd      	str	r5, [r1, #12]
	pwm_channel.ul_period = 100;
   8066c:	2364      	movs	r3, #100	; 0x64
   8066e:	610b      	str	r3, [r1, #16]
	pwm_channel.channel = PWM_CHANNEL_6;
   80670:	2506      	movs	r5, #6
   80672:	600d      	str	r5, [r1, #0]
	pwm_channel_init(PWM, &pwm_channel);
   80674:	4620      	mov	r0, r4
   80676:	4b0b      	ldr	r3, [pc, #44]	; (806a4 <PWMSetup+0x6c>)
   80678:	4798      	blx	r3
	pwm_channel_enable(PWM, PWM_CHANNEL_6);
   8067a:	4620      	mov	r0, r4
   8067c:	4629      	mov	r1, r5
   8067e:	4b0a      	ldr	r3, [pc, #40]	; (806a8 <PWMSetup+0x70>)
   80680:	4798      	blx	r3
}
   80682:	b005      	add	sp, #20
   80684:	bd30      	pop	{r4, r5, pc}
   80686:	bf00      	nop
   80688:	000828dd 	.word	0x000828dd
   8068c:	40094000 	.word	0x40094000
   80690:	000823c9 	.word	0x000823c9
   80694:	000f4240 	.word	0x000f4240
   80698:	0501bd00 	.word	0x0501bd00
   8069c:	00082249 	.word	0x00082249
   806a0:	20078c70 	.word	0x20078c70
   806a4:	00082295 	.word	0x00082295
   806a8:	000823c1 	.word	0x000823c1

000806ac <PWMDutyCycle>:

void PWMDutyCycle(int value){
   806ac:	b508      	push	{r3, lr}
   806ae:	4602      	mov	r2, r0
	pwm_channel_update_duty(PWM, &pwm_channel, value);
   806b0:	4802      	ldr	r0, [pc, #8]	; (806bc <PWMDutyCycle+0x10>)
   806b2:	4903      	ldr	r1, [pc, #12]	; (806c0 <PWMDutyCycle+0x14>)
   806b4:	4b03      	ldr	r3, [pc, #12]	; (806c4 <PWMDutyCycle+0x18>)
   806b6:	4798      	blx	r3
   806b8:	bd08      	pop	{r3, pc}
   806ba:	bf00      	nop
   806bc:	40094000 	.word	0x40094000
   806c0:	20078c70 	.word	0x20078c70
   806c4:	0008239d 	.word	0x0008239d

000806c8 <shieldInit>:
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   806c8:	4b07      	ldr	r3, [pc, #28]	; (806e8 <shieldInit+0x20>)
   806ca:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   806ce:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   806d0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   806d4:	635a      	str	r2, [r3, #52]	; 0x34
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   806d6:	f503 7300 	add.w	r3, r3, #512	; 0x200
   806da:	f44f 7280 	mov.w	r2, #256	; 0x100
   806de:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   806e0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   806e4:	631a      	str	r2, [r3, #48]	; 0x30
   806e6:	4770      	bx	lr
   806e8:	400e1200 	.word	0x400e1200

000806ec <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
   806ec:	b5f0      	push	{r4, r5, r6, r7, lr}
   806ee:	b083      	sub	sp, #12
   806f0:	4604      	mov	r4, r0
   806f2:	460d      	mov	r5, r1
	uint32_t val = 0;
   806f4:	2300      	movs	r3, #0
   806f6:	9301      	str	r3, [sp, #4]

	/* Avoid Cppcheck Warning */
	UNUSED(val);

#ifdef UART
	if (UART == (Uart*)p_usart) {
   806f8:	4b1f      	ldr	r3, [pc, #124]	; (80778 <usart_serial_getchar+0x8c>)
   806fa:	4298      	cmp	r0, r3
   806fc:	d107      	bne.n	8070e <usart_serial_getchar+0x22>
		while (uart_read((Uart*)p_usart, data));
   806fe:	461f      	mov	r7, r3
   80700:	4e1e      	ldr	r6, [pc, #120]	; (8077c <usart_serial_getchar+0x90>)
   80702:	4638      	mov	r0, r7
   80704:	4629      	mov	r1, r5
   80706:	47b0      	blx	r6
   80708:	2800      	cmp	r0, #0
   8070a:	d1fa      	bne.n	80702 <usart_serial_getchar+0x16>
   8070c:	e019      	b.n	80742 <usart_serial_getchar+0x56>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   8070e:	4b1c      	ldr	r3, [pc, #112]	; (80780 <usart_serial_getchar+0x94>)
   80710:	4298      	cmp	r0, r3
   80712:	d109      	bne.n	80728 <usart_serial_getchar+0x3c>
		while (usart_read(p_usart, &val));
   80714:	461f      	mov	r7, r3
   80716:	4e1b      	ldr	r6, [pc, #108]	; (80784 <usart_serial_getchar+0x98>)
   80718:	4638      	mov	r0, r7
   8071a:	a901      	add	r1, sp, #4
   8071c:	47b0      	blx	r6
   8071e:	2800      	cmp	r0, #0
   80720:	d1fa      	bne.n	80718 <usart_serial_getchar+0x2c>
		*data = (uint8_t)(val & 0xFF);
   80722:	9b01      	ldr	r3, [sp, #4]
   80724:	702b      	strb	r3, [r5, #0]
   80726:	e019      	b.n	8075c <usart_serial_getchar+0x70>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   80728:	4b17      	ldr	r3, [pc, #92]	; (80788 <usart_serial_getchar+0x9c>)
   8072a:	4298      	cmp	r0, r3
   8072c:	d109      	bne.n	80742 <usart_serial_getchar+0x56>
		while (usart_read(p_usart, &val));
   8072e:	461e      	mov	r6, r3
   80730:	4c14      	ldr	r4, [pc, #80]	; (80784 <usart_serial_getchar+0x98>)
   80732:	4630      	mov	r0, r6
   80734:	a901      	add	r1, sp, #4
   80736:	47a0      	blx	r4
   80738:	2800      	cmp	r0, #0
   8073a:	d1fa      	bne.n	80732 <usart_serial_getchar+0x46>
		*data = (uint8_t)(val & 0xFF);
   8073c:	9b01      	ldr	r3, [sp, #4]
   8073e:	702b      	strb	r3, [r5, #0]
   80740:	e018      	b.n	80774 <usart_serial_getchar+0x88>
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   80742:	4b12      	ldr	r3, [pc, #72]	; (8078c <usart_serial_getchar+0xa0>)
   80744:	429c      	cmp	r4, r3
   80746:	d109      	bne.n	8075c <usart_serial_getchar+0x70>
		while (usart_read(p_usart, &val));
   80748:	461e      	mov	r6, r3
   8074a:	4c0e      	ldr	r4, [pc, #56]	; (80784 <usart_serial_getchar+0x98>)
   8074c:	4630      	mov	r0, r6
   8074e:	a901      	add	r1, sp, #4
   80750:	47a0      	blx	r4
   80752:	2800      	cmp	r0, #0
   80754:	d1fa      	bne.n	8074c <usart_serial_getchar+0x60>
		*data = (uint8_t)(val & 0xFF);
   80756:	9b01      	ldr	r3, [sp, #4]
   80758:	702b      	strb	r3, [r5, #0]
   8075a:	e00b      	b.n	80774 <usart_serial_getchar+0x88>
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   8075c:	4b0c      	ldr	r3, [pc, #48]	; (80790 <usart_serial_getchar+0xa4>)
   8075e:	429c      	cmp	r4, r3
   80760:	d108      	bne.n	80774 <usart_serial_getchar+0x88>
		while (usart_read(p_usart, &val));
   80762:	461e      	mov	r6, r3
   80764:	4c07      	ldr	r4, [pc, #28]	; (80784 <usart_serial_getchar+0x98>)
   80766:	4630      	mov	r0, r6
   80768:	a901      	add	r1, sp, #4
   8076a:	47a0      	blx	r4
   8076c:	2800      	cmp	r0, #0
   8076e:	d1fa      	bne.n	80766 <usart_serial_getchar+0x7a>
		*data = (uint8_t)(val & 0xFF);
   80770:	9b01      	ldr	r3, [sp, #4]
   80772:	702b      	strb	r3, [r5, #0]
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
   80774:	b003      	add	sp, #12
   80776:	bdf0      	pop	{r4, r5, r6, r7, pc}
   80778:	400e0800 	.word	0x400e0800
   8077c:	00082421 	.word	0x00082421
   80780:	40098000 	.word	0x40098000
   80784:	0008036d 	.word	0x0008036d
   80788:	4009c000 	.word	0x4009c000
   8078c:	400a0000 	.word	0x400a0000
   80790:	400a4000 	.word	0x400a4000

00080794 <usart_serial_putchar>:
 *   \retval 1  The character was written.
 *   \retval 0  The function timed out before the USART transmitter became
 * ready to send.
 */
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
   80794:	b570      	push	{r4, r5, r6, lr}
   80796:	460c      	mov	r4, r1
#ifdef UART
	if (UART == (Uart*)p_usart) {
   80798:	4b1e      	ldr	r3, [pc, #120]	; (80814 <usart_serial_putchar+0x80>)
   8079a:	4298      	cmp	r0, r3
   8079c:	d108      	bne.n	807b0 <usart_serial_putchar+0x1c>
		while (uart_write((Uart*)p_usart, c)!=0);
   8079e:	461e      	mov	r6, r3
   807a0:	4d1d      	ldr	r5, [pc, #116]	; (80818 <usart_serial_putchar+0x84>)
   807a2:	4630      	mov	r0, r6
   807a4:	4621      	mov	r1, r4
   807a6:	47a8      	blx	r5
   807a8:	2800      	cmp	r0, #0
   807aa:	d1fa      	bne.n	807a2 <usart_serial_putchar+0xe>
		return 1;
   807ac:	2001      	movs	r0, #1
   807ae:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   807b0:	4b1a      	ldr	r3, [pc, #104]	; (8081c <usart_serial_putchar+0x88>)
   807b2:	4298      	cmp	r0, r3
   807b4:	d108      	bne.n	807c8 <usart_serial_putchar+0x34>
		while (usart_write(p_usart, c)!=0);
   807b6:	461e      	mov	r6, r3
   807b8:	4d19      	ldr	r5, [pc, #100]	; (80820 <usart_serial_putchar+0x8c>)
   807ba:	4630      	mov	r0, r6
   807bc:	4621      	mov	r1, r4
   807be:	47a8      	blx	r5
   807c0:	2800      	cmp	r0, #0
   807c2:	d1fa      	bne.n	807ba <usart_serial_putchar+0x26>
		return 1;
   807c4:	2001      	movs	r0, #1
   807c6:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   807c8:	4b16      	ldr	r3, [pc, #88]	; (80824 <usart_serial_putchar+0x90>)
   807ca:	4298      	cmp	r0, r3
   807cc:	d108      	bne.n	807e0 <usart_serial_putchar+0x4c>
		while (usart_write(p_usart, c)!=0);
   807ce:	461e      	mov	r6, r3
   807d0:	4d13      	ldr	r5, [pc, #76]	; (80820 <usart_serial_putchar+0x8c>)
   807d2:	4630      	mov	r0, r6
   807d4:	4621      	mov	r1, r4
   807d6:	47a8      	blx	r5
   807d8:	2800      	cmp	r0, #0
   807da:	d1fa      	bne.n	807d2 <usart_serial_putchar+0x3e>
		return 1;
   807dc:	2001      	movs	r0, #1
   807de:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   807e0:	4b11      	ldr	r3, [pc, #68]	; (80828 <usart_serial_putchar+0x94>)
   807e2:	4298      	cmp	r0, r3
   807e4:	d108      	bne.n	807f8 <usart_serial_putchar+0x64>
		while (usart_write(p_usart, c)!=0);
   807e6:	461e      	mov	r6, r3
   807e8:	4d0d      	ldr	r5, [pc, #52]	; (80820 <usart_serial_putchar+0x8c>)
   807ea:	4630      	mov	r0, r6
   807ec:	4621      	mov	r1, r4
   807ee:	47a8      	blx	r5
   807f0:	2800      	cmp	r0, #0
   807f2:	d1fa      	bne.n	807ea <usart_serial_putchar+0x56>
		return 1;
   807f4:	2001      	movs	r0, #1
   807f6:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   807f8:	4b0c      	ldr	r3, [pc, #48]	; (8082c <usart_serial_putchar+0x98>)
   807fa:	4298      	cmp	r0, r3
   807fc:	d108      	bne.n	80810 <usart_serial_putchar+0x7c>
		while (usart_write(p_usart, c)!=0);
   807fe:	461e      	mov	r6, r3
   80800:	4d07      	ldr	r5, [pc, #28]	; (80820 <usart_serial_putchar+0x8c>)
   80802:	4630      	mov	r0, r6
   80804:	4621      	mov	r1, r4
   80806:	47a8      	blx	r5
   80808:	2800      	cmp	r0, #0
   8080a:	d1fa      	bne.n	80802 <usart_serial_putchar+0x6e>
		return 1;
   8080c:	2001      	movs	r0, #1
   8080e:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
	}
# endif
#endif /* ifdef USART */

	return 0;
   80810:	2000      	movs	r0, #0
}
   80812:	bd70      	pop	{r4, r5, r6, pc}
   80814:	400e0800 	.word	0x400e0800
   80818:	00082411 	.word	0x00082411
   8081c:	40098000 	.word	0x40098000
   80820:	00080359 	.word	0x00080359
   80824:	4009c000 	.word	0x4009c000
   80828:	400a0000 	.word	0x400a0000
   8082c:	400a4000 	.word	0x400a4000

00080830 <configure_console>:
#include "UARTFunctions.h"
#include "uart.h"
#include "conf_uart_serial.h"
#include "global_variables.h"

void configure_console(void){
   80830:	b530      	push	{r4, r5, lr}
   80832:	b085      	sub	sp, #20
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
   80834:	2008      	movs	r0, #8
   80836:	4d18      	ldr	r5, [pc, #96]	; (80898 <configure_console+0x68>)
   80838:	47a8      	blx	r5
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
   8083a:	4c18      	ldr	r4, [pc, #96]	; (8089c <configure_console+0x6c>)
   8083c:	4b18      	ldr	r3, [pc, #96]	; (808a0 <configure_console+0x70>)
   8083e:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
   80840:	4a18      	ldr	r2, [pc, #96]	; (808a4 <configure_console+0x74>)
   80842:	4b19      	ldr	r3, [pc, #100]	; (808a8 <configure_console+0x78>)
   80844:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
   80846:	4a19      	ldr	r2, [pc, #100]	; (808ac <configure_console+0x7c>)
   80848:	4b19      	ldr	r3, [pc, #100]	; (808b0 <configure_console+0x80>)
   8084a:	601a      	str	r2, [r3, #0]
static inline void usart_serial_init(usart_if p_usart,
		usart_serial_options_t *opt)
{
#if ((!SAM4L) && (!SAMG55))
	sam_uart_opt_t uart_settings;
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
   8084c:	4b19      	ldr	r3, [pc, #100]	; (808b4 <configure_console+0x84>)
   8084e:	9301      	str	r3, [sp, #4]
	uart_settings.ul_baudrate = opt->baudrate;
   80850:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
   80854:	9302      	str	r3, [sp, #8]
	uart_settings.ul_mode = opt->paritytype;
   80856:	f44f 6300 	mov.w	r3, #2048	; 0x800
   8085a:	9303      	str	r3, [sp, #12]
   8085c:	2008      	movs	r0, #8
   8085e:	47a8      	blx	r5
	
#ifdef UART
	if (UART == (Uart*)p_usart) {
		sysclk_enable_peripheral_clock(ID_UART);
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
   80860:	4620      	mov	r0, r4
   80862:	a901      	add	r1, sp, #4
   80864:	4b14      	ldr	r3, [pc, #80]	; (808b8 <configure_console+0x88>)
   80866:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
   80868:	4d14      	ldr	r5, [pc, #80]	; (808bc <configure_console+0x8c>)
   8086a:	682b      	ldr	r3, [r5, #0]
   8086c:	6898      	ldr	r0, [r3, #8]
   8086e:	2100      	movs	r1, #0
   80870:	4c13      	ldr	r4, [pc, #76]	; (808c0 <configure_console+0x90>)
   80872:	47a0      	blx	r4
	setbuf(stdin, NULL);
   80874:	682b      	ldr	r3, [r5, #0]
   80876:	6858      	ldr	r0, [r3, #4]
   80878:	2100      	movs	r1, #0
   8087a:	47a0      	blx	r4
		ioport_port_mask_t mask, ioport_mode_t mode)
{
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
   8087c:	4b11      	ldr	r3, [pc, #68]	; (808c4 <configure_console+0x94>)
   8087e:	f44f 7280 	mov.w	r2, #256	; 0x100
   80882:	665a      	str	r2, [r3, #100]	; 0x64
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
   80884:	655a      	str	r2, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
   80886:	625a      	str	r2, [r3, #36]	; 0x24
#else
		base->PIO_IFSCER = mask;
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
   80888:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

#if !defined(IOPORT_MODE_MUX_BIT1)
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABSR |= mask;
	} else {
		base->PIO_ABSR &= ~mask;
   8088c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   8088e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
   80892:	671a      	str	r2, [r3, #112]	; 0x70
	// Configure console UART.
	sysclk_enable_peripheral_clock(CONSOLE_UART_ID);
	stdio_serial_init(CONF_UART, &uart_serial_options);
	// configure RX0 pin as pull-up otherwise it won't receive anything (only receive 0)
	ioport_set_pin_mode(PIO_PA8_IDX, IOPORT_MODE_PULLUP);
}
   80894:	b005      	add	sp, #20
   80896:	bd30      	pop	{r4, r5, pc}
   80898:	000828dd 	.word	0x000828dd
   8089c:	400e0800 	.word	0x400e0800
   808a0:	20078ca0 	.word	0x20078ca0
   808a4:	00080795 	.word	0x00080795
   808a8:	20078c9c 	.word	0x20078c9c
   808ac:	000806ed 	.word	0x000806ed
   808b0:	20078c98 	.word	0x20078c98
   808b4:	0501bd00 	.word	0x0501bd00
   808b8:	000823d1 	.word	0x000823d1
   808bc:	20070580 	.word	0x20070580
   808c0:	00083ad5 	.word	0x00083ad5
   808c4:	400e0e00 	.word	0x400e0e00

000808c8 <getPIDValues>:

/* Function that receives values from Matlab */
void getPIDValues()
{
   808c8:	b570      	push	{r4, r5, r6, lr}
   808ca:	b082      	sub	sp, #8
	// divier which is used to decode encoded doubles sent from Matlab
	const uint8_t divider = 100;

	isMatlab = 0; // 1 for matlab, 0 for terminal debugging
   808cc:	2300      	movs	r3, #0
   808ce:	4a57      	ldr	r2, [pc, #348]	; (80a2c <getPIDValues+0x164>)
   808d0:	7013      	strb	r3, [r2, #0]
	uint16_t kP_Gain_temp = 0;
   808d2:	f8ad 3006 	strh.w	r3, [sp, #6]
	uint16_t kP_Gain_temp2 = 0;
	uint16_t kI_Gain_temp = 0;
   808d6:	f8ad 3004 	strh.w	r3, [sp, #4]
	uint16_t kD_Gain_temp = 0;
   808da:	f8ad 3002 	strh.w	r3, [sp, #2]
	while (!uart_is_rx_ready (CONF_UART)){
   808de:	4d54      	ldr	r5, [pc, #336]	; (80a30 <getPIDValues+0x168>)
   808e0:	4c54      	ldr	r4, [pc, #336]	; (80a34 <getPIDValues+0x16c>)
		vTaskDelay(1);
   808e2:	4e55      	ldr	r6, [pc, #340]	; (80a38 <getPIDValues+0x170>)
	isMatlab = 0; // 1 for matlab, 0 for terminal debugging
	uint16_t kP_Gain_temp = 0;
	uint16_t kP_Gain_temp2 = 0;
	uint16_t kI_Gain_temp = 0;
	uint16_t kD_Gain_temp = 0;
	while (!uart_is_rx_ready (CONF_UART)){
   808e4:	e001      	b.n	808ea <getPIDValues+0x22>
		vTaskDelay(1);
   808e6:	2001      	movs	r0, #1
   808e8:	47b0      	blx	r6
	isMatlab = 0; // 1 for matlab, 0 for terminal debugging
	uint16_t kP_Gain_temp = 0;
	uint16_t kP_Gain_temp2 = 0;
	uint16_t kI_Gain_temp = 0;
	uint16_t kD_Gain_temp = 0;
	while (!uart_is_rx_ready (CONF_UART)){
   808ea:	4628      	mov	r0, r5
   808ec:	47a0      	blx	r4
   808ee:	2800      	cmp	r0, #0
   808f0:	d0f9      	beq.n	808e6 <getPIDValues+0x1e>
		vTaskDelay(1);
	}
	uart_read(CONF_UART, &isMatlab);
   808f2:	4c4e      	ldr	r4, [pc, #312]	; (80a2c <getPIDValues+0x164>)
   808f4:	484e      	ldr	r0, [pc, #312]	; (80a30 <getPIDValues+0x168>)
   808f6:	4621      	mov	r1, r4
   808f8:	4b50      	ldr	r3, [pc, #320]	; (80a3c <getPIDValues+0x174>)
   808fa:	4798      	blx	r3
	if(isMatlab == 48){ // Receive 48 because its char, 48 = 0
   808fc:	7823      	ldrb	r3, [r4, #0]
   808fe:	2b30      	cmp	r3, #48	; 0x30
   80900:	d124      	bne.n	8094c <getPIDValues+0x84>
		isMatlab = 0; // save 0 to indicate is not Matlab COM
   80902:	2200      	movs	r2, #0
   80904:	7022      	strb	r2, [r4, #0]
		printf("Terminal debugging enabled\n");
   80906:	484e      	ldr	r0, [pc, #312]	; (80a40 <getPIDValues+0x178>)
   80908:	4c4e      	ldr	r4, [pc, #312]	; (80a44 <getPIDValues+0x17c>)
   8090a:	47a0      	blx	r4
		// Set debugging values
		kP_Gain_temp = KP_GAIN_DEBUGGING;
   8090c:	233c      	movs	r3, #60	; 0x3c
   8090e:	f8ad 3006 	strh.w	r3, [sp, #6]
		kI_Gain_temp = KI_GAIN_DEBUGGING;
   80912:	2209      	movs	r2, #9
   80914:	f8ad 2004 	strh.w	r2, [sp, #4]
		kD_Gain_temp = KD_GAIN_DEBUGGING;
   80918:	f8ad 3002 	strh.w	r3, [sp, #2]
		setPoint = SETPOINT_DEBUGGING;
   8091c:	4d4a      	ldr	r5, [pc, #296]	; (80a48 <getPIDValues+0x180>)
   8091e:	2314      	movs	r3, #20
   80920:	602b      	str	r3, [r5, #0]
		printf("Preset values:\n");
   80922:	484a      	ldr	r0, [pc, #296]	; (80a4c <getPIDValues+0x184>)
   80924:	47a0      	blx	r4
		printf("kP: %u\n\r", (uint16_t)(kP_Gain_temp));
   80926:	484a      	ldr	r0, [pc, #296]	; (80a50 <getPIDValues+0x188>)
   80928:	f8bd 1006 	ldrh.w	r1, [sp, #6]
   8092c:	47a0      	blx	r4
		printf("kI: %u\n\r", (uint16_t)(kI_Gain_temp));
   8092e:	4849      	ldr	r0, [pc, #292]	; (80a54 <getPIDValues+0x18c>)
   80930:	f8bd 1004 	ldrh.w	r1, [sp, #4]
   80934:	47a0      	blx	r4
		printf("kD: %u\n\r", (uint16_t)(kD_Gain_temp));
   80936:	4848      	ldr	r0, [pc, #288]	; (80a58 <getPIDValues+0x190>)
   80938:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   8093c:	47a0      	blx	r4
		printf("Setpoint: %u\n\r", setPoint);
   8093e:	4847      	ldr	r0, [pc, #284]	; (80a5c <getPIDValues+0x194>)
   80940:	6829      	ldr	r1, [r5, #0]
   80942:	47a0      	blx	r4
   80944:	e039      	b.n	809ba <getPIDValues+0xf2>
		} else {
		while (!uart_is_rx_ready (CONF_UART)){
			vTaskDelay(1);
   80946:	2001      	movs	r0, #1
   80948:	47b0      	blx	r6
   8094a:	e002      	b.n	80952 <getPIDValues+0x8a>
		printf("kP: %u\n\r", (uint16_t)(kP_Gain_temp));
		printf("kI: %u\n\r", (uint16_t)(kI_Gain_temp));
		printf("kD: %u\n\r", (uint16_t)(kD_Gain_temp));
		printf("Setpoint: %u\n\r", setPoint);
		} else {
		while (!uart_is_rx_ready (CONF_UART)){
   8094c:	4d38      	ldr	r5, [pc, #224]	; (80a30 <getPIDValues+0x168>)
   8094e:	4c39      	ldr	r4, [pc, #228]	; (80a34 <getPIDValues+0x16c>)
			vTaskDelay(1);
   80950:	4e39      	ldr	r6, [pc, #228]	; (80a38 <getPIDValues+0x170>)
		printf("kP: %u\n\r", (uint16_t)(kP_Gain_temp));
		printf("kI: %u\n\r", (uint16_t)(kI_Gain_temp));
		printf("kD: %u\n\r", (uint16_t)(kD_Gain_temp));
		printf("Setpoint: %u\n\r", setPoint);
		} else {
		while (!uart_is_rx_ready (CONF_UART)){
   80952:	4628      	mov	r0, r5
   80954:	47a0      	blx	r4
   80956:	2800      	cmp	r0, #0
   80958:	d0f5      	beq.n	80946 <getPIDValues+0x7e>
			vTaskDelay(1);
		}

		uart_read(CONF_UART, &kP_Gain_temp);
   8095a:	4835      	ldr	r0, [pc, #212]	; (80a30 <getPIDValues+0x168>)
   8095c:	f10d 0106 	add.w	r1, sp, #6
   80960:	4b36      	ldr	r3, [pc, #216]	; (80a3c <getPIDValues+0x174>)
   80962:	4798      	blx	r3
		while (!uart_is_rx_ready (CONF_UART)){
   80964:	4d32      	ldr	r5, [pc, #200]	; (80a30 <getPIDValues+0x168>)
   80966:	4c33      	ldr	r4, [pc, #204]	; (80a34 <getPIDValues+0x16c>)
			vTaskDelay(1);
   80968:	4e33      	ldr	r6, [pc, #204]	; (80a38 <getPIDValues+0x170>)
		while (!uart_is_rx_ready (CONF_UART)){
			vTaskDelay(1);
		}

		uart_read(CONF_UART, &kP_Gain_temp);
		while (!uart_is_rx_ready (CONF_UART)){
   8096a:	e001      	b.n	80970 <getPIDValues+0xa8>
			vTaskDelay(1);
   8096c:	2001      	movs	r0, #1
   8096e:	47b0      	blx	r6
		while (!uart_is_rx_ready (CONF_UART)){
			vTaskDelay(1);
		}

		uart_read(CONF_UART, &kP_Gain_temp);
		while (!uart_is_rx_ready (CONF_UART)){
   80970:	4628      	mov	r0, r5
   80972:	47a0      	blx	r4
   80974:	2800      	cmp	r0, #0
   80976:	d0f9      	beq.n	8096c <getPIDValues+0xa4>
			vTaskDelay(1);
		}
		uart_read(CONF_UART, &kI_Gain_temp);
   80978:	482d      	ldr	r0, [pc, #180]	; (80a30 <getPIDValues+0x168>)
   8097a:	a901      	add	r1, sp, #4
   8097c:	4b2f      	ldr	r3, [pc, #188]	; (80a3c <getPIDValues+0x174>)
   8097e:	4798      	blx	r3
		while (!uart_is_rx_ready (CONF_UART)){
   80980:	4d2b      	ldr	r5, [pc, #172]	; (80a30 <getPIDValues+0x168>)
   80982:	4c2c      	ldr	r4, [pc, #176]	; (80a34 <getPIDValues+0x16c>)
			vTaskDelay(1);
   80984:	4e2c      	ldr	r6, [pc, #176]	; (80a38 <getPIDValues+0x170>)
		uart_read(CONF_UART, &kP_Gain_temp);
		while (!uart_is_rx_ready (CONF_UART)){
			vTaskDelay(1);
		}
		uart_read(CONF_UART, &kI_Gain_temp);
		while (!uart_is_rx_ready (CONF_UART)){
   80986:	e001      	b.n	8098c <getPIDValues+0xc4>
			vTaskDelay(1);
   80988:	2001      	movs	r0, #1
   8098a:	47b0      	blx	r6
		uart_read(CONF_UART, &kP_Gain_temp);
		while (!uart_is_rx_ready (CONF_UART)){
			vTaskDelay(1);
		}
		uart_read(CONF_UART, &kI_Gain_temp);
		while (!uart_is_rx_ready (CONF_UART)){
   8098c:	4628      	mov	r0, r5
   8098e:	47a0      	blx	r4
   80990:	2800      	cmp	r0, #0
   80992:	d0f9      	beq.n	80988 <getPIDValues+0xc0>
			vTaskDelay(1);
		};
		uart_read(CONF_UART, &kD_Gain_temp);
   80994:	4826      	ldr	r0, [pc, #152]	; (80a30 <getPIDValues+0x168>)
   80996:	f10d 0102 	add.w	r1, sp, #2
   8099a:	4b28      	ldr	r3, [pc, #160]	; (80a3c <getPIDValues+0x174>)
   8099c:	4798      	blx	r3
		while (!uart_is_rx_ready (CONF_UART)){
   8099e:	4d24      	ldr	r5, [pc, #144]	; (80a30 <getPIDValues+0x168>)
   809a0:	4c24      	ldr	r4, [pc, #144]	; (80a34 <getPIDValues+0x16c>)
			vTaskDelay(1);
   809a2:	4e25      	ldr	r6, [pc, #148]	; (80a38 <getPIDValues+0x170>)
		uart_read(CONF_UART, &kI_Gain_temp);
		while (!uart_is_rx_ready (CONF_UART)){
			vTaskDelay(1);
		};
		uart_read(CONF_UART, &kD_Gain_temp);
		while (!uart_is_rx_ready (CONF_UART)){
   809a4:	e001      	b.n	809aa <getPIDValues+0xe2>
			vTaskDelay(1);
   809a6:	2001      	movs	r0, #1
   809a8:	47b0      	blx	r6
		uart_read(CONF_UART, &kI_Gain_temp);
		while (!uart_is_rx_ready (CONF_UART)){
			vTaskDelay(1);
		};
		uart_read(CONF_UART, &kD_Gain_temp);
		while (!uart_is_rx_ready (CONF_UART)){
   809aa:	4628      	mov	r0, r5
   809ac:	47a0      	blx	r4
   809ae:	2800      	cmp	r0, #0
   809b0:	d0f9      	beq.n	809a6 <getPIDValues+0xde>
			vTaskDelay(1);
		};
		uart_read(CONF_UART, &setPoint);
   809b2:	481f      	ldr	r0, [pc, #124]	; (80a30 <getPIDValues+0x168>)
   809b4:	4924      	ldr	r1, [pc, #144]	; (80a48 <getPIDValues+0x180>)
   809b6:	4b21      	ldr	r3, [pc, #132]	; (80a3c <getPIDValues+0x174>)
   809b8:	4798      	blx	r3
	}

	//Convert to correct data types
	kP_Gain = (double) ((double) kP_Gain_temp / divider);
   809ba:	f8bd 0006 	ldrh.w	r0, [sp, #6]
   809be:	4b28      	ldr	r3, [pc, #160]	; (80a60 <getPIDValues+0x198>)
   809c0:	4798      	blx	r3
   809c2:	2200      	movs	r2, #0
   809c4:	4b27      	ldr	r3, [pc, #156]	; (80a64 <getPIDValues+0x19c>)
   809c6:	4c28      	ldr	r4, [pc, #160]	; (80a68 <getPIDValues+0x1a0>)
   809c8:	47a0      	blx	r4
   809ca:	4b28      	ldr	r3, [pc, #160]	; (80a6c <getPIDValues+0x1a4>)
   809cc:	e9c3 0100 	strd	r0, r1, [r3]
	kI_Gain = (double) (kI_Gain_temp / divider);
   809d0:	f8bd 0004 	ldrh.w	r0, [sp, #4]
   809d4:	4d26      	ldr	r5, [pc, #152]	; (80a70 <getPIDValues+0x1a8>)
   809d6:	fb85 3000 	smull	r3, r0, r5, r0
   809da:	4c26      	ldr	r4, [pc, #152]	; (80a74 <getPIDValues+0x1ac>)
   809dc:	1140      	asrs	r0, r0, #5
   809de:	47a0      	blx	r4
   809e0:	4b25      	ldr	r3, [pc, #148]	; (80a78 <getPIDValues+0x1b0>)
   809e2:	e9c3 0100 	strd	r0, r1, [r3]
	kD_Gain = (double) (kD_Gain_temp / divider);
   809e6:	f8bd 0002 	ldrh.w	r0, [sp, #2]
   809ea:	fb85 3000 	smull	r3, r0, r5, r0
   809ee:	1140      	asrs	r0, r0, #5
   809f0:	47a0      	blx	r4
   809f2:	4b22      	ldr	r3, [pc, #136]	; (80a7c <getPIDValues+0x1b4>)
   809f4:	e9c3 0100 	strd	r0, r1, [r3]

	// Wait here untill start signal is sent from matlab
	while (!uart_is_rx_ready (CONF_UART)){
   809f8:	4d0d      	ldr	r5, [pc, #52]	; (80a30 <getPIDValues+0x168>)
   809fa:	4c0e      	ldr	r4, [pc, #56]	; (80a34 <getPIDValues+0x16c>)
		vTaskDelay(1);
   809fc:	4e0e      	ldr	r6, [pc, #56]	; (80a38 <getPIDValues+0x170>)
	kP_Gain = (double) ((double) kP_Gain_temp / divider);
	kI_Gain = (double) (kI_Gain_temp / divider);
	kD_Gain = (double) (kD_Gain_temp / divider);

	// Wait here untill start signal is sent from matlab
	while (!uart_is_rx_ready (CONF_UART)){
   809fe:	e001      	b.n	80a04 <getPIDValues+0x13c>
		vTaskDelay(1);
   80a00:	2001      	movs	r0, #1
   80a02:	47b0      	blx	r6
	kP_Gain = (double) ((double) kP_Gain_temp / divider);
	kI_Gain = (double) (kI_Gain_temp / divider);
	kD_Gain = (double) (kD_Gain_temp / divider);

	// Wait here untill start signal is sent from matlab
	while (!uart_is_rx_ready (CONF_UART)){
   80a04:	4628      	mov	r0, r5
   80a06:	47a0      	blx	r4
   80a08:	2800      	cmp	r0, #0
   80a0a:	d0f9      	beq.n	80a00 <getPIDValues+0x138>
		vTaskDelay(1);
	};
	// Clear RX buffer
	while (uart_is_rx_ready (CONF_UART)){
   80a0c:	4c08      	ldr	r4, [pc, #32]	; (80a30 <getPIDValues+0x168>)
   80a0e:	4d09      	ldr	r5, [pc, #36]	; (80a34 <getPIDValues+0x16c>)
		uint8_t clearBuffer = 0;
		uart_read(CONF_UART, &clearBuffer);
   80a10:	4e0a      	ldr	r6, [pc, #40]	; (80a3c <getPIDValues+0x174>)
   80a12:	e005      	b.n	80a20 <getPIDValues+0x158>
	while (!uart_is_rx_ready (CONF_UART)){
		vTaskDelay(1);
	};
	// Clear RX buffer
	while (uart_is_rx_ready (CONF_UART)){
		uint8_t clearBuffer = 0;
   80a14:	a902      	add	r1, sp, #8
   80a16:	2300      	movs	r3, #0
   80a18:	f801 3d07 	strb.w	r3, [r1, #-7]!
		uart_read(CONF_UART, &clearBuffer);
   80a1c:	4620      	mov	r0, r4
   80a1e:	47b0      	blx	r6
	// Wait here untill start signal is sent from matlab
	while (!uart_is_rx_ready (CONF_UART)){
		vTaskDelay(1);
	};
	// Clear RX buffer
	while (uart_is_rx_ready (CONF_UART)){
   80a20:	4620      	mov	r0, r4
   80a22:	47a8      	blx	r5
   80a24:	2800      	cmp	r0, #0
   80a26:	d1f5      	bne.n	80a14 <getPIDValues+0x14c>
		uint8_t clearBuffer = 0;
		uart_read(CONF_UART, &clearBuffer);
	};
}
   80a28:	b002      	add	sp, #8
   80a2a:	bd70      	pop	{r4, r5, r6, pc}
   80a2c:	20070140 	.word	0x20070140
   80a30:	400e0800 	.word	0x400e0800
   80a34:	00082409 	.word	0x00082409
   80a38:	000819bd 	.word	0x000819bd
   80a3c:	00082421 	.word	0x00082421
   80a40:	0008689c 	.word	0x0008689c
   80a44:	00083925 	.word	0x00083925
   80a48:	20070a10 	.word	0x20070a10
   80a4c:	000868b8 	.word	0x000868b8
   80a50:	000868c8 	.word	0x000868c8
   80a54:	000868d4 	.word	0x000868d4
   80a58:	000868e0 	.word	0x000868e0
   80a5c:	000868ec 	.word	0x000868ec
   80a60:	00082ebd 	.word	0x00082ebd
   80a64:	40590000 	.word	0x40590000
   80a68:	000831fd 	.word	0x000831fd
   80a6c:	200709f8 	.word	0x200709f8
   80a70:	51eb851f 	.word	0x51eb851f
   80a74:	00082edd 	.word	0x00082edd
   80a78:	20070a18 	.word	0x20070a18
   80a7c:	20070a00 	.word	0x20070a00

00080a80 <sendValues>:

/* Function that sends values to Matlab */
void sendValues(){
   80a80:	b538      	push	{r3, r4, r5, lr}
	if(!isMatlab){
   80a82:	4b0c      	ldr	r3, [pc, #48]	; (80ab4 <sendValues+0x34>)
   80a84:	781b      	ldrb	r3, [r3, #0]
   80a86:	b913      	cbnz	r3, 80a8e <sendValues+0xe>
		printf("Values:\n");
   80a88:	480b      	ldr	r0, [pc, #44]	; (80ab8 <sendValues+0x38>)
   80a8a:	4b0c      	ldr	r3, [pc, #48]	; (80abc <sendValues+0x3c>)
   80a8c:	4798      	blx	r3
	}
	//printf("%i\n\r", (int32_t)((float)(10000*D_Output)));
	printf("%i\n\r", error);
   80a8e:	4d0c      	ldr	r5, [pc, #48]	; (80ac0 <sendValues+0x40>)
   80a90:	4628      	mov	r0, r5
   80a92:	4b0c      	ldr	r3, [pc, #48]	; (80ac4 <sendValues+0x44>)
   80a94:	6819      	ldr	r1, [r3, #0]
   80a96:	4c09      	ldr	r4, [pc, #36]	; (80abc <sendValues+0x3c>)
   80a98:	47a0      	blx	r4
	printf("%i\n\r", pwm_val);
   80a9a:	4628      	mov	r0, r5
   80a9c:	4b0a      	ldr	r3, [pc, #40]	; (80ac8 <sendValues+0x48>)
   80a9e:	6819      	ldr	r1, [r3, #0]
   80aa0:	47a0      	blx	r4
	printf("%i\n\r", distance);
   80aa2:	4628      	mov	r0, r5
   80aa4:	4b09      	ldr	r3, [pc, #36]	; (80acc <sendValues+0x4c>)
   80aa6:	6819      	ldr	r1, [r3, #0]
   80aa8:	47a0      	blx	r4
	printf("%i\n\r", setPoint);
   80aaa:	4628      	mov	r0, r5
   80aac:	4b08      	ldr	r3, [pc, #32]	; (80ad0 <sendValues+0x50>)
   80aae:	6819      	ldr	r1, [r3, #0]
   80ab0:	47a0      	blx	r4
   80ab2:	bd38      	pop	{r3, r4, r5, pc}
   80ab4:	20070140 	.word	0x20070140
   80ab8:	000868fc 	.word	0x000868fc
   80abc:	00083925 	.word	0x00083925
   80ac0:	00086908 	.word	0x00086908
   80ac4:	200709f0 	.word	0x200709f0
   80ac8:	200709e4 	.word	0x200709e4
   80acc:	200709ec 	.word	0x200709ec
   80ad0:	20070a10 	.word	0x20070a10

00080ad4 <SerialComTask>:
#include "UARTFunctions.h"
#include "ADCCustom.h"
#include "testFunctions.h"

void SerialComTask (void *pvParameters)
{
   80ad4:	b5f0      	push	{r4, r5, r6, r7, lr}
   80ad6:	b083      	sub	sp, #12
	getPIDValues(); // Get Values from Matlab
   80ad8:	4b10      	ldr	r3, [pc, #64]	; (80b1c <SerialComTask+0x48>)
   80ada:	4798      	blx	r3

	xSemaphoreGive(sem); // Tell PID Task to start
   80adc:	4b10      	ldr	r3, [pc, #64]	; (80b20 <SerialComTask+0x4c>)
   80ade:	6818      	ldr	r0, [r3, #0]
   80ae0:	2100      	movs	r1, #0
   80ae2:	460a      	mov	r2, r1
   80ae4:	460b      	mov	r3, r1
   80ae6:	4c0f      	ldr	r4, [pc, #60]	; (80b24 <SerialComTask+0x50>)
   80ae8:	47a0      	blx	r4

	for(;;){

		// Wait here for Matlab to send signal its ready to receive values
		while (!uart_is_rx_ready (CONF_UART)){
   80aea:	4c0f      	ldr	r4, [pc, #60]	; (80b28 <SerialComTask+0x54>)
   80aec:	4d0f      	ldr	r5, [pc, #60]	; (80b2c <SerialComTask+0x58>)
		};

		// Clear RX buffer
		while (uart_is_rx_ready (CONF_UART)){
			uint8_t clearBuffer = 0;
			uart_read(CONF_UART, &clearBuffer);
   80aee:	4e10      	ldr	r6, [pc, #64]	; (80b30 <SerialComTask+0x5c>)
		};

		sendValues(); // Send values to MATLAB for graphing
   80af0:	4f10      	ldr	r7, [pc, #64]	; (80b34 <SerialComTask+0x60>)
   80af2:	e002      	b.n	80afa <SerialComTask+0x26>

	for(;;){

		// Wait here for Matlab to send signal its ready to receive values
		while (!uart_is_rx_ready (CONF_UART)){
			vTaskDelay(1);
   80af4:	2001      	movs	r0, #1
   80af6:	4b10      	ldr	r3, [pc, #64]	; (80b38 <SerialComTask+0x64>)
   80af8:	4798      	blx	r3
	xSemaphoreGive(sem); // Tell PID Task to start

	for(;;){

		// Wait here for Matlab to send signal its ready to receive values
		while (!uart_is_rx_ready (CONF_UART)){
   80afa:	4620      	mov	r0, r4
   80afc:	47a8      	blx	r5
   80afe:	2800      	cmp	r0, #0
   80b00:	d0f8      	beq.n	80af4 <SerialComTask+0x20>
   80b02:	e005      	b.n	80b10 <SerialComTask+0x3c>
			vTaskDelay(1);
		};

		// Clear RX buffer
		while (uart_is_rx_ready (CONF_UART)){
			uint8_t clearBuffer = 0;
   80b04:	a902      	add	r1, sp, #8
   80b06:	2300      	movs	r3, #0
   80b08:	f801 3d01 	strb.w	r3, [r1, #-1]!
			uart_read(CONF_UART, &clearBuffer);
   80b0c:	4620      	mov	r0, r4
   80b0e:	47b0      	blx	r6
		while (!uart_is_rx_ready (CONF_UART)){
			vTaskDelay(1);
		};

		// Clear RX buffer
		while (uart_is_rx_ready (CONF_UART)){
   80b10:	4620      	mov	r0, r4
   80b12:	47a8      	blx	r5
   80b14:	2800      	cmp	r0, #0
   80b16:	d1f5      	bne.n	80b04 <SerialComTask+0x30>
			uint8_t clearBuffer = 0;
			uart_read(CONF_UART, &clearBuffer);
		};

		sendValues(); // Send values to MATLAB for graphing
   80b18:	47b8      	blx	r7
	}
   80b1a:	e7ee      	b.n	80afa <SerialComTask+0x26>
   80b1c:	000808c9 	.word	0x000808c9
   80b20:	200709dc 	.word	0x200709dc
   80b24:	00081091 	.word	0x00081091
   80b28:	400e0800 	.word	0x400e0800
   80b2c:	00082409 	.word	0x00082409
   80b30:	00082421 	.word	0x00082421
   80b34:	00080a81 	.word	0x00080a81
   80b38:	000819bd 	.word	0x000819bd

00080b3c <vListInitialise>:
void vListInitialise( xList *pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
   80b3c:	f100 0308 	add.w	r3, r0, #8
   80b40:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
   80b42:	f64f 72ff 	movw	r2, #65535	; 0xffff
   80b46:	8102      	strh	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
   80b48:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
   80b4a:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
   80b4c:	2300      	movs	r3, #0
   80b4e:	6003      	str	r3, [r0, #0]
   80b50:	4770      	bx	lr
   80b52:	bf00      	nop

00080b54 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
   80b54:	2300      	movs	r3, #0
   80b56:	6103      	str	r3, [r0, #16]
   80b58:	4770      	bx	lr
   80b5a:	bf00      	nop

00080b5c <vListInsertEnd>:

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
   80b5c:	6843      	ldr	r3, [r0, #4]

	pxNewListItem->pxNext = pxIndex->pxNext;
   80b5e:	685a      	ldr	r2, [r3, #4]
   80b60:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxPrevious = pxList->pxIndex;
   80b62:	6842      	ldr	r2, [r0, #4]
   80b64:	608a      	str	r2, [r1, #8]
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
   80b66:	685a      	ldr	r2, [r3, #4]
   80b68:	6091      	str	r1, [r2, #8]
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
   80b6a:	6059      	str	r1, [r3, #4]
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
   80b6c:	6041      	str	r1, [r0, #4]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   80b6e:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
   80b70:	6803      	ldr	r3, [r0, #0]
   80b72:	3301      	adds	r3, #1
   80b74:	6003      	str	r3, [r0, #0]
   80b76:	4770      	bx	lr

00080b78 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
   80b78:	b410      	push	{r4}
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
   80b7a:	880c      	ldrh	r4, [r1, #0]
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
   80b7c:	f64f 73ff 	movw	r3, #65535	; 0xffff
   80b80:	429c      	cmp	r4, r3
   80b82:	d101      	bne.n	80b88 <vListInsert+0x10>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
   80b84:	6902      	ldr	r2, [r0, #16]
   80b86:	e00c      	b.n	80ba2 <vListInsert+0x2a>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/

		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
   80b88:	f100 0208 	add.w	r2, r0, #8
   80b8c:	68c3      	ldr	r3, [r0, #12]
   80b8e:	881b      	ldrh	r3, [r3, #0]
   80b90:	b29b      	uxth	r3, r3
   80b92:	429c      	cmp	r4, r3
   80b94:	d305      	bcc.n	80ba2 <vListInsert+0x2a>
   80b96:	6852      	ldr	r2, [r2, #4]
   80b98:	6853      	ldr	r3, [r2, #4]
   80b9a:	881b      	ldrh	r3, [r3, #0]
   80b9c:	b29b      	uxth	r3, r3
   80b9e:	429c      	cmp	r4, r3
   80ba0:	d2f9      	bcs.n	80b96 <vListInsert+0x1e>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
   80ba2:	6853      	ldr	r3, [r2, #4]
   80ba4:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
   80ba6:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
   80ba8:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
   80baa:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   80bac:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
   80bae:	6803      	ldr	r3, [r0, #0]
   80bb0:	3301      	adds	r3, #1
   80bb2:	6003      	str	r3, [r0, #0]
}
   80bb4:	f85d 4b04 	ldr.w	r4, [sp], #4
   80bb8:	4770      	bx	lr
   80bba:	bf00      	nop

00080bbc <uxListRemove>:

unsigned portBASE_TYPE uxListRemove( xListItem *pxItemToRemove )
{
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
   80bbc:	6843      	ldr	r3, [r0, #4]
   80bbe:	6882      	ldr	r2, [r0, #8]
   80bc0:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
   80bc2:	6883      	ldr	r3, [r0, #8]
   80bc4:	6842      	ldr	r2, [r0, #4]
   80bc6:	605a      	str	r2, [r3, #4]

	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
   80bc8:	6903      	ldr	r3, [r0, #16]

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
   80bca:	685a      	ldr	r2, [r3, #4]
   80bcc:	4282      	cmp	r2, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
   80bce:	bf04      	itt	eq
   80bd0:	6882      	ldreq	r2, [r0, #8]
   80bd2:	605a      	streq	r2, [r3, #4]
	}

	pxItemToRemove->pvContainer = NULL;
   80bd4:	2200      	movs	r2, #0
   80bd6:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
   80bd8:	681a      	ldr	r2, [r3, #0]
   80bda:	3a01      	subs	r2, #1
   80bdc:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
   80bde:	6818      	ldr	r0, [r3, #0]
}
   80be0:	4770      	bx	lr
   80be2:	bf00      	nop

00080be4 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
   80be4:	4803      	ldr	r0, [pc, #12]	; (80bf4 <prvPortStartFirstTask+0x10>)
   80be6:	6800      	ldr	r0, [r0, #0]
   80be8:	6800      	ldr	r0, [r0, #0]
   80bea:	f380 8808 	msr	MSP, r0
   80bee:	b662      	cpsie	i
   80bf0:	df00      	svc	0
   80bf2:	bf00      	nop
   80bf4:	e000ed08 	.word	0xe000ed08

00080bf8 <pxPortInitialiseStack>:
portSTACK_TYPE *pxPortInitialiseStack( portSTACK_TYPE *pxTopOfStack, pdTASK_CODE pxCode, void *pvParameters )
{
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
   80bf8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   80bfc:	f840 3c04 	str.w	r3, [r0, #-4]
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) pxCode;	/* PC */
   80c00:	f840 1c08 	str.w	r1, [r0, #-8]
	pxTopOfStack--;
	*pxTopOfStack = 0;	/* LR */
   80c04:	2300      	movs	r3, #0
   80c06:	f840 3c0c 	str.w	r3, [r0, #-12]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
	*pxTopOfStack = ( portSTACK_TYPE ) pvParameters;	/* R0 */
   80c0a:	f840 2c20 	str.w	r2, [r0, #-32]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */

	return pxTopOfStack;
}
   80c0e:	3840      	subs	r0, #64	; 0x40
   80c10:	4770      	bx	lr
   80c12:	bf00      	nop

00080c14 <SVC_Handler>:
/*-----------------------------------------------------------*/

__attribute__ (( naked )) void SVC_Handler( void )
{
	__asm volatile (
   80c14:	4b06      	ldr	r3, [pc, #24]	; (80c30 <pxCurrentTCBConst2>)
   80c16:	6819      	ldr	r1, [r3, #0]
   80c18:	6808      	ldr	r0, [r1, #0]
   80c1a:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   80c1e:	f380 8809 	msr	PSP, r0
   80c22:	f04f 0000 	mov.w	r0, #0
   80c26:	f380 8811 	msr	BASEPRI, r0
   80c2a:	f04e 0e0d 	orr.w	lr, lr, #13
   80c2e:	4770      	bx	lr

00080c30 <pxCurrentTCBConst2>:
   80c30:	20078b5c 	.word	0x20078b5c

00080c34 <vPortYieldFromISR>:
/*-----------------------------------------------------------*/

void vPortYieldFromISR( void )
{
	/* Set a PendSV to request a context switch. */
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
   80c34:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   80c38:	4b01      	ldr	r3, [pc, #4]	; (80c40 <vPortYieldFromISR+0xc>)
   80c3a:	601a      	str	r2, [r3, #0]
   80c3c:	4770      	bx	lr
   80c3e:	bf00      	nop
   80c40:	e000ed04 	.word	0xe000ed04

00080c44 <ulPortSetInterruptMask>:
}
/*-----------------------------------------------------------*/

__attribute__(( naked )) unsigned long ulPortSetInterruptMask( void )
{
	__asm volatile														\
   80c44:	f3ef 8011 	mrs	r0, BASEPRI
   80c48:	f04f 01a0 	mov.w	r1, #160	; 0xa0
   80c4c:	f381 8811 	msr	BASEPRI, r1
   80c50:	4770      	bx	lr
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return 0;
}
   80c52:	2000      	movs	r0, #0

00080c54 <vPortEnterCritical>:
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
   80c54:	b508      	push	{r3, lr}
	portDISABLE_INTERRUPTS();
   80c56:	4b03      	ldr	r3, [pc, #12]	; (80c64 <vPortEnterCritical+0x10>)
   80c58:	4798      	blx	r3
	uxCriticalNesting++;
   80c5a:	4a03      	ldr	r2, [pc, #12]	; (80c68 <vPortEnterCritical+0x14>)
   80c5c:	6813      	ldr	r3, [r2, #0]
   80c5e:	3301      	adds	r3, #1
   80c60:	6013      	str	r3, [r2, #0]
   80c62:	bd08      	pop	{r3, pc}
   80c64:	00080c45 	.word	0x00080c45
   80c68:	20070144 	.word	0x20070144

00080c6c <vPortClearInterruptMask>:
}
/*-----------------------------------------------------------*/

__attribute__(( naked )) void vPortClearInterruptMask( unsigned long ulNewMaskValue )
{
	__asm volatile													\
   80c6c:	f380 8811 	msr	BASEPRI, r0
   80c70:	4770      	bx	lr
   80c72:	bf00      	nop

00080c74 <vPortExitCritical>:
	uxCriticalNesting++;
}
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
   80c74:	b508      	push	{r3, lr}
	uxCriticalNesting--;
   80c76:	4a04      	ldr	r2, [pc, #16]	; (80c88 <vPortExitCritical+0x14>)
   80c78:	6813      	ldr	r3, [r2, #0]
   80c7a:	3b01      	subs	r3, #1
   80c7c:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
   80c7e:	b913      	cbnz	r3, 80c86 <vPortExitCritical+0x12>
	{
		portENABLE_INTERRUPTS();
   80c80:	2000      	movs	r0, #0
   80c82:	4b02      	ldr	r3, [pc, #8]	; (80c8c <vPortExitCritical+0x18>)
   80c84:	4798      	blx	r3
   80c86:	bd08      	pop	{r3, pc}
   80c88:	20070144 	.word	0x20070144
   80c8c:	00080c6d 	.word	0x00080c6d

00080c90 <PendSV_Handler>:

__attribute__(( naked )) void PendSV_Handler( void )
{
	/* This is a naked function. */

	__asm volatile
   80c90:	f3ef 8009 	mrs	r0, PSP
   80c94:	4b0c      	ldr	r3, [pc, #48]	; (80cc8 <pxCurrentTCBConst>)
   80c96:	681a      	ldr	r2, [r3, #0]
   80c98:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   80c9c:	6010      	str	r0, [r2, #0]
   80c9e:	e92d 4008 	stmdb	sp!, {r3, lr}
   80ca2:	f04f 00a0 	mov.w	r0, #160	; 0xa0
   80ca6:	f380 8811 	msr	BASEPRI, r0
   80caa:	f000 feef 	bl	81a8c <vTaskSwitchContext>
   80cae:	f04f 0000 	mov.w	r0, #0
   80cb2:	f380 8811 	msr	BASEPRI, r0
   80cb6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   80cba:	6819      	ldr	r1, [r3, #0]
   80cbc:	6808      	ldr	r0, [r1, #0]
   80cbe:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   80cc2:	f380 8809 	msr	PSP, r0
   80cc6:	4770      	bx	lr

00080cc8 <pxCurrentTCBConst>:
   80cc8:	20078b5c 	.word	0x20078b5c

00080ccc <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void SysTick_Handler( void )
{
   80ccc:	b508      	push	{r3, lr}
	/* If using preemption, also force a context switch. */
	#if configUSE_PREEMPTION == 1
		portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
   80cce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   80cd2:	4b05      	ldr	r3, [pc, #20]	; (80ce8 <SysTick_Handler+0x1c>)
   80cd4:	601a      	str	r2, [r3, #0]
	to generate the tick interrupt. */
	#if configUSE_TICKLESS_IDLE == 1
		portNVIC_SYSTICK_LOAD_REG = ulTimerReloadValueForOneTick;
	#endif

	( void ) portSET_INTERRUPT_MASK_FROM_ISR();
   80cd6:	4b05      	ldr	r3, [pc, #20]	; (80cec <SysTick_Handler+0x20>)
   80cd8:	4798      	blx	r3
	{
		vTaskIncrementTick();
   80cda:	4b05      	ldr	r3, [pc, #20]	; (80cf0 <SysTick_Handler+0x24>)
   80cdc:	4798      	blx	r3
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( 0 );
   80cde:	2000      	movs	r0, #0
   80ce0:	4b04      	ldr	r3, [pc, #16]	; (80cf4 <SysTick_Handler+0x28>)
   80ce2:	4798      	blx	r3
   80ce4:	bd08      	pop	{r3, pc}
   80ce6:	bf00      	nop
   80ce8:	e000ed04 	.word	0xe000ed04
   80cec:	00080c45 	.word	0x00080c45
   80cf0:	000816f5 	.word	0x000816f5
   80cf4:	00080c6d 	.word	0x00080c6d

00080cf8 <vPortSetupTimerInterrupt>:
		ulStoppedTimerCompensation = 45UL / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;;
   80cf8:	4a03      	ldr	r2, [pc, #12]	; (80d08 <vPortSetupTimerInterrupt+0x10>)
   80cfa:	4b04      	ldr	r3, [pc, #16]	; (80d0c <vPortSetupTimerInterrupt+0x14>)
   80cfc:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
   80cfe:	2207      	movs	r2, #7
   80d00:	3b04      	subs	r3, #4
   80d02:	601a      	str	r2, [r3, #0]
   80d04:	4770      	bx	lr
   80d06:	bf00      	nop
   80d08:	0001481f 	.word	0x0001481f
   80d0c:	e000e014 	.word	0xe000e014

00080d10 <xPortStartScheduler>:

/*
 * See header file for description.
 */
portBASE_TYPE xPortStartScheduler( void )
{
   80d10:	b510      	push	{r4, lr}
	/* configMAX_SYSCALL_INTERRUPT_PRIORITY must not be set to 0.
	See http://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
   80d12:	4b09      	ldr	r3, [pc, #36]	; (80d38 <xPortStartScheduler+0x28>)
   80d14:	681a      	ldr	r2, [r3, #0]
   80d16:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
   80d1a:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
   80d1c:	681a      	ldr	r2, [r3, #0]
   80d1e:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
   80d22:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
   80d24:	4b05      	ldr	r3, [pc, #20]	; (80d3c <xPortStartScheduler+0x2c>)
   80d26:	4798      	blx	r3

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
   80d28:	2400      	movs	r4, #0
   80d2a:	4b05      	ldr	r3, [pc, #20]	; (80d40 <xPortStartScheduler+0x30>)
   80d2c:	601c      	str	r4, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
   80d2e:	4b05      	ldr	r3, [pc, #20]	; (80d44 <xPortStartScheduler+0x34>)
   80d30:	4798      	blx	r3

	/* Should not get here! */
	return 0;
}
   80d32:	4620      	mov	r0, r4
   80d34:	bd10      	pop	{r4, pc}
   80d36:	bf00      	nop
   80d38:	e000ed20 	.word	0xe000ed20
   80d3c:	00080cf9 	.word	0x00080cf9
   80d40:	20070144 	.word	0x20070144
   80d44:	00080be5 	.word	0x00080be5

00080d48 <prvInsertBlockIntoFreeList>:
xBlockLink *pxIterator;
unsigned char *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
   80d48:	4a13      	ldr	r2, [pc, #76]	; (80d98 <prvInsertBlockIntoFreeList+0x50>)
   80d4a:	e000      	b.n	80d4e <prvInsertBlockIntoFreeList+0x6>
   80d4c:	461a      	mov	r2, r3
   80d4e:	6813      	ldr	r3, [r2, #0]
   80d50:	4283      	cmp	r3, r0
   80d52:	d3fb      	bcc.n	80d4c <prvInsertBlockIntoFreeList+0x4>
	xFreeBytesRemaining -= heapSTRUCT_SIZE;
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( xBlockLink *pxBlockToInsert )
{
   80d54:	b430      	push	{r4, r5}
   80d56:	4611      	mov	r1, r2
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */	
	puc = ( unsigned char * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( unsigned char * ) pxBlockToInsert )
   80d58:	6854      	ldr	r4, [r2, #4]
   80d5a:	1915      	adds	r5, r2, r4
   80d5c:	4285      	cmp	r5, r0
   80d5e:	d103      	bne.n	80d68 <prvInsertBlockIntoFreeList+0x20>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
   80d60:	6868      	ldr	r0, [r5, #4]
   80d62:	4404      	add	r4, r0
   80d64:	6054      	str	r4, [r2, #4]
   80d66:	4610      	mov	r0, r2
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( unsigned char * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( unsigned char * ) pxIterator->pxNextFreeBlock )
   80d68:	6842      	ldr	r2, [r0, #4]
   80d6a:	1884      	adds	r4, r0, r2
   80d6c:	429c      	cmp	r4, r3
   80d6e:	d10c      	bne.n	80d8a <prvInsertBlockIntoFreeList+0x42>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
   80d70:	4b0a      	ldr	r3, [pc, #40]	; (80d9c <prvInsertBlockIntoFreeList+0x54>)
   80d72:	681b      	ldr	r3, [r3, #0]
   80d74:	429c      	cmp	r4, r3
   80d76:	d006      	beq.n	80d86 <prvInsertBlockIntoFreeList+0x3e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
   80d78:	6863      	ldr	r3, [r4, #4]
   80d7a:	441a      	add	r2, r3
   80d7c:	6042      	str	r2, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
   80d7e:	680b      	ldr	r3, [r1, #0]
   80d80:	681b      	ldr	r3, [r3, #0]
   80d82:	6003      	str	r3, [r0, #0]
   80d84:	e002      	b.n	80d8c <prvInsertBlockIntoFreeList+0x44>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
   80d86:	6004      	str	r4, [r0, #0]
   80d88:	e000      	b.n	80d8c <prvInsertBlockIntoFreeList+0x44>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;		
   80d8a:	6003      	str	r3, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
   80d8c:	4281      	cmp	r1, r0
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
   80d8e:	bf18      	it	ne
   80d90:	6008      	strne	r0, [r1, #0]
	}
}
   80d92:	bc30      	pop	{r4, r5}
   80d94:	4770      	bx	lr
   80d96:	bf00      	nop
   80d98:	20078a24 	.word	0x20078a24
   80d9c:	20078a20 	.word	0x20078a20

00080da0 <pvPortMalloc>:
/* STATIC FUNCTIONS ARE DEFINED AS MACROS TO MINIMIZE THE FUNCTION CALL DEPTH. */

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
   80da0:	b538      	push	{r3, r4, r5, lr}
   80da2:	4604      	mov	r4, r0
xBlockLink *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;

	vTaskSuspendAll();
   80da4:	4b29      	ldr	r3, [pc, #164]	; (80e4c <pvPortMalloc+0xac>)
   80da6:	4798      	blx	r3
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
   80da8:	4b29      	ldr	r3, [pc, #164]	; (80e50 <pvPortMalloc+0xb0>)
   80daa:	681b      	ldr	r3, [r3, #0]
   80dac:	b99b      	cbnz	r3, 80dd6 <pvPortMalloc+0x36>
	/* Ensure the start of the heap is aligned. */
	configASSERT( ( ( ( unsigned long ) xHeap.ucHeap ) & ( ( unsigned long ) portBYTE_ALIGNMENT_MASK ) ) == 0UL );

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) xHeap.ucHeap;
   80dae:	4a29      	ldr	r2, [pc, #164]	; (80e54 <pvPortMalloc+0xb4>)
   80db0:	4b29      	ldr	r3, [pc, #164]	; (80e58 <pvPortMalloc+0xb8>)
   80db2:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
   80db4:	2100      	movs	r1, #0
   80db6:	6051      	str	r1, [r2, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	pucHeapEnd = xHeap.ucHeap + xTotalHeapSize;
	pucHeapEnd -= heapSTRUCT_SIZE;
	pxEnd = ( void * ) pucHeapEnd;
   80db8:	f647 72f0 	movw	r2, #32752	; 0x7ff0
   80dbc:	1898      	adds	r0, r3, r2
   80dbe:	4d24      	ldr	r5, [pc, #144]	; (80e50 <pvPortMalloc+0xb0>)
   80dc0:	6028      	str	r0, [r5, #0]
	configASSERT( ( ( ( unsigned long ) pxEnd ) & ( ( unsigned long ) portBYTE_ALIGNMENT_MASK ) ) == 0UL );
	pxEnd->xBlockSize = 0;
   80dc2:	f647 75f4 	movw	r5, #32756	; 0x7ff4
   80dc6:	5159      	str	r1, [r3, r5]
	pxEnd->pxNextFreeBlock = NULL;
   80dc8:	5099      	str	r1, [r3, r2]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) xHeap.ucHeap;
	pxFirstFreeBlock->xBlockSize = xTotalHeapSize - heapSTRUCT_SIZE;
   80dca:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
   80dcc:	6018      	str	r0, [r3, #0]

	/* The heap now contains pxEnd. */
	xFreeBytesRemaining -= heapSTRUCT_SIZE;
   80dce:	4a23      	ldr	r2, [pc, #140]	; (80e5c <pvPortMalloc+0xbc>)
   80dd0:	6813      	ldr	r3, [r2, #0]
   80dd2:	3b10      	subs	r3, #16
   80dd4:	6013      	str	r3, [r2, #0]
			prvHeapInit();
		}

		/* The wanted size is increased so it can contain a xBlockLink
		structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
   80dd6:	2c00      	cmp	r4, #0
   80dd8:	d02e      	beq.n	80e38 <pvPortMalloc+0x98>
		{
			xWantedSize += heapSTRUCT_SIZE;
   80dda:	f104 0210 	add.w	r2, r4, #16

			/* Ensure that blocks are always aligned to the required number of 
			bytes. */
			if( xWantedSize & portBYTE_ALIGNMENT_MASK )
   80dde:	f012 0f07 	tst.w	r2, #7
			{
				/* Byte alignment required. */
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
   80de2:	bf1c      	itt	ne
   80de4:	f022 0207 	bicne.w	r2, r2, #7
   80de8:	3208      	addne	r2, #8
			}
		}

		if( ( xWantedSize > 0 ) && ( xWantedSize < xTotalHeapSize ) )
   80dea:	1e51      	subs	r1, r2, #1
   80dec:	f647 73fe 	movw	r3, #32766	; 0x7ffe
   80df0:	4299      	cmp	r1, r3
   80df2:	d823      	bhi.n	80e3c <pvPortMalloc+0x9c>
		{
			/* Traverse the list from the start	(lowest address) block until one
			of adequate size is found. */
			pxPreviousBlock = &xStart;
			pxBlock = xStart.pxNextFreeBlock;
   80df4:	4917      	ldr	r1, [pc, #92]	; (80e54 <pvPortMalloc+0xb4>)
   80df6:	680c      	ldr	r4, [r1, #0]
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
   80df8:	e001      	b.n	80dfe <pvPortMalloc+0x5e>
   80dfa:	4621      	mov	r1, r4
			{
				pxPreviousBlock = pxBlock;
				pxBlock = pxBlock->pxNextFreeBlock;
   80dfc:	461c      	mov	r4, r3
		{
			/* Traverse the list from the start	(lowest address) block until one
			of adequate size is found. */
			pxPreviousBlock = &xStart;
			pxBlock = xStart.pxNextFreeBlock;
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
   80dfe:	6863      	ldr	r3, [r4, #4]
   80e00:	429a      	cmp	r2, r3
   80e02:	d902      	bls.n	80e0a <pvPortMalloc+0x6a>
   80e04:	6823      	ldr	r3, [r4, #0]
   80e06:	2b00      	cmp	r3, #0
   80e08:	d1f7      	bne.n	80dfa <pvPortMalloc+0x5a>
				pxBlock = pxBlock->pxNextFreeBlock;
			}

			/* If the end marker was reached then a block of adequate size was
			not found. */
			if( pxBlock != pxEnd )
   80e0a:	4b11      	ldr	r3, [pc, #68]	; (80e50 <pvPortMalloc+0xb0>)
   80e0c:	681b      	ldr	r3, [r3, #0]
   80e0e:	429c      	cmp	r4, r3
   80e10:	d016      	beq.n	80e40 <pvPortMalloc+0xa0>
			{
				/* Return the memory space - jumping over the xBlockLink structure
				at its start. */
				pvReturn = ( void * ) ( ( ( unsigned char * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
   80e12:	680d      	ldr	r5, [r1, #0]
   80e14:	3510      	adds	r5, #16

				/* This block is being returned for use so must be taken out of
				the	list of free blocks. */
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
   80e16:	6823      	ldr	r3, [r4, #0]
   80e18:	600b      	str	r3, [r1, #0]

				/* If the block is larger than required it can be split into two. */
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
   80e1a:	6863      	ldr	r3, [r4, #4]
   80e1c:	1a9b      	subs	r3, r3, r2
   80e1e:	2b20      	cmp	r3, #32
   80e20:	d904      	bls.n	80e2c <pvPortMalloc+0x8c>
				{
					/* This block is to be split into two.  Create a new block
					following the number of bytes requested. The void cast is
					used to prevent byte alignment warnings from the compiler. */
					pxNewBlockLink = ( void * ) ( ( ( unsigned char * ) pxBlock ) + xWantedSize );
   80e22:	18a0      	adds	r0, r4, r2

					/* Calculate the sizes of two blocks split from the single
					block. */
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
   80e24:	6043      	str	r3, [r0, #4]
					pxBlock->xBlockSize = xWantedSize;
   80e26:	6062      	str	r2, [r4, #4]

					/* Insert the new block into the list of free blocks. */
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
   80e28:	4b0d      	ldr	r3, [pc, #52]	; (80e60 <pvPortMalloc+0xc0>)
   80e2a:	4798      	blx	r3
				}

				xFreeBytesRemaining -= pxBlock->xBlockSize;
   80e2c:	4a0b      	ldr	r2, [pc, #44]	; (80e5c <pvPortMalloc+0xbc>)
   80e2e:	6813      	ldr	r3, [r2, #0]
   80e30:	6861      	ldr	r1, [r4, #4]
   80e32:	1a5b      	subs	r3, r3, r1
   80e34:	6013      	str	r3, [r2, #0]
   80e36:	e004      	b.n	80e42 <pvPortMalloc+0xa2>
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
xBlockLink *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
   80e38:	2500      	movs	r5, #0
   80e3a:	e002      	b.n	80e42 <pvPortMalloc+0xa2>
   80e3c:	2500      	movs	r5, #0
   80e3e:	e000      	b.n	80e42 <pvPortMalloc+0xa2>
   80e40:	2500      	movs	r5, #0

				xFreeBytesRemaining -= pxBlock->xBlockSize;
			}
		}
	}
	xTaskResumeAll();
   80e42:	4b08      	ldr	r3, [pc, #32]	; (80e64 <pvPortMalloc+0xc4>)
   80e44:	4798      	blx	r3
		}
	}
	#endif

	return pvReturn;
}
   80e46:	4628      	mov	r0, r5
   80e48:	bd38      	pop	{r3, r4, r5, pc}
   80e4a:	bf00      	nop
   80e4c:	000816c5 	.word	0x000816c5
   80e50:	20078a20 	.word	0x20078a20
   80e54:	20078a24 	.word	0x20078a24
   80e58:	20070a20 	.word	0x20070a20
   80e5c:	20070148 	.word	0x20070148
   80e60:	00080d49 	.word	0x00080d49
   80e64:	00081821 	.word	0x00081821

00080e68 <vPortFree>:
void vPortFree( void *pv )
{
unsigned char *puc = ( unsigned char * ) pv;
xBlockLink *pxLink;

	if( pv != NULL )
   80e68:	b180      	cbz	r0, 80e8c <vPortFree+0x24>
	return pvReturn;
}
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
   80e6a:	b510      	push	{r4, lr}
   80e6c:	4604      	mov	r4, r0
		puc -= heapSTRUCT_SIZE;

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;

		vTaskSuspendAll();
   80e6e:	4b08      	ldr	r3, [pc, #32]	; (80e90 <vPortFree+0x28>)
   80e70:	4798      	blx	r3
		{
			/* Add this block to the list of free blocks. */
			xFreeBytesRemaining += pxLink->xBlockSize;
   80e72:	4a08      	ldr	r2, [pc, #32]	; (80e94 <vPortFree+0x2c>)
   80e74:	6811      	ldr	r1, [r2, #0]
   80e76:	f854 3c0c 	ldr.w	r3, [r4, #-12]
   80e7a:	440b      	add	r3, r1
   80e7c:	6013      	str	r3, [r2, #0]
			prvInsertBlockIntoFreeList( ( ( xBlockLink * ) pxLink ) );			
   80e7e:	f1a4 0010 	sub.w	r0, r4, #16
   80e82:	4b05      	ldr	r3, [pc, #20]	; (80e98 <vPortFree+0x30>)
   80e84:	4798      	blx	r3
		}
		xTaskResumeAll();
   80e86:	4b05      	ldr	r3, [pc, #20]	; (80e9c <vPortFree+0x34>)
   80e88:	4798      	blx	r3
   80e8a:	bd10      	pop	{r4, pc}
   80e8c:	4770      	bx	lr
   80e8e:	bf00      	nop
   80e90:	000816c5 	.word	0x000816c5
   80e94:	20070148 	.word	0x20070148
   80e98:	00080d49 	.word	0x00080d49
   80e9c:	00081821 	.word	0x00081821

00080ea0 <prvCopyDataToQueue>:

#endif
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( xQUEUE *pxQueue, const void *pvItemToQueue, portBASE_TYPE xPosition )
{
   80ea0:	b510      	push	{r4, lr}
   80ea2:	4604      	mov	r4, r0
	if( pxQueue->uxItemSize == ( unsigned portBASE_TYPE ) 0 )
   80ea4:	6c03      	ldr	r3, [r0, #64]	; 0x40
   80ea6:	b93b      	cbnz	r3, 80eb8 <prvCopyDataToQueue+0x18>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   80ea8:	6803      	ldr	r3, [r0, #0]
   80eaa:	bb1b      	cbnz	r3, 80ef4 <prvCopyDataToQueue+0x54>
			{
				/* The mutex is no longer being held. */
				vTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
   80eac:	6840      	ldr	r0, [r0, #4]
   80eae:	4b13      	ldr	r3, [pc, #76]	; (80efc <prvCopyDataToQueue+0x5c>)
   80eb0:	4798      	blx	r3
				pxQueue->pxMutexHolder = NULL;
   80eb2:	2300      	movs	r3, #0
   80eb4:	6063      	str	r3, [r4, #4]
   80eb6:	e01d      	b.n	80ef4 <prvCopyDataToQueue+0x54>
			}
		}
		#endif
	}
	else if( xPosition == queueSEND_TO_BACK )
   80eb8:	b96a      	cbnz	r2, 80ed6 <prvCopyDataToQueue+0x36>
	{
		memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
   80eba:	6880      	ldr	r0, [r0, #8]
   80ebc:	461a      	mov	r2, r3
   80ebe:	4b10      	ldr	r3, [pc, #64]	; (80f00 <prvCopyDataToQueue+0x60>)
   80ec0:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
   80ec2:	68a2      	ldr	r2, [r4, #8]
   80ec4:	6c23      	ldr	r3, [r4, #64]	; 0x40
   80ec6:	4413      	add	r3, r2
   80ec8:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail )
   80eca:	6862      	ldr	r2, [r4, #4]
   80ecc:	4293      	cmp	r3, r2
   80ece:	d311      	bcc.n	80ef4 <prvCopyDataToQueue+0x54>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
   80ed0:	6823      	ldr	r3, [r4, #0]
   80ed2:	60a3      	str	r3, [r4, #8]
   80ed4:	e00e      	b.n	80ef4 <prvCopyDataToQueue+0x54>
		}
	}
	else
	{
		memcpy( ( void * ) pxQueue->pcReadFrom, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
   80ed6:	68c0      	ldr	r0, [r0, #12]
   80ed8:	461a      	mov	r2, r3
   80eda:	4b09      	ldr	r3, [pc, #36]	; (80f00 <prvCopyDataToQueue+0x60>)
   80edc:	4798      	blx	r3
		pxQueue->pcReadFrom -= pxQueue->uxItemSize;
   80ede:	6c23      	ldr	r3, [r4, #64]	; 0x40
   80ee0:	425b      	negs	r3, r3
   80ee2:	68e2      	ldr	r2, [r4, #12]
   80ee4:	441a      	add	r2, r3
   80ee6:	60e2      	str	r2, [r4, #12]
		if( pxQueue->pcReadFrom < pxQueue->pcHead )
   80ee8:	6821      	ldr	r1, [r4, #0]
   80eea:	428a      	cmp	r2, r1
   80eec:	d202      	bcs.n	80ef4 <prvCopyDataToQueue+0x54>
		{
			pxQueue->pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
   80eee:	6862      	ldr	r2, [r4, #4]
   80ef0:	4413      	add	r3, r2
   80ef2:	60e3      	str	r3, [r4, #12]
		}
	}

	++( pxQueue->uxMessagesWaiting );
   80ef4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   80ef6:	3301      	adds	r3, #1
   80ef8:	63a3      	str	r3, [r4, #56]	; 0x38
   80efa:	bd10      	pop	{r4, pc}
   80efc:	00081dcd 	.word	0x00081dcd
   80f00:	0008394d 	.word	0x0008394d

00080f04 <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( xQUEUE * const pxQueue, const void *pvBuffer )
{
   80f04:	b538      	push	{r3, r4, r5, lr}
   80f06:	4603      	mov	r3, r0
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
   80f08:	6800      	ldr	r0, [r0, #0]
   80f0a:	b158      	cbz	r0, 80f24 <prvCopyDataFromQueue+0x20>
	{
		pxQueue->pcReadFrom += pxQueue->uxItemSize;
   80f0c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   80f0e:	68dc      	ldr	r4, [r3, #12]
   80f10:	4414      	add	r4, r2
   80f12:	60dc      	str	r4, [r3, #12]
		if( pxQueue->pcReadFrom >= pxQueue->pcTail )
   80f14:	685d      	ldr	r5, [r3, #4]
   80f16:	42ac      	cmp	r4, r5
		{
			pxQueue->pcReadFrom = pxQueue->pcHead;
   80f18:	bf28      	it	cs
   80f1a:	60d8      	strcs	r0, [r3, #12]
   80f1c:	4608      	mov	r0, r1
		}
		memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->pcReadFrom, ( unsigned ) pxQueue->uxItemSize );
   80f1e:	68d9      	ldr	r1, [r3, #12]
   80f20:	4b01      	ldr	r3, [pc, #4]	; (80f28 <prvCopyDataFromQueue+0x24>)
   80f22:	4798      	blx	r3
   80f24:	bd38      	pop	{r3, r4, r5, pc}
   80f26:	bf00      	nop
   80f28:	0008394d 	.word	0x0008394d

00080f2c <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( xQueueHandle pxQueue )
{
   80f2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   80f2e:	4604      	mov	r4, r0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
   80f30:	4b1e      	ldr	r3, [pc, #120]	; (80fac <prvUnlockQueue+0x80>)
   80f32:	4798      	blx	r3
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
   80f34:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   80f36:	2b00      	cmp	r3, #0
   80f38:	dd13      	ble.n	80f62 <prvUnlockQueue+0x36>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   80f3a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   80f3c:	b91b      	cbnz	r3, 80f46 <prvUnlockQueue+0x1a>
   80f3e:	e010      	b.n	80f62 <prvUnlockQueue+0x36>
   80f40:	6a63      	ldr	r3, [r4, #36]	; 0x24
   80f42:	b923      	cbnz	r3, 80f4e <prvUnlockQueue+0x22>
   80f44:	e00d      	b.n	80f62 <prvUnlockQueue+0x36>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   80f46:	f104 0624 	add.w	r6, r4, #36	; 0x24
   80f4a:	4d19      	ldr	r5, [pc, #100]	; (80fb0 <prvUnlockQueue+0x84>)
				{
					/* The task waiting has a higher priority so record that a
					context	switch is required. */
					vTaskMissedYield();
   80f4c:	4f19      	ldr	r7, [pc, #100]	; (80fb4 <prvUnlockQueue+0x88>)
			blocked waiting for data to become available? */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   80f4e:	4630      	mov	r0, r6
   80f50:	47a8      	blx	r5
   80f52:	b100      	cbz	r0, 80f56 <prvUnlockQueue+0x2a>
				{
					/* The task waiting has a higher priority so record that a
					context	switch is required. */
					vTaskMissedYield();
   80f54:	47b8      	blx	r7
				}

				--( pxQueue->xTxLock );
   80f56:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   80f58:	3b01      	subs	r3, #1
   80f5a:	64a3      	str	r3, [r4, #72]	; 0x48
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
   80f5c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   80f5e:	2b00      	cmp	r3, #0
   80f60:	dcee      	bgt.n	80f40 <prvUnlockQueue+0x14>
			{
				break;
			}
		}

		pxQueue->xTxLock = queueUNLOCKED;
   80f62:	f04f 33ff 	mov.w	r3, #4294967295
   80f66:	64a3      	str	r3, [r4, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
   80f68:	4b13      	ldr	r3, [pc, #76]	; (80fb8 <prvUnlockQueue+0x8c>)
   80f6a:	4798      	blx	r3

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
   80f6c:	4b0f      	ldr	r3, [pc, #60]	; (80fac <prvUnlockQueue+0x80>)
   80f6e:	4798      	blx	r3
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
   80f70:	6c63      	ldr	r3, [r4, #68]	; 0x44
   80f72:	2b00      	cmp	r3, #0
   80f74:	dd13      	ble.n	80f9e <prvUnlockQueue+0x72>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   80f76:	6923      	ldr	r3, [r4, #16]
   80f78:	b91b      	cbnz	r3, 80f82 <prvUnlockQueue+0x56>
   80f7a:	e010      	b.n	80f9e <prvUnlockQueue+0x72>
   80f7c:	6923      	ldr	r3, [r4, #16]
   80f7e:	b923      	cbnz	r3, 80f8a <prvUnlockQueue+0x5e>
   80f80:	e00d      	b.n	80f9e <prvUnlockQueue+0x72>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   80f82:	f104 0610 	add.w	r6, r4, #16
   80f86:	4d0a      	ldr	r5, [pc, #40]	; (80fb0 <prvUnlockQueue+0x84>)
				{
					vTaskMissedYield();
   80f88:	4f0a      	ldr	r7, [pc, #40]	; (80fb4 <prvUnlockQueue+0x88>)
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   80f8a:	4630      	mov	r0, r6
   80f8c:	47a8      	blx	r5
   80f8e:	b100      	cbz	r0, 80f92 <prvUnlockQueue+0x66>
				{
					vTaskMissedYield();
   80f90:	47b8      	blx	r7
				}

				--( pxQueue->xRxLock );
   80f92:	6c63      	ldr	r3, [r4, #68]	; 0x44
   80f94:	3b01      	subs	r3, #1
   80f96:	6463      	str	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
   80f98:	6c63      	ldr	r3, [r4, #68]	; 0x44
   80f9a:	2b00      	cmp	r3, #0
   80f9c:	dcee      	bgt.n	80f7c <prvUnlockQueue+0x50>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
   80f9e:	f04f 33ff 	mov.w	r3, #4294967295
   80fa2:	6463      	str	r3, [r4, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
   80fa4:	4b04      	ldr	r3, [pc, #16]	; (80fb8 <prvUnlockQueue+0x8c>)
   80fa6:	4798      	blx	r3
   80fa8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   80faa:	bf00      	nop
   80fac:	00080c55 	.word	0x00080c55
   80fb0:	00081bdd 	.word	0x00081bdd
   80fb4:	00081d15 	.word	0x00081d15
   80fb8:	00080c75 	.word	0x00080c75

00080fbc <xQueueGenericReset>:
/*-----------------------------------------------------------
 * PUBLIC QUEUE MANAGEMENT API documented in queue.h
 *----------------------------------------------------------*/

portBASE_TYPE xQueueGenericReset( xQueueHandle pxQueue, portBASE_TYPE xNewQueue )
{
   80fbc:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
   80fbe:	b918      	cbnz	r0, 80fc8 <xQueueGenericReset+0xc>
   80fc0:	4b17      	ldr	r3, [pc, #92]	; (81020 <xQueueGenericReset+0x64>)
   80fc2:	4798      	blx	r3
   80fc4:	bf00      	nop
   80fc6:	e7fd      	b.n	80fc4 <xQueueGenericReset+0x8>
   80fc8:	460d      	mov	r5, r1
   80fca:	4604      	mov	r4, r0

	taskENTER_CRITICAL();
   80fcc:	4b15      	ldr	r3, [pc, #84]	; (81024 <xQueueGenericReset+0x68>)
   80fce:	4798      	blx	r3
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
   80fd0:	6822      	ldr	r2, [r4, #0]
   80fd2:	6c21      	ldr	r1, [r4, #64]	; 0x40
   80fd4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   80fd6:	fb03 f301 	mul.w	r3, r3, r1
   80fda:	18d0      	adds	r0, r2, r3
   80fdc:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
   80fde:	2000      	movs	r0, #0
   80fe0:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
   80fe2:	60a2      	str	r2, [r4, #8]
		pxQueue->pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( unsigned portBASE_TYPE ) 1U ) * pxQueue->uxItemSize );
   80fe4:	1a5b      	subs	r3, r3, r1
   80fe6:	4413      	add	r3, r2
   80fe8:	60e3      	str	r3, [r4, #12]
		pxQueue->xRxLock = queueUNLOCKED;
   80fea:	f04f 33ff 	mov.w	r3, #4294967295
   80fee:	6463      	str	r3, [r4, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
   80ff0:	64a3      	str	r3, [r4, #72]	; 0x48

		if( xNewQueue == pdFALSE )
   80ff2:	b955      	cbnz	r5, 8100a <xQueueGenericReset+0x4e>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to	write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   80ff4:	6923      	ldr	r3, [r4, #16]
   80ff6:	b17b      	cbz	r3, 81018 <xQueueGenericReset+0x5c>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
   80ff8:	f104 0010 	add.w	r0, r4, #16
   80ffc:	4b0a      	ldr	r3, [pc, #40]	; (81028 <xQueueGenericReset+0x6c>)
   80ffe:	4798      	blx	r3
   81000:	2801      	cmp	r0, #1
   81002:	d109      	bne.n	81018 <xQueueGenericReset+0x5c>
				{
					portYIELD_WITHIN_API();
   81004:	4b09      	ldr	r3, [pc, #36]	; (8102c <xQueueGenericReset+0x70>)
   81006:	4798      	blx	r3
   81008:	e006      	b.n	81018 <xQueueGenericReset+0x5c>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
   8100a:	f104 0010 	add.w	r0, r4, #16
   8100e:	4d08      	ldr	r5, [pc, #32]	; (81030 <xQueueGenericReset+0x74>)
   81010:	47a8      	blx	r5
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
   81012:	f104 0024 	add.w	r0, r4, #36	; 0x24
   81016:	47a8      	blx	r5
		}
	}
	taskEXIT_CRITICAL();
   81018:	4b06      	ldr	r3, [pc, #24]	; (81034 <xQueueGenericReset+0x78>)
   8101a:	4798      	blx	r3

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
}
   8101c:	2001      	movs	r0, #1
   8101e:	bd38      	pop	{r3, r4, r5, pc}
   81020:	00080c45 	.word	0x00080c45
   81024:	00080c55 	.word	0x00080c55
   81028:	00081bdd 	.word	0x00081bdd
   8102c:	00080c35 	.word	0x00080c35
   81030:	00080b3d 	.word	0x00080b3d
   81034:	00080c75 	.word	0x00080c75

00081038 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

xQueueHandle xQueueGenericCreate( unsigned portBASE_TYPE uxQueueLength, unsigned portBASE_TYPE uxItemSize, unsigned char ucQueueType )
{
   81038:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	/* Allocate the new queue structure. */
	if( uxQueueLength > ( unsigned portBASE_TYPE ) 0 )
   8103a:	b1a0      	cbz	r0, 81066 <xQueueGenericCreate+0x2e>
   8103c:	460d      	mov	r5, r1
   8103e:	4617      	mov	r7, r2
   81040:	4606      	mov	r6, r0
	{
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
   81042:	2050      	movs	r0, #80	; 0x50
   81044:	4b0e      	ldr	r3, [pc, #56]	; (81080 <xQueueGenericCreate+0x48>)
   81046:	4798      	blx	r3
		if( pxNewQueue != NULL )
   81048:	4604      	mov	r4, r0
   8104a:	b160      	cbz	r0, 81066 <xQueueGenericCreate+0x2e>
		{
			/* Create the list of pointers to queue items.  The queue is one byte
			longer than asked for to make wrap checking easier/faster. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1;
   8104c:	fb05 f006 	mul.w	r0, r5, r6

			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
   81050:	3001      	adds	r0, #1
   81052:	4b0b      	ldr	r3, [pc, #44]	; (81080 <xQueueGenericCreate+0x48>)
   81054:	4798      	blx	r3
   81056:	6020      	str	r0, [r4, #0]
			if( pxNewQueue->pcHead != NULL )
   81058:	b940      	cbnz	r0, 8106c <xQueueGenericCreate+0x34>
				xReturn = pxNewQueue;
			}
			else
			{
				traceQUEUE_CREATE_FAILED( ucQueueType );
				vPortFree( pxNewQueue );
   8105a:	4620      	mov	r0, r4
   8105c:	4b09      	ldr	r3, [pc, #36]	; (81084 <xQueueGenericCreate+0x4c>)
   8105e:	4798      	blx	r3
   81060:	e001      	b.n	81066 <xQueueGenericCreate+0x2e>
			}
		}
	}

	configASSERT( xReturn );
   81062:	bf00      	nop
   81064:	e7fd      	b.n	81062 <xQueueGenericCreate+0x2a>
   81066:	4b08      	ldr	r3, [pc, #32]	; (81088 <xQueueGenericCreate+0x50>)
   81068:	4798      	blx	r3
   8106a:	e7fa      	b.n	81062 <xQueueGenericCreate+0x2a>
			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
			if( pxNewQueue->pcHead != NULL )
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->uxLength = uxQueueLength;
   8106c:	63e6      	str	r6, [r4, #60]	; 0x3c
				pxNewQueue->uxItemSize = uxItemSize;
   8106e:	6425      	str	r5, [r4, #64]	; 0x40
				xQueueGenericReset( pxNewQueue, pdTRUE );
   81070:	4620      	mov	r0, r4
   81072:	2101      	movs	r1, #1
   81074:	4b05      	ldr	r3, [pc, #20]	; (8108c <xQueueGenericCreate+0x54>)
   81076:	4798      	blx	r3
				#if ( configUSE_TRACE_FACILITY == 1 )
				{
					pxNewQueue->ucQueueType = ucQueueType;
   81078:	f884 704d 	strb.w	r7, [r4, #77]	; 0x4d
	}

	configASSERT( xReturn );

	return xReturn;
}
   8107c:	4620      	mov	r0, r4
   8107e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   81080:	00080da1 	.word	0x00080da1
   81084:	00080e69 	.word	0x00080e69
   81088:	00080c45 	.word	0x00080c45
   8108c:	00080fbd 	.word	0x00080fbd

00081090 <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSend( xQueueHandle pxQueue, const void * const pvItemToQueue, portTickType xTicksToWait, portBASE_TYPE xCopyPosition )
{
   81090:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   81094:	b085      	sub	sp, #20
   81096:	9300      	str	r3, [sp, #0]
   81098:	f8ad 2006 	strh.w	r2, [sp, #6]
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
xTimeOutType xTimeOut;

	configASSERT( pxQueue );
   8109c:	b918      	cbnz	r0, 810a6 <xQueueGenericSend+0x16>
   8109e:	4b3a      	ldr	r3, [pc, #232]	; (81188 <xQueueGenericSend+0xf8>)
   810a0:	4798      	blx	r3
   810a2:	bf00      	nop
   810a4:	e7fd      	b.n	810a2 <xQueueGenericSend+0x12>
   810a6:	468a      	mov	sl, r1
   810a8:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
   810aa:	b929      	cbnz	r1, 810b8 <xQueueGenericSend+0x28>
   810ac:	6c03      	ldr	r3, [r0, #64]	; 0x40
   810ae:	b12b      	cbz	r3, 810bc <xQueueGenericSend+0x2c>
   810b0:	4b35      	ldr	r3, [pc, #212]	; (81188 <xQueueGenericSend+0xf8>)
   810b2:	4798      	blx	r3
   810b4:	bf00      	nop
   810b6:	e7fd      	b.n	810b4 <xQueueGenericSend+0x24>
   810b8:	2700      	movs	r7, #0
   810ba:	e000      	b.n	810be <xQueueGenericSend+0x2e>
   810bc:	2700      	movs	r7, #0
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
   810be:	4e33      	ldr	r6, [pc, #204]	; (8118c <xQueueGenericSend+0xfc>)
				}
				else if( xEntryTimeSet == pdFALSE )
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
   810c0:	f8df b0f0 	ldr.w	fp, [pc, #240]	; 811b4 <xQueueGenericSend+0x124>
					xEntryTimeSet = pdTRUE;
				}
			}
		}
		taskEXIT_CRITICAL();
   810c4:	4d32      	ldr	r5, [pc, #200]	; (81190 <xQueueGenericSend+0x100>)
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
   810c6:	47b0      	blx	r6
		{
			/* Is there room on the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
   810c8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   810ca:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   810cc:	429a      	cmp	r2, r3
   810ce:	d212      	bcs.n	810f6 <xQueueGenericSend+0x66>
			{
				traceQUEUE_SEND( pxQueue );
				prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
   810d0:	4620      	mov	r0, r4
   810d2:	4651      	mov	r1, sl
   810d4:	9a00      	ldr	r2, [sp, #0]
   810d6:	4b2f      	ldr	r3, [pc, #188]	; (81194 <xQueueGenericSend+0x104>)
   810d8:	4798      	blx	r3

				/* If there was a task waiting for data to arrive on the
				queue then unblock it now. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   810da:	6a63      	ldr	r3, [r4, #36]	; 0x24
   810dc:	b13b      	cbz	r3, 810ee <xQueueGenericSend+0x5e>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
   810de:	f104 0024 	add.w	r0, r4, #36	; 0x24
   810e2:	4b2d      	ldr	r3, [pc, #180]	; (81198 <xQueueGenericSend+0x108>)
   810e4:	4798      	blx	r3
   810e6:	2801      	cmp	r0, #1
   810e8:	d101      	bne.n	810ee <xQueueGenericSend+0x5e>
					{
						/* The unblocked task has a priority higher than
						our own so yield immediately.  Yes it is ok to do
						this from within the critical section - the kernel
						takes care of that. */
						portYIELD_WITHIN_API();
   810ea:	4b2c      	ldr	r3, [pc, #176]	; (8119c <xQueueGenericSend+0x10c>)
   810ec:	4798      	blx	r3
					}
				}

				taskEXIT_CRITICAL();
   810ee:	4b28      	ldr	r3, [pc, #160]	; (81190 <xQueueGenericSend+0x100>)
   810f0:	4798      	blx	r3

				/* Return to the original privilege level before exiting the
				function. */
				return pdPASS;
   810f2:	2001      	movs	r0, #1
   810f4:	e045      	b.n	81182 <xQueueGenericSend+0xf2>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
   810f6:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   810fa:	b91b      	cbnz	r3, 81104 <xQueueGenericSend+0x74>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
   810fc:	4b24      	ldr	r3, [pc, #144]	; (81190 <xQueueGenericSend+0x100>)
   810fe:	4798      	blx	r3

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
   81100:	2000      	movs	r0, #0
   81102:	e03e      	b.n	81182 <xQueueGenericSend+0xf2>
				}
				else if( xEntryTimeSet == pdFALSE )
   81104:	b917      	cbnz	r7, 8110c <xQueueGenericSend+0x7c>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
   81106:	a802      	add	r0, sp, #8
   81108:	47d8      	blx	fp
					xEntryTimeSet = pdTRUE;
   8110a:	2701      	movs	r7, #1
				}
			}
		}
		taskEXIT_CRITICAL();
   8110c:	47a8      	blx	r5

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
   8110e:	4b24      	ldr	r3, [pc, #144]	; (811a0 <xQueueGenericSend+0x110>)
   81110:	4798      	blx	r3
		prvLockQueue( pxQueue );
   81112:	47b0      	blx	r6
   81114:	6c63      	ldr	r3, [r4, #68]	; 0x44
   81116:	f1b3 3fff 	cmp.w	r3, #4294967295
   8111a:	bf04      	itt	eq
   8111c:	2300      	moveq	r3, #0
   8111e:	6463      	streq	r3, [r4, #68]	; 0x44
   81120:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   81122:	f1b3 3fff 	cmp.w	r3, #4294967295
   81126:	bf04      	itt	eq
   81128:	2300      	moveq	r3, #0
   8112a:	64a3      	streq	r3, [r4, #72]	; 0x48
   8112c:	47a8      	blx	r5

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   8112e:	a802      	add	r0, sp, #8
   81130:	f10d 0106 	add.w	r1, sp, #6
   81134:	4b1b      	ldr	r3, [pc, #108]	; (811a4 <xQueueGenericSend+0x114>)
   81136:	4798      	blx	r3
   81138:	b9e8      	cbnz	r0, 81176 <xQueueGenericSend+0xe6>

static signed portBASE_TYPE prvIsQueueFull( const xQueueHandle pxQueue )
{
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
   8113a:	47b0      	blx	r6
		xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
   8113c:	f8d4 9038 	ldr.w	r9, [r4, #56]	; 0x38
   81140:	f8d4 803c 	ldr.w	r8, [r4, #60]	; 0x3c
	taskEXIT_CRITICAL();
   81144:	47a8      	blx	r5
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
   81146:	45c1      	cmp	r9, r8
   81148:	d10f      	bne.n	8116a <xQueueGenericSend+0xda>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
   8114a:	f104 0010 	add.w	r0, r4, #16
   8114e:	f8bd 1006 	ldrh.w	r1, [sp, #6]
   81152:	4b15      	ldr	r3, [pc, #84]	; (811a8 <xQueueGenericSend+0x118>)
   81154:	4798      	blx	r3
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
   81156:	4620      	mov	r0, r4
   81158:	4b14      	ldr	r3, [pc, #80]	; (811ac <xQueueGenericSend+0x11c>)
   8115a:	4798      	blx	r3
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
   8115c:	4b14      	ldr	r3, [pc, #80]	; (811b0 <xQueueGenericSend+0x120>)
   8115e:	4798      	blx	r3
   81160:	2800      	cmp	r0, #0
   81162:	d1b0      	bne.n	810c6 <xQueueGenericSend+0x36>
				{
					portYIELD_WITHIN_API();
   81164:	4b0d      	ldr	r3, [pc, #52]	; (8119c <xQueueGenericSend+0x10c>)
   81166:	4798      	blx	r3
   81168:	e7ad      	b.n	810c6 <xQueueGenericSend+0x36>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
   8116a:	4620      	mov	r0, r4
   8116c:	4b0f      	ldr	r3, [pc, #60]	; (811ac <xQueueGenericSend+0x11c>)
   8116e:	4798      	blx	r3
				( void ) xTaskResumeAll();
   81170:	4b0f      	ldr	r3, [pc, #60]	; (811b0 <xQueueGenericSend+0x120>)
   81172:	4798      	blx	r3
   81174:	e7a7      	b.n	810c6 <xQueueGenericSend+0x36>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
   81176:	4620      	mov	r0, r4
   81178:	4b0c      	ldr	r3, [pc, #48]	; (811ac <xQueueGenericSend+0x11c>)
   8117a:	4798      	blx	r3
			( void ) xTaskResumeAll();
   8117c:	4b0c      	ldr	r3, [pc, #48]	; (811b0 <xQueueGenericSend+0x120>)
   8117e:	4798      	blx	r3

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
   81180:	2000      	movs	r0, #0
		}
	}
}
   81182:	b005      	add	sp, #20
   81184:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   81188:	00080c45 	.word	0x00080c45
   8118c:	00080c55 	.word	0x00080c55
   81190:	00080c75 	.word	0x00080c75
   81194:	00080ea1 	.word	0x00080ea1
   81198:	00081bdd 	.word	0x00081bdd
   8119c:	00080c35 	.word	0x00080c35
   811a0:	000816c5 	.word	0x000816c5
   811a4:	00081c89 	.word	0x00081c89
   811a8:	00081b31 	.word	0x00081b31
   811ac:	00080f2d 	.word	0x00080f2d
   811b0:	00081821 	.word	0x00081821
   811b4:	00081c61 	.word	0x00081c61

000811b8 <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSendFromISR( xQueueHandle pxQueue, const void * const pvItemToQueue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portBASE_TYPE xCopyPosition )
{
   811b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
signed portBASE_TYPE xReturn;
unsigned portBASE_TYPE uxSavedInterruptStatus;

	configASSERT( pxQueue );
   811bc:	b918      	cbnz	r0, 811c6 <xQueueGenericSendFromISR+0xe>
   811be:	4b1e      	ldr	r3, [pc, #120]	; (81238 <xQueueGenericSendFromISR+0x80>)
   811c0:	4798      	blx	r3
   811c2:	bf00      	nop
   811c4:	e7fd      	b.n	811c2 <xQueueGenericSendFromISR+0xa>
   811c6:	460e      	mov	r6, r1
   811c8:	4615      	mov	r5, r2
   811ca:	4698      	mov	r8, r3
   811cc:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
   811ce:	b929      	cbnz	r1, 811dc <xQueueGenericSendFromISR+0x24>
   811d0:	6c03      	ldr	r3, [r0, #64]	; 0x40
   811d2:	b11b      	cbz	r3, 811dc <xQueueGenericSendFromISR+0x24>
   811d4:	4b18      	ldr	r3, [pc, #96]	; (81238 <xQueueGenericSendFromISR+0x80>)
   811d6:	4798      	blx	r3
   811d8:	bf00      	nop
   811da:	e7fd      	b.n	811d8 <xQueueGenericSendFromISR+0x20>
	/* Similar to xQueueGenericSend, except we don't block if there is no room
	in the queue.  Also we don't directly wake a task that was blocked on a
	queue read, instead we return a flag to say whether a context switch is
	required or not (i.e. has a task with a higher priority than us been woken
	by this	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
   811dc:	4b16      	ldr	r3, [pc, #88]	; (81238 <xQueueGenericSendFromISR+0x80>)
   811de:	4798      	blx	r3
   811e0:	4607      	mov	r7, r0
	{
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
   811e2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   811e4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   811e6:	429a      	cmp	r2, r3
   811e8:	d218      	bcs.n	8121c <xQueueGenericSendFromISR+0x64>
		{
			traceQUEUE_SEND_FROM_ISR( pxQueue );

			prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
   811ea:	4620      	mov	r0, r4
   811ec:	4631      	mov	r1, r6
   811ee:	4642      	mov	r2, r8
   811f0:	4b12      	ldr	r3, [pc, #72]	; (8123c <xQueueGenericSendFromISR+0x84>)
   811f2:	4798      	blx	r3

			/* If the queue is locked we do not alter the event list.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
   811f4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   811f6:	f1b3 3fff 	cmp.w	r3, #4294967295
   811fa:	d10a      	bne.n	81212 <xQueueGenericSendFromISR+0x5a>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   811fc:	6a63      	ldr	r3, [r4, #36]	; 0x24
   811fe:	b17b      	cbz	r3, 81220 <xQueueGenericSendFromISR+0x68>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   81200:	f104 0024 	add.w	r0, r4, #36	; 0x24
   81204:	4b0e      	ldr	r3, [pc, #56]	; (81240 <xQueueGenericSendFromISR+0x88>)
   81206:	4798      	blx	r3
   81208:	b160      	cbz	r0, 81224 <xQueueGenericSendFromISR+0x6c>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						if( pxHigherPriorityTaskWoken != NULL )
   8120a:	b16d      	cbz	r5, 81228 <xQueueGenericSendFromISR+0x70>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
   8120c:	2401      	movs	r4, #1
   8120e:	602c      	str	r4, [r5, #0]
   81210:	e00b      	b.n	8122a <xQueueGenericSendFromISR+0x72>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
   81212:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   81214:	3301      	adds	r3, #1
   81216:	64a3      	str	r3, [r4, #72]	; 0x48
			}

			xReturn = pdPASS;
   81218:	2401      	movs	r4, #1
   8121a:	e006      	b.n	8122a <xQueueGenericSendFromISR+0x72>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
   8121c:	2400      	movs	r4, #0
   8121e:	e004      	b.n	8122a <xQueueGenericSendFromISR+0x72>
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
			}

			xReturn = pdPASS;
   81220:	2401      	movs	r4, #1
   81222:	e002      	b.n	8122a <xQueueGenericSendFromISR+0x72>
   81224:	2401      	movs	r4, #1
   81226:	e000      	b.n	8122a <xQueueGenericSendFromISR+0x72>
   81228:	2401      	movs	r4, #1
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
   8122a:	4638      	mov	r0, r7
   8122c:	4b05      	ldr	r3, [pc, #20]	; (81244 <xQueueGenericSendFromISR+0x8c>)
   8122e:	4798      	blx	r3

	return xReturn;
}
   81230:	4620      	mov	r0, r4
   81232:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   81236:	bf00      	nop
   81238:	00080c45 	.word	0x00080c45
   8123c:	00080ea1 	.word	0x00080ea1
   81240:	00081bdd 	.word	0x00081bdd
   81244:	00080c6d 	.word	0x00080c6d

00081248 <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericReceive( xQueueHandle pxQueue, void * const pvBuffer, portTickType xTicksToWait, portBASE_TYPE xJustPeeking )
{
   81248:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8124c:	b085      	sub	sp, #20
   8124e:	f8ad 2006 	strh.w	r2, [sp, #6]
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
xTimeOutType xTimeOut;
signed char *pcOriginalReadPosition;

	configASSERT( pxQueue );
   81252:	b918      	cbnz	r0, 8125c <xQueueGenericReceive+0x14>
   81254:	4b47      	ldr	r3, [pc, #284]	; (81374 <xQueueGenericReceive+0x12c>)
   81256:	4798      	blx	r3
   81258:	bf00      	nop
   8125a:	e7fd      	b.n	81258 <xQueueGenericReceive+0x10>
   8125c:	4689      	mov	r9, r1
   8125e:	469a      	mov	sl, r3
   81260:	4604      	mov	r4, r0
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
   81262:	b929      	cbnz	r1, 81270 <xQueueGenericReceive+0x28>
   81264:	6c03      	ldr	r3, [r0, #64]	; 0x40
   81266:	b12b      	cbz	r3, 81274 <xQueueGenericReceive+0x2c>
   81268:	4b42      	ldr	r3, [pc, #264]	; (81374 <xQueueGenericReceive+0x12c>)
   8126a:	4798      	blx	r3
   8126c:	bf00      	nop
   8126e:	e7fd      	b.n	8126c <xQueueGenericReceive+0x24>
   81270:	2700      	movs	r7, #0
   81272:	e000      	b.n	81276 <xQueueGenericReceive+0x2e>
   81274:	2700      	movs	r7, #0
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
   81276:	4e40      	ldr	r6, [pc, #256]	; (81378 <xQueueGenericReceive+0x130>)
				}
				else if( xEntryTimeSet == pdFALSE )
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
   81278:	f8df b12c 	ldr.w	fp, [pc, #300]	; 813a8 <xQueueGenericReceive+0x160>
					xEntryTimeSet = pdTRUE;
				}
			}
		}
		taskEXIT_CRITICAL();
   8127c:	4d3f      	ldr	r5, [pc, #252]	; (8137c <xQueueGenericReceive+0x134>)
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
   8127e:	47b0      	blx	r6
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
   81280:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   81282:	b343      	cbz	r3, 812d6 <xQueueGenericReceive+0x8e>
			{
				/* Remember our read position in case we are just peeking. */
				pcOriginalReadPosition = pxQueue->pcReadFrom;
   81284:	68e5      	ldr	r5, [r4, #12]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
   81286:	4620      	mov	r0, r4
   81288:	4649      	mov	r1, r9
   8128a:	4b3d      	ldr	r3, [pc, #244]	; (81380 <xQueueGenericReceive+0x138>)
   8128c:	4798      	blx	r3

				if( xJustPeeking == pdFALSE )
   8128e:	f1ba 0f00 	cmp.w	sl, #0
   81292:	d112      	bne.n	812ba <xQueueGenericReceive+0x72>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* We are actually removing data. */
					--( pxQueue->uxMessagesWaiting );
   81294:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   81296:	3b01      	subs	r3, #1
   81298:	63a3      	str	r3, [r4, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   8129a:	6823      	ldr	r3, [r4, #0]
   8129c:	b913      	cbnz	r3, 812a4 <xQueueGenericReceive+0x5c>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = xTaskGetCurrentTaskHandle();
   8129e:	4b39      	ldr	r3, [pc, #228]	; (81384 <xQueueGenericReceive+0x13c>)
   812a0:	4798      	blx	r3
   812a2:	6060      	str	r0, [r4, #4]
						}
					}
					#endif

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   812a4:	6923      	ldr	r3, [r4, #16]
   812a6:	b193      	cbz	r3, 812ce <xQueueGenericReceive+0x86>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
   812a8:	f104 0010 	add.w	r0, r4, #16
   812ac:	4b36      	ldr	r3, [pc, #216]	; (81388 <xQueueGenericReceive+0x140>)
   812ae:	4798      	blx	r3
   812b0:	2801      	cmp	r0, #1
   812b2:	d10c      	bne.n	812ce <xQueueGenericReceive+0x86>
						{
							portYIELD_WITHIN_API();
   812b4:	4b35      	ldr	r3, [pc, #212]	; (8138c <xQueueGenericReceive+0x144>)
   812b6:	4798      	blx	r3
   812b8:	e009      	b.n	812ce <xQueueGenericReceive+0x86>
				{
					traceQUEUE_PEEK( pxQueue );

					/* We are not removing the data, so reset our read
					pointer. */
					pxQueue->pcReadFrom = pcOriginalReadPosition;
   812ba:	60e5      	str	r5, [r4, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   812bc:	6a63      	ldr	r3, [r4, #36]	; 0x24
   812be:	b133      	cbz	r3, 812ce <xQueueGenericReceive+0x86>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   812c0:	f104 0024 	add.w	r0, r4, #36	; 0x24
   812c4:	4b30      	ldr	r3, [pc, #192]	; (81388 <xQueueGenericReceive+0x140>)
   812c6:	4798      	blx	r3
   812c8:	b108      	cbz	r0, 812ce <xQueueGenericReceive+0x86>
						{
							/* The task waiting has a higher priority than this task. */
							portYIELD_WITHIN_API();
   812ca:	4b30      	ldr	r3, [pc, #192]	; (8138c <xQueueGenericReceive+0x144>)
   812cc:	4798      	blx	r3
						}
					}
				}

				taskEXIT_CRITICAL();
   812ce:	4b2b      	ldr	r3, [pc, #172]	; (8137c <xQueueGenericReceive+0x134>)
   812d0:	4798      	blx	r3
				return pdPASS;
   812d2:	2001      	movs	r0, #1
   812d4:	e04b      	b.n	8136e <xQueueGenericReceive+0x126>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
   812d6:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   812da:	b91b      	cbnz	r3, 812e4 <xQueueGenericReceive+0x9c>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
   812dc:	4b27      	ldr	r3, [pc, #156]	; (8137c <xQueueGenericReceive+0x134>)
   812de:	4798      	blx	r3
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
   812e0:	2000      	movs	r0, #0
   812e2:	e044      	b.n	8136e <xQueueGenericReceive+0x126>
				}
				else if( xEntryTimeSet == pdFALSE )
   812e4:	b917      	cbnz	r7, 812ec <xQueueGenericReceive+0xa4>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
   812e6:	a802      	add	r0, sp, #8
   812e8:	47d8      	blx	fp
					xEntryTimeSet = pdTRUE;
   812ea:	2701      	movs	r7, #1
				}
			}
		}
		taskEXIT_CRITICAL();
   812ec:	47a8      	blx	r5

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
   812ee:	4b28      	ldr	r3, [pc, #160]	; (81390 <xQueueGenericReceive+0x148>)
   812f0:	4798      	blx	r3
		prvLockQueue( pxQueue );
   812f2:	47b0      	blx	r6
   812f4:	6c63      	ldr	r3, [r4, #68]	; 0x44
   812f6:	f1b3 3fff 	cmp.w	r3, #4294967295
   812fa:	bf04      	itt	eq
   812fc:	2300      	moveq	r3, #0
   812fe:	6463      	streq	r3, [r4, #68]	; 0x44
   81300:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   81302:	f1b3 3fff 	cmp.w	r3, #4294967295
   81306:	bf04      	itt	eq
   81308:	2300      	moveq	r3, #0
   8130a:	64a3      	streq	r3, [r4, #72]	; 0x48
   8130c:	47a8      	blx	r5

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   8130e:	a802      	add	r0, sp, #8
   81310:	f10d 0106 	add.w	r1, sp, #6
   81314:	4b1f      	ldr	r3, [pc, #124]	; (81394 <xQueueGenericReceive+0x14c>)
   81316:	4798      	blx	r3
   81318:	bb18      	cbnz	r0, 81362 <xQueueGenericReceive+0x11a>

static signed portBASE_TYPE prvIsQueueEmpty( const xQueueHandle pxQueue )
{
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
   8131a:	47b0      	blx	r6
		xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
   8131c:	f8d4 8038 	ldr.w	r8, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
   81320:	47a8      	blx	r5
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   81322:	f1b8 0f00 	cmp.w	r8, #0
   81326:	d116      	bne.n	81356 <xQueueGenericReceive+0x10e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   81328:	6823      	ldr	r3, [r4, #0]
   8132a:	b923      	cbnz	r3, 81336 <xQueueGenericReceive+0xee>
					{
						portENTER_CRITICAL();
   8132c:	47b0      	blx	r6
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
   8132e:	6860      	ldr	r0, [r4, #4]
   81330:	4b19      	ldr	r3, [pc, #100]	; (81398 <xQueueGenericReceive+0x150>)
   81332:	4798      	blx	r3
						}
						portEXIT_CRITICAL();
   81334:	47a8      	blx	r5
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
   81336:	f104 0024 	add.w	r0, r4, #36	; 0x24
   8133a:	f8bd 1006 	ldrh.w	r1, [sp, #6]
   8133e:	4b17      	ldr	r3, [pc, #92]	; (8139c <xQueueGenericReceive+0x154>)
   81340:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
   81342:	4620      	mov	r0, r4
   81344:	4b16      	ldr	r3, [pc, #88]	; (813a0 <xQueueGenericReceive+0x158>)
   81346:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
   81348:	4b16      	ldr	r3, [pc, #88]	; (813a4 <xQueueGenericReceive+0x15c>)
   8134a:	4798      	blx	r3
   8134c:	2800      	cmp	r0, #0
   8134e:	d196      	bne.n	8127e <xQueueGenericReceive+0x36>
				{
					portYIELD_WITHIN_API();
   81350:	4b0e      	ldr	r3, [pc, #56]	; (8138c <xQueueGenericReceive+0x144>)
   81352:	4798      	blx	r3
   81354:	e793      	b.n	8127e <xQueueGenericReceive+0x36>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
   81356:	4620      	mov	r0, r4
   81358:	4b11      	ldr	r3, [pc, #68]	; (813a0 <xQueueGenericReceive+0x158>)
   8135a:	4798      	blx	r3
				( void ) xTaskResumeAll();
   8135c:	4b11      	ldr	r3, [pc, #68]	; (813a4 <xQueueGenericReceive+0x15c>)
   8135e:	4798      	blx	r3
   81360:	e78d      	b.n	8127e <xQueueGenericReceive+0x36>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
   81362:	4620      	mov	r0, r4
   81364:	4b0e      	ldr	r3, [pc, #56]	; (813a0 <xQueueGenericReceive+0x158>)
   81366:	4798      	blx	r3
			( void ) xTaskResumeAll();
   81368:	4b0e      	ldr	r3, [pc, #56]	; (813a4 <xQueueGenericReceive+0x15c>)
   8136a:	4798      	blx	r3
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
   8136c:	2000      	movs	r0, #0
		}
	}
}
   8136e:	b005      	add	sp, #20
   81370:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   81374:	00080c45 	.word	0x00080c45
   81378:	00080c55 	.word	0x00080c55
   8137c:	00080c75 	.word	0x00080c75
   81380:	00080f05 	.word	0x00080f05
   81384:	00081d21 	.word	0x00081d21
   81388:	00081bdd 	.word	0x00081bdd
   8138c:	00080c35 	.word	0x00080c35
   81390:	000816c5 	.word	0x000816c5
   81394:	00081c89 	.word	0x00081c89
   81398:	00081d4d 	.word	0x00081d4d
   8139c:	00081b31 	.word	0x00081b31
   813a0:	00080f2d 	.word	0x00080f2d
   813a4:	00081821 	.word	0x00081821
   813a8:	00081c61 	.word	0x00081c61

000813ac <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if configUSE_TIMERS == 1

	void vQueueWaitForMessageRestricted( xQueueHandle pxQueue, portTickType xTicksToWait )
	{
   813ac:	b538      	push	{r3, r4, r5, lr}
   813ae:	4604      	mov	r4, r0
   813b0:	460d      	mov	r5, r1
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
   813b2:	4b0d      	ldr	r3, [pc, #52]	; (813e8 <vQueueWaitForMessageRestricted+0x3c>)
   813b4:	4798      	blx	r3
   813b6:	6c63      	ldr	r3, [r4, #68]	; 0x44
   813b8:	f1b3 3fff 	cmp.w	r3, #4294967295
   813bc:	bf04      	itt	eq
   813be:	2300      	moveq	r3, #0
   813c0:	6463      	streq	r3, [r4, #68]	; 0x44
   813c2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   813c4:	f1b3 3fff 	cmp.w	r3, #4294967295
   813c8:	bf04      	itt	eq
   813ca:	2300      	moveq	r3, #0
   813cc:	64a3      	streq	r3, [r4, #72]	; 0x48
   813ce:	4b07      	ldr	r3, [pc, #28]	; (813ec <vQueueWaitForMessageRestricted+0x40>)
   813d0:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0U )
   813d2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   813d4:	b923      	cbnz	r3, 813e0 <vQueueWaitForMessageRestricted+0x34>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
   813d6:	f104 0024 	add.w	r0, r4, #36	; 0x24
   813da:	4629      	mov	r1, r5
   813dc:	4b04      	ldr	r3, [pc, #16]	; (813f0 <vQueueWaitForMessageRestricted+0x44>)
   813de:	4798      	blx	r3
		}
		prvUnlockQueue( pxQueue );
   813e0:	4620      	mov	r0, r4
   813e2:	4b04      	ldr	r3, [pc, #16]	; (813f4 <vQueueWaitForMessageRestricted+0x48>)
   813e4:	4798      	blx	r3
   813e6:	bd38      	pop	{r3, r4, r5, pc}
   813e8:	00080c55 	.word	0x00080c55
   813ec:	00080c75 	.word	0x00080c75
   813f0:	00081b95 	.word	0x00081b95
   813f4:	00080f2d 	.word	0x00080f2d

000813f8 <prvAddCurrentTaskToDelayedList>:
	#endif
}
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( portTickType xTimeToWake )
{
   813f8:	b510      	push	{r4, lr}
   813fa:	4604      	mov	r4, r0
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
   813fc:	4b0f      	ldr	r3, [pc, #60]	; (8143c <prvAddCurrentTaskToDelayedList+0x44>)
   813fe:	681b      	ldr	r3, [r3, #0]
   81400:	8098      	strh	r0, [r3, #4]

	if( xTimeToWake < xTickCount )
   81402:	4b0f      	ldr	r3, [pc, #60]	; (81440 <prvAddCurrentTaskToDelayedList+0x48>)
   81404:	881b      	ldrh	r3, [r3, #0]
   81406:	b29b      	uxth	r3, r3
   81408:	4298      	cmp	r0, r3
   8140a:	d207      	bcs.n	8141c <prvAddCurrentTaskToDelayedList+0x24>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
   8140c:	4b0d      	ldr	r3, [pc, #52]	; (81444 <prvAddCurrentTaskToDelayedList+0x4c>)
   8140e:	6818      	ldr	r0, [r3, #0]
   81410:	4b0a      	ldr	r3, [pc, #40]	; (8143c <prvAddCurrentTaskToDelayedList+0x44>)
   81412:	6819      	ldr	r1, [r3, #0]
   81414:	3104      	adds	r1, #4
   81416:	4b0c      	ldr	r3, [pc, #48]	; (81448 <prvAddCurrentTaskToDelayedList+0x50>)
   81418:	4798      	blx	r3
   8141a:	bd10      	pop	{r4, pc}
	}
	else
	{
		/* The wake time has not overflowed, so we can use the current block list. */
		vListInsert( ( xList * ) pxDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
   8141c:	4b0b      	ldr	r3, [pc, #44]	; (8144c <prvAddCurrentTaskToDelayedList+0x54>)
   8141e:	6818      	ldr	r0, [r3, #0]
   81420:	4b06      	ldr	r3, [pc, #24]	; (8143c <prvAddCurrentTaskToDelayedList+0x44>)
   81422:	6819      	ldr	r1, [r3, #0]
   81424:	3104      	adds	r1, #4
   81426:	4b08      	ldr	r3, [pc, #32]	; (81448 <prvAddCurrentTaskToDelayedList+0x50>)
   81428:	4798      	blx	r3

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
   8142a:	4b09      	ldr	r3, [pc, #36]	; (81450 <prvAddCurrentTaskToDelayedList+0x58>)
   8142c:	881b      	ldrh	r3, [r3, #0]
   8142e:	b29b      	uxth	r3, r3
   81430:	429c      	cmp	r4, r3
		{
			xNextTaskUnblockTime = xTimeToWake;
   81432:	bf3c      	itt	cc
   81434:	4b06      	ldrcc	r3, [pc, #24]	; (81450 <prvAddCurrentTaskToDelayedList+0x58>)
   81436:	801c      	strhcc	r4, [r3, #0]
   81438:	bd10      	pop	{r4, pc}
   8143a:	bf00      	nop
   8143c:	20078b5c 	.word	0x20078b5c
   81440:	20078b78 	.word	0x20078b78
   81444:	20078b7c 	.word	0x20078b7c
   81448:	00080b79 	.word	0x00080b79
   8144c:	20078a44 	.word	0x20078a44
   81450:	2007014c 	.word	0x2007014c

00081454 <xTaskGenericCreate>:
/*-----------------------------------------------------------
 * TASK CREATION API documented in task.h
 *----------------------------------------------------------*/

signed portBASE_TYPE xTaskGenericCreate( pdTASK_CODE pxTaskCode, const signed char * const pcName, unsigned short usStackDepth, void *pvParameters, unsigned portBASE_TYPE uxPriority, xTaskHandle *pxCreatedTask, portSTACK_TYPE *puxStackBuffer, const xMemoryRegion * const xRegions )
{
   81454:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   81458:	b083      	sub	sp, #12
   8145a:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   8145c:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
   81460:	9e0e      	ldr	r6, [sp, #56]	; 0x38
signed portBASE_TYPE xReturn;
tskTCB * pxNewTCB;

	configASSERT( pxTaskCode );
   81462:	9001      	str	r0, [sp, #4]
   81464:	b918      	cbnz	r0, 8146e <xTaskGenericCreate+0x1a>
   81466:	4b62      	ldr	r3, [pc, #392]	; (815f0 <xTaskGenericCreate+0x19c>)
   81468:	4798      	blx	r3
   8146a:	bf00      	nop
   8146c:	e7fd      	b.n	8146a <xTaskGenericCreate+0x16>
   8146e:	4689      	mov	r9, r1
   81470:	4615      	mov	r5, r2
   81472:	469b      	mov	fp, r3
	configASSERT( ( ( uxPriority & ( ~portPRIVILEGE_BIT ) ) < configMAX_PRIORITIES ) );
   81474:	2f09      	cmp	r7, #9
   81476:	d903      	bls.n	81480 <xTaskGenericCreate+0x2c>
   81478:	4b5d      	ldr	r3, [pc, #372]	; (815f0 <xTaskGenericCreate+0x19c>)
   8147a:	4798      	blx	r3
   8147c:	bf00      	nop
   8147e:	e7fd      	b.n	8147c <xTaskGenericCreate+0x28>
{
tskTCB *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( tskTCB * ) pvPortMalloc( sizeof( tskTCB ) );
   81480:	2050      	movs	r0, #80	; 0x50
   81482:	4b5c      	ldr	r3, [pc, #368]	; (815f4 <xTaskGenericCreate+0x1a0>)
   81484:	4798      	blx	r3

	if( pxNewTCB != NULL )
   81486:	4604      	mov	r4, r0
   81488:	2800      	cmp	r0, #0
   8148a:	f000 80ab 	beq.w	815e4 <xTaskGenericCreate+0x190>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
   8148e:	2e00      	cmp	r6, #0
   81490:	f040 80a5 	bne.w	815de <xTaskGenericCreate+0x18a>
   81494:	00a8      	lsls	r0, r5, #2
   81496:	4b57      	ldr	r3, [pc, #348]	; (815f4 <xTaskGenericCreate+0x1a0>)
   81498:	4798      	blx	r3
   8149a:	6320      	str	r0, [r4, #48]	; 0x30

		if( pxNewTCB->pxStack == NULL )
   8149c:	b918      	cbnz	r0, 814a6 <xTaskGenericCreate+0x52>
		{
			/* Could not allocate the stack.  Delete the allocated TCB. */
			vPortFree( pxNewTCB );
   8149e:	4620      	mov	r0, r4
   814a0:	4b55      	ldr	r3, [pc, #340]	; (815f8 <xTaskGenericCreate+0x1a4>)
   814a2:	4798      	blx	r3
   814a4:	e09e      	b.n	815e4 <xTaskGenericCreate+0x190>
			pxNewTCB = NULL;
		}
		else
		{
			/* Just to help debugging. */
			memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( portSTACK_TYPE ) );
   814a6:	21a5      	movs	r1, #165	; 0xa5
   814a8:	00aa      	lsls	r2, r5, #2
   814aa:	4b54      	ldr	r3, [pc, #336]	; (815fc <xTaskGenericCreate+0x1a8>)
   814ac:	4798      	blx	r3
		stack grows from high memory to low (as per the 80x86) or visa versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( unsigned short ) 1 );
   814ae:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
   814b2:	3d01      	subs	r5, #1
   814b4:	6b23      	ldr	r3, [r4, #48]	; 0x30
   814b6:	eb03 0385 	add.w	r3, r3, r5, lsl #2
			pxTopOfStack = ( portSTACK_TYPE * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK  ) );
   814ba:	f023 0507 	bic.w	r5, r3, #7
{
	/* Store the function name in the TCB. */
	#if configMAX_TASK_NAME_LEN > 1
	{
		/* Don't bring strncpy into the build unnecessarily. */
		strncpy( ( char * ) pxTCB->pcTaskName, ( const char * ) pcName, ( unsigned short ) configMAX_TASK_NAME_LEN );
   814be:	f104 0034 	add.w	r0, r4, #52	; 0x34
   814c2:	4649      	mov	r1, r9
   814c4:	2210      	movs	r2, #16
   814c6:	4b4e      	ldr	r3, [pc, #312]	; (81600 <xTaskGenericCreate+0x1ac>)
   814c8:	4798      	blx	r3
	}
	#endif
	pxTCB->pcTaskName[ ( unsigned short ) configMAX_TASK_NAME_LEN - ( unsigned short ) 1 ] = ( signed char ) '\0';
   814ca:	2300      	movs	r3, #0
   814cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   814d0:	463e      	mov	r6, r7
   814d2:	2f09      	cmp	r7, #9
   814d4:	bf28      	it	cs
   814d6:	2609      	movcs	r6, #9
	if( uxPriority >= configMAX_PRIORITIES )
	{
		uxPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
	}

	pxTCB->uxPriority = uxPriority;
   814d8:	62e6      	str	r6, [r4, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
   814da:	64e6      	str	r6, [r4, #76]	; 0x4c
	}
	#endif

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
   814dc:	f104 0904 	add.w	r9, r4, #4
   814e0:	4648      	mov	r0, r9
   814e2:	f8df a16c 	ldr.w	sl, [pc, #364]	; 81650 <xTaskGenericCreate+0x1fc>
   814e6:	47d0      	blx	sl
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
   814e8:	f104 0018 	add.w	r0, r4, #24
   814ec:	47d0      	blx	sl

	/* Set the pxTCB as a link back from the xListItem.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
   814ee:	6124      	str	r4, [r4, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
   814f0:	f1c6 060a 	rsb	r6, r6, #10
   814f4:	8326      	strh	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
   814f6:	6264      	str	r4, [r4, #36]	; 0x24
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
   814f8:	4628      	mov	r0, r5
   814fa:	9901      	ldr	r1, [sp, #4]
   814fc:	465a      	mov	r2, fp
   814fe:	4b41      	ldr	r3, [pc, #260]	; (81604 <xTaskGenericCreate+0x1b0>)
   81500:	4798      	blx	r3
   81502:	6020      	str	r0, [r4, #0]
		}
		#endif

		/* Check the alignment of the initialised stack. */
		portALIGNMENT_ASSERT_pxCurrentTCB( ( ( ( unsigned long ) pxNewTCB->pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
   81504:	f010 0f07 	tst.w	r0, #7
   81508:	d003      	beq.n	81512 <xTaskGenericCreate+0xbe>
   8150a:	4b39      	ldr	r3, [pc, #228]	; (815f0 <xTaskGenericCreate+0x19c>)
   8150c:	4798      	blx	r3
   8150e:	bf00      	nop
   81510:	e7fd      	b.n	8150e <xTaskGenericCreate+0xba>

		if( ( void * ) pxCreatedTask != NULL )
   81512:	f1b8 0f00 	cmp.w	r8, #0
   81516:	d001      	beq.n	8151c <xTaskGenericCreate+0xc8>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( xTaskHandle ) pxNewTCB;
   81518:	f8c8 4000 	str.w	r4, [r8]
		}

		/* We are going to manipulate the task queues to add this task to a
		ready list, so must make sure no interrupts occur. */
		taskENTER_CRITICAL();
   8151c:	4b3a      	ldr	r3, [pc, #232]	; (81608 <xTaskGenericCreate+0x1b4>)
   8151e:	4798      	blx	r3
		{
			uxCurrentNumberOfTasks++;
   81520:	4a3a      	ldr	r2, [pc, #232]	; (8160c <xTaskGenericCreate+0x1b8>)
   81522:	6813      	ldr	r3, [r2, #0]
   81524:	3301      	adds	r3, #1
   81526:	6013      	str	r3, [r2, #0]
			if( pxCurrentTCB == NULL )
   81528:	4b39      	ldr	r3, [pc, #228]	; (81610 <xTaskGenericCreate+0x1bc>)
   8152a:	681b      	ldr	r3, [r3, #0]
   8152c:	bb0b      	cbnz	r3, 81572 <xTaskGenericCreate+0x11e>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
   8152e:	4b38      	ldr	r3, [pc, #224]	; (81610 <xTaskGenericCreate+0x1bc>)
   81530:	601c      	str	r4, [r3, #0]

				if( uxCurrentNumberOfTasks == ( unsigned portBASE_TYPE ) 1 )
   81532:	6813      	ldr	r3, [r2, #0]
   81534:	2b01      	cmp	r3, #1
   81536:	d126      	bne.n	81586 <xTaskGenericCreate+0x132>
   81538:	4d36      	ldr	r5, [pc, #216]	; (81614 <xTaskGenericCreate+0x1c0>)
   8153a:	f105 08c8 	add.w	r8, r5, #200	; 0xc8
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
   8153e:	4e36      	ldr	r6, [pc, #216]	; (81618 <xTaskGenericCreate+0x1c4>)
   81540:	4628      	mov	r0, r5
   81542:	47b0      	blx	r6
   81544:	3514      	adds	r5, #20

static void prvInitialiseTaskLists( void )
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
   81546:	4545      	cmp	r5, r8
   81548:	d1fa      	bne.n	81540 <xTaskGenericCreate+0xec>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( ( xList * ) &xDelayedTaskList1 );
   8154a:	f8df 8108 	ldr.w	r8, [pc, #264]	; 81654 <xTaskGenericCreate+0x200>
   8154e:	4640      	mov	r0, r8
   81550:	4d31      	ldr	r5, [pc, #196]	; (81618 <xTaskGenericCreate+0x1c4>)
   81552:	47a8      	blx	r5
	vListInitialise( ( xList * ) &xDelayedTaskList2 );
   81554:	4e31      	ldr	r6, [pc, #196]	; (8161c <xTaskGenericCreate+0x1c8>)
   81556:	4630      	mov	r0, r6
   81558:	47a8      	blx	r5
	vListInitialise( ( xList * ) &xPendingReadyList );
   8155a:	4831      	ldr	r0, [pc, #196]	; (81620 <xTaskGenericCreate+0x1cc>)
   8155c:	47a8      	blx	r5

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( ( xList * ) &xTasksWaitingTermination );
   8155e:	4831      	ldr	r0, [pc, #196]	; (81624 <xTaskGenericCreate+0x1d0>)
   81560:	47a8      	blx	r5
	}
	#endif

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( ( xList * ) &xSuspendedTaskList );
   81562:	4831      	ldr	r0, [pc, #196]	; (81628 <xTaskGenericCreate+0x1d4>)
   81564:	47a8      	blx	r5
	}
	#endif

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
   81566:	4b31      	ldr	r3, [pc, #196]	; (8162c <xTaskGenericCreate+0x1d8>)
   81568:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
   8156c:	4b30      	ldr	r3, [pc, #192]	; (81630 <xTaskGenericCreate+0x1dc>)
   8156e:	601e      	str	r6, [r3, #0]
   81570:	e009      	b.n	81586 <xTaskGenericCreate+0x132>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
   81572:	4b30      	ldr	r3, [pc, #192]	; (81634 <xTaskGenericCreate+0x1e0>)
   81574:	681b      	ldr	r3, [r3, #0]
   81576:	b933      	cbnz	r3, 81586 <xTaskGenericCreate+0x132>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
   81578:	4b25      	ldr	r3, [pc, #148]	; (81610 <xTaskGenericCreate+0x1bc>)
   8157a:	681b      	ldr	r3, [r3, #0]
   8157c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   8157e:	429f      	cmp	r7, r3
					{
						pxCurrentTCB = pxNewTCB;
   81580:	bf24      	itt	cs
   81582:	4b23      	ldrcs	r3, [pc, #140]	; (81610 <xTaskGenericCreate+0x1bc>)
   81584:	601c      	strcs	r4, [r3, #0]
				}
			}

			/* Remember the top priority to make context switching faster.  Use
			the priority in pxNewTCB as this has been capped to a valid value. */
			if( pxNewTCB->uxPriority > uxTopUsedPriority )
   81586:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   81588:	4b2b      	ldr	r3, [pc, #172]	; (81638 <xTaskGenericCreate+0x1e4>)
   8158a:	681b      	ldr	r3, [r3, #0]
   8158c:	4298      	cmp	r0, r3
			{
				uxTopUsedPriority = pxNewTCB->uxPriority;
   8158e:	bf84      	itt	hi
   81590:	4b29      	ldrhi	r3, [pc, #164]	; (81638 <xTaskGenericCreate+0x1e4>)
   81592:	6018      	strhi	r0, [r3, #0]
			}

			#if ( configUSE_TRACE_FACILITY == 1 )
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
   81594:	4a29      	ldr	r2, [pc, #164]	; (8163c <xTaskGenericCreate+0x1e8>)
   81596:	6813      	ldr	r3, [r2, #0]
   81598:	6463      	str	r3, [r4, #68]	; 0x44
			}
			#endif
			uxTaskNumber++;
   8159a:	3301      	adds	r3, #1
   8159c:	6013      	str	r3, [r2, #0]

			prvAddTaskToReadyQueue( pxNewTCB );
   8159e:	4b28      	ldr	r3, [pc, #160]	; (81640 <xTaskGenericCreate+0x1ec>)
   815a0:	681b      	ldr	r3, [r3, #0]
   815a2:	4298      	cmp	r0, r3
   815a4:	bf84      	itt	hi
   815a6:	4b26      	ldrhi	r3, [pc, #152]	; (81640 <xTaskGenericCreate+0x1ec>)
   815a8:	6018      	strhi	r0, [r3, #0]
   815aa:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   815ae:	4b19      	ldr	r3, [pc, #100]	; (81614 <xTaskGenericCreate+0x1c0>)
   815b0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   815b4:	4649      	mov	r1, r9
   815b6:	4b23      	ldr	r3, [pc, #140]	; (81644 <xTaskGenericCreate+0x1f0>)
   815b8:	4798      	blx	r3

			xReturn = pdPASS;
			portSETUP_TCB( pxNewTCB );
			traceTASK_CREATE( pxNewTCB );
		}
		taskEXIT_CRITICAL();
   815ba:	4b23      	ldr	r3, [pc, #140]	; (81648 <xTaskGenericCreate+0x1f4>)
   815bc:	4798      	blx	r3
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
	{
		if( xSchedulerRunning != pdFALSE )
   815be:	4b1d      	ldr	r3, [pc, #116]	; (81634 <xTaskGenericCreate+0x1e0>)
   815c0:	681b      	ldr	r3, [r3, #0]
   815c2:	b143      	cbz	r3, 815d6 <xTaskGenericCreate+0x182>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
   815c4:	4b12      	ldr	r3, [pc, #72]	; (81610 <xTaskGenericCreate+0x1bc>)
   815c6:	681b      	ldr	r3, [r3, #0]
   815c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   815ca:	429f      	cmp	r7, r3
   815cc:	d905      	bls.n	815da <xTaskGenericCreate+0x186>
			{
				portYIELD_WITHIN_API();
   815ce:	4b1f      	ldr	r3, [pc, #124]	; (8164c <xTaskGenericCreate+0x1f8>)
   815d0:	4798      	blx	r3
   815d2:	2001      	movs	r0, #1
   815d4:	e008      	b.n	815e8 <xTaskGenericCreate+0x194>
   815d6:	2001      	movs	r0, #1
   815d8:	e006      	b.n	815e8 <xTaskGenericCreate+0x194>
   815da:	2001      	movs	r0, #1
   815dc:	e004      	b.n	815e8 <xTaskGenericCreate+0x194>
	if( pxNewTCB != NULL )
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
   815de:	6306      	str	r6, [r0, #48]	; 0x30
   815e0:	4630      	mov	r0, r6
   815e2:	e760      	b.n	814a6 <xTaskGenericCreate+0x52>
		}
		taskEXIT_CRITICAL();
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
   815e4:	f04f 30ff 	mov.w	r0, #4294967295
			}
		}
	}

	return xReturn;
}
   815e8:	b003      	add	sp, #12
   815ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   815ee:	bf00      	nop
   815f0:	00080c45 	.word	0x00080c45
   815f4:	00080da1 	.word	0x00080da1
   815f8:	00080e69 	.word	0x00080e69
   815fc:	00083a39 	.word	0x00083a39
   81600:	00083c39 	.word	0x00083c39
   81604:	00080bf9 	.word	0x00080bf9
   81608:	00080c55 	.word	0x00080c55
   8160c:	20078b84 	.word	0x20078b84
   81610:	20078b5c 	.word	0x20078b5c
   81614:	20078a7c 	.word	0x20078a7c
   81618:	00080b3d 	.word	0x00080b3d
   8161c:	20078a64 	.word	0x20078a64
   81620:	20078b60 	.word	0x20078b60
   81624:	20078b44 	.word	0x20078b44
   81628:	20078a30 	.word	0x20078a30
   8162c:	20078a44 	.word	0x20078a44
   81630:	20078b7c 	.word	0x20078b7c
   81634:	20078a48 	.word	0x20078a48
   81638:	20078b8c 	.word	0x20078b8c
   8163c:	20078b80 	.word	0x20078b80
   81640:	20078a78 	.word	0x20078a78
   81644:	00080b5d 	.word	0x00080b5d
   81648:	00080c75 	.word	0x00080c75
   8164c:	00080c35 	.word	0x00080c35
   81650:	00080b55 	.word	0x00080b55
   81654:	20078a50 	.word	0x20078a50

00081658 <vTaskStartScheduler>:
 * PUBLIC SCHEDULER CONTROL documented in task.h
 *----------------------------------------------------------*/


void vTaskStartScheduler( void )
{
   81658:	b510      	push	{r4, lr}
   8165a:	b084      	sub	sp, #16
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle );
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );
   8165c:	2300      	movs	r3, #0
   8165e:	9300      	str	r3, [sp, #0]
   81660:	9301      	str	r3, [sp, #4]
   81662:	9302      	str	r3, [sp, #8]
   81664:	9303      	str	r3, [sp, #12]
   81666:	480f      	ldr	r0, [pc, #60]	; (816a4 <vTaskStartScheduler+0x4c>)
   81668:	490f      	ldr	r1, [pc, #60]	; (816a8 <vTaskStartScheduler+0x50>)
   8166a:	f44f 7280 	mov.w	r2, #256	; 0x100
   8166e:	4c0f      	ldr	r4, [pc, #60]	; (816ac <vTaskStartScheduler+0x54>)
   81670:	47a0      	blx	r4
	}
	#endif

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
   81672:	2801      	cmp	r0, #1
   81674:	d10e      	bne.n	81694 <vTaskStartScheduler+0x3c>
		{
			xReturn = xTimerCreateTimerTask();
   81676:	4b0e      	ldr	r3, [pc, #56]	; (816b0 <vTaskStartScheduler+0x58>)
   81678:	4798      	blx	r3
		}
	}
	#endif

	if( xReturn == pdPASS )
   8167a:	2801      	cmp	r0, #1
   8167c:	d10a      	bne.n	81694 <vTaskStartScheduler+0x3c>
		so interrupts will automatically get re-enabled when the first task
		starts to run.

		STEPPING THROUGH HERE USING A DEBUGGER CAN CAUSE BIG PROBLEMS IF THE
		DEBUGGER ALLOWS INTERRUPTS TO BE PROCESSED. */
		portDISABLE_INTERRUPTS();
   8167e:	4b0d      	ldr	r3, [pc, #52]	; (816b4 <vTaskStartScheduler+0x5c>)
   81680:	4798      	blx	r3

		xSchedulerRunning = pdTRUE;
   81682:	2201      	movs	r2, #1
   81684:	4b0c      	ldr	r3, [pc, #48]	; (816b8 <vTaskStartScheduler+0x60>)
   81686:	601a      	str	r2, [r3, #0]
		xTickCount = ( portTickType ) 0U;
   81688:	2200      	movs	r2, #0
   8168a:	4b0c      	ldr	r3, [pc, #48]	; (816bc <vTaskStartScheduler+0x64>)
   8168c:	801a      	strh	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
   8168e:	4b0c      	ldr	r3, [pc, #48]	; (816c0 <vTaskStartScheduler+0x68>)
   81690:	4798      	blx	r3
   81692:	e004      	b.n	8169e <vTaskStartScheduler+0x46>
			/* Should only reach here if a task calls xTaskEndScheduler(). */
		}
	}

	/* This line will only be reached if the kernel could not be started. */
	configASSERT( xReturn );
   81694:	b918      	cbnz	r0, 8169e <vTaskStartScheduler+0x46>
   81696:	4b07      	ldr	r3, [pc, #28]	; (816b4 <vTaskStartScheduler+0x5c>)
   81698:	4798      	blx	r3
   8169a:	bf00      	nop
   8169c:	e7fd      	b.n	8169a <vTaskStartScheduler+0x42>
}
   8169e:	b004      	add	sp, #16
   816a0:	bd10      	pop	{r4, pc}
   816a2:	bf00      	nop
   816a4:	00081a09 	.word	0x00081a09
   816a8:	00086924 	.word	0x00086924
   816ac:	00081455 	.word	0x00081455
   816b0:	00081ec9 	.word	0x00081ec9
   816b4:	00080c45 	.word	0x00080c45
   816b8:	20078a48 	.word	0x20078a48
   816bc:	20078b78 	.word	0x20078b78
   816c0:	00080d11 	.word	0x00080d11

000816c4 <vTaskSuspendAll>:

void vTaskSuspendAll( void )
{
	/* A critical section is not required as the variable is of type
	portBASE_TYPE. */
	++uxSchedulerSuspended;
   816c4:	4a02      	ldr	r2, [pc, #8]	; (816d0 <vTaskSuspendAll+0xc>)
   816c6:	6813      	ldr	r3, [r2, #0]
   816c8:	3301      	adds	r3, #1
   816ca:	6013      	str	r3, [r2, #0]
   816cc:	4770      	bx	lr
   816ce:	bf00      	nop
   816d0:	20078b74 	.word	0x20078b74

000816d4 <xTaskGetTickCount>:
 *----------------------------------------------------------*/



portTickType xTaskGetTickCount( void )
{
   816d4:	b510      	push	{r4, lr}
portTickType xTicks;

	/* Critical section required if running on a 16 bit processor. */
	taskENTER_CRITICAL();
   816d6:	4b04      	ldr	r3, [pc, #16]	; (816e8 <xTaskGetTickCount+0x14>)
   816d8:	4798      	blx	r3
	{
		xTicks = xTickCount;
   816da:	4b04      	ldr	r3, [pc, #16]	; (816ec <xTaskGetTickCount+0x18>)
   816dc:	881c      	ldrh	r4, [r3, #0]
   816de:	b2a4      	uxth	r4, r4
	}
	taskEXIT_CRITICAL();
   816e0:	4b03      	ldr	r3, [pc, #12]	; (816f0 <xTaskGetTickCount+0x1c>)
   816e2:	4798      	blx	r3

	return xTicks;
}
   816e4:	4620      	mov	r0, r4
   816e6:	bd10      	pop	{r4, pc}
   816e8:	00080c55 	.word	0x00080c55
   816ec:	20078b78 	.word	0x20078b78
   816f0:	00080c75 	.word	0x00080c75

000816f4 <vTaskIncrementTick>:
 * SCHEDULER INTERNALS AVAILABLE FOR PORTING PURPOSES
 * documented in task.h
 *----------------------------------------------------------*/

void vTaskIncrementTick( void )
{
   816f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   816f8:	4b3d      	ldr	r3, [pc, #244]	; (817f0 <vTaskIncrementTick+0xfc>)
   816fa:	681b      	ldr	r3, [r3, #0]
   816fc:	2b00      	cmp	r3, #0
   816fe:	d171      	bne.n	817e4 <vTaskIncrementTick+0xf0>
	{
		++xTickCount;
   81700:	4a3c      	ldr	r2, [pc, #240]	; (817f4 <vTaskIncrementTick+0x100>)
   81702:	8813      	ldrh	r3, [r2, #0]
   81704:	3301      	adds	r3, #1
   81706:	b29b      	uxth	r3, r3
   81708:	8013      	strh	r3, [r2, #0]
		if( xTickCount == ( portTickType ) 0U )
   8170a:	8813      	ldrh	r3, [r2, #0]
   8170c:	b29b      	uxth	r3, r3
   8170e:	bb03      	cbnz	r3, 81752 <vTaskIncrementTick+0x5e>
			xList *pxTemp;

			/* Tick count has overflowed so we need to swap the delay lists.
			If there are any items in pxDelayedTaskList here then there is
			an error! */
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );
   81710:	4b39      	ldr	r3, [pc, #228]	; (817f8 <vTaskIncrementTick+0x104>)
   81712:	681b      	ldr	r3, [r3, #0]
   81714:	681b      	ldr	r3, [r3, #0]
   81716:	b11b      	cbz	r3, 81720 <vTaskIncrementTick+0x2c>
   81718:	4b38      	ldr	r3, [pc, #224]	; (817fc <vTaskIncrementTick+0x108>)
   8171a:	4798      	blx	r3
   8171c:	bf00      	nop
   8171e:	e7fd      	b.n	8171c <vTaskIncrementTick+0x28>

			pxTemp = pxDelayedTaskList;
   81720:	4b35      	ldr	r3, [pc, #212]	; (817f8 <vTaskIncrementTick+0x104>)
   81722:	6819      	ldr	r1, [r3, #0]
			pxDelayedTaskList = pxOverflowDelayedTaskList;
   81724:	4a36      	ldr	r2, [pc, #216]	; (81800 <vTaskIncrementTick+0x10c>)
   81726:	6810      	ldr	r0, [r2, #0]
   81728:	6018      	str	r0, [r3, #0]
			pxOverflowDelayedTaskList = pxTemp;
   8172a:	6011      	str	r1, [r2, #0]
			xNumOfOverflows++;
   8172c:	4935      	ldr	r1, [pc, #212]	; (81804 <vTaskIncrementTick+0x110>)
   8172e:	680a      	ldr	r2, [r1, #0]
   81730:	3201      	adds	r2, #1
   81732:	600a      	str	r2, [r1, #0]

			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   81734:	681b      	ldr	r3, [r3, #0]
   81736:	681b      	ldr	r3, [r3, #0]
   81738:	b923      	cbnz	r3, 81744 <vTaskIncrementTick+0x50>
				/* The new current delayed list is empty.  Set
				xNextTaskUnblockTime to the maximum possible value so it is
				extremely unlikely that the
				if( xTickCount >= xNextTaskUnblockTime ) test will pass until
				there is an item in the delayed list. */
				xNextTaskUnblockTime = portMAX_DELAY;
   8173a:	f64f 72ff 	movw	r2, #65535	; 0xffff
   8173e:	4b32      	ldr	r3, [pc, #200]	; (81808 <vTaskIncrementTick+0x114>)
   81740:	801a      	strh	r2, [r3, #0]
   81742:	e006      	b.n	81752 <vTaskIncrementTick+0x5e>
			{
				/* The new current delayed list is not empty, get the value of
				the item at the head of the delayed list.  This is the time at
				which the task at the head of the delayed list should be removed
				from the Blocked state. */
				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
   81744:	4b2c      	ldr	r3, [pc, #176]	; (817f8 <vTaskIncrementTick+0x104>)
   81746:	681b      	ldr	r3, [r3, #0]
   81748:	68db      	ldr	r3, [r3, #12]
   8174a:	68db      	ldr	r3, [r3, #12]
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
   8174c:	889a      	ldrh	r2, [r3, #4]
   8174e:	4b2e      	ldr	r3, [pc, #184]	; (81808 <vTaskIncrementTick+0x114>)
   81750:	801a      	strh	r2, [r3, #0]
			}
		}

		/* See if this tick has made a timeout expire. */
		prvCheckDelayedTasks();
   81752:	4b28      	ldr	r3, [pc, #160]	; (817f4 <vTaskIncrementTick+0x100>)
   81754:	881a      	ldrh	r2, [r3, #0]
   81756:	b292      	uxth	r2, r2
   81758:	4b2b      	ldr	r3, [pc, #172]	; (81808 <vTaskIncrementTick+0x114>)
   8175a:	881b      	ldrh	r3, [r3, #0]
   8175c:	b29b      	uxth	r3, r3
   8175e:	429a      	cmp	r2, r3
   81760:	d344      	bcc.n	817ec <vTaskIncrementTick+0xf8>
   81762:	4b25      	ldr	r3, [pc, #148]	; (817f8 <vTaskIncrementTick+0x104>)
   81764:	681b      	ldr	r3, [r3, #0]
   81766:	681b      	ldr	r3, [r3, #0]
   81768:	b16b      	cbz	r3, 81786 <vTaskIncrementTick+0x92>
   8176a:	4b23      	ldr	r3, [pc, #140]	; (817f8 <vTaskIncrementTick+0x104>)
   8176c:	681b      	ldr	r3, [r3, #0]
   8176e:	68db      	ldr	r3, [r3, #12]
   81770:	68dc      	ldr	r4, [r3, #12]
   81772:	88a2      	ldrh	r2, [r4, #4]
   81774:	4b1f      	ldr	r3, [pc, #124]	; (817f4 <vTaskIncrementTick+0x100>)
   81776:	881b      	ldrh	r3, [r3, #0]
   81778:	b29b      	uxth	r3, r3
   8177a:	429a      	cmp	r2, r3
   8177c:	d813      	bhi.n	817a6 <vTaskIncrementTick+0xb2>
   8177e:	4d23      	ldr	r5, [pc, #140]	; (8180c <vTaskIncrementTick+0x118>)
   81780:	4e23      	ldr	r6, [pc, #140]	; (81810 <vTaskIncrementTick+0x11c>)
   81782:	4f24      	ldr	r7, [pc, #144]	; (81814 <vTaskIncrementTick+0x120>)
   81784:	e013      	b.n	817ae <vTaskIncrementTick+0xba>
   81786:	f64f 72ff 	movw	r2, #65535	; 0xffff
   8178a:	4b1f      	ldr	r3, [pc, #124]	; (81808 <vTaskIncrementTick+0x114>)
   8178c:	801a      	strh	r2, [r3, #0]
   8178e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   81792:	4b19      	ldr	r3, [pc, #100]	; (817f8 <vTaskIncrementTick+0x104>)
   81794:	681b      	ldr	r3, [r3, #0]
   81796:	68db      	ldr	r3, [r3, #12]
   81798:	68dc      	ldr	r4, [r3, #12]
   8179a:	88a2      	ldrh	r2, [r4, #4]
   8179c:	4b15      	ldr	r3, [pc, #84]	; (817f4 <vTaskIncrementTick+0x100>)
   8179e:	881b      	ldrh	r3, [r3, #0]
   817a0:	b29b      	uxth	r3, r3
   817a2:	429a      	cmp	r2, r3
   817a4:	d903      	bls.n	817ae <vTaskIncrementTick+0xba>
   817a6:	4b18      	ldr	r3, [pc, #96]	; (81808 <vTaskIncrementTick+0x114>)
   817a8:	801a      	strh	r2, [r3, #0]
   817aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   817ae:	f104 0804 	add.w	r8, r4, #4
   817b2:	4640      	mov	r0, r8
   817b4:	47a8      	blx	r5
   817b6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   817b8:	b113      	cbz	r3, 817c0 <vTaskIncrementTick+0xcc>
   817ba:	f104 0018 	add.w	r0, r4, #24
   817be:	47a8      	blx	r5
   817c0:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   817c2:	6833      	ldr	r3, [r6, #0]
   817c4:	4298      	cmp	r0, r3
   817c6:	bf88      	it	hi
   817c8:	6030      	strhi	r0, [r6, #0]
   817ca:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   817ce:	eb07 0080 	add.w	r0, r7, r0, lsl #2
   817d2:	4641      	mov	r1, r8
   817d4:	4b10      	ldr	r3, [pc, #64]	; (81818 <vTaskIncrementTick+0x124>)
   817d6:	4798      	blx	r3
   817d8:	4b07      	ldr	r3, [pc, #28]	; (817f8 <vTaskIncrementTick+0x104>)
   817da:	681b      	ldr	r3, [r3, #0]
   817dc:	681b      	ldr	r3, [r3, #0]
   817de:	2b00      	cmp	r3, #0
   817e0:	d1d7      	bne.n	81792 <vTaskIncrementTick+0x9e>
   817e2:	e7d0      	b.n	81786 <vTaskIncrementTick+0x92>
	}
	else
	{
		++uxMissedTicks;
   817e4:	4a0d      	ldr	r2, [pc, #52]	; (8181c <vTaskIncrementTick+0x128>)
   817e6:	6813      	ldr	r3, [r2, #0]
   817e8:	3301      	adds	r3, #1
   817ea:	6013      	str	r3, [r2, #0]
   817ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   817f0:	20078b74 	.word	0x20078b74
   817f4:	20078b78 	.word	0x20078b78
   817f8:	20078a44 	.word	0x20078a44
   817fc:	00080c45 	.word	0x00080c45
   81800:	20078b7c 	.word	0x20078b7c
   81804:	20078b58 	.word	0x20078b58
   81808:	2007014c 	.word	0x2007014c
   8180c:	00080bbd 	.word	0x00080bbd
   81810:	20078a78 	.word	0x20078a78
   81814:	20078a7c 	.word	0x20078a7c
   81818:	00080b5d 	.word	0x00080b5d
   8181c:	20078a2c 	.word	0x20078a2c

00081820 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE != 0  */
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
   81820:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
   81824:	4b30      	ldr	r3, [pc, #192]	; (818e8 <xTaskResumeAll+0xc8>)
   81826:	681b      	ldr	r3, [r3, #0]
   81828:	b91b      	cbnz	r3, 81832 <xTaskResumeAll+0x12>
   8182a:	4b30      	ldr	r3, [pc, #192]	; (818ec <xTaskResumeAll+0xcc>)
   8182c:	4798      	blx	r3
   8182e:	bf00      	nop
   81830:	e7fd      	b.n	8182e <xTaskResumeAll+0xe>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
   81832:	4b2f      	ldr	r3, [pc, #188]	; (818f0 <xTaskResumeAll+0xd0>)
   81834:	4798      	blx	r3
	{
		--uxSchedulerSuspended;
   81836:	4b2c      	ldr	r3, [pc, #176]	; (818e8 <xTaskResumeAll+0xc8>)
   81838:	681a      	ldr	r2, [r3, #0]
   8183a:	3a01      	subs	r2, #1
   8183c:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   8183e:	681b      	ldr	r3, [r3, #0]
   81840:	2b00      	cmp	r3, #0
   81842:	d149      	bne.n	818d8 <xTaskResumeAll+0xb8>
		{
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0U )
   81844:	4b2b      	ldr	r3, [pc, #172]	; (818f4 <xTaskResumeAll+0xd4>)
   81846:	681b      	ldr	r3, [r3, #0]
   81848:	bb03      	cbnz	r3, 8188c <xTaskResumeAll+0x6c>
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;
   8184a:	2400      	movs	r4, #0
   8184c:	e047      	b.n	818de <xTaskResumeAll+0xbe>

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
   8184e:	f8d8 300c 	ldr.w	r3, [r8, #12]
   81852:	68dc      	ldr	r4, [r3, #12]
					uxListRemove( &( pxTCB->xEventListItem ) );
   81854:	f104 0018 	add.w	r0, r4, #24
   81858:	47b8      	blx	r7
					uxListRemove( &( pxTCB->xGenericListItem ) );
   8185a:	f104 0904 	add.w	r9, r4, #4
   8185e:	4648      	mov	r0, r9
   81860:	47b8      	blx	r7
					prvAddTaskToReadyQueue( pxTCB );
   81862:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   81864:	6833      	ldr	r3, [r6, #0]
   81866:	4298      	cmp	r0, r3
   81868:	bf88      	it	hi
   8186a:	6030      	strhi	r0, [r6, #0]
   8186c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   81870:	4b21      	ldr	r3, [pc, #132]	; (818f8 <xTaskResumeAll+0xd8>)
   81872:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   81876:	4649      	mov	r1, r9
   81878:	4b20      	ldr	r3, [pc, #128]	; (818fc <xTaskResumeAll+0xdc>)
   8187a:	4798      	blx	r3

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
   8187c:	4b20      	ldr	r3, [pc, #128]	; (81900 <xTaskResumeAll+0xe0>)
   8187e:	681b      	ldr	r3, [r3, #0]
   81880:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   81882:	6adb      	ldr	r3, [r3, #44]	; 0x2c
					{
						xYieldRequired = pdTRUE;
   81884:	429a      	cmp	r2, r3
   81886:	bf28      	it	cs
   81888:	2501      	movcs	r5, #1
   8188a:	e004      	b.n	81896 <xTaskResumeAll+0x76>
   8188c:	2500      	movs	r5, #0
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
   8188e:	f8df 8090 	ldr.w	r8, [pc, #144]	; 81920 <xTaskResumeAll+0x100>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
					uxListRemove( &( pxTCB->xEventListItem ) );
   81892:	4f1c      	ldr	r7, [pc, #112]	; (81904 <xTaskResumeAll+0xe4>)
					uxListRemove( &( pxTCB->xGenericListItem ) );
					prvAddTaskToReadyQueue( pxTCB );
   81894:	4e1c      	ldr	r6, [pc, #112]	; (81908 <xTaskResumeAll+0xe8>)
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
   81896:	f8d8 3000 	ldr.w	r3, [r8]
   8189a:	2b00      	cmp	r3, #0
   8189c:	d1d7      	bne.n	8184e <xTaskResumeAll+0x2e>
				}

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
   8189e:	4b1b      	ldr	r3, [pc, #108]	; (8190c <xTaskResumeAll+0xec>)
   818a0:	681b      	ldr	r3, [r3, #0]
   818a2:	b163      	cbz	r3, 818be <xTaskResumeAll+0x9e>
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
   818a4:	4b19      	ldr	r3, [pc, #100]	; (8190c <xTaskResumeAll+0xec>)
   818a6:	681b      	ldr	r3, [r3, #0]
   818a8:	b17b      	cbz	r3, 818ca <xTaskResumeAll+0xaa>
					{
						vTaskIncrementTick();
   818aa:	4d19      	ldr	r5, [pc, #100]	; (81910 <xTaskResumeAll+0xf0>)
						--uxMissedTicks;
   818ac:	4c17      	ldr	r4, [pc, #92]	; (8190c <xTaskResumeAll+0xec>)
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
					{
						vTaskIncrementTick();
   818ae:	47a8      	blx	r5
						--uxMissedTicks;
   818b0:	6823      	ldr	r3, [r4, #0]
   818b2:	3b01      	subs	r3, #1
   818b4:	6023      	str	r3, [r4, #0]
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
   818b6:	6823      	ldr	r3, [r4, #0]
   818b8:	2b00      	cmp	r3, #0
   818ba:	d1f8      	bne.n	818ae <xTaskResumeAll+0x8e>
   818bc:	e005      	b.n	818ca <xTaskResumeAll+0xaa>
						xYieldRequired = pdTRUE;
					}
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
   818be:	2d01      	cmp	r5, #1
   818c0:	d003      	beq.n	818ca <xTaskResumeAll+0xaa>
   818c2:	4b14      	ldr	r3, [pc, #80]	; (81914 <xTaskResumeAll+0xf4>)
   818c4:	681b      	ldr	r3, [r3, #0]
   818c6:	2b01      	cmp	r3, #1
   818c8:	d108      	bne.n	818dc <xTaskResumeAll+0xbc>
				{
					xAlreadyYielded = pdTRUE;
					xMissedYield = pdFALSE;
   818ca:	2200      	movs	r2, #0
   818cc:	4b11      	ldr	r3, [pc, #68]	; (81914 <xTaskResumeAll+0xf4>)
   818ce:	601a      	str	r2, [r3, #0]
					portYIELD_WITHIN_API();
   818d0:	4b11      	ldr	r3, [pc, #68]	; (81918 <xTaskResumeAll+0xf8>)
   818d2:	4798      	blx	r3
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
				{
					xAlreadyYielded = pdTRUE;
   818d4:	2401      	movs	r4, #1
   818d6:	e002      	b.n	818de <xTaskResumeAll+0xbe>
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;
   818d8:	2400      	movs	r4, #0
   818da:	e000      	b.n	818de <xTaskResumeAll+0xbe>
   818dc:	2400      	movs	r4, #0
					portYIELD_WITHIN_API();
				}
			}
		}
	}
	taskEXIT_CRITICAL();
   818de:	4b0f      	ldr	r3, [pc, #60]	; (8191c <xTaskResumeAll+0xfc>)
   818e0:	4798      	blx	r3

	return xAlreadyYielded;
}
   818e2:	4620      	mov	r0, r4
   818e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   818e8:	20078b74 	.word	0x20078b74
   818ec:	00080c45 	.word	0x00080c45
   818f0:	00080c55 	.word	0x00080c55
   818f4:	20078b84 	.word	0x20078b84
   818f8:	20078a7c 	.word	0x20078a7c
   818fc:	00080b5d 	.word	0x00080b5d
   81900:	20078b5c 	.word	0x20078b5c
   81904:	00080bbd 	.word	0x00080bbd
   81908:	20078a78 	.word	0x20078a78
   8190c:	20078a2c 	.word	0x20078a2c
   81910:	000816f5 	.word	0x000816f5
   81914:	20078b88 	.word	0x20078b88
   81918:	00080c35 	.word	0x00080c35
   8191c:	00080c75 	.word	0x00080c75
   81920:	20078b60 	.word	0x20078b60

00081924 <vTaskDelayUntil>:
 *----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( portTickType * const pxPreviousWakeTime, portTickType xTimeIncrement )
	{
   81924:	b538      	push	{r3, r4, r5, lr}
	portTickType xTimeToWake;
	portBASE_TYPE xAlreadyYielded, xShouldDelay = pdFALSE;

		configASSERT( pxPreviousWakeTime );
   81926:	b918      	cbnz	r0, 81930 <vTaskDelayUntil+0xc>
   81928:	4b1c      	ldr	r3, [pc, #112]	; (8199c <vTaskDelayUntil+0x78>)
   8192a:	4798      	blx	r3
   8192c:	bf00      	nop
   8192e:	e7fd      	b.n	8192c <vTaskDelayUntil+0x8>
   81930:	460c      	mov	r4, r1
   81932:	4605      	mov	r5, r0
		configASSERT( ( xTimeIncrement > 0U ) );
   81934:	b919      	cbnz	r1, 8193e <vTaskDelayUntil+0x1a>
   81936:	4b19      	ldr	r3, [pc, #100]	; (8199c <vTaskDelayUntil+0x78>)
   81938:	4798      	blx	r3
   8193a:	bf00      	nop
   8193c:	e7fd      	b.n	8193a <vTaskDelayUntil+0x16>

		vTaskSuspendAll();
   8193e:	4b18      	ldr	r3, [pc, #96]	; (819a0 <vTaskDelayUntil+0x7c>)
   81940:	4798      	blx	r3
		{
			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
   81942:	882b      	ldrh	r3, [r5, #0]
   81944:	441c      	add	r4, r3
   81946:	b2a4      	uxth	r4, r4

			if( xTickCount < *pxPreviousWakeTime )
   81948:	4a16      	ldr	r2, [pc, #88]	; (819a4 <vTaskDelayUntil+0x80>)
   8194a:	8812      	ldrh	r2, [r2, #0]
   8194c:	b292      	uxth	r2, r2
   8194e:	4293      	cmp	r3, r2
   81950:	d908      	bls.n	81964 <vTaskDelayUntil+0x40>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xTickCount ) )
   81952:	42a3      	cmp	r3, r4
   81954:	d91e      	bls.n	81994 <vTaskDelayUntil+0x70>
   81956:	4b13      	ldr	r3, [pc, #76]	; (819a4 <vTaskDelayUntil+0x80>)
   81958:	881b      	ldrh	r3, [r3, #0]
   8195a:	b29b      	uxth	r3, r3
					xShouldDelay = pdTRUE;
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
   8195c:	802c      	strh	r4, [r5, #0]

			if( xShouldDelay != pdFALSE )
   8195e:	429c      	cmp	r4, r3
   81960:	d910      	bls.n	81984 <vTaskDelayUntil+0x60>
   81962:	e007      	b.n	81974 <vTaskDelayUntil+0x50>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xTickCount ) )
   81964:	42a3      	cmp	r3, r4
   81966:	d813      	bhi.n	81990 <vTaskDelayUntil+0x6c>
   81968:	4b0e      	ldr	r3, [pc, #56]	; (819a4 <vTaskDelayUntil+0x80>)
   8196a:	881b      	ldrh	r3, [r3, #0]
   8196c:	b29b      	uxth	r3, r3
   8196e:	429c      	cmp	r4, r3
   81970:	d80e      	bhi.n	81990 <vTaskDelayUntil+0x6c>
   81972:	e00f      	b.n	81994 <vTaskDelayUntil+0x70>
				traceTASK_DELAY_UNTIL();

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
   81974:	4b0c      	ldr	r3, [pc, #48]	; (819a8 <vTaskDelayUntil+0x84>)
   81976:	6818      	ldr	r0, [r3, #0]
   81978:	3004      	adds	r0, #4
   8197a:	4b0c      	ldr	r3, [pc, #48]	; (819ac <vTaskDelayUntil+0x88>)
   8197c:	4798      	blx	r3
					no need to check, and the port reset macro can be called
					directly. */
					portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
				}

				prvAddCurrentTaskToDelayedList( xTimeToWake );
   8197e:	4620      	mov	r0, r4
   81980:	4b0b      	ldr	r3, [pc, #44]	; (819b0 <vTaskDelayUntil+0x8c>)
   81982:	4798      	blx	r3
			}
		}
		xAlreadyYielded = xTaskResumeAll();
   81984:	4b0b      	ldr	r3, [pc, #44]	; (819b4 <vTaskDelayUntil+0x90>)
   81986:	4798      	blx	r3

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
   81988:	b930      	cbnz	r0, 81998 <vTaskDelayUntil+0x74>
		{
			portYIELD_WITHIN_API();
   8198a:	4b0b      	ldr	r3, [pc, #44]	; (819b8 <vTaskDelayUntil+0x94>)
   8198c:	4798      	blx	r3
   8198e:	bd38      	pop	{r3, r4, r5, pc}
					xShouldDelay = pdTRUE;
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
   81990:	802c      	strh	r4, [r5, #0]
   81992:	e7ef      	b.n	81974 <vTaskDelayUntil+0x50>
   81994:	802c      	strh	r4, [r5, #0]
   81996:	e7f5      	b.n	81984 <vTaskDelayUntil+0x60>
   81998:	bd38      	pop	{r3, r4, r5, pc}
   8199a:	bf00      	nop
   8199c:	00080c45 	.word	0x00080c45
   819a0:	000816c5 	.word	0x000816c5
   819a4:	20078b78 	.word	0x20078b78
   819a8:	20078b5c 	.word	0x20078b5c
   819ac:	00080bbd 	.word	0x00080bbd
   819b0:	000813f9 	.word	0x000813f9
   819b4:	00081821 	.word	0x00081821
   819b8:	00080c35 	.word	0x00080c35

000819bc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( portTickType xTicksToDelay )
	{
   819bc:	b510      	push	{r4, lr}
	portTickType xTimeToWake;
	signed portBASE_TYPE xAlreadyYielded = pdFALSE;

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( portTickType ) 0U )
   819be:	b188      	cbz	r0, 819e4 <vTaskDelay+0x28>
   819c0:	4604      	mov	r4, r0
		{
			vTaskSuspendAll();
   819c2:	4b0a      	ldr	r3, [pc, #40]	; (819ec <vTaskDelay+0x30>)
   819c4:	4798      	blx	r3
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
   819c6:	4b0a      	ldr	r3, [pc, #40]	; (819f0 <vTaskDelay+0x34>)
   819c8:	881b      	ldrh	r3, [r3, #0]
   819ca:	441c      	add	r4, r3
   819cc:	b2a4      	uxth	r4, r4

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
   819ce:	4b09      	ldr	r3, [pc, #36]	; (819f4 <vTaskDelay+0x38>)
   819d0:	6818      	ldr	r0, [r3, #0]
   819d2:	3004      	adds	r0, #4
   819d4:	4b08      	ldr	r3, [pc, #32]	; (819f8 <vTaskDelay+0x3c>)
   819d6:	4798      	blx	r3
					/* The current task must be in a ready list, so there is
					no need to check, and the port reset macro can be called
					directly. */
					portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
				}
				prvAddCurrentTaskToDelayedList( xTimeToWake );
   819d8:	4620      	mov	r0, r4
   819da:	4b08      	ldr	r3, [pc, #32]	; (819fc <vTaskDelay+0x40>)
   819dc:	4798      	blx	r3
			}
			xAlreadyYielded = xTaskResumeAll();
   819de:	4b08      	ldr	r3, [pc, #32]	; (81a00 <vTaskDelay+0x44>)
   819e0:	4798      	blx	r3
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
   819e2:	b908      	cbnz	r0, 819e8 <vTaskDelay+0x2c>
		{
			portYIELD_WITHIN_API();
   819e4:	4b07      	ldr	r3, [pc, #28]	; (81a04 <vTaskDelay+0x48>)
   819e6:	4798      	blx	r3
   819e8:	bd10      	pop	{r4, pc}
   819ea:	bf00      	nop
   819ec:	000816c5 	.word	0x000816c5
   819f0:	20078b78 	.word	0x20078b78
   819f4:	20078b5c 	.word	0x20078b5c
   819f8:	00080bbd 	.word	0x00080bbd
   819fc:	000813f9 	.word	0x000813f9
   81a00:	00081821 	.word	0x00081821
   81a04:	00080c35 	.word	0x00080c35

00081a08 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
   81a08:	b580      	push	{r7, lr}
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
   81a0a:	4d15      	ldr	r5, [pc, #84]	; (81a60 <prvIdleTask+0x58>)
		{
			vTaskSuspendAll();
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
   81a0c:	4e15      	ldr	r6, [pc, #84]	; (81a64 <prvIdleTask+0x5c>)

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
		{
			vTaskSuspendAll();
   81a0e:	f8df 8074 	ldr.w	r8, [pc, #116]	; 81a84 <prvIdleTask+0x7c>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
			xTaskResumeAll();
   81a12:	4f15      	ldr	r7, [pc, #84]	; (81a68 <prvIdleTask+0x60>)
   81a14:	e019      	b.n	81a4a <prvIdleTask+0x42>

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
		{
			vTaskSuspendAll();
   81a16:	47c0      	blx	r8
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
   81a18:	6834      	ldr	r4, [r6, #0]
			xTaskResumeAll();
   81a1a:	47b8      	blx	r7

			if( xListIsEmpty == pdFALSE )
   81a1c:	b1ac      	cbz	r4, 81a4a <prvIdleTask+0x42>
			{
				tskTCB *pxTCB;

				taskENTER_CRITICAL();
   81a1e:	4b13      	ldr	r3, [pc, #76]	; (81a6c <prvIdleTask+0x64>)
   81a20:	4798      	blx	r3
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
   81a22:	68f3      	ldr	r3, [r6, #12]
   81a24:	68dc      	ldr	r4, [r3, #12]
					uxListRemove( &( pxTCB->xGenericListItem ) );
   81a26:	1d20      	adds	r0, r4, #4
   81a28:	4b11      	ldr	r3, [pc, #68]	; (81a70 <prvIdleTask+0x68>)
   81a2a:	4798      	blx	r3
					--uxCurrentNumberOfTasks;
   81a2c:	4a11      	ldr	r2, [pc, #68]	; (81a74 <prvIdleTask+0x6c>)
   81a2e:	6813      	ldr	r3, [r2, #0]
   81a30:	3b01      	subs	r3, #1
   81a32:	6013      	str	r3, [r2, #0]
					--uxTasksDeleted;
   81a34:	682b      	ldr	r3, [r5, #0]
   81a36:	3b01      	subs	r3, #1
   81a38:	602b      	str	r3, [r5, #0]
				}
				taskEXIT_CRITICAL();
   81a3a:	4b0f      	ldr	r3, [pc, #60]	; (81a78 <prvIdleTask+0x70>)
   81a3c:	4798      	blx	r3
		want to allocate and clean RAM statically. */
		portCLEAN_UP_TCB( pxTCB );

		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
   81a3e:	6b20      	ldr	r0, [r4, #48]	; 0x30
   81a40:	f8df 9044 	ldr.w	r9, [pc, #68]	; 81a88 <prvIdleTask+0x80>
   81a44:	47c8      	blx	r9
		vPortFree( pxTCB );
   81a46:	4620      	mov	r0, r4
   81a48:	47c8      	blx	r9
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
   81a4a:	682b      	ldr	r3, [r5, #0]
   81a4c:	2b00      	cmp	r3, #0
   81a4e:	d1e2      	bne.n	81a16 <prvIdleTask+0xe>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
   81a50:	4b0a      	ldr	r3, [pc, #40]	; (81a7c <prvIdleTask+0x74>)
   81a52:	681b      	ldr	r3, [r3, #0]
   81a54:	2b01      	cmp	r3, #1
   81a56:	d9f8      	bls.n	81a4a <prvIdleTask+0x42>
			{
				taskYIELD();
   81a58:	4b09      	ldr	r3, [pc, #36]	; (81a80 <prvIdleTask+0x78>)
   81a5a:	4798      	blx	r3
   81a5c:	e7d7      	b.n	81a0e <prvIdleTask+0x6>
   81a5e:	bf00      	nop
   81a60:	20078a4c 	.word	0x20078a4c
   81a64:	20078b44 	.word	0x20078b44
   81a68:	00081821 	.word	0x00081821
   81a6c:	00080c55 	.word	0x00080c55
   81a70:	00080bbd 	.word	0x00080bbd
   81a74:	20078b84 	.word	0x20078b84
   81a78:	00080c75 	.word	0x00080c75
   81a7c:	20078a7c 	.word	0x20078a7c
   81a80:	00080c35 	.word	0x00080c35
   81a84:	000816c5 	.word	0x000816c5
   81a88:	00080e69 	.word	0x00080e69

00081a8c <vTaskSwitchContext>:

#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
   81a8c:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
   81a8e:	4b22      	ldr	r3, [pc, #136]	; (81b18 <vTaskSwitchContext+0x8c>)
   81a90:	681b      	ldr	r3, [r3, #0]
   81a92:	b96b      	cbnz	r3, 81ab0 <vTaskSwitchContext+0x24>
		#endif

		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();

		taskSELECT_HIGHEST_PRIORITY_TASK();
   81a94:	4b21      	ldr	r3, [pc, #132]	; (81b1c <vTaskSwitchContext+0x90>)
   81a96:	681b      	ldr	r3, [r3, #0]
   81a98:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   81a9c:	009b      	lsls	r3, r3, #2
   81a9e:	4a20      	ldr	r2, [pc, #128]	; (81b20 <vTaskSwitchContext+0x94>)
   81aa0:	58d3      	ldr	r3, [r2, r3]
   81aa2:	b9cb      	cbnz	r3, 81ad8 <vTaskSwitchContext+0x4c>
   81aa4:	4b1d      	ldr	r3, [pc, #116]	; (81b1c <vTaskSwitchContext+0x90>)
   81aa6:	681b      	ldr	r3, [r3, #0]
   81aa8:	b143      	cbz	r3, 81abc <vTaskSwitchContext+0x30>
   81aaa:	4a1c      	ldr	r2, [pc, #112]	; (81b1c <vTaskSwitchContext+0x90>)
   81aac:	491c      	ldr	r1, [pc, #112]	; (81b20 <vTaskSwitchContext+0x94>)
   81aae:	e009      	b.n	81ac4 <vTaskSwitchContext+0x38>
{
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
   81ab0:	2201      	movs	r2, #1
   81ab2:	4b1c      	ldr	r3, [pc, #112]	; (81b24 <vTaskSwitchContext+0x98>)
   81ab4:	601a      	str	r2, [r3, #0]
   81ab6:	bd10      	pop	{r4, pc}
		#endif

		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();

		taskSELECT_HIGHEST_PRIORITY_TASK();
   81ab8:	6813      	ldr	r3, [r2, #0]
   81aba:	b91b      	cbnz	r3, 81ac4 <vTaskSwitchContext+0x38>
   81abc:	4b1a      	ldr	r3, [pc, #104]	; (81b28 <vTaskSwitchContext+0x9c>)
   81abe:	4798      	blx	r3
   81ac0:	bf00      	nop
   81ac2:	e7fd      	b.n	81ac0 <vTaskSwitchContext+0x34>
   81ac4:	6813      	ldr	r3, [r2, #0]
   81ac6:	3b01      	subs	r3, #1
   81ac8:	6013      	str	r3, [r2, #0]
   81aca:	6813      	ldr	r3, [r2, #0]
   81acc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   81ad0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   81ad4:	2b00      	cmp	r3, #0
   81ad6:	d0ef      	beq.n	81ab8 <vTaskSwitchContext+0x2c>
   81ad8:	4b10      	ldr	r3, [pc, #64]	; (81b1c <vTaskSwitchContext+0x90>)
   81ada:	681b      	ldr	r3, [r3, #0]
   81adc:	4a10      	ldr	r2, [pc, #64]	; (81b20 <vTaskSwitchContext+0x94>)
   81ade:	0099      	lsls	r1, r3, #2
   81ae0:	18c8      	adds	r0, r1, r3
   81ae2:	eb02 0080 	add.w	r0, r2, r0, lsl #2
   81ae6:	6844      	ldr	r4, [r0, #4]
   81ae8:	6864      	ldr	r4, [r4, #4]
   81aea:	6044      	str	r4, [r0, #4]
   81aec:	4602      	mov	r2, r0
   81aee:	3208      	adds	r2, #8
   81af0:	4294      	cmp	r4, r2
   81af2:	d106      	bne.n	81b02 <vTaskSwitchContext+0x76>
   81af4:	6860      	ldr	r0, [r4, #4]
   81af6:	eb03 0183 	add.w	r1, r3, r3, lsl #2
   81afa:	4a09      	ldr	r2, [pc, #36]	; (81b20 <vTaskSwitchContext+0x94>)
   81afc:	eb02 0281 	add.w	r2, r2, r1, lsl #2
   81b00:	6050      	str	r0, [r2, #4]
   81b02:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   81b06:	4a06      	ldr	r2, [pc, #24]	; (81b20 <vTaskSwitchContext+0x94>)
   81b08:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   81b0c:	685b      	ldr	r3, [r3, #4]
   81b0e:	68da      	ldr	r2, [r3, #12]
   81b10:	4b06      	ldr	r3, [pc, #24]	; (81b2c <vTaskSwitchContext+0xa0>)
   81b12:	601a      	str	r2, [r3, #0]
   81b14:	bd10      	pop	{r4, pc}
   81b16:	bf00      	nop
   81b18:	20078b74 	.word	0x20078b74
   81b1c:	20078a78 	.word	0x20078a78
   81b20:	20078a7c 	.word	0x20078a7c
   81b24:	20078b88 	.word	0x20078b88
   81b28:	00080c45 	.word	0x00080c45
   81b2c:	20078b5c 	.word	0x20078b5c

00081b30 <vTaskPlaceOnEventList>:
	}
}
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( const xList * const pxEventList, portTickType xTicksToWait )
{
   81b30:	b538      	push	{r3, r4, r5, lr}
portTickType xTimeToWake;

	configASSERT( pxEventList );
   81b32:	b918      	cbnz	r0, 81b3c <vTaskPlaceOnEventList+0xc>
   81b34:	4b0f      	ldr	r3, [pc, #60]	; (81b74 <vTaskPlaceOnEventList+0x44>)
   81b36:	4798      	blx	r3
   81b38:	bf00      	nop
   81b3a:	e7fd      	b.n	81b38 <vTaskPlaceOnEventList+0x8>
   81b3c:	460c      	mov	r4, r1
	SCHEDULER SUSPENDED. */

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event. */
	vListInsert( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
   81b3e:	4d0e      	ldr	r5, [pc, #56]	; (81b78 <vTaskPlaceOnEventList+0x48>)
   81b40:	6829      	ldr	r1, [r5, #0]
   81b42:	3118      	adds	r1, #24
   81b44:	4b0d      	ldr	r3, [pc, #52]	; (81b7c <vTaskPlaceOnEventList+0x4c>)
   81b46:	4798      	blx	r3

	/* We must remove ourselves from the ready list before adding ourselves
	to the blocked list as the same list item is used for both lists.  We have
	exclusive access to the ready lists as the scheduler is locked. */
	if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
   81b48:	6828      	ldr	r0, [r5, #0]
   81b4a:	3004      	adds	r0, #4
   81b4c:	4b0c      	ldr	r3, [pc, #48]	; (81b80 <vTaskPlaceOnEventList+0x50>)
   81b4e:	4798      	blx	r3
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( xTicksToWait == portMAX_DELAY )
   81b50:	f64f 73ff 	movw	r3, #65535	; 0xffff
   81b54:	429c      	cmp	r4, r3
   81b56:	d105      	bne.n	81b64 <vTaskPlaceOnEventList+0x34>
		{
			/* Add ourselves to the suspended task list instead of a delayed task
			list to ensure we are not woken by a timing event.  We will block
			indefinitely. */
			vListInsertEnd( ( xList * ) &xSuspendedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
   81b58:	6829      	ldr	r1, [r5, #0]
   81b5a:	480a      	ldr	r0, [pc, #40]	; (81b84 <vTaskPlaceOnEventList+0x54>)
   81b5c:	3104      	adds	r1, #4
   81b5e:	4b0a      	ldr	r3, [pc, #40]	; (81b88 <vTaskPlaceOnEventList+0x58>)
   81b60:	4798      	blx	r3
   81b62:	bd38      	pop	{r3, r4, r5, pc}
		}
		else
		{
			/* Calculate the time at which the task should be woken if the event does
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
   81b64:	4b09      	ldr	r3, [pc, #36]	; (81b8c <vTaskPlaceOnEventList+0x5c>)
   81b66:	8818      	ldrh	r0, [r3, #0]
   81b68:	4420      	add	r0, r4
			prvAddCurrentTaskToDelayedList( xTimeToWake );
   81b6a:	b280      	uxth	r0, r0
   81b6c:	4b08      	ldr	r3, [pc, #32]	; (81b90 <vTaskPlaceOnEventList+0x60>)
   81b6e:	4798      	blx	r3
   81b70:	bd38      	pop	{r3, r4, r5, pc}
   81b72:	bf00      	nop
   81b74:	00080c45 	.word	0x00080c45
   81b78:	20078b5c 	.word	0x20078b5c
   81b7c:	00080b79 	.word	0x00080b79
   81b80:	00080bbd 	.word	0x00080bbd
   81b84:	20078a30 	.word	0x20078a30
   81b88:	00080b5d 	.word	0x00080b5d
   81b8c:	20078b78 	.word	0x20078b78
   81b90:	000813f9 	.word	0x000813f9

00081b94 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if configUSE_TIMERS == 1

	void vTaskPlaceOnEventListRestricted( const xList * const pxEventList, portTickType xTicksToWait )
	{
   81b94:	b538      	push	{r3, r4, r5, lr}
	portTickType xTimeToWake;

		configASSERT( pxEventList );
   81b96:	b918      	cbnz	r0, 81ba0 <vTaskPlaceOnEventListRestricted+0xc>
   81b98:	4b0a      	ldr	r3, [pc, #40]	; (81bc4 <vTaskPlaceOnEventListRestricted+0x30>)
   81b9a:	4798      	blx	r3
   81b9c:	bf00      	nop
   81b9e:	e7fd      	b.n	81b9c <vTaskPlaceOnEventListRestricted+0x8>
   81ba0:	460d      	mov	r5, r1

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
   81ba2:	4c09      	ldr	r4, [pc, #36]	; (81bc8 <vTaskPlaceOnEventListRestricted+0x34>)
   81ba4:	6821      	ldr	r1, [r4, #0]
   81ba6:	3118      	adds	r1, #24
   81ba8:	4b08      	ldr	r3, [pc, #32]	; (81bcc <vTaskPlaceOnEventListRestricted+0x38>)
   81baa:	4798      	blx	r3

		/* We must remove this task from the ready list before adding it to the
		blocked list as the same list item is used for both lists.  This
		function is called form a critical section. */
		if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
   81bac:	6820      	ldr	r0, [r4, #0]
   81bae:	3004      	adds	r0, #4
   81bb0:	4b07      	ldr	r3, [pc, #28]	; (81bd0 <vTaskPlaceOnEventListRestricted+0x3c>)
   81bb2:	4798      	blx	r3
			portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
		}

		/* Calculate the time at which the task should be woken if the event does
		not occur.  This may overflow but this doesn't matter. */
		xTimeToWake = xTickCount + xTicksToWait;
   81bb4:	4b07      	ldr	r3, [pc, #28]	; (81bd4 <vTaskPlaceOnEventListRestricted+0x40>)
   81bb6:	8818      	ldrh	r0, [r3, #0]
   81bb8:	4428      	add	r0, r5
		
		traceTASK_DELAY_UNTIL();
		prvAddCurrentTaskToDelayedList( xTimeToWake );
   81bba:	b280      	uxth	r0, r0
   81bbc:	4b06      	ldr	r3, [pc, #24]	; (81bd8 <vTaskPlaceOnEventListRestricted+0x44>)
   81bbe:	4798      	blx	r3
   81bc0:	bd38      	pop	{r3, r4, r5, pc}
   81bc2:	bf00      	nop
   81bc4:	00080c45 	.word	0x00080c45
   81bc8:	20078b5c 	.word	0x20078b5c
   81bcc:	00080b5d 	.word	0x00080b5d
   81bd0:	00080bbd 	.word	0x00080bbd
   81bd4:	20078b78 	.word	0x20078b78
   81bd8:	000813f9 	.word	0x000813f9

00081bdc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xTaskRemoveFromEventList( const xList * const pxEventList )
{
   81bdc:	b538      	push	{r3, r4, r5, lr}
	get called - the lock count on the queue will get modified instead.  This
	means we can always expect exclusive access to the event list here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
   81bde:	68c3      	ldr	r3, [r0, #12]
   81be0:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
   81be2:	b91c      	cbnz	r4, 81bec <xTaskRemoveFromEventList+0x10>
   81be4:	4b16      	ldr	r3, [pc, #88]	; (81c40 <xTaskRemoveFromEventList+0x64>)
   81be6:	4798      	blx	r3
   81be8:	bf00      	nop
   81bea:	e7fd      	b.n	81be8 <xTaskRemoveFromEventList+0xc>
	uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
   81bec:	f104 0518 	add.w	r5, r4, #24
   81bf0:	4628      	mov	r0, r5
   81bf2:	4b14      	ldr	r3, [pc, #80]	; (81c44 <xTaskRemoveFromEventList+0x68>)
   81bf4:	4798      	blx	r3

	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   81bf6:	4b14      	ldr	r3, [pc, #80]	; (81c48 <xTaskRemoveFromEventList+0x6c>)
   81bf8:	681b      	ldr	r3, [r3, #0]
   81bfa:	b99b      	cbnz	r3, 81c24 <xTaskRemoveFromEventList+0x48>
	{
		uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
   81bfc:	1d25      	adds	r5, r4, #4
   81bfe:	4628      	mov	r0, r5
   81c00:	4b10      	ldr	r3, [pc, #64]	; (81c44 <xTaskRemoveFromEventList+0x68>)
   81c02:	4798      	blx	r3
		prvAddTaskToReadyQueue( pxUnblockedTCB );
   81c04:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   81c06:	4b11      	ldr	r3, [pc, #68]	; (81c4c <xTaskRemoveFromEventList+0x70>)
   81c08:	681b      	ldr	r3, [r3, #0]
   81c0a:	4298      	cmp	r0, r3
   81c0c:	bf84      	itt	hi
   81c0e:	4b0f      	ldrhi	r3, [pc, #60]	; (81c4c <xTaskRemoveFromEventList+0x70>)
   81c10:	6018      	strhi	r0, [r3, #0]
   81c12:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   81c16:	4b0e      	ldr	r3, [pc, #56]	; (81c50 <xTaskRemoveFromEventList+0x74>)
   81c18:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   81c1c:	4629      	mov	r1, r5
   81c1e:	4b0d      	ldr	r3, [pc, #52]	; (81c54 <xTaskRemoveFromEventList+0x78>)
   81c20:	4798      	blx	r3
   81c22:	e003      	b.n	81c2c <xTaskRemoveFromEventList+0x50>
	}
	else
	{
		/* We cannot access the delayed or ready lists, so will hold this
		task pending until the scheduler is resumed. */
		vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
   81c24:	480c      	ldr	r0, [pc, #48]	; (81c58 <xTaskRemoveFromEventList+0x7c>)
   81c26:	4629      	mov	r1, r5
   81c28:	4b0a      	ldr	r3, [pc, #40]	; (81c54 <xTaskRemoveFromEventList+0x78>)
   81c2a:	4798      	blx	r3
	}

	if( pxUnblockedTCB->uxPriority >= pxCurrentTCB->uxPriority )
   81c2c:	4b0b      	ldr	r3, [pc, #44]	; (81c5c <xTaskRemoveFromEventList+0x80>)
   81c2e:	681b      	ldr	r3, [r3, #0]
   81c30:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   81c32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	{
		xReturn = pdFALSE;
	}

	return xReturn;
}
   81c34:	4298      	cmp	r0, r3
   81c36:	bf34      	ite	cc
   81c38:	2000      	movcc	r0, #0
   81c3a:	2001      	movcs	r0, #1
   81c3c:	bd38      	pop	{r3, r4, r5, pc}
   81c3e:	bf00      	nop
   81c40:	00080c45 	.word	0x00080c45
   81c44:	00080bbd 	.word	0x00080bbd
   81c48:	20078b74 	.word	0x20078b74
   81c4c:	20078a78 	.word	0x20078a78
   81c50:	20078a7c 	.word	0x20078a7c
   81c54:	00080b5d 	.word	0x00080b5d
   81c58:	20078b60 	.word	0x20078b60
   81c5c:	20078b5c 	.word	0x20078b5c

00081c60 <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( xTimeOutType * const pxTimeOut )
{
   81c60:	b508      	push	{r3, lr}
	configASSERT( pxTimeOut );
   81c62:	b918      	cbnz	r0, 81c6c <vTaskSetTimeOutState+0xc>
   81c64:	4b05      	ldr	r3, [pc, #20]	; (81c7c <vTaskSetTimeOutState+0x1c>)
   81c66:	4798      	blx	r3
   81c68:	bf00      	nop
   81c6a:	e7fd      	b.n	81c68 <vTaskSetTimeOutState+0x8>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
   81c6c:	4a04      	ldr	r2, [pc, #16]	; (81c80 <vTaskSetTimeOutState+0x20>)
   81c6e:	6812      	ldr	r2, [r2, #0]
   81c70:	6002      	str	r2, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
   81c72:	4a04      	ldr	r2, [pc, #16]	; (81c84 <vTaskSetTimeOutState+0x24>)
   81c74:	8812      	ldrh	r2, [r2, #0]
   81c76:	8082      	strh	r2, [r0, #4]
   81c78:	bd08      	pop	{r3, pc}
   81c7a:	bf00      	nop
   81c7c:	00080c45 	.word	0x00080c45
   81c80:	20078b58 	.word	0x20078b58
   81c84:	20078b78 	.word	0x20078b78

00081c88 <xTaskCheckForTimeOut>:
}
/*-----------------------------------------------------------*/

portBASE_TYPE xTaskCheckForTimeOut( xTimeOutType * const pxTimeOut, portTickType * const pxTicksToWait )
{
   81c88:	b538      	push	{r3, r4, r5, lr}
portBASE_TYPE xReturn;

	configASSERT( pxTimeOut );
   81c8a:	b918      	cbnz	r0, 81c94 <xTaskCheckForTimeOut+0xc>
   81c8c:	4b1b      	ldr	r3, [pc, #108]	; (81cfc <xTaskCheckForTimeOut+0x74>)
   81c8e:	4798      	blx	r3
   81c90:	bf00      	nop
   81c92:	e7fd      	b.n	81c90 <xTaskCheckForTimeOut+0x8>
   81c94:	460d      	mov	r5, r1
   81c96:	4604      	mov	r4, r0
	configASSERT( pxTicksToWait );
   81c98:	b919      	cbnz	r1, 81ca2 <xTaskCheckForTimeOut+0x1a>
   81c9a:	4b18      	ldr	r3, [pc, #96]	; (81cfc <xTaskCheckForTimeOut+0x74>)
   81c9c:	4798      	blx	r3
   81c9e:	bf00      	nop
   81ca0:	e7fd      	b.n	81c9e <xTaskCheckForTimeOut+0x16>

	taskENTER_CRITICAL();
   81ca2:	4b17      	ldr	r3, [pc, #92]	; (81d00 <xTaskCheckForTimeOut+0x78>)
   81ca4:	4798      	blx	r3
	{
		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
   81ca6:	882b      	ldrh	r3, [r5, #0]
   81ca8:	f64f 72ff 	movw	r2, #65535	; 0xffff
   81cac:	4293      	cmp	r3, r2
   81cae:	d01b      	beq.n	81ce8 <xTaskCheckForTimeOut+0x60>
				xReturn = pdFALSE;
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( ( portTickType ) xTickCount >= ( portTickType ) pxTimeOut->xTimeOnEntering ) )
   81cb0:	4a14      	ldr	r2, [pc, #80]	; (81d04 <xTaskCheckForTimeOut+0x7c>)
   81cb2:	6812      	ldr	r2, [r2, #0]
   81cb4:	6821      	ldr	r1, [r4, #0]
   81cb6:	4291      	cmp	r1, r2
   81cb8:	d005      	beq.n	81cc6 <xTaskCheckForTimeOut+0x3e>
   81cba:	4a13      	ldr	r2, [pc, #76]	; (81d08 <xTaskCheckForTimeOut+0x80>)
   81cbc:	8812      	ldrh	r2, [r2, #0]
   81cbe:	b292      	uxth	r2, r2
   81cc0:	88a1      	ldrh	r1, [r4, #4]
   81cc2:	4291      	cmp	r1, r2
   81cc4:	d912      	bls.n	81cec <xTaskCheckForTimeOut+0x64>
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
		}
		else if( ( ( portTickType ) ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering ) ) < ( portTickType ) *pxTicksToWait )
   81cc6:	4a10      	ldr	r2, [pc, #64]	; (81d08 <xTaskCheckForTimeOut+0x80>)
   81cc8:	8811      	ldrh	r1, [r2, #0]
   81cca:	88a0      	ldrh	r0, [r4, #4]
   81ccc:	1a09      	subs	r1, r1, r0
   81cce:	b289      	uxth	r1, r1
   81cd0:	428b      	cmp	r3, r1
   81cd2:	d90d      	bls.n	81cf0 <xTaskCheckForTimeOut+0x68>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering );
   81cd4:	8812      	ldrh	r2, [r2, #0]
   81cd6:	b292      	uxth	r2, r2
   81cd8:	1a12      	subs	r2, r2, r0
   81cda:	1a9b      	subs	r3, r3, r2
   81cdc:	802b      	strh	r3, [r5, #0]
			vTaskSetTimeOutState( pxTimeOut );
   81cde:	4620      	mov	r0, r4
   81ce0:	4b0a      	ldr	r3, [pc, #40]	; (81d0c <xTaskCheckForTimeOut+0x84>)
   81ce2:	4798      	blx	r3
			xReturn = pdFALSE;
   81ce4:	2400      	movs	r4, #0
   81ce6:	e004      	b.n	81cf2 <xTaskCheckForTimeOut+0x6a>
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
			{
				xReturn = pdFALSE;
   81ce8:	2400      	movs	r4, #0
   81cea:	e002      	b.n	81cf2 <xTaskCheckForTimeOut+0x6a>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
   81cec:	2401      	movs	r4, #1
   81cee:	e000      	b.n	81cf2 <xTaskCheckForTimeOut+0x6a>
			vTaskSetTimeOutState( pxTimeOut );
			xReturn = pdFALSE;
		}
		else
		{
			xReturn = pdTRUE;
   81cf0:	2401      	movs	r4, #1
		}
	}
	taskEXIT_CRITICAL();
   81cf2:	4b07      	ldr	r3, [pc, #28]	; (81d10 <xTaskCheckForTimeOut+0x88>)
   81cf4:	4798      	blx	r3

	return xReturn;
}
   81cf6:	4620      	mov	r0, r4
   81cf8:	bd38      	pop	{r3, r4, r5, pc}
   81cfa:	bf00      	nop
   81cfc:	00080c45 	.word	0x00080c45
   81d00:	00080c55 	.word	0x00080c55
   81d04:	20078b58 	.word	0x20078b58
   81d08:	20078b78 	.word	0x20078b78
   81d0c:	00081c61 	.word	0x00081c61
   81d10:	00080c75 	.word	0x00080c75

00081d14 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
	xMissedYield = pdTRUE;
   81d14:	2201      	movs	r2, #1
   81d16:	4b01      	ldr	r3, [pc, #4]	; (81d1c <vTaskMissedYield+0x8>)
   81d18:	601a      	str	r2, [r3, #0]
   81d1a:	4770      	bx	lr
   81d1c:	20078b88 	.word	0x20078b88

00081d20 <xTaskGetCurrentTaskHandle>:
	xTaskHandle xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
   81d20:	4b01      	ldr	r3, [pc, #4]	; (81d28 <xTaskGetCurrentTaskHandle+0x8>)
   81d22:	6818      	ldr	r0, [r3, #0]

		return xReturn;
	}
   81d24:	4770      	bx	lr
   81d26:	bf00      	nop
   81d28:	20078b5c 	.word	0x20078b5c

00081d2c <xTaskGetSchedulerState>:

	portBASE_TYPE xTaskGetSchedulerState( void )
	{
	portBASE_TYPE xReturn;

		if( xSchedulerRunning == pdFALSE )
   81d2c:	4b05      	ldr	r3, [pc, #20]	; (81d44 <xTaskGetSchedulerState+0x18>)
   81d2e:	681b      	ldr	r3, [r3, #0]
   81d30:	b133      	cbz	r3, 81d40 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
		}
		else
		{
			if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   81d32:	4b05      	ldr	r3, [pc, #20]	; (81d48 <xTaskGetSchedulerState+0x1c>)
   81d34:	681b      	ldr	r3, [r3, #0]
			{
				xReturn = taskSCHEDULER_RUNNING;
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
   81d36:	2b00      	cmp	r3, #0
   81d38:	bf0c      	ite	eq
   81d3a:	2001      	moveq	r0, #1
   81d3c:	2002      	movne	r0, #2
   81d3e:	4770      	bx	lr
	{
	portBASE_TYPE xReturn;

		if( xSchedulerRunning == pdFALSE )
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
   81d40:	2000      	movs	r0, #0
				xReturn = taskSCHEDULER_SUSPENDED;
			}
		}

		return xReturn;
	}
   81d42:	4770      	bx	lr
   81d44:	20078a48 	.word	0x20078a48
   81d48:	20078b74 	.word	0x20078b74

00081d4c <vTaskPriorityInherit>:
	{
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
   81d4c:	2800      	cmp	r0, #0
   81d4e:	d031      	beq.n	81db4 <vTaskPriorityInherit+0x68>
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( xTaskHandle * const pxMutexHolder )
	{
   81d50:	b538      	push	{r3, r4, r5, lr}

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
		{
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
   81d52:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   81d54:	4918      	ldr	r1, [pc, #96]	; (81db8 <vTaskPriorityInherit+0x6c>)
   81d56:	6809      	ldr	r1, [r1, #0]
   81d58:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
   81d5a:	428b      	cmp	r3, r1
   81d5c:	d229      	bcs.n	81db2 <vTaskPriorityInherit+0x66>
			{
				/* Adjust the mutex holder state to account for its new priority. */
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxCurrentTCB->uxPriority );
   81d5e:	4916      	ldr	r1, [pc, #88]	; (81db8 <vTaskPriorityInherit+0x6c>)
   81d60:	6809      	ldr	r1, [r1, #0]
   81d62:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
   81d64:	f1c1 010a 	rsb	r1, r1, #10
   81d68:	8301      	strh	r1, [r0, #24]

				/* If the task being modified is in the ready state it will need to
				be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
   81d6a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   81d6e:	4913      	ldr	r1, [pc, #76]	; (81dbc <vTaskPriorityInherit+0x70>)
   81d70:	eb01 0383 	add.w	r3, r1, r3, lsl #2
   81d74:	6941      	ldr	r1, [r0, #20]
   81d76:	4299      	cmp	r1, r3
   81d78:	d117      	bne.n	81daa <vTaskPriorityInherit+0x5e>
   81d7a:	4605      	mov	r5, r0
				{
					if( uxListRemove( ( xListItem * ) &( pxTCB->xGenericListItem ) ) == 0 )
   81d7c:	1d04      	adds	r4, r0, #4
   81d7e:	4620      	mov	r0, r4
   81d80:	4b0f      	ldr	r3, [pc, #60]	; (81dc0 <vTaskPriorityInherit+0x74>)
   81d82:	4798      	blx	r3
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
   81d84:	4b0c      	ldr	r3, [pc, #48]	; (81db8 <vTaskPriorityInherit+0x6c>)
   81d86:	681b      	ldr	r3, [r3, #0]
   81d88:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
   81d8a:	62e8      	str	r0, [r5, #44]	; 0x2c
					prvAddTaskToReadyQueue( pxTCB );
   81d8c:	4b0d      	ldr	r3, [pc, #52]	; (81dc4 <vTaskPriorityInherit+0x78>)
   81d8e:	681b      	ldr	r3, [r3, #0]
   81d90:	4298      	cmp	r0, r3
   81d92:	bf84      	itt	hi
   81d94:	4b0b      	ldrhi	r3, [pc, #44]	; (81dc4 <vTaskPriorityInherit+0x78>)
   81d96:	6018      	strhi	r0, [r3, #0]
   81d98:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   81d9c:	4b07      	ldr	r3, [pc, #28]	; (81dbc <vTaskPriorityInherit+0x70>)
   81d9e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   81da2:	4621      	mov	r1, r4
   81da4:	4b08      	ldr	r3, [pc, #32]	; (81dc8 <vTaskPriorityInherit+0x7c>)
   81da6:	4798      	blx	r3
   81da8:	bd38      	pop	{r3, r4, r5, pc}
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
   81daa:	4b03      	ldr	r3, [pc, #12]	; (81db8 <vTaskPriorityInherit+0x6c>)
   81dac:	681b      	ldr	r3, [r3, #0]
   81dae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   81db0:	62c3      	str	r3, [r0, #44]	; 0x2c
   81db2:	bd38      	pop	{r3, r4, r5, pc}
   81db4:	4770      	bx	lr
   81db6:	bf00      	nop
   81db8:	20078b5c 	.word	0x20078b5c
   81dbc:	20078a7c 	.word	0x20078a7c
   81dc0:	00080bbd 	.word	0x00080bbd
   81dc4:	20078a78 	.word	0x20078a78
   81dc8:	00080b5d 	.word	0x00080b5d

00081dcc <vTaskPriorityDisinherit>:

	void vTaskPriorityDisinherit( xTaskHandle * const pxMutexHolder )
	{
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;

		if( pxMutexHolder != NULL )
   81dcc:	b1e8      	cbz	r0, 81e0a <vTaskPriorityDisinherit+0x3e>
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinherit( xTaskHandle * const pxMutexHolder )
	{
   81dce:	b538      	push	{r3, r4, r5, lr}
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;

		if( pxMutexHolder != NULL )
		{
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
   81dd0:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
   81dd2:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
   81dd4:	4291      	cmp	r1, r2
   81dd6:	d017      	beq.n	81e08 <vTaskPriorityDisinherit+0x3c>
   81dd8:	4604      	mov	r4, r0
			{
				/* We must be the running task to be able to give the mutex back.
				Remove ourselves from the ready list we currently appear in. */
				if( uxListRemove( ( xListItem * ) &( pxTCB->xGenericListItem ) ) == 0 )
   81dda:	1d05      	adds	r5, r0, #4
   81ddc:	4628      	mov	r0, r5
   81dde:	4b0b      	ldr	r3, [pc, #44]	; (81e0c <vTaskPriorityDisinherit+0x40>)
   81de0:	4798      	blx	r3
				}

				/* Disinherit the priority before adding the task into the new
				ready list. */
				traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
				pxTCB->uxPriority = pxTCB->uxBasePriority;
   81de2:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
   81de4:	62e0      	str	r0, [r4, #44]	; 0x2c
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxTCB->uxPriority );
   81de6:	f1c0 030a 	rsb	r3, r0, #10
   81dea:	8323      	strh	r3, [r4, #24]
				prvAddTaskToReadyQueue( pxTCB );
   81dec:	4b08      	ldr	r3, [pc, #32]	; (81e10 <vTaskPriorityDisinherit+0x44>)
   81dee:	681b      	ldr	r3, [r3, #0]
   81df0:	4298      	cmp	r0, r3
   81df2:	bf84      	itt	hi
   81df4:	4b06      	ldrhi	r3, [pc, #24]	; (81e10 <vTaskPriorityDisinherit+0x44>)
   81df6:	6018      	strhi	r0, [r3, #0]
   81df8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   81dfc:	4b05      	ldr	r3, [pc, #20]	; (81e14 <vTaskPriorityDisinherit+0x48>)
   81dfe:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   81e02:	4629      	mov	r1, r5
   81e04:	4b04      	ldr	r3, [pc, #16]	; (81e18 <vTaskPriorityDisinherit+0x4c>)
   81e06:	4798      	blx	r3
   81e08:	bd38      	pop	{r3, r4, r5, pc}
   81e0a:	4770      	bx	lr
   81e0c:	00080bbd 	.word	0x00080bbd
   81e10:	20078a78 	.word	0x20078a78
   81e14:	20078a7c 	.word	0x20078a7c
   81e18:	00080b5d 	.word	0x00080b5d

00081e1c <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static portBASE_TYPE prvInsertTimerInActiveList( xTIMER *pxTimer, portTickType xNextExpiryTime, portTickType xTimeNow, portTickType xCommandTime )
{
   81e1c:	b510      	push	{r4, lr}
   81e1e:	4604      	mov	r4, r0
portBASE_TYPE xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
   81e20:	8081      	strh	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   81e22:	6120      	str	r0, [r4, #16]

	if( xNextExpiryTime <= xTimeNow )
   81e24:	4291      	cmp	r1, r2
   81e26:	d80b      	bhi.n	81e40 <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( portTickType ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
   81e28:	1ad2      	subs	r2, r2, r3
   81e2a:	8b03      	ldrh	r3, [r0, #24]
   81e2c:	b292      	uxth	r2, r2
   81e2e:	4293      	cmp	r3, r2
   81e30:	d911      	bls.n	81e56 <prvInsertTimerInActiveList+0x3a>
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
   81e32:	4b0b      	ldr	r3, [pc, #44]	; (81e60 <prvInsertTimerInActiveList+0x44>)
   81e34:	6818      	ldr	r0, [r3, #0]
   81e36:	1d21      	adds	r1, r4, #4
   81e38:	4b0a      	ldr	r3, [pc, #40]	; (81e64 <prvInsertTimerInActiveList+0x48>)
   81e3a:	4798      	blx	r3
}
/*-----------------------------------------------------------*/

static portBASE_TYPE prvInsertTimerInActiveList( xTIMER *pxTimer, portTickType xNextExpiryTime, portTickType xTimeNow, portTickType xCommandTime )
{
portBASE_TYPE xProcessTimerNow = pdFALSE;
   81e3c:	2000      	movs	r0, #0
   81e3e:	bd10      	pop	{r4, pc}
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
   81e40:	429a      	cmp	r2, r3
   81e42:	d201      	bcs.n	81e48 <prvInsertTimerInActiveList+0x2c>
   81e44:	4299      	cmp	r1, r3
   81e46:	d208      	bcs.n	81e5a <prvInsertTimerInActiveList+0x3e>
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   81e48:	4b07      	ldr	r3, [pc, #28]	; (81e68 <prvInsertTimerInActiveList+0x4c>)
   81e4a:	6818      	ldr	r0, [r3, #0]
   81e4c:	1d21      	adds	r1, r4, #4
   81e4e:	4b05      	ldr	r3, [pc, #20]	; (81e64 <prvInsertTimerInActiveList+0x48>)
   81e50:	4798      	blx	r3
}
/*-----------------------------------------------------------*/

static portBASE_TYPE prvInsertTimerInActiveList( xTIMER *pxTimer, portTickType xNextExpiryTime, portTickType xTimeNow, portTickType xCommandTime )
{
portBASE_TYPE xProcessTimerNow = pdFALSE;
   81e52:	2000      	movs	r0, #0
   81e54:	bd10      	pop	{r4, pc}
		timer was issued, and the time the command was processed? */
		if( ( ( portTickType ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
   81e56:	2001      	movs	r0, #1
   81e58:	bd10      	pop	{r4, pc}
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
   81e5a:	2001      	movs	r0, #1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
   81e5c:	bd10      	pop	{r4, pc}
   81e5e:	bf00      	nop
   81e60:	20078bc4 	.word	0x20078bc4
   81e64:	00080b79 	.word	0x00080b79
   81e68:	20078b90 	.word	0x20078b90

00081e6c <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
   81e6c:	b570      	push	{r4, r5, r6, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
   81e6e:	4b0d      	ldr	r3, [pc, #52]	; (81ea4 <prvCheckForValidListAndQueue+0x38>)
   81e70:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
   81e72:	4b0d      	ldr	r3, [pc, #52]	; (81ea8 <prvCheckForValidListAndQueue+0x3c>)
   81e74:	681b      	ldr	r3, [r3, #0]
   81e76:	b98b      	cbnz	r3, 81e9c <prvCheckForValidListAndQueue+0x30>
		{
			vListInitialise( &xActiveTimerList1 );
   81e78:	4d0c      	ldr	r5, [pc, #48]	; (81eac <prvCheckForValidListAndQueue+0x40>)
   81e7a:	4628      	mov	r0, r5
   81e7c:	4e0c      	ldr	r6, [pc, #48]	; (81eb0 <prvCheckForValidListAndQueue+0x44>)
   81e7e:	47b0      	blx	r6
			vListInitialise( &xActiveTimerList2 );
   81e80:	4c0c      	ldr	r4, [pc, #48]	; (81eb4 <prvCheckForValidListAndQueue+0x48>)
   81e82:	4620      	mov	r0, r4
   81e84:	47b0      	blx	r6
			pxCurrentTimerList = &xActiveTimerList1;
   81e86:	4b0c      	ldr	r3, [pc, #48]	; (81eb8 <prvCheckForValidListAndQueue+0x4c>)
   81e88:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
   81e8a:	4b0c      	ldr	r3, [pc, #48]	; (81ebc <prvCheckForValidListAndQueue+0x50>)
   81e8c:	601c      	str	r4, [r3, #0]
			xTimerQueue = xQueueCreate( ( unsigned portBASE_TYPE ) configTIMER_QUEUE_LENGTH, sizeof( xTIMER_MESSAGE ) );
   81e8e:	2005      	movs	r0, #5
   81e90:	210c      	movs	r1, #12
   81e92:	2200      	movs	r2, #0
   81e94:	4b0a      	ldr	r3, [pc, #40]	; (81ec0 <prvCheckForValidListAndQueue+0x54>)
   81e96:	4798      	blx	r3
   81e98:	4b03      	ldr	r3, [pc, #12]	; (81ea8 <prvCheckForValidListAndQueue+0x3c>)
   81e9a:	6018      	str	r0, [r3, #0]
		}
	}
	taskEXIT_CRITICAL();
   81e9c:	4b09      	ldr	r3, [pc, #36]	; (81ec4 <prvCheckForValidListAndQueue+0x58>)
   81e9e:	4798      	blx	r3
   81ea0:	bd70      	pop	{r4, r5, r6, pc}
   81ea2:	bf00      	nop
   81ea4:	00080c55 	.word	0x00080c55
   81ea8:	20078bc0 	.word	0x20078bc0
   81eac:	20078b94 	.word	0x20078b94
   81eb0:	00080b3d 	.word	0x00080b3d
   81eb4:	20078ba8 	.word	0x20078ba8
   81eb8:	20078b90 	.word	0x20078b90
   81ebc:	20078bc4 	.word	0x20078bc4
   81ec0:	00081039 	.word	0x00081039
   81ec4:	00080c75 	.word	0x00080c75

00081ec8 <xTimerCreateTimerTask>:
static void prvProcessTimerOrBlockTask( portTickType xNextExpireTime, portBASE_TYPE xListWasEmpty ) PRIVILEGED_FUNCTION;

/*-----------------------------------------------------------*/

portBASE_TYPE xTimerCreateTimerTask( void )
{
   81ec8:	b510      	push	{r4, lr}
   81eca:	b084      	sub	sp, #16

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
   81ecc:	4b0b      	ldr	r3, [pc, #44]	; (81efc <xTimerCreateTimerTask+0x34>)
   81ece:	4798      	blx	r3

	if( xTimerQueue != NULL )
   81ed0:	4b0b      	ldr	r3, [pc, #44]	; (81f00 <xTimerCreateTimerTask+0x38>)
   81ed2:	681b      	ldr	r3, [r3, #0]
   81ed4:	b163      	cbz	r3, 81ef0 <xTimerCreateTimerTask+0x28>
			xReturn = xTaskCreate( prvTimerTask, ( const signed char * ) "Tmr Svc", ( unsigned short ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( unsigned portBASE_TYPE ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, &xTimerTaskHandle );
		}
		#else
		{
			/* Create the timer task without storing its handle. */
			xReturn = xTaskCreate( prvTimerTask, ( const signed char * ) "Tmr Svc", ( unsigned short ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( unsigned portBASE_TYPE ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
   81ed6:	2309      	movs	r3, #9
   81ed8:	9300      	str	r3, [sp, #0]
   81eda:	2300      	movs	r3, #0
   81edc:	9301      	str	r3, [sp, #4]
   81ede:	9302      	str	r3, [sp, #8]
   81ee0:	9303      	str	r3, [sp, #12]
   81ee2:	4808      	ldr	r0, [pc, #32]	; (81f04 <xTimerCreateTimerTask+0x3c>)
   81ee4:	4908      	ldr	r1, [pc, #32]	; (81f08 <xTimerCreateTimerTask+0x40>)
   81ee6:	f44f 7200 	mov.w	r2, #512	; 0x200
   81eea:	4c08      	ldr	r4, [pc, #32]	; (81f0c <xTimerCreateTimerTask+0x44>)
   81eec:	47a0      	blx	r4
		}
		#endif
	}

	configASSERT( xReturn );
   81eee:	b918      	cbnz	r0, 81ef8 <xTimerCreateTimerTask+0x30>
   81ef0:	4b07      	ldr	r3, [pc, #28]	; (81f10 <xTimerCreateTimerTask+0x48>)
   81ef2:	4798      	blx	r3
   81ef4:	bf00      	nop
   81ef6:	e7fd      	b.n	81ef4 <xTimerCreateTimerTask+0x2c>
	return xReturn;
}
   81ef8:	b004      	add	sp, #16
   81efa:	bd10      	pop	{r4, pc}
   81efc:	00081e6d 	.word	0x00081e6d
   81f00:	20078bc0 	.word	0x20078bc0
   81f04:	00082025 	.word	0x00082025
   81f08:	0008692c 	.word	0x0008692c
   81f0c:	00081455 	.word	0x00081455
   81f10:	00080c45 	.word	0x00080c45

00081f14 <xTimerGenericCommand>:
	return ( xTimerHandle ) pxNewTimer;
}
/*-----------------------------------------------------------*/

portBASE_TYPE xTimerGenericCommand( xTimerHandle xTimer, portBASE_TYPE xCommandID, portTickType xOptionalValue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portTickType xBlockTime )
{
   81f14:	b510      	push	{r4, lr}
   81f16:	b084      	sub	sp, #16
portBASE_TYPE xReturn = pdFAIL;
xTIMER_MESSAGE xMessage;

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
   81f18:	4c10      	ldr	r4, [pc, #64]	; (81f5c <xTimerGenericCommand+0x48>)
   81f1a:	6824      	ldr	r4, [r4, #0]
   81f1c:	b1d4      	cbz	r4, 81f54 <xTimerGenericCommand+0x40>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
   81f1e:	9101      	str	r1, [sp, #4]
		xMessage.xMessageValue = xOptionalValue;
   81f20:	f8ad 2008 	strh.w	r2, [sp, #8]
		xMessage.pxTimer = ( xTIMER * ) xTimer;
   81f24:	9003      	str	r0, [sp, #12]

		if( pxHigherPriorityTaskWoken == NULL )
   81f26:	b973      	cbnz	r3, 81f46 <xTimerGenericCommand+0x32>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
   81f28:	4b0d      	ldr	r3, [pc, #52]	; (81f60 <xTimerGenericCommand+0x4c>)
   81f2a:	4798      	blx	r3
   81f2c:	2801      	cmp	r0, #1
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xBlockTime );
   81f2e:	4b0b      	ldr	r3, [pc, #44]	; (81f5c <xTimerGenericCommand+0x48>)
   81f30:	6818      	ldr	r0, [r3, #0]
   81f32:	a901      	add	r1, sp, #4
   81f34:	bf07      	ittee	eq
   81f36:	f8bd 2018 	ldrheq.w	r2, [sp, #24]
   81f3a:	2300      	moveq	r3, #0
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
   81f3c:	2200      	movne	r2, #0
   81f3e:	4613      	movne	r3, r2
   81f40:	4c08      	ldr	r4, [pc, #32]	; (81f64 <xTimerGenericCommand+0x50>)
   81f42:	47a0      	blx	r4
   81f44:	e007      	b.n	81f56 <xTimerGenericCommand+0x42>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
   81f46:	4620      	mov	r0, r4
   81f48:	a901      	add	r1, sp, #4
   81f4a:	461a      	mov	r2, r3
   81f4c:	2300      	movs	r3, #0
   81f4e:	4c06      	ldr	r4, [pc, #24]	; (81f68 <xTimerGenericCommand+0x54>)
   81f50:	47a0      	blx	r4
   81f52:	e000      	b.n	81f56 <xTimerGenericCommand+0x42>
}
/*-----------------------------------------------------------*/

portBASE_TYPE xTimerGenericCommand( xTimerHandle xTimer, portBASE_TYPE xCommandID, portTickType xOptionalValue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portTickType xBlockTime )
{
portBASE_TYPE xReturn = pdFAIL;
   81f54:	2000      	movs	r0, #0

		traceTIMER_COMMAND_SEND( xTimer, xCommandID, xOptionalValue, xReturn );
	}

	return xReturn;
}
   81f56:	b004      	add	sp, #16
   81f58:	bd10      	pop	{r4, pc}
   81f5a:	bf00      	nop
   81f5c:	20078bc0 	.word	0x20078bc0
   81f60:	00081d2d 	.word	0x00081d2d
   81f64:	00081091 	.word	0x00081091
   81f68:	000811b9 	.word	0x000811b9

00081f6c <prvSampleTimeNow>:
	return xNextExpireTime;
}
/*-----------------------------------------------------------*/

static portTickType prvSampleTimeNow( portBASE_TYPE *pxTimerListsWereSwitched )
{
   81f6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   81f70:	b082      	sub	sp, #8
   81f72:	4681      	mov	r9, r0
portTickType xTimeNow;
PRIVILEGED_DATA static portTickType xLastTime = ( portTickType ) 0U;

	xTimeNow = xTaskGetTickCount();
   81f74:	4b23      	ldr	r3, [pc, #140]	; (82004 <prvSampleTimeNow+0x98>)
   81f76:	4798      	blx	r3
   81f78:	4680      	mov	r8, r0

	if( xTimeNow < xLastTime )
   81f7a:	4b23      	ldr	r3, [pc, #140]	; (82008 <prvSampleTimeNow+0x9c>)
   81f7c:	881b      	ldrh	r3, [r3, #0]
   81f7e:	4283      	cmp	r3, r0
   81f80:	d936      	bls.n	81ff0 <prvSampleTimeNow+0x84>
   81f82:	e026      	b.n	81fd2 <prvSampleTimeNow+0x66>
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   81f84:	68da      	ldr	r2, [r3, #12]
   81f86:	8815      	ldrh	r5, [r2, #0]
   81f88:	b2ad      	uxth	r5, r5

		/* Remove the timer from the list. */
		pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
   81f8a:	68db      	ldr	r3, [r3, #12]
   81f8c:	68dc      	ldr	r4, [r3, #12]
		uxListRemove( &( pxTimer->xTimerListItem ) );
   81f8e:	f104 0a04 	add.w	sl, r4, #4
   81f92:	4650      	mov	r0, sl
   81f94:	47b8      	blx	r7

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
   81f96:	6a63      	ldr	r3, [r4, #36]	; 0x24
   81f98:	4620      	mov	r0, r4
   81f9a:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
   81f9c:	69e3      	ldr	r3, [r4, #28]
   81f9e:	2b01      	cmp	r3, #1
   81fa0:	d119      	bne.n	81fd6 <prvSampleTimeNow+0x6a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
   81fa2:	8b23      	ldrh	r3, [r4, #24]
   81fa4:	442b      	add	r3, r5
   81fa6:	b29b      	uxth	r3, r3
			if( xReloadTime > xNextExpireTime )
   81fa8:	42ab      	cmp	r3, r5
   81faa:	d906      	bls.n	81fba <prvSampleTimeNow+0x4e>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
   81fac:	80a3      	strh	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   81fae:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   81fb0:	6830      	ldr	r0, [r6, #0]
   81fb2:	4651      	mov	r1, sl
   81fb4:	4b15      	ldr	r3, [pc, #84]	; (8200c <prvSampleTimeNow+0xa0>)
   81fb6:	4798      	blx	r3
   81fb8:	e00d      	b.n	81fd6 <prvSampleTimeNow+0x6a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xNextExpireTime, NULL, tmrNO_DELAY );
   81fba:	2300      	movs	r3, #0
   81fbc:	9300      	str	r3, [sp, #0]
   81fbe:	4620      	mov	r0, r4
   81fc0:	4619      	mov	r1, r3
   81fc2:	462a      	mov	r2, r5
   81fc4:	4c12      	ldr	r4, [pc, #72]	; (82010 <prvSampleTimeNow+0xa4>)
   81fc6:	47a0      	blx	r4
				configASSERT( xResult );
   81fc8:	b928      	cbnz	r0, 81fd6 <prvSampleTimeNow+0x6a>
   81fca:	4b12      	ldr	r3, [pc, #72]	; (82014 <prvSampleTimeNow+0xa8>)
   81fcc:	4798      	blx	r3
   81fce:	bf00      	nop
   81fd0:	e7fd      	b.n	81fce <prvSampleTimeNow+0x62>

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
   81fd2:	4e11      	ldr	r6, [pc, #68]	; (82018 <prvSampleTimeNow+0xac>)
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );

		/* Remove the timer from the list. */
		pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
		uxListRemove( &( pxTimer->xTimerListItem ) );
   81fd4:	4f11      	ldr	r7, [pc, #68]	; (8201c <prvSampleTimeNow+0xb0>)

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
   81fd6:	6833      	ldr	r3, [r6, #0]
   81fd8:	681a      	ldr	r2, [r3, #0]
   81fda:	2a00      	cmp	r2, #0
   81fdc:	d1d2      	bne.n	81f84 <prvSampleTimeNow+0x18>
			}
		}
	}

	pxTemp = pxCurrentTimerList;
	pxCurrentTimerList = pxOverflowTimerList;
   81fde:	4a10      	ldr	r2, [pc, #64]	; (82020 <prvSampleTimeNow+0xb4>)
   81fe0:	6810      	ldr	r0, [r2, #0]
   81fe2:	490d      	ldr	r1, [pc, #52]	; (82018 <prvSampleTimeNow+0xac>)
   81fe4:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
   81fe6:	6013      	str	r3, [r2, #0]
	xTimeNow = xTaskGetTickCount();

	if( xTimeNow < xLastTime )
	{
		prvSwitchTimerLists( xLastTime );
		*pxTimerListsWereSwitched = pdTRUE;
   81fe8:	2301      	movs	r3, #1
   81fea:	f8c9 3000 	str.w	r3, [r9]
   81fee:	e002      	b.n	81ff6 <prvSampleTimeNow+0x8a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
   81ff0:	2300      	movs	r3, #0
   81ff2:	f8c9 3000 	str.w	r3, [r9]
	}

	xLastTime = xTimeNow;
   81ff6:	4b04      	ldr	r3, [pc, #16]	; (82008 <prvSampleTimeNow+0x9c>)
   81ff8:	f8a3 8000 	strh.w	r8, [r3]

	return xTimeNow;
}
   81ffc:	4640      	mov	r0, r8
   81ffe:	b002      	add	sp, #8
   82000:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   82004:	000816d5 	.word	0x000816d5
   82008:	20078bbc 	.word	0x20078bbc
   8200c:	00080b79 	.word	0x00080b79
   82010:	00081f15 	.word	0x00081f15
   82014:	00080c45 	.word	0x00080c45
   82018:	20078b90 	.word	0x20078b90
   8201c:	00080bbd 	.word	0x00080bbd
   82020:	20078bc4 	.word	0x20078bc4

00082024 <prvTimerTask>:
	pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
}
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
   82024:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   82028:	b087      	sub	sp, #28
				time has not been reached yet.  This task should therefore
				block to wait for the next expire time or a command to be
				received - whichever comes first.  The following line cannot
				be reached unless xNextExpireTime > xTimeNow, except in the
				case when the current timer list is empty. */
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
   8202a:	4d51      	ldr	r5, [pc, #324]	; (82170 <prvTimerTask+0x14c>)
portBASE_TYPE xResult;

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
	uxListRemove( &( pxTimer->xTimerListItem ) );
   8202c:	f8df 8170 	ldr.w	r8, [pc, #368]	; 821a0 <prvTimerTask+0x17c>
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
   82030:	4b50      	ldr	r3, [pc, #320]	; (82174 <prvTimerTask+0x150>)
   82032:	681b      	ldr	r3, [r3, #0]
   82034:	681a      	ldr	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
   82036:	2a00      	cmp	r2, #0
   82038:	f000 8090 	beq.w	8215c <prvTimerTask+0x138>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   8203c:	68db      	ldr	r3, [r3, #12]
   8203e:	881c      	ldrh	r4, [r3, #0]
   82040:	b2a4      	uxth	r4, r4
static void prvProcessTimerOrBlockTask( portTickType xNextExpireTime, portBASE_TYPE xListWasEmpty )
{
portTickType xTimeNow;
portBASE_TYPE xTimerListsWereSwitched;

	vTaskSuspendAll();
   82042:	4b4d      	ldr	r3, [pc, #308]	; (82178 <prvTimerTask+0x154>)
   82044:	4798      	blx	r3
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampelTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   82046:	a803      	add	r0, sp, #12
   82048:	4b4c      	ldr	r3, [pc, #304]	; (8217c <prvTimerTask+0x158>)
   8204a:	4798      	blx	r3
   8204c:	4607      	mov	r7, r0
		if( xTimerListsWereSwitched == pdFALSE )
   8204e:	9b03      	ldr	r3, [sp, #12]
   82050:	2b00      	cmp	r3, #0
   82052:	d132      	bne.n	820ba <prvTimerTask+0x96>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
   82054:	4284      	cmp	r4, r0
   82056:	d825      	bhi.n	820a4 <prvTimerTask+0x80>
			{
				xTaskResumeAll();
   82058:	4b49      	ldr	r3, [pc, #292]	; (82180 <prvTimerTask+0x15c>)
   8205a:	4798      	blx	r3
xTIMER *pxTimer;
portBASE_TYPE xResult;

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
   8205c:	4b45      	ldr	r3, [pc, #276]	; (82174 <prvTimerTask+0x150>)
   8205e:	681b      	ldr	r3, [r3, #0]
   82060:	68db      	ldr	r3, [r3, #12]
   82062:	68de      	ldr	r6, [r3, #12]
	uxListRemove( &( pxTimer->xTimerListItem ) );
   82064:	1d30      	adds	r0, r6, #4
   82066:	47c0      	blx	r8
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
   82068:	69f3      	ldr	r3, [r6, #28]
   8206a:	2b01      	cmp	r3, #1
   8206c:	d115      	bne.n	8209a <prvTimerTask+0x76>
		a time relative to anything other than the current time.  It
		will therefore be inserted into the correct list relative to
		the time this task thinks it is now, even if a command to
		switch lists due to a tick count overflow is already waiting in
		the timer queue. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
   8206e:	8b31      	ldrh	r1, [r6, #24]
   82070:	4421      	add	r1, r4
   82072:	4630      	mov	r0, r6
   82074:	b289      	uxth	r1, r1
   82076:	463a      	mov	r2, r7
   82078:	4623      	mov	r3, r4
   8207a:	4f42      	ldr	r7, [pc, #264]	; (82184 <prvTimerTask+0x160>)
   8207c:	47b8      	blx	r7
   8207e:	2801      	cmp	r0, #1
   82080:	d10b      	bne.n	8209a <prvTimerTask+0x76>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xNextExpireTime, NULL, tmrNO_DELAY );
   82082:	2300      	movs	r3, #0
   82084:	9300      	str	r3, [sp, #0]
   82086:	4630      	mov	r0, r6
   82088:	4619      	mov	r1, r3
   8208a:	4622      	mov	r2, r4
   8208c:	4c3e      	ldr	r4, [pc, #248]	; (82188 <prvTimerTask+0x164>)
   8208e:	47a0      	blx	r4
			configASSERT( xResult );
   82090:	b918      	cbnz	r0, 8209a <prvTimerTask+0x76>
   82092:	4b3e      	ldr	r3, [pc, #248]	; (8218c <prvTimerTask+0x168>)
   82094:	4798      	blx	r3
   82096:	bf00      	nop
   82098:	e7fd      	b.n	82096 <prvTimerTask+0x72>
			( void ) xResult;
		}
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
   8209a:	6a73      	ldr	r3, [r6, #36]	; 0x24
   8209c:	4630      	mov	r0, r6
   8209e:	4798      	blx	r3
   820a0:	e00d      	b.n	820be <prvTimerTask+0x9a>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( portTickType ) 0U;
   820a2:	2400      	movs	r4, #0
				time has not been reached yet.  This task should therefore
				block to wait for the next expire time or a command to be
				received - whichever comes first.  The following line cannot
				be reached unless xNextExpireTime > xTimeNow, except in the
				case when the current timer list is empty. */
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
   820a4:	1be1      	subs	r1, r4, r7
   820a6:	6828      	ldr	r0, [r5, #0]
   820a8:	b289      	uxth	r1, r1
   820aa:	4b39      	ldr	r3, [pc, #228]	; (82190 <prvTimerTask+0x16c>)
   820ac:	4798      	blx	r3

				if( xTaskResumeAll() == pdFALSE )
   820ae:	4b34      	ldr	r3, [pc, #208]	; (82180 <prvTimerTask+0x15c>)
   820b0:	4798      	blx	r3
   820b2:	b920      	cbnz	r0, 820be <prvTimerTask+0x9a>
				{
					/* Yield to wait for either a command to arrive, or the block time
					to expire.  If a command arrived between the critical section being
					exited and this yield then the yield will not cause the task
					to block. */
					portYIELD_WITHIN_API();
   820b4:	4b37      	ldr	r3, [pc, #220]	; (82194 <prvTimerTask+0x170>)
   820b6:	4798      	blx	r3
   820b8:	e001      	b.n	820be <prvTimerTask+0x9a>
				}
			}
		}
		else
		{
			xTaskResumeAll();
   820ba:	4b31      	ldr	r3, [pc, #196]	; (82180 <prvTimerTask+0x15c>)
   820bc:	4798      	blx	r3
portBASE_TYPE xTimerListsWereSwitched, xResult;
portTickType xTimeNow;

	/* In this case the xTimerListsWereSwitched parameter is not used, but it
	must be present in the function call. */
	xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   820be:	a802      	add	r0, sp, #8
   820c0:	4b2e      	ldr	r3, [pc, #184]	; (8217c <prvTimerTask+0x158>)
   820c2:	4798      	blx	r3
   820c4:	4607      	mov	r7, r0

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
   820c6:	4e34      	ldr	r6, [pc, #208]	; (82198 <prvTimerTask+0x174>)
				break;

			case tmrCOMMAND_CHANGE_PERIOD :
				pxTimer->xTimerPeriodInTicks = xMessage.xMessageValue;
				configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
				prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
   820c8:	f8df 90b8 	ldr.w	r9, [pc, #184]	; 82184 <prvTimerTask+0x160>
   820cc:	e03e      	b.n	8214c <prvTimerTask+0x128>
	must be present in the function call. */
	xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
	{
		pxTimer = xMessage.pxTimer;
   820ce:	9c05      	ldr	r4, [sp, #20]

		/* Is the timer already in a list of active timers?  When the command
		is trmCOMMAND_PROCESS_TIMER_OVERFLOW, the timer will be NULL as the
		command is to the task rather than to an individual timer. */
		if( pxTimer != NULL )
   820d0:	b11c      	cbz	r4, 820da <prvTimerTask+0xb6>
		{
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
   820d2:	6963      	ldr	r3, [r4, #20]
   820d4:	b10b      	cbz	r3, 820da <prvTimerTask+0xb6>
			{
				/* The timer is in a list, remove it. */
				uxListRemove( &( pxTimer->xTimerListItem ) );
   820d6:	1d20      	adds	r0, r4, #4
   820d8:	47c0      	blx	r8
			}
		}

		traceTIMER_COMMAND_RECEIVED( pxTimer, xMessage.xMessageID, xMessage.xMessageValue );

		switch( xMessage.xMessageID )
   820da:	9b03      	ldr	r3, [sp, #12]
   820dc:	2b02      	cmp	r3, #2
   820de:	d023      	beq.n	82128 <prvTimerTask+0x104>
   820e0:	2b03      	cmp	r3, #3
   820e2:	d030      	beq.n	82146 <prvTimerTask+0x122>
   820e4:	2b00      	cmp	r3, #0
   820e6:	d131      	bne.n	8214c <prvTimerTask+0x128>
		{
			case tmrCOMMAND_START :
				/* Start or restart a timer. */
				if( prvInsertTimerInActiveList( pxTimer,  xMessage.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.xMessageValue ) == pdTRUE )
   820e8:	f8bd 3010 	ldrh.w	r3, [sp, #16]
   820ec:	8b21      	ldrh	r1, [r4, #24]
   820ee:	4419      	add	r1, r3
   820f0:	4620      	mov	r0, r4
   820f2:	b289      	uxth	r1, r1
   820f4:	463a      	mov	r2, r7
   820f6:	47c8      	blx	r9
   820f8:	2801      	cmp	r0, #1
   820fa:	d127      	bne.n	8214c <prvTimerTask+0x128>
				{
					/* The timer expired before it was added to the active timer
					list.  Process it now. */
					pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
   820fc:	6a63      	ldr	r3, [r4, #36]	; 0x24
   820fe:	4620      	mov	r0, r4
   82100:	4798      	blx	r3

					if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
   82102:	69e3      	ldr	r3, [r4, #28]
   82104:	2b01      	cmp	r3, #1
   82106:	d121      	bne.n	8214c <prvTimerTask+0x128>
					{
						xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xMessage.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
   82108:	8b22      	ldrh	r2, [r4, #24]
   8210a:	f8bd 3010 	ldrh.w	r3, [sp, #16]
   8210e:	441a      	add	r2, r3
   82110:	2300      	movs	r3, #0
   82112:	9300      	str	r3, [sp, #0]
   82114:	4620      	mov	r0, r4
   82116:	4619      	mov	r1, r3
   82118:	b292      	uxth	r2, r2
   8211a:	4c1b      	ldr	r4, [pc, #108]	; (82188 <prvTimerTask+0x164>)
   8211c:	47a0      	blx	r4
						configASSERT( xResult );
   8211e:	b9a8      	cbnz	r0, 8214c <prvTimerTask+0x128>
   82120:	4b1a      	ldr	r3, [pc, #104]	; (8218c <prvTimerTask+0x168>)
   82122:	4798      	blx	r3
   82124:	bf00      	nop
   82126:	e7fd      	b.n	82124 <prvTimerTask+0x100>
				/* The timer has already been removed from the active list.
				There is nothing to do here. */
				break;

			case tmrCOMMAND_CHANGE_PERIOD :
				pxTimer->xTimerPeriodInTicks = xMessage.xMessageValue;
   82128:	f8bd 3010 	ldrh.w	r3, [sp, #16]
   8212c:	8323      	strh	r3, [r4, #24]
				configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
   8212e:	b91b      	cbnz	r3, 82138 <prvTimerTask+0x114>
   82130:	4b16      	ldr	r3, [pc, #88]	; (8218c <prvTimerTask+0x168>)
   82132:	4798      	blx	r3
   82134:	bf00      	nop
   82136:	e7fd      	b.n	82134 <prvTimerTask+0x110>
				prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
   82138:	18f9      	adds	r1, r7, r3
   8213a:	4620      	mov	r0, r4
   8213c:	b289      	uxth	r1, r1
   8213e:	463a      	mov	r2, r7
   82140:	463b      	mov	r3, r7
   82142:	47c8      	blx	r9
   82144:	e002      	b.n	8214c <prvTimerTask+0x128>
				break;

			case tmrCOMMAND_DELETE :
				/* The timer has already been removed from the active list,
				just free up the memory. */
				vPortFree( pxTimer );
   82146:	4620      	mov	r0, r4
   82148:	4b14      	ldr	r3, [pc, #80]	; (8219c <prvTimerTask+0x178>)
   8214a:	4798      	blx	r3

	/* In this case the xTimerListsWereSwitched parameter is not used, but it
	must be present in the function call. */
	xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
   8214c:	6828      	ldr	r0, [r5, #0]
   8214e:	a903      	add	r1, sp, #12
   82150:	2200      	movs	r2, #0
   82152:	4613      	mov	r3, r2
   82154:	47b0      	blx	r6
   82156:	2800      	cmp	r0, #0
   82158:	d1b9      	bne.n	820ce <prvTimerTask+0xaa>
   8215a:	e769      	b.n	82030 <prvTimerTask+0xc>
static void prvProcessTimerOrBlockTask( portTickType xNextExpireTime, portBASE_TYPE xListWasEmpty )
{
portTickType xTimeNow;
portBASE_TYPE xTimerListsWereSwitched;

	vTaskSuspendAll();
   8215c:	4b06      	ldr	r3, [pc, #24]	; (82178 <prvTimerTask+0x154>)
   8215e:	4798      	blx	r3
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampelTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   82160:	a803      	add	r0, sp, #12
   82162:	4b06      	ldr	r3, [pc, #24]	; (8217c <prvTimerTask+0x158>)
   82164:	4798      	blx	r3
   82166:	4607      	mov	r7, r0
		if( xTimerListsWereSwitched == pdFALSE )
   82168:	9b03      	ldr	r3, [sp, #12]
   8216a:	2b00      	cmp	r3, #0
   8216c:	d099      	beq.n	820a2 <prvTimerTask+0x7e>
   8216e:	e7a4      	b.n	820ba <prvTimerTask+0x96>
   82170:	20078bc0 	.word	0x20078bc0
   82174:	20078b90 	.word	0x20078b90
   82178:	000816c5 	.word	0x000816c5
   8217c:	00081f6d 	.word	0x00081f6d
   82180:	00081821 	.word	0x00081821
   82184:	00081e1d 	.word	0x00081e1d
   82188:	00081f15 	.word	0x00081f15
   8218c:	00080c45 	.word	0x00080c45
   82190:	000813ad 	.word	0x000813ad
   82194:	00080c35 	.word	0x00080c35
   82198:	00081249 	.word	0x00081249
   8219c:	00080e69 	.word	0x00080e69
   821a0:	00080bbd 	.word	0x00080bbd

000821a4 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
   821a4:	3801      	subs	r0, #1
   821a6:	2802      	cmp	r0, #2
   821a8:	d818      	bhi.n	821dc <_write+0x38>
int __attribute__((weak))
_write (int file, const char *ptr, int len);

int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
   821aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   821ae:	460e      	mov	r6, r1
   821b0:	4614      	mov	r4, r2

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
   821b2:	b182      	cbz	r2, 821d6 <_write+0x32>
   821b4:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
   821b6:	f8df 8038 	ldr.w	r8, [pc, #56]	; 821f0 <_write+0x4c>
   821ba:	4f0c      	ldr	r7, [pc, #48]	; (821ec <_write+0x48>)
   821bc:	f8d8 0000 	ldr.w	r0, [r8]
   821c0:	f815 1b01 	ldrb.w	r1, [r5], #1
   821c4:	683b      	ldr	r3, [r7, #0]
   821c6:	4798      	blx	r3
   821c8:	2800      	cmp	r0, #0
   821ca:	db0a      	blt.n	821e2 <_write+0x3e>
   821cc:	1ba8      	subs	r0, r5, r6

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
   821ce:	3c01      	subs	r4, #1
   821d0:	d1f4      	bne.n	821bc <_write+0x18>
   821d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   821d6:	2000      	movs	r0, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
		}
		++nChars;
	}
	return nChars;
   821d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
   821dc:	f04f 30ff 	mov.w	r0, #4294967295
			return -1;
		}
		++nChars;
	}
	return nChars;
}
   821e0:	4770      	bx	lr
		return -1;
	}

	for (; len != 0; --len) {
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
   821e2:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
   821e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   821ea:	bf00      	nop
   821ec:	20078c9c 	.word	0x20078c9c
   821f0:	20078ca0 	.word	0x20078ca0

000821f4 <pwm_clocks_generate>:
 *
 * \retval Return the value to be set in the PWM Clock Register (PWM Mode Register for
 * SAM3N/SAM4N/SAM4C/SAM4CP/SAM4CM) or PWM_INVALID_ARGUMENT if the configuration cannot be met.
 */
static uint32_t pwm_clocks_generate(uint32_t ul_frequency, uint32_t ul_mck)
{
   821f4:	b4f0      	push	{r4, r5, r6, r7}
   821f6:	b08c      	sub	sp, #48	; 0x30
   821f8:	4607      	mov	r7, r0
   821fa:	460e      	mov	r6, r1
	uint32_t ul_divisors[PWM_CLOCK_PRE_MAX] =
   821fc:	ac01      	add	r4, sp, #4
   821fe:	4d11      	ldr	r5, [pc, #68]	; (82244 <pwm_clocks_generate+0x50>)
   82200:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   82202:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   82204:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   82206:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   82208:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   8220c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
   82210:	aa01      	add	r2, sp, #4
			{1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024 };
	uint32_t ul_pre = 0;
   82212:	2000      	movs	r0, #0
	uint32_t ul_div;

	/* Find prescaler and divisor values */
	do {
		ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
   82214:	f852 3b04 	ldr.w	r3, [r2], #4
   82218:	fbb6 f3f3 	udiv	r3, r6, r3
   8221c:	fbb3 f3f7 	udiv	r3, r3, r7
		if (ul_div <= PWM_CLOCK_DIV_MAX) {
   82220:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   82224:	d905      	bls.n	82232 <pwm_clocks_generate+0x3e>
			break;
		}
		ul_pre++;
   82226:	3001      	adds	r0, #1
	} while (ul_pre < PWM_CLOCK_PRE_MAX);
   82228:	280b      	cmp	r0, #11
   8222a:	d1f3      	bne.n	82214 <pwm_clocks_generate+0x20>

	/* Return result */
	if (ul_pre < PWM_CLOCK_PRE_MAX) {
		return ul_div | (ul_pre << 8);
	} else {
		return PWM_INVALID_ARGUMENT;
   8222c:	f64f 70ff 	movw	r0, #65535	; 0xffff
   82230:	e005      	b.n	8223e <pwm_clocks_generate+0x4a>
		}
		ul_pre++;
	} while (ul_pre < PWM_CLOCK_PRE_MAX);

	/* Return result */
	if (ul_pre < PWM_CLOCK_PRE_MAX) {
   82232:	280a      	cmp	r0, #10
		return ul_div | (ul_pre << 8);
   82234:	bf94      	ite	ls
   82236:	ea43 2000 	orrls.w	r0, r3, r0, lsl #8
	} else {
		return PWM_INVALID_ARGUMENT;
   8223a:	f64f 70ff 	movwhi	r0, #65535	; 0xffff
	}
}
   8223e:	b00c      	add	sp, #48	; 0x30
   82240:	bcf0      	pop	{r4, r5, r6, r7}
   82242:	4770      	bx	lr
   82244:	00086934 	.word	0x00086934

00082248 <pwm_init>:
 * \param clock_config PWM clock configuration.
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_init(Pwm *p_pwm, pwm_clock_t *clock_config)
{
   82248:	b570      	push	{r4, r5, r6, lr}
   8224a:	4606      	mov	r6, r0
   8224c:	460c      	mov	r4, r1
	uint32_t clock = 0;
	uint32_t result;

	/* Clock A */
	if (clock_config->ul_clka != 0) {
   8224e:	6808      	ldr	r0, [r1, #0]
   82250:	b140      	cbz	r0, 82264 <pwm_init+0x1c>
		result = pwm_clocks_generate(clock_config->ul_clka, clock_config->ul_mck);
   82252:	6889      	ldr	r1, [r1, #8]
   82254:	4b0e      	ldr	r3, [pc, #56]	; (82290 <pwm_init+0x48>)
   82256:	4798      	blx	r3
   82258:	4605      	mov	r5, r0
		if (result == PWM_INVALID_ARGUMENT) {
   8225a:	f64f 73ff 	movw	r3, #65535	; 0xffff
   8225e:	4298      	cmp	r0, r3
   82260:	d101      	bne.n	82266 <pwm_init+0x1e>
   82262:	e00e      	b.n	82282 <pwm_init+0x3a>
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_init(Pwm *p_pwm, pwm_clock_t *clock_config)
{
	uint32_t clock = 0;
   82264:	2500      	movs	r5, #0

		clock = result;
	}

	/* Clock B */
	if (clock_config->ul_clkb != 0) {
   82266:	6860      	ldr	r0, [r4, #4]
   82268:	b140      	cbz	r0, 8227c <pwm_init+0x34>
		result = pwm_clocks_generate(clock_config->ul_clkb, clock_config->ul_mck);
   8226a:	68a1      	ldr	r1, [r4, #8]
   8226c:	4b08      	ldr	r3, [pc, #32]	; (82290 <pwm_init+0x48>)
   8226e:	4798      	blx	r3

		if (result == PWM_INVALID_ARGUMENT) {
   82270:	f64f 73ff 	movw	r3, #65535	; 0xffff
   82274:	4298      	cmp	r0, r3
   82276:	d007      	beq.n	82288 <pwm_init+0x40>
			return result;
		}

		clock |= (result << 16);
   82278:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
	}
#if (SAM3N || SAM4N || SAM4C || SAM4CP || SAM4CM)
	p_pwm->PWM_MR = clock;
#else
	p_pwm->PWM_CLK = clock;
   8227c:	6035      	str	r5, [r6, #0]
#endif
	return 0;
   8227e:	2000      	movs	r0, #0
   82280:	bd70      	pop	{r4, r5, r6, pc}

	/* Clock A */
	if (clock_config->ul_clka != 0) {
		result = pwm_clocks_generate(clock_config->ul_clka, clock_config->ul_mck);
		if (result == PWM_INVALID_ARGUMENT) {
			return result;
   82282:	f64f 70ff 	movw	r0, #65535	; 0xffff
   82286:	bd70      	pop	{r4, r5, r6, pc}
	/* Clock B */
	if (clock_config->ul_clkb != 0) {
		result = pwm_clocks_generate(clock_config->ul_clkb, clock_config->ul_mck);

		if (result == PWM_INVALID_ARGUMENT) {
			return result;
   82288:	f64f 70ff 	movw	r0, #65535	; 0xffff
	p_pwm->PWM_MR = clock;
#else
	p_pwm->PWM_CLK = clock;
#endif
	return 0;
}
   8228c:	bd70      	pop	{r4, r5, r6, pc}
   8228e:	bf00      	nop
   82290:	000821f5 	.word	0x000821f5

00082294 <pwm_channel_init>:
 * \param p_channel Configurations of the specified PWM channel.
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_channel_init(Pwm *p_pwm, pwm_channel_t *p_channel)
{
   82294:	b470      	push	{r4, r5, r6}
	uint32_t tmp_reg = 0;
	uint32_t ch_num = p_channel->channel;
   82296:	680b      	ldr	r3, [r1, #0]

	/* Channel Mode/Clock Register */
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
			(p_channel->polarity << 9) |
   82298:	8a8a      	ldrh	r2, [r1, #20]
{
	uint32_t tmp_reg = 0;
	uint32_t ch_num = p_channel->channel;

	/* Channel Mode/Clock Register */
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
   8229a:	684c      	ldr	r4, [r1, #4]
   8229c:	f004 040f 	and.w	r4, r4, #15
   822a0:	4322      	orrs	r2, r4
			(p_channel->polarity << 9) |
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E || SAMV70 || SAMV71 || SAME70 || SAMS70)
			(p_channel->counter_event) |
			(p_channel->b_deadtime_generator << 16) |
			(p_channel->b_pwmh_output_inverted << 17) |
			(p_channel->b_pwml_output_inverted << 18) |
   822a2:	890c      	ldrh	r4, [r1, #8]
   822a4:	4322      	orrs	r2, r4
	uint32_t tmp_reg = 0;
	uint32_t ch_num = p_channel->channel;

	/* Channel Mode/Clock Register */
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
			(p_channel->polarity << 9) |
   822a6:	7a8c      	ldrb	r4, [r1, #10]
   822a8:	ea42 2244 	orr.w	r2, r2, r4, lsl #9
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E || SAMV70 || SAMV71 || SAME70 || SAMS70)
			(p_channel->counter_event) |
			(p_channel->b_deadtime_generator << 16) |
   822ac:	7d8c      	ldrb	r4, [r1, #22]
   822ae:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
			(p_channel->b_pwmh_output_inverted << 17) |
   822b2:	7dcc      	ldrb	r4, [r1, #23]
   822b4:	ea42 4244 	orr.w	r2, r2, r4, lsl #17
			(p_channel->b_pwml_output_inverted << 18) |
   822b8:	7e0c      	ldrb	r4, [r1, #24]
{
	uint32_t tmp_reg = 0;
	uint32_t ch_num = p_channel->channel;

	/* Channel Mode/Clock Register */
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
   822ba:	ea42 4284 	orr.w	r2, r2, r4, lsl #18
   822be:	eb00 1443 	add.w	r4, r0, r3, lsl #5
			(p_channel->b_deadtime_generator << 16) |
			(p_channel->b_pwmh_output_inverted << 17) |
			(p_channel->b_pwml_output_inverted << 18) |
#endif
			(p_channel->alignment);
	p_pwm->PWM_CH_NUM[ch_num].PWM_CMR = tmp_reg;
   822c2:	f8c4 2200 	str.w	r2, [r4, #512]	; 0x200

	/* Channel Duty Cycle Register */
	p_pwm->PWM_CH_NUM[ch_num].PWM_CDTY = p_channel->ul_duty;
   822c6:	68ca      	ldr	r2, [r1, #12]
   822c8:	f8c4 2204 	str.w	r2, [r4, #516]	; 0x204

	/* Channel Period Register */
	p_pwm->PWM_CH_NUM[ch_num].PWM_CPRD = p_channel->ul_period;
   822cc:	690a      	ldr	r2, [r1, #16]
   822ce:	f8c4 220c 	str.w	r2, [r4, #524]	; 0x20c
	
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E || SAMV70 || SAMV71 || SAME70 || SAMS70)
	/* Channel Dead Time Register */
	if (p_channel->b_deadtime_generator) {
   822d2:	7d8a      	ldrb	r2, [r1, #22]
   822d4:	b13a      	cbz	r2, 822e6 <pwm_channel_init+0x52>
		p_pwm->PWM_CH_NUM[ch_num].PWM_DT =
				PWM_DT_DTL(p_channel->
   822d6:	8b8c      	ldrh	r4, [r1, #28]
				us_deadtime_pwml) | PWM_DT_DTH(p_channel->
   822d8:	8b4a      	ldrh	r2, [r1, #26]
   822da:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
	p_pwm->PWM_CH_NUM[ch_num].PWM_CPRD = p_channel->ul_period;
	
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E || SAMV70 || SAMV71 || SAME70 || SAMS70)
	/* Channel Dead Time Register */
	if (p_channel->b_deadtime_generator) {
		p_pwm->PWM_CH_NUM[ch_num].PWM_DT =
   822de:	eb00 1443 	add.w	r4, r0, r3, lsl #5
   822e2:	f8c4 2218 	str.w	r2, [r4, #536]	; 0x218
				us_deadtime_pwml) | PWM_DT_DTH(p_channel->
				us_deadtime_pwmh);
	}

	/* Output Selection Register */
	tmp_reg  = p_pwm->PWM_OS & (~((PWM_OS_OSH0 | PWM_OS_OSL0) << ch_num));
   822e6:	6c84      	ldr	r4, [r0, #72]	; 0x48
   822e8:	f04f 1201 	mov.w	r2, #65537	; 0x10001
   822ec:	409a      	lsls	r2, r3
   822ee:	43d2      	mvns	r2, r2
   822f0:	ea02 0504 	and.w	r5, r2, r4
	tmp_reg |= ((p_channel->output_selection.b_override_pwmh) << ch_num) |
			(((p_channel->output_selection.b_override_pwml) << ch_num)
   822f4:	7fcc      	ldrb	r4, [r1, #31]
   822f6:	fa04 f603 	lsl.w	r6, r4, r3
				us_deadtime_pwmh);
	}

	/* Output Selection Register */
	tmp_reg  = p_pwm->PWM_OS & (~((PWM_OS_OSH0 | PWM_OS_OSL0) << ch_num));
	tmp_reg |= ((p_channel->output_selection.b_override_pwmh) << ch_num) |
   822fa:	7f8c      	ldrb	r4, [r1, #30]
   822fc:	409c      	lsls	r4, r3
   822fe:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
   82302:	432c      	orrs	r4, r5
			(((p_channel->output_selection.b_override_pwml) << ch_num)
					<< 16);
	p_pwm->PWM_OS = tmp_reg;
   82304:	6484      	str	r4, [r0, #72]	; 0x48

	/* Output Override Value Register */
	tmp_reg  = p_pwm->PWM_OOV & (~((PWM_OOV_OOVH0 | PWM_OOV_OOVL0) << ch_num));
   82306:	6c44      	ldr	r4, [r0, #68]	; 0x44
   82308:	4014      	ands	r4, r2
	tmp_reg |= ((p_channel->output_selection.override_level_pwmh) << ch_num) |
			(((p_channel->output_selection.override_level_pwml) << ch_num)
   8230a:	f891 2021 	ldrb.w	r2, [r1, #33]	; 0x21
   8230e:	fa02 f503 	lsl.w	r5, r2, r3
					<< 16);
	p_pwm->PWM_OS = tmp_reg;

	/* Output Override Value Register */
	tmp_reg  = p_pwm->PWM_OOV & (~((PWM_OOV_OOVH0 | PWM_OOV_OOVL0) << ch_num));
	tmp_reg |= ((p_channel->output_selection.override_level_pwmh) << ch_num) |
   82312:	f891 2020 	ldrb.w	r2, [r1, #32]
   82316:	409a      	lsls	r2, r3
   82318:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
   8231c:	4322      	orrs	r2, r4
			(((p_channel->output_selection.override_level_pwml) << ch_num)
					<< 16);
	p_pwm->PWM_OOV = tmp_reg;
   8231e:	6442      	str	r2, [r0, #68]	; 0x44

	/* Sync Channels Mode Register */
	uint32_t channel = (1 << ch_num);
   82320:	2201      	movs	r2, #1
   82322:	409a      	lsls	r2, r3
	if (p_channel->b_sync_ch) {
   82324:	f891 4022 	ldrb.w	r4, [r1, #34]	; 0x22
   82328:	b11c      	cbz	r4, 82332 <pwm_channel_init+0x9e>
		p_pwm->PWM_SCM |= channel;
   8232a:	6a04      	ldr	r4, [r0, #32]
   8232c:	4314      	orrs	r4, r2
   8232e:	6204      	str	r4, [r0, #32]
   82330:	e003      	b.n	8233a <pwm_channel_init+0xa6>
	} else {
		p_pwm->PWM_SCM &= ~((uint32_t) channel);
   82332:	6a04      	ldr	r4, [r0, #32]
   82334:	ea24 0402 	bic.w	r4, r4, r2
   82338:	6204      	str	r4, [r0, #32]
		} else {
			p_pwm->PWM_FPV1 &= (~((0x01 << ch_num) << 16));
		}
	}
#else
	if (p_channel->ul_fault_output_pwmh == PWM_HIGH) {
   8233a:	f891 4024 	ldrb.w	r4, [r1, #36]	; 0x24
   8233e:	2c01      	cmp	r4, #1
		p_pwm->PWM_FPV |= (0x01 << ch_num);
   82340:	6e84      	ldr	r4, [r0, #104]	; 0x68
   82342:	bf0c      	ite	eq
   82344:	4314      	orreq	r4, r2
	} else {
		p_pwm->PWM_FPV &= (~(0x01 << ch_num));
   82346:	4394      	bicne	r4, r2
   82348:	6684      	str	r4, [r0, #104]	; 0x68
	}
	if (p_channel->ul_fault_output_pwml == PWM_HIGH) {
   8234a:	f891 4025 	ldrb.w	r4, [r1, #37]	; 0x25
   8234e:	2c01      	cmp	r4, #1
		p_pwm->PWM_FPV |= ((0x01 << ch_num) << 16);
   82350:	6e84      	ldr	r4, [r0, #104]	; 0x68
   82352:	bf0c      	ite	eq
   82354:	ea44 4202 	orreq.w	r2, r4, r2, lsl #16
	} else {
		p_pwm->PWM_FPV &= (~((0x01 << ch_num) << 16));
   82358:	ea24 4202 	bicne.w	r2, r4, r2, lsl #16
   8235c:	6682      	str	r2, [r0, #104]	; 0x68
	}
#endif
	/* Fault Protection Enable Register */
	uint32_t fault_enable_reg = 0;
#if (SAM3XA)
	if (ch_num < 4) {
   8235e:	2b03      	cmp	r3, #3
   82360:	d80b      	bhi.n	8237a <pwm_channel_init+0xe6>
		ch_num *= 8;
		fault_enable_reg = p_pwm->PWM_FPE1;
   82362:	6ec4      	ldr	r4, [r0, #108]	; 0x6c
#endif
	/* Fault Protection Enable Register */
	uint32_t fault_enable_reg = 0;
#if (SAM3XA)
	if (ch_num < 4) {
		ch_num *= 8;
   82364:	00dd      	lsls	r5, r3, #3
		fault_enable_reg = p_pwm->PWM_FPE1;
		fault_enable_reg &= ~(0xFF << ch_num);
   82366:	22ff      	movs	r2, #255	; 0xff
   82368:	40aa      	lsls	r2, r5
   8236a:	ea24 0202 	bic.w	r2, r4, r2
		fault_enable_reg |= ((p_channel->fault_id) << ch_num);
   8236e:	f891 3023 	ldrb.w	r3, [r1, #35]	; 0x23
   82372:	40ab      	lsls	r3, r5
   82374:	4313      	orrs	r3, r2
		p_pwm->PWM_FPE1 = fault_enable_reg;
   82376:	66c3      	str	r3, [r0, #108]	; 0x6c
   82378:	e00c      	b.n	82394 <pwm_channel_init+0x100>
	} else {
		ch_num -= 4;
   8237a:	3b04      	subs	r3, #4
		ch_num *= 8;
		fault_enable_reg = p_pwm->PWM_FPE2;
   8237c:	6f02      	ldr	r2, [r0, #112]	; 0x70
		fault_enable_reg &= ~(0xFF << ch_num);
		fault_enable_reg |= ((p_channel->fault_id) << ch_num);
		p_pwm->PWM_FPE1 = fault_enable_reg;
	} else {
		ch_num -= 4;
		ch_num *= 8;
   8237e:	00db      	lsls	r3, r3, #3
		fault_enable_reg = p_pwm->PWM_FPE2;
		fault_enable_reg &= ~(0xFF << ch_num);
   82380:	24ff      	movs	r4, #255	; 0xff
   82382:	409c      	lsls	r4, r3
   82384:	ea22 0404 	bic.w	r4, r2, r4
		fault_enable_reg |= ((p_channel->fault_id) << ch_num);
   82388:	f891 2023 	ldrb.w	r2, [r1, #35]	; 0x23
   8238c:	fa02 f303 	lsl.w	r3, r2, r3
   82390:	4323      	orrs	r3, r4
		p_pwm->PWM_FPE2 = fault_enable_reg;
   82392:	6703      	str	r3, [r0, #112]	; 0x70
	p_pwm->PWM_CH_NUM[ch_num].PWM_CMR &= (~PWM_CMR_PPM);
	p_pwm->PWM_CH_NUM[ch_num].PWM_CMR |= (p_channel->ul_ppm_mode & PWM_CMR_PPM);
#endif

	return 0;
}
   82394:	2000      	movs	r0, #0
   82396:	bc70      	pop	{r4, r5, r6}
   82398:	4770      	bx	lr
   8239a:	bf00      	nop

0008239c <pwm_channel_update_duty>:
 *
 * \retval 0 if changing succeeds, otherwise fails.
 */
uint32_t pwm_channel_update_duty(Pwm *p_pwm, pwm_channel_t *p_channel,
		uint32_t ul_duty)
{
   8239c:	b410      	push	{r4}
	uint32_t ch_num = p_channel->channel;
   8239e:	680c      	ldr	r4, [r1, #0]

		/** Check parameter */
	if (p_channel->ul_period < ul_duty) {
   823a0:	690b      	ldr	r3, [r1, #16]
   823a2:	4293      	cmp	r3, r2
   823a4:	d306      	bcc.n	823b4 <pwm_channel_update_duty+0x18>
		return PWM_INVALID_ARGUMENT;
	} else {
		/* Save new duty cycle value */
		p_channel->ul_duty = ul_duty;
   823a6:	60ca      	str	r2, [r1, #12]
		mode &= ~PWM_CMR_CPD;
		p_pwm->PWM_CH_NUM[ch_num].PWM_CMR = mode;

		p_pwm->PWM_CH_NUM[ch_num].PWM_CUPD = ul_duty;
#else
		p_pwm->PWM_CH_NUM[ch_num].PWM_CDTYUPD = ul_duty;
   823a8:	eb00 1044 	add.w	r0, r0, r4, lsl #5
   823ac:	f8c0 2208 	str.w	r2, [r0, #520]	; 0x208
#endif
	}

	return 0;
   823b0:	2000      	movs	r0, #0
   823b2:	e001      	b.n	823b8 <pwm_channel_update_duty+0x1c>
{
	uint32_t ch_num = p_channel->channel;

		/** Check parameter */
	if (p_channel->ul_period < ul_duty) {
		return PWM_INVALID_ARGUMENT;
   823b4:	f64f 70ff 	movw	r0, #65535	; 0xffff
		p_pwm->PWM_CH_NUM[ch_num].PWM_CDTYUPD = ul_duty;
#endif
	}

	return 0;
}
   823b8:	f85d 4b04 	ldr.w	r4, [sp], #4
   823bc:	4770      	bx	lr
   823be:	bf00      	nop

000823c0 <pwm_channel_enable>:
 * \param p_pwm Pointer to a PWM instance.
 * \param ul_channel PWM channel number to enable.
 */
void pwm_channel_enable(Pwm *p_pwm, uint32_t ul_channel)
{
	p_pwm->PWM_ENA = (1 << ul_channel);
   823c0:	2301      	movs	r3, #1
   823c2:	408b      	lsls	r3, r1
   823c4:	6043      	str	r3, [r0, #4]
   823c6:	4770      	bx	lr

000823c8 <pwm_channel_disable>:
 * \param p_pwm Pointer to a PWM instance.
 * \param ul_channel PWM channel number to disable.
 */
void pwm_channel_disable(Pwm *p_pwm, uint32_t ul_channel)
{
	p_pwm->PWM_DIS = (1 << ul_channel);
   823c8:	2301      	movs	r3, #1
   823ca:	408b      	lsls	r3, r1
   823cc:	6083      	str	r3, [r0, #8]
   823ce:	4770      	bx	lr

000823d0 <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
   823d0:	b410      	push	{r4}
	uint32_t cd = 0;

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
   823d2:	23ac      	movs	r3, #172	; 0xac
   823d4:	6003      	str	r3, [r0, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
   823d6:	680b      	ldr	r3, [r1, #0]
   823d8:	684a      	ldr	r2, [r1, #4]
   823da:	fbb3 f3f2 	udiv	r3, r3, r2
   823de:	091b      	lsrs	r3, r3, #4
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
   823e0:	1e5c      	subs	r4, r3, #1
   823e2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
   823e6:	4294      	cmp	r4, r2
   823e8:	d80a      	bhi.n	82400 <uart_init+0x30>
		return 1;

	p_uart->UART_BRGR = cd;
   823ea:	6203      	str	r3, [r0, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
   823ec:	688b      	ldr	r3, [r1, #8]
   823ee:	6043      	str	r3, [r0, #4]

#if (!SAMV71 && !SAMV70 && !SAME70 && !SAMS70)
	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
   823f0:	f240 2302 	movw	r3, #514	; 0x202
   823f4:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
#endif

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
   823f8:	2350      	movs	r3, #80	; 0x50
   823fa:	6003      	str	r3, [r0, #0]

	return 0;
   823fc:	2000      	movs	r0, #0
   823fe:	e000      	b.n	82402 <uart_init+0x32>

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
		return 1;
   82400:	2001      	movs	r0, #1

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;

	return 0;
}
   82402:	f85d 4b04 	ldr.w	r4, [sp], #4
   82406:	4770      	bx	lr

00082408 <uart_is_rx_ready>:
 * \retval 1 One data has been received.
 * \retval 0 No data has been received.
 */
uint32_t uart_is_rx_ready(Uart *p_uart)
{
	return (p_uart->UART_SR & UART_SR_RXRDY) > 0;
   82408:	6940      	ldr	r0, [r0, #20]
}
   8240a:	f000 0001 	and.w	r0, r0, #1
   8240e:	4770      	bx	lr

00082410 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
   82410:	6943      	ldr	r3, [r0, #20]
   82412:	f013 0f02 	tst.w	r3, #2
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
   82416:	bf1a      	itte	ne
   82418:	61c1      	strne	r1, [r0, #28]
	return 0;
   8241a:	2000      	movne	r0, #0
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
		return 1;
   8241c:	2001      	moveq	r0, #1

	/* Send character */
	p_uart->UART_THR = uc_data;
	return 0;
}
   8241e:	4770      	bx	lr

00082420 <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
   82420:	6943      	ldr	r3, [r0, #20]
   82422:	f013 0f01 	tst.w	r3, #1
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
   82426:	bf1d      	ittte	ne
   82428:	6983      	ldrne	r3, [r0, #24]
   8242a:	700b      	strbne	r3, [r1, #0]
	return 0;
   8242c:	2000      	movne	r0, #0
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
		return 1;
   8242e:	2001      	moveq	r0, #1

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
	return 0;
}
   82430:	4770      	bx	lr
   82432:	bf00      	nop

00082434 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
   82434:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
   82436:	480e      	ldr	r0, [pc, #56]	; (82470 <sysclk_init+0x3c>)
   82438:	4b0e      	ldr	r3, [pc, #56]	; (82474 <sysclk_init+0x40>)
   8243a:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
   8243c:	2000      	movs	r0, #0
   8243e:	213e      	movs	r1, #62	; 0x3e
   82440:	4b0d      	ldr	r3, [pc, #52]	; (82478 <sysclk_init+0x44>)
   82442:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
   82444:	4c0d      	ldr	r4, [pc, #52]	; (8247c <sysclk_init+0x48>)
   82446:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
   82448:	2800      	cmp	r0, #0
   8244a:	d0fc      	beq.n	82446 <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
   8244c:	4b0c      	ldr	r3, [pc, #48]	; (82480 <sysclk_init+0x4c>)
   8244e:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   82450:	4a0c      	ldr	r2, [pc, #48]	; (82484 <sysclk_init+0x50>)
   82452:	4b0d      	ldr	r3, [pc, #52]	; (82488 <sysclk_init+0x54>)
   82454:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
   82456:	4c0d      	ldr	r4, [pc, #52]	; (8248c <sysclk_init+0x58>)
   82458:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   8245a:	2800      	cmp	r0, #0
   8245c:	d0fc      	beq.n	82458 <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   8245e:	2010      	movs	r0, #16
   82460:	4b0b      	ldr	r3, [pc, #44]	; (82490 <sysclk_init+0x5c>)
   82462:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   82464:	4b0b      	ldr	r3, [pc, #44]	; (82494 <sysclk_init+0x60>)
   82466:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   82468:	4801      	ldr	r0, [pc, #4]	; (82470 <sysclk_init+0x3c>)
   8246a:	4b02      	ldr	r3, [pc, #8]	; (82474 <sysclk_init+0x40>)
   8246c:	4798      	blx	r3
   8246e:	bd10      	pop	{r4, pc}
   82470:	0501bd00 	.word	0x0501bd00
   82474:	200700a5 	.word	0x200700a5
   82478:	00082859 	.word	0x00082859
   8247c:	000828ad 	.word	0x000828ad
   82480:	000828bd 	.word	0x000828bd
   82484:	200d3f01 	.word	0x200d3f01
   82488:	400e0600 	.word	0x400e0600
   8248c:	000828cd 	.word	0x000828cd
   82490:	000827f1 	.word	0x000827f1
   82494:	000829e5 	.word	0x000829e5

00082498 <board_init>:
#include "conf_board.h"
#include "gpio.h"
#include "ioport.h"

void board_init(void)
{
   82498:	b510      	push	{r4, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   8249a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   8249e:	4b1e      	ldr	r3, [pc, #120]	; (82518 <board_init+0x80>)
   824a0:	605a      	str	r2, [r3, #4]
   824a2:	200b      	movs	r0, #11
   824a4:	4c1d      	ldr	r4, [pc, #116]	; (8251c <board_init+0x84>)
   824a6:	47a0      	blx	r4
   824a8:	200c      	movs	r0, #12
   824aa:	47a0      	blx	r4
   824ac:	200d      	movs	r0, #13
   824ae:	47a0      	blx	r4
   824b0:	200e      	movs	r0, #14
   824b2:	47a0      	blx	r4
	 * In new designs IOPORT is used instead.
	 * Here IOPORT must be initialized for others to use before setting up IO.
	 */
	ioport_init();
	/* Configure LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
   824b4:	203b      	movs	r0, #59	; 0x3b
   824b6:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   824ba:	4c19      	ldr	r4, [pc, #100]	; (82520 <board_init+0x88>)
   824bc:	47a0      	blx	r4
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
   824be:	2055      	movs	r0, #85	; 0x55
   824c0:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   824c4:	47a0      	blx	r4
	gpio_configure_pin(LED2_GPIO, LED2_FLAGS);
   824c6:	2056      	movs	r0, #86	; 0x56
   824c8:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   824cc:	47a0      	blx	r4

	/* Configure Push Button pins */
	gpio_configure_pin(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS);
   824ce:	2068      	movs	r0, #104	; 0x68
   824d0:	4914      	ldr	r1, [pc, #80]	; (82524 <board_init+0x8c>)
   824d2:	47a0      	blx	r4
	gpio_configure_pin(GPIO_PUSH_BUTTON_2, GPIO_PUSH_BUTTON_2_FLAGS);
   824d4:	205c      	movs	r0, #92	; 0x5c
   824d6:	4914      	ldr	r1, [pc, #80]	; (82528 <board_init+0x90>)
   824d8:	47a0      	blx	r4

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART_PIO, PINS_UART, PINS_UART_FLAGS);
   824da:	4814      	ldr	r0, [pc, #80]	; (8252c <board_init+0x94>)
   824dc:	f44f 7140 	mov.w	r1, #768	; 0x300
   824e0:	4a13      	ldr	r2, [pc, #76]	; (82530 <board_init+0x98>)
   824e2:	4b14      	ldr	r3, [pc, #80]	; (82534 <board_init+0x9c>)
   824e4:	4798      	blx	r3
#endif

	/* Configure ADC example pins */
#ifdef CONF_BOARD_ADC
	/* TC TIOA configuration */
	gpio_configure_pin(PIN_TC0_TIOA0,PIN_TC0_TIOA0_FLAGS);
   824e6:	2039      	movs	r0, #57	; 0x39
   824e8:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   824ec:	47a0      	blx	r4

	/* ADC Trigger configuration */
	gpio_configure_pin(PINS_ADC_TRIG, PINS_ADC_TRIG_FLAG);
   824ee:	200b      	movs	r0, #11
   824f0:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   824f4:	47a0      	blx	r4

	/* PWMH0 configuration */
	gpio_configure_pin(PIN_PWMC_PWMH0_TRIG, PIN_PWMC_PWMH0_TRIG_FLAG);
   824f6:	202c      	movs	r0, #44	; 0x2c
   824f8:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   824fc:	47a0      	blx	r4
	gpio_configure_pin(PIN_PWM_LED1_GPIO, PIN_PWM_LED1_FLAGS);
#endif

#ifdef CONF_BOARD_PWM_LED2
	/* Configure PWM LED2 pin */
	gpio_configure_pin(PIN_PWM_LED2_GPIO, PIN_PWM_LED2_FLAGS);
   824fe:	2057      	movs	r0, #87	; 0x57
   82500:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   82504:	47a0      	blx	r4
	gpio_configure_pin(PIN_USART0_TXD_IDX, PIN_USART0_TXD_FLAGS);
#endif

#ifdef CONF_BOARD_USB_PORT
	/* Configure USB_ID (UOTGID) pin */
	gpio_configure_pin(USB_ID_GPIO, USB_ID_FLAGS);
   82506:	202b      	movs	r0, #43	; 0x2b
   82508:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   8250c:	47a0      	blx	r4
	/* Configure USB_VBOF (UOTGVBOF) pin */
	gpio_configure_pin(USB_VBOF_GPIO, USB_VBOF_FLAGS);
   8250e:	202a      	movs	r0, #42	; 0x2a
   82510:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   82514:	47a0      	blx	r4
   82516:	bd10      	pop	{r4, pc}
   82518:	400e1a50 	.word	0x400e1a50
   8251c:	000828dd 	.word	0x000828dd
   82520:	000825dd 	.word	0x000825dd
   82524:	28000079 	.word	0x28000079
   82528:	28000001 	.word	0x28000001
   8252c:	400e0e00 	.word	0x400e0e00
   82530:	08000001 	.word	0x08000001
   82534:	000826b1 	.word	0x000826b1

00082538 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
   82538:	6442      	str	r2, [r0, #68]	; 0x44
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
	}
#elif (SAM3XA|| SAM3U)
	switch (ul_type) {
   8253a:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
   8253e:	d016      	beq.n	8256e <pio_set_peripheral+0x36>
   82540:	d804      	bhi.n	8254c <pio_set_peripheral+0x14>
   82542:	b1c1      	cbz	r1, 82576 <pio_set_peripheral+0x3e>
   82544:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
   82548:	d00a      	beq.n	82560 <pio_set_peripheral+0x28>
   8254a:	e013      	b.n	82574 <pio_set_peripheral+0x3c>
   8254c:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
   82550:	d011      	beq.n	82576 <pio_set_peripheral+0x3e>
   82552:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
   82556:	d00e      	beq.n	82576 <pio_set_peripheral+0x3e>
   82558:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
   8255c:	d10a      	bne.n	82574 <pio_set_peripheral+0x3c>
   8255e:	4770      	bx	lr
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABSR;
   82560:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   82562:	6f01      	ldr	r1, [r0, #112]	; 0x70
   82564:	400b      	ands	r3, r1
   82566:	ea23 0302 	bic.w	r3, r3, r2
   8256a:	6703      	str	r3, [r0, #112]	; 0x70
		break;
   8256c:	e002      	b.n	82574 <pio_set_peripheral+0x3c>

	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABSR;
   8256e:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   82570:	4313      	orrs	r3, r2
   82572:	6703      	str	r3, [r0, #112]	; 0x70
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
   82574:	6042      	str	r2, [r0, #4]
   82576:	4770      	bx	lr

00082578 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   82578:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   8257a:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
   8257e:	bf14      	ite	ne
   82580:	6641      	strne	r1, [r0, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   82582:	6601      	streq	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   82584:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
   82588:	bf14      	ite	ne
   8258a:	6201      	strne	r1, [r0, #32]
	} else {
		p_pio->PIO_IFDR = ul_mask;
   8258c:	6241      	streq	r1, [r0, #36]	; 0x24
			p_pio->PIO_IFSCER = ul_mask;
		}
	}
#elif (SAM3XA|| SAM3U)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
   8258e:	f012 0f02 	tst.w	r2, #2
   82592:	d002      	beq.n	8259a <pio_set_input+0x22>
		p_pio->PIO_SCIFSR = ul_mask;
   82594:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
   82598:	e004      	b.n	825a4 <pio_set_input+0x2c>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
   8259a:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_DIFSR = ul_mask;
   8259e:	bf18      	it	ne
   825a0:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
   825a4:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
   825a6:	6001      	str	r1, [r0, #0]
   825a8:	4770      	bx	lr
   825aa:	bf00      	nop

000825ac <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
   825ac:	b410      	push	{r4}
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   825ae:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   825b0:	9c01      	ldr	r4, [sp, #4]
   825b2:	b10c      	cbz	r4, 825b8 <pio_set_output+0xc>
		p_pio->PIO_PUER = ul_mask;
   825b4:	6641      	str	r1, [r0, #100]	; 0x64
   825b6:	e000      	b.n	825ba <pio_set_output+0xe>
	} else {
		p_pio->PIO_PUDR = ul_mask;
   825b8:	6601      	str	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
   825ba:	b10b      	cbz	r3, 825c0 <pio_set_output+0x14>
		p_pio->PIO_MDER = ul_mask;
   825bc:	6501      	str	r1, [r0, #80]	; 0x50
   825be:	e000      	b.n	825c2 <pio_set_output+0x16>
	} else {
		p_pio->PIO_MDDR = ul_mask;
   825c0:	6541      	str	r1, [r0, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
   825c2:	b10a      	cbz	r2, 825c8 <pio_set_output+0x1c>
		p_pio->PIO_SODR = ul_mask;
   825c4:	6301      	str	r1, [r0, #48]	; 0x30
   825c6:	e000      	b.n	825ca <pio_set_output+0x1e>
	} else {
		p_pio->PIO_CODR = ul_mask;
   825c8:	6341      	str	r1, [r0, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
   825ca:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
   825cc:	6001      	str	r1, [r0, #0]
}
   825ce:	f85d 4b04 	ldr.w	r4, [sp], #4
   825d2:	4770      	bx	lr

000825d4 <pio_get_interrupt_status>:
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
   825d4:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
   825d6:	4770      	bx	lr

000825d8 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
   825d8:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
   825da:	4770      	bx	lr

000825dc <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
   825dc:	b570      	push	{r4, r5, r6, lr}
   825de:	b082      	sub	sp, #8
   825e0:	460d      	mov	r5, r1
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   825e2:	0943      	lsrs	r3, r0, #5
   825e4:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   825e8:	f203 7307 	addw	r3, r3, #1799	; 0x707
   825ec:	025c      	lsls	r4, r3, #9
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
	Pio *p_pio = pio_get_pin_group(ul_pin);

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   825ee:	f001 43f0 	and.w	r3, r1, #2013265920	; 0x78000000
   825f2:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   825f6:	d030      	beq.n	8265a <pio_configure_pin+0x7e>
   825f8:	d806      	bhi.n	82608 <pio_configure_pin+0x2c>
   825fa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   825fe:	d00a      	beq.n	82616 <pio_configure_pin+0x3a>
   82600:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   82604:	d018      	beq.n	82638 <pio_configure_pin+0x5c>
   82606:	e049      	b.n	8269c <pio_configure_pin+0xc0>
   82608:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   8260c:	d030      	beq.n	82670 <pio_configure_pin+0x94>
   8260e:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   82612:	d02d      	beq.n	82670 <pio_configure_pin+0x94>
   82614:	e042      	b.n	8269c <pio_configure_pin+0xc0>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
   82616:	f000 001f 	and.w	r0, r0, #31
   8261a:	2601      	movs	r6, #1
   8261c:	4086      	lsls	r6, r0
   8261e:	4620      	mov	r0, r4
   82620:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   82624:	4632      	mov	r2, r6
   82626:	4b1f      	ldr	r3, [pc, #124]	; (826a4 <pio_configure_pin+0xc8>)
   82628:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   8262a:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   8262e:	bf14      	ite	ne
   82630:	6666      	strne	r6, [r4, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   82632:	6626      	streq	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   82634:	2001      	movs	r0, #1
   82636:	e032      	b.n	8269e <pio_configure_pin+0xc2>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
   82638:	f000 001f 	and.w	r0, r0, #31
   8263c:	2601      	movs	r6, #1
   8263e:	4086      	lsls	r6, r0
   82640:	4620      	mov	r0, r4
   82642:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   82646:	4632      	mov	r2, r6
   82648:	4b16      	ldr	r3, [pc, #88]	; (826a4 <pio_configure_pin+0xc8>)
   8264a:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   8264c:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   82650:	bf14      	ite	ne
   82652:	6666      	strne	r6, [r4, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   82654:	6626      	streq	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   82656:	2001      	movs	r0, #1
   82658:	e021      	b.n	8269e <pio_configure_pin+0xc2>
				(ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
   8265a:	f000 031f 	and.w	r3, r0, #31
   8265e:	2601      	movs	r6, #1
   82660:	4620      	mov	r0, r4
   82662:	fa06 f103 	lsl.w	r1, r6, r3
   82666:	462a      	mov	r2, r5
   82668:	4b0f      	ldr	r3, [pc, #60]	; (826a8 <pio_configure_pin+0xcc>)
   8266a:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   8266c:	4630      	mov	r0, r6
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;
   8266e:	e016      	b.n	8269e <pio_configure_pin+0xc2>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   82670:	f000 031f 	and.w	r3, r0, #31
   82674:	2601      	movs	r6, #1
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   82676:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   8267a:	ea05 0106 	and.w	r1, r5, r6
   8267e:	9100      	str	r1, [sp, #0]
   82680:	4620      	mov	r0, r4
   82682:	fa06 f103 	lsl.w	r1, r6, r3
   82686:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   8268a:	bf14      	ite	ne
   8268c:	2200      	movne	r2, #0
   8268e:	2201      	moveq	r2, #1
   82690:	f3c5 0380 	ubfx	r3, r5, #2, #1
   82694:	4c05      	ldr	r4, [pc, #20]	; (826ac <pio_configure_pin+0xd0>)
   82696:	47a0      	blx	r4

	default:
		return 0;
	}

	return 1;
   82698:	4630      	mov	r0, r6
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   8269a:	e000      	b.n	8269e <pio_configure_pin+0xc2>

	default:
		return 0;
   8269c:	2000      	movs	r0, #0
	}

	return 1;
}
   8269e:	b002      	add	sp, #8
   826a0:	bd70      	pop	{r4, r5, r6, pc}
   826a2:	bf00      	nop
   826a4:	00082539 	.word	0x00082539
   826a8:	00082579 	.word	0x00082579
   826ac:	000825ad 	.word	0x000825ad

000826b0 <pio_configure_pin_group>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin_group(Pio *p_pio,
		uint32_t ul_mask, const uint32_t ul_flags)
{
   826b0:	b570      	push	{r4, r5, r6, lr}
   826b2:	b082      	sub	sp, #8
   826b4:	4606      	mov	r6, r0
   826b6:	460d      	mov	r5, r1
   826b8:	4614      	mov	r4, r2
	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   826ba:	f002 43f0 	and.w	r3, r2, #2013265920	; 0x78000000
   826be:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   826c2:	d026      	beq.n	82712 <pio_configure_pin_group+0x62>
   826c4:	d806      	bhi.n	826d4 <pio_configure_pin_group+0x24>
   826c6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   826ca:	d00a      	beq.n	826e2 <pio_configure_pin_group+0x32>
   826cc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   826d0:	d013      	beq.n	826fa <pio_configure_pin_group+0x4a>
   826d2:	e034      	b.n	8273e <pio_configure_pin_group+0x8e>
   826d4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   826d8:	d01f      	beq.n	8271a <pio_configure_pin_group+0x6a>
   826da:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   826de:	d01c      	beq.n	8271a <pio_configure_pin_group+0x6a>
   826e0:	e02d      	b.n	8273e <pio_configure_pin_group+0x8e>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
   826e2:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   826e6:	462a      	mov	r2, r5
   826e8:	4b16      	ldr	r3, [pc, #88]	; (82744 <pio_configure_pin_group+0x94>)
   826ea:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   826ec:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
   826f0:	bf14      	ite	ne
   826f2:	6675      	strne	r5, [r6, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   826f4:	6635      	streq	r5, [r6, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   826f6:	2001      	movs	r0, #1
   826f8:	e022      	b.n	82740 <pio_configure_pin_group+0x90>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
   826fa:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   826fe:	462a      	mov	r2, r5
   82700:	4b10      	ldr	r3, [pc, #64]	; (82744 <pio_configure_pin_group+0x94>)
   82702:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   82704:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
   82708:	bf14      	ite	ne
   8270a:	6675      	strne	r5, [r6, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   8270c:	6635      	streq	r5, [r6, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   8270e:	2001      	movs	r0, #1
   82710:	e016      	b.n	82740 <pio_configure_pin_group+0x90>
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
   82712:	4b0d      	ldr	r3, [pc, #52]	; (82748 <pio_configure_pin_group+0x98>)
   82714:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   82716:	2001      	movs	r0, #1
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;
   82718:	e012      	b.n	82740 <pio_configure_pin_group+0x90>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   8271a:	f004 5260 	and.w	r2, r4, #939524096	; 0x38000000
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
   8271e:	f004 0301 	and.w	r3, r4, #1
   82722:	9300      	str	r3, [sp, #0]
   82724:	4630      	mov	r0, r6
   82726:	4629      	mov	r1, r5
   82728:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   8272c:	bf14      	ite	ne
   8272e:	2200      	movne	r2, #0
   82730:	2201      	moveq	r2, #1
   82732:	f3c4 0380 	ubfx	r3, r4, #2, #1
   82736:	4c05      	ldr	r4, [pc, #20]	; (8274c <pio_configure_pin_group+0x9c>)
   82738:	47a0      	blx	r4

	default:
		return 0;
	}

	return 1;
   8273a:	2001      	movs	r0, #1
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   8273c:	e000      	b.n	82740 <pio_configure_pin_group+0x90>

	default:
		return 0;
   8273e:	2000      	movs	r0, #0
	}

	return 1;
}
   82740:	b002      	add	sp, #8
   82742:	bd70      	pop	{r4, r5, r6, pc}
   82744:	00082539 	.word	0x00082539
   82748:	00082579 	.word	0x00082579
   8274c:	000825ad 	.word	0x000825ad

00082750 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   82750:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   82754:	4604      	mov	r4, r0
   82756:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   82758:	4b0e      	ldr	r3, [pc, #56]	; (82794 <pio_handler_process+0x44>)
   8275a:	4798      	blx	r3
   8275c:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
   8275e:	4620      	mov	r0, r4
   82760:	4b0d      	ldr	r3, [pc, #52]	; (82798 <pio_handler_process+0x48>)
   82762:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
   82764:	4005      	ands	r5, r0
   82766:	d013      	beq.n	82790 <pio_handler_process+0x40>
   82768:	4c0c      	ldr	r4, [pc, #48]	; (8279c <pio_handler_process+0x4c>)
   8276a:	f104 0660 	add.w	r6, r4, #96	; 0x60
		/* Find triggering source */
		i = 0;
		while (status != 0) {
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
   8276e:	6823      	ldr	r3, [r4, #0]
   82770:	4543      	cmp	r3, r8
   82772:	d108      	bne.n	82786 <pio_handler_process+0x36>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   82774:	6861      	ldr	r1, [r4, #4]
   82776:	4229      	tst	r1, r5
   82778:	d005      	beq.n	82786 <pio_handler_process+0x36>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   8277a:	68e3      	ldr	r3, [r4, #12]
   8277c:	4640      	mov	r0, r8
   8277e:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
   82780:	6863      	ldr	r3, [r4, #4]
   82782:	ea25 0503 	bic.w	r5, r5, r3
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
   82786:	42b4      	cmp	r4, r6
   82788:	d002      	beq.n	82790 <pio_handler_process+0x40>
   8278a:	3410      	adds	r4, #16

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
   8278c:	2d00      	cmp	r5, #0
   8278e:	d1ee      	bne.n	8276e <pio_handler_process+0x1e>
   82790:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82794:	000825d5 	.word	0x000825d5
   82798:	000825d9 	.word	0x000825d9
   8279c:	20078bc8 	.word	0x20078bc8

000827a0 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   827a0:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
   827a2:	4802      	ldr	r0, [pc, #8]	; (827ac <PIOA_Handler+0xc>)
   827a4:	210b      	movs	r1, #11
   827a6:	4b02      	ldr	r3, [pc, #8]	; (827b0 <PIOA_Handler+0x10>)
   827a8:	4798      	blx	r3
   827aa:	bd08      	pop	{r3, pc}
   827ac:	400e0e00 	.word	0x400e0e00
   827b0:	00082751 	.word	0x00082751

000827b4 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   827b4:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
   827b6:	4802      	ldr	r0, [pc, #8]	; (827c0 <PIOB_Handler+0xc>)
   827b8:	210c      	movs	r1, #12
   827ba:	4b02      	ldr	r3, [pc, #8]	; (827c4 <PIOB_Handler+0x10>)
   827bc:	4798      	blx	r3
   827be:	bd08      	pop	{r3, pc}
   827c0:	400e1000 	.word	0x400e1000
   827c4:	00082751 	.word	0x00082751

000827c8 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
   827c8:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
   827ca:	4802      	ldr	r0, [pc, #8]	; (827d4 <PIOC_Handler+0xc>)
   827cc:	210d      	movs	r1, #13
   827ce:	4b02      	ldr	r3, [pc, #8]	; (827d8 <PIOC_Handler+0x10>)
   827d0:	4798      	blx	r3
   827d2:	bd08      	pop	{r3, pc}
   827d4:	400e1200 	.word	0x400e1200
   827d8:	00082751 	.word	0x00082751

000827dc <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
   827dc:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
   827de:	4802      	ldr	r0, [pc, #8]	; (827e8 <PIOD_Handler+0xc>)
   827e0:	210e      	movs	r1, #14
   827e2:	4b02      	ldr	r3, [pc, #8]	; (827ec <PIOD_Handler+0x10>)
   827e4:	4798      	blx	r3
   827e6:	bd08      	pop	{r3, pc}
   827e8:	400e1400 	.word	0x400e1400
   827ec:	00082751 	.word	0x00082751

000827f0 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   827f0:	4a18      	ldr	r2, [pc, #96]	; (82854 <pmc_switch_mck_to_pllack+0x64>)
   827f2:	6b13      	ldr	r3, [r2, #48]	; 0x30
   827f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   827f8:	4318      	orrs	r0, r3
   827fa:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   827fc:	6e93      	ldr	r3, [r2, #104]	; 0x68
   827fe:	f013 0f08 	tst.w	r3, #8
   82802:	d003      	beq.n	8280c <pmc_switch_mck_to_pllack+0x1c>
   82804:	e009      	b.n	8281a <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
   82806:	3b01      	subs	r3, #1
   82808:	d103      	bne.n	82812 <pmc_switch_mck_to_pllack+0x22>
   8280a:	e01e      	b.n	8284a <pmc_switch_mck_to_pllack+0x5a>
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   8280c:	f44f 6300 	mov.w	r3, #2048	; 0x800
   82810:	4910      	ldr	r1, [pc, #64]	; (82854 <pmc_switch_mck_to_pllack+0x64>)
   82812:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   82814:	f012 0f08 	tst.w	r2, #8
   82818:	d0f5      	beq.n	82806 <pmc_switch_mck_to_pllack+0x16>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   8281a:	4a0e      	ldr	r2, [pc, #56]	; (82854 <pmc_switch_mck_to_pllack+0x64>)
   8281c:	6b13      	ldr	r3, [r2, #48]	; 0x30
   8281e:	f023 0303 	bic.w	r3, r3, #3
   82822:	f043 0302 	orr.w	r3, r3, #2
   82826:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   82828:	6e90      	ldr	r0, [r2, #104]	; 0x68
   8282a:	f010 0008 	ands.w	r0, r0, #8
   8282e:	d004      	beq.n	8283a <pmc_switch_mck_to_pllack+0x4a>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
   82830:	2000      	movs	r0, #0
   82832:	4770      	bx	lr
	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
   82834:	3b01      	subs	r3, #1
   82836:	d103      	bne.n	82840 <pmc_switch_mck_to_pllack+0x50>
   82838:	e009      	b.n	8284e <pmc_switch_mck_to_pllack+0x5e>
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   8283a:	f44f 6300 	mov.w	r3, #2048	; 0x800
   8283e:	4905      	ldr	r1, [pc, #20]	; (82854 <pmc_switch_mck_to_pllack+0x64>)
   82840:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   82842:	f012 0f08 	tst.w	r2, #8
   82846:	d0f5      	beq.n	82834 <pmc_switch_mck_to_pllack+0x44>
   82848:	4770      	bx	lr

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
   8284a:	2001      	movs	r0, #1
   8284c:	4770      	bx	lr
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
   8284e:	2001      	movs	r0, #1
		}
	}

	return 0;
}
   82850:	4770      	bx	lr
   82852:	bf00      	nop
   82854:	400e0600 	.word	0x400e0600

00082858 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
   82858:	b138      	cbz	r0, 8286a <pmc_switch_mainck_to_xtal+0x12>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   8285a:	4911      	ldr	r1, [pc, #68]	; (828a0 <pmc_switch_mainck_to_xtal+0x48>)
   8285c:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
   8285e:	4a11      	ldr	r2, [pc, #68]	; (828a4 <pmc_switch_mainck_to_xtal+0x4c>)
   82860:	401a      	ands	r2, r3
   82862:	4b11      	ldr	r3, [pc, #68]	; (828a8 <pmc_switch_mainck_to_xtal+0x50>)
   82864:	4313      	orrs	r3, r2
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   82866:	620b      	str	r3, [r1, #32]
   82868:	4770      	bx	lr
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   8286a:	4a0d      	ldr	r2, [pc, #52]	; (828a0 <pmc_switch_mainck_to_xtal+0x48>)
   8286c:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   8286e:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   82872:	f023 0303 	bic.w	r3, r3, #3
   82876:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   8287a:	f043 0301 	orr.w	r3, r3, #1
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
   8287e:	0209      	lsls	r1, r1, #8
   82880:	b289      	uxth	r1, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   82882:	430b      	orrs	r3, r1
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   82884:	6213      	str	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   82886:	6e93      	ldr	r3, [r2, #104]	; 0x68
   82888:	f013 0f01 	tst.w	r3, #1
   8288c:	d0fb      	beq.n	82886 <pmc_switch_mainck_to_xtal+0x2e>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
   8288e:	4a04      	ldr	r2, [pc, #16]	; (828a0 <pmc_switch_mainck_to_xtal+0x48>)
   82890:	6a13      	ldr	r3, [r2, #32]
   82892:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
   82896:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   8289a:	6213      	str	r3, [r2, #32]
   8289c:	4770      	bx	lr
   8289e:	bf00      	nop
   828a0:	400e0600 	.word	0x400e0600
   828a4:	fec8fffc 	.word	0xfec8fffc
   828a8:	01370002 	.word	0x01370002

000828ac <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   828ac:	4b02      	ldr	r3, [pc, #8]	; (828b8 <pmc_osc_is_ready_mainck+0xc>)
   828ae:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   828b0:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
   828b4:	4770      	bx	lr
   828b6:	bf00      	nop
   828b8:	400e0600 	.word	0x400e0600

000828bc <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   828bc:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   828c0:	4b01      	ldr	r3, [pc, #4]	; (828c8 <pmc_disable_pllack+0xc>)
   828c2:	629a      	str	r2, [r3, #40]	; 0x28
   828c4:	4770      	bx	lr
   828c6:	bf00      	nop
   828c8:	400e0600 	.word	0x400e0600

000828cc <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   828cc:	4b02      	ldr	r3, [pc, #8]	; (828d8 <pmc_is_locked_pllack+0xc>)
   828ce:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   828d0:	f000 0002 	and.w	r0, r0, #2
   828d4:	4770      	bx	lr
   828d6:	bf00      	nop
   828d8:	400e0600 	.word	0x400e0600

000828dc <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
   828dc:	282c      	cmp	r0, #44	; 0x2c
   828de:	d81e      	bhi.n	8291e <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
   828e0:	281f      	cmp	r0, #31
   828e2:	d80c      	bhi.n	828fe <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   828e4:	4b11      	ldr	r3, [pc, #68]	; (8292c <pmc_enable_periph_clk+0x50>)
   828e6:	699a      	ldr	r2, [r3, #24]
   828e8:	2301      	movs	r3, #1
   828ea:	4083      	lsls	r3, r0
   828ec:	401a      	ands	r2, r3
   828ee:	4293      	cmp	r3, r2
   828f0:	d017      	beq.n	82922 <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
   828f2:	2301      	movs	r3, #1
   828f4:	4083      	lsls	r3, r0
   828f6:	4a0d      	ldr	r2, [pc, #52]	; (8292c <pmc_enable_periph_clk+0x50>)
   828f8:	6113      	str	r3, [r2, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   828fa:	2000      	movs	r0, #0
   828fc:	4770      	bx	lr
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   828fe:	4b0b      	ldr	r3, [pc, #44]	; (8292c <pmc_enable_periph_clk+0x50>)
   82900:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
   82904:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   82906:	2301      	movs	r3, #1
   82908:	4083      	lsls	r3, r0
   8290a:	401a      	ands	r2, r3
   8290c:	4293      	cmp	r3, r2
   8290e:	d00a      	beq.n	82926 <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
   82910:	2301      	movs	r3, #1
   82912:	4083      	lsls	r3, r0
   82914:	4a05      	ldr	r2, [pc, #20]	; (8292c <pmc_enable_periph_clk+0x50>)
   82916:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
		}
#endif
	}

	return 0;
   8291a:	2000      	movs	r0, #0
   8291c:	4770      	bx	lr
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
		return 1;
   8291e:	2001      	movs	r0, #1
   82920:	4770      	bx	lr
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   82922:	2000      	movs	r0, #0
   82924:	4770      	bx	lr
   82926:	2000      	movs	r0, #0
}
   82928:	4770      	bx	lr
   8292a:	bf00      	nop
   8292c:	400e0600 	.word	0x400e0600

00082930 <Dummy_Handler>:
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
	while (1) {
	}
   82930:	e7fe      	b.n	82930 <Dummy_Handler>
   82932:	bf00      	nop

00082934 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   82934:	b508      	push	{r3, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
   82936:	4b1f      	ldr	r3, [pc, #124]	; (829b4 <Reset_Handler+0x80>)
   82938:	4a1f      	ldr	r2, [pc, #124]	; (829b8 <Reset_Handler+0x84>)
   8293a:	429a      	cmp	r2, r3
   8293c:	d003      	beq.n	82946 <Reset_Handler+0x12>
		for (; pDest < &_erelocate;) {
   8293e:	4b1f      	ldr	r3, [pc, #124]	; (829bc <Reset_Handler+0x88>)
   82940:	4a1c      	ldr	r2, [pc, #112]	; (829b4 <Reset_Handler+0x80>)
   82942:	429a      	cmp	r2, r3
   82944:	d304      	bcc.n	82950 <Reset_Handler+0x1c>
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   82946:	4b1e      	ldr	r3, [pc, #120]	; (829c0 <Reset_Handler+0x8c>)
   82948:	4a1e      	ldr	r2, [pc, #120]	; (829c4 <Reset_Handler+0x90>)
   8294a:	429a      	cmp	r2, r3
   8294c:	d310      	bcc.n	82970 <Reset_Handler+0x3c>
   8294e:	e01b      	b.n	82988 <Reset_Handler+0x54>
   82950:	4918      	ldr	r1, [pc, #96]	; (829b4 <Reset_Handler+0x80>)
   82952:	1d0a      	adds	r2, r1, #4
   82954:	4b1c      	ldr	r3, [pc, #112]	; (829c8 <Reset_Handler+0x94>)
   82956:	1a9b      	subs	r3, r3, r2
   82958:	f023 0303 	bic.w	r3, r3, #3
   8295c:	3304      	adds	r3, #4
   8295e:	4a16      	ldr	r2, [pc, #88]	; (829b8 <Reset_Handler+0x84>)
   82960:	4413      	add	r3, r2
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
			*pDest++ = *pSrc++;
   82962:	f852 0b04 	ldr.w	r0, [r2], #4
   82966:	f841 0b04 	str.w	r0, [r1], #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   8296a:	429a      	cmp	r2, r3
   8296c:	d1f9      	bne.n	82962 <Reset_Handler+0x2e>
   8296e:	e7ea      	b.n	82946 <Reset_Handler+0x12>
   82970:	4b16      	ldr	r3, [pc, #88]	; (829cc <Reset_Handler+0x98>)
   82972:	4a17      	ldr	r2, [pc, #92]	; (829d0 <Reset_Handler+0x9c>)
   82974:	1ad2      	subs	r2, r2, r3
   82976:	f022 0203 	bic.w	r2, r2, #3
   8297a:	441a      	add	r2, r3
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   8297c:	3b04      	subs	r3, #4
		*pDest++ = 0;
   8297e:	2100      	movs	r1, #0
   82980:	f843 1b04 	str.w	r1, [r3], #4
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   82984:	4293      	cmp	r3, r2
   82986:	d1fb      	bne.n	82980 <Reset_Handler+0x4c>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   82988:	4b12      	ldr	r3, [pc, #72]	; (829d4 <Reset_Handler+0xa0>)
   8298a:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
   8298e:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   82992:	4911      	ldr	r1, [pc, #68]	; (829d8 <Reset_Handler+0xa4>)
   82994:	608a      	str	r2, [r1, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < NFC_RAM_ADDR)) {
   82996:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   8299a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   8299e:	d203      	bcs.n	829a8 <Reset_Handler+0x74>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   829a0:	688b      	ldr	r3, [r1, #8]
   829a2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   829a6:	608b      	str	r3, [r1, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   829a8:	4b0c      	ldr	r3, [pc, #48]	; (829dc <Reset_Handler+0xa8>)
   829aa:	4798      	blx	r3

	/* Branch to main function */
	main();
   829ac:	4b0c      	ldr	r3, [pc, #48]	; (829e0 <Reset_Handler+0xac>)
   829ae:	4798      	blx	r3

	/* Infinite loop */
	while (1);
   829b0:	e7fe      	b.n	829b0 <Reset_Handler+0x7c>
   829b2:	bf00      	nop
   829b4:	20070000 	.word	0x20070000
   829b8:	00086a64 	.word	0x00086a64
   829bc:	200709bc 	.word	0x200709bc
   829c0:	20078ca8 	.word	0x20078ca8
   829c4:	200709c0 	.word	0x200709c0
   829c8:	200709bf 	.word	0x200709bf
   829cc:	200709c4 	.word	0x200709c4
   829d0:	20078cab 	.word	0x20078cab
   829d4:	00080000 	.word	0x00080000
   829d8:	e000ed00 	.word	0xe000ed00
   829dc:	000838d5 	.word	0x000838d5
   829e0:	00082b51 	.word	0x00082b51

000829e4 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate(void)
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   829e4:	4b3e      	ldr	r3, [pc, #248]	; (82ae0 <SystemCoreClockUpdate+0xfc>)
   829e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   829e8:	f003 0303 	and.w	r3, r3, #3
   829ec:	2b03      	cmp	r3, #3
   829ee:	d85f      	bhi.n	82ab0 <SystemCoreClockUpdate+0xcc>
   829f0:	e8df f003 	tbb	[pc, r3]
   829f4:	2b2b0e02 	.word	0x2b2b0e02
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   829f8:	4b3a      	ldr	r3, [pc, #232]	; (82ae4 <SystemCoreClockUpdate+0x100>)
   829fa:	695b      	ldr	r3, [r3, #20]
   829fc:	f013 0f80 	tst.w	r3, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   82a00:	bf14      	ite	ne
   82a02:	f44f 4200 	movne.w	r2, #32768	; 0x8000
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   82a06:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
   82a0a:	4b37      	ldr	r3, [pc, #220]	; (82ae8 <SystemCoreClockUpdate+0x104>)
   82a0c:	601a      	str	r2, [r3, #0]
   82a0e:	e04f      	b.n	82ab0 <SystemCoreClockUpdate+0xcc>
		}
		break;
	case PMC_MCKR_CSS_MAIN_CLK:	/* Main clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   82a10:	4b33      	ldr	r3, [pc, #204]	; (82ae0 <SystemCoreClockUpdate+0xfc>)
   82a12:	6a1b      	ldr	r3, [r3, #32]
   82a14:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   82a18:	d003      	beq.n	82a22 <SystemCoreClockUpdate+0x3e>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   82a1a:	4a34      	ldr	r2, [pc, #208]	; (82aec <SystemCoreClockUpdate+0x108>)
   82a1c:	4b32      	ldr	r3, [pc, #200]	; (82ae8 <SystemCoreClockUpdate+0x104>)
   82a1e:	601a      	str	r2, [r3, #0]
   82a20:	e046      	b.n	82ab0 <SystemCoreClockUpdate+0xcc>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   82a22:	4a33      	ldr	r2, [pc, #204]	; (82af0 <SystemCoreClockUpdate+0x10c>)
   82a24:	4b30      	ldr	r3, [pc, #192]	; (82ae8 <SystemCoreClockUpdate+0x104>)
   82a26:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   82a28:	4b2d      	ldr	r3, [pc, #180]	; (82ae0 <SystemCoreClockUpdate+0xfc>)
   82a2a:	6a1b      	ldr	r3, [r3, #32]
   82a2c:	f003 0370 	and.w	r3, r3, #112	; 0x70
   82a30:	2b10      	cmp	r3, #16
   82a32:	d002      	beq.n	82a3a <SystemCoreClockUpdate+0x56>
   82a34:	2b20      	cmp	r3, #32
   82a36:	d004      	beq.n	82a42 <SystemCoreClockUpdate+0x5e>
   82a38:	e03a      	b.n	82ab0 <SystemCoreClockUpdate+0xcc>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   82a3a:	4a2e      	ldr	r2, [pc, #184]	; (82af4 <SystemCoreClockUpdate+0x110>)
   82a3c:	4b2a      	ldr	r3, [pc, #168]	; (82ae8 <SystemCoreClockUpdate+0x104>)
   82a3e:	601a      	str	r2, [r3, #0]
				break;
   82a40:	e036      	b.n	82ab0 <SystemCoreClockUpdate+0xcc>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   82a42:	4a2a      	ldr	r2, [pc, #168]	; (82aec <SystemCoreClockUpdate+0x108>)
   82a44:	4b28      	ldr	r3, [pc, #160]	; (82ae8 <SystemCoreClockUpdate+0x104>)
   82a46:	601a      	str	r2, [r3, #0]
				break;
   82a48:	e032      	b.n	82ab0 <SystemCoreClockUpdate+0xcc>
			}
		}
		break;
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_UPLL_CLK:	/* UPLL clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   82a4a:	4b25      	ldr	r3, [pc, #148]	; (82ae0 <SystemCoreClockUpdate+0xfc>)
   82a4c:	6a1b      	ldr	r3, [r3, #32]
   82a4e:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   82a52:	d003      	beq.n	82a5c <SystemCoreClockUpdate+0x78>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   82a54:	4a25      	ldr	r2, [pc, #148]	; (82aec <SystemCoreClockUpdate+0x108>)
   82a56:	4b24      	ldr	r3, [pc, #144]	; (82ae8 <SystemCoreClockUpdate+0x104>)
   82a58:	601a      	str	r2, [r3, #0]
   82a5a:	e012      	b.n	82a82 <SystemCoreClockUpdate+0x9e>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   82a5c:	4a24      	ldr	r2, [pc, #144]	; (82af0 <SystemCoreClockUpdate+0x10c>)
   82a5e:	4b22      	ldr	r3, [pc, #136]	; (82ae8 <SystemCoreClockUpdate+0x104>)
   82a60:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   82a62:	4b1f      	ldr	r3, [pc, #124]	; (82ae0 <SystemCoreClockUpdate+0xfc>)
   82a64:	6a1b      	ldr	r3, [r3, #32]
   82a66:	f003 0370 	and.w	r3, r3, #112	; 0x70
   82a6a:	2b10      	cmp	r3, #16
   82a6c:	d002      	beq.n	82a74 <SystemCoreClockUpdate+0x90>
   82a6e:	2b20      	cmp	r3, #32
   82a70:	d004      	beq.n	82a7c <SystemCoreClockUpdate+0x98>
   82a72:	e006      	b.n	82a82 <SystemCoreClockUpdate+0x9e>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   82a74:	4a1f      	ldr	r2, [pc, #124]	; (82af4 <SystemCoreClockUpdate+0x110>)
   82a76:	4b1c      	ldr	r3, [pc, #112]	; (82ae8 <SystemCoreClockUpdate+0x104>)
   82a78:	601a      	str	r2, [r3, #0]
				break;
   82a7a:	e002      	b.n	82a82 <SystemCoreClockUpdate+0x9e>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   82a7c:	4a1b      	ldr	r2, [pc, #108]	; (82aec <SystemCoreClockUpdate+0x108>)
   82a7e:	4b1a      	ldr	r3, [pc, #104]	; (82ae8 <SystemCoreClockUpdate+0x104>)
   82a80:	601a      	str	r2, [r3, #0]
				break;
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   82a82:	4b17      	ldr	r3, [pc, #92]	; (82ae0 <SystemCoreClockUpdate+0xfc>)
   82a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   82a86:	f003 0303 	and.w	r3, r3, #3
   82a8a:	2b02      	cmp	r3, #2
   82a8c:	d10d      	bne.n	82aaa <SystemCoreClockUpdate+0xc6>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   82a8e:	4a14      	ldr	r2, [pc, #80]	; (82ae0 <SystemCoreClockUpdate+0xfc>)
   82a90:	6a93      	ldr	r3, [r2, #40]	; 0x28
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   82a92:	6a92      	ldr	r2, [r2, #40]	; 0x28
   82a94:	4814      	ldr	r0, [pc, #80]	; (82ae8 <SystemCoreClockUpdate+0x104>)
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   82a96:	f3c3 410a 	ubfx	r1, r3, #16, #11
   82a9a:	6803      	ldr	r3, [r0, #0]
   82a9c:	fb01 3303 	mla	r3, r1, r3, r3
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   82aa0:	b2d2      	uxtb	r2, r2
   82aa2:	fbb3 f3f2 	udiv	r3, r3, r2
   82aa6:	6003      	str	r3, [r0, #0]
   82aa8:	e002      	b.n	82ab0 <SystemCoreClockUpdate+0xcc>
				                             CKGR_PLLAR_DIVA_Pos));
		} else {
			SystemCoreClock = SYS_UTMIPLL / 2U;
   82aaa:	4a13      	ldr	r2, [pc, #76]	; (82af8 <SystemCoreClockUpdate+0x114>)
   82aac:	4b0e      	ldr	r3, [pc, #56]	; (82ae8 <SystemCoreClockUpdate+0x104>)
   82aae:	601a      	str	r2, [r3, #0]
		}
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   82ab0:	4b0b      	ldr	r3, [pc, #44]	; (82ae0 <SystemCoreClockUpdate+0xfc>)
   82ab2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   82ab4:	f003 0370 	and.w	r3, r3, #112	; 0x70
   82ab8:	2b70      	cmp	r3, #112	; 0x70
   82aba:	d107      	bne.n	82acc <SystemCoreClockUpdate+0xe8>
		SystemCoreClock /= 3U;
   82abc:	4a0a      	ldr	r2, [pc, #40]	; (82ae8 <SystemCoreClockUpdate+0x104>)
   82abe:	6813      	ldr	r3, [r2, #0]
   82ac0:	490e      	ldr	r1, [pc, #56]	; (82afc <SystemCoreClockUpdate+0x118>)
   82ac2:	fba1 1303 	umull	r1, r3, r1, r3
   82ac6:	085b      	lsrs	r3, r3, #1
   82ac8:	6013      	str	r3, [r2, #0]
   82aca:	4770      	bx	lr
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   82acc:	4b04      	ldr	r3, [pc, #16]	; (82ae0 <SystemCoreClockUpdate+0xfc>)
   82ace:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   82ad0:	4905      	ldr	r1, [pc, #20]	; (82ae8 <SystemCoreClockUpdate+0x104>)
   82ad2:	f3c2 1202 	ubfx	r2, r2, #4, #3
   82ad6:	680b      	ldr	r3, [r1, #0]
   82ad8:	40d3      	lsrs	r3, r2
   82ada:	600b      	str	r3, [r1, #0]
   82adc:	4770      	bx	lr
   82ade:	bf00      	nop
   82ae0:	400e0600 	.word	0x400e0600
   82ae4:	400e1a10 	.word	0x400e1a10
   82ae8:	20070150 	.word	0x20070150
   82aec:	00b71b00 	.word	0x00b71b00
   82af0:	003d0900 	.word	0x003d0900
   82af4:	007a1200 	.word	0x007a1200
   82af8:	0e4e1c00 	.word	0x0e4e1c00
   82afc:	aaaaaaab 	.word	0xaaaaaaab

00082b00 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
   82b00:	4b09      	ldr	r3, [pc, #36]	; (82b28 <_sbrk+0x28>)
   82b02:	681b      	ldr	r3, [r3, #0]
   82b04:	b913      	cbnz	r3, 82b0c <_sbrk+0xc>
		heap = (unsigned char *)&_end;
   82b06:	4a09      	ldr	r2, [pc, #36]	; (82b2c <_sbrk+0x2c>)
   82b08:	4b07      	ldr	r3, [pc, #28]	; (82b28 <_sbrk+0x28>)
   82b0a:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
   82b0c:	4b06      	ldr	r3, [pc, #24]	; (82b28 <_sbrk+0x28>)
   82b0e:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
   82b10:	181a      	adds	r2, r3, r0
   82b12:	4907      	ldr	r1, [pc, #28]	; (82b30 <_sbrk+0x30>)
   82b14:	4291      	cmp	r1, r2
   82b16:	db04      	blt.n	82b22 <_sbrk+0x22>
		return (caddr_t) -1;	
	}

	heap += incr;
   82b18:	4610      	mov	r0, r2
   82b1a:	4a03      	ldr	r2, [pc, #12]	; (82b28 <_sbrk+0x28>)
   82b1c:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
   82b1e:	4618      	mov	r0, r3
   82b20:	4770      	bx	lr
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;

	if (((int)prev_heap + incr) > ramend) {
		return (caddr_t) -1;	
   82b22:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap += incr;

	return (caddr_t) prev_heap;
}
   82b26:	4770      	bx	lr
   82b28:	20078c38 	.word	0x20078c38
   82b2c:	2007aca8 	.word	0x2007aca8
   82b30:	20087ffc 	.word	0x20087ffc

00082b34 <_close>:
}

extern int _close(int file)
{
	return -1;
}
   82b34:	f04f 30ff 	mov.w	r0, #4294967295
   82b38:	4770      	bx	lr
   82b3a:	bf00      	nop

00082b3c <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
   82b3c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
   82b40:	604b      	str	r3, [r1, #4]

	return 0;
}
   82b42:	2000      	movs	r0, #0
   82b44:	4770      	bx	lr
   82b46:	bf00      	nop

00082b48 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
   82b48:	2001      	movs	r0, #1
   82b4a:	4770      	bx	lr

00082b4c <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
   82b4c:	2000      	movs	r0, #0
   82b4e:	4770      	bx	lr

00082b50 <main>:
#include "UARTFunctions.h"
#include "UARTTask.h"
#include "PIDTask.h"

int main (void)
{
   82b50:	b500      	push	{lr}
   82b52:	b085      	sub	sp, #20
	// Board init
	sysclk_init();
   82b54:	4b24      	ldr	r3, [pc, #144]	; (82be8 <main+0x98>)
   82b56:	4798      	blx	r3
	board_init();
   82b58:	4b24      	ldr	r3, [pc, #144]	; (82bec <main+0x9c>)
   82b5a:	4798      	blx	r3
   82b5c:	200b      	movs	r0, #11
   82b5e:	4c24      	ldr	r4, [pc, #144]	; (82bf0 <main+0xa0>)
   82b60:	47a0      	blx	r4
   82b62:	200c      	movs	r0, #12
   82b64:	47a0      	blx	r4
   82b66:	200d      	movs	r0, #13
   82b68:	47a0      	blx	r4
   82b6a:	200e      	movs	r0, #14
   82b6c:	47a0      	blx	r4
	ioport_init();

	delay_init();
	configure_console(); // Initialize UART
   82b6e:	4b21      	ldr	r3, [pc, #132]	; (82bf4 <main+0xa4>)
   82b70:	4798      	blx	r3

	PWMSetup();
   82b72:	4b21      	ldr	r3, [pc, #132]	; (82bf8 <main+0xa8>)
   82b74:	4798      	blx	r3
	shieldInit();
   82b76:	4b21      	ldr	r3, [pc, #132]	; (82bfc <main+0xac>)
   82b78:	4798      	blx	r3
	ADCSetup();
   82b7a:	4b21      	ldr	r3, [pc, #132]	; (82c00 <main+0xb0>)
   82b7c:	4798      	blx	r3
	//testFans(); // Loops fan speed
	//testFilter(); // Loops FIR-filtered sensor values
	//testADC(); // Loops sensor values
	
	//initialize binary semaphore
	vSemaphoreCreateBinary(sem);
   82b7e:	2001      	movs	r0, #1
   82b80:	2100      	movs	r1, #0
   82b82:	2203      	movs	r2, #3
   82b84:	4b1f      	ldr	r3, [pc, #124]	; (82c04 <main+0xb4>)
   82b86:	4798      	blx	r3
   82b88:	4b1f      	ldr	r3, [pc, #124]	; (82c08 <main+0xb8>)
   82b8a:	6018      	str	r0, [r3, #0]
   82b8c:	b120      	cbz	r0, 82b98 <main+0x48>
   82b8e:	2100      	movs	r1, #0
   82b90:	460a      	mov	r2, r1
   82b92:	460b      	mov	r3, r1
   82b94:	4c1d      	ldr	r4, [pc, #116]	; (82c0c <main+0xbc>)
   82b96:	47a0      	blx	r4
		// The semaphore can now be used.
	}
	
	/* Creating the PID regulation task */
	//	printf("Created PIDRegulationTask\n\r");
	if (xTaskCreate(PIDRegulationTask, (const signed char * const) "PIDRegulation",
   82b98:	2302      	movs	r3, #2
   82b9a:	9300      	str	r3, [sp, #0]
   82b9c:	2300      	movs	r3, #0
   82b9e:	9301      	str	r3, [sp, #4]
   82ba0:	9302      	str	r3, [sp, #8]
   82ba2:	9303      	str	r3, [sp, #12]
   82ba4:	481a      	ldr	r0, [pc, #104]	; (82c10 <main+0xc0>)
   82ba6:	491b      	ldr	r1, [pc, #108]	; (82c14 <main+0xc4>)
   82ba8:	f44f 7200 	mov.w	r2, #512	; 0x200
   82bac:	4c1a      	ldr	r4, [pc, #104]	; (82c18 <main+0xc8>)
   82bae:	47a0      	blx	r4
   82bb0:	2801      	cmp	r0, #1
   82bb2:	d002      	beq.n	82bba <main+0x6a>
	TASK_PIDRegulation_STACK_SIZE, NULL, TASK_PIDRegulation_STACK_PRIORITY, NULL) != pdPASS)
	{
		printf("Failed to create PIDRegulationTask\r\n");
   82bb4:	4819      	ldr	r0, [pc, #100]	; (82c1c <main+0xcc>)
   82bb6:	4b1a      	ldr	r3, [pc, #104]	; (82c20 <main+0xd0>)
   82bb8:	4798      	blx	r3
	}
	
	/* Creating the serial communication task */
	//	printf("Created SerialComTask\n\r");
	if (xTaskCreate(SerialComTask, (const signed char * const) "SerialComTask",
   82bba:	2301      	movs	r3, #1
   82bbc:	9300      	str	r3, [sp, #0]
   82bbe:	2300      	movs	r3, #0
   82bc0:	9301      	str	r3, [sp, #4]
   82bc2:	9302      	str	r3, [sp, #8]
   82bc4:	9303      	str	r3, [sp, #12]
   82bc6:	4817      	ldr	r0, [pc, #92]	; (82c24 <main+0xd4>)
   82bc8:	4917      	ldr	r1, [pc, #92]	; (82c28 <main+0xd8>)
   82bca:	f44f 7200 	mov.w	r2, #512	; 0x200
   82bce:	4c12      	ldr	r4, [pc, #72]	; (82c18 <main+0xc8>)
   82bd0:	47a0      	blx	r4
   82bd2:	2801      	cmp	r0, #1
   82bd4:	d002      	beq.n	82bdc <main+0x8c>
	TASK_SerialComTask_STACK_SIZE, NULL, TASK_SerialComTask_STACK_PRIORITY, NULL) != pdPASS)
	{
		printf("Failed to create SerialComTask\r\n");
   82bd6:	4815      	ldr	r0, [pc, #84]	; (82c2c <main+0xdc>)
   82bd8:	4b11      	ldr	r3, [pc, #68]	; (82c20 <main+0xd0>)
   82bda:	4798      	blx	r3
	}
	
	///* Start the FreeRTOS scheduler running all tasks indefinitely*/
	vTaskStartScheduler();
   82bdc:	4b14      	ldr	r3, [pc, #80]	; (82c30 <main+0xe0>)
   82bde:	4798      	blx	r3
	printf("Insufficient RAM\r\n");
   82be0:	4814      	ldr	r0, [pc, #80]	; (82c34 <main+0xe4>)
   82be2:	4b0f      	ldr	r3, [pc, #60]	; (82c20 <main+0xd0>)
   82be4:	4798      	blx	r3
	while(1);
   82be6:	e7fe      	b.n	82be6 <main+0x96>
   82be8:	00082435 	.word	0x00082435
   82bec:	00082499 	.word	0x00082499
   82bf0:	000828dd 	.word	0x000828dd
   82bf4:	00080831 	.word	0x00080831
   82bf8:	00080639 	.word	0x00080639
   82bfc:	000806c9 	.word	0x000806c9
   82c00:	00080151 	.word	0x00080151
   82c04:	00081039 	.word	0x00081039
   82c08:	200709dc 	.word	0x200709dc
   82c0c:	00081091 	.word	0x00081091
   82c10:	000805b9 	.word	0x000805b9
   82c14:	00086960 	.word	0x00086960
   82c18:	00081455 	.word	0x00081455
   82c1c:	00086970 	.word	0x00086970
   82c20:	00083925 	.word	0x00083925
   82c24:	00080ad5 	.word	0x00080ad5
   82c28:	00086998 	.word	0x00086998
   82c2c:	000869a8 	.word	0x000869a8
   82c30:	00081659 	.word	0x00081659
   82c34:	000869cc 	.word	0x000869cc

00082c38 <__aeabi_drsub>:
   82c38:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   82c3c:	e002      	b.n	82c44 <__adddf3>
   82c3e:	bf00      	nop

00082c40 <__aeabi_dsub>:
   82c40:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00082c44 <__adddf3>:
   82c44:	b530      	push	{r4, r5, lr}
   82c46:	ea4f 0441 	mov.w	r4, r1, lsl #1
   82c4a:	ea4f 0543 	mov.w	r5, r3, lsl #1
   82c4e:	ea94 0f05 	teq	r4, r5
   82c52:	bf08      	it	eq
   82c54:	ea90 0f02 	teqeq	r0, r2
   82c58:	bf1f      	itttt	ne
   82c5a:	ea54 0c00 	orrsne.w	ip, r4, r0
   82c5e:	ea55 0c02 	orrsne.w	ip, r5, r2
   82c62:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   82c66:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   82c6a:	f000 80e2 	beq.w	82e32 <__adddf3+0x1ee>
   82c6e:	ea4f 5454 	mov.w	r4, r4, lsr #21
   82c72:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   82c76:	bfb8      	it	lt
   82c78:	426d      	neglt	r5, r5
   82c7a:	dd0c      	ble.n	82c96 <__adddf3+0x52>
   82c7c:	442c      	add	r4, r5
   82c7e:	ea80 0202 	eor.w	r2, r0, r2
   82c82:	ea81 0303 	eor.w	r3, r1, r3
   82c86:	ea82 0000 	eor.w	r0, r2, r0
   82c8a:	ea83 0101 	eor.w	r1, r3, r1
   82c8e:	ea80 0202 	eor.w	r2, r0, r2
   82c92:	ea81 0303 	eor.w	r3, r1, r3
   82c96:	2d36      	cmp	r5, #54	; 0x36
   82c98:	bf88      	it	hi
   82c9a:	bd30      	pophi	{r4, r5, pc}
   82c9c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   82ca0:	ea4f 3101 	mov.w	r1, r1, lsl #12
   82ca4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   82ca8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   82cac:	d002      	beq.n	82cb4 <__adddf3+0x70>
   82cae:	4240      	negs	r0, r0
   82cb0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   82cb4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   82cb8:	ea4f 3303 	mov.w	r3, r3, lsl #12
   82cbc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   82cc0:	d002      	beq.n	82cc8 <__adddf3+0x84>
   82cc2:	4252      	negs	r2, r2
   82cc4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   82cc8:	ea94 0f05 	teq	r4, r5
   82ccc:	f000 80a7 	beq.w	82e1e <__adddf3+0x1da>
   82cd0:	f1a4 0401 	sub.w	r4, r4, #1
   82cd4:	f1d5 0e20 	rsbs	lr, r5, #32
   82cd8:	db0d      	blt.n	82cf6 <__adddf3+0xb2>
   82cda:	fa02 fc0e 	lsl.w	ip, r2, lr
   82cde:	fa22 f205 	lsr.w	r2, r2, r5
   82ce2:	1880      	adds	r0, r0, r2
   82ce4:	f141 0100 	adc.w	r1, r1, #0
   82ce8:	fa03 f20e 	lsl.w	r2, r3, lr
   82cec:	1880      	adds	r0, r0, r2
   82cee:	fa43 f305 	asr.w	r3, r3, r5
   82cf2:	4159      	adcs	r1, r3
   82cf4:	e00e      	b.n	82d14 <__adddf3+0xd0>
   82cf6:	f1a5 0520 	sub.w	r5, r5, #32
   82cfa:	f10e 0e20 	add.w	lr, lr, #32
   82cfe:	2a01      	cmp	r2, #1
   82d00:	fa03 fc0e 	lsl.w	ip, r3, lr
   82d04:	bf28      	it	cs
   82d06:	f04c 0c02 	orrcs.w	ip, ip, #2
   82d0a:	fa43 f305 	asr.w	r3, r3, r5
   82d0e:	18c0      	adds	r0, r0, r3
   82d10:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   82d14:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   82d18:	d507      	bpl.n	82d2a <__adddf3+0xe6>
   82d1a:	f04f 0e00 	mov.w	lr, #0
   82d1e:	f1dc 0c00 	rsbs	ip, ip, #0
   82d22:	eb7e 0000 	sbcs.w	r0, lr, r0
   82d26:	eb6e 0101 	sbc.w	r1, lr, r1
   82d2a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   82d2e:	d31b      	bcc.n	82d68 <__adddf3+0x124>
   82d30:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   82d34:	d30c      	bcc.n	82d50 <__adddf3+0x10c>
   82d36:	0849      	lsrs	r1, r1, #1
   82d38:	ea5f 0030 	movs.w	r0, r0, rrx
   82d3c:	ea4f 0c3c 	mov.w	ip, ip, rrx
   82d40:	f104 0401 	add.w	r4, r4, #1
   82d44:	ea4f 5244 	mov.w	r2, r4, lsl #21
   82d48:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   82d4c:	f080 809a 	bcs.w	82e84 <__adddf3+0x240>
   82d50:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   82d54:	bf08      	it	eq
   82d56:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   82d5a:	f150 0000 	adcs.w	r0, r0, #0
   82d5e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   82d62:	ea41 0105 	orr.w	r1, r1, r5
   82d66:	bd30      	pop	{r4, r5, pc}
   82d68:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   82d6c:	4140      	adcs	r0, r0
   82d6e:	eb41 0101 	adc.w	r1, r1, r1
   82d72:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   82d76:	f1a4 0401 	sub.w	r4, r4, #1
   82d7a:	d1e9      	bne.n	82d50 <__adddf3+0x10c>
   82d7c:	f091 0f00 	teq	r1, #0
   82d80:	bf04      	itt	eq
   82d82:	4601      	moveq	r1, r0
   82d84:	2000      	moveq	r0, #0
   82d86:	fab1 f381 	clz	r3, r1
   82d8a:	bf08      	it	eq
   82d8c:	3320      	addeq	r3, #32
   82d8e:	f1a3 030b 	sub.w	r3, r3, #11
   82d92:	f1b3 0220 	subs.w	r2, r3, #32
   82d96:	da0c      	bge.n	82db2 <__adddf3+0x16e>
   82d98:	320c      	adds	r2, #12
   82d9a:	dd08      	ble.n	82dae <__adddf3+0x16a>
   82d9c:	f102 0c14 	add.w	ip, r2, #20
   82da0:	f1c2 020c 	rsb	r2, r2, #12
   82da4:	fa01 f00c 	lsl.w	r0, r1, ip
   82da8:	fa21 f102 	lsr.w	r1, r1, r2
   82dac:	e00c      	b.n	82dc8 <__adddf3+0x184>
   82dae:	f102 0214 	add.w	r2, r2, #20
   82db2:	bfd8      	it	le
   82db4:	f1c2 0c20 	rsble	ip, r2, #32
   82db8:	fa01 f102 	lsl.w	r1, r1, r2
   82dbc:	fa20 fc0c 	lsr.w	ip, r0, ip
   82dc0:	bfdc      	itt	le
   82dc2:	ea41 010c 	orrle.w	r1, r1, ip
   82dc6:	4090      	lslle	r0, r2
   82dc8:	1ae4      	subs	r4, r4, r3
   82dca:	bfa2      	ittt	ge
   82dcc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   82dd0:	4329      	orrge	r1, r5
   82dd2:	bd30      	popge	{r4, r5, pc}
   82dd4:	ea6f 0404 	mvn.w	r4, r4
   82dd8:	3c1f      	subs	r4, #31
   82dda:	da1c      	bge.n	82e16 <__adddf3+0x1d2>
   82ddc:	340c      	adds	r4, #12
   82dde:	dc0e      	bgt.n	82dfe <__adddf3+0x1ba>
   82de0:	f104 0414 	add.w	r4, r4, #20
   82de4:	f1c4 0220 	rsb	r2, r4, #32
   82de8:	fa20 f004 	lsr.w	r0, r0, r4
   82dec:	fa01 f302 	lsl.w	r3, r1, r2
   82df0:	ea40 0003 	orr.w	r0, r0, r3
   82df4:	fa21 f304 	lsr.w	r3, r1, r4
   82df8:	ea45 0103 	orr.w	r1, r5, r3
   82dfc:	bd30      	pop	{r4, r5, pc}
   82dfe:	f1c4 040c 	rsb	r4, r4, #12
   82e02:	f1c4 0220 	rsb	r2, r4, #32
   82e06:	fa20 f002 	lsr.w	r0, r0, r2
   82e0a:	fa01 f304 	lsl.w	r3, r1, r4
   82e0e:	ea40 0003 	orr.w	r0, r0, r3
   82e12:	4629      	mov	r1, r5
   82e14:	bd30      	pop	{r4, r5, pc}
   82e16:	fa21 f004 	lsr.w	r0, r1, r4
   82e1a:	4629      	mov	r1, r5
   82e1c:	bd30      	pop	{r4, r5, pc}
   82e1e:	f094 0f00 	teq	r4, #0
   82e22:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   82e26:	bf06      	itte	eq
   82e28:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   82e2c:	3401      	addeq	r4, #1
   82e2e:	3d01      	subne	r5, #1
   82e30:	e74e      	b.n	82cd0 <__adddf3+0x8c>
   82e32:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   82e36:	bf18      	it	ne
   82e38:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   82e3c:	d029      	beq.n	82e92 <__adddf3+0x24e>
   82e3e:	ea94 0f05 	teq	r4, r5
   82e42:	bf08      	it	eq
   82e44:	ea90 0f02 	teqeq	r0, r2
   82e48:	d005      	beq.n	82e56 <__adddf3+0x212>
   82e4a:	ea54 0c00 	orrs.w	ip, r4, r0
   82e4e:	bf04      	itt	eq
   82e50:	4619      	moveq	r1, r3
   82e52:	4610      	moveq	r0, r2
   82e54:	bd30      	pop	{r4, r5, pc}
   82e56:	ea91 0f03 	teq	r1, r3
   82e5a:	bf1e      	ittt	ne
   82e5c:	2100      	movne	r1, #0
   82e5e:	2000      	movne	r0, #0
   82e60:	bd30      	popne	{r4, r5, pc}
   82e62:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   82e66:	d105      	bne.n	82e74 <__adddf3+0x230>
   82e68:	0040      	lsls	r0, r0, #1
   82e6a:	4149      	adcs	r1, r1
   82e6c:	bf28      	it	cs
   82e6e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   82e72:	bd30      	pop	{r4, r5, pc}
   82e74:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   82e78:	bf3c      	itt	cc
   82e7a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   82e7e:	bd30      	popcc	{r4, r5, pc}
   82e80:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   82e84:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   82e88:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   82e8c:	f04f 0000 	mov.w	r0, #0
   82e90:	bd30      	pop	{r4, r5, pc}
   82e92:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   82e96:	bf1a      	itte	ne
   82e98:	4619      	movne	r1, r3
   82e9a:	4610      	movne	r0, r2
   82e9c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   82ea0:	bf1c      	itt	ne
   82ea2:	460b      	movne	r3, r1
   82ea4:	4602      	movne	r2, r0
   82ea6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   82eaa:	bf06      	itte	eq
   82eac:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   82eb0:	ea91 0f03 	teqeq	r1, r3
   82eb4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   82eb8:	bd30      	pop	{r4, r5, pc}
   82eba:	bf00      	nop

00082ebc <__aeabi_ui2d>:
   82ebc:	f090 0f00 	teq	r0, #0
   82ec0:	bf04      	itt	eq
   82ec2:	2100      	moveq	r1, #0
   82ec4:	4770      	bxeq	lr
   82ec6:	b530      	push	{r4, r5, lr}
   82ec8:	f44f 6480 	mov.w	r4, #1024	; 0x400
   82ecc:	f104 0432 	add.w	r4, r4, #50	; 0x32
   82ed0:	f04f 0500 	mov.w	r5, #0
   82ed4:	f04f 0100 	mov.w	r1, #0
   82ed8:	e750      	b.n	82d7c <__adddf3+0x138>
   82eda:	bf00      	nop

00082edc <__aeabi_i2d>:
   82edc:	f090 0f00 	teq	r0, #0
   82ee0:	bf04      	itt	eq
   82ee2:	2100      	moveq	r1, #0
   82ee4:	4770      	bxeq	lr
   82ee6:	b530      	push	{r4, r5, lr}
   82ee8:	f44f 6480 	mov.w	r4, #1024	; 0x400
   82eec:	f104 0432 	add.w	r4, r4, #50	; 0x32
   82ef0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   82ef4:	bf48      	it	mi
   82ef6:	4240      	negmi	r0, r0
   82ef8:	f04f 0100 	mov.w	r1, #0
   82efc:	e73e      	b.n	82d7c <__adddf3+0x138>
   82efe:	bf00      	nop

00082f00 <__aeabi_f2d>:
   82f00:	0042      	lsls	r2, r0, #1
   82f02:	ea4f 01e2 	mov.w	r1, r2, asr #3
   82f06:	ea4f 0131 	mov.w	r1, r1, rrx
   82f0a:	ea4f 7002 	mov.w	r0, r2, lsl #28
   82f0e:	bf1f      	itttt	ne
   82f10:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   82f14:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   82f18:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   82f1c:	4770      	bxne	lr
   82f1e:	f092 0f00 	teq	r2, #0
   82f22:	bf14      	ite	ne
   82f24:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   82f28:	4770      	bxeq	lr
   82f2a:	b530      	push	{r4, r5, lr}
   82f2c:	f44f 7460 	mov.w	r4, #896	; 0x380
   82f30:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   82f34:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   82f38:	e720      	b.n	82d7c <__adddf3+0x138>
   82f3a:	bf00      	nop

00082f3c <__aeabi_ul2d>:
   82f3c:	ea50 0201 	orrs.w	r2, r0, r1
   82f40:	bf08      	it	eq
   82f42:	4770      	bxeq	lr
   82f44:	b530      	push	{r4, r5, lr}
   82f46:	f04f 0500 	mov.w	r5, #0
   82f4a:	e00a      	b.n	82f62 <__aeabi_l2d+0x16>

00082f4c <__aeabi_l2d>:
   82f4c:	ea50 0201 	orrs.w	r2, r0, r1
   82f50:	bf08      	it	eq
   82f52:	4770      	bxeq	lr
   82f54:	b530      	push	{r4, r5, lr}
   82f56:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   82f5a:	d502      	bpl.n	82f62 <__aeabi_l2d+0x16>
   82f5c:	4240      	negs	r0, r0
   82f5e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   82f62:	f44f 6480 	mov.w	r4, #1024	; 0x400
   82f66:	f104 0432 	add.w	r4, r4, #50	; 0x32
   82f6a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   82f6e:	f43f aedc 	beq.w	82d2a <__adddf3+0xe6>
   82f72:	f04f 0203 	mov.w	r2, #3
   82f76:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   82f7a:	bf18      	it	ne
   82f7c:	3203      	addne	r2, #3
   82f7e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   82f82:	bf18      	it	ne
   82f84:	3203      	addne	r2, #3
   82f86:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   82f8a:	f1c2 0320 	rsb	r3, r2, #32
   82f8e:	fa00 fc03 	lsl.w	ip, r0, r3
   82f92:	fa20 f002 	lsr.w	r0, r0, r2
   82f96:	fa01 fe03 	lsl.w	lr, r1, r3
   82f9a:	ea40 000e 	orr.w	r0, r0, lr
   82f9e:	fa21 f102 	lsr.w	r1, r1, r2
   82fa2:	4414      	add	r4, r2
   82fa4:	e6c1      	b.n	82d2a <__adddf3+0xe6>
   82fa6:	bf00      	nop

00082fa8 <__aeabi_dmul>:
   82fa8:	b570      	push	{r4, r5, r6, lr}
   82faa:	f04f 0cff 	mov.w	ip, #255	; 0xff
   82fae:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   82fb2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   82fb6:	bf1d      	ittte	ne
   82fb8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   82fbc:	ea94 0f0c 	teqne	r4, ip
   82fc0:	ea95 0f0c 	teqne	r5, ip
   82fc4:	f000 f8de 	bleq	83184 <__aeabi_dmul+0x1dc>
   82fc8:	442c      	add	r4, r5
   82fca:	ea81 0603 	eor.w	r6, r1, r3
   82fce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   82fd2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   82fd6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   82fda:	bf18      	it	ne
   82fdc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   82fe0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   82fe4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   82fe8:	d038      	beq.n	8305c <__aeabi_dmul+0xb4>
   82fea:	fba0 ce02 	umull	ip, lr, r0, r2
   82fee:	f04f 0500 	mov.w	r5, #0
   82ff2:	fbe1 e502 	umlal	lr, r5, r1, r2
   82ff6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   82ffa:	fbe0 e503 	umlal	lr, r5, r0, r3
   82ffe:	f04f 0600 	mov.w	r6, #0
   83002:	fbe1 5603 	umlal	r5, r6, r1, r3
   83006:	f09c 0f00 	teq	ip, #0
   8300a:	bf18      	it	ne
   8300c:	f04e 0e01 	orrne.w	lr, lr, #1
   83010:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   83014:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   83018:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   8301c:	d204      	bcs.n	83028 <__aeabi_dmul+0x80>
   8301e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   83022:	416d      	adcs	r5, r5
   83024:	eb46 0606 	adc.w	r6, r6, r6
   83028:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   8302c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   83030:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   83034:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   83038:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   8303c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   83040:	bf88      	it	hi
   83042:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   83046:	d81e      	bhi.n	83086 <__aeabi_dmul+0xde>
   83048:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   8304c:	bf08      	it	eq
   8304e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   83052:	f150 0000 	adcs.w	r0, r0, #0
   83056:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   8305a:	bd70      	pop	{r4, r5, r6, pc}
   8305c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   83060:	ea46 0101 	orr.w	r1, r6, r1
   83064:	ea40 0002 	orr.w	r0, r0, r2
   83068:	ea81 0103 	eor.w	r1, r1, r3
   8306c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   83070:	bfc2      	ittt	gt
   83072:	ebd4 050c 	rsbsgt	r5, r4, ip
   83076:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   8307a:	bd70      	popgt	{r4, r5, r6, pc}
   8307c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   83080:	f04f 0e00 	mov.w	lr, #0
   83084:	3c01      	subs	r4, #1
   83086:	f300 80ab 	bgt.w	831e0 <__aeabi_dmul+0x238>
   8308a:	f114 0f36 	cmn.w	r4, #54	; 0x36
   8308e:	bfde      	ittt	le
   83090:	2000      	movle	r0, #0
   83092:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   83096:	bd70      	pople	{r4, r5, r6, pc}
   83098:	f1c4 0400 	rsb	r4, r4, #0
   8309c:	3c20      	subs	r4, #32
   8309e:	da35      	bge.n	8310c <__aeabi_dmul+0x164>
   830a0:	340c      	adds	r4, #12
   830a2:	dc1b      	bgt.n	830dc <__aeabi_dmul+0x134>
   830a4:	f104 0414 	add.w	r4, r4, #20
   830a8:	f1c4 0520 	rsb	r5, r4, #32
   830ac:	fa00 f305 	lsl.w	r3, r0, r5
   830b0:	fa20 f004 	lsr.w	r0, r0, r4
   830b4:	fa01 f205 	lsl.w	r2, r1, r5
   830b8:	ea40 0002 	orr.w	r0, r0, r2
   830bc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   830c0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   830c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   830c8:	fa21 f604 	lsr.w	r6, r1, r4
   830cc:	eb42 0106 	adc.w	r1, r2, r6
   830d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   830d4:	bf08      	it	eq
   830d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   830da:	bd70      	pop	{r4, r5, r6, pc}
   830dc:	f1c4 040c 	rsb	r4, r4, #12
   830e0:	f1c4 0520 	rsb	r5, r4, #32
   830e4:	fa00 f304 	lsl.w	r3, r0, r4
   830e8:	fa20 f005 	lsr.w	r0, r0, r5
   830ec:	fa01 f204 	lsl.w	r2, r1, r4
   830f0:	ea40 0002 	orr.w	r0, r0, r2
   830f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   830f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   830fc:	f141 0100 	adc.w	r1, r1, #0
   83100:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   83104:	bf08      	it	eq
   83106:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   8310a:	bd70      	pop	{r4, r5, r6, pc}
   8310c:	f1c4 0520 	rsb	r5, r4, #32
   83110:	fa00 f205 	lsl.w	r2, r0, r5
   83114:	ea4e 0e02 	orr.w	lr, lr, r2
   83118:	fa20 f304 	lsr.w	r3, r0, r4
   8311c:	fa01 f205 	lsl.w	r2, r1, r5
   83120:	ea43 0302 	orr.w	r3, r3, r2
   83124:	fa21 f004 	lsr.w	r0, r1, r4
   83128:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   8312c:	fa21 f204 	lsr.w	r2, r1, r4
   83130:	ea20 0002 	bic.w	r0, r0, r2
   83134:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   83138:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   8313c:	bf08      	it	eq
   8313e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   83142:	bd70      	pop	{r4, r5, r6, pc}
   83144:	f094 0f00 	teq	r4, #0
   83148:	d10f      	bne.n	8316a <__aeabi_dmul+0x1c2>
   8314a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   8314e:	0040      	lsls	r0, r0, #1
   83150:	eb41 0101 	adc.w	r1, r1, r1
   83154:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   83158:	bf08      	it	eq
   8315a:	3c01      	subeq	r4, #1
   8315c:	d0f7      	beq.n	8314e <__aeabi_dmul+0x1a6>
   8315e:	ea41 0106 	orr.w	r1, r1, r6
   83162:	f095 0f00 	teq	r5, #0
   83166:	bf18      	it	ne
   83168:	4770      	bxne	lr
   8316a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   8316e:	0052      	lsls	r2, r2, #1
   83170:	eb43 0303 	adc.w	r3, r3, r3
   83174:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   83178:	bf08      	it	eq
   8317a:	3d01      	subeq	r5, #1
   8317c:	d0f7      	beq.n	8316e <__aeabi_dmul+0x1c6>
   8317e:	ea43 0306 	orr.w	r3, r3, r6
   83182:	4770      	bx	lr
   83184:	ea94 0f0c 	teq	r4, ip
   83188:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   8318c:	bf18      	it	ne
   8318e:	ea95 0f0c 	teqne	r5, ip
   83192:	d00c      	beq.n	831ae <__aeabi_dmul+0x206>
   83194:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   83198:	bf18      	it	ne
   8319a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   8319e:	d1d1      	bne.n	83144 <__aeabi_dmul+0x19c>
   831a0:	ea81 0103 	eor.w	r1, r1, r3
   831a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   831a8:	f04f 0000 	mov.w	r0, #0
   831ac:	bd70      	pop	{r4, r5, r6, pc}
   831ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   831b2:	bf06      	itte	eq
   831b4:	4610      	moveq	r0, r2
   831b6:	4619      	moveq	r1, r3
   831b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   831bc:	d019      	beq.n	831f2 <__aeabi_dmul+0x24a>
   831be:	ea94 0f0c 	teq	r4, ip
   831c2:	d102      	bne.n	831ca <__aeabi_dmul+0x222>
   831c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   831c8:	d113      	bne.n	831f2 <__aeabi_dmul+0x24a>
   831ca:	ea95 0f0c 	teq	r5, ip
   831ce:	d105      	bne.n	831dc <__aeabi_dmul+0x234>
   831d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   831d4:	bf1c      	itt	ne
   831d6:	4610      	movne	r0, r2
   831d8:	4619      	movne	r1, r3
   831da:	d10a      	bne.n	831f2 <__aeabi_dmul+0x24a>
   831dc:	ea81 0103 	eor.w	r1, r1, r3
   831e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   831e4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   831e8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   831ec:	f04f 0000 	mov.w	r0, #0
   831f0:	bd70      	pop	{r4, r5, r6, pc}
   831f2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   831f6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   831fa:	bd70      	pop	{r4, r5, r6, pc}

000831fc <__aeabi_ddiv>:
   831fc:	b570      	push	{r4, r5, r6, lr}
   831fe:	f04f 0cff 	mov.w	ip, #255	; 0xff
   83202:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   83206:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   8320a:	bf1d      	ittte	ne
   8320c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   83210:	ea94 0f0c 	teqne	r4, ip
   83214:	ea95 0f0c 	teqne	r5, ip
   83218:	f000 f8a7 	bleq	8336a <__aeabi_ddiv+0x16e>
   8321c:	eba4 0405 	sub.w	r4, r4, r5
   83220:	ea81 0e03 	eor.w	lr, r1, r3
   83224:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   83228:	ea4f 3101 	mov.w	r1, r1, lsl #12
   8322c:	f000 8088 	beq.w	83340 <__aeabi_ddiv+0x144>
   83230:	ea4f 3303 	mov.w	r3, r3, lsl #12
   83234:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   83238:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   8323c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   83240:	ea4f 2202 	mov.w	r2, r2, lsl #8
   83244:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   83248:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   8324c:	ea4f 2600 	mov.w	r6, r0, lsl #8
   83250:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   83254:	429d      	cmp	r5, r3
   83256:	bf08      	it	eq
   83258:	4296      	cmpeq	r6, r2
   8325a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   8325e:	f504 7440 	add.w	r4, r4, #768	; 0x300
   83262:	d202      	bcs.n	8326a <__aeabi_ddiv+0x6e>
   83264:	085b      	lsrs	r3, r3, #1
   83266:	ea4f 0232 	mov.w	r2, r2, rrx
   8326a:	1ab6      	subs	r6, r6, r2
   8326c:	eb65 0503 	sbc.w	r5, r5, r3
   83270:	085b      	lsrs	r3, r3, #1
   83272:	ea4f 0232 	mov.w	r2, r2, rrx
   83276:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   8327a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   8327e:	ebb6 0e02 	subs.w	lr, r6, r2
   83282:	eb75 0e03 	sbcs.w	lr, r5, r3
   83286:	bf22      	ittt	cs
   83288:	1ab6      	subcs	r6, r6, r2
   8328a:	4675      	movcs	r5, lr
   8328c:	ea40 000c 	orrcs.w	r0, r0, ip
   83290:	085b      	lsrs	r3, r3, #1
   83292:	ea4f 0232 	mov.w	r2, r2, rrx
   83296:	ebb6 0e02 	subs.w	lr, r6, r2
   8329a:	eb75 0e03 	sbcs.w	lr, r5, r3
   8329e:	bf22      	ittt	cs
   832a0:	1ab6      	subcs	r6, r6, r2
   832a2:	4675      	movcs	r5, lr
   832a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   832a8:	085b      	lsrs	r3, r3, #1
   832aa:	ea4f 0232 	mov.w	r2, r2, rrx
   832ae:	ebb6 0e02 	subs.w	lr, r6, r2
   832b2:	eb75 0e03 	sbcs.w	lr, r5, r3
   832b6:	bf22      	ittt	cs
   832b8:	1ab6      	subcs	r6, r6, r2
   832ba:	4675      	movcs	r5, lr
   832bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   832c0:	085b      	lsrs	r3, r3, #1
   832c2:	ea4f 0232 	mov.w	r2, r2, rrx
   832c6:	ebb6 0e02 	subs.w	lr, r6, r2
   832ca:	eb75 0e03 	sbcs.w	lr, r5, r3
   832ce:	bf22      	ittt	cs
   832d0:	1ab6      	subcs	r6, r6, r2
   832d2:	4675      	movcs	r5, lr
   832d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   832d8:	ea55 0e06 	orrs.w	lr, r5, r6
   832dc:	d018      	beq.n	83310 <__aeabi_ddiv+0x114>
   832de:	ea4f 1505 	mov.w	r5, r5, lsl #4
   832e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   832e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
   832ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   832ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   832f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   832f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   832fa:	d1c0      	bne.n	8327e <__aeabi_ddiv+0x82>
   832fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   83300:	d10b      	bne.n	8331a <__aeabi_ddiv+0x11e>
   83302:	ea41 0100 	orr.w	r1, r1, r0
   83306:	f04f 0000 	mov.w	r0, #0
   8330a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   8330e:	e7b6      	b.n	8327e <__aeabi_ddiv+0x82>
   83310:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   83314:	bf04      	itt	eq
   83316:	4301      	orreq	r1, r0
   83318:	2000      	moveq	r0, #0
   8331a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   8331e:	bf88      	it	hi
   83320:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   83324:	f63f aeaf 	bhi.w	83086 <__aeabi_dmul+0xde>
   83328:	ebb5 0c03 	subs.w	ip, r5, r3
   8332c:	bf04      	itt	eq
   8332e:	ebb6 0c02 	subseq.w	ip, r6, r2
   83332:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   83336:	f150 0000 	adcs.w	r0, r0, #0
   8333a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   8333e:	bd70      	pop	{r4, r5, r6, pc}
   83340:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   83344:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   83348:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   8334c:	bfc2      	ittt	gt
   8334e:	ebd4 050c 	rsbsgt	r5, r4, ip
   83352:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   83356:	bd70      	popgt	{r4, r5, r6, pc}
   83358:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   8335c:	f04f 0e00 	mov.w	lr, #0
   83360:	3c01      	subs	r4, #1
   83362:	e690      	b.n	83086 <__aeabi_dmul+0xde>
   83364:	ea45 0e06 	orr.w	lr, r5, r6
   83368:	e68d      	b.n	83086 <__aeabi_dmul+0xde>
   8336a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   8336e:	ea94 0f0c 	teq	r4, ip
   83372:	bf08      	it	eq
   83374:	ea95 0f0c 	teqeq	r5, ip
   83378:	f43f af3b 	beq.w	831f2 <__aeabi_dmul+0x24a>
   8337c:	ea94 0f0c 	teq	r4, ip
   83380:	d10a      	bne.n	83398 <__aeabi_ddiv+0x19c>
   83382:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   83386:	f47f af34 	bne.w	831f2 <__aeabi_dmul+0x24a>
   8338a:	ea95 0f0c 	teq	r5, ip
   8338e:	f47f af25 	bne.w	831dc <__aeabi_dmul+0x234>
   83392:	4610      	mov	r0, r2
   83394:	4619      	mov	r1, r3
   83396:	e72c      	b.n	831f2 <__aeabi_dmul+0x24a>
   83398:	ea95 0f0c 	teq	r5, ip
   8339c:	d106      	bne.n	833ac <__aeabi_ddiv+0x1b0>
   8339e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   833a2:	f43f aefd 	beq.w	831a0 <__aeabi_dmul+0x1f8>
   833a6:	4610      	mov	r0, r2
   833a8:	4619      	mov	r1, r3
   833aa:	e722      	b.n	831f2 <__aeabi_dmul+0x24a>
   833ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   833b0:	bf18      	it	ne
   833b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   833b6:	f47f aec5 	bne.w	83144 <__aeabi_dmul+0x19c>
   833ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   833be:	f47f af0d 	bne.w	831dc <__aeabi_dmul+0x234>
   833c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   833c6:	f47f aeeb 	bne.w	831a0 <__aeabi_dmul+0x1f8>
   833ca:	e712      	b.n	831f2 <__aeabi_dmul+0x24a>

000833cc <__gedf2>:
   833cc:	f04f 3cff 	mov.w	ip, #4294967295
   833d0:	e006      	b.n	833e0 <__cmpdf2+0x4>
   833d2:	bf00      	nop

000833d4 <__ledf2>:
   833d4:	f04f 0c01 	mov.w	ip, #1
   833d8:	e002      	b.n	833e0 <__cmpdf2+0x4>
   833da:	bf00      	nop

000833dc <__cmpdf2>:
   833dc:	f04f 0c01 	mov.w	ip, #1
   833e0:	f84d cd04 	str.w	ip, [sp, #-4]!
   833e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   833e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   833ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   833f0:	bf18      	it	ne
   833f2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   833f6:	d01b      	beq.n	83430 <__cmpdf2+0x54>
   833f8:	b001      	add	sp, #4
   833fa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   833fe:	bf0c      	ite	eq
   83400:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   83404:	ea91 0f03 	teqne	r1, r3
   83408:	bf02      	ittt	eq
   8340a:	ea90 0f02 	teqeq	r0, r2
   8340e:	2000      	moveq	r0, #0
   83410:	4770      	bxeq	lr
   83412:	f110 0f00 	cmn.w	r0, #0
   83416:	ea91 0f03 	teq	r1, r3
   8341a:	bf58      	it	pl
   8341c:	4299      	cmppl	r1, r3
   8341e:	bf08      	it	eq
   83420:	4290      	cmpeq	r0, r2
   83422:	bf2c      	ite	cs
   83424:	17d8      	asrcs	r0, r3, #31
   83426:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   8342a:	f040 0001 	orr.w	r0, r0, #1
   8342e:	4770      	bx	lr
   83430:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   83434:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   83438:	d102      	bne.n	83440 <__cmpdf2+0x64>
   8343a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   8343e:	d107      	bne.n	83450 <__cmpdf2+0x74>
   83440:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   83444:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   83448:	d1d6      	bne.n	833f8 <__cmpdf2+0x1c>
   8344a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   8344e:	d0d3      	beq.n	833f8 <__cmpdf2+0x1c>
   83450:	f85d 0b04 	ldr.w	r0, [sp], #4
   83454:	4770      	bx	lr
   83456:	bf00      	nop

00083458 <__aeabi_cdrcmple>:
   83458:	4684      	mov	ip, r0
   8345a:	4610      	mov	r0, r2
   8345c:	4662      	mov	r2, ip
   8345e:	468c      	mov	ip, r1
   83460:	4619      	mov	r1, r3
   83462:	4663      	mov	r3, ip
   83464:	e000      	b.n	83468 <__aeabi_cdcmpeq>
   83466:	bf00      	nop

00083468 <__aeabi_cdcmpeq>:
   83468:	b501      	push	{r0, lr}
   8346a:	f7ff ffb7 	bl	833dc <__cmpdf2>
   8346e:	2800      	cmp	r0, #0
   83470:	bf48      	it	mi
   83472:	f110 0f00 	cmnmi.w	r0, #0
   83476:	bd01      	pop	{r0, pc}

00083478 <__aeabi_dcmpeq>:
   83478:	f84d ed08 	str.w	lr, [sp, #-8]!
   8347c:	f7ff fff4 	bl	83468 <__aeabi_cdcmpeq>
   83480:	bf0c      	ite	eq
   83482:	2001      	moveq	r0, #1
   83484:	2000      	movne	r0, #0
   83486:	f85d fb08 	ldr.w	pc, [sp], #8
   8348a:	bf00      	nop

0008348c <__aeabi_dcmplt>:
   8348c:	f84d ed08 	str.w	lr, [sp, #-8]!
   83490:	f7ff ffea 	bl	83468 <__aeabi_cdcmpeq>
   83494:	bf34      	ite	cc
   83496:	2001      	movcc	r0, #1
   83498:	2000      	movcs	r0, #0
   8349a:	f85d fb08 	ldr.w	pc, [sp], #8
   8349e:	bf00      	nop

000834a0 <__aeabi_dcmple>:
   834a0:	f84d ed08 	str.w	lr, [sp, #-8]!
   834a4:	f7ff ffe0 	bl	83468 <__aeabi_cdcmpeq>
   834a8:	bf94      	ite	ls
   834aa:	2001      	movls	r0, #1
   834ac:	2000      	movhi	r0, #0
   834ae:	f85d fb08 	ldr.w	pc, [sp], #8
   834b2:	bf00      	nop

000834b4 <__aeabi_dcmpge>:
   834b4:	f84d ed08 	str.w	lr, [sp, #-8]!
   834b8:	f7ff ffce 	bl	83458 <__aeabi_cdrcmple>
   834bc:	bf94      	ite	ls
   834be:	2001      	movls	r0, #1
   834c0:	2000      	movhi	r0, #0
   834c2:	f85d fb08 	ldr.w	pc, [sp], #8
   834c6:	bf00      	nop

000834c8 <__aeabi_dcmpgt>:
   834c8:	f84d ed08 	str.w	lr, [sp, #-8]!
   834cc:	f7ff ffc4 	bl	83458 <__aeabi_cdrcmple>
   834d0:	bf34      	ite	cc
   834d2:	2001      	movcc	r0, #1
   834d4:	2000      	movcs	r0, #0
   834d6:	f85d fb08 	ldr.w	pc, [sp], #8
   834da:	bf00      	nop

000834dc <__aeabi_d2iz>:
   834dc:	ea4f 0241 	mov.w	r2, r1, lsl #1
   834e0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   834e4:	d215      	bcs.n	83512 <__aeabi_d2iz+0x36>
   834e6:	d511      	bpl.n	8350c <__aeabi_d2iz+0x30>
   834e8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   834ec:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   834f0:	d912      	bls.n	83518 <__aeabi_d2iz+0x3c>
   834f2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   834f6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   834fa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   834fe:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   83502:	fa23 f002 	lsr.w	r0, r3, r2
   83506:	bf18      	it	ne
   83508:	4240      	negne	r0, r0
   8350a:	4770      	bx	lr
   8350c:	f04f 0000 	mov.w	r0, #0
   83510:	4770      	bx	lr
   83512:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   83516:	d105      	bne.n	83524 <__aeabi_d2iz+0x48>
   83518:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   8351c:	bf08      	it	eq
   8351e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   83522:	4770      	bx	lr
   83524:	f04f 0000 	mov.w	r0, #0
   83528:	4770      	bx	lr
   8352a:	bf00      	nop

0008352c <__aeabi_d2f>:
   8352c:	ea4f 0241 	mov.w	r2, r1, lsl #1
   83530:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   83534:	bf24      	itt	cs
   83536:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   8353a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   8353e:	d90d      	bls.n	8355c <__aeabi_d2f+0x30>
   83540:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   83544:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   83548:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   8354c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   83550:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   83554:	bf08      	it	eq
   83556:	f020 0001 	biceq.w	r0, r0, #1
   8355a:	4770      	bx	lr
   8355c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   83560:	d121      	bne.n	835a6 <__aeabi_d2f+0x7a>
   83562:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   83566:	bfbc      	itt	lt
   83568:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   8356c:	4770      	bxlt	lr
   8356e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   83572:	ea4f 5252 	mov.w	r2, r2, lsr #21
   83576:	f1c2 0218 	rsb	r2, r2, #24
   8357a:	f1c2 0c20 	rsb	ip, r2, #32
   8357e:	fa10 f30c 	lsls.w	r3, r0, ip
   83582:	fa20 f002 	lsr.w	r0, r0, r2
   83586:	bf18      	it	ne
   83588:	f040 0001 	orrne.w	r0, r0, #1
   8358c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   83590:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   83594:	fa03 fc0c 	lsl.w	ip, r3, ip
   83598:	ea40 000c 	orr.w	r0, r0, ip
   8359c:	fa23 f302 	lsr.w	r3, r3, r2
   835a0:	ea4f 0343 	mov.w	r3, r3, lsl #1
   835a4:	e7cc      	b.n	83540 <__aeabi_d2f+0x14>
   835a6:	ea7f 5362 	mvns.w	r3, r2, asr #21
   835aa:	d107      	bne.n	835bc <__aeabi_d2f+0x90>
   835ac:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   835b0:	bf1e      	ittt	ne
   835b2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   835b6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   835ba:	4770      	bxne	lr
   835bc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   835c0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   835c4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   835c8:	4770      	bx	lr
   835ca:	bf00      	nop

000835cc <__aeabi_frsub>:
   835cc:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
   835d0:	e002      	b.n	835d8 <__addsf3>
   835d2:	bf00      	nop

000835d4 <__aeabi_fsub>:
   835d4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

000835d8 <__addsf3>:
   835d8:	0042      	lsls	r2, r0, #1
   835da:	bf1f      	itttt	ne
   835dc:	ea5f 0341 	movsne.w	r3, r1, lsl #1
   835e0:	ea92 0f03 	teqne	r2, r3
   835e4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
   835e8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   835ec:	d06a      	beq.n	836c4 <__addsf3+0xec>
   835ee:	ea4f 6212 	mov.w	r2, r2, lsr #24
   835f2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
   835f6:	bfc1      	itttt	gt
   835f8:	18d2      	addgt	r2, r2, r3
   835fa:	4041      	eorgt	r1, r0
   835fc:	4048      	eorgt	r0, r1
   835fe:	4041      	eorgt	r1, r0
   83600:	bfb8      	it	lt
   83602:	425b      	neglt	r3, r3
   83604:	2b19      	cmp	r3, #25
   83606:	bf88      	it	hi
   83608:	4770      	bxhi	lr
   8360a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   8360e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   83612:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   83616:	bf18      	it	ne
   83618:	4240      	negne	r0, r0
   8361a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   8361e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
   83622:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   83626:	bf18      	it	ne
   83628:	4249      	negne	r1, r1
   8362a:	ea92 0f03 	teq	r2, r3
   8362e:	d03f      	beq.n	836b0 <__addsf3+0xd8>
   83630:	f1a2 0201 	sub.w	r2, r2, #1
   83634:	fa41 fc03 	asr.w	ip, r1, r3
   83638:	eb10 000c 	adds.w	r0, r0, ip
   8363c:	f1c3 0320 	rsb	r3, r3, #32
   83640:	fa01 f103 	lsl.w	r1, r1, r3
   83644:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   83648:	d502      	bpl.n	83650 <__addsf3+0x78>
   8364a:	4249      	negs	r1, r1
   8364c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
   83650:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   83654:	d313      	bcc.n	8367e <__addsf3+0xa6>
   83656:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
   8365a:	d306      	bcc.n	8366a <__addsf3+0x92>
   8365c:	0840      	lsrs	r0, r0, #1
   8365e:	ea4f 0131 	mov.w	r1, r1, rrx
   83662:	f102 0201 	add.w	r2, r2, #1
   83666:	2afe      	cmp	r2, #254	; 0xfe
   83668:	d251      	bcs.n	8370e <__addsf3+0x136>
   8366a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
   8366e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   83672:	bf08      	it	eq
   83674:	f020 0001 	biceq.w	r0, r0, #1
   83678:	ea40 0003 	orr.w	r0, r0, r3
   8367c:	4770      	bx	lr
   8367e:	0049      	lsls	r1, r1, #1
   83680:	eb40 0000 	adc.w	r0, r0, r0
   83684:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
   83688:	f1a2 0201 	sub.w	r2, r2, #1
   8368c:	d1ed      	bne.n	8366a <__addsf3+0x92>
   8368e:	fab0 fc80 	clz	ip, r0
   83692:	f1ac 0c08 	sub.w	ip, ip, #8
   83696:	ebb2 020c 	subs.w	r2, r2, ip
   8369a:	fa00 f00c 	lsl.w	r0, r0, ip
   8369e:	bfaa      	itet	ge
   836a0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
   836a4:	4252      	neglt	r2, r2
   836a6:	4318      	orrge	r0, r3
   836a8:	bfbc      	itt	lt
   836aa:	40d0      	lsrlt	r0, r2
   836ac:	4318      	orrlt	r0, r3
   836ae:	4770      	bx	lr
   836b0:	f092 0f00 	teq	r2, #0
   836b4:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
   836b8:	bf06      	itte	eq
   836ba:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
   836be:	3201      	addeq	r2, #1
   836c0:	3b01      	subne	r3, #1
   836c2:	e7b5      	b.n	83630 <__addsf3+0x58>
   836c4:	ea4f 0341 	mov.w	r3, r1, lsl #1
   836c8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   836cc:	bf18      	it	ne
   836ce:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   836d2:	d021      	beq.n	83718 <__addsf3+0x140>
   836d4:	ea92 0f03 	teq	r2, r3
   836d8:	d004      	beq.n	836e4 <__addsf3+0x10c>
   836da:	f092 0f00 	teq	r2, #0
   836de:	bf08      	it	eq
   836e0:	4608      	moveq	r0, r1
   836e2:	4770      	bx	lr
   836e4:	ea90 0f01 	teq	r0, r1
   836e8:	bf1c      	itt	ne
   836ea:	2000      	movne	r0, #0
   836ec:	4770      	bxne	lr
   836ee:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
   836f2:	d104      	bne.n	836fe <__addsf3+0x126>
   836f4:	0040      	lsls	r0, r0, #1
   836f6:	bf28      	it	cs
   836f8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
   836fc:	4770      	bx	lr
   836fe:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
   83702:	bf3c      	itt	cc
   83704:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
   83708:	4770      	bxcc	lr
   8370a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   8370e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
   83712:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   83716:	4770      	bx	lr
   83718:	ea7f 6222 	mvns.w	r2, r2, asr #24
   8371c:	bf16      	itet	ne
   8371e:	4608      	movne	r0, r1
   83720:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
   83724:	4601      	movne	r1, r0
   83726:	0242      	lsls	r2, r0, #9
   83728:	bf06      	itte	eq
   8372a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
   8372e:	ea90 0f01 	teqeq	r0, r1
   83732:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
   83736:	4770      	bx	lr

00083738 <__aeabi_ui2f>:
   83738:	f04f 0300 	mov.w	r3, #0
   8373c:	e004      	b.n	83748 <__aeabi_i2f+0x8>
   8373e:	bf00      	nop

00083740 <__aeabi_i2f>:
   83740:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
   83744:	bf48      	it	mi
   83746:	4240      	negmi	r0, r0
   83748:	ea5f 0c00 	movs.w	ip, r0
   8374c:	bf08      	it	eq
   8374e:	4770      	bxeq	lr
   83750:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
   83754:	4601      	mov	r1, r0
   83756:	f04f 0000 	mov.w	r0, #0
   8375a:	e01c      	b.n	83796 <__aeabi_l2f+0x2a>

0008375c <__aeabi_ul2f>:
   8375c:	ea50 0201 	orrs.w	r2, r0, r1
   83760:	bf08      	it	eq
   83762:	4770      	bxeq	lr
   83764:	f04f 0300 	mov.w	r3, #0
   83768:	e00a      	b.n	83780 <__aeabi_l2f+0x14>
   8376a:	bf00      	nop

0008376c <__aeabi_l2f>:
   8376c:	ea50 0201 	orrs.w	r2, r0, r1
   83770:	bf08      	it	eq
   83772:	4770      	bxeq	lr
   83774:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
   83778:	d502      	bpl.n	83780 <__aeabi_l2f+0x14>
   8377a:	4240      	negs	r0, r0
   8377c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   83780:	ea5f 0c01 	movs.w	ip, r1
   83784:	bf02      	ittt	eq
   83786:	4684      	moveq	ip, r0
   83788:	4601      	moveq	r1, r0
   8378a:	2000      	moveq	r0, #0
   8378c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
   83790:	bf08      	it	eq
   83792:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
   83796:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
   8379a:	fabc f28c 	clz	r2, ip
   8379e:	3a08      	subs	r2, #8
   837a0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
   837a4:	db10      	blt.n	837c8 <__aeabi_l2f+0x5c>
   837a6:	fa01 fc02 	lsl.w	ip, r1, r2
   837aa:	4463      	add	r3, ip
   837ac:	fa00 fc02 	lsl.w	ip, r0, r2
   837b0:	f1c2 0220 	rsb	r2, r2, #32
   837b4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   837b8:	fa20 f202 	lsr.w	r2, r0, r2
   837bc:	eb43 0002 	adc.w	r0, r3, r2
   837c0:	bf08      	it	eq
   837c2:	f020 0001 	biceq.w	r0, r0, #1
   837c6:	4770      	bx	lr
   837c8:	f102 0220 	add.w	r2, r2, #32
   837cc:	fa01 fc02 	lsl.w	ip, r1, r2
   837d0:	f1c2 0220 	rsb	r2, r2, #32
   837d4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
   837d8:	fa21 f202 	lsr.w	r2, r1, r2
   837dc:	eb43 0002 	adc.w	r0, r3, r2
   837e0:	bf08      	it	eq
   837e2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   837e6:	4770      	bx	lr

000837e8 <__gesf2>:
   837e8:	f04f 3cff 	mov.w	ip, #4294967295
   837ec:	e006      	b.n	837fc <__cmpsf2+0x4>
   837ee:	bf00      	nop

000837f0 <__lesf2>:
   837f0:	f04f 0c01 	mov.w	ip, #1
   837f4:	e002      	b.n	837fc <__cmpsf2+0x4>
   837f6:	bf00      	nop

000837f8 <__cmpsf2>:
   837f8:	f04f 0c01 	mov.w	ip, #1
   837fc:	f84d cd04 	str.w	ip, [sp, #-4]!
   83800:	ea4f 0240 	mov.w	r2, r0, lsl #1
   83804:	ea4f 0341 	mov.w	r3, r1, lsl #1
   83808:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   8380c:	bf18      	it	ne
   8380e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   83812:	d011      	beq.n	83838 <__cmpsf2+0x40>
   83814:	b001      	add	sp, #4
   83816:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
   8381a:	bf18      	it	ne
   8381c:	ea90 0f01 	teqne	r0, r1
   83820:	bf58      	it	pl
   83822:	ebb2 0003 	subspl.w	r0, r2, r3
   83826:	bf88      	it	hi
   83828:	17c8      	asrhi	r0, r1, #31
   8382a:	bf38      	it	cc
   8382c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
   83830:	bf18      	it	ne
   83832:	f040 0001 	orrne.w	r0, r0, #1
   83836:	4770      	bx	lr
   83838:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   8383c:	d102      	bne.n	83844 <__cmpsf2+0x4c>
   8383e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
   83842:	d105      	bne.n	83850 <__cmpsf2+0x58>
   83844:	ea7f 6c23 	mvns.w	ip, r3, asr #24
   83848:	d1e4      	bne.n	83814 <__cmpsf2+0x1c>
   8384a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
   8384e:	d0e1      	beq.n	83814 <__cmpsf2+0x1c>
   83850:	f85d 0b04 	ldr.w	r0, [sp], #4
   83854:	4770      	bx	lr
   83856:	bf00      	nop

00083858 <__aeabi_cfrcmple>:
   83858:	4684      	mov	ip, r0
   8385a:	4608      	mov	r0, r1
   8385c:	4661      	mov	r1, ip
   8385e:	e7ff      	b.n	83860 <__aeabi_cfcmpeq>

00083860 <__aeabi_cfcmpeq>:
   83860:	b50f      	push	{r0, r1, r2, r3, lr}
   83862:	f7ff ffc9 	bl	837f8 <__cmpsf2>
   83866:	2800      	cmp	r0, #0
   83868:	bf48      	it	mi
   8386a:	f110 0f00 	cmnmi.w	r0, #0
   8386e:	bd0f      	pop	{r0, r1, r2, r3, pc}

00083870 <__aeabi_fcmpeq>:
   83870:	f84d ed08 	str.w	lr, [sp, #-8]!
   83874:	f7ff fff4 	bl	83860 <__aeabi_cfcmpeq>
   83878:	bf0c      	ite	eq
   8387a:	2001      	moveq	r0, #1
   8387c:	2000      	movne	r0, #0
   8387e:	f85d fb08 	ldr.w	pc, [sp], #8
   83882:	bf00      	nop

00083884 <__aeabi_fcmplt>:
   83884:	f84d ed08 	str.w	lr, [sp, #-8]!
   83888:	f7ff ffea 	bl	83860 <__aeabi_cfcmpeq>
   8388c:	bf34      	ite	cc
   8388e:	2001      	movcc	r0, #1
   83890:	2000      	movcs	r0, #0
   83892:	f85d fb08 	ldr.w	pc, [sp], #8
   83896:	bf00      	nop

00083898 <__aeabi_fcmple>:
   83898:	f84d ed08 	str.w	lr, [sp, #-8]!
   8389c:	f7ff ffe0 	bl	83860 <__aeabi_cfcmpeq>
   838a0:	bf94      	ite	ls
   838a2:	2001      	movls	r0, #1
   838a4:	2000      	movhi	r0, #0
   838a6:	f85d fb08 	ldr.w	pc, [sp], #8
   838aa:	bf00      	nop

000838ac <__aeabi_fcmpge>:
   838ac:	f84d ed08 	str.w	lr, [sp, #-8]!
   838b0:	f7ff ffd2 	bl	83858 <__aeabi_cfrcmple>
   838b4:	bf94      	ite	ls
   838b6:	2001      	movls	r0, #1
   838b8:	2000      	movhi	r0, #0
   838ba:	f85d fb08 	ldr.w	pc, [sp], #8
   838be:	bf00      	nop

000838c0 <__aeabi_fcmpgt>:
   838c0:	f84d ed08 	str.w	lr, [sp, #-8]!
   838c4:	f7ff ffc8 	bl	83858 <__aeabi_cfrcmple>
   838c8:	bf34      	ite	cc
   838ca:	2001      	movcc	r0, #1
   838cc:	2000      	movcs	r0, #0
   838ce:	f85d fb08 	ldr.w	pc, [sp], #8
   838d2:	bf00      	nop

000838d4 <__libc_init_array>:
   838d4:	b570      	push	{r4, r5, r6, lr}
   838d6:	4e0f      	ldr	r6, [pc, #60]	; (83914 <__libc_init_array+0x40>)
   838d8:	4d0f      	ldr	r5, [pc, #60]	; (83918 <__libc_init_array+0x44>)
   838da:	1b76      	subs	r6, r6, r5
   838dc:	10b6      	asrs	r6, r6, #2
   838de:	bf18      	it	ne
   838e0:	2400      	movne	r4, #0
   838e2:	d005      	beq.n	838f0 <__libc_init_array+0x1c>
   838e4:	3401      	adds	r4, #1
   838e6:	f855 3b04 	ldr.w	r3, [r5], #4
   838ea:	4798      	blx	r3
   838ec:	42a6      	cmp	r6, r4
   838ee:	d1f9      	bne.n	838e4 <__libc_init_array+0x10>
   838f0:	4e0a      	ldr	r6, [pc, #40]	; (8391c <__libc_init_array+0x48>)
   838f2:	4d0b      	ldr	r5, [pc, #44]	; (83920 <__libc_init_array+0x4c>)
   838f4:	f003 f8a0 	bl	86a38 <_init>
   838f8:	1b76      	subs	r6, r6, r5
   838fa:	10b6      	asrs	r6, r6, #2
   838fc:	bf18      	it	ne
   838fe:	2400      	movne	r4, #0
   83900:	d006      	beq.n	83910 <__libc_init_array+0x3c>
   83902:	3401      	adds	r4, #1
   83904:	f855 3b04 	ldr.w	r3, [r5], #4
   83908:	4798      	blx	r3
   8390a:	42a6      	cmp	r6, r4
   8390c:	d1f9      	bne.n	83902 <__libc_init_array+0x2e>
   8390e:	bd70      	pop	{r4, r5, r6, pc}
   83910:	bd70      	pop	{r4, r5, r6, pc}
   83912:	bf00      	nop
   83914:	00086a44 	.word	0x00086a44
   83918:	00086a44 	.word	0x00086a44
   8391c:	00086a4c 	.word	0x00086a4c
   83920:	00086a44 	.word	0x00086a44

00083924 <iprintf>:
   83924:	b40f      	push	{r0, r1, r2, r3}
   83926:	b510      	push	{r4, lr}
   83928:	4b07      	ldr	r3, [pc, #28]	; (83948 <iprintf+0x24>)
   8392a:	b082      	sub	sp, #8
   8392c:	ac04      	add	r4, sp, #16
   8392e:	f854 2b04 	ldr.w	r2, [r4], #4
   83932:	6818      	ldr	r0, [r3, #0]
   83934:	4623      	mov	r3, r4
   83936:	6881      	ldr	r1, [r0, #8]
   83938:	9401      	str	r4, [sp, #4]
   8393a:	f000 f9ed 	bl	83d18 <_vfiprintf_r>
   8393e:	b002      	add	sp, #8
   83940:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   83944:	b004      	add	sp, #16
   83946:	4770      	bx	lr
   83948:	20070580 	.word	0x20070580

0008394c <memcpy>:
   8394c:	4684      	mov	ip, r0
   8394e:	ea41 0300 	orr.w	r3, r1, r0
   83952:	f013 0303 	ands.w	r3, r3, #3
   83956:	d149      	bne.n	839ec <memcpy+0xa0>
   83958:	3a40      	subs	r2, #64	; 0x40
   8395a:	d323      	bcc.n	839a4 <memcpy+0x58>
   8395c:	680b      	ldr	r3, [r1, #0]
   8395e:	6003      	str	r3, [r0, #0]
   83960:	684b      	ldr	r3, [r1, #4]
   83962:	6043      	str	r3, [r0, #4]
   83964:	688b      	ldr	r3, [r1, #8]
   83966:	6083      	str	r3, [r0, #8]
   83968:	68cb      	ldr	r3, [r1, #12]
   8396a:	60c3      	str	r3, [r0, #12]
   8396c:	690b      	ldr	r3, [r1, #16]
   8396e:	6103      	str	r3, [r0, #16]
   83970:	694b      	ldr	r3, [r1, #20]
   83972:	6143      	str	r3, [r0, #20]
   83974:	698b      	ldr	r3, [r1, #24]
   83976:	6183      	str	r3, [r0, #24]
   83978:	69cb      	ldr	r3, [r1, #28]
   8397a:	61c3      	str	r3, [r0, #28]
   8397c:	6a0b      	ldr	r3, [r1, #32]
   8397e:	6203      	str	r3, [r0, #32]
   83980:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   83982:	6243      	str	r3, [r0, #36]	; 0x24
   83984:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   83986:	6283      	str	r3, [r0, #40]	; 0x28
   83988:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   8398a:	62c3      	str	r3, [r0, #44]	; 0x2c
   8398c:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   8398e:	6303      	str	r3, [r0, #48]	; 0x30
   83990:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   83992:	6343      	str	r3, [r0, #52]	; 0x34
   83994:	6b8b      	ldr	r3, [r1, #56]	; 0x38
   83996:	6383      	str	r3, [r0, #56]	; 0x38
   83998:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   8399a:	63c3      	str	r3, [r0, #60]	; 0x3c
   8399c:	3040      	adds	r0, #64	; 0x40
   8399e:	3140      	adds	r1, #64	; 0x40
   839a0:	3a40      	subs	r2, #64	; 0x40
   839a2:	d2db      	bcs.n	8395c <memcpy+0x10>
   839a4:	3230      	adds	r2, #48	; 0x30
   839a6:	d30b      	bcc.n	839c0 <memcpy+0x74>
   839a8:	680b      	ldr	r3, [r1, #0]
   839aa:	6003      	str	r3, [r0, #0]
   839ac:	684b      	ldr	r3, [r1, #4]
   839ae:	6043      	str	r3, [r0, #4]
   839b0:	688b      	ldr	r3, [r1, #8]
   839b2:	6083      	str	r3, [r0, #8]
   839b4:	68cb      	ldr	r3, [r1, #12]
   839b6:	60c3      	str	r3, [r0, #12]
   839b8:	3010      	adds	r0, #16
   839ba:	3110      	adds	r1, #16
   839bc:	3a10      	subs	r2, #16
   839be:	d2f3      	bcs.n	839a8 <memcpy+0x5c>
   839c0:	320c      	adds	r2, #12
   839c2:	d305      	bcc.n	839d0 <memcpy+0x84>
   839c4:	f851 3b04 	ldr.w	r3, [r1], #4
   839c8:	f840 3b04 	str.w	r3, [r0], #4
   839cc:	3a04      	subs	r2, #4
   839ce:	d2f9      	bcs.n	839c4 <memcpy+0x78>
   839d0:	3204      	adds	r2, #4
   839d2:	d008      	beq.n	839e6 <memcpy+0x9a>
   839d4:	07d2      	lsls	r2, r2, #31
   839d6:	bf1c      	itt	ne
   839d8:	f811 3b01 	ldrbne.w	r3, [r1], #1
   839dc:	f800 3b01 	strbne.w	r3, [r0], #1
   839e0:	d301      	bcc.n	839e6 <memcpy+0x9a>
   839e2:	880b      	ldrh	r3, [r1, #0]
   839e4:	8003      	strh	r3, [r0, #0]
   839e6:	4660      	mov	r0, ip
   839e8:	4770      	bx	lr
   839ea:	bf00      	nop
   839ec:	2a08      	cmp	r2, #8
   839ee:	d313      	bcc.n	83a18 <memcpy+0xcc>
   839f0:	078b      	lsls	r3, r1, #30
   839f2:	d0b1      	beq.n	83958 <memcpy+0xc>
   839f4:	f010 0303 	ands.w	r3, r0, #3
   839f8:	d0ae      	beq.n	83958 <memcpy+0xc>
   839fa:	f1c3 0304 	rsb	r3, r3, #4
   839fe:	1ad2      	subs	r2, r2, r3
   83a00:	07db      	lsls	r3, r3, #31
   83a02:	bf1c      	itt	ne
   83a04:	f811 3b01 	ldrbne.w	r3, [r1], #1
   83a08:	f800 3b01 	strbne.w	r3, [r0], #1
   83a0c:	d3a4      	bcc.n	83958 <memcpy+0xc>
   83a0e:	f831 3b02 	ldrh.w	r3, [r1], #2
   83a12:	f820 3b02 	strh.w	r3, [r0], #2
   83a16:	e79f      	b.n	83958 <memcpy+0xc>
   83a18:	3a04      	subs	r2, #4
   83a1a:	d3d9      	bcc.n	839d0 <memcpy+0x84>
   83a1c:	3a01      	subs	r2, #1
   83a1e:	f811 3b01 	ldrb.w	r3, [r1], #1
   83a22:	f800 3b01 	strb.w	r3, [r0], #1
   83a26:	d2f9      	bcs.n	83a1c <memcpy+0xd0>
   83a28:	780b      	ldrb	r3, [r1, #0]
   83a2a:	7003      	strb	r3, [r0, #0]
   83a2c:	784b      	ldrb	r3, [r1, #1]
   83a2e:	7043      	strb	r3, [r0, #1]
   83a30:	788b      	ldrb	r3, [r1, #2]
   83a32:	7083      	strb	r3, [r0, #2]
   83a34:	4660      	mov	r0, ip
   83a36:	4770      	bx	lr

00083a38 <memset>:
   83a38:	b470      	push	{r4, r5, r6}
   83a3a:	0784      	lsls	r4, r0, #30
   83a3c:	d046      	beq.n	83acc <memset+0x94>
   83a3e:	1e54      	subs	r4, r2, #1
   83a40:	2a00      	cmp	r2, #0
   83a42:	d041      	beq.n	83ac8 <memset+0x90>
   83a44:	b2cd      	uxtb	r5, r1
   83a46:	4603      	mov	r3, r0
   83a48:	e002      	b.n	83a50 <memset+0x18>
   83a4a:	1e62      	subs	r2, r4, #1
   83a4c:	b3e4      	cbz	r4, 83ac8 <memset+0x90>
   83a4e:	4614      	mov	r4, r2
   83a50:	f803 5b01 	strb.w	r5, [r3], #1
   83a54:	079a      	lsls	r2, r3, #30
   83a56:	d1f8      	bne.n	83a4a <memset+0x12>
   83a58:	2c03      	cmp	r4, #3
   83a5a:	d92e      	bls.n	83aba <memset+0x82>
   83a5c:	b2cd      	uxtb	r5, r1
   83a5e:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   83a62:	2c0f      	cmp	r4, #15
   83a64:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   83a68:	d919      	bls.n	83a9e <memset+0x66>
   83a6a:	4626      	mov	r6, r4
   83a6c:	f103 0210 	add.w	r2, r3, #16
   83a70:	3e10      	subs	r6, #16
   83a72:	2e0f      	cmp	r6, #15
   83a74:	f842 5c10 	str.w	r5, [r2, #-16]
   83a78:	f842 5c0c 	str.w	r5, [r2, #-12]
   83a7c:	f842 5c08 	str.w	r5, [r2, #-8]
   83a80:	f842 5c04 	str.w	r5, [r2, #-4]
   83a84:	f102 0210 	add.w	r2, r2, #16
   83a88:	d8f2      	bhi.n	83a70 <memset+0x38>
   83a8a:	f1a4 0210 	sub.w	r2, r4, #16
   83a8e:	f022 020f 	bic.w	r2, r2, #15
   83a92:	f004 040f 	and.w	r4, r4, #15
   83a96:	3210      	adds	r2, #16
   83a98:	2c03      	cmp	r4, #3
   83a9a:	4413      	add	r3, r2
   83a9c:	d90d      	bls.n	83aba <memset+0x82>
   83a9e:	461e      	mov	r6, r3
   83aa0:	4622      	mov	r2, r4
   83aa2:	3a04      	subs	r2, #4
   83aa4:	2a03      	cmp	r2, #3
   83aa6:	f846 5b04 	str.w	r5, [r6], #4
   83aaa:	d8fa      	bhi.n	83aa2 <memset+0x6a>
   83aac:	1f22      	subs	r2, r4, #4
   83aae:	f022 0203 	bic.w	r2, r2, #3
   83ab2:	3204      	adds	r2, #4
   83ab4:	4413      	add	r3, r2
   83ab6:	f004 0403 	and.w	r4, r4, #3
   83aba:	b12c      	cbz	r4, 83ac8 <memset+0x90>
   83abc:	b2c9      	uxtb	r1, r1
   83abe:	441c      	add	r4, r3
   83ac0:	f803 1b01 	strb.w	r1, [r3], #1
   83ac4:	42a3      	cmp	r3, r4
   83ac6:	d1fb      	bne.n	83ac0 <memset+0x88>
   83ac8:	bc70      	pop	{r4, r5, r6}
   83aca:	4770      	bx	lr
   83acc:	4614      	mov	r4, r2
   83ace:	4603      	mov	r3, r0
   83ad0:	e7c2      	b.n	83a58 <memset+0x20>
   83ad2:	bf00      	nop

00083ad4 <setbuf>:
   83ad4:	2900      	cmp	r1, #0
   83ad6:	bf0c      	ite	eq
   83ad8:	2202      	moveq	r2, #2
   83ada:	2200      	movne	r2, #0
   83adc:	f44f 6380 	mov.w	r3, #1024	; 0x400
   83ae0:	f000 b800 	b.w	83ae4 <setvbuf>

00083ae4 <setvbuf>:
   83ae4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   83ae8:	4d3a      	ldr	r5, [pc, #232]	; (83bd4 <setvbuf+0xf0>)
   83aea:	4604      	mov	r4, r0
   83aec:	682e      	ldr	r6, [r5, #0]
   83aee:	4690      	mov	r8, r2
   83af0:	460d      	mov	r5, r1
   83af2:	461f      	mov	r7, r3
   83af4:	b116      	cbz	r6, 83afc <setvbuf+0x18>
   83af6:	6bb3      	ldr	r3, [r6, #56]	; 0x38
   83af8:	2b00      	cmp	r3, #0
   83afa:	d03c      	beq.n	83b76 <setvbuf+0x92>
   83afc:	f1b8 0f02 	cmp.w	r8, #2
   83b00:	d82f      	bhi.n	83b62 <setvbuf+0x7e>
   83b02:	2f00      	cmp	r7, #0
   83b04:	db2d      	blt.n	83b62 <setvbuf+0x7e>
   83b06:	4621      	mov	r1, r4
   83b08:	4630      	mov	r0, r6
   83b0a:	f001 f861 	bl	84bd0 <_fflush_r>
   83b0e:	89a1      	ldrh	r1, [r4, #12]
   83b10:	2300      	movs	r3, #0
   83b12:	6063      	str	r3, [r4, #4]
   83b14:	61a3      	str	r3, [r4, #24]
   83b16:	060b      	lsls	r3, r1, #24
   83b18:	d427      	bmi.n	83b6a <setvbuf+0x86>
   83b1a:	f021 0183 	bic.w	r1, r1, #131	; 0x83
   83b1e:	b289      	uxth	r1, r1
   83b20:	f1b8 0f02 	cmp.w	r8, #2
   83b24:	81a1      	strh	r1, [r4, #12]
   83b26:	d02a      	beq.n	83b7e <setvbuf+0x9a>
   83b28:	2d00      	cmp	r5, #0
   83b2a:	d036      	beq.n	83b9a <setvbuf+0xb6>
   83b2c:	f1b8 0f01 	cmp.w	r8, #1
   83b30:	d011      	beq.n	83b56 <setvbuf+0x72>
   83b32:	b289      	uxth	r1, r1
   83b34:	f001 0008 	and.w	r0, r1, #8
   83b38:	4b27      	ldr	r3, [pc, #156]	; (83bd8 <setvbuf+0xf4>)
   83b3a:	b280      	uxth	r0, r0
   83b3c:	63f3      	str	r3, [r6, #60]	; 0x3c
   83b3e:	6025      	str	r5, [r4, #0]
   83b40:	6125      	str	r5, [r4, #16]
   83b42:	6167      	str	r7, [r4, #20]
   83b44:	b178      	cbz	r0, 83b66 <setvbuf+0x82>
   83b46:	f011 0f03 	tst.w	r1, #3
   83b4a:	bf18      	it	ne
   83b4c:	2700      	movne	r7, #0
   83b4e:	2000      	movs	r0, #0
   83b50:	60a7      	str	r7, [r4, #8]
   83b52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   83b56:	f041 0101 	orr.w	r1, r1, #1
   83b5a:	427b      	negs	r3, r7
   83b5c:	81a1      	strh	r1, [r4, #12]
   83b5e:	61a3      	str	r3, [r4, #24]
   83b60:	e7e7      	b.n	83b32 <setvbuf+0x4e>
   83b62:	f04f 30ff 	mov.w	r0, #4294967295
   83b66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   83b6a:	6921      	ldr	r1, [r4, #16]
   83b6c:	4630      	mov	r0, r6
   83b6e:	f001 f99b 	bl	84ea8 <_free_r>
   83b72:	89a1      	ldrh	r1, [r4, #12]
   83b74:	e7d1      	b.n	83b1a <setvbuf+0x36>
   83b76:	4630      	mov	r0, r6
   83b78:	f001 f8be 	bl	84cf8 <__sinit>
   83b7c:	e7be      	b.n	83afc <setvbuf+0x18>
   83b7e:	2000      	movs	r0, #0
   83b80:	f104 0343 	add.w	r3, r4, #67	; 0x43
   83b84:	f041 0102 	orr.w	r1, r1, #2
   83b88:	2500      	movs	r5, #0
   83b8a:	2201      	movs	r2, #1
   83b8c:	81a1      	strh	r1, [r4, #12]
   83b8e:	60a5      	str	r5, [r4, #8]
   83b90:	6023      	str	r3, [r4, #0]
   83b92:	6123      	str	r3, [r4, #16]
   83b94:	6162      	str	r2, [r4, #20]
   83b96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   83b9a:	2f00      	cmp	r7, #0
   83b9c:	bf08      	it	eq
   83b9e:	f44f 6780 	moveq.w	r7, #1024	; 0x400
   83ba2:	4638      	mov	r0, r7
   83ba4:	f001 fc8a 	bl	854bc <malloc>
   83ba8:	4605      	mov	r5, r0
   83baa:	b128      	cbz	r0, 83bb8 <setvbuf+0xd4>
   83bac:	89a1      	ldrh	r1, [r4, #12]
   83bae:	f041 0180 	orr.w	r1, r1, #128	; 0x80
   83bb2:	b289      	uxth	r1, r1
   83bb4:	81a1      	strh	r1, [r4, #12]
   83bb6:	e7b9      	b.n	83b2c <setvbuf+0x48>
   83bb8:	f44f 6080 	mov.w	r0, #1024	; 0x400
   83bbc:	f001 fc7e 	bl	854bc <malloc>
   83bc0:	4605      	mov	r5, r0
   83bc2:	b918      	cbnz	r0, 83bcc <setvbuf+0xe8>
   83bc4:	89a1      	ldrh	r1, [r4, #12]
   83bc6:	f04f 30ff 	mov.w	r0, #4294967295
   83bca:	e7d9      	b.n	83b80 <setvbuf+0x9c>
   83bcc:	f44f 6780 	mov.w	r7, #1024	; 0x400
   83bd0:	e7ec      	b.n	83bac <setvbuf+0xc8>
   83bd2:	bf00      	nop
   83bd4:	20070580 	.word	0x20070580
   83bd8:	00084bfd 	.word	0x00084bfd

00083bdc <strlen>:
   83bdc:	f020 0103 	bic.w	r1, r0, #3
   83be0:	f010 0003 	ands.w	r0, r0, #3
   83be4:	f1c0 0000 	rsb	r0, r0, #0
   83be8:	f851 3b04 	ldr.w	r3, [r1], #4
   83bec:	f100 0c04 	add.w	ip, r0, #4
   83bf0:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
   83bf4:	f06f 0200 	mvn.w	r2, #0
   83bf8:	bf1c      	itt	ne
   83bfa:	fa22 f20c 	lsrne.w	r2, r2, ip
   83bfe:	4313      	orrne	r3, r2
   83c00:	f04f 0c01 	mov.w	ip, #1
   83c04:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
   83c08:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
   83c0c:	eba3 020c 	sub.w	r2, r3, ip
   83c10:	ea22 0203 	bic.w	r2, r2, r3
   83c14:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
   83c18:	bf04      	itt	eq
   83c1a:	f851 3b04 	ldreq.w	r3, [r1], #4
   83c1e:	3004      	addeq	r0, #4
   83c20:	d0f4      	beq.n	83c0c <strlen+0x30>
   83c22:	f1c2 0100 	rsb	r1, r2, #0
   83c26:	ea02 0201 	and.w	r2, r2, r1
   83c2a:	fab2 f282 	clz	r2, r2
   83c2e:	f1c2 021f 	rsb	r2, r2, #31
   83c32:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
   83c36:	4770      	bx	lr

00083c38 <strncpy>:
   83c38:	ea40 0301 	orr.w	r3, r0, r1
   83c3c:	079b      	lsls	r3, r3, #30
   83c3e:	b470      	push	{r4, r5, r6}
   83c40:	d12b      	bne.n	83c9a <strncpy+0x62>
   83c42:	2a03      	cmp	r2, #3
   83c44:	d929      	bls.n	83c9a <strncpy+0x62>
   83c46:	460c      	mov	r4, r1
   83c48:	4603      	mov	r3, r0
   83c4a:	4621      	mov	r1, r4
   83c4c:	f854 6b04 	ldr.w	r6, [r4], #4
   83c50:	f1a6 3501 	sub.w	r5, r6, #16843009	; 0x1010101
   83c54:	ea25 0506 	bic.w	r5, r5, r6
   83c58:	f015 3f80 	tst.w	r5, #2155905152	; 0x80808080
   83c5c:	d105      	bne.n	83c6a <strncpy+0x32>
   83c5e:	3a04      	subs	r2, #4
   83c60:	2a03      	cmp	r2, #3
   83c62:	f843 6b04 	str.w	r6, [r3], #4
   83c66:	4621      	mov	r1, r4
   83c68:	d8ef      	bhi.n	83c4a <strncpy+0x12>
   83c6a:	b1a2      	cbz	r2, 83c96 <strncpy+0x5e>
   83c6c:	780c      	ldrb	r4, [r1, #0]
   83c6e:	3a01      	subs	r2, #1
   83c70:	701c      	strb	r4, [r3, #0]
   83c72:	3101      	adds	r1, #1
   83c74:	3301      	adds	r3, #1
   83c76:	b13c      	cbz	r4, 83c88 <strncpy+0x50>
   83c78:	b16a      	cbz	r2, 83c96 <strncpy+0x5e>
   83c7a:	f811 4b01 	ldrb.w	r4, [r1], #1
   83c7e:	3a01      	subs	r2, #1
   83c80:	f803 4b01 	strb.w	r4, [r3], #1
   83c84:	2c00      	cmp	r4, #0
   83c86:	d1f7      	bne.n	83c78 <strncpy+0x40>
   83c88:	b12a      	cbz	r2, 83c96 <strncpy+0x5e>
   83c8a:	441a      	add	r2, r3
   83c8c:	2100      	movs	r1, #0
   83c8e:	f803 1b01 	strb.w	r1, [r3], #1
   83c92:	4293      	cmp	r3, r2
   83c94:	d1fb      	bne.n	83c8e <strncpy+0x56>
   83c96:	bc70      	pop	{r4, r5, r6}
   83c98:	4770      	bx	lr
   83c9a:	4603      	mov	r3, r0
   83c9c:	e7e5      	b.n	83c6a <strncpy+0x32>
   83c9e:	bf00      	nop

00083ca0 <__sprint_r.part.0>:
   83ca0:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   83ca2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   83ca6:	049c      	lsls	r4, r3, #18
   83ca8:	460f      	mov	r7, r1
   83caa:	4692      	mov	sl, r2
   83cac:	d52b      	bpl.n	83d06 <__sprint_r.part.0+0x66>
   83cae:	6893      	ldr	r3, [r2, #8]
   83cb0:	6812      	ldr	r2, [r2, #0]
   83cb2:	b333      	cbz	r3, 83d02 <__sprint_r.part.0+0x62>
   83cb4:	4680      	mov	r8, r0
   83cb6:	f102 0908 	add.w	r9, r2, #8
   83cba:	e919 0060 	ldmdb	r9, {r5, r6}
   83cbe:	08b6      	lsrs	r6, r6, #2
   83cc0:	d017      	beq.n	83cf2 <__sprint_r.part.0+0x52>
   83cc2:	3d04      	subs	r5, #4
   83cc4:	2400      	movs	r4, #0
   83cc6:	e001      	b.n	83ccc <__sprint_r.part.0+0x2c>
   83cc8:	42a6      	cmp	r6, r4
   83cca:	d010      	beq.n	83cee <__sprint_r.part.0+0x4e>
   83ccc:	4640      	mov	r0, r8
   83cce:	f855 1f04 	ldr.w	r1, [r5, #4]!
   83cd2:	463a      	mov	r2, r7
   83cd4:	f001 f888 	bl	84de8 <_fputwc_r>
   83cd8:	1c43      	adds	r3, r0, #1
   83cda:	f104 0401 	add.w	r4, r4, #1
   83cde:	d1f3      	bne.n	83cc8 <__sprint_r.part.0+0x28>
   83ce0:	2300      	movs	r3, #0
   83ce2:	f8ca 3008 	str.w	r3, [sl, #8]
   83ce6:	f8ca 3004 	str.w	r3, [sl, #4]
   83cea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   83cee:	f8da 3008 	ldr.w	r3, [sl, #8]
   83cf2:	eba3 0386 	sub.w	r3, r3, r6, lsl #2
   83cf6:	f8ca 3008 	str.w	r3, [sl, #8]
   83cfa:	f109 0908 	add.w	r9, r9, #8
   83cfe:	2b00      	cmp	r3, #0
   83d00:	d1db      	bne.n	83cba <__sprint_r.part.0+0x1a>
   83d02:	2000      	movs	r0, #0
   83d04:	e7ec      	b.n	83ce0 <__sprint_r.part.0+0x40>
   83d06:	f001 f9a7 	bl	85058 <__sfvwrite_r>
   83d0a:	2300      	movs	r3, #0
   83d0c:	f8ca 3008 	str.w	r3, [sl, #8]
   83d10:	f8ca 3004 	str.w	r3, [sl, #4]
   83d14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00083d18 <_vfiprintf_r>:
   83d18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   83d1c:	b0ab      	sub	sp, #172	; 0xac
   83d1e:	461c      	mov	r4, r3
   83d20:	9100      	str	r1, [sp, #0]
   83d22:	4693      	mov	fp, r2
   83d24:	9304      	str	r3, [sp, #16]
   83d26:	9001      	str	r0, [sp, #4]
   83d28:	b118      	cbz	r0, 83d32 <_vfiprintf_r+0x1a>
   83d2a:	6b83      	ldr	r3, [r0, #56]	; 0x38
   83d2c:	2b00      	cmp	r3, #0
   83d2e:	f000 80e3 	beq.w	83ef8 <_vfiprintf_r+0x1e0>
   83d32:	9b00      	ldr	r3, [sp, #0]
   83d34:	8999      	ldrh	r1, [r3, #12]
   83d36:	b28a      	uxth	r2, r1
   83d38:	0490      	lsls	r0, r2, #18
   83d3a:	d408      	bmi.n	83d4e <_vfiprintf_r+0x36>
   83d3c:	4618      	mov	r0, r3
   83d3e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   83d40:	f441 5200 	orr.w	r2, r1, #8192	; 0x2000
   83d44:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   83d48:	8182      	strh	r2, [r0, #12]
   83d4a:	6643      	str	r3, [r0, #100]	; 0x64
   83d4c:	b292      	uxth	r2, r2
   83d4e:	0711      	lsls	r1, r2, #28
   83d50:	f140 80b2 	bpl.w	83eb8 <_vfiprintf_r+0x1a0>
   83d54:	9b00      	ldr	r3, [sp, #0]
   83d56:	691b      	ldr	r3, [r3, #16]
   83d58:	2b00      	cmp	r3, #0
   83d5a:	f000 80ad 	beq.w	83eb8 <_vfiprintf_r+0x1a0>
   83d5e:	f002 021a 	and.w	r2, r2, #26
   83d62:	2a0a      	cmp	r2, #10
   83d64:	f000 80b4 	beq.w	83ed0 <_vfiprintf_r+0x1b8>
   83d68:	f10d 0a68 	add.w	sl, sp, #104	; 0x68
   83d6c:	4654      	mov	r4, sl
   83d6e:	2300      	movs	r3, #0
   83d70:	9309      	str	r3, [sp, #36]	; 0x24
   83d72:	9302      	str	r3, [sp, #8]
   83d74:	930f      	str	r3, [sp, #60]	; 0x3c
   83d76:	930e      	str	r3, [sp, #56]	; 0x38
   83d78:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
   83d7c:	f89b 3000 	ldrb.w	r3, [fp]
   83d80:	2b00      	cmp	r3, #0
   83d82:	f000 84a3 	beq.w	846cc <_vfiprintf_r+0x9b4>
   83d86:	2b25      	cmp	r3, #37	; 0x25
   83d88:	f000 84a0 	beq.w	846cc <_vfiprintf_r+0x9b4>
   83d8c:	465a      	mov	r2, fp
   83d8e:	e001      	b.n	83d94 <_vfiprintf_r+0x7c>
   83d90:	2b25      	cmp	r3, #37	; 0x25
   83d92:	d003      	beq.n	83d9c <_vfiprintf_r+0x84>
   83d94:	f812 3f01 	ldrb.w	r3, [r2, #1]!
   83d98:	2b00      	cmp	r3, #0
   83d9a:	d1f9      	bne.n	83d90 <_vfiprintf_r+0x78>
   83d9c:	ebcb 0602 	rsb	r6, fp, r2
   83da0:	4615      	mov	r5, r2
   83da2:	b196      	cbz	r6, 83dca <_vfiprintf_r+0xb2>
   83da4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   83da6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   83da8:	3301      	adds	r3, #1
   83daa:	4432      	add	r2, r6
   83dac:	2b07      	cmp	r3, #7
   83dae:	f8c4 b000 	str.w	fp, [r4]
   83db2:	6066      	str	r6, [r4, #4]
   83db4:	920f      	str	r2, [sp, #60]	; 0x3c
   83db6:	930e      	str	r3, [sp, #56]	; 0x38
   83db8:	dd79      	ble.n	83eae <_vfiprintf_r+0x196>
   83dba:	2a00      	cmp	r2, #0
   83dbc:	f040 84ad 	bne.w	8471a <_vfiprintf_r+0xa02>
   83dc0:	4654      	mov	r4, sl
   83dc2:	9b02      	ldr	r3, [sp, #8]
   83dc4:	920e      	str	r2, [sp, #56]	; 0x38
   83dc6:	4433      	add	r3, r6
   83dc8:	9302      	str	r3, [sp, #8]
   83dca:	782b      	ldrb	r3, [r5, #0]
   83dcc:	2b00      	cmp	r3, #0
   83dce:	f000 835f 	beq.w	84490 <_vfiprintf_r+0x778>
   83dd2:	f04f 0300 	mov.w	r3, #0
   83dd6:	2100      	movs	r1, #0
   83dd8:	f04f 3cff 	mov.w	ip, #4294967295
   83ddc:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
   83de0:	1c68      	adds	r0, r5, #1
   83de2:	786b      	ldrb	r3, [r5, #1]
   83de4:	4688      	mov	r8, r1
   83de6:	460d      	mov	r5, r1
   83de8:	4666      	mov	r6, ip
   83dea:	f100 0b01 	add.w	fp, r0, #1
   83dee:	f1a3 0220 	sub.w	r2, r3, #32
   83df2:	2a58      	cmp	r2, #88	; 0x58
   83df4:	f200 82aa 	bhi.w	8434c <_vfiprintf_r+0x634>
   83df8:	e8df f012 	tbh	[pc, r2, lsl #1]
   83dfc:	02a8029a 	.word	0x02a8029a
   83e00:	02a202a8 	.word	0x02a202a8
   83e04:	02a802a8 	.word	0x02a802a8
   83e08:	02a802a8 	.word	0x02a802a8
   83e0c:	02a802a8 	.word	0x02a802a8
   83e10:	02600254 	.word	0x02600254
   83e14:	010d02a8 	.word	0x010d02a8
   83e18:	02a8026c 	.word	0x02a8026c
   83e1c:	012f0129 	.word	0x012f0129
   83e20:	012f012f 	.word	0x012f012f
   83e24:	012f012f 	.word	0x012f012f
   83e28:	012f012f 	.word	0x012f012f
   83e2c:	012f012f 	.word	0x012f012f
   83e30:	02a802a8 	.word	0x02a802a8
   83e34:	02a802a8 	.word	0x02a802a8
   83e38:	02a802a8 	.word	0x02a802a8
   83e3c:	02a802a8 	.word	0x02a802a8
   83e40:	02a802a8 	.word	0x02a802a8
   83e44:	02a8013d 	.word	0x02a8013d
   83e48:	02a802a8 	.word	0x02a802a8
   83e4c:	02a802a8 	.word	0x02a802a8
   83e50:	02a802a8 	.word	0x02a802a8
   83e54:	02a802a8 	.word	0x02a802a8
   83e58:	017402a8 	.word	0x017402a8
   83e5c:	02a802a8 	.word	0x02a802a8
   83e60:	02a802a8 	.word	0x02a802a8
   83e64:	018b02a8 	.word	0x018b02a8
   83e68:	02a802a8 	.word	0x02a802a8
   83e6c:	02a801a3 	.word	0x02a801a3
   83e70:	02a802a8 	.word	0x02a802a8
   83e74:	02a802a8 	.word	0x02a802a8
   83e78:	02a802a8 	.word	0x02a802a8
   83e7c:	02a802a8 	.word	0x02a802a8
   83e80:	01c702a8 	.word	0x01c702a8
   83e84:	02a801da 	.word	0x02a801da
   83e88:	02a802a8 	.word	0x02a802a8
   83e8c:	01da0123 	.word	0x01da0123
   83e90:	02a802a8 	.word	0x02a802a8
   83e94:	02a8024b 	.word	0x02a8024b
   83e98:	01130288 	.word	0x01130288
   83e9c:	020701f4 	.word	0x020701f4
   83ea0:	020d02a8 	.word	0x020d02a8
   83ea4:	008102a8 	.word	0x008102a8
   83ea8:	02a802a8 	.word	0x02a802a8
   83eac:	0232      	.short	0x0232
   83eae:	3408      	adds	r4, #8
   83eb0:	9b02      	ldr	r3, [sp, #8]
   83eb2:	4433      	add	r3, r6
   83eb4:	9302      	str	r3, [sp, #8]
   83eb6:	e788      	b.n	83dca <_vfiprintf_r+0xb2>
   83eb8:	9801      	ldr	r0, [sp, #4]
   83eba:	9900      	ldr	r1, [sp, #0]
   83ebc:	f000 fd72 	bl	849a4 <__swsetup_r>
   83ec0:	b9a8      	cbnz	r0, 83eee <_vfiprintf_r+0x1d6>
   83ec2:	9b00      	ldr	r3, [sp, #0]
   83ec4:	899a      	ldrh	r2, [r3, #12]
   83ec6:	f002 021a 	and.w	r2, r2, #26
   83eca:	2a0a      	cmp	r2, #10
   83ecc:	f47f af4c 	bne.w	83d68 <_vfiprintf_r+0x50>
   83ed0:	9b00      	ldr	r3, [sp, #0]
   83ed2:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
   83ed6:	2b00      	cmp	r3, #0
   83ed8:	f6ff af46 	blt.w	83d68 <_vfiprintf_r+0x50>
   83edc:	9801      	ldr	r0, [sp, #4]
   83ede:	9900      	ldr	r1, [sp, #0]
   83ee0:	465a      	mov	r2, fp
   83ee2:	4623      	mov	r3, r4
   83ee4:	f000 fd20 	bl	84928 <__sbprintf>
   83ee8:	b02b      	add	sp, #172	; 0xac
   83eea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83eee:	f04f 30ff 	mov.w	r0, #4294967295
   83ef2:	b02b      	add	sp, #172	; 0xac
   83ef4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83ef8:	f000 fefe 	bl	84cf8 <__sinit>
   83efc:	e719      	b.n	83d32 <_vfiprintf_r+0x1a>
   83efe:	f018 0f20 	tst.w	r8, #32
   83f02:	9503      	str	r5, [sp, #12]
   83f04:	46b4      	mov	ip, r6
   83f06:	f000 810c 	beq.w	84122 <_vfiprintf_r+0x40a>
   83f0a:	9b04      	ldr	r3, [sp, #16]
   83f0c:	3307      	adds	r3, #7
   83f0e:	f023 0307 	bic.w	r3, r3, #7
   83f12:	f103 0208 	add.w	r2, r3, #8
   83f16:	e9d3 6700 	ldrd	r6, r7, [r3]
   83f1a:	9204      	str	r2, [sp, #16]
   83f1c:	2301      	movs	r3, #1
   83f1e:	f04f 0200 	mov.w	r2, #0
   83f22:	46e1      	mov	r9, ip
   83f24:	f88d 202f 	strb.w	r2, [sp, #47]	; 0x2f
   83f28:	2500      	movs	r5, #0
   83f2a:	f1bc 0f00 	cmp.w	ip, #0
   83f2e:	bfa8      	it	ge
   83f30:	f028 0880 	bicge.w	r8, r8, #128	; 0x80
   83f34:	ea56 0207 	orrs.w	r2, r6, r7
   83f38:	f040 80c4 	bne.w	840c4 <_vfiprintf_r+0x3ac>
   83f3c:	f1bc 0f00 	cmp.w	ip, #0
   83f40:	f000 8380 	beq.w	84644 <_vfiprintf_r+0x92c>
   83f44:	2b01      	cmp	r3, #1
   83f46:	f000 80c5 	beq.w	840d4 <_vfiprintf_r+0x3bc>
   83f4a:	2b02      	cmp	r3, #2
   83f4c:	f000 8386 	beq.w	8465c <_vfiprintf_r+0x944>
   83f50:	4651      	mov	r1, sl
   83f52:	08f2      	lsrs	r2, r6, #3
   83f54:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
   83f58:	08f8      	lsrs	r0, r7, #3
   83f5a:	f006 0307 	and.w	r3, r6, #7
   83f5e:	4607      	mov	r7, r0
   83f60:	4616      	mov	r6, r2
   83f62:	3330      	adds	r3, #48	; 0x30
   83f64:	ea56 0207 	orrs.w	r2, r6, r7
   83f68:	f801 3d01 	strb.w	r3, [r1, #-1]!
   83f6c:	d1f1      	bne.n	83f52 <_vfiprintf_r+0x23a>
   83f6e:	f018 0f01 	tst.w	r8, #1
   83f72:	9107      	str	r1, [sp, #28]
   83f74:	f040 83fa 	bne.w	8476c <_vfiprintf_r+0xa54>
   83f78:	ebc1 090a 	rsb	r9, r1, sl
   83f7c:	45e1      	cmp	r9, ip
   83f7e:	464e      	mov	r6, r9
   83f80:	bfb8      	it	lt
   83f82:	4666      	movlt	r6, ip
   83f84:	b105      	cbz	r5, 83f88 <_vfiprintf_r+0x270>
   83f86:	3601      	adds	r6, #1
   83f88:	f018 0302 	ands.w	r3, r8, #2
   83f8c:	9305      	str	r3, [sp, #20]
   83f8e:	bf18      	it	ne
   83f90:	3602      	addne	r6, #2
   83f92:	f018 0384 	ands.w	r3, r8, #132	; 0x84
   83f96:	9306      	str	r3, [sp, #24]
   83f98:	f040 81f9 	bne.w	8438e <_vfiprintf_r+0x676>
   83f9c:	9b03      	ldr	r3, [sp, #12]
   83f9e:	1b9d      	subs	r5, r3, r6
   83fa0:	2d00      	cmp	r5, #0
   83fa2:	f340 81f4 	ble.w	8438e <_vfiprintf_r+0x676>
   83fa6:	2d10      	cmp	r5, #16
   83fa8:	f340 848a 	ble.w	848c0 <_vfiprintf_r+0xba8>
   83fac:	4620      	mov	r0, r4
   83fae:	f8dd e038 	ldr.w	lr, [sp, #56]	; 0x38
   83fb2:	4664      	mov	r4, ip
   83fb4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   83fb6:	4fc4      	ldr	r7, [pc, #784]	; (842c8 <_vfiprintf_r+0x5b0>)
   83fb8:	2310      	movs	r3, #16
   83fba:	4671      	mov	r1, lr
   83fbc:	4684      	mov	ip, r0
   83fbe:	e007      	b.n	83fd0 <_vfiprintf_r+0x2b8>
   83fc0:	f101 0e02 	add.w	lr, r1, #2
   83fc4:	4601      	mov	r1, r0
   83fc6:	f10c 0c08 	add.w	ip, ip, #8
   83fca:	3d10      	subs	r5, #16
   83fcc:	2d10      	cmp	r5, #16
   83fce:	dd13      	ble.n	83ff8 <_vfiprintf_r+0x2e0>
   83fd0:	1c48      	adds	r0, r1, #1
   83fd2:	3210      	adds	r2, #16
   83fd4:	2807      	cmp	r0, #7
   83fd6:	920f      	str	r2, [sp, #60]	; 0x3c
   83fd8:	f8cc 7000 	str.w	r7, [ip]
   83fdc:	f8cc 3004 	str.w	r3, [ip, #4]
   83fe0:	900e      	str	r0, [sp, #56]	; 0x38
   83fe2:	dded      	ble.n	83fc0 <_vfiprintf_r+0x2a8>
   83fe4:	2a00      	cmp	r2, #0
   83fe6:	f040 81c2 	bne.w	8436e <_vfiprintf_r+0x656>
   83fea:	3d10      	subs	r5, #16
   83fec:	2d10      	cmp	r5, #16
   83fee:	4611      	mov	r1, r2
   83ff0:	f04f 0e01 	mov.w	lr, #1
   83ff4:	46d4      	mov	ip, sl
   83ff6:	dceb      	bgt.n	83fd0 <_vfiprintf_r+0x2b8>
   83ff8:	4663      	mov	r3, ip
   83ffa:	4671      	mov	r1, lr
   83ffc:	46a4      	mov	ip, r4
   83ffe:	461c      	mov	r4, r3
   84000:	442a      	add	r2, r5
   84002:	2907      	cmp	r1, #7
   84004:	920f      	str	r2, [sp, #60]	; 0x3c
   84006:	6027      	str	r7, [r4, #0]
   84008:	6065      	str	r5, [r4, #4]
   8400a:	910e      	str	r1, [sp, #56]	; 0x38
   8400c:	f300 8346 	bgt.w	8469c <_vfiprintf_r+0x984>
   84010:	3408      	adds	r4, #8
   84012:	1c48      	adds	r0, r1, #1
   84014:	e1be      	b.n	84394 <_vfiprintf_r+0x67c>
   84016:	4658      	mov	r0, fp
   84018:	f048 0804 	orr.w	r8, r8, #4
   8401c:	f89b 3000 	ldrb.w	r3, [fp]
   84020:	e6e3      	b.n	83dea <_vfiprintf_r+0xd2>
   84022:	f018 0320 	ands.w	r3, r8, #32
   84026:	9503      	str	r5, [sp, #12]
   84028:	46b4      	mov	ip, r6
   8402a:	d062      	beq.n	840f2 <_vfiprintf_r+0x3da>
   8402c:	9b04      	ldr	r3, [sp, #16]
   8402e:	3307      	adds	r3, #7
   84030:	f023 0307 	bic.w	r3, r3, #7
   84034:	f103 0208 	add.w	r2, r3, #8
   84038:	e9d3 6700 	ldrd	r6, r7, [r3]
   8403c:	9204      	str	r2, [sp, #16]
   8403e:	2300      	movs	r3, #0
   84040:	e76d      	b.n	83f1e <_vfiprintf_r+0x206>
   84042:	f048 0840 	orr.w	r8, r8, #64	; 0x40
   84046:	f89b 3000 	ldrb.w	r3, [fp]
   8404a:	4658      	mov	r0, fp
   8404c:	e6cd      	b.n	83dea <_vfiprintf_r+0xd2>
   8404e:	f048 0880 	orr.w	r8, r8, #128	; 0x80
   84052:	f89b 3000 	ldrb.w	r3, [fp]
   84056:	4658      	mov	r0, fp
   84058:	e6c7      	b.n	83dea <_vfiprintf_r+0xd2>
   8405a:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   8405e:	2500      	movs	r5, #0
   84060:	f81b 3b01 	ldrb.w	r3, [fp], #1
   84064:	eb05 0585 	add.w	r5, r5, r5, lsl #2
   84068:	eb02 0545 	add.w	r5, r2, r5, lsl #1
   8406c:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   84070:	2a09      	cmp	r2, #9
   84072:	d9f5      	bls.n	84060 <_vfiprintf_r+0x348>
   84074:	e6bb      	b.n	83dee <_vfiprintf_r+0xd6>
   84076:	f048 0810 	orr.w	r8, r8, #16
   8407a:	f018 0f20 	tst.w	r8, #32
   8407e:	9503      	str	r5, [sp, #12]
   84080:	46b4      	mov	ip, r6
   84082:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
   84086:	f000 809b 	beq.w	841c0 <_vfiprintf_r+0x4a8>
   8408a:	9904      	ldr	r1, [sp, #16]
   8408c:	3107      	adds	r1, #7
   8408e:	f021 0107 	bic.w	r1, r1, #7
   84092:	e9d1 2300 	ldrd	r2, r3, [r1]
   84096:	4616      	mov	r6, r2
   84098:	461f      	mov	r7, r3
   8409a:	3108      	adds	r1, #8
   8409c:	9104      	str	r1, [sp, #16]
   8409e:	2a00      	cmp	r2, #0
   840a0:	f173 0300 	sbcs.w	r3, r3, #0
   840a4:	f2c0 83a4 	blt.w	847f0 <_vfiprintf_r+0xad8>
   840a8:	f1bc 0f00 	cmp.w	ip, #0
   840ac:	bfa8      	it	ge
   840ae:	f028 0880 	bicge.w	r8, r8, #128	; 0x80
   840b2:	ea56 0207 	orrs.w	r2, r6, r7
   840b6:	f89d 502f 	ldrb.w	r5, [sp, #47]	; 0x2f
   840ba:	46e1      	mov	r9, ip
   840bc:	f04f 0301 	mov.w	r3, #1
   840c0:	f43f af3c 	beq.w	83f3c <_vfiprintf_r+0x224>
   840c4:	2b01      	cmp	r3, #1
   840c6:	f47f af40 	bne.w	83f4a <_vfiprintf_r+0x232>
   840ca:	2f00      	cmp	r7, #0
   840cc:	bf08      	it	eq
   840ce:	2e0a      	cmpeq	r6, #10
   840d0:	f080 8332 	bcs.w	84738 <_vfiprintf_r+0xa20>
   840d4:	ab2a      	add	r3, sp, #168	; 0xa8
   840d6:	3630      	adds	r6, #48	; 0x30
   840d8:	f803 6d41 	strb.w	r6, [r3, #-65]!
   840dc:	ebc3 090a 	rsb	r9, r3, sl
   840e0:	9307      	str	r3, [sp, #28]
   840e2:	e74b      	b.n	83f7c <_vfiprintf_r+0x264>
   840e4:	f048 0810 	orr.w	r8, r8, #16
   840e8:	f018 0320 	ands.w	r3, r8, #32
   840ec:	9503      	str	r5, [sp, #12]
   840ee:	46b4      	mov	ip, r6
   840f0:	d19c      	bne.n	8402c <_vfiprintf_r+0x314>
   840f2:	f018 0210 	ands.w	r2, r8, #16
   840f6:	f040 82f7 	bne.w	846e8 <_vfiprintf_r+0x9d0>
   840fa:	f018 0340 	ands.w	r3, r8, #64	; 0x40
   840fe:	f000 82f3 	beq.w	846e8 <_vfiprintf_r+0x9d0>
   84102:	9904      	ldr	r1, [sp, #16]
   84104:	4613      	mov	r3, r2
   84106:	460a      	mov	r2, r1
   84108:	3204      	adds	r2, #4
   8410a:	880e      	ldrh	r6, [r1, #0]
   8410c:	2700      	movs	r7, #0
   8410e:	9204      	str	r2, [sp, #16]
   84110:	e705      	b.n	83f1e <_vfiprintf_r+0x206>
   84112:	f048 0810 	orr.w	r8, r8, #16
   84116:	f018 0f20 	tst.w	r8, #32
   8411a:	9503      	str	r5, [sp, #12]
   8411c:	46b4      	mov	ip, r6
   8411e:	f47f aef4 	bne.w	83f0a <_vfiprintf_r+0x1f2>
   84122:	9a04      	ldr	r2, [sp, #16]
   84124:	f018 0f10 	tst.w	r8, #16
   84128:	4613      	mov	r3, r2
   8412a:	f040 82e4 	bne.w	846f6 <_vfiprintf_r+0x9de>
   8412e:	f018 0f40 	tst.w	r8, #64	; 0x40
   84132:	f000 82e0 	beq.w	846f6 <_vfiprintf_r+0x9de>
   84136:	8816      	ldrh	r6, [r2, #0]
   84138:	3204      	adds	r2, #4
   8413a:	2700      	movs	r7, #0
   8413c:	2301      	movs	r3, #1
   8413e:	9204      	str	r2, [sp, #16]
   84140:	e6ed      	b.n	83f1e <_vfiprintf_r+0x206>
   84142:	4a62      	ldr	r2, [pc, #392]	; (842cc <_vfiprintf_r+0x5b4>)
   84144:	f018 0f20 	tst.w	r8, #32
   84148:	9503      	str	r5, [sp, #12]
   8414a:	46b4      	mov	ip, r6
   8414c:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
   84150:	9209      	str	r2, [sp, #36]	; 0x24
   84152:	f000 808f 	beq.w	84274 <_vfiprintf_r+0x55c>
   84156:	9a04      	ldr	r2, [sp, #16]
   84158:	3207      	adds	r2, #7
   8415a:	f022 0207 	bic.w	r2, r2, #7
   8415e:	f102 0108 	add.w	r1, r2, #8
   84162:	9104      	str	r1, [sp, #16]
   84164:	e9d2 6700 	ldrd	r6, r7, [r2]
   84168:	f018 0f01 	tst.w	r8, #1
   8416c:	f000 828f 	beq.w	8468e <_vfiprintf_r+0x976>
   84170:	ea56 0207 	orrs.w	r2, r6, r7
   84174:	f000 828b 	beq.w	8468e <_vfiprintf_r+0x976>
   84178:	2230      	movs	r2, #48	; 0x30
   8417a:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
   8417e:	f048 0802 	orr.w	r8, r8, #2
   84182:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
   84186:	2302      	movs	r3, #2
   84188:	e6c9      	b.n	83f1e <_vfiprintf_r+0x206>
   8418a:	9a04      	ldr	r2, [sp, #16]
   8418c:	2601      	movs	r6, #1
   8418e:	6813      	ldr	r3, [r2, #0]
   84190:	f04f 0100 	mov.w	r1, #0
   84194:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
   84198:	4613      	mov	r3, r2
   8419a:	46b1      	mov	r9, r6
   8419c:	3304      	adds	r3, #4
   8419e:	9304      	str	r3, [sp, #16]
   841a0:	ab10      	add	r3, sp, #64	; 0x40
   841a2:	9503      	str	r5, [sp, #12]
   841a4:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
   841a8:	9307      	str	r3, [sp, #28]
   841aa:	f04f 0c00 	mov.w	ip, #0
   841ae:	e6eb      	b.n	83f88 <_vfiprintf_r+0x270>
   841b0:	f018 0f20 	tst.w	r8, #32
   841b4:	9503      	str	r5, [sp, #12]
   841b6:	46b4      	mov	ip, r6
   841b8:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
   841bc:	f47f af65 	bne.w	8408a <_vfiprintf_r+0x372>
   841c0:	9a04      	ldr	r2, [sp, #16]
   841c2:	f018 0f10 	tst.w	r8, #16
   841c6:	4613      	mov	r3, r2
   841c8:	f040 82a0 	bne.w	8470c <_vfiprintf_r+0x9f4>
   841cc:	f018 0f40 	tst.w	r8, #64	; 0x40
   841d0:	f000 829c 	beq.w	8470c <_vfiprintf_r+0x9f4>
   841d4:	f9b2 6000 	ldrsh.w	r6, [r2]
   841d8:	3304      	adds	r3, #4
   841da:	17f7      	asrs	r7, r6, #31
   841dc:	9304      	str	r3, [sp, #16]
   841de:	4632      	mov	r2, r6
   841e0:	463b      	mov	r3, r7
   841e2:	e75c      	b.n	8409e <_vfiprintf_r+0x386>
   841e4:	9904      	ldr	r1, [sp, #16]
   841e6:	2378      	movs	r3, #120	; 0x78
   841e8:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
   841ec:	4b38      	ldr	r3, [pc, #224]	; (842d0 <_vfiprintf_r+0x5b8>)
   841ee:	46b4      	mov	ip, r6
   841f0:	2230      	movs	r2, #48	; 0x30
   841f2:	680e      	ldr	r6, [r1, #0]
   841f4:	3104      	adds	r1, #4
   841f6:	9309      	str	r3, [sp, #36]	; 0x24
   841f8:	9503      	str	r5, [sp, #12]
   841fa:	f048 0802 	orr.w	r8, r8, #2
   841fe:	9104      	str	r1, [sp, #16]
   84200:	2700      	movs	r7, #0
   84202:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
   84206:	2302      	movs	r3, #2
   84208:	e689      	b.n	83f1e <_vfiprintf_r+0x206>
   8420a:	f048 0820 	orr.w	r8, r8, #32
   8420e:	f89b 3000 	ldrb.w	r3, [fp]
   84212:	4658      	mov	r0, fp
   84214:	e5e9      	b.n	83dea <_vfiprintf_r+0xd2>
   84216:	f04f 0100 	mov.w	r1, #0
   8421a:	9a04      	ldr	r2, [sp, #16]
   8421c:	9503      	str	r5, [sp, #12]
   8421e:	6813      	ldr	r3, [r2, #0]
   84220:	46b4      	mov	ip, r6
   84222:	9307      	str	r3, [sp, #28]
   84224:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
   84228:	1d15      	adds	r5, r2, #4
   8422a:	2b00      	cmp	r3, #0
   8422c:	f000 834e 	beq.w	848cc <_vfiprintf_r+0xbb4>
   84230:	2e00      	cmp	r6, #0
   84232:	f2c0 8329 	blt.w	84888 <_vfiprintf_r+0xb70>
   84236:	9e07      	ldr	r6, [sp, #28]
   84238:	4662      	mov	r2, ip
   8423a:	4630      	mov	r0, r6
   8423c:	2100      	movs	r1, #0
   8423e:	f8cd c010 	str.w	ip, [sp, #16]
   84242:	f001 fbc9 	bl	859d8 <memchr>
   84246:	f8dd c010 	ldr.w	ip, [sp, #16]
   8424a:	2800      	cmp	r0, #0
   8424c:	f000 834e 	beq.w	848ec <_vfiprintf_r+0xbd4>
   84250:	9504      	str	r5, [sp, #16]
   84252:	ebc6 0900 	rsb	r9, r6, r0
   84256:	f89d 502f 	ldrb.w	r5, [sp, #47]	; 0x2f
   8425a:	f04f 0c00 	mov.w	ip, #0
   8425e:	e68d      	b.n	83f7c <_vfiprintf_r+0x264>
   84260:	4a1b      	ldr	r2, [pc, #108]	; (842d0 <_vfiprintf_r+0x5b8>)
   84262:	f018 0f20 	tst.w	r8, #32
   84266:	9503      	str	r5, [sp, #12]
   84268:	46b4      	mov	ip, r6
   8426a:	9209      	str	r2, [sp, #36]	; 0x24
   8426c:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
   84270:	f47f af71 	bne.w	84156 <_vfiprintf_r+0x43e>
   84274:	9904      	ldr	r1, [sp, #16]
   84276:	f018 0f10 	tst.w	r8, #16
   8427a:	460a      	mov	r2, r1
   8427c:	f040 8241 	bne.w	84702 <_vfiprintf_r+0x9ea>
   84280:	f018 0f40 	tst.w	r8, #64	; 0x40
   84284:	f000 823d 	beq.w	84702 <_vfiprintf_r+0x9ea>
   84288:	3204      	adds	r2, #4
   8428a:	880e      	ldrh	r6, [r1, #0]
   8428c:	2700      	movs	r7, #0
   8428e:	9204      	str	r2, [sp, #16]
   84290:	e76a      	b.n	84168 <_vfiprintf_r+0x450>
   84292:	f89b 3000 	ldrb.w	r3, [fp]
   84296:	2b6c      	cmp	r3, #108	; 0x6c
   84298:	f000 82e9 	beq.w	8486e <_vfiprintf_r+0xb56>
   8429c:	f048 0810 	orr.w	r8, r8, #16
   842a0:	4658      	mov	r0, fp
   842a2:	e5a2      	b.n	83dea <_vfiprintf_r+0xd2>
   842a4:	9a04      	ldr	r2, [sp, #16]
   842a6:	4613      	mov	r3, r2
   842a8:	6815      	ldr	r5, [r2, #0]
   842aa:	3304      	adds	r3, #4
   842ac:	2d00      	cmp	r5, #0
   842ae:	f2c0 82e6 	blt.w	8487e <_vfiprintf_r+0xb66>
   842b2:	9304      	str	r3, [sp, #16]
   842b4:	f89b 3000 	ldrb.w	r3, [fp]
   842b8:	4658      	mov	r0, fp
   842ba:	e596      	b.n	83dea <_vfiprintf_r+0xd2>
   842bc:	f89b 3000 	ldrb.w	r3, [fp]
   842c0:	4658      	mov	r0, fp
   842c2:	212b      	movs	r1, #43	; 0x2b
   842c4:	e591      	b.n	83dea <_vfiprintf_r+0xd2>
   842c6:	bf00      	nop
   842c8:	00086a28 	.word	0x00086a28
   842cc:	000869f8 	.word	0x000869f8
   842d0:	00086a0c 	.word	0x00086a0c
   842d4:	f89b 3000 	ldrb.w	r3, [fp]
   842d8:	f10b 0001 	add.w	r0, fp, #1
   842dc:	2b2a      	cmp	r3, #42	; 0x2a
   842de:	f000 830f 	beq.w	84900 <_vfiprintf_r+0xbe8>
   842e2:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   842e6:	2a09      	cmp	r2, #9
   842e8:	4683      	mov	fp, r0
   842ea:	f04f 0600 	mov.w	r6, #0
   842ee:	f63f ad7e 	bhi.w	83dee <_vfiprintf_r+0xd6>
   842f2:	f81b 3b01 	ldrb.w	r3, [fp], #1
   842f6:	eb06 0686 	add.w	r6, r6, r6, lsl #2
   842fa:	eb02 0646 	add.w	r6, r2, r6, lsl #1
   842fe:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   84302:	2a09      	cmp	r2, #9
   84304:	d9f5      	bls.n	842f2 <_vfiprintf_r+0x5da>
   84306:	ea46 76e6 	orr.w	r6, r6, r6, asr #31
   8430a:	e570      	b.n	83dee <_vfiprintf_r+0xd6>
   8430c:	f018 0f20 	tst.w	r8, #32
   84310:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
   84314:	f000 8283 	beq.w	8481e <_vfiprintf_r+0xb06>
   84318:	9a04      	ldr	r2, [sp, #16]
   8431a:	4613      	mov	r3, r2
   8431c:	3304      	adds	r3, #4
   8431e:	9304      	str	r3, [sp, #16]
   84320:	9b02      	ldr	r3, [sp, #8]
   84322:	6811      	ldr	r1, [r2, #0]
   84324:	17df      	asrs	r7, r3, #31
   84326:	461a      	mov	r2, r3
   84328:	463b      	mov	r3, r7
   8432a:	e9c1 2300 	strd	r2, r3, [r1]
   8432e:	e525      	b.n	83d7c <_vfiprintf_r+0x64>
   84330:	4658      	mov	r0, fp
   84332:	f89b 3000 	ldrb.w	r3, [fp]
   84336:	2900      	cmp	r1, #0
   84338:	f47f ad57 	bne.w	83dea <_vfiprintf_r+0xd2>
   8433c:	2120      	movs	r1, #32
   8433e:	e554      	b.n	83dea <_vfiprintf_r+0xd2>
   84340:	f048 0801 	orr.w	r8, r8, #1
   84344:	4658      	mov	r0, fp
   84346:	f89b 3000 	ldrb.w	r3, [fp]
   8434a:	e54e      	b.n	83dea <_vfiprintf_r+0xd2>
   8434c:	9503      	str	r5, [sp, #12]
   8434e:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
   84352:	2b00      	cmp	r3, #0
   84354:	f000 809c 	beq.w	84490 <_vfiprintf_r+0x778>
   84358:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
   8435c:	f04f 0300 	mov.w	r3, #0
   84360:	2601      	movs	r6, #1
   84362:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
   84366:	ab10      	add	r3, sp, #64	; 0x40
   84368:	46b1      	mov	r9, r6
   8436a:	9307      	str	r3, [sp, #28]
   8436c:	e71d      	b.n	841aa <_vfiprintf_r+0x492>
   8436e:	9801      	ldr	r0, [sp, #4]
   84370:	9900      	ldr	r1, [sp, #0]
   84372:	aa0d      	add	r2, sp, #52	; 0x34
   84374:	9308      	str	r3, [sp, #32]
   84376:	f7ff fc93 	bl	83ca0 <__sprint_r.part.0>
   8437a:	2800      	cmp	r0, #0
   8437c:	f040 808f 	bne.w	8449e <_vfiprintf_r+0x786>
   84380:	990e      	ldr	r1, [sp, #56]	; 0x38
   84382:	46d4      	mov	ip, sl
   84384:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   84386:	f101 0e01 	add.w	lr, r1, #1
   8438a:	9b08      	ldr	r3, [sp, #32]
   8438c:	e61d      	b.n	83fca <_vfiprintf_r+0x2b2>
   8438e:	990e      	ldr	r1, [sp, #56]	; 0x38
   84390:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   84392:	1c48      	adds	r0, r1, #1
   84394:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
   84398:	b16b      	cbz	r3, 843b6 <_vfiprintf_r+0x69e>
   8439a:	3201      	adds	r2, #1
   8439c:	f10d 032f 	add.w	r3, sp, #47	; 0x2f
   843a0:	2101      	movs	r1, #1
   843a2:	2807      	cmp	r0, #7
   843a4:	920f      	str	r2, [sp, #60]	; 0x3c
   843a6:	900e      	str	r0, [sp, #56]	; 0x38
   843a8:	6023      	str	r3, [r4, #0]
   843aa:	6061      	str	r1, [r4, #4]
   843ac:	f300 8134 	bgt.w	84618 <_vfiprintf_r+0x900>
   843b0:	4601      	mov	r1, r0
   843b2:	3408      	adds	r4, #8
   843b4:	3001      	adds	r0, #1
   843b6:	9b05      	ldr	r3, [sp, #20]
   843b8:	b163      	cbz	r3, 843d4 <_vfiprintf_r+0x6bc>
   843ba:	3202      	adds	r2, #2
   843bc:	a90c      	add	r1, sp, #48	; 0x30
   843be:	2302      	movs	r3, #2
   843c0:	2807      	cmp	r0, #7
   843c2:	920f      	str	r2, [sp, #60]	; 0x3c
   843c4:	900e      	str	r0, [sp, #56]	; 0x38
   843c6:	e884 000a 	stmia.w	r4, {r1, r3}
   843ca:	f300 8134 	bgt.w	84636 <_vfiprintf_r+0x91e>
   843ce:	4601      	mov	r1, r0
   843d0:	3408      	adds	r4, #8
   843d2:	3001      	adds	r0, #1
   843d4:	9b06      	ldr	r3, [sp, #24]
   843d6:	2b80      	cmp	r3, #128	; 0x80
   843d8:	f000 80d4 	beq.w	84584 <_vfiprintf_r+0x86c>
   843dc:	ebc9 070c 	rsb	r7, r9, ip
   843e0:	2f00      	cmp	r7, #0
   843e2:	dd2b      	ble.n	8443c <_vfiprintf_r+0x724>
   843e4:	2f10      	cmp	r7, #16
   843e6:	4dab      	ldr	r5, [pc, #684]	; (84694 <_vfiprintf_r+0x97c>)
   843e8:	dd1f      	ble.n	8442a <_vfiprintf_r+0x712>
   843ea:	46a6      	mov	lr, r4
   843ec:	2310      	movs	r3, #16
   843ee:	9c01      	ldr	r4, [sp, #4]
   843f0:	e007      	b.n	84402 <_vfiprintf_r+0x6ea>
   843f2:	f101 0c02 	add.w	ip, r1, #2
   843f6:	4601      	mov	r1, r0
   843f8:	f10e 0e08 	add.w	lr, lr, #8
   843fc:	3f10      	subs	r7, #16
   843fe:	2f10      	cmp	r7, #16
   84400:	dd11      	ble.n	84426 <_vfiprintf_r+0x70e>
   84402:	1c48      	adds	r0, r1, #1
   84404:	3210      	adds	r2, #16
   84406:	2807      	cmp	r0, #7
   84408:	920f      	str	r2, [sp, #60]	; 0x3c
   8440a:	f8ce 5000 	str.w	r5, [lr]
   8440e:	f8ce 3004 	str.w	r3, [lr, #4]
   84412:	900e      	str	r0, [sp, #56]	; 0x38
   84414:	dded      	ble.n	843f2 <_vfiprintf_r+0x6da>
   84416:	bb6a      	cbnz	r2, 84474 <_vfiprintf_r+0x75c>
   84418:	3f10      	subs	r7, #16
   8441a:	2f10      	cmp	r7, #16
   8441c:	f04f 0c01 	mov.w	ip, #1
   84420:	4611      	mov	r1, r2
   84422:	46d6      	mov	lr, sl
   84424:	dced      	bgt.n	84402 <_vfiprintf_r+0x6ea>
   84426:	4674      	mov	r4, lr
   84428:	4660      	mov	r0, ip
   8442a:	443a      	add	r2, r7
   8442c:	2807      	cmp	r0, #7
   8442e:	920f      	str	r2, [sp, #60]	; 0x3c
   84430:	e884 00a0 	stmia.w	r4, {r5, r7}
   84434:	900e      	str	r0, [sp, #56]	; 0x38
   84436:	dc3b      	bgt.n	844b0 <_vfiprintf_r+0x798>
   84438:	3408      	adds	r4, #8
   8443a:	3001      	adds	r0, #1
   8443c:	eb02 0309 	add.w	r3, r2, r9
   84440:	9a07      	ldr	r2, [sp, #28]
   84442:	2807      	cmp	r0, #7
   84444:	930f      	str	r3, [sp, #60]	; 0x3c
   84446:	e884 0204 	stmia.w	r4, {r2, r9}
   8444a:	900e      	str	r0, [sp, #56]	; 0x38
   8444c:	dd3d      	ble.n	844ca <_vfiprintf_r+0x7b2>
   8444e:	2b00      	cmp	r3, #0
   84450:	f040 813f 	bne.w	846d2 <_vfiprintf_r+0x9ba>
   84454:	f018 0f04 	tst.w	r8, #4
   84458:	930e      	str	r3, [sp, #56]	; 0x38
   8445a:	f040 8130 	bne.w	846be <_vfiprintf_r+0x9a6>
   8445e:	9b02      	ldr	r3, [sp, #8]
   84460:	9a03      	ldr	r2, [sp, #12]
   84462:	4296      	cmp	r6, r2
   84464:	bfac      	ite	ge
   84466:	199b      	addge	r3, r3, r6
   84468:	189b      	addlt	r3, r3, r2
   8446a:	9302      	str	r3, [sp, #8]
   8446c:	2300      	movs	r3, #0
   8446e:	930e      	str	r3, [sp, #56]	; 0x38
   84470:	4654      	mov	r4, sl
   84472:	e483      	b.n	83d7c <_vfiprintf_r+0x64>
   84474:	4620      	mov	r0, r4
   84476:	9900      	ldr	r1, [sp, #0]
   84478:	aa0d      	add	r2, sp, #52	; 0x34
   8447a:	9305      	str	r3, [sp, #20]
   8447c:	f7ff fc10 	bl	83ca0 <__sprint_r.part.0>
   84480:	b968      	cbnz	r0, 8449e <_vfiprintf_r+0x786>
   84482:	990e      	ldr	r1, [sp, #56]	; 0x38
   84484:	46d6      	mov	lr, sl
   84486:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   84488:	f101 0c01 	add.w	ip, r1, #1
   8448c:	9b05      	ldr	r3, [sp, #20]
   8448e:	e7b5      	b.n	843fc <_vfiprintf_r+0x6e4>
   84490:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   84492:	b123      	cbz	r3, 8449e <_vfiprintf_r+0x786>
   84494:	9801      	ldr	r0, [sp, #4]
   84496:	9900      	ldr	r1, [sp, #0]
   84498:	aa0d      	add	r2, sp, #52	; 0x34
   8449a:	f7ff fc01 	bl	83ca0 <__sprint_r.part.0>
   8449e:	9b00      	ldr	r3, [sp, #0]
   844a0:	899b      	ldrh	r3, [r3, #12]
   844a2:	065b      	lsls	r3, r3, #25
   844a4:	f53f ad23 	bmi.w	83eee <_vfiprintf_r+0x1d6>
   844a8:	9802      	ldr	r0, [sp, #8]
   844aa:	b02b      	add	sp, #172	; 0xac
   844ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   844b0:	2a00      	cmp	r2, #0
   844b2:	f040 8190 	bne.w	847d6 <_vfiprintf_r+0xabe>
   844b6:	464b      	mov	r3, r9
   844b8:	4654      	mov	r4, sl
   844ba:	9907      	ldr	r1, [sp, #28]
   844bc:	2201      	movs	r2, #1
   844be:	f8cd 906c 	str.w	r9, [sp, #108]	; 0x6c
   844c2:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
   844c6:	911a      	str	r1, [sp, #104]	; 0x68
   844c8:	920e      	str	r2, [sp, #56]	; 0x38
   844ca:	f104 0208 	add.w	r2, r4, #8
   844ce:	f018 0f04 	tst.w	r8, #4
   844d2:	d039      	beq.n	84548 <_vfiprintf_r+0x830>
   844d4:	9903      	ldr	r1, [sp, #12]
   844d6:	1b8d      	subs	r5, r1, r6
   844d8:	2d00      	cmp	r5, #0
   844da:	dd35      	ble.n	84548 <_vfiprintf_r+0x830>
   844dc:	2d10      	cmp	r5, #16
   844de:	f340 8200 	ble.w	848e2 <_vfiprintf_r+0xbca>
   844e2:	980e      	ldr	r0, [sp, #56]	; 0x38
   844e4:	4f6c      	ldr	r7, [pc, #432]	; (84698 <_vfiprintf_r+0x980>)
   844e6:	2410      	movs	r4, #16
   844e8:	f8dd 8004 	ldr.w	r8, [sp, #4]
   844ec:	f8dd 9000 	ldr.w	r9, [sp]
   844f0:	e006      	b.n	84500 <_vfiprintf_r+0x7e8>
   844f2:	f100 0e02 	add.w	lr, r0, #2
   844f6:	4608      	mov	r0, r1
   844f8:	3208      	adds	r2, #8
   844fa:	3d10      	subs	r5, #16
   844fc:	2d10      	cmp	r5, #16
   844fe:	dd10      	ble.n	84522 <_vfiprintf_r+0x80a>
   84500:	1c41      	adds	r1, r0, #1
   84502:	3310      	adds	r3, #16
   84504:	2907      	cmp	r1, #7
   84506:	930f      	str	r3, [sp, #60]	; 0x3c
   84508:	6017      	str	r7, [r2, #0]
   8450a:	6054      	str	r4, [r2, #4]
   8450c:	910e      	str	r1, [sp, #56]	; 0x38
   8450e:	ddf0      	ble.n	844f2 <_vfiprintf_r+0x7da>
   84510:	2b00      	cmp	r3, #0
   84512:	d12a      	bne.n	8456a <_vfiprintf_r+0x852>
   84514:	3d10      	subs	r5, #16
   84516:	2d10      	cmp	r5, #16
   84518:	f04f 0e01 	mov.w	lr, #1
   8451c:	4618      	mov	r0, r3
   8451e:	4652      	mov	r2, sl
   84520:	dcee      	bgt.n	84500 <_vfiprintf_r+0x7e8>
   84522:	442b      	add	r3, r5
   84524:	f1be 0f07 	cmp.w	lr, #7
   84528:	930f      	str	r3, [sp, #60]	; 0x3c
   8452a:	6017      	str	r7, [r2, #0]
   8452c:	6055      	str	r5, [r2, #4]
   8452e:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
   84532:	dd09      	ble.n	84548 <_vfiprintf_r+0x830>
   84534:	2b00      	cmp	r3, #0
   84536:	d092      	beq.n	8445e <_vfiprintf_r+0x746>
   84538:	9801      	ldr	r0, [sp, #4]
   8453a:	9900      	ldr	r1, [sp, #0]
   8453c:	aa0d      	add	r2, sp, #52	; 0x34
   8453e:	f7ff fbaf 	bl	83ca0 <__sprint_r.part.0>
   84542:	2800      	cmp	r0, #0
   84544:	d1ab      	bne.n	8449e <_vfiprintf_r+0x786>
   84546:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   84548:	9a02      	ldr	r2, [sp, #8]
   8454a:	9903      	ldr	r1, [sp, #12]
   8454c:	428e      	cmp	r6, r1
   8454e:	bfac      	ite	ge
   84550:	1992      	addge	r2, r2, r6
   84552:	1852      	addlt	r2, r2, r1
   84554:	9202      	str	r2, [sp, #8]
   84556:	2b00      	cmp	r3, #0
   84558:	d088      	beq.n	8446c <_vfiprintf_r+0x754>
   8455a:	9801      	ldr	r0, [sp, #4]
   8455c:	9900      	ldr	r1, [sp, #0]
   8455e:	aa0d      	add	r2, sp, #52	; 0x34
   84560:	f7ff fb9e 	bl	83ca0 <__sprint_r.part.0>
   84564:	2800      	cmp	r0, #0
   84566:	d081      	beq.n	8446c <_vfiprintf_r+0x754>
   84568:	e799      	b.n	8449e <_vfiprintf_r+0x786>
   8456a:	4640      	mov	r0, r8
   8456c:	4649      	mov	r1, r9
   8456e:	aa0d      	add	r2, sp, #52	; 0x34
   84570:	f7ff fb96 	bl	83ca0 <__sprint_r.part.0>
   84574:	2800      	cmp	r0, #0
   84576:	d192      	bne.n	8449e <_vfiprintf_r+0x786>
   84578:	980e      	ldr	r0, [sp, #56]	; 0x38
   8457a:	4652      	mov	r2, sl
   8457c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   8457e:	f100 0e01 	add.w	lr, r0, #1
   84582:	e7ba      	b.n	844fa <_vfiprintf_r+0x7e2>
   84584:	9b03      	ldr	r3, [sp, #12]
   84586:	1b9f      	subs	r7, r3, r6
   84588:	2f00      	cmp	r7, #0
   8458a:	f77f af27 	ble.w	843dc <_vfiprintf_r+0x6c4>
   8458e:	2f10      	cmp	r7, #16
   84590:	f340 81b3 	ble.w	848fa <_vfiprintf_r+0xbe2>
   84594:	4620      	mov	r0, r4
   84596:	4d3f      	ldr	r5, [pc, #252]	; (84694 <_vfiprintf_r+0x97c>)
   84598:	4664      	mov	r4, ip
   8459a:	2310      	movs	r3, #16
   8459c:	4684      	mov	ip, r0
   8459e:	e007      	b.n	845b0 <_vfiprintf_r+0x898>
   845a0:	f101 0e02 	add.w	lr, r1, #2
   845a4:	4601      	mov	r1, r0
   845a6:	f10c 0c08 	add.w	ip, ip, #8
   845aa:	3f10      	subs	r7, #16
   845ac:	2f10      	cmp	r7, #16
   845ae:	dd11      	ble.n	845d4 <_vfiprintf_r+0x8bc>
   845b0:	1c48      	adds	r0, r1, #1
   845b2:	3210      	adds	r2, #16
   845b4:	2807      	cmp	r0, #7
   845b6:	920f      	str	r2, [sp, #60]	; 0x3c
   845b8:	f8cc 5000 	str.w	r5, [ip]
   845bc:	f8cc 3004 	str.w	r3, [ip, #4]
   845c0:	900e      	str	r0, [sp, #56]	; 0x38
   845c2:	dded      	ble.n	845a0 <_vfiprintf_r+0x888>
   845c4:	b9c2      	cbnz	r2, 845f8 <_vfiprintf_r+0x8e0>
   845c6:	3f10      	subs	r7, #16
   845c8:	2f10      	cmp	r7, #16
   845ca:	f04f 0e01 	mov.w	lr, #1
   845ce:	4611      	mov	r1, r2
   845d0:	46d4      	mov	ip, sl
   845d2:	dced      	bgt.n	845b0 <_vfiprintf_r+0x898>
   845d4:	4663      	mov	r3, ip
   845d6:	46a4      	mov	ip, r4
   845d8:	461c      	mov	r4, r3
   845da:	443a      	add	r2, r7
   845dc:	f1be 0f07 	cmp.w	lr, #7
   845e0:	920f      	str	r2, [sp, #60]	; 0x3c
   845e2:	e884 00a0 	stmia.w	r4, {r5, r7}
   845e6:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
   845ea:	f300 80ee 	bgt.w	847ca <_vfiprintf_r+0xab2>
   845ee:	3408      	adds	r4, #8
   845f0:	f10e 0001 	add.w	r0, lr, #1
   845f4:	4671      	mov	r1, lr
   845f6:	e6f1      	b.n	843dc <_vfiprintf_r+0x6c4>
   845f8:	9801      	ldr	r0, [sp, #4]
   845fa:	9900      	ldr	r1, [sp, #0]
   845fc:	aa0d      	add	r2, sp, #52	; 0x34
   845fe:	9305      	str	r3, [sp, #20]
   84600:	f7ff fb4e 	bl	83ca0 <__sprint_r.part.0>
   84604:	2800      	cmp	r0, #0
   84606:	f47f af4a 	bne.w	8449e <_vfiprintf_r+0x786>
   8460a:	990e      	ldr	r1, [sp, #56]	; 0x38
   8460c:	46d4      	mov	ip, sl
   8460e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   84610:	f101 0e01 	add.w	lr, r1, #1
   84614:	9b05      	ldr	r3, [sp, #20]
   84616:	e7c8      	b.n	845aa <_vfiprintf_r+0x892>
   84618:	2a00      	cmp	r2, #0
   8461a:	f040 80c5 	bne.w	847a8 <_vfiprintf_r+0xa90>
   8461e:	9b05      	ldr	r3, [sp, #20]
   84620:	2b00      	cmp	r3, #0
   84622:	f000 8085 	beq.w	84730 <_vfiprintf_r+0xa18>
   84626:	aa0c      	add	r2, sp, #48	; 0x30
   84628:	2302      	movs	r3, #2
   8462a:	921a      	str	r2, [sp, #104]	; 0x68
   8462c:	4608      	mov	r0, r1
   8462e:	931b      	str	r3, [sp, #108]	; 0x6c
   84630:	461a      	mov	r2, r3
   84632:	4654      	mov	r4, sl
   84634:	e6cb      	b.n	843ce <_vfiprintf_r+0x6b6>
   84636:	2a00      	cmp	r2, #0
   84638:	f040 80a5 	bne.w	84786 <_vfiprintf_r+0xa6e>
   8463c:	2001      	movs	r0, #1
   8463e:	4611      	mov	r1, r2
   84640:	4654      	mov	r4, sl
   84642:	e6c7      	b.n	843d4 <_vfiprintf_r+0x6bc>
   84644:	bb03      	cbnz	r3, 84688 <_vfiprintf_r+0x970>
   84646:	f018 0f01 	tst.w	r8, #1
   8464a:	d01d      	beq.n	84688 <_vfiprintf_r+0x970>
   8464c:	ab2a      	add	r3, sp, #168	; 0xa8
   8464e:	2230      	movs	r2, #48	; 0x30
   84650:	f803 2d41 	strb.w	r2, [r3, #-65]!
   84654:	ebc3 090a 	rsb	r9, r3, sl
   84658:	9307      	str	r3, [sp, #28]
   8465a:	e48f      	b.n	83f7c <_vfiprintf_r+0x264>
   8465c:	46d1      	mov	r9, sl
   8465e:	9809      	ldr	r0, [sp, #36]	; 0x24
   84660:	0933      	lsrs	r3, r6, #4
   84662:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
   84666:	0939      	lsrs	r1, r7, #4
   84668:	f006 020f 	and.w	r2, r6, #15
   8466c:	460f      	mov	r7, r1
   8466e:	461e      	mov	r6, r3
   84670:	5c83      	ldrb	r3, [r0, r2]
   84672:	f809 3d01 	strb.w	r3, [r9, #-1]!
   84676:	ea56 0307 	orrs.w	r3, r6, r7
   8467a:	d1f1      	bne.n	84660 <_vfiprintf_r+0x948>
   8467c:	464b      	mov	r3, r9
   8467e:	f8cd 901c 	str.w	r9, [sp, #28]
   84682:	ebc3 090a 	rsb	r9, r3, sl
   84686:	e479      	b.n	83f7c <_vfiprintf_r+0x264>
   84688:	f8cd a01c 	str.w	sl, [sp, #28]
   8468c:	e476      	b.n	83f7c <_vfiprintf_r+0x264>
   8468e:	2302      	movs	r3, #2
   84690:	e445      	b.n	83f1e <_vfiprintf_r+0x206>
   84692:	bf00      	nop
   84694:	000869e8 	.word	0x000869e8
   84698:	00086a28 	.word	0x00086a28
   8469c:	2a00      	cmp	r2, #0
   8469e:	f040 80d5 	bne.w	8484c <_vfiprintf_r+0xb34>
   846a2:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
   846a6:	2b00      	cmp	r3, #0
   846a8:	f000 80ac 	beq.w	84804 <_vfiprintf_r+0xaec>
   846ac:	2301      	movs	r3, #1
   846ae:	f10d 012f 	add.w	r1, sp, #47	; 0x2f
   846b2:	4618      	mov	r0, r3
   846b4:	931b      	str	r3, [sp, #108]	; 0x6c
   846b6:	461a      	mov	r2, r3
   846b8:	911a      	str	r1, [sp, #104]	; 0x68
   846ba:	4654      	mov	r4, sl
   846bc:	e678      	b.n	843b0 <_vfiprintf_r+0x698>
   846be:	9a03      	ldr	r2, [sp, #12]
   846c0:	1b95      	subs	r5, r2, r6
   846c2:	2d00      	cmp	r5, #0
   846c4:	4652      	mov	r2, sl
   846c6:	f73f af09 	bgt.w	844dc <_vfiprintf_r+0x7c4>
   846ca:	e6c8      	b.n	8445e <_vfiprintf_r+0x746>
   846cc:	465d      	mov	r5, fp
   846ce:	f7ff bb7c 	b.w	83dca <_vfiprintf_r+0xb2>
   846d2:	9801      	ldr	r0, [sp, #4]
   846d4:	9900      	ldr	r1, [sp, #0]
   846d6:	aa0d      	add	r2, sp, #52	; 0x34
   846d8:	f7ff fae2 	bl	83ca0 <__sprint_r.part.0>
   846dc:	2800      	cmp	r0, #0
   846de:	f47f aede 	bne.w	8449e <_vfiprintf_r+0x786>
   846e2:	4652      	mov	r2, sl
   846e4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   846e6:	e6f2      	b.n	844ce <_vfiprintf_r+0x7b6>
   846e8:	9904      	ldr	r1, [sp, #16]
   846ea:	2700      	movs	r7, #0
   846ec:	460a      	mov	r2, r1
   846ee:	3204      	adds	r2, #4
   846f0:	680e      	ldr	r6, [r1, #0]
   846f2:	9204      	str	r2, [sp, #16]
   846f4:	e413      	b.n	83f1e <_vfiprintf_r+0x206>
   846f6:	3204      	adds	r2, #4
   846f8:	681e      	ldr	r6, [r3, #0]
   846fa:	2700      	movs	r7, #0
   846fc:	2301      	movs	r3, #1
   846fe:	9204      	str	r2, [sp, #16]
   84700:	e40d      	b.n	83f1e <_vfiprintf_r+0x206>
   84702:	6816      	ldr	r6, [r2, #0]
   84704:	3204      	adds	r2, #4
   84706:	9204      	str	r2, [sp, #16]
   84708:	2700      	movs	r7, #0
   8470a:	e52d      	b.n	84168 <_vfiprintf_r+0x450>
   8470c:	681e      	ldr	r6, [r3, #0]
   8470e:	3304      	adds	r3, #4
   84710:	17f7      	asrs	r7, r6, #31
   84712:	9304      	str	r3, [sp, #16]
   84714:	4632      	mov	r2, r6
   84716:	463b      	mov	r3, r7
   84718:	e4c1      	b.n	8409e <_vfiprintf_r+0x386>
   8471a:	9801      	ldr	r0, [sp, #4]
   8471c:	9900      	ldr	r1, [sp, #0]
   8471e:	aa0d      	add	r2, sp, #52	; 0x34
   84720:	f7ff fabe 	bl	83ca0 <__sprint_r.part.0>
   84724:	2800      	cmp	r0, #0
   84726:	f47f aeba 	bne.w	8449e <_vfiprintf_r+0x786>
   8472a:	4654      	mov	r4, sl
   8472c:	f7ff bbc0 	b.w	83eb0 <_vfiprintf_r+0x198>
   84730:	4608      	mov	r0, r1
   84732:	4654      	mov	r4, sl
   84734:	4611      	mov	r1, r2
   84736:	e64d      	b.n	843d4 <_vfiprintf_r+0x6bc>
   84738:	46d1      	mov	r9, sl
   8473a:	f8cd c014 	str.w	ip, [sp, #20]
   8473e:	4630      	mov	r0, r6
   84740:	4639      	mov	r1, r7
   84742:	220a      	movs	r2, #10
   84744:	2300      	movs	r3, #0
   84746:	f001 fdd1 	bl	862ec <__aeabi_uldivmod>
   8474a:	3230      	adds	r2, #48	; 0x30
   8474c:	4630      	mov	r0, r6
   8474e:	4639      	mov	r1, r7
   84750:	f809 2d01 	strb.w	r2, [r9, #-1]!
   84754:	2300      	movs	r3, #0
   84756:	220a      	movs	r2, #10
   84758:	f001 fdc8 	bl	862ec <__aeabi_uldivmod>
   8475c:	4606      	mov	r6, r0
   8475e:	460f      	mov	r7, r1
   84760:	ea56 0307 	orrs.w	r3, r6, r7
   84764:	d1eb      	bne.n	8473e <_vfiprintf_r+0xa26>
   84766:	f8dd c014 	ldr.w	ip, [sp, #20]
   8476a:	e787      	b.n	8467c <_vfiprintf_r+0x964>
   8476c:	2b30      	cmp	r3, #48	; 0x30
   8476e:	9b07      	ldr	r3, [sp, #28]
   84770:	d087      	beq.n	84682 <_vfiprintf_r+0x96a>
   84772:	3b01      	subs	r3, #1
   84774:	461a      	mov	r2, r3
   84776:	9307      	str	r3, [sp, #28]
   84778:	2330      	movs	r3, #48	; 0x30
   8477a:	ebc2 090a 	rsb	r9, r2, sl
   8477e:	f801 3c01 	strb.w	r3, [r1, #-1]
   84782:	f7ff bbfb 	b.w	83f7c <_vfiprintf_r+0x264>
   84786:	9801      	ldr	r0, [sp, #4]
   84788:	9900      	ldr	r1, [sp, #0]
   8478a:	aa0d      	add	r2, sp, #52	; 0x34
   8478c:	f8cd c014 	str.w	ip, [sp, #20]
   84790:	f7ff fa86 	bl	83ca0 <__sprint_r.part.0>
   84794:	2800      	cmp	r0, #0
   84796:	f47f ae82 	bne.w	8449e <_vfiprintf_r+0x786>
   8479a:	990e      	ldr	r1, [sp, #56]	; 0x38
   8479c:	4654      	mov	r4, sl
   8479e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   847a0:	1c48      	adds	r0, r1, #1
   847a2:	f8dd c014 	ldr.w	ip, [sp, #20]
   847a6:	e615      	b.n	843d4 <_vfiprintf_r+0x6bc>
   847a8:	9801      	ldr	r0, [sp, #4]
   847aa:	9900      	ldr	r1, [sp, #0]
   847ac:	aa0d      	add	r2, sp, #52	; 0x34
   847ae:	f8cd c020 	str.w	ip, [sp, #32]
   847b2:	f7ff fa75 	bl	83ca0 <__sprint_r.part.0>
   847b6:	2800      	cmp	r0, #0
   847b8:	f47f ae71 	bne.w	8449e <_vfiprintf_r+0x786>
   847bc:	990e      	ldr	r1, [sp, #56]	; 0x38
   847be:	4654      	mov	r4, sl
   847c0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   847c2:	1c48      	adds	r0, r1, #1
   847c4:	f8dd c020 	ldr.w	ip, [sp, #32]
   847c8:	e5f5      	b.n	843b6 <_vfiprintf_r+0x69e>
   847ca:	2a00      	cmp	r2, #0
   847cc:	d167      	bne.n	8489e <_vfiprintf_r+0xb86>
   847ce:	2001      	movs	r0, #1
   847d0:	4611      	mov	r1, r2
   847d2:	4654      	mov	r4, sl
   847d4:	e602      	b.n	843dc <_vfiprintf_r+0x6c4>
   847d6:	9801      	ldr	r0, [sp, #4]
   847d8:	9900      	ldr	r1, [sp, #0]
   847da:	aa0d      	add	r2, sp, #52	; 0x34
   847dc:	f7ff fa60 	bl	83ca0 <__sprint_r.part.0>
   847e0:	2800      	cmp	r0, #0
   847e2:	f47f ae5c 	bne.w	8449e <_vfiprintf_r+0x786>
   847e6:	980e      	ldr	r0, [sp, #56]	; 0x38
   847e8:	4654      	mov	r4, sl
   847ea:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   847ec:	3001      	adds	r0, #1
   847ee:	e625      	b.n	8443c <_vfiprintf_r+0x724>
   847f0:	252d      	movs	r5, #45	; 0x2d
   847f2:	4276      	negs	r6, r6
   847f4:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
   847f8:	f88d 502f 	strb.w	r5, [sp, #47]	; 0x2f
   847fc:	46e1      	mov	r9, ip
   847fe:	2301      	movs	r3, #1
   84800:	f7ff bb93 	b.w	83f2a <_vfiprintf_r+0x212>
   84804:	9b05      	ldr	r3, [sp, #20]
   84806:	4611      	mov	r1, r2
   84808:	2001      	movs	r0, #1
   8480a:	4654      	mov	r4, sl
   8480c:	2b00      	cmp	r3, #0
   8480e:	f43f ade5 	beq.w	843dc <_vfiprintf_r+0x6c4>
   84812:	aa0c      	add	r2, sp, #48	; 0x30
   84814:	2302      	movs	r3, #2
   84816:	e88a 000c 	stmia.w	sl, {r2, r3}
   8481a:	461a      	mov	r2, r3
   8481c:	e5d7      	b.n	843ce <_vfiprintf_r+0x6b6>
   8481e:	f018 0f10 	tst.w	r8, #16
   84822:	d10b      	bne.n	8483c <_vfiprintf_r+0xb24>
   84824:	f018 0f40 	tst.w	r8, #64	; 0x40
   84828:	d008      	beq.n	8483c <_vfiprintf_r+0xb24>
   8482a:	9a04      	ldr	r2, [sp, #16]
   8482c:	6813      	ldr	r3, [r2, #0]
   8482e:	3204      	adds	r2, #4
   84830:	9204      	str	r2, [sp, #16]
   84832:	f8bd 2008 	ldrh.w	r2, [sp, #8]
   84836:	801a      	strh	r2, [r3, #0]
   84838:	f7ff baa0 	b.w	83d7c <_vfiprintf_r+0x64>
   8483c:	9a04      	ldr	r2, [sp, #16]
   8483e:	6813      	ldr	r3, [r2, #0]
   84840:	3204      	adds	r2, #4
   84842:	9204      	str	r2, [sp, #16]
   84844:	9a02      	ldr	r2, [sp, #8]
   84846:	601a      	str	r2, [r3, #0]
   84848:	f7ff ba98 	b.w	83d7c <_vfiprintf_r+0x64>
   8484c:	9801      	ldr	r0, [sp, #4]
   8484e:	9900      	ldr	r1, [sp, #0]
   84850:	aa0d      	add	r2, sp, #52	; 0x34
   84852:	f8cd c020 	str.w	ip, [sp, #32]
   84856:	f7ff fa23 	bl	83ca0 <__sprint_r.part.0>
   8485a:	2800      	cmp	r0, #0
   8485c:	f47f ae1f 	bne.w	8449e <_vfiprintf_r+0x786>
   84860:	990e      	ldr	r1, [sp, #56]	; 0x38
   84862:	4654      	mov	r4, sl
   84864:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   84866:	1c48      	adds	r0, r1, #1
   84868:	f8dd c020 	ldr.w	ip, [sp, #32]
   8486c:	e592      	b.n	84394 <_vfiprintf_r+0x67c>
   8486e:	f048 0820 	orr.w	r8, r8, #32
   84872:	f10b 0001 	add.w	r0, fp, #1
   84876:	f89b 3001 	ldrb.w	r3, [fp, #1]
   8487a:	f7ff bab6 	b.w	83dea <_vfiprintf_r+0xd2>
   8487e:	426d      	negs	r5, r5
   84880:	9304      	str	r3, [sp, #16]
   84882:	4658      	mov	r0, fp
   84884:	f7ff bbc8 	b.w	84018 <_vfiprintf_r+0x300>
   84888:	9807      	ldr	r0, [sp, #28]
   8488a:	9504      	str	r5, [sp, #16]
   8488c:	f7ff f9a6 	bl	83bdc <strlen>
   84890:	f89d 502f 	ldrb.w	r5, [sp, #47]	; 0x2f
   84894:	4681      	mov	r9, r0
   84896:	f04f 0c00 	mov.w	ip, #0
   8489a:	f7ff bb6f 	b.w	83f7c <_vfiprintf_r+0x264>
   8489e:	9801      	ldr	r0, [sp, #4]
   848a0:	9900      	ldr	r1, [sp, #0]
   848a2:	aa0d      	add	r2, sp, #52	; 0x34
   848a4:	f8cd c014 	str.w	ip, [sp, #20]
   848a8:	f7ff f9fa 	bl	83ca0 <__sprint_r.part.0>
   848ac:	2800      	cmp	r0, #0
   848ae:	f47f adf6 	bne.w	8449e <_vfiprintf_r+0x786>
   848b2:	990e      	ldr	r1, [sp, #56]	; 0x38
   848b4:	4654      	mov	r4, sl
   848b6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   848b8:	1c48      	adds	r0, r1, #1
   848ba:	f8dd c014 	ldr.w	ip, [sp, #20]
   848be:	e58d      	b.n	843dc <_vfiprintf_r+0x6c4>
   848c0:	990e      	ldr	r1, [sp, #56]	; 0x38
   848c2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   848c4:	3101      	adds	r1, #1
   848c6:	4f15      	ldr	r7, [pc, #84]	; (8491c <_vfiprintf_r+0xc04>)
   848c8:	f7ff bb9a 	b.w	84000 <_vfiprintf_r+0x2e8>
   848cc:	2e06      	cmp	r6, #6
   848ce:	4b14      	ldr	r3, [pc, #80]	; (84920 <_vfiprintf_r+0xc08>)
   848d0:	bf28      	it	cs
   848d2:	f04f 0c06 	movcs.w	ip, #6
   848d6:	46e1      	mov	r9, ip
   848d8:	9504      	str	r5, [sp, #16]
   848da:	ea2c 76ec 	bic.w	r6, ip, ip, asr #31
   848de:	9307      	str	r3, [sp, #28]
   848e0:	e463      	b.n	841aa <_vfiprintf_r+0x492>
   848e2:	990e      	ldr	r1, [sp, #56]	; 0x38
   848e4:	4f0d      	ldr	r7, [pc, #52]	; (8491c <_vfiprintf_r+0xc04>)
   848e6:	f101 0e01 	add.w	lr, r1, #1
   848ea:	e61a      	b.n	84522 <_vfiprintf_r+0x80a>
   848ec:	46e1      	mov	r9, ip
   848ee:	9504      	str	r5, [sp, #16]
   848f0:	4684      	mov	ip, r0
   848f2:	f89d 502f 	ldrb.w	r5, [sp, #47]	; 0x2f
   848f6:	f7ff bb41 	b.w	83f7c <_vfiprintf_r+0x264>
   848fa:	4686      	mov	lr, r0
   848fc:	4d09      	ldr	r5, [pc, #36]	; (84924 <_vfiprintf_r+0xc0c>)
   848fe:	e66c      	b.n	845da <_vfiprintf_r+0x8c2>
   84900:	9a04      	ldr	r2, [sp, #16]
   84902:	f89b 3001 	ldrb.w	r3, [fp, #1]
   84906:	6816      	ldr	r6, [r2, #0]
   84908:	3204      	adds	r2, #4
   8490a:	2e00      	cmp	r6, #0
   8490c:	9204      	str	r2, [sp, #16]
   8490e:	f6bf aa6c 	bge.w	83dea <_vfiprintf_r+0xd2>
   84912:	f04f 36ff 	mov.w	r6, #4294967295
   84916:	f7ff ba68 	b.w	83dea <_vfiprintf_r+0xd2>
   8491a:	bf00      	nop
   8491c:	00086a28 	.word	0x00086a28
   84920:	00086a20 	.word	0x00086a20
   84924:	000869e8 	.word	0x000869e8

00084928 <__sbprintf>:
   84928:	e92d 45f0 	stmdb	sp!, {r4, r5, r6, r7, r8, sl, lr}
   8492c:	4688      	mov	r8, r1
   8492e:	6e4f      	ldr	r7, [r1, #100]	; 0x64
   84930:	f2ad 4d6c 	subw	sp, sp, #1132	; 0x46c
   84934:	9719      	str	r7, [sp, #100]	; 0x64
   84936:	f8d8 701c 	ldr.w	r7, [r8, #28]
   8493a:	f8b1 e00c 	ldrh.w	lr, [r1, #12]
   8493e:	f8b1 a00e 	ldrh.w	sl, [r1, #14]
   84942:	9707      	str	r7, [sp, #28]
   84944:	f8d8 7024 	ldr.w	r7, [r8, #36]	; 0x24
   84948:	ac1a      	add	r4, sp, #104	; 0x68
   8494a:	f44f 6580 	mov.w	r5, #1024	; 0x400
   8494e:	f02e 0e02 	bic.w	lr, lr, #2
   84952:	2600      	movs	r6, #0
   84954:	4669      	mov	r1, sp
   84956:	9400      	str	r4, [sp, #0]
   84958:	9404      	str	r4, [sp, #16]
   8495a:	9502      	str	r5, [sp, #8]
   8495c:	9505      	str	r5, [sp, #20]
   8495e:	f8ad e00c 	strh.w	lr, [sp, #12]
   84962:	f8ad a00e 	strh.w	sl, [sp, #14]
   84966:	9709      	str	r7, [sp, #36]	; 0x24
   84968:	9606      	str	r6, [sp, #24]
   8496a:	4605      	mov	r5, r0
   8496c:	f7ff f9d4 	bl	83d18 <_vfiprintf_r>
   84970:	1e04      	subs	r4, r0, #0
   84972:	db07      	blt.n	84984 <__sbprintf+0x5c>
   84974:	4628      	mov	r0, r5
   84976:	4669      	mov	r1, sp
   84978:	f000 f92a 	bl	84bd0 <_fflush_r>
   8497c:	42b0      	cmp	r0, r6
   8497e:	bf18      	it	ne
   84980:	f04f 34ff 	movne.w	r4, #4294967295
   84984:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   84988:	065b      	lsls	r3, r3, #25
   8498a:	d505      	bpl.n	84998 <__sbprintf+0x70>
   8498c:	f8b8 300c 	ldrh.w	r3, [r8, #12]
   84990:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   84994:	f8a8 300c 	strh.w	r3, [r8, #12]
   84998:	4620      	mov	r0, r4
   8499a:	f20d 4d6c 	addw	sp, sp, #1132	; 0x46c
   8499e:	e8bd 85f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl, pc}
   849a2:	bf00      	nop

000849a4 <__swsetup_r>:
   849a4:	b538      	push	{r3, r4, r5, lr}
   849a6:	4b2f      	ldr	r3, [pc, #188]	; (84a64 <__swsetup_r+0xc0>)
   849a8:	4605      	mov	r5, r0
   849aa:	6818      	ldr	r0, [r3, #0]
   849ac:	460c      	mov	r4, r1
   849ae:	b110      	cbz	r0, 849b6 <__swsetup_r+0x12>
   849b0:	6b83      	ldr	r3, [r0, #56]	; 0x38
   849b2:	2b00      	cmp	r3, #0
   849b4:	d036      	beq.n	84a24 <__swsetup_r+0x80>
   849b6:	89a2      	ldrh	r2, [r4, #12]
   849b8:	b293      	uxth	r3, r2
   849ba:	0718      	lsls	r0, r3, #28
   849bc:	d50c      	bpl.n	849d8 <__swsetup_r+0x34>
   849be:	6920      	ldr	r0, [r4, #16]
   849c0:	b1a8      	cbz	r0, 849ee <__swsetup_r+0x4a>
   849c2:	f013 0201 	ands.w	r2, r3, #1
   849c6:	d01e      	beq.n	84a06 <__swsetup_r+0x62>
   849c8:	6963      	ldr	r3, [r4, #20]
   849ca:	2200      	movs	r2, #0
   849cc:	425b      	negs	r3, r3
   849ce:	61a3      	str	r3, [r4, #24]
   849d0:	60a2      	str	r2, [r4, #8]
   849d2:	b1f0      	cbz	r0, 84a12 <__swsetup_r+0x6e>
   849d4:	2000      	movs	r0, #0
   849d6:	bd38      	pop	{r3, r4, r5, pc}
   849d8:	06d9      	lsls	r1, r3, #27
   849da:	d53a      	bpl.n	84a52 <__swsetup_r+0xae>
   849dc:	0758      	lsls	r0, r3, #29
   849de:	d424      	bmi.n	84a2a <__swsetup_r+0x86>
   849e0:	6920      	ldr	r0, [r4, #16]
   849e2:	f042 0308 	orr.w	r3, r2, #8
   849e6:	81a3      	strh	r3, [r4, #12]
   849e8:	b29b      	uxth	r3, r3
   849ea:	2800      	cmp	r0, #0
   849ec:	d1e9      	bne.n	849c2 <__swsetup_r+0x1e>
   849ee:	f403 7220 	and.w	r2, r3, #640	; 0x280
   849f2:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   849f6:	d0e4      	beq.n	849c2 <__swsetup_r+0x1e>
   849f8:	4628      	mov	r0, r5
   849fa:	4621      	mov	r1, r4
   849fc:	f000 fcee 	bl	853dc <__smakebuf_r>
   84a00:	89a3      	ldrh	r3, [r4, #12]
   84a02:	6920      	ldr	r0, [r4, #16]
   84a04:	e7dd      	b.n	849c2 <__swsetup_r+0x1e>
   84a06:	0799      	lsls	r1, r3, #30
   84a08:	bf58      	it	pl
   84a0a:	6962      	ldrpl	r2, [r4, #20]
   84a0c:	60a2      	str	r2, [r4, #8]
   84a0e:	2800      	cmp	r0, #0
   84a10:	d1e0      	bne.n	849d4 <__swsetup_r+0x30>
   84a12:	89a3      	ldrh	r3, [r4, #12]
   84a14:	061a      	lsls	r2, r3, #24
   84a16:	d5de      	bpl.n	849d6 <__swsetup_r+0x32>
   84a18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   84a1c:	81a3      	strh	r3, [r4, #12]
   84a1e:	f04f 30ff 	mov.w	r0, #4294967295
   84a22:	bd38      	pop	{r3, r4, r5, pc}
   84a24:	f000 f968 	bl	84cf8 <__sinit>
   84a28:	e7c5      	b.n	849b6 <__swsetup_r+0x12>
   84a2a:	6b21      	ldr	r1, [r4, #48]	; 0x30
   84a2c:	b149      	cbz	r1, 84a42 <__swsetup_r+0x9e>
   84a2e:	f104 0340 	add.w	r3, r4, #64	; 0x40
   84a32:	4299      	cmp	r1, r3
   84a34:	d003      	beq.n	84a3e <__swsetup_r+0x9a>
   84a36:	4628      	mov	r0, r5
   84a38:	f000 fa36 	bl	84ea8 <_free_r>
   84a3c:	89a2      	ldrh	r2, [r4, #12]
   84a3e:	2300      	movs	r3, #0
   84a40:	6323      	str	r3, [r4, #48]	; 0x30
   84a42:	6920      	ldr	r0, [r4, #16]
   84a44:	f022 0224 	bic.w	r2, r2, #36	; 0x24
   84a48:	2300      	movs	r3, #0
   84a4a:	b292      	uxth	r2, r2
   84a4c:	e884 0009 	stmia.w	r4, {r0, r3}
   84a50:	e7c7      	b.n	849e2 <__swsetup_r+0x3e>
   84a52:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   84a56:	2309      	movs	r3, #9
   84a58:	602b      	str	r3, [r5, #0]
   84a5a:	f04f 30ff 	mov.w	r0, #4294967295
   84a5e:	81a2      	strh	r2, [r4, #12]
   84a60:	bd38      	pop	{r3, r4, r5, pc}
   84a62:	bf00      	nop
   84a64:	20070580 	.word	0x20070580

00084a68 <register_fini>:
   84a68:	4b02      	ldr	r3, [pc, #8]	; (84a74 <register_fini+0xc>)
   84a6a:	b113      	cbz	r3, 84a72 <register_fini+0xa>
   84a6c:	4802      	ldr	r0, [pc, #8]	; (84a78 <register_fini+0x10>)
   84a6e:	f000 b805 	b.w	84a7c <atexit>
   84a72:	4770      	bx	lr
   84a74:	00000000 	.word	0x00000000
   84a78:	00084d0d 	.word	0x00084d0d

00084a7c <atexit>:
   84a7c:	4601      	mov	r1, r0
   84a7e:	2000      	movs	r0, #0
   84a80:	4602      	mov	r2, r0
   84a82:	4603      	mov	r3, r0
   84a84:	f001 bb3e 	b.w	86104 <__register_exitproc>

00084a88 <__sflush_r>:
   84a88:	898b      	ldrh	r3, [r1, #12]
   84a8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   84a8e:	b29a      	uxth	r2, r3
   84a90:	460d      	mov	r5, r1
   84a92:	0711      	lsls	r1, r2, #28
   84a94:	4680      	mov	r8, r0
   84a96:	d43c      	bmi.n	84b12 <__sflush_r+0x8a>
   84a98:	686a      	ldr	r2, [r5, #4]
   84a9a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   84a9e:	2a00      	cmp	r2, #0
   84aa0:	81ab      	strh	r3, [r5, #12]
   84aa2:	dd65      	ble.n	84b70 <__sflush_r+0xe8>
   84aa4:	6aae      	ldr	r6, [r5, #40]	; 0x28
   84aa6:	2e00      	cmp	r6, #0
   84aa8:	d04b      	beq.n	84b42 <__sflush_r+0xba>
   84aaa:	b29b      	uxth	r3, r3
   84aac:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
   84ab0:	2100      	movs	r1, #0
   84ab2:	b292      	uxth	r2, r2
   84ab4:	f8d8 4000 	ldr.w	r4, [r8]
   84ab8:	f8c8 1000 	str.w	r1, [r8]
   84abc:	2a00      	cmp	r2, #0
   84abe:	d05b      	beq.n	84b78 <__sflush_r+0xf0>
   84ac0:	6d2a      	ldr	r2, [r5, #80]	; 0x50
   84ac2:	075f      	lsls	r7, r3, #29
   84ac4:	d505      	bpl.n	84ad2 <__sflush_r+0x4a>
   84ac6:	6869      	ldr	r1, [r5, #4]
   84ac8:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   84aca:	1a52      	subs	r2, r2, r1
   84acc:	b10b      	cbz	r3, 84ad2 <__sflush_r+0x4a>
   84ace:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   84ad0:	1ad2      	subs	r2, r2, r3
   84ad2:	4640      	mov	r0, r8
   84ad4:	69e9      	ldr	r1, [r5, #28]
   84ad6:	2300      	movs	r3, #0
   84ad8:	47b0      	blx	r6
   84ada:	1c46      	adds	r6, r0, #1
   84adc:	d056      	beq.n	84b8c <__sflush_r+0x104>
   84ade:	89ab      	ldrh	r3, [r5, #12]
   84ae0:	692a      	ldr	r2, [r5, #16]
   84ae2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   84ae6:	b29b      	uxth	r3, r3
   84ae8:	2100      	movs	r1, #0
   84aea:	602a      	str	r2, [r5, #0]
   84aec:	04da      	lsls	r2, r3, #19
   84aee:	81ab      	strh	r3, [r5, #12]
   84af0:	6069      	str	r1, [r5, #4]
   84af2:	d43b      	bmi.n	84b6c <__sflush_r+0xe4>
   84af4:	6b29      	ldr	r1, [r5, #48]	; 0x30
   84af6:	f8c8 4000 	str.w	r4, [r8]
   84afa:	b311      	cbz	r1, 84b42 <__sflush_r+0xba>
   84afc:	f105 0340 	add.w	r3, r5, #64	; 0x40
   84b00:	4299      	cmp	r1, r3
   84b02:	d002      	beq.n	84b0a <__sflush_r+0x82>
   84b04:	4640      	mov	r0, r8
   84b06:	f000 f9cf 	bl	84ea8 <_free_r>
   84b0a:	2000      	movs	r0, #0
   84b0c:	6328      	str	r0, [r5, #48]	; 0x30
   84b0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   84b12:	692e      	ldr	r6, [r5, #16]
   84b14:	b1ae      	cbz	r6, 84b42 <__sflush_r+0xba>
   84b16:	0791      	lsls	r1, r2, #30
   84b18:	682c      	ldr	r4, [r5, #0]
   84b1a:	bf0c      	ite	eq
   84b1c:	696b      	ldreq	r3, [r5, #20]
   84b1e:	2300      	movne	r3, #0
   84b20:	602e      	str	r6, [r5, #0]
   84b22:	1ba4      	subs	r4, r4, r6
   84b24:	60ab      	str	r3, [r5, #8]
   84b26:	e00a      	b.n	84b3e <__sflush_r+0xb6>
   84b28:	4632      	mov	r2, r6
   84b2a:	4623      	mov	r3, r4
   84b2c:	6a6f      	ldr	r7, [r5, #36]	; 0x24
   84b2e:	4640      	mov	r0, r8
   84b30:	69e9      	ldr	r1, [r5, #28]
   84b32:	47b8      	blx	r7
   84b34:	2800      	cmp	r0, #0
   84b36:	eba4 0400 	sub.w	r4, r4, r0
   84b3a:	4406      	add	r6, r0
   84b3c:	dd04      	ble.n	84b48 <__sflush_r+0xc0>
   84b3e:	2c00      	cmp	r4, #0
   84b40:	dcf2      	bgt.n	84b28 <__sflush_r+0xa0>
   84b42:	2000      	movs	r0, #0
   84b44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   84b48:	89ab      	ldrh	r3, [r5, #12]
   84b4a:	f04f 30ff 	mov.w	r0, #4294967295
   84b4e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   84b52:	81ab      	strh	r3, [r5, #12]
   84b54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   84b58:	89ab      	ldrh	r3, [r5, #12]
   84b5a:	692a      	ldr	r2, [r5, #16]
   84b5c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   84b60:	b29b      	uxth	r3, r3
   84b62:	81ab      	strh	r3, [r5, #12]
   84b64:	04db      	lsls	r3, r3, #19
   84b66:	6069      	str	r1, [r5, #4]
   84b68:	602a      	str	r2, [r5, #0]
   84b6a:	d5c3      	bpl.n	84af4 <__sflush_r+0x6c>
   84b6c:	6528      	str	r0, [r5, #80]	; 0x50
   84b6e:	e7c1      	b.n	84af4 <__sflush_r+0x6c>
   84b70:	6bea      	ldr	r2, [r5, #60]	; 0x3c
   84b72:	2a00      	cmp	r2, #0
   84b74:	dc96      	bgt.n	84aa4 <__sflush_r+0x1c>
   84b76:	e7e4      	b.n	84b42 <__sflush_r+0xba>
   84b78:	2301      	movs	r3, #1
   84b7a:	4640      	mov	r0, r8
   84b7c:	69e9      	ldr	r1, [r5, #28]
   84b7e:	47b0      	blx	r6
   84b80:	1c43      	adds	r3, r0, #1
   84b82:	4602      	mov	r2, r0
   84b84:	d019      	beq.n	84bba <__sflush_r+0x132>
   84b86:	89ab      	ldrh	r3, [r5, #12]
   84b88:	6aae      	ldr	r6, [r5, #40]	; 0x28
   84b8a:	e79a      	b.n	84ac2 <__sflush_r+0x3a>
   84b8c:	f8d8 1000 	ldr.w	r1, [r8]
   84b90:	2900      	cmp	r1, #0
   84b92:	d0e1      	beq.n	84b58 <__sflush_r+0xd0>
   84b94:	291d      	cmp	r1, #29
   84b96:	d007      	beq.n	84ba8 <__sflush_r+0x120>
   84b98:	2916      	cmp	r1, #22
   84b9a:	d005      	beq.n	84ba8 <__sflush_r+0x120>
   84b9c:	89ab      	ldrh	r3, [r5, #12]
   84b9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   84ba2:	81ab      	strh	r3, [r5, #12]
   84ba4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   84ba8:	89ab      	ldrh	r3, [r5, #12]
   84baa:	6929      	ldr	r1, [r5, #16]
   84bac:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   84bb0:	2200      	movs	r2, #0
   84bb2:	81ab      	strh	r3, [r5, #12]
   84bb4:	e885 0006 	stmia.w	r5, {r1, r2}
   84bb8:	e79c      	b.n	84af4 <__sflush_r+0x6c>
   84bba:	f8d8 3000 	ldr.w	r3, [r8]
   84bbe:	2b00      	cmp	r3, #0
   84bc0:	d0e1      	beq.n	84b86 <__sflush_r+0xfe>
   84bc2:	2b1d      	cmp	r3, #29
   84bc4:	d001      	beq.n	84bca <__sflush_r+0x142>
   84bc6:	2b16      	cmp	r3, #22
   84bc8:	d1be      	bne.n	84b48 <__sflush_r+0xc0>
   84bca:	f8c8 4000 	str.w	r4, [r8]
   84bce:	e7b8      	b.n	84b42 <__sflush_r+0xba>

00084bd0 <_fflush_r>:
   84bd0:	b510      	push	{r4, lr}
   84bd2:	4604      	mov	r4, r0
   84bd4:	b082      	sub	sp, #8
   84bd6:	b108      	cbz	r0, 84bdc <_fflush_r+0xc>
   84bd8:	6b83      	ldr	r3, [r0, #56]	; 0x38
   84bda:	b153      	cbz	r3, 84bf2 <_fflush_r+0x22>
   84bdc:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
   84be0:	b908      	cbnz	r0, 84be6 <_fflush_r+0x16>
   84be2:	b002      	add	sp, #8
   84be4:	bd10      	pop	{r4, pc}
   84be6:	4620      	mov	r0, r4
   84be8:	b002      	add	sp, #8
   84bea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   84bee:	f7ff bf4b 	b.w	84a88 <__sflush_r>
   84bf2:	9101      	str	r1, [sp, #4]
   84bf4:	f000 f880 	bl	84cf8 <__sinit>
   84bf8:	9901      	ldr	r1, [sp, #4]
   84bfa:	e7ef      	b.n	84bdc <_fflush_r+0xc>

00084bfc <_cleanup_r>:
   84bfc:	4901      	ldr	r1, [pc, #4]	; (84c04 <_cleanup_r+0x8>)
   84bfe:	f000 bbbb 	b.w	85378 <_fwalk_reent>
   84c02:	bf00      	nop
   84c04:	000861cd 	.word	0x000861cd

00084c08 <__sinit.part.1>:
   84c08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   84c0c:	4607      	mov	r7, r0
   84c0e:	4835      	ldr	r0, [pc, #212]	; (84ce4 <__sinit.part.1+0xdc>)
   84c10:	687d      	ldr	r5, [r7, #4]
   84c12:	2400      	movs	r4, #0
   84c14:	f507 723b 	add.w	r2, r7, #748	; 0x2ec
   84c18:	2304      	movs	r3, #4
   84c1a:	2103      	movs	r1, #3
   84c1c:	63f8      	str	r0, [r7, #60]	; 0x3c
   84c1e:	f8c7 12e4 	str.w	r1, [r7, #740]	; 0x2e4
   84c22:	f8c7 22e8 	str.w	r2, [r7, #744]	; 0x2e8
   84c26:	f8c7 42e0 	str.w	r4, [r7, #736]	; 0x2e0
   84c2a:	b083      	sub	sp, #12
   84c2c:	602c      	str	r4, [r5, #0]
   84c2e:	606c      	str	r4, [r5, #4]
   84c30:	60ac      	str	r4, [r5, #8]
   84c32:	666c      	str	r4, [r5, #100]	; 0x64
   84c34:	81ec      	strh	r4, [r5, #14]
   84c36:	612c      	str	r4, [r5, #16]
   84c38:	616c      	str	r4, [r5, #20]
   84c3a:	61ac      	str	r4, [r5, #24]
   84c3c:	81ab      	strh	r3, [r5, #12]
   84c3e:	4621      	mov	r1, r4
   84c40:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   84c44:	2208      	movs	r2, #8
   84c46:	f7fe fef7 	bl	83a38 <memset>
   84c4a:	f8df b09c 	ldr.w	fp, [pc, #156]	; 84ce8 <__sinit.part.1+0xe0>
   84c4e:	68be      	ldr	r6, [r7, #8]
   84c50:	f8df a098 	ldr.w	sl, [pc, #152]	; 84cec <__sinit.part.1+0xe4>
   84c54:	f8df 9098 	ldr.w	r9, [pc, #152]	; 84cf0 <__sinit.part.1+0xe8>
   84c58:	f8df 8098 	ldr.w	r8, [pc, #152]	; 84cf4 <__sinit.part.1+0xec>
   84c5c:	2301      	movs	r3, #1
   84c5e:	2209      	movs	r2, #9
   84c60:	f8c5 b020 	str.w	fp, [r5, #32]
   84c64:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
   84c68:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
   84c6c:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
   84c70:	61ed      	str	r5, [r5, #28]
   84c72:	4621      	mov	r1, r4
   84c74:	81f3      	strh	r3, [r6, #14]
   84c76:	81b2      	strh	r2, [r6, #12]
   84c78:	f106 005c 	add.w	r0, r6, #92	; 0x5c
   84c7c:	6034      	str	r4, [r6, #0]
   84c7e:	6074      	str	r4, [r6, #4]
   84c80:	60b4      	str	r4, [r6, #8]
   84c82:	6674      	str	r4, [r6, #100]	; 0x64
   84c84:	6134      	str	r4, [r6, #16]
   84c86:	6174      	str	r4, [r6, #20]
   84c88:	61b4      	str	r4, [r6, #24]
   84c8a:	2208      	movs	r2, #8
   84c8c:	9301      	str	r3, [sp, #4]
   84c8e:	f7fe fed3 	bl	83a38 <memset>
   84c92:	68fd      	ldr	r5, [r7, #12]
   84c94:	2012      	movs	r0, #18
   84c96:	2202      	movs	r2, #2
   84c98:	61f6      	str	r6, [r6, #28]
   84c9a:	f8c6 b020 	str.w	fp, [r6, #32]
   84c9e:	f8c6 a024 	str.w	sl, [r6, #36]	; 0x24
   84ca2:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
   84ca6:	f8c6 802c 	str.w	r8, [r6, #44]	; 0x2c
   84caa:	4621      	mov	r1, r4
   84cac:	81a8      	strh	r0, [r5, #12]
   84cae:	81ea      	strh	r2, [r5, #14]
   84cb0:	602c      	str	r4, [r5, #0]
   84cb2:	606c      	str	r4, [r5, #4]
   84cb4:	60ac      	str	r4, [r5, #8]
   84cb6:	666c      	str	r4, [r5, #100]	; 0x64
   84cb8:	612c      	str	r4, [r5, #16]
   84cba:	616c      	str	r4, [r5, #20]
   84cbc:	61ac      	str	r4, [r5, #24]
   84cbe:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   84cc2:	2208      	movs	r2, #8
   84cc4:	f7fe feb8 	bl	83a38 <memset>
   84cc8:	9b01      	ldr	r3, [sp, #4]
   84cca:	61ed      	str	r5, [r5, #28]
   84ccc:	f8c5 b020 	str.w	fp, [r5, #32]
   84cd0:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
   84cd4:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
   84cd8:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
   84cdc:	63bb      	str	r3, [r7, #56]	; 0x38
   84cde:	b003      	add	sp, #12
   84ce0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   84ce4:	00084bfd 	.word	0x00084bfd
   84ce8:	00085f41 	.word	0x00085f41
   84cec:	00085f65 	.word	0x00085f65
   84cf0:	00085f9d 	.word	0x00085f9d
   84cf4:	00085fbd 	.word	0x00085fbd

00084cf8 <__sinit>:
   84cf8:	6b83      	ldr	r3, [r0, #56]	; 0x38
   84cfa:	b103      	cbz	r3, 84cfe <__sinit+0x6>
   84cfc:	4770      	bx	lr
   84cfe:	f7ff bf83 	b.w	84c08 <__sinit.part.1>
   84d02:	bf00      	nop

00084d04 <__sfp_lock_acquire>:
   84d04:	4770      	bx	lr
   84d06:	bf00      	nop

00084d08 <__sfp_lock_release>:
   84d08:	4770      	bx	lr
   84d0a:	bf00      	nop

00084d0c <__libc_fini_array>:
   84d0c:	b538      	push	{r3, r4, r5, lr}
   84d0e:	4b08      	ldr	r3, [pc, #32]	; (84d30 <__libc_fini_array+0x24>)
   84d10:	4d08      	ldr	r5, [pc, #32]	; (84d34 <__libc_fini_array+0x28>)
   84d12:	1aed      	subs	r5, r5, r3
   84d14:	10ac      	asrs	r4, r5, #2
   84d16:	bf18      	it	ne
   84d18:	18ed      	addne	r5, r5, r3
   84d1a:	d005      	beq.n	84d28 <__libc_fini_array+0x1c>
   84d1c:	3c01      	subs	r4, #1
   84d1e:	f855 3d04 	ldr.w	r3, [r5, #-4]!
   84d22:	4798      	blx	r3
   84d24:	2c00      	cmp	r4, #0
   84d26:	d1f9      	bne.n	84d1c <__libc_fini_array+0x10>
   84d28:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   84d2c:	f001 be8e 	b.w	86a4c <_fini>
   84d30:	00086a58 	.word	0x00086a58
   84d34:	00086a5c 	.word	0x00086a5c

00084d38 <__fputwc>:
   84d38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   84d3c:	b082      	sub	sp, #8
   84d3e:	4607      	mov	r7, r0
   84d40:	460e      	mov	r6, r1
   84d42:	4614      	mov	r4, r2
   84d44:	f000 fb44 	bl	853d0 <__locale_mb_cur_max>
   84d48:	2801      	cmp	r0, #1
   84d4a:	d040      	beq.n	84dce <__fputwc+0x96>
   84d4c:	4638      	mov	r0, r7
   84d4e:	a901      	add	r1, sp, #4
   84d50:	4632      	mov	r2, r6
   84d52:	f104 035c 	add.w	r3, r4, #92	; 0x5c
   84d56:	f001 f989 	bl	8606c <_wcrtomb_r>
   84d5a:	f1b0 3fff 	cmp.w	r0, #4294967295
   84d5e:	4680      	mov	r8, r0
   84d60:	d02e      	beq.n	84dc0 <__fputwc+0x88>
   84d62:	2800      	cmp	r0, #0
   84d64:	d03b      	beq.n	84dde <__fputwc+0xa6>
   84d66:	f89d 1004 	ldrb.w	r1, [sp, #4]
   84d6a:	2500      	movs	r5, #0
   84d6c:	e009      	b.n	84d82 <__fputwc+0x4a>
   84d6e:	6823      	ldr	r3, [r4, #0]
   84d70:	7019      	strb	r1, [r3, #0]
   84d72:	6823      	ldr	r3, [r4, #0]
   84d74:	3301      	adds	r3, #1
   84d76:	6023      	str	r3, [r4, #0]
   84d78:	3501      	adds	r5, #1
   84d7a:	45a8      	cmp	r8, r5
   84d7c:	d92f      	bls.n	84dde <__fputwc+0xa6>
   84d7e:	ab01      	add	r3, sp, #4
   84d80:	5d59      	ldrb	r1, [r3, r5]
   84d82:	68a3      	ldr	r3, [r4, #8]
   84d84:	3b01      	subs	r3, #1
   84d86:	2b00      	cmp	r3, #0
   84d88:	60a3      	str	r3, [r4, #8]
   84d8a:	daf0      	bge.n	84d6e <__fputwc+0x36>
   84d8c:	69a2      	ldr	r2, [r4, #24]
   84d8e:	4293      	cmp	r3, r2
   84d90:	db06      	blt.n	84da0 <__fputwc+0x68>
   84d92:	6823      	ldr	r3, [r4, #0]
   84d94:	7019      	strb	r1, [r3, #0]
   84d96:	6823      	ldr	r3, [r4, #0]
   84d98:	7819      	ldrb	r1, [r3, #0]
   84d9a:	3301      	adds	r3, #1
   84d9c:	290a      	cmp	r1, #10
   84d9e:	d1ea      	bne.n	84d76 <__fputwc+0x3e>
   84da0:	4638      	mov	r0, r7
   84da2:	4622      	mov	r2, r4
   84da4:	f001 f90e 	bl	85fc4 <__swbuf_r>
   84da8:	f1a0 30ff 	sub.w	r0, r0, #4294967295
   84dac:	fab0 f080 	clz	r0, r0
   84db0:	0940      	lsrs	r0, r0, #5
   84db2:	2800      	cmp	r0, #0
   84db4:	d0e0      	beq.n	84d78 <__fputwc+0x40>
   84db6:	f04f 30ff 	mov.w	r0, #4294967295
   84dba:	b002      	add	sp, #8
   84dbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   84dc0:	89a3      	ldrh	r3, [r4, #12]
   84dc2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   84dc6:	81a3      	strh	r3, [r4, #12]
   84dc8:	b002      	add	sp, #8
   84dca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   84dce:	1e73      	subs	r3, r6, #1
   84dd0:	2bfe      	cmp	r3, #254	; 0xfe
   84dd2:	d8bb      	bhi.n	84d4c <__fputwc+0x14>
   84dd4:	b2f1      	uxtb	r1, r6
   84dd6:	4680      	mov	r8, r0
   84dd8:	f88d 1004 	strb.w	r1, [sp, #4]
   84ddc:	e7c5      	b.n	84d6a <__fputwc+0x32>
   84dde:	4630      	mov	r0, r6
   84de0:	b002      	add	sp, #8
   84de2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   84de6:	bf00      	nop

00084de8 <_fputwc_r>:
   84de8:	8993      	ldrh	r3, [r2, #12]
   84dea:	f413 5f00 	tst.w	r3, #8192	; 0x2000
   84dee:	d10b      	bne.n	84e08 <_fputwc_r+0x20>
   84df0:	b410      	push	{r4}
   84df2:	6e54      	ldr	r4, [r2, #100]	; 0x64
   84df4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   84df8:	f444 5400 	orr.w	r4, r4, #8192	; 0x2000
   84dfc:	6654      	str	r4, [r2, #100]	; 0x64
   84dfe:	8193      	strh	r3, [r2, #12]
   84e00:	f85d 4b04 	ldr.w	r4, [sp], #4
   84e04:	f7ff bf98 	b.w	84d38 <__fputwc>
   84e08:	f7ff bf96 	b.w	84d38 <__fputwc>

00084e0c <_malloc_trim_r>:
   84e0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   84e0e:	460c      	mov	r4, r1
   84e10:	4f22      	ldr	r7, [pc, #136]	; (84e9c <_malloc_trim_r+0x90>)
   84e12:	4606      	mov	r6, r0
   84e14:	f000 fe8e 	bl	85b34 <__malloc_lock>
   84e18:	68bb      	ldr	r3, [r7, #8]
   84e1a:	685d      	ldr	r5, [r3, #4]
   84e1c:	f025 0503 	bic.w	r5, r5, #3
   84e20:	1b29      	subs	r1, r5, r4
   84e22:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
   84e26:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
   84e2a:	f021 010f 	bic.w	r1, r1, #15
   84e2e:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
   84e32:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
   84e36:	db07      	blt.n	84e48 <_malloc_trim_r+0x3c>
   84e38:	4630      	mov	r0, r6
   84e3a:	2100      	movs	r1, #0
   84e3c:	f001 f86e 	bl	85f1c <_sbrk_r>
   84e40:	68bb      	ldr	r3, [r7, #8]
   84e42:	442b      	add	r3, r5
   84e44:	4298      	cmp	r0, r3
   84e46:	d004      	beq.n	84e52 <_malloc_trim_r+0x46>
   84e48:	4630      	mov	r0, r6
   84e4a:	f000 fe75 	bl	85b38 <__malloc_unlock>
   84e4e:	2000      	movs	r0, #0
   84e50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   84e52:	4630      	mov	r0, r6
   84e54:	4261      	negs	r1, r4
   84e56:	f001 f861 	bl	85f1c <_sbrk_r>
   84e5a:	3001      	adds	r0, #1
   84e5c:	d00d      	beq.n	84e7a <_malloc_trim_r+0x6e>
   84e5e:	4b10      	ldr	r3, [pc, #64]	; (84ea0 <_malloc_trim_r+0x94>)
   84e60:	68ba      	ldr	r2, [r7, #8]
   84e62:	6819      	ldr	r1, [r3, #0]
   84e64:	1b2d      	subs	r5, r5, r4
   84e66:	f045 0501 	orr.w	r5, r5, #1
   84e6a:	4630      	mov	r0, r6
   84e6c:	1b09      	subs	r1, r1, r4
   84e6e:	6055      	str	r5, [r2, #4]
   84e70:	6019      	str	r1, [r3, #0]
   84e72:	f000 fe61 	bl	85b38 <__malloc_unlock>
   84e76:	2001      	movs	r0, #1
   84e78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   84e7a:	4630      	mov	r0, r6
   84e7c:	2100      	movs	r1, #0
   84e7e:	f001 f84d 	bl	85f1c <_sbrk_r>
   84e82:	68ba      	ldr	r2, [r7, #8]
   84e84:	1a83      	subs	r3, r0, r2
   84e86:	2b0f      	cmp	r3, #15
   84e88:	ddde      	ble.n	84e48 <_malloc_trim_r+0x3c>
   84e8a:	4c06      	ldr	r4, [pc, #24]	; (84ea4 <_malloc_trim_r+0x98>)
   84e8c:	4904      	ldr	r1, [pc, #16]	; (84ea0 <_malloc_trim_r+0x94>)
   84e8e:	6824      	ldr	r4, [r4, #0]
   84e90:	f043 0301 	orr.w	r3, r3, #1
   84e94:	1b00      	subs	r0, r0, r4
   84e96:	6053      	str	r3, [r2, #4]
   84e98:	6008      	str	r0, [r1, #0]
   84e9a:	e7d5      	b.n	84e48 <_malloc_trim_r+0x3c>
   84e9c:	200705a8 	.word	0x200705a8
   84ea0:	20078c48 	.word	0x20078c48
   84ea4:	200709b4 	.word	0x200709b4

00084ea8 <_free_r>:
   84ea8:	2900      	cmp	r1, #0
   84eaa:	d04e      	beq.n	84f4a <_free_r+0xa2>
   84eac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   84eb0:	460c      	mov	r4, r1
   84eb2:	4680      	mov	r8, r0
   84eb4:	f000 fe3e 	bl	85b34 <__malloc_lock>
   84eb8:	f854 7c04 	ldr.w	r7, [r4, #-4]
   84ebc:	4962      	ldr	r1, [pc, #392]	; (85048 <_free_r+0x1a0>)
   84ebe:	f1a4 0508 	sub.w	r5, r4, #8
   84ec2:	f027 0201 	bic.w	r2, r7, #1
   84ec6:	18ab      	adds	r3, r5, r2
   84ec8:	688e      	ldr	r6, [r1, #8]
   84eca:	6858      	ldr	r0, [r3, #4]
   84ecc:	429e      	cmp	r6, r3
   84ece:	f020 0003 	bic.w	r0, r0, #3
   84ed2:	d05a      	beq.n	84f8a <_free_r+0xe2>
   84ed4:	07fe      	lsls	r6, r7, #31
   84ed6:	6058      	str	r0, [r3, #4]
   84ed8:	d40b      	bmi.n	84ef2 <_free_r+0x4a>
   84eda:	f854 7c08 	ldr.w	r7, [r4, #-8]
   84ede:	f101 0e08 	add.w	lr, r1, #8
   84ee2:	1bed      	subs	r5, r5, r7
   84ee4:	68ac      	ldr	r4, [r5, #8]
   84ee6:	443a      	add	r2, r7
   84ee8:	4574      	cmp	r4, lr
   84eea:	d067      	beq.n	84fbc <_free_r+0x114>
   84eec:	68ef      	ldr	r7, [r5, #12]
   84eee:	60e7      	str	r7, [r4, #12]
   84ef0:	60bc      	str	r4, [r7, #8]
   84ef2:	181c      	adds	r4, r3, r0
   84ef4:	6864      	ldr	r4, [r4, #4]
   84ef6:	07e4      	lsls	r4, r4, #31
   84ef8:	d40c      	bmi.n	84f14 <_free_r+0x6c>
   84efa:	4f54      	ldr	r7, [pc, #336]	; (8504c <_free_r+0x1a4>)
   84efc:	689c      	ldr	r4, [r3, #8]
   84efe:	4402      	add	r2, r0
   84f00:	42bc      	cmp	r4, r7
   84f02:	d07c      	beq.n	84ffe <_free_r+0x156>
   84f04:	68d8      	ldr	r0, [r3, #12]
   84f06:	f042 0301 	orr.w	r3, r2, #1
   84f0a:	60e0      	str	r0, [r4, #12]
   84f0c:	6084      	str	r4, [r0, #8]
   84f0e:	606b      	str	r3, [r5, #4]
   84f10:	50aa      	str	r2, [r5, r2]
   84f12:	e003      	b.n	84f1c <_free_r+0x74>
   84f14:	f042 0301 	orr.w	r3, r2, #1
   84f18:	606b      	str	r3, [r5, #4]
   84f1a:	50aa      	str	r2, [r5, r2]
   84f1c:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   84f20:	d214      	bcs.n	84f4c <_free_r+0xa4>
   84f22:	08d2      	lsrs	r2, r2, #3
   84f24:	eb01 03c2 	add.w	r3, r1, r2, lsl #3
   84f28:	2401      	movs	r4, #1
   84f2a:	6848      	ldr	r0, [r1, #4]
   84f2c:	1092      	asrs	r2, r2, #2
   84f2e:	fa04 f202 	lsl.w	r2, r4, r2
   84f32:	689c      	ldr	r4, [r3, #8]
   84f34:	4310      	orrs	r0, r2
   84f36:	60ac      	str	r4, [r5, #8]
   84f38:	60eb      	str	r3, [r5, #12]
   84f3a:	6048      	str	r0, [r1, #4]
   84f3c:	609d      	str	r5, [r3, #8]
   84f3e:	60e5      	str	r5, [r4, #12]
   84f40:	4640      	mov	r0, r8
   84f42:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   84f46:	f000 bdf7 	b.w	85b38 <__malloc_unlock>
   84f4a:	4770      	bx	lr
   84f4c:	0a53      	lsrs	r3, r2, #9
   84f4e:	2b04      	cmp	r3, #4
   84f50:	d847      	bhi.n	84fe2 <_free_r+0x13a>
   84f52:	0993      	lsrs	r3, r2, #6
   84f54:	f103 0438 	add.w	r4, r3, #56	; 0x38
   84f58:	0060      	lsls	r0, r4, #1
   84f5a:	eb01 0080 	add.w	r0, r1, r0, lsl #2
   84f5e:	6883      	ldr	r3, [r0, #8]
   84f60:	4939      	ldr	r1, [pc, #228]	; (85048 <_free_r+0x1a0>)
   84f62:	4283      	cmp	r3, r0
   84f64:	d043      	beq.n	84fee <_free_r+0x146>
   84f66:	6859      	ldr	r1, [r3, #4]
   84f68:	f021 0103 	bic.w	r1, r1, #3
   84f6c:	4291      	cmp	r1, r2
   84f6e:	d902      	bls.n	84f76 <_free_r+0xce>
   84f70:	689b      	ldr	r3, [r3, #8]
   84f72:	4298      	cmp	r0, r3
   84f74:	d1f7      	bne.n	84f66 <_free_r+0xbe>
   84f76:	68da      	ldr	r2, [r3, #12]
   84f78:	60ea      	str	r2, [r5, #12]
   84f7a:	60ab      	str	r3, [r5, #8]
   84f7c:	4640      	mov	r0, r8
   84f7e:	6095      	str	r5, [r2, #8]
   84f80:	60dd      	str	r5, [r3, #12]
   84f82:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   84f86:	f000 bdd7 	b.w	85b38 <__malloc_unlock>
   84f8a:	07ff      	lsls	r7, r7, #31
   84f8c:	4402      	add	r2, r0
   84f8e:	d407      	bmi.n	84fa0 <_free_r+0xf8>
   84f90:	f854 4c08 	ldr.w	r4, [r4, #-8]
   84f94:	1b2d      	subs	r5, r5, r4
   84f96:	68eb      	ldr	r3, [r5, #12]
   84f98:	68a8      	ldr	r0, [r5, #8]
   84f9a:	4422      	add	r2, r4
   84f9c:	60c3      	str	r3, [r0, #12]
   84f9e:	6098      	str	r0, [r3, #8]
   84fa0:	4b2b      	ldr	r3, [pc, #172]	; (85050 <_free_r+0x1a8>)
   84fa2:	f042 0001 	orr.w	r0, r2, #1
   84fa6:	681b      	ldr	r3, [r3, #0]
   84fa8:	6068      	str	r0, [r5, #4]
   84faa:	429a      	cmp	r2, r3
   84fac:	608d      	str	r5, [r1, #8]
   84fae:	d3c7      	bcc.n	84f40 <_free_r+0x98>
   84fb0:	4b28      	ldr	r3, [pc, #160]	; (85054 <_free_r+0x1ac>)
   84fb2:	4640      	mov	r0, r8
   84fb4:	6819      	ldr	r1, [r3, #0]
   84fb6:	f7ff ff29 	bl	84e0c <_malloc_trim_r>
   84fba:	e7c1      	b.n	84f40 <_free_r+0x98>
   84fbc:	1819      	adds	r1, r3, r0
   84fbe:	6849      	ldr	r1, [r1, #4]
   84fc0:	07c9      	lsls	r1, r1, #31
   84fc2:	d409      	bmi.n	84fd8 <_free_r+0x130>
   84fc4:	68d9      	ldr	r1, [r3, #12]
   84fc6:	4402      	add	r2, r0
   84fc8:	689b      	ldr	r3, [r3, #8]
   84fca:	f042 0001 	orr.w	r0, r2, #1
   84fce:	60d9      	str	r1, [r3, #12]
   84fd0:	608b      	str	r3, [r1, #8]
   84fd2:	6068      	str	r0, [r5, #4]
   84fd4:	50aa      	str	r2, [r5, r2]
   84fd6:	e7b3      	b.n	84f40 <_free_r+0x98>
   84fd8:	f042 0301 	orr.w	r3, r2, #1
   84fdc:	606b      	str	r3, [r5, #4]
   84fde:	50aa      	str	r2, [r5, r2]
   84fe0:	e7ae      	b.n	84f40 <_free_r+0x98>
   84fe2:	2b14      	cmp	r3, #20
   84fe4:	d814      	bhi.n	85010 <_free_r+0x168>
   84fe6:	f103 045b 	add.w	r4, r3, #91	; 0x5b
   84fea:	0060      	lsls	r0, r4, #1
   84fec:	e7b5      	b.n	84f5a <_free_r+0xb2>
   84fee:	684a      	ldr	r2, [r1, #4]
   84ff0:	10a4      	asrs	r4, r4, #2
   84ff2:	2001      	movs	r0, #1
   84ff4:	40a0      	lsls	r0, r4
   84ff6:	4302      	orrs	r2, r0
   84ff8:	604a      	str	r2, [r1, #4]
   84ffa:	461a      	mov	r2, r3
   84ffc:	e7bc      	b.n	84f78 <_free_r+0xd0>
   84ffe:	f042 0301 	orr.w	r3, r2, #1
   85002:	614d      	str	r5, [r1, #20]
   85004:	610d      	str	r5, [r1, #16]
   85006:	60ec      	str	r4, [r5, #12]
   85008:	60ac      	str	r4, [r5, #8]
   8500a:	606b      	str	r3, [r5, #4]
   8500c:	50aa      	str	r2, [r5, r2]
   8500e:	e797      	b.n	84f40 <_free_r+0x98>
   85010:	2b54      	cmp	r3, #84	; 0x54
   85012:	d804      	bhi.n	8501e <_free_r+0x176>
   85014:	0b13      	lsrs	r3, r2, #12
   85016:	f103 046e 	add.w	r4, r3, #110	; 0x6e
   8501a:	0060      	lsls	r0, r4, #1
   8501c:	e79d      	b.n	84f5a <_free_r+0xb2>
   8501e:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   85022:	d804      	bhi.n	8502e <_free_r+0x186>
   85024:	0bd3      	lsrs	r3, r2, #15
   85026:	f103 0477 	add.w	r4, r3, #119	; 0x77
   8502a:	0060      	lsls	r0, r4, #1
   8502c:	e795      	b.n	84f5a <_free_r+0xb2>
   8502e:	f240 5054 	movw	r0, #1364	; 0x554
   85032:	4283      	cmp	r3, r0
   85034:	d804      	bhi.n	85040 <_free_r+0x198>
   85036:	0c93      	lsrs	r3, r2, #18
   85038:	f103 047c 	add.w	r4, r3, #124	; 0x7c
   8503c:	0060      	lsls	r0, r4, #1
   8503e:	e78c      	b.n	84f5a <_free_r+0xb2>
   85040:	20fc      	movs	r0, #252	; 0xfc
   85042:	247e      	movs	r4, #126	; 0x7e
   85044:	e789      	b.n	84f5a <_free_r+0xb2>
   85046:	bf00      	nop
   85048:	200705a8 	.word	0x200705a8
   8504c:	200705b0 	.word	0x200705b0
   85050:	200709b0 	.word	0x200709b0
   85054:	20078c44 	.word	0x20078c44

00085058 <__sfvwrite_r>:
   85058:	6893      	ldr	r3, [r2, #8]
   8505a:	2b00      	cmp	r3, #0
   8505c:	f000 80b1 	beq.w	851c2 <__sfvwrite_r+0x16a>
   85060:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   85064:	f8b1 e00c 	ldrh.w	lr, [r1, #12]
   85068:	b083      	sub	sp, #12
   8506a:	f01e 0f08 	tst.w	lr, #8
   8506e:	460c      	mov	r4, r1
   85070:	4681      	mov	r9, r0
   85072:	4616      	mov	r6, r2
   85074:	d028      	beq.n	850c8 <__sfvwrite_r+0x70>
   85076:	690b      	ldr	r3, [r1, #16]
   85078:	b333      	cbz	r3, 850c8 <__sfvwrite_r+0x70>
   8507a:	f00e 0802 	and.w	r8, lr, #2
   8507e:	fa1f f088 	uxth.w	r0, r8
   85082:	6835      	ldr	r5, [r6, #0]
   85084:	b380      	cbz	r0, 850e8 <__sfvwrite_r+0x90>
   85086:	f04f 0b00 	mov.w	fp, #0
   8508a:	46d8      	mov	r8, fp
   8508c:	f8df a2e4 	ldr.w	sl, [pc, #740]	; 85374 <__sfvwrite_r+0x31c>
   85090:	f1b8 0f00 	cmp.w	r8, #0
   85094:	f000 808f 	beq.w	851b6 <__sfvwrite_r+0x15e>
   85098:	45d0      	cmp	r8, sl
   8509a:	4643      	mov	r3, r8
   8509c:	4648      	mov	r0, r9
   8509e:	bf28      	it	cs
   850a0:	4653      	movcs	r3, sl
   850a2:	69e1      	ldr	r1, [r4, #28]
   850a4:	465a      	mov	r2, fp
   850a6:	6a67      	ldr	r7, [r4, #36]	; 0x24
   850a8:	47b8      	blx	r7
   850aa:	2800      	cmp	r0, #0
   850ac:	f340 80a8 	ble.w	85200 <__sfvwrite_r+0x1a8>
   850b0:	68b3      	ldr	r3, [r6, #8]
   850b2:	4483      	add	fp, r0
   850b4:	1a1b      	subs	r3, r3, r0
   850b6:	ebc0 0808 	rsb	r8, r0, r8
   850ba:	60b3      	str	r3, [r6, #8]
   850bc:	2b00      	cmp	r3, #0
   850be:	d1e7      	bne.n	85090 <__sfvwrite_r+0x38>
   850c0:	2000      	movs	r0, #0
   850c2:	b003      	add	sp, #12
   850c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   850c8:	4648      	mov	r0, r9
   850ca:	4621      	mov	r1, r4
   850cc:	f7ff fc6a 	bl	849a4 <__swsetup_r>
   850d0:	2800      	cmp	r0, #0
   850d2:	f040 8146 	bne.w	85362 <__sfvwrite_r+0x30a>
   850d6:	f8b4 e00c 	ldrh.w	lr, [r4, #12]
   850da:	6835      	ldr	r5, [r6, #0]
   850dc:	f00e 0802 	and.w	r8, lr, #2
   850e0:	fa1f f088 	uxth.w	r0, r8
   850e4:	2800      	cmp	r0, #0
   850e6:	d1ce      	bne.n	85086 <__sfvwrite_r+0x2e>
   850e8:	f01e 0b01 	ands.w	fp, lr, #1
   850ec:	f040 8091 	bne.w	85212 <__sfvwrite_r+0x1ba>
   850f0:	46d8      	mov	r8, fp
   850f2:	f1b8 0f00 	cmp.w	r8, #0
   850f6:	d058      	beq.n	851aa <__sfvwrite_r+0x152>
   850f8:	f41e 7f00 	tst.w	lr, #512	; 0x200
   850fc:	68a7      	ldr	r7, [r4, #8]
   850fe:	d062      	beq.n	851c6 <__sfvwrite_r+0x16e>
   85100:	45b8      	cmp	r8, r7
   85102:	46ba      	mov	sl, r7
   85104:	f0c0 80c2 	bcc.w	8528c <__sfvwrite_r+0x234>
   85108:	f41e 6f90 	tst.w	lr, #1152	; 0x480
   8510c:	f000 80c0 	beq.w	85290 <__sfvwrite_r+0x238>
   85110:	6967      	ldr	r7, [r4, #20]
   85112:	6921      	ldr	r1, [r4, #16]
   85114:	6823      	ldr	r3, [r4, #0]
   85116:	eb07 0747 	add.w	r7, r7, r7, lsl #1
   8511a:	1a5b      	subs	r3, r3, r1
   8511c:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
   85120:	1c58      	adds	r0, r3, #1
   85122:	107f      	asrs	r7, r7, #1
   85124:	4440      	add	r0, r8
   85126:	4287      	cmp	r7, r0
   85128:	463a      	mov	r2, r7
   8512a:	bf3c      	itt	cc
   8512c:	4607      	movcc	r7, r0
   8512e:	463a      	movcc	r2, r7
   85130:	f41e 6f80 	tst.w	lr, #1024	; 0x400
   85134:	9300      	str	r3, [sp, #0]
   85136:	f000 80fb 	beq.w	85330 <__sfvwrite_r+0x2d8>
   8513a:	4611      	mov	r1, r2
   8513c:	4648      	mov	r0, r9
   8513e:	f000 f9c5 	bl	854cc <_malloc_r>
   85142:	9b00      	ldr	r3, [sp, #0]
   85144:	4682      	mov	sl, r0
   85146:	2800      	cmp	r0, #0
   85148:	f000 810e 	beq.w	85368 <__sfvwrite_r+0x310>
   8514c:	461a      	mov	r2, r3
   8514e:	6921      	ldr	r1, [r4, #16]
   85150:	9300      	str	r3, [sp, #0]
   85152:	f7fe fbfb 	bl	8394c <memcpy>
   85156:	89a2      	ldrh	r2, [r4, #12]
   85158:	9b00      	ldr	r3, [sp, #0]
   8515a:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   8515e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   85162:	81a2      	strh	r2, [r4, #12]
   85164:	eb0a 0003 	add.w	r0, sl, r3
   85168:	f8c4 a010 	str.w	sl, [r4, #16]
   8516c:	1afb      	subs	r3, r7, r3
   8516e:	6167      	str	r7, [r4, #20]
   85170:	46c2      	mov	sl, r8
   85172:	4647      	mov	r7, r8
   85174:	6020      	str	r0, [r4, #0]
   85176:	60a3      	str	r3, [r4, #8]
   85178:	4652      	mov	r2, sl
   8517a:	4659      	mov	r1, fp
   8517c:	f000 fc76 	bl	85a6c <memmove>
   85180:	68a0      	ldr	r0, [r4, #8]
   85182:	6822      	ldr	r2, [r4, #0]
   85184:	1bc0      	subs	r0, r0, r7
   85186:	60a0      	str	r0, [r4, #8]
   85188:	4640      	mov	r0, r8
   8518a:	eb02 030a 	add.w	r3, r2, sl
   8518e:	6023      	str	r3, [r4, #0]
   85190:	68b3      	ldr	r3, [r6, #8]
   85192:	4483      	add	fp, r0
   85194:	1a1b      	subs	r3, r3, r0
   85196:	ebc0 0808 	rsb	r8, r0, r8
   8519a:	60b3      	str	r3, [r6, #8]
   8519c:	2b00      	cmp	r3, #0
   8519e:	d08f      	beq.n	850c0 <__sfvwrite_r+0x68>
   851a0:	f8b4 e00c 	ldrh.w	lr, [r4, #12]
   851a4:	f1b8 0f00 	cmp.w	r8, #0
   851a8:	d1a6      	bne.n	850f8 <__sfvwrite_r+0xa0>
   851aa:	f8d5 b000 	ldr.w	fp, [r5]
   851ae:	f8d5 8004 	ldr.w	r8, [r5, #4]
   851b2:	3508      	adds	r5, #8
   851b4:	e79d      	b.n	850f2 <__sfvwrite_r+0x9a>
   851b6:	f8d5 b000 	ldr.w	fp, [r5]
   851ba:	f8d5 8004 	ldr.w	r8, [r5, #4]
   851be:	3508      	adds	r5, #8
   851c0:	e766      	b.n	85090 <__sfvwrite_r+0x38>
   851c2:	2000      	movs	r0, #0
   851c4:	4770      	bx	lr
   851c6:	6820      	ldr	r0, [r4, #0]
   851c8:	6923      	ldr	r3, [r4, #16]
   851ca:	4298      	cmp	r0, r3
   851cc:	d803      	bhi.n	851d6 <__sfvwrite_r+0x17e>
   851ce:	6962      	ldr	r2, [r4, #20]
   851d0:	4590      	cmp	r8, r2
   851d2:	f080 8085 	bcs.w	852e0 <__sfvwrite_r+0x288>
   851d6:	4547      	cmp	r7, r8
   851d8:	bf28      	it	cs
   851da:	4647      	movcs	r7, r8
   851dc:	4659      	mov	r1, fp
   851de:	463a      	mov	r2, r7
   851e0:	f000 fc44 	bl	85a6c <memmove>
   851e4:	68a3      	ldr	r3, [r4, #8]
   851e6:	6822      	ldr	r2, [r4, #0]
   851e8:	1bdb      	subs	r3, r3, r7
   851ea:	443a      	add	r2, r7
   851ec:	60a3      	str	r3, [r4, #8]
   851ee:	6022      	str	r2, [r4, #0]
   851f0:	2b00      	cmp	r3, #0
   851f2:	d149      	bne.n	85288 <__sfvwrite_r+0x230>
   851f4:	4648      	mov	r0, r9
   851f6:	4621      	mov	r1, r4
   851f8:	f7ff fcea 	bl	84bd0 <_fflush_r>
   851fc:	2800      	cmp	r0, #0
   851fe:	d043      	beq.n	85288 <__sfvwrite_r+0x230>
   85200:	89a3      	ldrh	r3, [r4, #12]
   85202:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   85206:	f04f 30ff 	mov.w	r0, #4294967295
   8520a:	81a3      	strh	r3, [r4, #12]
   8520c:	b003      	add	sp, #12
   8520e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   85212:	4680      	mov	r8, r0
   85214:	4683      	mov	fp, r0
   85216:	4682      	mov	sl, r0
   85218:	9000      	str	r0, [sp, #0]
   8521a:	f1ba 0f00 	cmp.w	sl, #0
   8521e:	d02b      	beq.n	85278 <__sfvwrite_r+0x220>
   85220:	9b00      	ldr	r3, [sp, #0]
   85222:	2b00      	cmp	r3, #0
   85224:	d04f      	beq.n	852c6 <__sfvwrite_r+0x26e>
   85226:	45d0      	cmp	r8, sl
   85228:	4643      	mov	r3, r8
   8522a:	bf28      	it	cs
   8522c:	4653      	movcs	r3, sl
   8522e:	6820      	ldr	r0, [r4, #0]
   85230:	6921      	ldr	r1, [r4, #16]
   85232:	461f      	mov	r7, r3
   85234:	4288      	cmp	r0, r1
   85236:	f8d4 e008 	ldr.w	lr, [r4, #8]
   8523a:	6962      	ldr	r2, [r4, #20]
   8523c:	d903      	bls.n	85246 <__sfvwrite_r+0x1ee>
   8523e:	eb0e 0c02 	add.w	ip, lr, r2
   85242:	4563      	cmp	r3, ip
   85244:	dc5e      	bgt.n	85304 <__sfvwrite_r+0x2ac>
   85246:	4293      	cmp	r3, r2
   85248:	db24      	blt.n	85294 <__sfvwrite_r+0x23c>
   8524a:	4613      	mov	r3, r2
   8524c:	6a67      	ldr	r7, [r4, #36]	; 0x24
   8524e:	4648      	mov	r0, r9
   85250:	69e1      	ldr	r1, [r4, #28]
   85252:	465a      	mov	r2, fp
   85254:	47b8      	blx	r7
   85256:	1e07      	subs	r7, r0, #0
   85258:	ddd2      	ble.n	85200 <__sfvwrite_r+0x1a8>
   8525a:	ebb8 0807 	subs.w	r8, r8, r7
   8525e:	d029      	beq.n	852b4 <__sfvwrite_r+0x25c>
   85260:	68b3      	ldr	r3, [r6, #8]
   85262:	44bb      	add	fp, r7
   85264:	1bdb      	subs	r3, r3, r7
   85266:	ebc7 0a0a 	rsb	sl, r7, sl
   8526a:	60b3      	str	r3, [r6, #8]
   8526c:	2b00      	cmp	r3, #0
   8526e:	f43f af27 	beq.w	850c0 <__sfvwrite_r+0x68>
   85272:	f1ba 0f00 	cmp.w	sl, #0
   85276:	d1d3      	bne.n	85220 <__sfvwrite_r+0x1c8>
   85278:	2300      	movs	r3, #0
   8527a:	f8d5 b000 	ldr.w	fp, [r5]
   8527e:	f8d5 a004 	ldr.w	sl, [r5, #4]
   85282:	9300      	str	r3, [sp, #0]
   85284:	3508      	adds	r5, #8
   85286:	e7c8      	b.n	8521a <__sfvwrite_r+0x1c2>
   85288:	4638      	mov	r0, r7
   8528a:	e781      	b.n	85190 <__sfvwrite_r+0x138>
   8528c:	4647      	mov	r7, r8
   8528e:	46c2      	mov	sl, r8
   85290:	6820      	ldr	r0, [r4, #0]
   85292:	e771      	b.n	85178 <__sfvwrite_r+0x120>
   85294:	461a      	mov	r2, r3
   85296:	4659      	mov	r1, fp
   85298:	9301      	str	r3, [sp, #4]
   8529a:	f000 fbe7 	bl	85a6c <memmove>
   8529e:	68a2      	ldr	r2, [r4, #8]
   852a0:	6821      	ldr	r1, [r4, #0]
   852a2:	9b01      	ldr	r3, [sp, #4]
   852a4:	ebb8 0807 	subs.w	r8, r8, r7
   852a8:	eba2 0203 	sub.w	r2, r2, r3
   852ac:	440b      	add	r3, r1
   852ae:	60a2      	str	r2, [r4, #8]
   852b0:	6023      	str	r3, [r4, #0]
   852b2:	d1d5      	bne.n	85260 <__sfvwrite_r+0x208>
   852b4:	4648      	mov	r0, r9
   852b6:	4621      	mov	r1, r4
   852b8:	f7ff fc8a 	bl	84bd0 <_fflush_r>
   852bc:	2800      	cmp	r0, #0
   852be:	d19f      	bne.n	85200 <__sfvwrite_r+0x1a8>
   852c0:	f8cd 8000 	str.w	r8, [sp]
   852c4:	e7cc      	b.n	85260 <__sfvwrite_r+0x208>
   852c6:	4658      	mov	r0, fp
   852c8:	210a      	movs	r1, #10
   852ca:	4652      	mov	r2, sl
   852cc:	f000 fb84 	bl	859d8 <memchr>
   852d0:	2800      	cmp	r0, #0
   852d2:	d041      	beq.n	85358 <__sfvwrite_r+0x300>
   852d4:	3001      	adds	r0, #1
   852d6:	2301      	movs	r3, #1
   852d8:	ebcb 0800 	rsb	r8, fp, r0
   852dc:	9300      	str	r3, [sp, #0]
   852de:	e7a2      	b.n	85226 <__sfvwrite_r+0x1ce>
   852e0:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   852e4:	4543      	cmp	r3, r8
   852e6:	bf28      	it	cs
   852e8:	4643      	movcs	r3, r8
   852ea:	fb93 f3f2 	sdiv	r3, r3, r2
   852ee:	6a67      	ldr	r7, [r4, #36]	; 0x24
   852f0:	fb03 f302 	mul.w	r3, r3, r2
   852f4:	4648      	mov	r0, r9
   852f6:	69e1      	ldr	r1, [r4, #28]
   852f8:	465a      	mov	r2, fp
   852fa:	47b8      	blx	r7
   852fc:	2800      	cmp	r0, #0
   852fe:	f73f af47 	bgt.w	85190 <__sfvwrite_r+0x138>
   85302:	e77d      	b.n	85200 <__sfvwrite_r+0x1a8>
   85304:	4662      	mov	r2, ip
   85306:	4659      	mov	r1, fp
   85308:	f8cd c004 	str.w	ip, [sp, #4]
   8530c:	f000 fbae 	bl	85a6c <memmove>
   85310:	6823      	ldr	r3, [r4, #0]
   85312:	f8dd c004 	ldr.w	ip, [sp, #4]
   85316:	4648      	mov	r0, r9
   85318:	4463      	add	r3, ip
   8531a:	6023      	str	r3, [r4, #0]
   8531c:	4621      	mov	r1, r4
   8531e:	f7ff fc57 	bl	84bd0 <_fflush_r>
   85322:	f8dd c004 	ldr.w	ip, [sp, #4]
   85326:	2800      	cmp	r0, #0
   85328:	f47f af6a 	bne.w	85200 <__sfvwrite_r+0x1a8>
   8532c:	4667      	mov	r7, ip
   8532e:	e794      	b.n	8525a <__sfvwrite_r+0x202>
   85330:	4648      	mov	r0, r9
   85332:	f000 fc03 	bl	85b3c <_realloc_r>
   85336:	9b00      	ldr	r3, [sp, #0]
   85338:	4682      	mov	sl, r0
   8533a:	2800      	cmp	r0, #0
   8533c:	f47f af12 	bne.w	85164 <__sfvwrite_r+0x10c>
   85340:	4648      	mov	r0, r9
   85342:	6921      	ldr	r1, [r4, #16]
   85344:	f7ff fdb0 	bl	84ea8 <_free_r>
   85348:	89a3      	ldrh	r3, [r4, #12]
   8534a:	220c      	movs	r2, #12
   8534c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   85350:	b29b      	uxth	r3, r3
   85352:	f8c9 2000 	str.w	r2, [r9]
   85356:	e754      	b.n	85202 <__sfvwrite_r+0x1aa>
   85358:	2301      	movs	r3, #1
   8535a:	f10a 0801 	add.w	r8, sl, #1
   8535e:	9300      	str	r3, [sp, #0]
   85360:	e761      	b.n	85226 <__sfvwrite_r+0x1ce>
   85362:	f04f 30ff 	mov.w	r0, #4294967295
   85366:	e6ac      	b.n	850c2 <__sfvwrite_r+0x6a>
   85368:	230c      	movs	r3, #12
   8536a:	f8c9 3000 	str.w	r3, [r9]
   8536e:	89a3      	ldrh	r3, [r4, #12]
   85370:	e747      	b.n	85202 <__sfvwrite_r+0x1aa>
   85372:	bf00      	nop
   85374:	7ffffc00 	.word	0x7ffffc00

00085378 <_fwalk_reent>:
   85378:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   8537c:	f510 7638 	adds.w	r6, r0, #736	; 0x2e0
   85380:	d01e      	beq.n	853c0 <_fwalk_reent+0x48>
   85382:	4688      	mov	r8, r1
   85384:	4607      	mov	r7, r0
   85386:	f04f 0900 	mov.w	r9, #0
   8538a:	6875      	ldr	r5, [r6, #4]
   8538c:	68b4      	ldr	r4, [r6, #8]
   8538e:	3d01      	subs	r5, #1
   85390:	d410      	bmi.n	853b4 <_fwalk_reent+0x3c>
   85392:	89a3      	ldrh	r3, [r4, #12]
   85394:	3d01      	subs	r5, #1
   85396:	2b01      	cmp	r3, #1
   85398:	d908      	bls.n	853ac <_fwalk_reent+0x34>
   8539a:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
   8539e:	3301      	adds	r3, #1
   853a0:	d004      	beq.n	853ac <_fwalk_reent+0x34>
   853a2:	4638      	mov	r0, r7
   853a4:	4621      	mov	r1, r4
   853a6:	47c0      	blx	r8
   853a8:	ea49 0900 	orr.w	r9, r9, r0
   853ac:	1c6b      	adds	r3, r5, #1
   853ae:	f104 0468 	add.w	r4, r4, #104	; 0x68
   853b2:	d1ee      	bne.n	85392 <_fwalk_reent+0x1a>
   853b4:	6836      	ldr	r6, [r6, #0]
   853b6:	2e00      	cmp	r6, #0
   853b8:	d1e7      	bne.n	8538a <_fwalk_reent+0x12>
   853ba:	4648      	mov	r0, r9
   853bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   853c0:	46b1      	mov	r9, r6
   853c2:	4648      	mov	r0, r9
   853c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000853c8 <__locale_charset>:
   853c8:	4800      	ldr	r0, [pc, #0]	; (853cc <__locale_charset+0x4>)
   853ca:	4770      	bx	lr
   853cc:	20070584 	.word	0x20070584

000853d0 <__locale_mb_cur_max>:
   853d0:	4b01      	ldr	r3, [pc, #4]	; (853d8 <__locale_mb_cur_max+0x8>)
   853d2:	6818      	ldr	r0, [r3, #0]
   853d4:	4770      	bx	lr
   853d6:	bf00      	nop
   853d8:	200705a4 	.word	0x200705a4

000853dc <__smakebuf_r>:
   853dc:	898b      	ldrh	r3, [r1, #12]
   853de:	b29a      	uxth	r2, r3
   853e0:	f012 0f02 	tst.w	r2, #2
   853e4:	d13c      	bne.n	85460 <__smakebuf_r+0x84>
   853e6:	b5f0      	push	{r4, r5, r6, r7, lr}
   853e8:	460c      	mov	r4, r1
   853ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   853ee:	b091      	sub	sp, #68	; 0x44
   853f0:	2900      	cmp	r1, #0
   853f2:	4605      	mov	r5, r0
   853f4:	db19      	blt.n	8542a <__smakebuf_r+0x4e>
   853f6:	aa01      	add	r2, sp, #4
   853f8:	f000 ff2a 	bl	86250 <_fstat_r>
   853fc:	2800      	cmp	r0, #0
   853fe:	db12      	blt.n	85426 <__smakebuf_r+0x4a>
   85400:	9b02      	ldr	r3, [sp, #8]
   85402:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
   85406:	f5a3 5700 	sub.w	r7, r3, #8192	; 0x2000
   8540a:	fab7 f787 	clz	r7, r7
   8540e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   85412:	ea4f 1757 	mov.w	r7, r7, lsr #5
   85416:	d02a      	beq.n	8546e <__smakebuf_r+0x92>
   85418:	89a3      	ldrh	r3, [r4, #12]
   8541a:	f44f 6680 	mov.w	r6, #1024	; 0x400
   8541e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   85422:	81a3      	strh	r3, [r4, #12]
   85424:	e00b      	b.n	8543e <__smakebuf_r+0x62>
   85426:	89a3      	ldrh	r3, [r4, #12]
   85428:	b29a      	uxth	r2, r3
   8542a:	f012 0f80 	tst.w	r2, #128	; 0x80
   8542e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   85432:	81a3      	strh	r3, [r4, #12]
   85434:	bf0c      	ite	eq
   85436:	f44f 6680 	moveq.w	r6, #1024	; 0x400
   8543a:	2640      	movne	r6, #64	; 0x40
   8543c:	2700      	movs	r7, #0
   8543e:	4628      	mov	r0, r5
   85440:	4631      	mov	r1, r6
   85442:	f000 f843 	bl	854cc <_malloc_r>
   85446:	89a3      	ldrh	r3, [r4, #12]
   85448:	b340      	cbz	r0, 8549c <__smakebuf_r+0xc0>
   8544a:	4a1a      	ldr	r2, [pc, #104]	; (854b4 <__smakebuf_r+0xd8>)
   8544c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   85450:	63ea      	str	r2, [r5, #60]	; 0x3c
   85452:	81a3      	strh	r3, [r4, #12]
   85454:	6020      	str	r0, [r4, #0]
   85456:	6120      	str	r0, [r4, #16]
   85458:	6166      	str	r6, [r4, #20]
   8545a:	b99f      	cbnz	r7, 85484 <__smakebuf_r+0xa8>
   8545c:	b011      	add	sp, #68	; 0x44
   8545e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   85460:	f101 0343 	add.w	r3, r1, #67	; 0x43
   85464:	2201      	movs	r2, #1
   85466:	600b      	str	r3, [r1, #0]
   85468:	610b      	str	r3, [r1, #16]
   8546a:	614a      	str	r2, [r1, #20]
   8546c:	4770      	bx	lr
   8546e:	4b12      	ldr	r3, [pc, #72]	; (854b8 <__smakebuf_r+0xdc>)
   85470:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   85472:	429a      	cmp	r2, r3
   85474:	d1d0      	bne.n	85418 <__smakebuf_r+0x3c>
   85476:	89a3      	ldrh	r3, [r4, #12]
   85478:	f44f 6680 	mov.w	r6, #1024	; 0x400
   8547c:	4333      	orrs	r3, r6
   8547e:	81a3      	strh	r3, [r4, #12]
   85480:	64e6      	str	r6, [r4, #76]	; 0x4c
   85482:	e7dc      	b.n	8543e <__smakebuf_r+0x62>
   85484:	4628      	mov	r0, r5
   85486:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   8548a:	f000 fef5 	bl	86278 <_isatty_r>
   8548e:	2800      	cmp	r0, #0
   85490:	d0e4      	beq.n	8545c <__smakebuf_r+0x80>
   85492:	89a3      	ldrh	r3, [r4, #12]
   85494:	f043 0301 	orr.w	r3, r3, #1
   85498:	81a3      	strh	r3, [r4, #12]
   8549a:	e7df      	b.n	8545c <__smakebuf_r+0x80>
   8549c:	059a      	lsls	r2, r3, #22
   8549e:	d4dd      	bmi.n	8545c <__smakebuf_r+0x80>
   854a0:	f104 0243 	add.w	r2, r4, #67	; 0x43
   854a4:	f043 0302 	orr.w	r3, r3, #2
   854a8:	2101      	movs	r1, #1
   854aa:	81a3      	strh	r3, [r4, #12]
   854ac:	6022      	str	r2, [r4, #0]
   854ae:	6122      	str	r2, [r4, #16]
   854b0:	6161      	str	r1, [r4, #20]
   854b2:	e7d3      	b.n	8545c <__smakebuf_r+0x80>
   854b4:	00084bfd 	.word	0x00084bfd
   854b8:	00085f9d 	.word	0x00085f9d

000854bc <malloc>:
   854bc:	4b02      	ldr	r3, [pc, #8]	; (854c8 <malloc+0xc>)
   854be:	4601      	mov	r1, r0
   854c0:	6818      	ldr	r0, [r3, #0]
   854c2:	f000 b803 	b.w	854cc <_malloc_r>
   854c6:	bf00      	nop
   854c8:	20070580 	.word	0x20070580

000854cc <_malloc_r>:
   854cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   854d0:	f101 050b 	add.w	r5, r1, #11
   854d4:	2d16      	cmp	r5, #22
   854d6:	b083      	sub	sp, #12
   854d8:	4606      	mov	r6, r0
   854da:	d927      	bls.n	8552c <_malloc_r+0x60>
   854dc:	f035 0507 	bics.w	r5, r5, #7
   854e0:	f100 80b6 	bmi.w	85650 <_malloc_r+0x184>
   854e4:	42a9      	cmp	r1, r5
   854e6:	f200 80b3 	bhi.w	85650 <_malloc_r+0x184>
   854ea:	f000 fb23 	bl	85b34 <__malloc_lock>
   854ee:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
   854f2:	d222      	bcs.n	8553a <_malloc_r+0x6e>
   854f4:	4fbc      	ldr	r7, [pc, #752]	; (857e8 <_malloc_r+0x31c>)
   854f6:	08e8      	lsrs	r0, r5, #3
   854f8:	eb07 03c0 	add.w	r3, r7, r0, lsl #3
   854fc:	68dc      	ldr	r4, [r3, #12]
   854fe:	429c      	cmp	r4, r3
   85500:	f000 81bc 	beq.w	8587c <_malloc_r+0x3b0>
   85504:	6863      	ldr	r3, [r4, #4]
   85506:	68e1      	ldr	r1, [r4, #12]
   85508:	f023 0303 	bic.w	r3, r3, #3
   8550c:	4423      	add	r3, r4
   8550e:	685a      	ldr	r2, [r3, #4]
   85510:	68a5      	ldr	r5, [r4, #8]
   85512:	f042 0201 	orr.w	r2, r2, #1
   85516:	60e9      	str	r1, [r5, #12]
   85518:	4630      	mov	r0, r6
   8551a:	608d      	str	r5, [r1, #8]
   8551c:	605a      	str	r2, [r3, #4]
   8551e:	f000 fb0b 	bl	85b38 <__malloc_unlock>
   85522:	3408      	adds	r4, #8
   85524:	4620      	mov	r0, r4
   85526:	b003      	add	sp, #12
   85528:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8552c:	2910      	cmp	r1, #16
   8552e:	f200 808f 	bhi.w	85650 <_malloc_r+0x184>
   85532:	f000 faff 	bl	85b34 <__malloc_lock>
   85536:	2510      	movs	r5, #16
   85538:	e7dc      	b.n	854f4 <_malloc_r+0x28>
   8553a:	0a68      	lsrs	r0, r5, #9
   8553c:	f000 808f 	beq.w	8565e <_malloc_r+0x192>
   85540:	2804      	cmp	r0, #4
   85542:	f200 8147 	bhi.w	857d4 <_malloc_r+0x308>
   85546:	09a8      	lsrs	r0, r5, #6
   85548:	3038      	adds	r0, #56	; 0x38
   8554a:	0041      	lsls	r1, r0, #1
   8554c:	4fa6      	ldr	r7, [pc, #664]	; (857e8 <_malloc_r+0x31c>)
   8554e:	eb07 0181 	add.w	r1, r7, r1, lsl #2
   85552:	68cc      	ldr	r4, [r1, #12]
   85554:	42a1      	cmp	r1, r4
   85556:	d106      	bne.n	85566 <_malloc_r+0x9a>
   85558:	e00c      	b.n	85574 <_malloc_r+0xa8>
   8555a:	2a00      	cmp	r2, #0
   8555c:	f280 8082 	bge.w	85664 <_malloc_r+0x198>
   85560:	68e4      	ldr	r4, [r4, #12]
   85562:	42a1      	cmp	r1, r4
   85564:	d006      	beq.n	85574 <_malloc_r+0xa8>
   85566:	6863      	ldr	r3, [r4, #4]
   85568:	f023 0303 	bic.w	r3, r3, #3
   8556c:	1b5a      	subs	r2, r3, r5
   8556e:	2a0f      	cmp	r2, #15
   85570:	ddf3      	ble.n	8555a <_malloc_r+0x8e>
   85572:	3801      	subs	r0, #1
   85574:	3001      	adds	r0, #1
   85576:	499c      	ldr	r1, [pc, #624]	; (857e8 <_malloc_r+0x31c>)
   85578:	693c      	ldr	r4, [r7, #16]
   8557a:	f101 0e08 	add.w	lr, r1, #8
   8557e:	4574      	cmp	r4, lr
   85580:	f000 8171 	beq.w	85866 <_malloc_r+0x39a>
   85584:	6863      	ldr	r3, [r4, #4]
   85586:	f023 0303 	bic.w	r3, r3, #3
   8558a:	1b5a      	subs	r2, r3, r5
   8558c:	2a0f      	cmp	r2, #15
   8558e:	f300 8157 	bgt.w	85840 <_malloc_r+0x374>
   85592:	2a00      	cmp	r2, #0
   85594:	f8c1 e014 	str.w	lr, [r1, #20]
   85598:	f8c1 e010 	str.w	lr, [r1, #16]
   8559c:	da66      	bge.n	8566c <_malloc_r+0x1a0>
   8559e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   855a2:	f080 812d 	bcs.w	85800 <_malloc_r+0x334>
   855a6:	08db      	lsrs	r3, r3, #3
   855a8:	eb01 08c3 	add.w	r8, r1, r3, lsl #3
   855ac:	ea4f 0ca3 	mov.w	ip, r3, asr #2
   855b0:	684a      	ldr	r2, [r1, #4]
   855b2:	2301      	movs	r3, #1
   855b4:	fa03 f30c 	lsl.w	r3, r3, ip
   855b8:	f8d8 c008 	ldr.w	ip, [r8, #8]
   855bc:	4313      	orrs	r3, r2
   855be:	f8c4 c008 	str.w	ip, [r4, #8]
   855c2:	f8c4 800c 	str.w	r8, [r4, #12]
   855c6:	604b      	str	r3, [r1, #4]
   855c8:	f8c8 4008 	str.w	r4, [r8, #8]
   855cc:	f8cc 400c 	str.w	r4, [ip, #12]
   855d0:	1082      	asrs	r2, r0, #2
   855d2:	2401      	movs	r4, #1
   855d4:	4094      	lsls	r4, r2
   855d6:	429c      	cmp	r4, r3
   855d8:	d855      	bhi.n	85686 <_malloc_r+0x1ba>
   855da:	4223      	tst	r3, r4
   855dc:	d106      	bne.n	855ec <_malloc_r+0x120>
   855de:	f020 0003 	bic.w	r0, r0, #3
   855e2:	0064      	lsls	r4, r4, #1
   855e4:	4223      	tst	r3, r4
   855e6:	f100 0004 	add.w	r0, r0, #4
   855ea:	d0fa      	beq.n	855e2 <_malloc_r+0x116>
   855ec:	eb07 08c0 	add.w	r8, r7, r0, lsl #3
   855f0:	46c4      	mov	ip, r8
   855f2:	4681      	mov	r9, r0
   855f4:	f8dc 300c 	ldr.w	r3, [ip, #12]
   855f8:	459c      	cmp	ip, r3
   855fa:	d107      	bne.n	8560c <_malloc_r+0x140>
   855fc:	e135      	b.n	8586a <_malloc_r+0x39e>
   855fe:	2900      	cmp	r1, #0
   85600:	f280 8145 	bge.w	8588e <_malloc_r+0x3c2>
   85604:	68db      	ldr	r3, [r3, #12]
   85606:	459c      	cmp	ip, r3
   85608:	f000 812f 	beq.w	8586a <_malloc_r+0x39e>
   8560c:	685a      	ldr	r2, [r3, #4]
   8560e:	f022 0203 	bic.w	r2, r2, #3
   85612:	1b51      	subs	r1, r2, r5
   85614:	290f      	cmp	r1, #15
   85616:	ddf2      	ble.n	855fe <_malloc_r+0x132>
   85618:	461c      	mov	r4, r3
   8561a:	68da      	ldr	r2, [r3, #12]
   8561c:	f854 cf08 	ldr.w	ip, [r4, #8]!
   85620:	f045 0901 	orr.w	r9, r5, #1
   85624:	f041 0801 	orr.w	r8, r1, #1
   85628:	441d      	add	r5, r3
   8562a:	f8c3 9004 	str.w	r9, [r3, #4]
   8562e:	4630      	mov	r0, r6
   85630:	f8cc 200c 	str.w	r2, [ip, #12]
   85634:	f8c2 c008 	str.w	ip, [r2, #8]
   85638:	617d      	str	r5, [r7, #20]
   8563a:	613d      	str	r5, [r7, #16]
   8563c:	f8c5 e00c 	str.w	lr, [r5, #12]
   85640:	f8c5 e008 	str.w	lr, [r5, #8]
   85644:	f8c5 8004 	str.w	r8, [r5, #4]
   85648:	5069      	str	r1, [r5, r1]
   8564a:	f000 fa75 	bl	85b38 <__malloc_unlock>
   8564e:	e769      	b.n	85524 <_malloc_r+0x58>
   85650:	2400      	movs	r4, #0
   85652:	4620      	mov	r0, r4
   85654:	230c      	movs	r3, #12
   85656:	6033      	str	r3, [r6, #0]
   85658:	b003      	add	sp, #12
   8565a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8565e:	217e      	movs	r1, #126	; 0x7e
   85660:	203f      	movs	r0, #63	; 0x3f
   85662:	e773      	b.n	8554c <_malloc_r+0x80>
   85664:	4423      	add	r3, r4
   85666:	685a      	ldr	r2, [r3, #4]
   85668:	68e1      	ldr	r1, [r4, #12]
   8566a:	e751      	b.n	85510 <_malloc_r+0x44>
   8566c:	4423      	add	r3, r4
   8566e:	685a      	ldr	r2, [r3, #4]
   85670:	4630      	mov	r0, r6
   85672:	f042 0201 	orr.w	r2, r2, #1
   85676:	605a      	str	r2, [r3, #4]
   85678:	3408      	adds	r4, #8
   8567a:	f000 fa5d 	bl	85b38 <__malloc_unlock>
   8567e:	4620      	mov	r0, r4
   85680:	b003      	add	sp, #12
   85682:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   85686:	68bc      	ldr	r4, [r7, #8]
   85688:	6863      	ldr	r3, [r4, #4]
   8568a:	f023 0803 	bic.w	r8, r3, #3
   8568e:	4545      	cmp	r5, r8
   85690:	d804      	bhi.n	8569c <_malloc_r+0x1d0>
   85692:	ebc5 0308 	rsb	r3, r5, r8
   85696:	2b0f      	cmp	r3, #15
   85698:	f300 808c 	bgt.w	857b4 <_malloc_r+0x2e8>
   8569c:	4b53      	ldr	r3, [pc, #332]	; (857ec <_malloc_r+0x320>)
   8569e:	f8df a15c 	ldr.w	sl, [pc, #348]	; 857fc <_malloc_r+0x330>
   856a2:	681a      	ldr	r2, [r3, #0]
   856a4:	f8da 3000 	ldr.w	r3, [sl]
   856a8:	442a      	add	r2, r5
   856aa:	3301      	adds	r3, #1
   856ac:	eb04 0b08 	add.w	fp, r4, r8
   856b0:	f000 8151 	beq.w	85956 <_malloc_r+0x48a>
   856b4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
   856b8:	320f      	adds	r2, #15
   856ba:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
   856be:	f022 020f 	bic.w	r2, r2, #15
   856c2:	4611      	mov	r1, r2
   856c4:	4630      	mov	r0, r6
   856c6:	9201      	str	r2, [sp, #4]
   856c8:	f000 fc28 	bl	85f1c <_sbrk_r>
   856cc:	f1b0 3fff 	cmp.w	r0, #4294967295
   856d0:	4681      	mov	r9, r0
   856d2:	9a01      	ldr	r2, [sp, #4]
   856d4:	f000 8148 	beq.w	85968 <_malloc_r+0x49c>
   856d8:	4583      	cmp	fp, r0
   856da:	f200 80ef 	bhi.w	858bc <_malloc_r+0x3f0>
   856de:	4b44      	ldr	r3, [pc, #272]	; (857f0 <_malloc_r+0x324>)
   856e0:	45cb      	cmp	fp, r9
   856e2:	6819      	ldr	r1, [r3, #0]
   856e4:	4411      	add	r1, r2
   856e6:	6019      	str	r1, [r3, #0]
   856e8:	f000 8143 	beq.w	85972 <_malloc_r+0x4a6>
   856ec:	f8da 0000 	ldr.w	r0, [sl]
   856f0:	f8df e108 	ldr.w	lr, [pc, #264]	; 857fc <_malloc_r+0x330>
   856f4:	3001      	adds	r0, #1
   856f6:	bf1b      	ittet	ne
   856f8:	ebcb 0b09 	rsbne	fp, fp, r9
   856fc:	4459      	addne	r1, fp
   856fe:	f8ce 9000 	streq.w	r9, [lr]
   85702:	6019      	strne	r1, [r3, #0]
   85704:	f019 0107 	ands.w	r1, r9, #7
   85708:	f000 8108 	beq.w	8591c <_malloc_r+0x450>
   8570c:	f1c1 0008 	rsb	r0, r1, #8
   85710:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
   85714:	4481      	add	r9, r0
   85716:	3108      	adds	r1, #8
   85718:	444a      	add	r2, r9
   8571a:	f3c2 020b 	ubfx	r2, r2, #0, #12
   8571e:	ebc2 0a01 	rsb	sl, r2, r1
   85722:	4651      	mov	r1, sl
   85724:	4630      	mov	r0, r6
   85726:	9301      	str	r3, [sp, #4]
   85728:	f000 fbf8 	bl	85f1c <_sbrk_r>
   8572c:	1c43      	adds	r3, r0, #1
   8572e:	9b01      	ldr	r3, [sp, #4]
   85730:	f000 812d 	beq.w	8598e <_malloc_r+0x4c2>
   85734:	ebc9 0200 	rsb	r2, r9, r0
   85738:	4452      	add	r2, sl
   8573a:	f042 0201 	orr.w	r2, r2, #1
   8573e:	6819      	ldr	r1, [r3, #0]
   85740:	42bc      	cmp	r4, r7
   85742:	4451      	add	r1, sl
   85744:	f8c7 9008 	str.w	r9, [r7, #8]
   85748:	6019      	str	r1, [r3, #0]
   8574a:	f8c9 2004 	str.w	r2, [r9, #4]
   8574e:	f8df a0a0 	ldr.w	sl, [pc, #160]	; 857f0 <_malloc_r+0x324>
   85752:	d016      	beq.n	85782 <_malloc_r+0x2b6>
   85754:	f1b8 0f0f 	cmp.w	r8, #15
   85758:	f240 80ef 	bls.w	8593a <_malloc_r+0x46e>
   8575c:	6862      	ldr	r2, [r4, #4]
   8575e:	f1a8 030c 	sub.w	r3, r8, #12
   85762:	f023 0307 	bic.w	r3, r3, #7
   85766:	f002 0201 	and.w	r2, r2, #1
   8576a:	18e0      	adds	r0, r4, r3
   8576c:	f04f 0e05 	mov.w	lr, #5
   85770:	431a      	orrs	r2, r3
   85772:	2b0f      	cmp	r3, #15
   85774:	6062      	str	r2, [r4, #4]
   85776:	f8c0 e004 	str.w	lr, [r0, #4]
   8577a:	f8c0 e008 	str.w	lr, [r0, #8]
   8577e:	f200 810a 	bhi.w	85996 <_malloc_r+0x4ca>
   85782:	4b1c      	ldr	r3, [pc, #112]	; (857f4 <_malloc_r+0x328>)
   85784:	68bc      	ldr	r4, [r7, #8]
   85786:	681a      	ldr	r2, [r3, #0]
   85788:	4291      	cmp	r1, r2
   8578a:	bf88      	it	hi
   8578c:	6019      	strhi	r1, [r3, #0]
   8578e:	4b1a      	ldr	r3, [pc, #104]	; (857f8 <_malloc_r+0x32c>)
   85790:	681a      	ldr	r2, [r3, #0]
   85792:	4291      	cmp	r1, r2
   85794:	6862      	ldr	r2, [r4, #4]
   85796:	bf88      	it	hi
   85798:	6019      	strhi	r1, [r3, #0]
   8579a:	f022 0203 	bic.w	r2, r2, #3
   8579e:	4295      	cmp	r5, r2
   857a0:	eba2 0305 	sub.w	r3, r2, r5
   857a4:	d801      	bhi.n	857aa <_malloc_r+0x2de>
   857a6:	2b0f      	cmp	r3, #15
   857a8:	dc04      	bgt.n	857b4 <_malloc_r+0x2e8>
   857aa:	4630      	mov	r0, r6
   857ac:	f000 f9c4 	bl	85b38 <__malloc_unlock>
   857b0:	2400      	movs	r4, #0
   857b2:	e6b7      	b.n	85524 <_malloc_r+0x58>
   857b4:	f045 0201 	orr.w	r2, r5, #1
   857b8:	f043 0301 	orr.w	r3, r3, #1
   857bc:	4425      	add	r5, r4
   857be:	6062      	str	r2, [r4, #4]
   857c0:	4630      	mov	r0, r6
   857c2:	60bd      	str	r5, [r7, #8]
   857c4:	3408      	adds	r4, #8
   857c6:	606b      	str	r3, [r5, #4]
   857c8:	f000 f9b6 	bl	85b38 <__malloc_unlock>
   857cc:	4620      	mov	r0, r4
   857ce:	b003      	add	sp, #12
   857d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   857d4:	2814      	cmp	r0, #20
   857d6:	d969      	bls.n	858ac <_malloc_r+0x3e0>
   857d8:	2854      	cmp	r0, #84	; 0x54
   857da:	f200 8098 	bhi.w	8590e <_malloc_r+0x442>
   857de:	0b28      	lsrs	r0, r5, #12
   857e0:	306e      	adds	r0, #110	; 0x6e
   857e2:	0041      	lsls	r1, r0, #1
   857e4:	e6b2      	b.n	8554c <_malloc_r+0x80>
   857e6:	bf00      	nop
   857e8:	200705a8 	.word	0x200705a8
   857ec:	20078c44 	.word	0x20078c44
   857f0:	20078c48 	.word	0x20078c48
   857f4:	20078c40 	.word	0x20078c40
   857f8:	20078c3c 	.word	0x20078c3c
   857fc:	200709b4 	.word	0x200709b4
   85800:	0a5a      	lsrs	r2, r3, #9
   85802:	2a04      	cmp	r2, #4
   85804:	d955      	bls.n	858b2 <_malloc_r+0x3e6>
   85806:	2a14      	cmp	r2, #20
   85808:	f200 80a7 	bhi.w	8595a <_malloc_r+0x48e>
   8580c:	325b      	adds	r2, #91	; 0x5b
   8580e:	ea4f 0c42 	mov.w	ip, r2, lsl #1
   85812:	eb07 0c8c 	add.w	ip, r7, ip, lsl #2
   85816:	f8dc 1008 	ldr.w	r1, [ip, #8]
   8581a:	f8df 81b8 	ldr.w	r8, [pc, #440]	; 859d4 <_malloc_r+0x508>
   8581e:	4561      	cmp	r1, ip
   85820:	d07f      	beq.n	85922 <_malloc_r+0x456>
   85822:	684a      	ldr	r2, [r1, #4]
   85824:	f022 0203 	bic.w	r2, r2, #3
   85828:	4293      	cmp	r3, r2
   8582a:	d202      	bcs.n	85832 <_malloc_r+0x366>
   8582c:	6889      	ldr	r1, [r1, #8]
   8582e:	458c      	cmp	ip, r1
   85830:	d1f7      	bne.n	85822 <_malloc_r+0x356>
   85832:	68ca      	ldr	r2, [r1, #12]
   85834:	687b      	ldr	r3, [r7, #4]
   85836:	60e2      	str	r2, [r4, #12]
   85838:	60a1      	str	r1, [r4, #8]
   8583a:	6094      	str	r4, [r2, #8]
   8583c:	60cc      	str	r4, [r1, #12]
   8583e:	e6c7      	b.n	855d0 <_malloc_r+0x104>
   85840:	f045 0701 	orr.w	r7, r5, #1
   85844:	f042 0301 	orr.w	r3, r2, #1
   85848:	4425      	add	r5, r4
   8584a:	6067      	str	r7, [r4, #4]
   8584c:	4630      	mov	r0, r6
   8584e:	614d      	str	r5, [r1, #20]
   85850:	610d      	str	r5, [r1, #16]
   85852:	f8c5 e00c 	str.w	lr, [r5, #12]
   85856:	f8c5 e008 	str.w	lr, [r5, #8]
   8585a:	606b      	str	r3, [r5, #4]
   8585c:	50aa      	str	r2, [r5, r2]
   8585e:	3408      	adds	r4, #8
   85860:	f000 f96a 	bl	85b38 <__malloc_unlock>
   85864:	e65e      	b.n	85524 <_malloc_r+0x58>
   85866:	684b      	ldr	r3, [r1, #4]
   85868:	e6b2      	b.n	855d0 <_malloc_r+0x104>
   8586a:	f109 0901 	add.w	r9, r9, #1
   8586e:	f019 0f03 	tst.w	r9, #3
   85872:	f10c 0c08 	add.w	ip, ip, #8
   85876:	f47f aebd 	bne.w	855f4 <_malloc_r+0x128>
   8587a:	e02c      	b.n	858d6 <_malloc_r+0x40a>
   8587c:	f104 0308 	add.w	r3, r4, #8
   85880:	6964      	ldr	r4, [r4, #20]
   85882:	42a3      	cmp	r3, r4
   85884:	bf08      	it	eq
   85886:	3002      	addeq	r0, #2
   85888:	f43f ae75 	beq.w	85576 <_malloc_r+0xaa>
   8588c:	e63a      	b.n	85504 <_malloc_r+0x38>
   8588e:	461c      	mov	r4, r3
   85890:	441a      	add	r2, r3
   85892:	6851      	ldr	r1, [r2, #4]
   85894:	68db      	ldr	r3, [r3, #12]
   85896:	f854 5f08 	ldr.w	r5, [r4, #8]!
   8589a:	f041 0101 	orr.w	r1, r1, #1
   8589e:	6051      	str	r1, [r2, #4]
   858a0:	4630      	mov	r0, r6
   858a2:	60eb      	str	r3, [r5, #12]
   858a4:	609d      	str	r5, [r3, #8]
   858a6:	f000 f947 	bl	85b38 <__malloc_unlock>
   858aa:	e63b      	b.n	85524 <_malloc_r+0x58>
   858ac:	305b      	adds	r0, #91	; 0x5b
   858ae:	0041      	lsls	r1, r0, #1
   858b0:	e64c      	b.n	8554c <_malloc_r+0x80>
   858b2:	099a      	lsrs	r2, r3, #6
   858b4:	3238      	adds	r2, #56	; 0x38
   858b6:	ea4f 0c42 	mov.w	ip, r2, lsl #1
   858ba:	e7aa      	b.n	85812 <_malloc_r+0x346>
   858bc:	42bc      	cmp	r4, r7
   858be:	4b45      	ldr	r3, [pc, #276]	; (859d4 <_malloc_r+0x508>)
   858c0:	f43f af0d 	beq.w	856de <_malloc_r+0x212>
   858c4:	689c      	ldr	r4, [r3, #8]
   858c6:	6862      	ldr	r2, [r4, #4]
   858c8:	f022 0203 	bic.w	r2, r2, #3
   858cc:	e767      	b.n	8579e <_malloc_r+0x2d2>
   858ce:	f8d8 8000 	ldr.w	r8, [r8]
   858d2:	4598      	cmp	r8, r3
   858d4:	d17c      	bne.n	859d0 <_malloc_r+0x504>
   858d6:	f010 0f03 	tst.w	r0, #3
   858da:	f1a8 0308 	sub.w	r3, r8, #8
   858de:	f100 30ff 	add.w	r0, r0, #4294967295
   858e2:	d1f4      	bne.n	858ce <_malloc_r+0x402>
   858e4:	687b      	ldr	r3, [r7, #4]
   858e6:	ea23 0304 	bic.w	r3, r3, r4
   858ea:	607b      	str	r3, [r7, #4]
   858ec:	0064      	lsls	r4, r4, #1
   858ee:	429c      	cmp	r4, r3
   858f0:	f63f aec9 	bhi.w	85686 <_malloc_r+0x1ba>
   858f4:	2c00      	cmp	r4, #0
   858f6:	f43f aec6 	beq.w	85686 <_malloc_r+0x1ba>
   858fa:	4223      	tst	r3, r4
   858fc:	4648      	mov	r0, r9
   858fe:	f47f ae75 	bne.w	855ec <_malloc_r+0x120>
   85902:	0064      	lsls	r4, r4, #1
   85904:	4223      	tst	r3, r4
   85906:	f100 0004 	add.w	r0, r0, #4
   8590a:	d0fa      	beq.n	85902 <_malloc_r+0x436>
   8590c:	e66e      	b.n	855ec <_malloc_r+0x120>
   8590e:	f5b0 7faa 	cmp.w	r0, #340	; 0x154
   85912:	d818      	bhi.n	85946 <_malloc_r+0x47a>
   85914:	0be8      	lsrs	r0, r5, #15
   85916:	3077      	adds	r0, #119	; 0x77
   85918:	0041      	lsls	r1, r0, #1
   8591a:	e617      	b.n	8554c <_malloc_r+0x80>
   8591c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   85920:	e6fa      	b.n	85718 <_malloc_r+0x24c>
   85922:	f8d8 3004 	ldr.w	r3, [r8, #4]
   85926:	1092      	asrs	r2, r2, #2
   85928:	f04f 0c01 	mov.w	ip, #1
   8592c:	fa0c f202 	lsl.w	r2, ip, r2
   85930:	4313      	orrs	r3, r2
   85932:	f8c8 3004 	str.w	r3, [r8, #4]
   85936:	460a      	mov	r2, r1
   85938:	e77d      	b.n	85836 <_malloc_r+0x36a>
   8593a:	2301      	movs	r3, #1
   8593c:	f8c9 3004 	str.w	r3, [r9, #4]
   85940:	464c      	mov	r4, r9
   85942:	2200      	movs	r2, #0
   85944:	e72b      	b.n	8579e <_malloc_r+0x2d2>
   85946:	f240 5354 	movw	r3, #1364	; 0x554
   8594a:	4298      	cmp	r0, r3
   8594c:	d81c      	bhi.n	85988 <_malloc_r+0x4bc>
   8594e:	0ca8      	lsrs	r0, r5, #18
   85950:	307c      	adds	r0, #124	; 0x7c
   85952:	0041      	lsls	r1, r0, #1
   85954:	e5fa      	b.n	8554c <_malloc_r+0x80>
   85956:	3210      	adds	r2, #16
   85958:	e6b3      	b.n	856c2 <_malloc_r+0x1f6>
   8595a:	2a54      	cmp	r2, #84	; 0x54
   8595c:	d823      	bhi.n	859a6 <_malloc_r+0x4da>
   8595e:	0b1a      	lsrs	r2, r3, #12
   85960:	326e      	adds	r2, #110	; 0x6e
   85962:	ea4f 0c42 	mov.w	ip, r2, lsl #1
   85966:	e754      	b.n	85812 <_malloc_r+0x346>
   85968:	68bc      	ldr	r4, [r7, #8]
   8596a:	6862      	ldr	r2, [r4, #4]
   8596c:	f022 0203 	bic.w	r2, r2, #3
   85970:	e715      	b.n	8579e <_malloc_r+0x2d2>
   85972:	f3cb 000b 	ubfx	r0, fp, #0, #12
   85976:	2800      	cmp	r0, #0
   85978:	f47f aeb8 	bne.w	856ec <_malloc_r+0x220>
   8597c:	4442      	add	r2, r8
   8597e:	68bb      	ldr	r3, [r7, #8]
   85980:	f042 0201 	orr.w	r2, r2, #1
   85984:	605a      	str	r2, [r3, #4]
   85986:	e6fc      	b.n	85782 <_malloc_r+0x2b6>
   85988:	21fc      	movs	r1, #252	; 0xfc
   8598a:	207e      	movs	r0, #126	; 0x7e
   8598c:	e5de      	b.n	8554c <_malloc_r+0x80>
   8598e:	2201      	movs	r2, #1
   85990:	f04f 0a00 	mov.w	sl, #0
   85994:	e6d3      	b.n	8573e <_malloc_r+0x272>
   85996:	f104 0108 	add.w	r1, r4, #8
   8599a:	4630      	mov	r0, r6
   8599c:	f7ff fa84 	bl	84ea8 <_free_r>
   859a0:	f8da 1000 	ldr.w	r1, [sl]
   859a4:	e6ed      	b.n	85782 <_malloc_r+0x2b6>
   859a6:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   859aa:	d804      	bhi.n	859b6 <_malloc_r+0x4ea>
   859ac:	0bda      	lsrs	r2, r3, #15
   859ae:	3277      	adds	r2, #119	; 0x77
   859b0:	ea4f 0c42 	mov.w	ip, r2, lsl #1
   859b4:	e72d      	b.n	85812 <_malloc_r+0x346>
   859b6:	f240 5154 	movw	r1, #1364	; 0x554
   859ba:	428a      	cmp	r2, r1
   859bc:	d804      	bhi.n	859c8 <_malloc_r+0x4fc>
   859be:	0c9a      	lsrs	r2, r3, #18
   859c0:	327c      	adds	r2, #124	; 0x7c
   859c2:	ea4f 0c42 	mov.w	ip, r2, lsl #1
   859c6:	e724      	b.n	85812 <_malloc_r+0x346>
   859c8:	f04f 0cfc 	mov.w	ip, #252	; 0xfc
   859cc:	227e      	movs	r2, #126	; 0x7e
   859ce:	e720      	b.n	85812 <_malloc_r+0x346>
   859d0:	687b      	ldr	r3, [r7, #4]
   859d2:	e78b      	b.n	858ec <_malloc_r+0x420>
   859d4:	200705a8 	.word	0x200705a8

000859d8 <memchr>:
   859d8:	0783      	lsls	r3, r0, #30
   859da:	b470      	push	{r4, r5, r6}
   859dc:	b2c9      	uxtb	r1, r1
   859de:	d040      	beq.n	85a62 <memchr+0x8a>
   859e0:	1e54      	subs	r4, r2, #1
   859e2:	2a00      	cmp	r2, #0
   859e4:	d03f      	beq.n	85a66 <memchr+0x8e>
   859e6:	7803      	ldrb	r3, [r0, #0]
   859e8:	428b      	cmp	r3, r1
   859ea:	bf18      	it	ne
   859ec:	1c43      	addne	r3, r0, #1
   859ee:	d105      	bne.n	859fc <memchr+0x24>
   859f0:	e01c      	b.n	85a2c <memchr+0x54>
   859f2:	b1ec      	cbz	r4, 85a30 <memchr+0x58>
   859f4:	7802      	ldrb	r2, [r0, #0]
   859f6:	3c01      	subs	r4, #1
   859f8:	428a      	cmp	r2, r1
   859fa:	d017      	beq.n	85a2c <memchr+0x54>
   859fc:	f013 0f03 	tst.w	r3, #3
   85a00:	4618      	mov	r0, r3
   85a02:	f103 0301 	add.w	r3, r3, #1
   85a06:	d1f4      	bne.n	859f2 <memchr+0x1a>
   85a08:	2c03      	cmp	r4, #3
   85a0a:	d814      	bhi.n	85a36 <memchr+0x5e>
   85a0c:	b184      	cbz	r4, 85a30 <memchr+0x58>
   85a0e:	7803      	ldrb	r3, [r0, #0]
   85a10:	428b      	cmp	r3, r1
   85a12:	d00b      	beq.n	85a2c <memchr+0x54>
   85a14:	1905      	adds	r5, r0, r4
   85a16:	1c43      	adds	r3, r0, #1
   85a18:	e002      	b.n	85a20 <memchr+0x48>
   85a1a:	7802      	ldrb	r2, [r0, #0]
   85a1c:	428a      	cmp	r2, r1
   85a1e:	d005      	beq.n	85a2c <memchr+0x54>
   85a20:	42ab      	cmp	r3, r5
   85a22:	4618      	mov	r0, r3
   85a24:	f103 0301 	add.w	r3, r3, #1
   85a28:	d1f7      	bne.n	85a1a <memchr+0x42>
   85a2a:	2000      	movs	r0, #0
   85a2c:	bc70      	pop	{r4, r5, r6}
   85a2e:	4770      	bx	lr
   85a30:	4620      	mov	r0, r4
   85a32:	bc70      	pop	{r4, r5, r6}
   85a34:	4770      	bx	lr
   85a36:	4602      	mov	r2, r0
   85a38:	ea41 2601 	orr.w	r6, r1, r1, lsl #8
   85a3c:	ea46 4606 	orr.w	r6, r6, r6, lsl #16
   85a40:	6813      	ldr	r3, [r2, #0]
   85a42:	4610      	mov	r0, r2
   85a44:	4073      	eors	r3, r6
   85a46:	f1a3 3501 	sub.w	r5, r3, #16843009	; 0x1010101
   85a4a:	ea25 0303 	bic.w	r3, r5, r3
   85a4e:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
   85a52:	f102 0204 	add.w	r2, r2, #4
   85a56:	d1d9      	bne.n	85a0c <memchr+0x34>
   85a58:	3c04      	subs	r4, #4
   85a5a:	2c03      	cmp	r4, #3
   85a5c:	4610      	mov	r0, r2
   85a5e:	d8ef      	bhi.n	85a40 <memchr+0x68>
   85a60:	e7d4      	b.n	85a0c <memchr+0x34>
   85a62:	4614      	mov	r4, r2
   85a64:	e7d0      	b.n	85a08 <memchr+0x30>
   85a66:	4610      	mov	r0, r2
   85a68:	e7e0      	b.n	85a2c <memchr+0x54>
   85a6a:	bf00      	nop

00085a6c <memmove>:
   85a6c:	4288      	cmp	r0, r1
   85a6e:	b5f0      	push	{r4, r5, r6, r7, lr}
   85a70:	d90d      	bls.n	85a8e <memmove+0x22>
   85a72:	188b      	adds	r3, r1, r2
   85a74:	4298      	cmp	r0, r3
   85a76:	d20a      	bcs.n	85a8e <memmove+0x22>
   85a78:	1881      	adds	r1, r0, r2
   85a7a:	2a00      	cmp	r2, #0
   85a7c:	d054      	beq.n	85b28 <memmove+0xbc>
   85a7e:	1a9a      	subs	r2, r3, r2
   85a80:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   85a84:	4293      	cmp	r3, r2
   85a86:	f801 4d01 	strb.w	r4, [r1, #-1]!
   85a8a:	d1f9      	bne.n	85a80 <memmove+0x14>
   85a8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   85a8e:	2a0f      	cmp	r2, #15
   85a90:	d948      	bls.n	85b24 <memmove+0xb8>
   85a92:	ea40 0301 	orr.w	r3, r0, r1
   85a96:	079b      	lsls	r3, r3, #30
   85a98:	d147      	bne.n	85b2a <memmove+0xbe>
   85a9a:	4615      	mov	r5, r2
   85a9c:	f100 0410 	add.w	r4, r0, #16
   85aa0:	f101 0310 	add.w	r3, r1, #16
   85aa4:	f853 6c10 	ldr.w	r6, [r3, #-16]
   85aa8:	3d10      	subs	r5, #16
   85aaa:	f844 6c10 	str.w	r6, [r4, #-16]
   85aae:	f853 6c0c 	ldr.w	r6, [r3, #-12]
   85ab2:	2d0f      	cmp	r5, #15
   85ab4:	f844 6c0c 	str.w	r6, [r4, #-12]
   85ab8:	f853 6c08 	ldr.w	r6, [r3, #-8]
   85abc:	f104 0410 	add.w	r4, r4, #16
   85ac0:	f844 6c18 	str.w	r6, [r4, #-24]
   85ac4:	f853 6c04 	ldr.w	r6, [r3, #-4]
   85ac8:	f103 0310 	add.w	r3, r3, #16
   85acc:	f844 6c14 	str.w	r6, [r4, #-20]
   85ad0:	d8e8      	bhi.n	85aa4 <memmove+0x38>
   85ad2:	f1a2 0310 	sub.w	r3, r2, #16
   85ad6:	f023 030f 	bic.w	r3, r3, #15
   85ada:	f002 0e0f 	and.w	lr, r2, #15
   85ade:	3310      	adds	r3, #16
   85ae0:	f1be 0f03 	cmp.w	lr, #3
   85ae4:	4419      	add	r1, r3
   85ae6:	4403      	add	r3, r0
   85ae8:	d921      	bls.n	85b2e <memmove+0xc2>
   85aea:	460e      	mov	r6, r1
   85aec:	4674      	mov	r4, lr
   85aee:	1f1d      	subs	r5, r3, #4
   85af0:	f856 7b04 	ldr.w	r7, [r6], #4
   85af4:	3c04      	subs	r4, #4
   85af6:	2c03      	cmp	r4, #3
   85af8:	f845 7f04 	str.w	r7, [r5, #4]!
   85afc:	d8f8      	bhi.n	85af0 <memmove+0x84>
   85afe:	f1ae 0404 	sub.w	r4, lr, #4
   85b02:	f024 0403 	bic.w	r4, r4, #3
   85b06:	3404      	adds	r4, #4
   85b08:	4423      	add	r3, r4
   85b0a:	4421      	add	r1, r4
   85b0c:	f002 0203 	and.w	r2, r2, #3
   85b10:	b152      	cbz	r2, 85b28 <memmove+0xbc>
   85b12:	3b01      	subs	r3, #1
   85b14:	440a      	add	r2, r1
   85b16:	f811 4b01 	ldrb.w	r4, [r1], #1
   85b1a:	4291      	cmp	r1, r2
   85b1c:	f803 4f01 	strb.w	r4, [r3, #1]!
   85b20:	d1f9      	bne.n	85b16 <memmove+0xaa>
   85b22:	bdf0      	pop	{r4, r5, r6, r7, pc}
   85b24:	4603      	mov	r3, r0
   85b26:	e7f3      	b.n	85b10 <memmove+0xa4>
   85b28:	bdf0      	pop	{r4, r5, r6, r7, pc}
   85b2a:	4603      	mov	r3, r0
   85b2c:	e7f1      	b.n	85b12 <memmove+0xa6>
   85b2e:	4672      	mov	r2, lr
   85b30:	e7ee      	b.n	85b10 <memmove+0xa4>
   85b32:	bf00      	nop

00085b34 <__malloc_lock>:
   85b34:	4770      	bx	lr
   85b36:	bf00      	nop

00085b38 <__malloc_unlock>:
   85b38:	4770      	bx	lr
   85b3a:	bf00      	nop

00085b3c <_realloc_r>:
   85b3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   85b40:	4617      	mov	r7, r2
   85b42:	b083      	sub	sp, #12
   85b44:	460d      	mov	r5, r1
   85b46:	2900      	cmp	r1, #0
   85b48:	f000 80e2 	beq.w	85d10 <_realloc_r+0x1d4>
   85b4c:	4681      	mov	r9, r0
   85b4e:	f107 040b 	add.w	r4, r7, #11
   85b52:	f7ff ffef 	bl	85b34 <__malloc_lock>
   85b56:	f855 3c04 	ldr.w	r3, [r5, #-4]
   85b5a:	2c16      	cmp	r4, #22
   85b5c:	f023 0603 	bic.w	r6, r3, #3
   85b60:	f1a5 0808 	sub.w	r8, r5, #8
   85b64:	d84b      	bhi.n	85bfe <_realloc_r+0xc2>
   85b66:	2210      	movs	r2, #16
   85b68:	4614      	mov	r4, r2
   85b6a:	42a7      	cmp	r7, r4
   85b6c:	d84c      	bhi.n	85c08 <_realloc_r+0xcc>
   85b6e:	4296      	cmp	r6, r2
   85b70:	da51      	bge.n	85c16 <_realloc_r+0xda>
   85b72:	f8df b3a4 	ldr.w	fp, [pc, #932]	; 85f18 <_realloc_r+0x3dc>
   85b76:	eb08 0106 	add.w	r1, r8, r6
   85b7a:	f8db 0008 	ldr.w	r0, [fp, #8]
   85b7e:	4288      	cmp	r0, r1
   85b80:	f000 80d3 	beq.w	85d2a <_realloc_r+0x1ee>
   85b84:	6848      	ldr	r0, [r1, #4]
   85b86:	f020 0e01 	bic.w	lr, r0, #1
   85b8a:	448e      	add	lr, r1
   85b8c:	f8de e004 	ldr.w	lr, [lr, #4]
   85b90:	f01e 0f01 	tst.w	lr, #1
   85b94:	d154      	bne.n	85c40 <_realloc_r+0x104>
   85b96:	f020 0003 	bic.w	r0, r0, #3
   85b9a:	4430      	add	r0, r6
   85b9c:	4290      	cmp	r0, r2
   85b9e:	f280 80bd 	bge.w	85d1c <_realloc_r+0x1e0>
   85ba2:	07db      	lsls	r3, r3, #31
   85ba4:	f100 8090 	bmi.w	85cc8 <_realloc_r+0x18c>
   85ba8:	f855 3c08 	ldr.w	r3, [r5, #-8]
   85bac:	ebc3 0a08 	rsb	sl, r3, r8
   85bb0:	f8da 3004 	ldr.w	r3, [sl, #4]
   85bb4:	f023 0303 	bic.w	r3, r3, #3
   85bb8:	eb00 0e03 	add.w	lr, r0, r3
   85bbc:	4596      	cmp	lr, r2
   85bbe:	db49      	blt.n	85c54 <_realloc_r+0x118>
   85bc0:	4657      	mov	r7, sl
   85bc2:	68cb      	ldr	r3, [r1, #12]
   85bc4:	6889      	ldr	r1, [r1, #8]
   85bc6:	1f32      	subs	r2, r6, #4
   85bc8:	60cb      	str	r3, [r1, #12]
   85bca:	6099      	str	r1, [r3, #8]
   85bcc:	f857 1f08 	ldr.w	r1, [r7, #8]!
   85bd0:	f8da 300c 	ldr.w	r3, [sl, #12]
   85bd4:	2a24      	cmp	r2, #36	; 0x24
   85bd6:	60cb      	str	r3, [r1, #12]
   85bd8:	6099      	str	r1, [r3, #8]
   85bda:	f200 8133 	bhi.w	85e44 <_realloc_r+0x308>
   85bde:	2a13      	cmp	r2, #19
   85be0:	f240 80fa 	bls.w	85dd8 <_realloc_r+0x29c>
   85be4:	682b      	ldr	r3, [r5, #0]
   85be6:	2a1b      	cmp	r2, #27
   85be8:	f8ca 3008 	str.w	r3, [sl, #8]
   85bec:	686b      	ldr	r3, [r5, #4]
   85bee:	f8ca 300c 	str.w	r3, [sl, #12]
   85bf2:	f200 813b 	bhi.w	85e6c <_realloc_r+0x330>
   85bf6:	3508      	adds	r5, #8
   85bf8:	f10a 0310 	add.w	r3, sl, #16
   85bfc:	e0ed      	b.n	85dda <_realloc_r+0x29e>
   85bfe:	f024 0407 	bic.w	r4, r4, #7
   85c02:	2c00      	cmp	r4, #0
   85c04:	4622      	mov	r2, r4
   85c06:	dab0      	bge.n	85b6a <_realloc_r+0x2e>
   85c08:	230c      	movs	r3, #12
   85c0a:	2000      	movs	r0, #0
   85c0c:	f8c9 3000 	str.w	r3, [r9]
   85c10:	b003      	add	sp, #12
   85c12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   85c16:	462f      	mov	r7, r5
   85c18:	1b32      	subs	r2, r6, r4
   85c1a:	2a0f      	cmp	r2, #15
   85c1c:	f003 0301 	and.w	r3, r3, #1
   85c20:	d840      	bhi.n	85ca4 <_realloc_r+0x168>
   85c22:	4333      	orrs	r3, r6
   85c24:	f8c8 3004 	str.w	r3, [r8, #4]
   85c28:	4446      	add	r6, r8
   85c2a:	6873      	ldr	r3, [r6, #4]
   85c2c:	f043 0301 	orr.w	r3, r3, #1
   85c30:	6073      	str	r3, [r6, #4]
   85c32:	4648      	mov	r0, r9
   85c34:	f7ff ff80 	bl	85b38 <__malloc_unlock>
   85c38:	4638      	mov	r0, r7
   85c3a:	b003      	add	sp, #12
   85c3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   85c40:	07d9      	lsls	r1, r3, #31
   85c42:	d441      	bmi.n	85cc8 <_realloc_r+0x18c>
   85c44:	f855 3c08 	ldr.w	r3, [r5, #-8]
   85c48:	ebc3 0a08 	rsb	sl, r3, r8
   85c4c:	f8da 3004 	ldr.w	r3, [sl, #4]
   85c50:	f023 0303 	bic.w	r3, r3, #3
   85c54:	4433      	add	r3, r6
   85c56:	4293      	cmp	r3, r2
   85c58:	db36      	blt.n	85cc8 <_realloc_r+0x18c>
   85c5a:	4657      	mov	r7, sl
   85c5c:	f8da 100c 	ldr.w	r1, [sl, #12]
   85c60:	f857 0f08 	ldr.w	r0, [r7, #8]!
   85c64:	1f32      	subs	r2, r6, #4
   85c66:	2a24      	cmp	r2, #36	; 0x24
   85c68:	60c1      	str	r1, [r0, #12]
   85c6a:	6088      	str	r0, [r1, #8]
   85c6c:	f200 80f5 	bhi.w	85e5a <_realloc_r+0x31e>
   85c70:	2a13      	cmp	r2, #19
   85c72:	f240 80f0 	bls.w	85e56 <_realloc_r+0x31a>
   85c76:	6829      	ldr	r1, [r5, #0]
   85c78:	2a1b      	cmp	r2, #27
   85c7a:	f8ca 1008 	str.w	r1, [sl, #8]
   85c7e:	6869      	ldr	r1, [r5, #4]
   85c80:	f8ca 100c 	str.w	r1, [sl, #12]
   85c84:	f200 8107 	bhi.w	85e96 <_realloc_r+0x35a>
   85c88:	3508      	adds	r5, #8
   85c8a:	f10a 0210 	add.w	r2, sl, #16
   85c8e:	6829      	ldr	r1, [r5, #0]
   85c90:	461e      	mov	r6, r3
   85c92:	6011      	str	r1, [r2, #0]
   85c94:	6869      	ldr	r1, [r5, #4]
   85c96:	46d0      	mov	r8, sl
   85c98:	6051      	str	r1, [r2, #4]
   85c9a:	68ab      	ldr	r3, [r5, #8]
   85c9c:	6093      	str	r3, [r2, #8]
   85c9e:	f8da 3004 	ldr.w	r3, [sl, #4]
   85ca2:	e7b9      	b.n	85c18 <_realloc_r+0xdc>
   85ca4:	eb08 0104 	add.w	r1, r8, r4
   85ca8:	4323      	orrs	r3, r4
   85caa:	f042 0001 	orr.w	r0, r2, #1
   85cae:	f8c8 3004 	str.w	r3, [r8, #4]
   85cb2:	440a      	add	r2, r1
   85cb4:	6048      	str	r0, [r1, #4]
   85cb6:	6853      	ldr	r3, [r2, #4]
   85cb8:	3108      	adds	r1, #8
   85cba:	f043 0301 	orr.w	r3, r3, #1
   85cbe:	6053      	str	r3, [r2, #4]
   85cc0:	4648      	mov	r0, r9
   85cc2:	f7ff f8f1 	bl	84ea8 <_free_r>
   85cc6:	e7b4      	b.n	85c32 <_realloc_r+0xf6>
   85cc8:	4639      	mov	r1, r7
   85cca:	4648      	mov	r0, r9
   85ccc:	f7ff fbfe 	bl	854cc <_malloc_r>
   85cd0:	4607      	mov	r7, r0
   85cd2:	2800      	cmp	r0, #0
   85cd4:	d0ad      	beq.n	85c32 <_realloc_r+0xf6>
   85cd6:	f855 3c04 	ldr.w	r3, [r5, #-4]
   85cda:	f1a0 0108 	sub.w	r1, r0, #8
   85cde:	f023 0201 	bic.w	r2, r3, #1
   85ce2:	4442      	add	r2, r8
   85ce4:	4291      	cmp	r1, r2
   85ce6:	f000 80a6 	beq.w	85e36 <_realloc_r+0x2fa>
   85cea:	1f32      	subs	r2, r6, #4
   85cec:	2a24      	cmp	r2, #36	; 0x24
   85cee:	f200 8093 	bhi.w	85e18 <_realloc_r+0x2dc>
   85cf2:	2a13      	cmp	r2, #19
   85cf4:	d865      	bhi.n	85dc2 <_realloc_r+0x286>
   85cf6:	4603      	mov	r3, r0
   85cf8:	462a      	mov	r2, r5
   85cfa:	6811      	ldr	r1, [r2, #0]
   85cfc:	6019      	str	r1, [r3, #0]
   85cfe:	6851      	ldr	r1, [r2, #4]
   85d00:	6059      	str	r1, [r3, #4]
   85d02:	6892      	ldr	r2, [r2, #8]
   85d04:	609a      	str	r2, [r3, #8]
   85d06:	4629      	mov	r1, r5
   85d08:	4648      	mov	r0, r9
   85d0a:	f7ff f8cd 	bl	84ea8 <_free_r>
   85d0e:	e790      	b.n	85c32 <_realloc_r+0xf6>
   85d10:	4611      	mov	r1, r2
   85d12:	b003      	add	sp, #12
   85d14:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   85d18:	f7ff bbd8 	b.w	854cc <_malloc_r>
   85d1c:	68ca      	ldr	r2, [r1, #12]
   85d1e:	6889      	ldr	r1, [r1, #8]
   85d20:	462f      	mov	r7, r5
   85d22:	60ca      	str	r2, [r1, #12]
   85d24:	4606      	mov	r6, r0
   85d26:	6091      	str	r1, [r2, #8]
   85d28:	e776      	b.n	85c18 <_realloc_r+0xdc>
   85d2a:	6841      	ldr	r1, [r0, #4]
   85d2c:	f104 0010 	add.w	r0, r4, #16
   85d30:	f021 0103 	bic.w	r1, r1, #3
   85d34:	4431      	add	r1, r6
   85d36:	4281      	cmp	r1, r0
   85d38:	da5a      	bge.n	85df0 <_realloc_r+0x2b4>
   85d3a:	07db      	lsls	r3, r3, #31
   85d3c:	d4c4      	bmi.n	85cc8 <_realloc_r+0x18c>
   85d3e:	f855 3c08 	ldr.w	r3, [r5, #-8]
   85d42:	ebc3 0a08 	rsb	sl, r3, r8
   85d46:	f8da 3004 	ldr.w	r3, [sl, #4]
   85d4a:	f023 0303 	bic.w	r3, r3, #3
   85d4e:	eb01 0c03 	add.w	ip, r1, r3
   85d52:	4560      	cmp	r0, ip
   85d54:	f73f af7e 	bgt.w	85c54 <_realloc_r+0x118>
   85d58:	4657      	mov	r7, sl
   85d5a:	f8da 300c 	ldr.w	r3, [sl, #12]
   85d5e:	f857 1f08 	ldr.w	r1, [r7, #8]!
   85d62:	1f32      	subs	r2, r6, #4
   85d64:	2a24      	cmp	r2, #36	; 0x24
   85d66:	60cb      	str	r3, [r1, #12]
   85d68:	6099      	str	r1, [r3, #8]
   85d6a:	f200 80b6 	bhi.w	85eda <_realloc_r+0x39e>
   85d6e:	2a13      	cmp	r2, #19
   85d70:	f240 80a7 	bls.w	85ec2 <_realloc_r+0x386>
   85d74:	682b      	ldr	r3, [r5, #0]
   85d76:	2a1b      	cmp	r2, #27
   85d78:	f8ca 3008 	str.w	r3, [sl, #8]
   85d7c:	686b      	ldr	r3, [r5, #4]
   85d7e:	f8ca 300c 	str.w	r3, [sl, #12]
   85d82:	f200 80b3 	bhi.w	85eec <_realloc_r+0x3b0>
   85d86:	3508      	adds	r5, #8
   85d88:	f10a 0310 	add.w	r3, sl, #16
   85d8c:	682a      	ldr	r2, [r5, #0]
   85d8e:	601a      	str	r2, [r3, #0]
   85d90:	686a      	ldr	r2, [r5, #4]
   85d92:	605a      	str	r2, [r3, #4]
   85d94:	68aa      	ldr	r2, [r5, #8]
   85d96:	609a      	str	r2, [r3, #8]
   85d98:	ebc4 030c 	rsb	r3, r4, ip
   85d9c:	eb0a 0204 	add.w	r2, sl, r4
   85da0:	f043 0301 	orr.w	r3, r3, #1
   85da4:	f8cb 2008 	str.w	r2, [fp, #8]
   85da8:	6053      	str	r3, [r2, #4]
   85daa:	f8da 3004 	ldr.w	r3, [sl, #4]
   85dae:	4648      	mov	r0, r9
   85db0:	f003 0301 	and.w	r3, r3, #1
   85db4:	431c      	orrs	r4, r3
   85db6:	f8ca 4004 	str.w	r4, [sl, #4]
   85dba:	f7ff febd 	bl	85b38 <__malloc_unlock>
   85dbe:	4638      	mov	r0, r7
   85dc0:	e73b      	b.n	85c3a <_realloc_r+0xfe>
   85dc2:	682b      	ldr	r3, [r5, #0]
   85dc4:	2a1b      	cmp	r2, #27
   85dc6:	6003      	str	r3, [r0, #0]
   85dc8:	686b      	ldr	r3, [r5, #4]
   85dca:	6043      	str	r3, [r0, #4]
   85dcc:	d828      	bhi.n	85e20 <_realloc_r+0x2e4>
   85dce:	f100 0308 	add.w	r3, r0, #8
   85dd2:	f105 0208 	add.w	r2, r5, #8
   85dd6:	e790      	b.n	85cfa <_realloc_r+0x1be>
   85dd8:	463b      	mov	r3, r7
   85dda:	682a      	ldr	r2, [r5, #0]
   85ddc:	4676      	mov	r6, lr
   85dde:	601a      	str	r2, [r3, #0]
   85de0:	686a      	ldr	r2, [r5, #4]
   85de2:	46d0      	mov	r8, sl
   85de4:	605a      	str	r2, [r3, #4]
   85de6:	68aa      	ldr	r2, [r5, #8]
   85de8:	609a      	str	r2, [r3, #8]
   85dea:	f8da 3004 	ldr.w	r3, [sl, #4]
   85dee:	e713      	b.n	85c18 <_realloc_r+0xdc>
   85df0:	1b0b      	subs	r3, r1, r4
   85df2:	eb08 0204 	add.w	r2, r8, r4
   85df6:	f043 0301 	orr.w	r3, r3, #1
   85dfa:	f8cb 2008 	str.w	r2, [fp, #8]
   85dfe:	6053      	str	r3, [r2, #4]
   85e00:	f855 3c04 	ldr.w	r3, [r5, #-4]
   85e04:	4648      	mov	r0, r9
   85e06:	f003 0301 	and.w	r3, r3, #1
   85e0a:	431c      	orrs	r4, r3
   85e0c:	f845 4c04 	str.w	r4, [r5, #-4]
   85e10:	f7ff fe92 	bl	85b38 <__malloc_unlock>
   85e14:	4628      	mov	r0, r5
   85e16:	e710      	b.n	85c3a <_realloc_r+0xfe>
   85e18:	4629      	mov	r1, r5
   85e1a:	f7ff fe27 	bl	85a6c <memmove>
   85e1e:	e772      	b.n	85d06 <_realloc_r+0x1ca>
   85e20:	68ab      	ldr	r3, [r5, #8]
   85e22:	2a24      	cmp	r2, #36	; 0x24
   85e24:	6083      	str	r3, [r0, #8]
   85e26:	68eb      	ldr	r3, [r5, #12]
   85e28:	60c3      	str	r3, [r0, #12]
   85e2a:	d02b      	beq.n	85e84 <_realloc_r+0x348>
   85e2c:	f100 0310 	add.w	r3, r0, #16
   85e30:	f105 0210 	add.w	r2, r5, #16
   85e34:	e761      	b.n	85cfa <_realloc_r+0x1be>
   85e36:	f850 2c04 	ldr.w	r2, [r0, #-4]
   85e3a:	462f      	mov	r7, r5
   85e3c:	f022 0203 	bic.w	r2, r2, #3
   85e40:	4416      	add	r6, r2
   85e42:	e6e9      	b.n	85c18 <_realloc_r+0xdc>
   85e44:	4629      	mov	r1, r5
   85e46:	4638      	mov	r0, r7
   85e48:	4676      	mov	r6, lr
   85e4a:	46d0      	mov	r8, sl
   85e4c:	f7ff fe0e 	bl	85a6c <memmove>
   85e50:	f8da 3004 	ldr.w	r3, [sl, #4]
   85e54:	e6e0      	b.n	85c18 <_realloc_r+0xdc>
   85e56:	463a      	mov	r2, r7
   85e58:	e719      	b.n	85c8e <_realloc_r+0x152>
   85e5a:	4629      	mov	r1, r5
   85e5c:	4638      	mov	r0, r7
   85e5e:	461e      	mov	r6, r3
   85e60:	46d0      	mov	r8, sl
   85e62:	f7ff fe03 	bl	85a6c <memmove>
   85e66:	f8da 3004 	ldr.w	r3, [sl, #4]
   85e6a:	e6d5      	b.n	85c18 <_realloc_r+0xdc>
   85e6c:	68ab      	ldr	r3, [r5, #8]
   85e6e:	2a24      	cmp	r2, #36	; 0x24
   85e70:	f8ca 3010 	str.w	r3, [sl, #16]
   85e74:	68eb      	ldr	r3, [r5, #12]
   85e76:	f8ca 3014 	str.w	r3, [sl, #20]
   85e7a:	d018      	beq.n	85eae <_realloc_r+0x372>
   85e7c:	3510      	adds	r5, #16
   85e7e:	f10a 0318 	add.w	r3, sl, #24
   85e82:	e7aa      	b.n	85dda <_realloc_r+0x29e>
   85e84:	692a      	ldr	r2, [r5, #16]
   85e86:	f100 0318 	add.w	r3, r0, #24
   85e8a:	6102      	str	r2, [r0, #16]
   85e8c:	6969      	ldr	r1, [r5, #20]
   85e8e:	f105 0218 	add.w	r2, r5, #24
   85e92:	6141      	str	r1, [r0, #20]
   85e94:	e731      	b.n	85cfa <_realloc_r+0x1be>
   85e96:	68a9      	ldr	r1, [r5, #8]
   85e98:	2a24      	cmp	r2, #36	; 0x24
   85e9a:	f8ca 1010 	str.w	r1, [sl, #16]
   85e9e:	68e9      	ldr	r1, [r5, #12]
   85ea0:	f8ca 1014 	str.w	r1, [sl, #20]
   85ea4:	d00f      	beq.n	85ec6 <_realloc_r+0x38a>
   85ea6:	3510      	adds	r5, #16
   85ea8:	f10a 0218 	add.w	r2, sl, #24
   85eac:	e6ef      	b.n	85c8e <_realloc_r+0x152>
   85eae:	692a      	ldr	r2, [r5, #16]
   85eb0:	f10a 0320 	add.w	r3, sl, #32
   85eb4:	f8ca 2018 	str.w	r2, [sl, #24]
   85eb8:	696a      	ldr	r2, [r5, #20]
   85eba:	3518      	adds	r5, #24
   85ebc:	f8ca 201c 	str.w	r2, [sl, #28]
   85ec0:	e78b      	b.n	85dda <_realloc_r+0x29e>
   85ec2:	463b      	mov	r3, r7
   85ec4:	e762      	b.n	85d8c <_realloc_r+0x250>
   85ec6:	6929      	ldr	r1, [r5, #16]
   85ec8:	f10a 0220 	add.w	r2, sl, #32
   85ecc:	f8ca 1018 	str.w	r1, [sl, #24]
   85ed0:	6969      	ldr	r1, [r5, #20]
   85ed2:	3518      	adds	r5, #24
   85ed4:	f8ca 101c 	str.w	r1, [sl, #28]
   85ed8:	e6d9      	b.n	85c8e <_realloc_r+0x152>
   85eda:	4629      	mov	r1, r5
   85edc:	4638      	mov	r0, r7
   85ede:	f8cd c004 	str.w	ip, [sp, #4]
   85ee2:	f7ff fdc3 	bl	85a6c <memmove>
   85ee6:	f8dd c004 	ldr.w	ip, [sp, #4]
   85eea:	e755      	b.n	85d98 <_realloc_r+0x25c>
   85eec:	68ab      	ldr	r3, [r5, #8]
   85eee:	2a24      	cmp	r2, #36	; 0x24
   85ef0:	f8ca 3010 	str.w	r3, [sl, #16]
   85ef4:	68eb      	ldr	r3, [r5, #12]
   85ef6:	f8ca 3014 	str.w	r3, [sl, #20]
   85efa:	d003      	beq.n	85f04 <_realloc_r+0x3c8>
   85efc:	3510      	adds	r5, #16
   85efe:	f10a 0318 	add.w	r3, sl, #24
   85f02:	e743      	b.n	85d8c <_realloc_r+0x250>
   85f04:	692a      	ldr	r2, [r5, #16]
   85f06:	f10a 0320 	add.w	r3, sl, #32
   85f0a:	f8ca 2018 	str.w	r2, [sl, #24]
   85f0e:	696a      	ldr	r2, [r5, #20]
   85f10:	3518      	adds	r5, #24
   85f12:	f8ca 201c 	str.w	r2, [sl, #28]
   85f16:	e739      	b.n	85d8c <_realloc_r+0x250>
   85f18:	200705a8 	.word	0x200705a8

00085f1c <_sbrk_r>:
   85f1c:	b538      	push	{r3, r4, r5, lr}
   85f1e:	4c07      	ldr	r4, [pc, #28]	; (85f3c <_sbrk_r+0x20>)
   85f20:	2300      	movs	r3, #0
   85f22:	4605      	mov	r5, r0
   85f24:	4608      	mov	r0, r1
   85f26:	6023      	str	r3, [r4, #0]
   85f28:	f7fc fdea 	bl	82b00 <_sbrk>
   85f2c:	1c43      	adds	r3, r0, #1
   85f2e:	d000      	beq.n	85f32 <_sbrk_r+0x16>
   85f30:	bd38      	pop	{r3, r4, r5, pc}
   85f32:	6823      	ldr	r3, [r4, #0]
   85f34:	2b00      	cmp	r3, #0
   85f36:	d0fb      	beq.n	85f30 <_sbrk_r+0x14>
   85f38:	602b      	str	r3, [r5, #0]
   85f3a:	bd38      	pop	{r3, r4, r5, pc}
   85f3c:	20078ca4 	.word	0x20078ca4

00085f40 <__sread>:
   85f40:	b510      	push	{r4, lr}
   85f42:	460c      	mov	r4, r1
   85f44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   85f48:	f000 f9bc 	bl	862c4 <_read_r>
   85f4c:	2800      	cmp	r0, #0
   85f4e:	db03      	blt.n	85f58 <__sread+0x18>
   85f50:	6d23      	ldr	r3, [r4, #80]	; 0x50
   85f52:	4403      	add	r3, r0
   85f54:	6523      	str	r3, [r4, #80]	; 0x50
   85f56:	bd10      	pop	{r4, pc}
   85f58:	89a3      	ldrh	r3, [r4, #12]
   85f5a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   85f5e:	81a3      	strh	r3, [r4, #12]
   85f60:	bd10      	pop	{r4, pc}
   85f62:	bf00      	nop

00085f64 <__swrite>:
   85f64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   85f68:	460c      	mov	r4, r1
   85f6a:	8989      	ldrh	r1, [r1, #12]
   85f6c:	461d      	mov	r5, r3
   85f6e:	05cb      	lsls	r3, r1, #23
   85f70:	4616      	mov	r6, r2
   85f72:	4607      	mov	r7, r0
   85f74:	d506      	bpl.n	85f84 <__swrite+0x20>
   85f76:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   85f7a:	2200      	movs	r2, #0
   85f7c:	2302      	movs	r3, #2
   85f7e:	f000 f98d 	bl	8629c <_lseek_r>
   85f82:	89a1      	ldrh	r1, [r4, #12]
   85f84:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
   85f88:	81a1      	strh	r1, [r4, #12]
   85f8a:	4638      	mov	r0, r7
   85f8c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   85f90:	4632      	mov	r2, r6
   85f92:	462b      	mov	r3, r5
   85f94:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   85f98:	f000 b8a0 	b.w	860dc <_write_r>

00085f9c <__sseek>:
   85f9c:	b510      	push	{r4, lr}
   85f9e:	460c      	mov	r4, r1
   85fa0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   85fa4:	f000 f97a 	bl	8629c <_lseek_r>
   85fa8:	89a3      	ldrh	r3, [r4, #12]
   85faa:	1c42      	adds	r2, r0, #1
   85fac:	bf0e      	itee	eq
   85fae:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   85fb2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   85fb6:	6520      	strne	r0, [r4, #80]	; 0x50
   85fb8:	81a3      	strh	r3, [r4, #12]
   85fba:	bd10      	pop	{r4, pc}

00085fbc <__sclose>:
   85fbc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   85fc0:	f000 b8f2 	b.w	861a8 <_close_r>

00085fc4 <__swbuf_r>:
   85fc4:	b570      	push	{r4, r5, r6, lr}
   85fc6:	460d      	mov	r5, r1
   85fc8:	4614      	mov	r4, r2
   85fca:	4606      	mov	r6, r0
   85fcc:	b110      	cbz	r0, 85fd4 <__swbuf_r+0x10>
   85fce:	6b83      	ldr	r3, [r0, #56]	; 0x38
   85fd0:	2b00      	cmp	r3, #0
   85fd2:	d048      	beq.n	86066 <__swbuf_r+0xa2>
   85fd4:	89a2      	ldrh	r2, [r4, #12]
   85fd6:	69a3      	ldr	r3, [r4, #24]
   85fd8:	b291      	uxth	r1, r2
   85fda:	0708      	lsls	r0, r1, #28
   85fdc:	60a3      	str	r3, [r4, #8]
   85fde:	d538      	bpl.n	86052 <__swbuf_r+0x8e>
   85fe0:	6923      	ldr	r3, [r4, #16]
   85fe2:	2b00      	cmp	r3, #0
   85fe4:	d035      	beq.n	86052 <__swbuf_r+0x8e>
   85fe6:	0489      	lsls	r1, r1, #18
   85fe8:	b2ed      	uxtb	r5, r5
   85fea:	d515      	bpl.n	86018 <__swbuf_r+0x54>
   85fec:	6822      	ldr	r2, [r4, #0]
   85fee:	6961      	ldr	r1, [r4, #20]
   85ff0:	1ad3      	subs	r3, r2, r3
   85ff2:	428b      	cmp	r3, r1
   85ff4:	da1c      	bge.n	86030 <__swbuf_r+0x6c>
   85ff6:	3301      	adds	r3, #1
   85ff8:	68a1      	ldr	r1, [r4, #8]
   85ffa:	1c50      	adds	r0, r2, #1
   85ffc:	3901      	subs	r1, #1
   85ffe:	60a1      	str	r1, [r4, #8]
   86000:	6020      	str	r0, [r4, #0]
   86002:	7015      	strb	r5, [r2, #0]
   86004:	6962      	ldr	r2, [r4, #20]
   86006:	429a      	cmp	r2, r3
   86008:	d01a      	beq.n	86040 <__swbuf_r+0x7c>
   8600a:	89a3      	ldrh	r3, [r4, #12]
   8600c:	07db      	lsls	r3, r3, #31
   8600e:	d501      	bpl.n	86014 <__swbuf_r+0x50>
   86010:	2d0a      	cmp	r5, #10
   86012:	d015      	beq.n	86040 <__swbuf_r+0x7c>
   86014:	4628      	mov	r0, r5
   86016:	bd70      	pop	{r4, r5, r6, pc}
   86018:	6e61      	ldr	r1, [r4, #100]	; 0x64
   8601a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   8601e:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
   86022:	81a2      	strh	r2, [r4, #12]
   86024:	6822      	ldr	r2, [r4, #0]
   86026:	6661      	str	r1, [r4, #100]	; 0x64
   86028:	6961      	ldr	r1, [r4, #20]
   8602a:	1ad3      	subs	r3, r2, r3
   8602c:	428b      	cmp	r3, r1
   8602e:	dbe2      	blt.n	85ff6 <__swbuf_r+0x32>
   86030:	4630      	mov	r0, r6
   86032:	4621      	mov	r1, r4
   86034:	f7fe fdcc 	bl	84bd0 <_fflush_r>
   86038:	b940      	cbnz	r0, 8604c <__swbuf_r+0x88>
   8603a:	6822      	ldr	r2, [r4, #0]
   8603c:	2301      	movs	r3, #1
   8603e:	e7db      	b.n	85ff8 <__swbuf_r+0x34>
   86040:	4630      	mov	r0, r6
   86042:	4621      	mov	r1, r4
   86044:	f7fe fdc4 	bl	84bd0 <_fflush_r>
   86048:	2800      	cmp	r0, #0
   8604a:	d0e3      	beq.n	86014 <__swbuf_r+0x50>
   8604c:	f04f 30ff 	mov.w	r0, #4294967295
   86050:	bd70      	pop	{r4, r5, r6, pc}
   86052:	4630      	mov	r0, r6
   86054:	4621      	mov	r1, r4
   86056:	f7fe fca5 	bl	849a4 <__swsetup_r>
   8605a:	2800      	cmp	r0, #0
   8605c:	d1f6      	bne.n	8604c <__swbuf_r+0x88>
   8605e:	89a2      	ldrh	r2, [r4, #12]
   86060:	6923      	ldr	r3, [r4, #16]
   86062:	b291      	uxth	r1, r2
   86064:	e7bf      	b.n	85fe6 <__swbuf_r+0x22>
   86066:	f7fe fe47 	bl	84cf8 <__sinit>
   8606a:	e7b3      	b.n	85fd4 <__swbuf_r+0x10>

0008606c <_wcrtomb_r>:
   8606c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   86070:	4605      	mov	r5, r0
   86072:	b086      	sub	sp, #24
   86074:	461e      	mov	r6, r3
   86076:	460c      	mov	r4, r1
   86078:	b1a1      	cbz	r1, 860a4 <_wcrtomb_r+0x38>
   8607a:	4b10      	ldr	r3, [pc, #64]	; (860bc <_wcrtomb_r+0x50>)
   8607c:	4617      	mov	r7, r2
   8607e:	f8d3 8000 	ldr.w	r8, [r3]
   86082:	f7ff f9a1 	bl	853c8 <__locale_charset>
   86086:	9600      	str	r6, [sp, #0]
   86088:	4603      	mov	r3, r0
   8608a:	4621      	mov	r1, r4
   8608c:	463a      	mov	r2, r7
   8608e:	4628      	mov	r0, r5
   86090:	47c0      	blx	r8
   86092:	1c43      	adds	r3, r0, #1
   86094:	d103      	bne.n	8609e <_wcrtomb_r+0x32>
   86096:	2200      	movs	r2, #0
   86098:	238a      	movs	r3, #138	; 0x8a
   8609a:	6032      	str	r2, [r6, #0]
   8609c:	602b      	str	r3, [r5, #0]
   8609e:	b006      	add	sp, #24
   860a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   860a4:	4b05      	ldr	r3, [pc, #20]	; (860bc <_wcrtomb_r+0x50>)
   860a6:	681f      	ldr	r7, [r3, #0]
   860a8:	f7ff f98e 	bl	853c8 <__locale_charset>
   860ac:	9600      	str	r6, [sp, #0]
   860ae:	4603      	mov	r3, r0
   860b0:	4622      	mov	r2, r4
   860b2:	4628      	mov	r0, r5
   860b4:	a903      	add	r1, sp, #12
   860b6:	47b8      	blx	r7
   860b8:	e7eb      	b.n	86092 <_wcrtomb_r+0x26>
   860ba:	bf00      	nop
   860bc:	200709b8 	.word	0x200709b8

000860c0 <__ascii_wctomb>:
   860c0:	b121      	cbz	r1, 860cc <__ascii_wctomb+0xc>
   860c2:	2aff      	cmp	r2, #255	; 0xff
   860c4:	d804      	bhi.n	860d0 <__ascii_wctomb+0x10>
   860c6:	700a      	strb	r2, [r1, #0]
   860c8:	2001      	movs	r0, #1
   860ca:	4770      	bx	lr
   860cc:	4608      	mov	r0, r1
   860ce:	4770      	bx	lr
   860d0:	238a      	movs	r3, #138	; 0x8a
   860d2:	6003      	str	r3, [r0, #0]
   860d4:	f04f 30ff 	mov.w	r0, #4294967295
   860d8:	4770      	bx	lr
   860da:	bf00      	nop

000860dc <_write_r>:
   860dc:	b570      	push	{r4, r5, r6, lr}
   860de:	4c08      	ldr	r4, [pc, #32]	; (86100 <_write_r+0x24>)
   860e0:	4606      	mov	r6, r0
   860e2:	2500      	movs	r5, #0
   860e4:	4608      	mov	r0, r1
   860e6:	4611      	mov	r1, r2
   860e8:	461a      	mov	r2, r3
   860ea:	6025      	str	r5, [r4, #0]
   860ec:	f7fc f85a 	bl	821a4 <_write>
   860f0:	1c43      	adds	r3, r0, #1
   860f2:	d000      	beq.n	860f6 <_write_r+0x1a>
   860f4:	bd70      	pop	{r4, r5, r6, pc}
   860f6:	6823      	ldr	r3, [r4, #0]
   860f8:	2b00      	cmp	r3, #0
   860fa:	d0fb      	beq.n	860f4 <_write_r+0x18>
   860fc:	6033      	str	r3, [r6, #0]
   860fe:	bd70      	pop	{r4, r5, r6, pc}
   86100:	20078ca4 	.word	0x20078ca4

00086104 <__register_exitproc>:
   86104:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   86108:	4c25      	ldr	r4, [pc, #148]	; (861a0 <__register_exitproc+0x9c>)
   8610a:	4606      	mov	r6, r0
   8610c:	6825      	ldr	r5, [r4, #0]
   8610e:	4688      	mov	r8, r1
   86110:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
   86114:	4692      	mov	sl, r2
   86116:	4699      	mov	r9, r3
   86118:	b3c4      	cbz	r4, 8618c <__register_exitproc+0x88>
   8611a:	6860      	ldr	r0, [r4, #4]
   8611c:	281f      	cmp	r0, #31
   8611e:	dc17      	bgt.n	86150 <__register_exitproc+0x4c>
   86120:	1c41      	adds	r1, r0, #1
   86122:	b176      	cbz	r6, 86142 <__register_exitproc+0x3e>
   86124:	eb04 0380 	add.w	r3, r4, r0, lsl #2
   86128:	f8c3 a088 	str.w	sl, [r3, #136]	; 0x88
   8612c:	f8d4 5188 	ldr.w	r5, [r4, #392]	; 0x188
   86130:	2201      	movs	r2, #1
   86132:	4082      	lsls	r2, r0
   86134:	4315      	orrs	r5, r2
   86136:	2e02      	cmp	r6, #2
   86138:	f8c4 5188 	str.w	r5, [r4, #392]	; 0x188
   8613c:	f8c3 9108 	str.w	r9, [r3, #264]	; 0x108
   86140:	d01e      	beq.n	86180 <__register_exitproc+0x7c>
   86142:	1c83      	adds	r3, r0, #2
   86144:	6061      	str	r1, [r4, #4]
   86146:	2000      	movs	r0, #0
   86148:	f844 8023 	str.w	r8, [r4, r3, lsl #2]
   8614c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   86150:	4b14      	ldr	r3, [pc, #80]	; (861a4 <__register_exitproc+0xa0>)
   86152:	b303      	cbz	r3, 86196 <__register_exitproc+0x92>
   86154:	f44f 70c8 	mov.w	r0, #400	; 0x190
   86158:	f7ff f9b0 	bl	854bc <malloc>
   8615c:	4604      	mov	r4, r0
   8615e:	b1d0      	cbz	r0, 86196 <__register_exitproc+0x92>
   86160:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
   86164:	2700      	movs	r7, #0
   86166:	e884 0088 	stmia.w	r4, {r3, r7}
   8616a:	4638      	mov	r0, r7
   8616c:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
   86170:	2101      	movs	r1, #1
   86172:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
   86176:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
   8617a:	2e00      	cmp	r6, #0
   8617c:	d0e1      	beq.n	86142 <__register_exitproc+0x3e>
   8617e:	e7d1      	b.n	86124 <__register_exitproc+0x20>
   86180:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
   86184:	431a      	orrs	r2, r3
   86186:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
   8618a:	e7da      	b.n	86142 <__register_exitproc+0x3e>
   8618c:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
   86190:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
   86194:	e7c1      	b.n	8611a <__register_exitproc+0x16>
   86196:	f04f 30ff 	mov.w	r0, #4294967295
   8619a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   8619e:	bf00      	nop
   861a0:	000869e4 	.word	0x000869e4
   861a4:	000854bd 	.word	0x000854bd

000861a8 <_close_r>:
   861a8:	b538      	push	{r3, r4, r5, lr}
   861aa:	4c07      	ldr	r4, [pc, #28]	; (861c8 <_close_r+0x20>)
   861ac:	2300      	movs	r3, #0
   861ae:	4605      	mov	r5, r0
   861b0:	4608      	mov	r0, r1
   861b2:	6023      	str	r3, [r4, #0]
   861b4:	f7fc fcbe 	bl	82b34 <_close>
   861b8:	1c43      	adds	r3, r0, #1
   861ba:	d000      	beq.n	861be <_close_r+0x16>
   861bc:	bd38      	pop	{r3, r4, r5, pc}
   861be:	6823      	ldr	r3, [r4, #0]
   861c0:	2b00      	cmp	r3, #0
   861c2:	d0fb      	beq.n	861bc <_close_r+0x14>
   861c4:	602b      	str	r3, [r5, #0]
   861c6:	bd38      	pop	{r3, r4, r5, pc}
   861c8:	20078ca4 	.word	0x20078ca4

000861cc <_fclose_r>:
   861cc:	2900      	cmp	r1, #0
   861ce:	d03d      	beq.n	8624c <_fclose_r+0x80>
   861d0:	b570      	push	{r4, r5, r6, lr}
   861d2:	4605      	mov	r5, r0
   861d4:	460c      	mov	r4, r1
   861d6:	b108      	cbz	r0, 861dc <_fclose_r+0x10>
   861d8:	6b83      	ldr	r3, [r0, #56]	; 0x38
   861da:	b37b      	cbz	r3, 8623c <_fclose_r+0x70>
   861dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   861e0:	b90b      	cbnz	r3, 861e6 <_fclose_r+0x1a>
   861e2:	2000      	movs	r0, #0
   861e4:	bd70      	pop	{r4, r5, r6, pc}
   861e6:	4628      	mov	r0, r5
   861e8:	4621      	mov	r1, r4
   861ea:	f7fe fc4d 	bl	84a88 <__sflush_r>
   861ee:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   861f0:	4606      	mov	r6, r0
   861f2:	b133      	cbz	r3, 86202 <_fclose_r+0x36>
   861f4:	4628      	mov	r0, r5
   861f6:	69e1      	ldr	r1, [r4, #28]
   861f8:	4798      	blx	r3
   861fa:	2800      	cmp	r0, #0
   861fc:	bfb8      	it	lt
   861fe:	f04f 36ff 	movlt.w	r6, #4294967295
   86202:	89a3      	ldrh	r3, [r4, #12]
   86204:	061b      	lsls	r3, r3, #24
   86206:	d41c      	bmi.n	86242 <_fclose_r+0x76>
   86208:	6b21      	ldr	r1, [r4, #48]	; 0x30
   8620a:	b141      	cbz	r1, 8621e <_fclose_r+0x52>
   8620c:	f104 0340 	add.w	r3, r4, #64	; 0x40
   86210:	4299      	cmp	r1, r3
   86212:	d002      	beq.n	8621a <_fclose_r+0x4e>
   86214:	4628      	mov	r0, r5
   86216:	f7fe fe47 	bl	84ea8 <_free_r>
   8621a:	2300      	movs	r3, #0
   8621c:	6323      	str	r3, [r4, #48]	; 0x30
   8621e:	6c61      	ldr	r1, [r4, #68]	; 0x44
   86220:	b121      	cbz	r1, 8622c <_fclose_r+0x60>
   86222:	4628      	mov	r0, r5
   86224:	f7fe fe40 	bl	84ea8 <_free_r>
   86228:	2300      	movs	r3, #0
   8622a:	6463      	str	r3, [r4, #68]	; 0x44
   8622c:	f7fe fd6a 	bl	84d04 <__sfp_lock_acquire>
   86230:	2300      	movs	r3, #0
   86232:	81a3      	strh	r3, [r4, #12]
   86234:	f7fe fd68 	bl	84d08 <__sfp_lock_release>
   86238:	4630      	mov	r0, r6
   8623a:	bd70      	pop	{r4, r5, r6, pc}
   8623c:	f7fe fd5c 	bl	84cf8 <__sinit>
   86240:	e7cc      	b.n	861dc <_fclose_r+0x10>
   86242:	4628      	mov	r0, r5
   86244:	6921      	ldr	r1, [r4, #16]
   86246:	f7fe fe2f 	bl	84ea8 <_free_r>
   8624a:	e7dd      	b.n	86208 <_fclose_r+0x3c>
   8624c:	2000      	movs	r0, #0
   8624e:	4770      	bx	lr

00086250 <_fstat_r>:
   86250:	b538      	push	{r3, r4, r5, lr}
   86252:	4c08      	ldr	r4, [pc, #32]	; (86274 <_fstat_r+0x24>)
   86254:	2300      	movs	r3, #0
   86256:	4605      	mov	r5, r0
   86258:	4608      	mov	r0, r1
   8625a:	4611      	mov	r1, r2
   8625c:	6023      	str	r3, [r4, #0]
   8625e:	f7fc fc6d 	bl	82b3c <_fstat>
   86262:	1c43      	adds	r3, r0, #1
   86264:	d000      	beq.n	86268 <_fstat_r+0x18>
   86266:	bd38      	pop	{r3, r4, r5, pc}
   86268:	6823      	ldr	r3, [r4, #0]
   8626a:	2b00      	cmp	r3, #0
   8626c:	d0fb      	beq.n	86266 <_fstat_r+0x16>
   8626e:	602b      	str	r3, [r5, #0]
   86270:	bd38      	pop	{r3, r4, r5, pc}
   86272:	bf00      	nop
   86274:	20078ca4 	.word	0x20078ca4

00086278 <_isatty_r>:
   86278:	b538      	push	{r3, r4, r5, lr}
   8627a:	4c07      	ldr	r4, [pc, #28]	; (86298 <_isatty_r+0x20>)
   8627c:	2300      	movs	r3, #0
   8627e:	4605      	mov	r5, r0
   86280:	4608      	mov	r0, r1
   86282:	6023      	str	r3, [r4, #0]
   86284:	f7fc fc60 	bl	82b48 <_isatty>
   86288:	1c43      	adds	r3, r0, #1
   8628a:	d000      	beq.n	8628e <_isatty_r+0x16>
   8628c:	bd38      	pop	{r3, r4, r5, pc}
   8628e:	6823      	ldr	r3, [r4, #0]
   86290:	2b00      	cmp	r3, #0
   86292:	d0fb      	beq.n	8628c <_isatty_r+0x14>
   86294:	602b      	str	r3, [r5, #0]
   86296:	bd38      	pop	{r3, r4, r5, pc}
   86298:	20078ca4 	.word	0x20078ca4

0008629c <_lseek_r>:
   8629c:	b570      	push	{r4, r5, r6, lr}
   8629e:	4c08      	ldr	r4, [pc, #32]	; (862c0 <_lseek_r+0x24>)
   862a0:	4606      	mov	r6, r0
   862a2:	2500      	movs	r5, #0
   862a4:	4608      	mov	r0, r1
   862a6:	4611      	mov	r1, r2
   862a8:	461a      	mov	r2, r3
   862aa:	6025      	str	r5, [r4, #0]
   862ac:	f7fc fc4e 	bl	82b4c <_lseek>
   862b0:	1c43      	adds	r3, r0, #1
   862b2:	d000      	beq.n	862b6 <_lseek_r+0x1a>
   862b4:	bd70      	pop	{r4, r5, r6, pc}
   862b6:	6823      	ldr	r3, [r4, #0]
   862b8:	2b00      	cmp	r3, #0
   862ba:	d0fb      	beq.n	862b4 <_lseek_r+0x18>
   862bc:	6033      	str	r3, [r6, #0]
   862be:	bd70      	pop	{r4, r5, r6, pc}
   862c0:	20078ca4 	.word	0x20078ca4

000862c4 <_read_r>:
   862c4:	b570      	push	{r4, r5, r6, lr}
   862c6:	4c08      	ldr	r4, [pc, #32]	; (862e8 <_read_r+0x24>)
   862c8:	4606      	mov	r6, r0
   862ca:	2500      	movs	r5, #0
   862cc:	4608      	mov	r0, r1
   862ce:	4611      	mov	r1, r2
   862d0:	461a      	mov	r2, r3
   862d2:	6025      	str	r5, [r4, #0]
   862d4:	f7f9 ffdc 	bl	80290 <_read>
   862d8:	1c43      	adds	r3, r0, #1
   862da:	d000      	beq.n	862de <_read_r+0x1a>
   862dc:	bd70      	pop	{r4, r5, r6, pc}
   862de:	6823      	ldr	r3, [r4, #0]
   862e0:	2b00      	cmp	r3, #0
   862e2:	d0fb      	beq.n	862dc <_read_r+0x18>
   862e4:	6033      	str	r3, [r6, #0]
   862e6:	bd70      	pop	{r4, r5, r6, pc}
   862e8:	20078ca4 	.word	0x20078ca4

000862ec <__aeabi_uldivmod>:
   862ec:	b953      	cbnz	r3, 86304 <__aeabi_uldivmod+0x18>
   862ee:	b94a      	cbnz	r2, 86304 <__aeabi_uldivmod+0x18>
   862f0:	2900      	cmp	r1, #0
   862f2:	bf08      	it	eq
   862f4:	2800      	cmpeq	r0, #0
   862f6:	bf1c      	itt	ne
   862f8:	f04f 31ff 	movne.w	r1, #4294967295
   862fc:	f04f 30ff 	movne.w	r0, #4294967295
   86300:	f000 b83c 	b.w	8637c <__aeabi_idiv0>
   86304:	b082      	sub	sp, #8
   86306:	46ec      	mov	ip, sp
   86308:	e92d 5000 	stmdb	sp!, {ip, lr}
   8630c:	f000 f81e 	bl	8634c <__gnu_uldivmod_helper>
   86310:	f8dd e004 	ldr.w	lr, [sp, #4]
   86314:	b002      	add	sp, #8
   86316:	bc0c      	pop	{r2, r3}
   86318:	4770      	bx	lr
   8631a:	bf00      	nop

0008631c <__gnu_ldivmod_helper>:
   8631c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   86320:	9c06      	ldr	r4, [sp, #24]
   86322:	4690      	mov	r8, r2
   86324:	4606      	mov	r6, r0
   86326:	460f      	mov	r7, r1
   86328:	461d      	mov	r5, r3
   8632a:	f000 f829 	bl	86380 <__divdi3>
   8632e:	fb08 fc01 	mul.w	ip, r8, r1
   86332:	fba8 2300 	umull	r2, r3, r8, r0
   86336:	fb00 c505 	mla	r5, r0, r5, ip
   8633a:	1ab2      	subs	r2, r6, r2
   8633c:	442b      	add	r3, r5
   8633e:	eb67 0303 	sbc.w	r3, r7, r3
   86342:	4686      	mov	lr, r0
   86344:	e9c4 2300 	strd	r2, r3, [r4]
   86348:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0008634c <__gnu_uldivmod_helper>:
   8634c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   86350:	9e08      	ldr	r6, [sp, #32]
   86352:	4617      	mov	r7, r2
   86354:	4680      	mov	r8, r0
   86356:	4689      	mov	r9, r1
   86358:	461d      	mov	r5, r3
   8635a:	f000 f967 	bl	8662c <__udivdi3>
   8635e:	fb00 f305 	mul.w	r3, r0, r5
   86362:	fba0 4507 	umull	r4, r5, r0, r7
   86366:	fb07 3701 	mla	r7, r7, r1, r3
   8636a:	ebb8 0404 	subs.w	r4, r8, r4
   8636e:	443d      	add	r5, r7
   86370:	eb69 0505 	sbc.w	r5, r9, r5
   86374:	e9c6 4500 	strd	r4, r5, [r6]
   86378:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0008637c <__aeabi_idiv0>:
   8637c:	4770      	bx	lr
   8637e:	bf00      	nop

00086380 <__divdi3>:
   86380:	2900      	cmp	r1, #0
   86382:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   86386:	f2c0 80a8 	blt.w	864da <__divdi3+0x15a>
   8638a:	2600      	movs	r6, #0
   8638c:	2b00      	cmp	r3, #0
   8638e:	f2c0 809e 	blt.w	864ce <__divdi3+0x14e>
   86392:	4681      	mov	r9, r0
   86394:	468e      	mov	lr, r1
   86396:	4690      	mov	r8, r2
   86398:	469c      	mov	ip, r3
   8639a:	4617      	mov	r7, r2
   8639c:	4604      	mov	r4, r0
   8639e:	460d      	mov	r5, r1
   863a0:	2b00      	cmp	r3, #0
   863a2:	d13d      	bne.n	86420 <__divdi3+0xa0>
   863a4:	428a      	cmp	r2, r1
   863a6:	d959      	bls.n	8645c <__divdi3+0xdc>
   863a8:	fab2 f382 	clz	r3, r2
   863ac:	b13b      	cbz	r3, 863be <__divdi3+0x3e>
   863ae:	f1c3 0220 	rsb	r2, r3, #32
   863b2:	409d      	lsls	r5, r3
   863b4:	fa20 f202 	lsr.w	r2, r0, r2
   863b8:	409f      	lsls	r7, r3
   863ba:	4315      	orrs	r5, r2
   863bc:	409c      	lsls	r4, r3
   863be:	0c39      	lsrs	r1, r7, #16
   863c0:	fbb5 f0f1 	udiv	r0, r5, r1
   863c4:	fa1f fe87 	uxth.w	lr, r7
   863c8:	fb01 5510 	mls	r5, r1, r0, r5
   863cc:	fb0e f300 	mul.w	r3, lr, r0
   863d0:	0c22      	lsrs	r2, r4, #16
   863d2:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
   863d6:	42ab      	cmp	r3, r5
   863d8:	d909      	bls.n	863ee <__divdi3+0x6e>
   863da:	19ed      	adds	r5, r5, r7
   863dc:	f100 32ff 	add.w	r2, r0, #4294967295
   863e0:	f080 810b 	bcs.w	865fa <__divdi3+0x27a>
   863e4:	42ab      	cmp	r3, r5
   863e6:	f240 8108 	bls.w	865fa <__divdi3+0x27a>
   863ea:	3802      	subs	r0, #2
   863ec:	443d      	add	r5, r7
   863ee:	1aed      	subs	r5, r5, r3
   863f0:	fbb5 f3f1 	udiv	r3, r5, r1
   863f4:	fb01 5513 	mls	r5, r1, r3, r5
   863f8:	fb0e fe03 	mul.w	lr, lr, r3
   863fc:	b2a4      	uxth	r4, r4
   863fe:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
   86402:	45ae      	cmp	lr, r5
   86404:	d908      	bls.n	86418 <__divdi3+0x98>
   86406:	19ed      	adds	r5, r5, r7
   86408:	f103 32ff 	add.w	r2, r3, #4294967295
   8640c:	f080 80f7 	bcs.w	865fe <__divdi3+0x27e>
   86410:	45ae      	cmp	lr, r5
   86412:	f240 80f4 	bls.w	865fe <__divdi3+0x27e>
   86416:	3b02      	subs	r3, #2
   86418:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
   8641c:	2200      	movs	r2, #0
   8641e:	e003      	b.n	86428 <__divdi3+0xa8>
   86420:	428b      	cmp	r3, r1
   86422:	d90f      	bls.n	86444 <__divdi3+0xc4>
   86424:	2200      	movs	r2, #0
   86426:	4613      	mov	r3, r2
   86428:	1c34      	adds	r4, r6, #0
   8642a:	bf18      	it	ne
   8642c:	2401      	movne	r4, #1
   8642e:	4260      	negs	r0, r4
   86430:	f04f 0500 	mov.w	r5, #0
   86434:	eb65 0145 	sbc.w	r1, r5, r5, lsl #1
   86438:	4058      	eors	r0, r3
   8643a:	4051      	eors	r1, r2
   8643c:	1900      	adds	r0, r0, r4
   8643e:	4169      	adcs	r1, r5
   86440:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   86444:	fab3 f283 	clz	r2, r3
   86448:	2a00      	cmp	r2, #0
   8644a:	f040 8089 	bne.w	86560 <__divdi3+0x1e0>
   8644e:	428b      	cmp	r3, r1
   86450:	d302      	bcc.n	86458 <__divdi3+0xd8>
   86452:	4580      	cmp	r8, r0
   86454:	f200 80e2 	bhi.w	8661c <__divdi3+0x29c>
   86458:	2301      	movs	r3, #1
   8645a:	e7e5      	b.n	86428 <__divdi3+0xa8>
   8645c:	b912      	cbnz	r2, 86464 <__divdi3+0xe4>
   8645e:	2301      	movs	r3, #1
   86460:	fbb3 f7f2 	udiv	r7, r3, r2
   86464:	fab7 f887 	clz	r8, r7
   86468:	f1b8 0f00 	cmp.w	r8, #0
   8646c:	d13b      	bne.n	864e6 <__divdi3+0x166>
   8646e:	1bed      	subs	r5, r5, r7
   86470:	ea4f 4c17 	mov.w	ip, r7, lsr #16
   86474:	fa1f fe87 	uxth.w	lr, r7
   86478:	2201      	movs	r2, #1
   8647a:	fbb5 f0fc 	udiv	r0, r5, ip
   8647e:	fb0c 5510 	mls	r5, ip, r0, r5
   86482:	fb0e f300 	mul.w	r3, lr, r0
   86486:	0c21      	lsrs	r1, r4, #16
   86488:	ea41 4505 	orr.w	r5, r1, r5, lsl #16
   8648c:	42ab      	cmp	r3, r5
   8648e:	d907      	bls.n	864a0 <__divdi3+0x120>
   86490:	19ed      	adds	r5, r5, r7
   86492:	f100 31ff 	add.w	r1, r0, #4294967295
   86496:	d202      	bcs.n	8649e <__divdi3+0x11e>
   86498:	42ab      	cmp	r3, r5
   8649a:	f200 80c3 	bhi.w	86624 <__divdi3+0x2a4>
   8649e:	4608      	mov	r0, r1
   864a0:	1aed      	subs	r5, r5, r3
   864a2:	fbb5 f3fc 	udiv	r3, r5, ip
   864a6:	fb0c 5513 	mls	r5, ip, r3, r5
   864aa:	fb0e fe03 	mul.w	lr, lr, r3
   864ae:	b2a4      	uxth	r4, r4
   864b0:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
   864b4:	45ae      	cmp	lr, r5
   864b6:	d907      	bls.n	864c8 <__divdi3+0x148>
   864b8:	19ed      	adds	r5, r5, r7
   864ba:	f103 31ff 	add.w	r1, r3, #4294967295
   864be:	d202      	bcs.n	864c6 <__divdi3+0x146>
   864c0:	45ae      	cmp	lr, r5
   864c2:	f200 80ad 	bhi.w	86620 <__divdi3+0x2a0>
   864c6:	460b      	mov	r3, r1
   864c8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
   864cc:	e7ac      	b.n	86428 <__divdi3+0xa8>
   864ce:	4252      	negs	r2, r2
   864d0:	ea6f 0606 	mvn.w	r6, r6
   864d4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   864d8:	e75b      	b.n	86392 <__divdi3+0x12>
   864da:	4240      	negs	r0, r0
   864dc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   864e0:	f04f 36ff 	mov.w	r6, #4294967295
   864e4:	e752      	b.n	8638c <__divdi3+0xc>
   864e6:	fa07 f708 	lsl.w	r7, r7, r8
   864ea:	f1c8 0220 	rsb	r2, r8, #32
   864ee:	fa25 f302 	lsr.w	r3, r5, r2
   864f2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
   864f6:	fbb3 f1fc 	udiv	r1, r3, ip
   864fa:	fa1f fe87 	uxth.w	lr, r7
   864fe:	fb0c 3311 	mls	r3, ip, r1, r3
   86502:	fa24 f202 	lsr.w	r2, r4, r2
   86506:	fa05 f508 	lsl.w	r5, r5, r8
   8650a:	fb0e f901 	mul.w	r9, lr, r1
   8650e:	432a      	orrs	r2, r5
   86510:	0c10      	lsrs	r0, r2, #16
   86512:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
   86516:	4599      	cmp	r9, r3
   86518:	fa04 f408 	lsl.w	r4, r4, r8
   8651c:	d907      	bls.n	8652e <__divdi3+0x1ae>
   8651e:	19db      	adds	r3, r3, r7
   86520:	f101 30ff 	add.w	r0, r1, #4294967295
   86524:	d278      	bcs.n	86618 <__divdi3+0x298>
   86526:	4599      	cmp	r9, r3
   86528:	d976      	bls.n	86618 <__divdi3+0x298>
   8652a:	3902      	subs	r1, #2
   8652c:	443b      	add	r3, r7
   8652e:	ebc9 0303 	rsb	r3, r9, r3
   86532:	fbb3 f0fc 	udiv	r0, r3, ip
   86536:	fb0c 3310 	mls	r3, ip, r0, r3
   8653a:	fb0e f500 	mul.w	r5, lr, r0
   8653e:	b292      	uxth	r2, r2
   86540:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
   86544:	429d      	cmp	r5, r3
   86546:	d907      	bls.n	86558 <__divdi3+0x1d8>
   86548:	19db      	adds	r3, r3, r7
   8654a:	f100 32ff 	add.w	r2, r0, #4294967295
   8654e:	d25f      	bcs.n	86610 <__divdi3+0x290>
   86550:	429d      	cmp	r5, r3
   86552:	d95d      	bls.n	86610 <__divdi3+0x290>
   86554:	3802      	subs	r0, #2
   86556:	443b      	add	r3, r7
   86558:	1b5d      	subs	r5, r3, r5
   8655a:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
   8655e:	e78c      	b.n	8647a <__divdi3+0xfa>
   86560:	f1c2 0320 	rsb	r3, r2, #32
   86564:	fa28 f103 	lsr.w	r1, r8, r3
   86568:	fa0c fc02 	lsl.w	ip, ip, r2
   8656c:	ea41 0c0c 	orr.w	ip, r1, ip
   86570:	ea4f 401c 	mov.w	r0, ip, lsr #16
   86574:	fa2e f103 	lsr.w	r1, lr, r3
   86578:	fbb1 f5f0 	udiv	r5, r1, r0
   8657c:	fa1f f78c 	uxth.w	r7, ip
   86580:	fb00 1115 	mls	r1, r0, r5, r1
   86584:	fa29 f303 	lsr.w	r3, r9, r3
   86588:	fa0e fe02 	lsl.w	lr, lr, r2
   8658c:	fb07 f905 	mul.w	r9, r7, r5
   86590:	ea43 0e0e 	orr.w	lr, r3, lr
   86594:	ea4f 431e 	mov.w	r3, lr, lsr #16
   86598:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
   8659c:	4589      	cmp	r9, r1
   8659e:	fa08 f802 	lsl.w	r8, r8, r2
   865a2:	d908      	bls.n	865b6 <__divdi3+0x236>
   865a4:	eb11 010c 	adds.w	r1, r1, ip
   865a8:	f105 33ff 	add.w	r3, r5, #4294967295
   865ac:	d232      	bcs.n	86614 <__divdi3+0x294>
   865ae:	4589      	cmp	r9, r1
   865b0:	d930      	bls.n	86614 <__divdi3+0x294>
   865b2:	3d02      	subs	r5, #2
   865b4:	4461      	add	r1, ip
   865b6:	ebc9 0101 	rsb	r1, r9, r1
   865ba:	fbb1 f3f0 	udiv	r3, r1, r0
   865be:	fb00 1113 	mls	r1, r0, r3, r1
   865c2:	fb07 f703 	mul.w	r7, r7, r3
   865c6:	fa1f fe8e 	uxth.w	lr, lr
   865ca:	ea4e 4e01 	orr.w	lr, lr, r1, lsl #16
   865ce:	4577      	cmp	r7, lr
   865d0:	d908      	bls.n	865e4 <__divdi3+0x264>
   865d2:	eb1e 0e0c 	adds.w	lr, lr, ip
   865d6:	f103 31ff 	add.w	r1, r3, #4294967295
   865da:	d217      	bcs.n	8660c <__divdi3+0x28c>
   865dc:	4577      	cmp	r7, lr
   865de:	d915      	bls.n	8660c <__divdi3+0x28c>
   865e0:	3b02      	subs	r3, #2
   865e2:	44e6      	add	lr, ip
   865e4:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
   865e8:	fba3 8908 	umull	r8, r9, r3, r8
   865ec:	ebc7 0e0e 	rsb	lr, r7, lr
   865f0:	45ce      	cmp	lr, r9
   865f2:	d309      	bcc.n	86608 <__divdi3+0x288>
   865f4:	d005      	beq.n	86602 <__divdi3+0x282>
   865f6:	2200      	movs	r2, #0
   865f8:	e716      	b.n	86428 <__divdi3+0xa8>
   865fa:	4610      	mov	r0, r2
   865fc:	e6f7      	b.n	863ee <__divdi3+0x6e>
   865fe:	4613      	mov	r3, r2
   86600:	e70a      	b.n	86418 <__divdi3+0x98>
   86602:	4094      	lsls	r4, r2
   86604:	4544      	cmp	r4, r8
   86606:	d2f6      	bcs.n	865f6 <__divdi3+0x276>
   86608:	3b01      	subs	r3, #1
   8660a:	e7f4      	b.n	865f6 <__divdi3+0x276>
   8660c:	460b      	mov	r3, r1
   8660e:	e7e9      	b.n	865e4 <__divdi3+0x264>
   86610:	4610      	mov	r0, r2
   86612:	e7a1      	b.n	86558 <__divdi3+0x1d8>
   86614:	461d      	mov	r5, r3
   86616:	e7ce      	b.n	865b6 <__divdi3+0x236>
   86618:	4601      	mov	r1, r0
   8661a:	e788      	b.n	8652e <__divdi3+0x1ae>
   8661c:	4613      	mov	r3, r2
   8661e:	e703      	b.n	86428 <__divdi3+0xa8>
   86620:	3b02      	subs	r3, #2
   86622:	e751      	b.n	864c8 <__divdi3+0x148>
   86624:	3802      	subs	r0, #2
   86626:	443d      	add	r5, r7
   86628:	e73a      	b.n	864a0 <__divdi3+0x120>
   8662a:	bf00      	nop

0008662c <__udivdi3>:
   8662c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   86630:	2b00      	cmp	r3, #0
   86632:	d144      	bne.n	866be <__udivdi3+0x92>
   86634:	428a      	cmp	r2, r1
   86636:	4615      	mov	r5, r2
   86638:	4604      	mov	r4, r0
   8663a:	d94f      	bls.n	866dc <__udivdi3+0xb0>
   8663c:	fab2 f782 	clz	r7, r2
   86640:	460e      	mov	r6, r1
   86642:	b14f      	cbz	r7, 86658 <__udivdi3+0x2c>
   86644:	f1c7 0320 	rsb	r3, r7, #32
   86648:	40b9      	lsls	r1, r7
   8664a:	fa20 f603 	lsr.w	r6, r0, r3
   8664e:	fa02 f507 	lsl.w	r5, r2, r7
   86652:	430e      	orrs	r6, r1
   86654:	fa00 f407 	lsl.w	r4, r0, r7
   86658:	0c2f      	lsrs	r7, r5, #16
   8665a:	fbb6 f0f7 	udiv	r0, r6, r7
   8665e:	fa1f fe85 	uxth.w	lr, r5
   86662:	fb07 6210 	mls	r2, r7, r0, r6
   86666:	fb0e f100 	mul.w	r1, lr, r0
   8666a:	0c26      	lsrs	r6, r4, #16
   8666c:	ea46 4302 	orr.w	r3, r6, r2, lsl #16
   86670:	4299      	cmp	r1, r3
   86672:	d909      	bls.n	86688 <__udivdi3+0x5c>
   86674:	195b      	adds	r3, r3, r5
   86676:	f100 32ff 	add.w	r2, r0, #4294967295
   8667a:	f080 80ee 	bcs.w	8685a <__udivdi3+0x22e>
   8667e:	4299      	cmp	r1, r3
   86680:	f240 80eb 	bls.w	8685a <__udivdi3+0x22e>
   86684:	3802      	subs	r0, #2
   86686:	442b      	add	r3, r5
   86688:	1a59      	subs	r1, r3, r1
   8668a:	fbb1 f3f7 	udiv	r3, r1, r7
   8668e:	fb07 1113 	mls	r1, r7, r3, r1
   86692:	fb0e fe03 	mul.w	lr, lr, r3
   86696:	b2a4      	uxth	r4, r4
   86698:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
   8669c:	458e      	cmp	lr, r1
   8669e:	d908      	bls.n	866b2 <__udivdi3+0x86>
   866a0:	1949      	adds	r1, r1, r5
   866a2:	f103 32ff 	add.w	r2, r3, #4294967295
   866a6:	f080 80da 	bcs.w	8685e <__udivdi3+0x232>
   866aa:	458e      	cmp	lr, r1
   866ac:	f240 80d7 	bls.w	8685e <__udivdi3+0x232>
   866b0:	3b02      	subs	r3, #2
   866b2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
   866b6:	2600      	movs	r6, #0
   866b8:	4631      	mov	r1, r6
   866ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   866be:	428b      	cmp	r3, r1
   866c0:	d847      	bhi.n	86752 <__udivdi3+0x126>
   866c2:	fab3 f683 	clz	r6, r3
   866c6:	2e00      	cmp	r6, #0
   866c8:	d148      	bne.n	8675c <__udivdi3+0x130>
   866ca:	428b      	cmp	r3, r1
   866cc:	d302      	bcc.n	866d4 <__udivdi3+0xa8>
   866ce:	4282      	cmp	r2, r0
   866d0:	f200 80cf 	bhi.w	86872 <__udivdi3+0x246>
   866d4:	2001      	movs	r0, #1
   866d6:	4631      	mov	r1, r6
   866d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   866dc:	b912      	cbnz	r2, 866e4 <__udivdi3+0xb8>
   866de:	2501      	movs	r5, #1
   866e0:	fbb5 f5f2 	udiv	r5, r5, r2
   866e4:	fab5 fc85 	clz	ip, r5
   866e8:	f1bc 0f00 	cmp.w	ip, #0
   866ec:	d178      	bne.n	867e0 <__udivdi3+0x1b4>
   866ee:	1b49      	subs	r1, r1, r5
   866f0:	0c2f      	lsrs	r7, r5, #16
   866f2:	fa1f fe85 	uxth.w	lr, r5
   866f6:	2601      	movs	r6, #1
   866f8:	fbb1 f0f7 	udiv	r0, r1, r7
   866fc:	fb07 1110 	mls	r1, r7, r0, r1
   86700:	fb0e f200 	mul.w	r2, lr, r0
   86704:	0c23      	lsrs	r3, r4, #16
   86706:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
   8670a:	428a      	cmp	r2, r1
   8670c:	d907      	bls.n	8671e <__udivdi3+0xf2>
   8670e:	1949      	adds	r1, r1, r5
   86710:	f100 33ff 	add.w	r3, r0, #4294967295
   86714:	d202      	bcs.n	8671c <__udivdi3+0xf0>
   86716:	428a      	cmp	r2, r1
   86718:	f200 80bc 	bhi.w	86894 <__udivdi3+0x268>
   8671c:	4618      	mov	r0, r3
   8671e:	1a89      	subs	r1, r1, r2
   86720:	fbb1 f3f7 	udiv	r3, r1, r7
   86724:	fb07 1113 	mls	r1, r7, r3, r1
   86728:	fb0e fe03 	mul.w	lr, lr, r3
   8672c:	b2a4      	uxth	r4, r4
   8672e:	ea44 4201 	orr.w	r2, r4, r1, lsl #16
   86732:	4596      	cmp	lr, r2
   86734:	d908      	bls.n	86748 <__udivdi3+0x11c>
   86736:	1952      	adds	r2, r2, r5
   86738:	f103 31ff 	add.w	r1, r3, #4294967295
   8673c:	f080 8091 	bcs.w	86862 <__udivdi3+0x236>
   86740:	4596      	cmp	lr, r2
   86742:	f240 808e 	bls.w	86862 <__udivdi3+0x236>
   86746:	3b02      	subs	r3, #2
   86748:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
   8674c:	4631      	mov	r1, r6
   8674e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   86752:	2600      	movs	r6, #0
   86754:	4630      	mov	r0, r6
   86756:	4631      	mov	r1, r6
   86758:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   8675c:	f1c6 0420 	rsb	r4, r6, #32
   86760:	fa22 f504 	lsr.w	r5, r2, r4
   86764:	40b3      	lsls	r3, r6
   86766:	432b      	orrs	r3, r5
   86768:	fa21 f704 	lsr.w	r7, r1, r4
   8676c:	ea4f 4813 	mov.w	r8, r3, lsr #16
   86770:	fbb7 fcf8 	udiv	ip, r7, r8
   86774:	fa1f f983 	uxth.w	r9, r3
   86778:	fb08 771c 	mls	r7, r8, ip, r7
   8677c:	fa20 fe04 	lsr.w	lr, r0, r4
   86780:	fa01 f506 	lsl.w	r5, r1, r6
   86784:	fb09 f40c 	mul.w	r4, r9, ip
   86788:	ea4e 0505 	orr.w	r5, lr, r5
   8678c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
   86790:	ea4e 4707 	orr.w	r7, lr, r7, lsl #16
   86794:	42bc      	cmp	r4, r7
   86796:	fa02 f206 	lsl.w	r2, r2, r6
   8679a:	d904      	bls.n	867a6 <__udivdi3+0x17a>
   8679c:	18ff      	adds	r7, r7, r3
   8679e:	f10c 31ff 	add.w	r1, ip, #4294967295
   867a2:	d368      	bcc.n	86876 <__udivdi3+0x24a>
   867a4:	468c      	mov	ip, r1
   867a6:	1b3f      	subs	r7, r7, r4
   867a8:	fbb7 f4f8 	udiv	r4, r7, r8
   867ac:	fb08 7714 	mls	r7, r8, r4, r7
   867b0:	fb09 f904 	mul.w	r9, r9, r4
   867b4:	b2ad      	uxth	r5, r5
   867b6:	ea45 4107 	orr.w	r1, r5, r7, lsl #16
   867ba:	4589      	cmp	r9, r1
   867bc:	d904      	bls.n	867c8 <__udivdi3+0x19c>
   867be:	18c9      	adds	r1, r1, r3
   867c0:	f104 35ff 	add.w	r5, r4, #4294967295
   867c4:	d35d      	bcc.n	86882 <__udivdi3+0x256>
   867c6:	462c      	mov	r4, r5
   867c8:	ea44 440c 	orr.w	r4, r4, ip, lsl #16
   867cc:	fba4 2302 	umull	r2, r3, r4, r2
   867d0:	ebc9 0101 	rsb	r1, r9, r1
   867d4:	4299      	cmp	r1, r3
   867d6:	d349      	bcc.n	8686c <__udivdi3+0x240>
   867d8:	d045      	beq.n	86866 <__udivdi3+0x23a>
   867da:	4620      	mov	r0, r4
   867dc:	2600      	movs	r6, #0
   867de:	e76b      	b.n	866b8 <__udivdi3+0x8c>
   867e0:	f1cc 0420 	rsb	r4, ip, #32
   867e4:	fa05 f50c 	lsl.w	r5, r5, ip
   867e8:	fa21 f304 	lsr.w	r3, r1, r4
   867ec:	0c2a      	lsrs	r2, r5, #16
   867ee:	fbb3 f6f2 	udiv	r6, r3, r2
   867f2:	fa1f fe85 	uxth.w	lr, r5
   867f6:	fb02 3816 	mls	r8, r2, r6, r3
   867fa:	fa20 f704 	lsr.w	r7, r0, r4
   867fe:	fa01 f10c 	lsl.w	r1, r1, ip
   86802:	fb0e f906 	mul.w	r9, lr, r6
   86806:	430f      	orrs	r7, r1
   86808:	0c3c      	lsrs	r4, r7, #16
   8680a:	ea44 4308 	orr.w	r3, r4, r8, lsl #16
   8680e:	4599      	cmp	r9, r3
   86810:	fa00 f40c 	lsl.w	r4, r0, ip
   86814:	d907      	bls.n	86826 <__udivdi3+0x1fa>
   86816:	195b      	adds	r3, r3, r5
   86818:	f106 31ff 	add.w	r1, r6, #4294967295
   8681c:	d238      	bcs.n	86890 <__udivdi3+0x264>
   8681e:	4599      	cmp	r9, r3
   86820:	d936      	bls.n	86890 <__udivdi3+0x264>
   86822:	3e02      	subs	r6, #2
   86824:	442b      	add	r3, r5
   86826:	ebc9 0303 	rsb	r3, r9, r3
   8682a:	fbb3 f0f2 	udiv	r0, r3, r2
   8682e:	fb02 3310 	mls	r3, r2, r0, r3
   86832:	fb0e f100 	mul.w	r1, lr, r0
   86836:	b2bf      	uxth	r7, r7
   86838:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
   8683c:	4299      	cmp	r1, r3
   8683e:	d907      	bls.n	86850 <__udivdi3+0x224>
   86840:	195b      	adds	r3, r3, r5
   86842:	f100 37ff 	add.w	r7, r0, #4294967295
   86846:	d221      	bcs.n	8688c <__udivdi3+0x260>
   86848:	4299      	cmp	r1, r3
   8684a:	d91f      	bls.n	8688c <__udivdi3+0x260>
   8684c:	3802      	subs	r0, #2
   8684e:	442b      	add	r3, r5
   86850:	4617      	mov	r7, r2
   86852:	1a59      	subs	r1, r3, r1
   86854:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
   86858:	e74e      	b.n	866f8 <__udivdi3+0xcc>
   8685a:	4610      	mov	r0, r2
   8685c:	e714      	b.n	86688 <__udivdi3+0x5c>
   8685e:	4613      	mov	r3, r2
   86860:	e727      	b.n	866b2 <__udivdi3+0x86>
   86862:	460b      	mov	r3, r1
   86864:	e770      	b.n	86748 <__udivdi3+0x11c>
   86866:	40b0      	lsls	r0, r6
   86868:	4290      	cmp	r0, r2
   8686a:	d2b6      	bcs.n	867da <__udivdi3+0x1ae>
   8686c:	1e60      	subs	r0, r4, #1
   8686e:	2600      	movs	r6, #0
   86870:	e722      	b.n	866b8 <__udivdi3+0x8c>
   86872:	4630      	mov	r0, r6
   86874:	e720      	b.n	866b8 <__udivdi3+0x8c>
   86876:	42bc      	cmp	r4, r7
   86878:	d994      	bls.n	867a4 <__udivdi3+0x178>
   8687a:	f1ac 0c02 	sub.w	ip, ip, #2
   8687e:	441f      	add	r7, r3
   86880:	e791      	b.n	867a6 <__udivdi3+0x17a>
   86882:	4589      	cmp	r9, r1
   86884:	d99f      	bls.n	867c6 <__udivdi3+0x19a>
   86886:	3c02      	subs	r4, #2
   86888:	4419      	add	r1, r3
   8688a:	e79d      	b.n	867c8 <__udivdi3+0x19c>
   8688c:	4638      	mov	r0, r7
   8688e:	e7df      	b.n	86850 <__udivdi3+0x224>
   86890:	460e      	mov	r6, r1
   86892:	e7c8      	b.n	86826 <__udivdi3+0x1fa>
   86894:	3802      	subs	r0, #2
   86896:	4429      	add	r1, r5
   86898:	e741      	b.n	8671e <__udivdi3+0xf2>
   8689a:	bf00      	nop
   8689c:	6d726554 	.word	0x6d726554
   868a0:	6c616e69 	.word	0x6c616e69
   868a4:	62656420 	.word	0x62656420
   868a8:	69676775 	.word	0x69676775
   868ac:	6520676e 	.word	0x6520676e
   868b0:	6c62616e 	.word	0x6c62616e
   868b4:	000a6465 	.word	0x000a6465
   868b8:	73657250 	.word	0x73657250
   868bc:	76207465 	.word	0x76207465
   868c0:	65756c61 	.word	0x65756c61
   868c4:	000a3a73 	.word	0x000a3a73
   868c8:	203a506b 	.word	0x203a506b
   868cc:	0d0a7525 	.word	0x0d0a7525
   868d0:	00000000 	.word	0x00000000
   868d4:	203a496b 	.word	0x203a496b
   868d8:	0d0a7525 	.word	0x0d0a7525
   868dc:	00000000 	.word	0x00000000
   868e0:	203a446b 	.word	0x203a446b
   868e4:	0d0a7525 	.word	0x0d0a7525
   868e8:	00000000 	.word	0x00000000
   868ec:	70746553 	.word	0x70746553
   868f0:	746e696f 	.word	0x746e696f
   868f4:	7525203a 	.word	0x7525203a
   868f8:	00000d0a 	.word	0x00000d0a
   868fc:	756c6156 	.word	0x756c6156
   86900:	0a3a7365 	.word	0x0a3a7365
   86904:	00000000 	.word	0x00000000
   86908:	0d0a6925 	.word	0x0d0a6925
   8690c:	00000000 	.word	0x00000000
   86910:	09097325 	.word	0x09097325
   86914:	25096325 	.word	0x25096325
   86918:	75250975 	.word	0x75250975
   8691c:	0d752509 	.word	0x0d752509
   86920:	0000000a 	.word	0x0000000a
   86924:	454c4449 	.word	0x454c4449
   86928:	00000000 	.word	0x00000000
   8692c:	20726d54 	.word	0x20726d54
   86930:	00637653 	.word	0x00637653
   86934:	00000001 	.word	0x00000001
   86938:	00000002 	.word	0x00000002
   8693c:	00000004 	.word	0x00000004
   86940:	00000008 	.word	0x00000008
   86944:	00000010 	.word	0x00000010
   86948:	00000020 	.word	0x00000020
   8694c:	00000040 	.word	0x00000040
   86950:	00000080 	.word	0x00000080
   86954:	00000100 	.word	0x00000100
   86958:	00000200 	.word	0x00000200
   8695c:	00000400 	.word	0x00000400
   86960:	52444950 	.word	0x52444950
   86964:	6c756765 	.word	0x6c756765
   86968:	6f697461 	.word	0x6f697461
   8696c:	0000006e 	.word	0x0000006e
   86970:	6c696146 	.word	0x6c696146
   86974:	74206465 	.word	0x74206465
   86978:	7263206f 	.word	0x7263206f
   8697c:	65746165 	.word	0x65746165
   86980:	44495020 	.word	0x44495020
   86984:	75676552 	.word	0x75676552
   86988:	6974616c 	.word	0x6974616c
   8698c:	61546e6f 	.word	0x61546e6f
   86990:	0a0d6b73 	.word	0x0a0d6b73
   86994:	00000000 	.word	0x00000000
   86998:	69726553 	.word	0x69726553
   8699c:	6f436c61 	.word	0x6f436c61
   869a0:	7361546d 	.word	0x7361546d
   869a4:	0000006b 	.word	0x0000006b
   869a8:	6c696146 	.word	0x6c696146
   869ac:	74206465 	.word	0x74206465
   869b0:	7263206f 	.word	0x7263206f
   869b4:	65746165 	.word	0x65746165
   869b8:	72655320 	.word	0x72655320
   869bc:	436c6169 	.word	0x436c6169
   869c0:	61546d6f 	.word	0x61546d6f
   869c4:	0a0d6b73 	.word	0x0a0d6b73
   869c8:	00000000 	.word	0x00000000
   869cc:	75736e49 	.word	0x75736e49
   869d0:	63696666 	.word	0x63696666
   869d4:	746e6569 	.word	0x746e6569
   869d8:	4d415220 	.word	0x4d415220
   869dc:	00000a0d 	.word	0x00000a0d
   869e0:	00000043 	.word	0x00000043

000869e4 <_global_impure_ptr>:
   869e4:	20070158                                X.. 

000869e8 <zeroes.6869>:
   869e8:	30303030 30303030 30303030 30303030     0000000000000000
   869f8:	33323130 37363534 42413938 46454443     0123456789ABCDEF
   86a08:	00000000 33323130 37363534 62613938     ....0123456789ab
   86a18:	66656463 00000000 6c756e28 0000296c     cdef....(null)..

00086a28 <blanks.6868>:
   86a28:	20202020 20202020 20202020 20202020                     

00086a38 <_init>:
   86a38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   86a3a:	bf00      	nop
   86a3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
   86a3e:	bc08      	pop	{r3}
   86a40:	469e      	mov	lr, r3
   86a42:	4770      	bx	lr

00086a44 <__init_array_start>:
   86a44:	00084a69 	.word	0x00084a69

00086a48 <__frame_dummy_init_array_entry>:
   86a48:	00080119                                ....

00086a4c <_fini>:
   86a4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   86a4e:	bf00      	nop
   86a50:	bcf8      	pop	{r3, r4, r5, r6, r7}
   86a52:	bc08      	pop	{r3}
   86a54:	469e      	mov	lr, r3
   86a56:	4770      	bx	lr

00086a58 <__fini_array_start>:
   86a58:	000800f5 	.word	0x000800f5

Disassembly of section .relocate:

20070000 <SystemInit>:
__no_inline
RAMFUNC
void SystemInit(void)
{
	/* Set FWS according to SYS_BOARD_MCKR configuration */
	EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
20070000:	f44f 6380 	mov.w	r3, #1024	; 0x400
20070004:	4a20      	ldr	r2, [pc, #128]	; (20070088 <SystemInit+0x88>)
20070006:	6013      	str	r3, [r2, #0]
	EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
20070008:	f502 7200 	add.w	r2, r2, #512	; 0x200
2007000c:	6013      	str	r3, [r2, #0]

	/* Initialize main oscillator */
	if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
2007000e:	4b1f      	ldr	r3, [pc, #124]	; (2007008c <SystemInit+0x8c>)
20070010:	6a1b      	ldr	r3, [r3, #32]
20070012:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
20070016:	d107      	bne.n	20070028 <SystemInit+0x28>
		PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070018:	4a1d      	ldr	r2, [pc, #116]	; (20070090 <SystemInit+0x90>)
2007001a:	4b1c      	ldr	r3, [pc, #112]	; (2007008c <SystemInit+0x8c>)
2007001c:	621a      	str	r2, [r3, #32]
			                     CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN;
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS)) {
2007001e:	461a      	mov	r2, r3
20070020:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070022:	f013 0f01 	tst.w	r3, #1
20070026:	d0fb      	beq.n	20070020 <SystemInit+0x20>
		}
	}

	/* Switch to 3-20MHz Xtal oscillator */
	PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070028:	4a1a      	ldr	r2, [pc, #104]	; (20070094 <SystemInit+0x94>)
2007002a:	4b18      	ldr	r3, [pc, #96]	; (2007008c <SystemInit+0x8c>)
2007002c:	621a      	str	r2, [r3, #32]
	                           CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCSEL;

	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS)) {
2007002e:	461a      	mov	r2, r3
20070030:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070032:	f413 3f80 	tst.w	r3, #65536	; 0x10000
20070036:	d0fb      	beq.n	20070030 <SystemInit+0x30>
	}
 	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | 
20070038:	4a14      	ldr	r2, [pc, #80]	; (2007008c <SystemInit+0x8c>)
2007003a:	6b13      	ldr	r3, [r2, #48]	; 0x30
2007003c:	f023 0303 	bic.w	r3, r3, #3
20070040:	f043 0301 	orr.w	r3, r3, #1
20070044:	6313      	str	r3, [r2, #48]	; 0x30
		                     PMC_MCKR_CSS_MAIN_CLK;
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070046:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070048:	f013 0f08 	tst.w	r3, #8
2007004c:	d0fb      	beq.n	20070046 <SystemInit+0x46>
	}

	/* Initialize PLLA */
	PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
2007004e:	4a12      	ldr	r2, [pc, #72]	; (20070098 <SystemInit+0x98>)
20070050:	4b0e      	ldr	r3, [pc, #56]	; (2007008c <SystemInit+0x8c>)
20070052:	629a      	str	r2, [r3, #40]	; 0x28
	while (!(PMC->PMC_SR & PMC_SR_LOCKA)) {
20070054:	461a      	mov	r2, r3
20070056:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070058:	f013 0f02 	tst.w	r3, #2
2007005c:	d0fb      	beq.n	20070056 <SystemInit+0x56>
	}

	/* Switch to main clock */
	PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
2007005e:	2211      	movs	r2, #17
20070060:	4b0a      	ldr	r3, [pc, #40]	; (2007008c <SystemInit+0x8c>)
20070062:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070064:	461a      	mov	r2, r3
20070066:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070068:	f013 0f08 	tst.w	r3, #8
2007006c:	d0fb      	beq.n	20070066 <SystemInit+0x66>
	}

	/* Switch to PLLA */
	PMC->PMC_MCKR = SYS_BOARD_MCKR;
2007006e:	2212      	movs	r2, #18
20070070:	4b06      	ldr	r3, [pc, #24]	; (2007008c <SystemInit+0x8c>)
20070072:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070074:	461a      	mov	r2, r3
20070076:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070078:	f013 0f08 	tst.w	r3, #8
2007007c:	d0fb      	beq.n	20070076 <SystemInit+0x76>
	}

	SystemCoreClock = CHIP_FREQ_CPU_MAX;
2007007e:	4a07      	ldr	r2, [pc, #28]	; (2007009c <SystemInit+0x9c>)
20070080:	4b07      	ldr	r3, [pc, #28]	; (200700a0 <SystemInit+0xa0>)
20070082:	601a      	str	r2, [r3, #0]
20070084:	4770      	bx	lr
20070086:	bf00      	nop
20070088:	400e0a00 	.word	0x400e0a00
2007008c:	400e0600 	.word	0x400e0600
20070090:	00370809 	.word	0x00370809
20070094:	01370809 	.word	0x01370809
20070098:	200d3f01 	.word	0x200d3f01
2007009c:	0501bd00 	.word	0x0501bd00
200700a0:	20070150 	.word	0x20070150

200700a4 <system_init_flash>:
__no_inline
RAMFUNC
void system_init_flash(uint32_t ul_clk)
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
200700a4:	4b1b      	ldr	r3, [pc, #108]	; (20070114 <system_init_flash+0x70>)
200700a6:	4298      	cmp	r0, r3
200700a8:	d806      	bhi.n	200700b8 <system_init_flash+0x14>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
200700aa:	2300      	movs	r3, #0
200700ac:	4a1a      	ldr	r2, [pc, #104]	; (20070118 <system_init_flash+0x74>)
200700ae:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
200700b0:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700b4:	6013      	str	r3, [r2, #0]
200700b6:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
200700b8:	4b18      	ldr	r3, [pc, #96]	; (2007011c <system_init_flash+0x78>)
200700ba:	4298      	cmp	r0, r3
200700bc:	d807      	bhi.n	200700ce <system_init_flash+0x2a>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
200700be:	f44f 7380 	mov.w	r3, #256	; 0x100
200700c2:	4a15      	ldr	r2, [pc, #84]	; (20070118 <system_init_flash+0x74>)
200700c4:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
200700c6:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700ca:	6013      	str	r3, [r2, #0]
200700cc:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
200700ce:	4b14      	ldr	r3, [pc, #80]	; (20070120 <system_init_flash+0x7c>)
200700d0:	4298      	cmp	r0, r3
200700d2:	d807      	bhi.n	200700e4 <system_init_flash+0x40>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
200700d4:	f44f 7300 	mov.w	r3, #512	; 0x200
200700d8:	4a0f      	ldr	r2, [pc, #60]	; (20070118 <system_init_flash+0x74>)
200700da:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
200700dc:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700e0:	6013      	str	r3, [r2, #0]
200700e2:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
200700e4:	4b0f      	ldr	r3, [pc, #60]	; (20070124 <system_init_flash+0x80>)
200700e6:	4298      	cmp	r0, r3
200700e8:	d807      	bhi.n	200700fa <system_init_flash+0x56>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
200700ea:	f44f 7340 	mov.w	r3, #768	; 0x300
200700ee:	4a0a      	ldr	r2, [pc, #40]	; (20070118 <system_init_flash+0x74>)
200700f0:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
200700f2:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700f6:	6013      	str	r3, [r2, #0]
200700f8:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_4) {
200700fa:	4b0b      	ldr	r3, [pc, #44]	; (20070128 <system_init_flash+0x84>)
200700fc:	4298      	cmp	r0, r3
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
200700fe:	bf94      	ite	ls
20070100:	f44f 6380 	movls.w	r3, #1024	; 0x400
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
20070104:	f44f 63a0 	movhi.w	r3, #1280	; 0x500
20070108:	4a03      	ldr	r2, [pc, #12]	; (20070118 <system_init_flash+0x74>)
2007010a:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
2007010c:	f502 7200 	add.w	r2, r2, #512	; 0x200
20070110:	6013      	str	r3, [r2, #0]
20070112:	4770      	bx	lr
20070114:	0121eabf 	.word	0x0121eabf
20070118:	400e0a00 	.word	0x400e0a00
2007011c:	02faf07f 	.word	0x02faf07f
20070120:	03d08fff 	.word	0x03d08fff
20070124:	04c4b3ff 	.word	0x04c4b3ff
20070128:	055d4a7f 	.word	0x055d4a7f

2007012c <adc_filter_values>:
2007012c:	00000001 00000001 00000001 00000001     ................
2007013c:	00000001                                ....

20070140 <isMatlab>:
20070140:	00000001                                ....

20070144 <uxCriticalNesting>:
20070144:	aaaaaaaa                                ....

20070148 <xFreeBytesRemaining>:
20070148:	00008000                                ....

2007014c <xNextTaskUnblockTime>:
2007014c:	0000ffff                                ....

20070150 <SystemCoreClock>:
20070150:	003d0900 00000000                       ..=.....

20070158 <impure_data>:
20070158:	00000000 20070444 200704ac 20070514     ....D.. ... ... 
	...
2007018c:	000869e0 00000000 00000000 00000000     .i..............
	...
20070200:	00000001 00000000 abcd330e e66d1234     .........3..4.m.
20070210:	0005deec 0000000b 00000000 00000000     ................
	...

20070580 <_impure_ptr>:
20070580:	20070158                                X.. 

20070584 <lc_ctype_charset>:
20070584:	49435341 00000049 00000000 00000000     ASCII...........
	...

200705a4 <__mb_cur_max>:
200705a4:	00000001                                ....

200705a8 <__malloc_av_>:
	...
200705b0:	200705a8 200705a8 200705b0 200705b0     ... ... ... ... 
200705c0:	200705b8 200705b8 200705c0 200705c0     ... ... ... ... 
200705d0:	200705c8 200705c8 200705d0 200705d0     ... ... ... ... 
200705e0:	200705d8 200705d8 200705e0 200705e0     ... ... ... ... 
200705f0:	200705e8 200705e8 200705f0 200705f0     ... ... ... ... 
20070600:	200705f8 200705f8 20070600 20070600     ... ... ... ... 
20070610:	20070608 20070608 20070610 20070610     ... ... ... ... 
20070620:	20070618 20070618 20070620 20070620     ... ...  ..  .. 
20070630:	20070628 20070628 20070630 20070630     (.. (.. 0.. 0.. 
20070640:	20070638 20070638 20070640 20070640     8.. 8.. @.. @.. 
20070650:	20070648 20070648 20070650 20070650     H.. H.. P.. P.. 
20070660:	20070658 20070658 20070660 20070660     X.. X.. `.. `.. 
20070670:	20070668 20070668 20070670 20070670     h.. h.. p.. p.. 
20070680:	20070678 20070678 20070680 20070680     x.. x.. ... ... 
20070690:	20070688 20070688 20070690 20070690     ... ... ... ... 
200706a0:	20070698 20070698 200706a0 200706a0     ... ... ... ... 
200706b0:	200706a8 200706a8 200706b0 200706b0     ... ... ... ... 
200706c0:	200706b8 200706b8 200706c0 200706c0     ... ... ... ... 
200706d0:	200706c8 200706c8 200706d0 200706d0     ... ... ... ... 
200706e0:	200706d8 200706d8 200706e0 200706e0     ... ... ... ... 
200706f0:	200706e8 200706e8 200706f0 200706f0     ... ... ... ... 
20070700:	200706f8 200706f8 20070700 20070700     ... ... ... ... 
20070710:	20070708 20070708 20070710 20070710     ... ... ... ... 
20070720:	20070718 20070718 20070720 20070720     ... ...  ..  .. 
20070730:	20070728 20070728 20070730 20070730     (.. (.. 0.. 0.. 
20070740:	20070738 20070738 20070740 20070740     8.. 8.. @.. @.. 
20070750:	20070748 20070748 20070750 20070750     H.. H.. P.. P.. 
20070760:	20070758 20070758 20070760 20070760     X.. X.. `.. `.. 
20070770:	20070768 20070768 20070770 20070770     h.. h.. p.. p.. 
20070780:	20070778 20070778 20070780 20070780     x.. x.. ... ... 
20070790:	20070788 20070788 20070790 20070790     ... ... ... ... 
200707a0:	20070798 20070798 200707a0 200707a0     ... ... ... ... 
200707b0:	200707a8 200707a8 200707b0 200707b0     ... ... ... ... 
200707c0:	200707b8 200707b8 200707c0 200707c0     ... ... ... ... 
200707d0:	200707c8 200707c8 200707d0 200707d0     ... ... ... ... 
200707e0:	200707d8 200707d8 200707e0 200707e0     ... ... ... ... 
200707f0:	200707e8 200707e8 200707f0 200707f0     ... ... ... ... 
20070800:	200707f8 200707f8 20070800 20070800     ... ... ... ... 
20070810:	20070808 20070808 20070810 20070810     ... ... ... ... 
20070820:	20070818 20070818 20070820 20070820     ... ...  ..  .. 
20070830:	20070828 20070828 20070830 20070830     (.. (.. 0.. 0.. 
20070840:	20070838 20070838 20070840 20070840     8.. 8.. @.. @.. 
20070850:	20070848 20070848 20070850 20070850     H.. H.. P.. P.. 
20070860:	20070858 20070858 20070860 20070860     X.. X.. `.. `.. 
20070870:	20070868 20070868 20070870 20070870     h.. h.. p.. p.. 
20070880:	20070878 20070878 20070880 20070880     x.. x.. ... ... 
20070890:	20070888 20070888 20070890 20070890     ... ... ... ... 
200708a0:	20070898 20070898 200708a0 200708a0     ... ... ... ... 
200708b0:	200708a8 200708a8 200708b0 200708b0     ... ... ... ... 
200708c0:	200708b8 200708b8 200708c0 200708c0     ... ... ... ... 
200708d0:	200708c8 200708c8 200708d0 200708d0     ... ... ... ... 
200708e0:	200708d8 200708d8 200708e0 200708e0     ... ... ... ... 
200708f0:	200708e8 200708e8 200708f0 200708f0     ... ... ... ... 
20070900:	200708f8 200708f8 20070900 20070900     ... ... ... ... 
20070910:	20070908 20070908 20070910 20070910     ... ... ... ... 
20070920:	20070918 20070918 20070920 20070920     ... ...  ..  .. 
20070930:	20070928 20070928 20070930 20070930     (.. (.. 0.. 0.. 
20070940:	20070938 20070938 20070940 20070940     8.. 8.. @.. @.. 
20070950:	20070948 20070948 20070950 20070950     H.. H.. P.. P.. 
20070960:	20070958 20070958 20070960 20070960     X.. X.. `.. `.. 
20070970:	20070968 20070968 20070970 20070970     h.. h.. p.. p.. 
20070980:	20070978 20070978 20070980 20070980     x.. x.. ... ... 
20070990:	20070988 20070988 20070990 20070990     ... ... ... ... 
200709a0:	20070998 20070998 200709a0 200709a0     ... ... ... ... 

200709b0 <__malloc_trim_threshold>:
200709b0:	00020000                                ....

200709b4 <__malloc_sbrk_base>:
200709b4:	ffffffff                                ....

200709b8 <__wctomb>:
200709b8:	000860c1                                .`..
