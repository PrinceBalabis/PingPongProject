
ExUppgift2014.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000064ec  00080000  00080000  00008000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  000864ec  000864ec  0000e4ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000009a4  20070000  000864f4  00010000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          000082e0  200709a8  00086ea0  000109a8  2**3
                  ALLOC
  4 .stack        00002000  20078c88  0008f180  000109a8  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  000109a4  2**0
                  CONTENTS, READONLY
  6 .comment      0000005b  00000000  00000000  000109cd  2**0
                  CONTENTS, READONLY
  7 .debug_info   0001680a  00000000  00000000  00010a28  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00003b0d  00000000  00000000  00027232  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000087ab  00000000  00000000  0002ad3f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00001000  00000000  00000000  000334ea  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000ec8  00000000  00000000  000344ea  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0001c5a7  00000000  00000000  000353b2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   000168c8  00000000  00000000  00051959  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0006b210  00000000  00000000  00068221  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00003094  00000000  00000000  000d3434  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <_sfixed>:
   80000:	2007ac88 	.word	0x2007ac88
   80004:	00082879 	.word	0x00082879
   80008:	00082875 	.word	0x00082875
   8000c:	00082875 	.word	0x00082875
   80010:	00082875 	.word	0x00082875
   80014:	00082875 	.word	0x00082875
   80018:	00082875 	.word	0x00082875
	...
   8002c:	00080b59 	.word	0x00080b59
   80030:	00082875 	.word	0x00082875
   80034:	00000000 	.word	0x00000000
   80038:	00080bd5 	.word	0x00080bd5
   8003c:	00080c11 	.word	0x00080c11
   80040:	00082875 	.word	0x00082875
   80044:	00082875 	.word	0x00082875
   80048:	00082875 	.word	0x00082875
   8004c:	00082875 	.word	0x00082875
   80050:	00082875 	.word	0x00082875
   80054:	00082875 	.word	0x00082875
   80058:	00082875 	.word	0x00082875
   8005c:	00082875 	.word	0x00082875
   80060:	00082875 	.word	0x00082875
   80064:	00082875 	.word	0x00082875
   80068:	00000000 	.word	0x00000000
   8006c:	000826e5 	.word	0x000826e5
   80070:	000826f9 	.word	0x000826f9
   80074:	0008270d 	.word	0x0008270d
   80078:	00082721 	.word	0x00082721
	...
   80084:	00082875 	.word	0x00082875
   80088:	00082875 	.word	0x00082875
   8008c:	00082875 	.word	0x00082875
   80090:	00082875 	.word	0x00082875
   80094:	00082875 	.word	0x00082875
   80098:	00082875 	.word	0x00082875
   8009c:	00082875 	.word	0x00082875
   800a0:	00082875 	.word	0x00082875
   800a4:	00000000 	.word	0x00000000
   800a8:	00082875 	.word	0x00082875
   800ac:	00082875 	.word	0x00082875
   800b0:	00082875 	.word	0x00082875
   800b4:	00082875 	.word	0x00082875
   800b8:	00082875 	.word	0x00082875
   800bc:	00082875 	.word	0x00082875
   800c0:	00082875 	.word	0x00082875
   800c4:	00082875 	.word	0x00082875
   800c8:	00082875 	.word	0x00082875
   800cc:	00082875 	.word	0x00082875
   800d0:	00082875 	.word	0x00082875
   800d4:	00082875 	.word	0x00082875
   800d8:	00082875 	.word	0x00082875
   800dc:	00082875 	.word	0x00082875
   800e0:	00082875 	.word	0x00082875
   800e4:	00082875 	.word	0x00082875
   800e8:	00082875 	.word	0x00082875
   800ec:	00082875 	.word	0x00082875
   800f0:	00082875 	.word	0x00082875

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	200709a8 	.word	0x200709a8
   80110:	00000000 	.word	0x00000000
   80114:	000864f4 	.word	0x000864f4

00080118 <frame_dummy>:
   80118:	4b08      	ldr	r3, [pc, #32]	; (8013c <frame_dummy+0x24>)
   8011a:	b510      	push	{r4, lr}
   8011c:	b11b      	cbz	r3, 80126 <frame_dummy+0xe>
   8011e:	4808      	ldr	r0, [pc, #32]	; (80140 <frame_dummy+0x28>)
   80120:	4908      	ldr	r1, [pc, #32]	; (80144 <frame_dummy+0x2c>)
   80122:	f3af 8000 	nop.w
   80126:	4808      	ldr	r0, [pc, #32]	; (80148 <frame_dummy+0x30>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b903      	cbnz	r3, 8012e <frame_dummy+0x16>
   8012c:	bd10      	pop	{r4, pc}
   8012e:	4b07      	ldr	r3, [pc, #28]	; (8014c <frame_dummy+0x34>)
   80130:	2b00      	cmp	r3, #0
   80132:	d0fb      	beq.n	8012c <frame_dummy+0x14>
   80134:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   80138:	4718      	bx	r3
   8013a:	bf00      	nop
   8013c:	00000000 	.word	0x00000000
   80140:	000864f4 	.word	0x000864f4
   80144:	200709ac 	.word	0x200709ac
   80148:	000864f4 	.word	0x000864f4
   8014c:	00000000 	.word	0x00000000

00080150 <ADCSetup>:
#include "global_variables.h"
#include "PWMCustom.h"

/* Setup Function for ADC */
void ADCSetup()
{
   80150:	b538      	push	{r3, r4, r5, lr}
	pmc_enable_periph_clk(ID_ADC);
   80152:	2025      	movs	r0, #37	; 0x25
   80154:	4b0e      	ldr	r3, [pc, #56]	; (80190 <ADCSetup+0x40>)
   80156:	4798      	blx	r3
	adc_init(ADC, sysclk_get_main_hz(), 20000000, 0);		// Configure for maximum frequency @ 20 MHz
   80158:	4c0e      	ldr	r4, [pc, #56]	; (80194 <ADCSetup+0x44>)
   8015a:	4620      	mov	r0, r4
   8015c:	490e      	ldr	r1, [pc, #56]	; (80198 <ADCSetup+0x48>)
   8015e:	4a0f      	ldr	r2, [pc, #60]	; (8019c <ADCSetup+0x4c>)
   80160:	2300      	movs	r3, #0
   80162:	4d0f      	ldr	r5, [pc, #60]	; (801a0 <ADCSetup+0x50>)
   80164:	47a8      	blx	r5
	adc_configure_timing(ADC, 0, 0, 0);
   80166:	4620      	mov	r0, r4
   80168:	2100      	movs	r1, #0
   8016a:	460a      	mov	r2, r1
   8016c:	460b      	mov	r3, r1
   8016e:	4d0d      	ldr	r5, [pc, #52]	; (801a4 <ADCSetup+0x54>)
   80170:	47a8      	blx	r5
	adc_set_resolution(ADC, ADC_MR_LOWRES_BITS_12);			// 0-4095
   80172:	4620      	mov	r0, r4
   80174:	2100      	movs	r1, #0
   80176:	4b0c      	ldr	r3, [pc, #48]	; (801a8 <ADCSetup+0x58>)
   80178:	4798      	blx	r3
	adc_configure_trigger(ADC, ADC_TRIG_SW, 0);				// trig just by software
   8017a:	4620      	mov	r0, r4
   8017c:	2100      	movs	r1, #0
   8017e:	460a      	mov	r2, r1
   80180:	4b0a      	ldr	r3, [pc, #40]	; (801ac <ADCSetup+0x5c>)
   80182:	4798      	blx	r3
	adc_enable_channel(ADC, ADC_CHANNEL_10);				// PB17 - AD8 for Arduino Due
   80184:	4620      	mov	r0, r4
   80186:	210a      	movs	r1, #10
   80188:	4b09      	ldr	r3, [pc, #36]	; (801b0 <ADCSetup+0x60>)
   8018a:	4798      	blx	r3
   8018c:	bd38      	pop	{r3, r4, r5, pc}
   8018e:	bf00      	nop
   80190:	00082821 	.word	0x00082821
   80194:	400c0000 	.word	0x400c0000
   80198:	0a037a00 	.word	0x0a037a00
   8019c:	01312d00 	.word	0x01312d00
   801a0:	000802ad 	.word	0x000802ad
   801a4:	00080301 	.word	0x00080301
   801a8:	000802e1 	.word	0x000802e1
   801ac:	000802f1 	.word	0x000802f1
   801b0:	00080329 	.word	0x00080329

000801b4 <ADCReadSensor>:
}

/* Read ADC value*/
int ADCReadSensor()
{
   801b4:	b538      	push	{r3, r4, r5, lr}
	adc_start(ADC);
   801b6:	4807      	ldr	r0, [pc, #28]	; (801d4 <ADCReadSensor+0x20>)
   801b8:	4b07      	ldr	r3, [pc, #28]	; (801d8 <ADCReadSensor+0x24>)
   801ba:	4798      	blx	r3
	while((adc_get_status(ADC) & 0x1<<24)==0);  // Wait until DRDY(Data Ready) is HIGH
   801bc:	4d05      	ldr	r5, [pc, #20]	; (801d4 <ADCReadSensor+0x20>)
   801be:	4c07      	ldr	r4, [pc, #28]	; (801dc <ADCReadSensor+0x28>)
   801c0:	4628      	mov	r0, r5
   801c2:	47a0      	blx	r4
   801c4:	f010 7f80 	tst.w	r0, #16777216	; 0x1000000
   801c8:	d0fa      	beq.n	801c0 <ADCReadSensor+0xc>
	return adc_get_latest_value(ADC);
   801ca:	4802      	ldr	r0, [pc, #8]	; (801d4 <ADCReadSensor+0x20>)
   801cc:	4b04      	ldr	r3, [pc, #16]	; (801e0 <ADCReadSensor+0x2c>)
   801ce:	4798      	blx	r3
}
   801d0:	bd38      	pop	{r3, r4, r5, pc}
   801d2:	bf00      	nop
   801d4:	400c0000 	.word	0x400c0000
   801d8:	00080321 	.word	0x00080321
   801dc:	00080335 	.word	0x00080335
   801e0:	00080331 	.word	0x00080331

000801e4 <ADCLinearValues>:

/* Linear ADC Value*/
int ADCLinearValues()
{
   801e4:	b508      	push	{r3, lr}
	int tempADCValue = ADCReadSensor();
   801e6:	4b21      	ldr	r3, [pc, #132]	; (8026c <ADCLinearValues+0x88>)
   801e8:	4798      	blx	r3
	if(tempADCValue < CENTIMETER_50){
   801ea:	f240 437d 	movw	r3, #1149	; 0x47d
   801ee:	4298      	cmp	r0, r3
   801f0:	dd29      	ble.n	80246 <ADCLinearValues+0x62>
		return 50;
		} else if(tempADCValue > CENTIMETER_50 && tempADCValue < CENTIMETER_45){
   801f2:	f2a0 437f 	subw	r3, r0, #1151	; 0x47f
   801f6:	2b30      	cmp	r3, #48	; 0x30
   801f8:	d927      	bls.n	8024a <ADCLinearValues+0x66>
		return 50;
		} else if(tempADCValue > CENTIMETER_45 && tempADCValue < CENTIMETER_40){
   801fa:	f2a0 43b1 	subw	r3, r0, #1201	; 0x4b1
   801fe:	2b62      	cmp	r3, #98	; 0x62
   80200:	d925      	bls.n	8024e <ADCLinearValues+0x6a>
		return 45;
		} else if(tempADCValue > CENTIMETER_40 && tempADCValue < CENTIMETER_35){
   80202:	f2a0 5315 	subw	r3, r0, #1301	; 0x515
   80206:	2b62      	cmp	r3, #98	; 0x62
   80208:	d923      	bls.n	80252 <ADCLinearValues+0x6e>
		return 40;
		} else if(tempADCValue > CENTIMETER_35 && tempADCValue < CENTIMETER_30){
   8020a:	f2a0 5379 	subw	r3, r0, #1401	; 0x579
   8020e:	2b62      	cmp	r3, #98	; 0x62
   80210:	d921      	bls.n	80256 <ADCLinearValues+0x72>
		return 35;
		} else if(tempADCValue > CENTIMETER_30 && tempADCValue < CENTIMETER_25){
   80212:	f2a0 53dd 	subw	r3, r0, #1501	; 0x5dd
   80216:	2bf8      	cmp	r3, #248	; 0xf8
   80218:	d91f      	bls.n	8025a <ADCLinearValues+0x76>
		return 30;
		} else if(tempADCValue > CENTIMETER_25 && tempADCValue < CENTIMETER_20){
   8021a:	f2a0 63d7 	subw	r3, r0, #1751	; 0x6d7
   8021e:	2bf8      	cmp	r3, #248	; 0xf8
   80220:	d91d      	bls.n	8025e <ADCLinearValues+0x7a>
		return 25;
		} else if(tempADCValue > CENTIMETER_20 && tempADCValue < CENTIMETER_15){
   80222:	f2a0 73d1 	subw	r3, r0, #2001	; 0x7d1
   80226:	f5b3 7f95 	cmp.w	r3, #298	; 0x12a
   8022a:	d91a      	bls.n	80262 <ADCLinearValues+0x7e>
		return 20;
		} else if(tempADCValue > CENTIMETER_15 && tempADCValue < CENTIMETER_10){
   8022c:	f6a0 02fd 	subw	r2, r0, #2301	; 0x8fd
   80230:	f240 434a 	movw	r3, #1098	; 0x44a
   80234:	429a      	cmp	r2, r3
   80236:	d916      	bls.n	80266 <ADCLinearValues+0x82>
		return 15;
		} else if(tempADCValue > CENTIMETER_10){
		return 10;
	}
	return CENTIMETER_DEFAULT;
   80238:	f640 5348 	movw	r3, #3400	; 0xd48
   8023c:	4298      	cmp	r0, r3
   8023e:	bfcc      	ite	gt
   80240:	200a      	movgt	r0, #10
   80242:	201e      	movle	r0, #30
   80244:	bd08      	pop	{r3, pc}
/* Linear ADC Value*/
int ADCLinearValues()
{
	int tempADCValue = ADCReadSensor();
	if(tempADCValue < CENTIMETER_50){
		return 50;
   80246:	2032      	movs	r0, #50	; 0x32
   80248:	bd08      	pop	{r3, pc}
		} else if(tempADCValue > CENTIMETER_50 && tempADCValue < CENTIMETER_45){
		return 50;
   8024a:	2032      	movs	r0, #50	; 0x32
   8024c:	bd08      	pop	{r3, pc}
		} else if(tempADCValue > CENTIMETER_45 && tempADCValue < CENTIMETER_40){
		return 45;
   8024e:	202d      	movs	r0, #45	; 0x2d
   80250:	bd08      	pop	{r3, pc}
		} else if(tempADCValue > CENTIMETER_40 && tempADCValue < CENTIMETER_35){
		return 40;
   80252:	2028      	movs	r0, #40	; 0x28
   80254:	bd08      	pop	{r3, pc}
		} else if(tempADCValue > CENTIMETER_35 && tempADCValue < CENTIMETER_30){
		return 35;
   80256:	2023      	movs	r0, #35	; 0x23
   80258:	bd08      	pop	{r3, pc}
		} else if(tempADCValue > CENTIMETER_30 && tempADCValue < CENTIMETER_25){
		return 30;
   8025a:	201e      	movs	r0, #30
   8025c:	bd08      	pop	{r3, pc}
		} else if(tempADCValue > CENTIMETER_25 && tempADCValue < CENTIMETER_20){
		return 25;
   8025e:	2019      	movs	r0, #25
   80260:	bd08      	pop	{r3, pc}
		} else if(tempADCValue > CENTIMETER_20 && tempADCValue < CENTIMETER_15){
		return 20;
   80262:	2014      	movs	r0, #20
   80264:	bd08      	pop	{r3, pc}
		} else if(tempADCValue > CENTIMETER_15 && tempADCValue < CENTIMETER_10){
		return 15;
   80266:	200f      	movs	r0, #15
		} else if(tempADCValue > CENTIMETER_10){
		return 10;
	}
	return CENTIMETER_DEFAULT;
   80268:	bd08      	pop	{r3, pc}
   8026a:	bf00      	nop
   8026c:	000801b5 	.word	0x000801b5

00080270 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
   80270:	b9a8      	cbnz	r0, 8029e <_read+0x2e>
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
   80272:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   80276:	460c      	mov	r4, r1
   80278:	4690      	mov	r8, r2

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
   8027a:	2a00      	cmp	r2, #0
   8027c:	dd0a      	ble.n	80294 <_read+0x24>
   8027e:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
   80280:	4e08      	ldr	r6, [pc, #32]	; (802a4 <_read+0x34>)
   80282:	4d09      	ldr	r5, [pc, #36]	; (802a8 <_read+0x38>)
   80284:	6830      	ldr	r0, [r6, #0]
   80286:	4621      	mov	r1, r4
   80288:	682b      	ldr	r3, [r5, #0]
   8028a:	4798      	blx	r3
		ptr++;
   8028c:	3401      	adds	r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
   8028e:	42bc      	cmp	r4, r7
   80290:	d1f8      	bne.n	80284 <_read+0x14>
   80292:	e001      	b.n	80298 <_read+0x28>
   80294:	f04f 0800 	mov.w	r8, #0
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
   80298:	4640      	mov	r0, r8
   8029a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
   8029e:	f04f 30ff 	mov.w	r0, #4294967295
   802a2:	4770      	bx	lr
   802a4:	20078c80 	.word	0x20078c80
   802a8:	20078c78 	.word	0x20078c78

000802ac <adc_init>:
 *
 * \return 0 on success.
 */
uint32_t adc_init(Adc *p_adc, const uint32_t ul_mck,
		const uint32_t ul_adc_clock, const enum adc_startup_time startup)
{
   802ac:	b430      	push	{r4, r5}
	uint32_t ul_prescal;

	/*  Reset the controller. */
	p_adc->ADC_CR = ADC_CR_SWRST;
   802ae:	2401      	movs	r4, #1
   802b0:	6004      	str	r4, [r0, #0]

	/* Reset Mode Register. */
	p_adc->ADC_MR = 0;
   802b2:	2400      	movs	r4, #0
   802b4:	6044      	str	r4, [r0, #4]

	/* Reset PDC transfer. */
	p_adc->ADC_PTCR = (ADC_PTCR_RXTDIS | ADC_PTCR_TXTDIS);
   802b6:	f240 2502 	movw	r5, #514	; 0x202
   802ba:	f8c0 5120 	str.w	r5, [r0, #288]	; 0x120
	p_adc->ADC_RCR = 0;
   802be:	f8c0 4104 	str.w	r4, [r0, #260]	; 0x104
	p_adc->ADC_RNCR = 0;
   802c2:	f8c0 4114 	str.w	r4, [r0, #276]	; 0x114

	ul_prescal = ul_mck / (2 * ul_adc_clock) - 1;
	p_adc->ADC_MR |= ADC_MR_PRESCAL(ul_prescal) | startup;
   802c6:	6845      	ldr	r5, [r0, #4]
   802c8:	432b      	orrs	r3, r5
	/* Reset PDC transfer. */
	p_adc->ADC_PTCR = (ADC_PTCR_RXTDIS | ADC_PTCR_TXTDIS);
	p_adc->ADC_RCR = 0;
	p_adc->ADC_RNCR = 0;

	ul_prescal = ul_mck / (2 * ul_adc_clock) - 1;
   802ca:	0052      	lsls	r2, r2, #1
   802cc:	fbb1 f1f2 	udiv	r1, r1, r2
   802d0:	1e4a      	subs	r2, r1, #1
	p_adc->ADC_MR |= ADC_MR_PRESCAL(ul_prescal) | startup;
   802d2:	0212      	lsls	r2, r2, #8
   802d4:	b292      	uxth	r2, r2
   802d6:	4313      	orrs	r3, r2
   802d8:	6043      	str	r3, [r0, #4]
	return 0;
}
   802da:	4620      	mov	r0, r4
   802dc:	bc30      	pop	{r4, r5}
   802de:	4770      	bx	lr

000802e0 <adc_set_resolution>:
		p_adc->ADC_MR &= ~ADC_MR_LOWRES;
		p_adc->ADC_EMR |= resolution;
		break;
	}
#else
	p_adc->ADC_MR &= ~ADC_MR_LOWRES;
   802e0:	6843      	ldr	r3, [r0, #4]
   802e2:	f023 0310 	bic.w	r3, r3, #16
   802e6:	6043      	str	r3, [r0, #4]
	p_adc->ADC_MR |= resolution;
   802e8:	6843      	ldr	r3, [r0, #4]
   802ea:	4319      	orrs	r1, r3
   802ec:	6041      	str	r1, [r0, #4]
   802ee:	4770      	bx	lr

000802f0 <adc_configure_trigger>:
 *
 */
void adc_configure_trigger(Adc *p_adc, const enum adc_trigger_t trigger,
		uint8_t uc_freerun)
{
	p_adc->ADC_MR |= trigger | ((uc_freerun << 7) & ADC_MR_FREERUN);
   802f0:	6843      	ldr	r3, [r0, #4]
   802f2:	4319      	orrs	r1, r3
   802f4:	01d2      	lsls	r2, r2, #7
   802f6:	b2d2      	uxtb	r2, r2
   802f8:	4311      	orrs	r1, r2
   802fa:	6041      	str	r1, [r0, #4]
   802fc:	4770      	bx	lr
   802fe:	bf00      	nop

00080300 <adc_configure_timing>:
 * \param uc_settling Analog settling time = (uc_settling + 1) / ADC clock.
 * \param uc_transfer Data transfer time = (uc_transfer * 2 + 3) / ADC clock.
 */
void adc_configure_timing(Adc *p_adc, const uint8_t uc_tracking,
		const enum adc_settling_time_t settling,const uint8_t uc_transfer)
{
   80300:	b410      	push	{r4}
	p_adc->ADC_MR |= ADC_MR_TRANSFER(uc_transfer)
   80302:	6844      	ldr	r4, [r0, #4]
   80304:	4322      	orrs	r2, r4
			| settling | ADC_MR_TRACKTIM(uc_tracking);
   80306:	0609      	lsls	r1, r1, #24
   80308:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
   8030c:	430a      	orrs	r2, r1
 * \param uc_transfer Data transfer time = (uc_transfer * 2 + 3) / ADC clock.
 */
void adc_configure_timing(Adc *p_adc, const uint8_t uc_tracking,
		const enum adc_settling_time_t settling,const uint8_t uc_transfer)
{
	p_adc->ADC_MR |= ADC_MR_TRANSFER(uc_transfer)
   8030e:	071b      	lsls	r3, r3, #28
   80310:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
   80314:	4313      	orrs	r3, r2
   80316:	6043      	str	r3, [r0, #4]
			| settling | ADC_MR_TRACKTIM(uc_tracking);
}
   80318:	f85d 4b04 	ldr.w	r4, [sp], #4
   8031c:	4770      	bx	lr
   8031e:	bf00      	nop

00080320 <adc_start>:
 * \param p_adc Pointer to an ADC instance.
 */

void adc_start(Adc *p_adc)
{
	p_adc->ADC_CR = ADC_CR_START;
   80320:	2302      	movs	r3, #2
   80322:	6003      	str	r3, [r0, #0]
   80324:	4770      	bx	lr
   80326:	bf00      	nop

00080328 <adc_enable_channel>:
 * \param p_adc Pointer to an ADC instance.
 * \param adc_ch ADC channel number.
 */
void adc_enable_channel(Adc *p_adc, const enum adc_channel_num_t adc_ch)
{
	p_adc->ADC_CHER = 1 << adc_ch;
   80328:	2301      	movs	r3, #1
   8032a:	408b      	lsls	r3, r1
   8032c:	6103      	str	r3, [r0, #16]
   8032e:	4770      	bx	lr

00080330 <adc_get_latest_value>:
 *
 * \return ADC latest value.
 */
uint32_t adc_get_latest_value(const Adc *p_adc)
{
	return p_adc->ADC_LCDR;
   80330:	6a00      	ldr	r0, [r0, #32]
}
   80332:	4770      	bx	lr

00080334 <adc_get_status>:
 *
 * \return ADC status structure.
 */
uint32_t adc_get_status(const Adc *p_adc)
{
	return p_adc->ADC_ISR;
   80334:	6b00      	ldr	r0, [r0, #48]	; 0x30
}
   80336:	4770      	bx	lr

00080338 <usart_write>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
   80338:	6943      	ldr	r3, [r0, #20]
   8033a:	f013 0f02 	tst.w	r3, #2
		return 1;
	}

	p_usart->US_THR = US_THR_TXCHR(c);
   8033e:	bf1d      	ittte	ne
   80340:	f3c1 0108 	ubfxne	r1, r1, #0, #9
   80344:	61c1      	strne	r1, [r0, #28]
	return 0;
   80346:	2000      	movne	r0, #0
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
		return 1;
   80348:	2001      	moveq	r0, #1
	}

	p_usart->US_THR = US_THR_TXCHR(c);
	return 0;
}
   8034a:	4770      	bx	lr

0008034c <usart_read>:
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
   8034c:	6943      	ldr	r3, [r0, #20]
   8034e:	f013 0f01 	tst.w	r3, #1
   80352:	d005      	beq.n	80360 <usart_read+0x14>
		return 1;
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
   80354:	6983      	ldr	r3, [r0, #24]
   80356:	f3c3 0308 	ubfx	r3, r3, #0, #9
   8035a:	600b      	str	r3, [r1, #0]

	return 0;
   8035c:	2000      	movs	r0, #0
   8035e:	4770      	bx	lr
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
		return 1;
   80360:	2001      	movs	r0, #1

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;

	return 0;
}
   80362:	4770      	bx	lr
   80364:	0000      	movs	r0, r0
	...

00080368 <PIDRegulate>:
#include "ADCCustom.h"
#include "global_variables.h"
#include "UARTFunctions.h"

/* PID Function */
void PIDRegulate(void){
   80368:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8036c:	b085      	sub	sp, #20
// 	uint32_t valuesTotal = 0;
// 	for(int i = 0; i<FILTER_AVERAGE_SAMPLES-1; i++){
// 		valuesTotal += ADCLinearValues();
// 	}
// 	distance = valuesTotal / FILTER_AVERAGE_SAMPLES;
	distance = ADCLinearValues();
   8036e:	4b3e      	ldr	r3, [pc, #248]	; (80468 <PIDRegulate+0x100>)
   80370:	4798      	blx	r3
   80372:	4b3e      	ldr	r3, [pc, #248]	; (8046c <PIDRegulate+0x104>)
   80374:	6018      	str	r0, [r3, #0]

	// P-regulation
	error = -1*(setPoint - distance);
   80376:	4b3e      	ldr	r3, [pc, #248]	; (80470 <PIDRegulate+0x108>)
   80378:	681e      	ldr	r6, [r3, #0]
   8037a:	1b86      	subs	r6, r0, r6
   8037c:	4b3d      	ldr	r3, [pc, #244]	; (80474 <PIDRegulate+0x10c>)
   8037e:	601e      	str	r6, [r3, #0]

	//if(error == 1)
	//{
	//D_Output = 0;
	//} else {
	D_Output = (double)(kD_Gain * (error-error_old) * 1000.0 / DTIME_MS);
   80380:	4f3d      	ldr	r7, [pc, #244]	; (80478 <PIDRegulate+0x110>)
   80382:	6838      	ldr	r0, [r7, #0]
   80384:	4d3d      	ldr	r5, [pc, #244]	; (8047c <PIDRegulate+0x114>)
   80386:	1a30      	subs	r0, r6, r0
   80388:	47a8      	blx	r5
   8038a:	4c3d      	ldr	r4, [pc, #244]	; (80480 <PIDRegulate+0x118>)
   8038c:	4b3d      	ldr	r3, [pc, #244]	; (80484 <PIDRegulate+0x11c>)
   8038e:	e9d3 2300 	ldrd	r2, r3, [r3]
   80392:	47a0      	blx	r4
   80394:	2200      	movs	r2, #0
   80396:	4b3c      	ldr	r3, [pc, #240]	; (80488 <PIDRegulate+0x120>)
   80398:	47a0      	blx	r4
   8039a:	2200      	movs	r2, #0
   8039c:	4b3b      	ldr	r3, [pc, #236]	; (8048c <PIDRegulate+0x124>)
   8039e:	f8df c110 	ldr.w	ip, [pc, #272]	; 804b0 <PIDRegulate+0x148>
   803a2:	47e0      	blx	ip
   803a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
	//}
	error_old = error;
   803a8:	603e      	str	r6, [r7, #0]
	double I_Output;
	//if(kI_Gain == 0)
	//{
	//	I_Output = 0;
	//} else {
		I_Output = (double)(I_Output_old + kI_Gain * error * DT_SECONDS);
   803aa:	4630      	mov	r0, r6
   803ac:	47a8      	blx	r5
   803ae:	e9cd 0100 	strd	r0, r1, [sp]
   803b2:	f8df b100 	ldr.w	fp, [pc, #256]	; 804b4 <PIDRegulate+0x14c>
   803b6:	f8db 0000 	ldr.w	r0, [fp]
   803ba:	47a8      	blx	r5
   803bc:	4680      	mov	r8, r0
   803be:	4689      	mov	r9, r1
   803c0:	e9dd 0100 	ldrd	r0, r1, [sp]
   803c4:	4b32      	ldr	r3, [pc, #200]	; (80490 <PIDRegulate+0x128>)
   803c6:	e9d3 2300 	ldrd	r2, r3, [r3]
   803ca:	47a0      	blx	r4
   803cc:	a324      	add	r3, pc, #144	; (adr r3, 80460 <PIDRegulate+0xf8>)
   803ce:	e9d3 2300 	ldrd	r2, r3, [r3]
   803d2:	47a0      	blx	r4
   803d4:	4602      	mov	r2, r0
   803d6:	460b      	mov	r3, r1
   803d8:	4f2e      	ldr	r7, [pc, #184]	; (80494 <PIDRegulate+0x12c>)
   803da:	4640      	mov	r0, r8
   803dc:	4649      	mov	r1, r9
   803de:	47b8      	blx	r7
   803e0:	4680      	mov	r8, r0
   803e2:	4689      	mov	r9, r1
		I_Output_old = I_Output;
   803e4:	4e2c      	ldr	r6, [pc, #176]	; (80498 <PIDRegulate+0x130>)
   803e6:	47b0      	blx	r6
   803e8:	f8cb 0000 	str.w	r0, [fp]
	//}

	// Add up P, I and D outputs
	output_value = (kP_Gain*error)+I_Output+D_Output;
   803ec:	e9dd 0100 	ldrd	r0, r1, [sp]
   803f0:	4b2a      	ldr	r3, [pc, #168]	; (8049c <PIDRegulate+0x134>)
   803f2:	e9d3 2300 	ldrd	r2, r3, [r3]
   803f6:	47a0      	blx	r4
   803f8:	4642      	mov	r2, r8
   803fa:	464b      	mov	r3, r9
   803fc:	47b8      	blx	r7
   803fe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   80402:	47b8      	blx	r7
   80404:	47b0      	blx	r6
   80406:	4681      	mov	r9, r0
   80408:	4b25      	ldr	r3, [pc, #148]	; (804a0 <PIDRegulate+0x138>)
   8040a:	6018      	str	r0, [r3, #0]
	
	//Apply output from PID to pwm control 
	pwm_val = pwm_val+(output_value*PWM_CHANGE_GAIN); 
   8040c:	4b25      	ldr	r3, [pc, #148]	; (804a4 <PIDRegulate+0x13c>)
   8040e:	6818      	ldr	r0, [r3, #0]
   80410:	47a8      	blx	r5
   80412:	4682      	mov	sl, r0
   80414:	468b      	mov	fp, r1
   80416:	4648      	mov	r0, r9
   80418:	47a8      	blx	r5
   8041a:	2200      	movs	r2, #0
   8041c:	4b22      	ldr	r3, [pc, #136]	; (804a8 <PIDRegulate+0x140>)
   8041e:	47a0      	blx	r4
   80420:	4602      	mov	r2, r0
   80422:	460b      	mov	r3, r1
   80424:	4650      	mov	r0, sl
   80426:	4659      	mov	r1, fp
   80428:	47b8      	blx	r7
   8042a:	47b0      	blx	r6
	
	// Protection vs overflow/underflow
	if (pwm_val < PID_PWM_MIN)
   8042c:	2800      	cmp	r0, #0
   8042e:	da03      	bge.n	80438 <PIDRegulate+0xd0>
	{
		pwm_val = PID_PWM_MIN;
   80430:	2200      	movs	r2, #0
   80432:	4b1c      	ldr	r3, [pc, #112]	; (804a4 <PIDRegulate+0x13c>)
   80434:	601a      	str	r2, [r3, #0]
   80436:	e009      	b.n	8044c <PIDRegulate+0xe4>
	}
	else if (pwm_val > PID_PWM_MAX)
   80438:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
   8043c:	da02      	bge.n	80444 <PIDRegulate+0xdc>

	// Add up P, I and D outputs
	output_value = (kP_Gain*error)+I_Output+D_Output;
	
	//Apply output from PID to pwm control 
	pwm_val = pwm_val+(output_value*PWM_CHANGE_GAIN); 
   8043e:	4b19      	ldr	r3, [pc, #100]	; (804a4 <PIDRegulate+0x13c>)
   80440:	6018      	str	r0, [r3, #0]
   80442:	e003      	b.n	8044c <PIDRegulate+0xe4>
	{
		pwm_val = PID_PWM_MIN;
	}
	else if (pwm_val > PID_PWM_MAX)
	{
		pwm_val = PID_PWM_MAX;
   80444:	f240 32e7 	movw	r2, #999	; 0x3e7
   80448:	4b16      	ldr	r3, [pc, #88]	; (804a4 <PIDRegulate+0x13c>)
   8044a:	601a      	str	r2, [r3, #0]
	}
	
	// Write PID value to PWM
	PWMDutyCycle(pwm_val);
   8044c:	4b15      	ldr	r3, [pc, #84]	; (804a4 <PIDRegulate+0x13c>)
   8044e:	6818      	ldr	r0, [r3, #0]
   80450:	4b16      	ldr	r3, [pc, #88]	; (804ac <PIDRegulate+0x144>)
   80452:	4798      	blx	r3
}
   80454:	b005      	add	sp, #20
   80456:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8045a:	bf00      	nop
   8045c:	f3af 8000 	nop.w
   80460:	9999999a 	.word	0x9999999a
   80464:	3fa99999 	.word	0x3fa99999
   80468:	000801e5 	.word	0x000801e5
   8046c:	200709d0 	.word	0x200709d0
   80470:	200709fc 	.word	0x200709fc
   80474:	200709d4 	.word	0x200709d4
   80478:	200709cc 	.word	0x200709cc
   8047c:	00082e21 	.word	0x00082e21
   80480:	00082eed 	.word	0x00082eed
   80484:	200709e0 	.word	0x200709e0
   80488:	408f4000 	.word	0x408f4000
   8048c:	40490000 	.word	0x40490000
   80490:	200709f0 	.word	0x200709f0
   80494:	00082b89 	.word	0x00082b89
   80498:	00083311 	.word	0x00083311
   8049c:	200709d8 	.word	0x200709d8
   804a0:	200709f8 	.word	0x200709f8
   804a4:	200709c8 	.word	0x200709c8
   804a8:	3fe00000 	.word	0x3fe00000
   804ac:	00080585 	.word	0x00080585
   804b0:	00083141 	.word	0x00083141
   804b4:	200709e8 	.word	0x200709e8

000804b8 <PIDRegulationTask>:
#include "global_variables.h"
#include "PIDRegulation.h"
#include "testFunctions.h"

void PIDRegulationTask (void *pvParameters)
{
   804b8:	b570      	push	{r4, r5, r6, lr}
   804ba:	b082      	sub	sp, #8
	//	printf("PID Task initialized and PAUSED\n\r");

	// Pause here untill Matlab sent values
	xSemaphoreTake(sem, portMAX_DELAY);
   804bc:	4d0e      	ldr	r5, [pc, #56]	; (804f8 <PIDRegulationTask+0x40>)
   804be:	6828      	ldr	r0, [r5, #0]
   804c0:	2100      	movs	r1, #0
   804c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
   804c6:	460b      	mov	r3, r1
   804c8:	4c0c      	ldr	r4, [pc, #48]	; (804fc <PIDRegulationTask+0x44>)
   804ca:	47a0      	blx	r4
	xSemaphoreTake(sem, portMAX_DELAY);
   804cc:	6828      	ldr	r0, [r5, #0]
   804ce:	2100      	movs	r1, #0
   804d0:	f64f 72ff 	movw	r2, #65535	; 0xffff
   804d4:	460b      	mov	r3, r1
   804d6:	47a0      	blx	r4

	portTickType xLastWakeTime = xTaskGetTickCount();
   804d8:	4b09      	ldr	r3, [pc, #36]	; (80500 <PIDRegulationTask+0x48>)
   804da:	4798      	blx	r3
   804dc:	ac02      	add	r4, sp, #8
   804de:	f824 0d02 	strh.w	r0, [r4, #-2]!
	const portTickType xFrequency =  DTIME_MS; // Run between 50-100ms

vTaskDelay(1000);
   804e2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   804e6:	4b07      	ldr	r3, [pc, #28]	; (80504 <PIDRegulationTask+0x4c>)
   804e8:	4798      	blx	r3

	for(;;){
		vTaskDelayUntil(&xLastWakeTime,xFrequency);	// Samplingstid
   804ea:	4e07      	ldr	r6, [pc, #28]	; (80508 <PIDRegulationTask+0x50>)
		PIDRegulate(); // Run PID
   804ec:	4d07      	ldr	r5, [pc, #28]	; (8050c <PIDRegulationTask+0x54>)
	const portTickType xFrequency =  DTIME_MS; // Run between 50-100ms

vTaskDelay(1000);

	for(;;){
		vTaskDelayUntil(&xLastWakeTime,xFrequency);	// Samplingstid
   804ee:	4620      	mov	r0, r4
   804f0:	2132      	movs	r1, #50	; 0x32
   804f2:	47b0      	blx	r6
		PIDRegulate(); // Run PID
   804f4:	47a8      	blx	r5
	}
   804f6:	e7fa      	b.n	804ee <PIDRegulationTask+0x36>
   804f8:	200709c4 	.word	0x200709c4
   804fc:	0008118d 	.word	0x0008118d
   80500:	00081619 	.word	0x00081619
   80504:	00081901 	.word	0x00081901
   80508:	00081869 	.word	0x00081869
   8050c:	00080369 	.word	0x00080369

00080510 <PWMSetup>:
#include <asf.h>
#include "PWMCustom.h"
#include "global_variables.h"

void PWMSetup()
{
   80510:	b530      	push	{r4, r5, lr}
   80512:	b085      	sub	sp, #20
	pmc_enable_periph_clk(ID_PWM);
   80514:	2024      	movs	r0, #36	; 0x24
   80516:	4b12      	ldr	r3, [pc, #72]	; (80560 <PWMSetup+0x50>)
   80518:	4798      	blx	r3
	pwm_channel_disable(PWM, PWM_CHANNEL_6);
   8051a:	4c12      	ldr	r4, [pc, #72]	; (80564 <PWMSetup+0x54>)
   8051c:	4620      	mov	r0, r4
   8051e:	2106      	movs	r1, #6
   80520:	4b11      	ldr	r3, [pc, #68]	; (80568 <PWMSetup+0x58>)
   80522:	4798      	blx	r3
	pwm_clock_t pwm_clock ={
   80524:	4b11      	ldr	r3, [pc, #68]	; (8056c <PWMSetup+0x5c>)
   80526:	9301      	str	r3, [sp, #4]
   80528:	2500      	movs	r5, #0
   8052a:	9502      	str	r5, [sp, #8]
   8052c:	4b10      	ldr	r3, [pc, #64]	; (80570 <PWMSetup+0x60>)
   8052e:	9303      	str	r3, [sp, #12]
		.ul_clka = 1000*999,
		.ul_clkb = 0,
		.ul_mck = sysclk_get_cpu_hz()
	};
	pwm_init(PWM, &pwm_clock);
   80530:	4620      	mov	r0, r4
   80532:	a901      	add	r1, sp, #4
   80534:	4b0f      	ldr	r3, [pc, #60]	; (80574 <PWMSetup+0x64>)
   80536:	4798      	blx	r3

	pwm_channel.alignment = PWM_ALIGN_LEFT;
   80538:	490f      	ldr	r1, [pc, #60]	; (80578 <PWMSetup+0x68>)
   8053a:	810d      	strh	r5, [r1, #8]
	pwm_channel.polarity = PWM_LOW;
   8053c:	728d      	strb	r5, [r1, #10]
	pwm_channel.ul_prescaler = PWM_CMR_CPRE_CLKA;
   8053e:	230b      	movs	r3, #11
   80540:	604b      	str	r3, [r1, #4]
	pwm_channel.ul_duty = 0;
   80542:	60cd      	str	r5, [r1, #12]
	pwm_channel.ul_period = 999;
   80544:	f240 33e7 	movw	r3, #999	; 0x3e7
   80548:	610b      	str	r3, [r1, #16]
	pwm_channel.channel = PWM_CHANNEL_6;
   8054a:	2506      	movs	r5, #6
   8054c:	600d      	str	r5, [r1, #0]
	pwm_channel_init(PWM, &pwm_channel);
   8054e:	4620      	mov	r0, r4
   80550:	4b0a      	ldr	r3, [pc, #40]	; (8057c <PWMSetup+0x6c>)
   80552:	4798      	blx	r3
	pwm_channel_enable(PWM, PWM_CHANNEL_6);
   80554:	4620      	mov	r0, r4
   80556:	4629      	mov	r1, r5
   80558:	4b09      	ldr	r3, [pc, #36]	; (80580 <PWMSetup+0x70>)
   8055a:	4798      	blx	r3
}
   8055c:	b005      	add	sp, #20
   8055e:	bd30      	pop	{r4, r5, pc}
   80560:	00082821 	.word	0x00082821
   80564:	40094000 	.word	0x40094000
   80568:	0008230d 	.word	0x0008230d
   8056c:	000f3e58 	.word	0x000f3e58
   80570:	0501bd00 	.word	0x0501bd00
   80574:	0008218d 	.word	0x0008218d
   80578:	20078c50 	.word	0x20078c50
   8057c:	000821d9 	.word	0x000821d9
   80580:	00082305 	.word	0x00082305

00080584 <PWMDutyCycle>:

void PWMDutyCycle(int value){
   80584:	b508      	push	{r3, lr}
   80586:	4602      	mov	r2, r0
	pwm_channel_update_duty(PWM, &pwm_channel, value);
   80588:	4802      	ldr	r0, [pc, #8]	; (80594 <PWMDutyCycle+0x10>)
   8058a:	4903      	ldr	r1, [pc, #12]	; (80598 <PWMDutyCycle+0x14>)
   8058c:	4b03      	ldr	r3, [pc, #12]	; (8059c <PWMDutyCycle+0x18>)
   8058e:	4798      	blx	r3
   80590:	bd08      	pop	{r3, pc}
   80592:	bf00      	nop
   80594:	40094000 	.word	0x40094000
   80598:	20078c50 	.word	0x20078c50
   8059c:	000822e1 	.word	0x000822e1

000805a0 <shieldInit>:
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   805a0:	4b07      	ldr	r3, [pc, #28]	; (805c0 <shieldInit+0x20>)
   805a2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   805a6:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   805a8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   805ac:	635a      	str	r2, [r3, #52]	; 0x34
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   805ae:	f503 7300 	add.w	r3, r3, #512	; 0x200
   805b2:	f44f 7280 	mov.w	r2, #256	; 0x100
   805b6:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   805b8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   805bc:	631a      	str	r2, [r3, #48]	; 0x30
   805be:	4770      	bx	lr
   805c0:	400e1200 	.word	0x400e1200

000805c4 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
   805c4:	b5f0      	push	{r4, r5, r6, r7, lr}
   805c6:	b083      	sub	sp, #12
   805c8:	4604      	mov	r4, r0
   805ca:	460d      	mov	r5, r1
	uint32_t val = 0;
   805cc:	2300      	movs	r3, #0
   805ce:	9301      	str	r3, [sp, #4]

	/* Avoid Cppcheck Warning */
	UNUSED(val);

#ifdef UART
	if (UART == (Uart*)p_usart) {
   805d0:	4b1f      	ldr	r3, [pc, #124]	; (80650 <usart_serial_getchar+0x8c>)
   805d2:	4298      	cmp	r0, r3
   805d4:	d107      	bne.n	805e6 <usart_serial_getchar+0x22>
		while (uart_read((Uart*)p_usart, data));
   805d6:	461f      	mov	r7, r3
   805d8:	4e1e      	ldr	r6, [pc, #120]	; (80654 <usart_serial_getchar+0x90>)
   805da:	4638      	mov	r0, r7
   805dc:	4629      	mov	r1, r5
   805de:	47b0      	blx	r6
   805e0:	2800      	cmp	r0, #0
   805e2:	d1fa      	bne.n	805da <usart_serial_getchar+0x16>
   805e4:	e019      	b.n	8061a <usart_serial_getchar+0x56>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   805e6:	4b1c      	ldr	r3, [pc, #112]	; (80658 <usart_serial_getchar+0x94>)
   805e8:	4298      	cmp	r0, r3
   805ea:	d109      	bne.n	80600 <usart_serial_getchar+0x3c>
		while (usart_read(p_usart, &val));
   805ec:	461f      	mov	r7, r3
   805ee:	4e1b      	ldr	r6, [pc, #108]	; (8065c <usart_serial_getchar+0x98>)
   805f0:	4638      	mov	r0, r7
   805f2:	a901      	add	r1, sp, #4
   805f4:	47b0      	blx	r6
   805f6:	2800      	cmp	r0, #0
   805f8:	d1fa      	bne.n	805f0 <usart_serial_getchar+0x2c>
		*data = (uint8_t)(val & 0xFF);
   805fa:	9b01      	ldr	r3, [sp, #4]
   805fc:	702b      	strb	r3, [r5, #0]
   805fe:	e019      	b.n	80634 <usart_serial_getchar+0x70>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   80600:	4b17      	ldr	r3, [pc, #92]	; (80660 <usart_serial_getchar+0x9c>)
   80602:	4298      	cmp	r0, r3
   80604:	d109      	bne.n	8061a <usart_serial_getchar+0x56>
		while (usart_read(p_usart, &val));
   80606:	461e      	mov	r6, r3
   80608:	4c14      	ldr	r4, [pc, #80]	; (8065c <usart_serial_getchar+0x98>)
   8060a:	4630      	mov	r0, r6
   8060c:	a901      	add	r1, sp, #4
   8060e:	47a0      	blx	r4
   80610:	2800      	cmp	r0, #0
   80612:	d1fa      	bne.n	8060a <usart_serial_getchar+0x46>
		*data = (uint8_t)(val & 0xFF);
   80614:	9b01      	ldr	r3, [sp, #4]
   80616:	702b      	strb	r3, [r5, #0]
   80618:	e018      	b.n	8064c <usart_serial_getchar+0x88>
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   8061a:	4b12      	ldr	r3, [pc, #72]	; (80664 <usart_serial_getchar+0xa0>)
   8061c:	429c      	cmp	r4, r3
   8061e:	d109      	bne.n	80634 <usart_serial_getchar+0x70>
		while (usart_read(p_usart, &val));
   80620:	461e      	mov	r6, r3
   80622:	4c0e      	ldr	r4, [pc, #56]	; (8065c <usart_serial_getchar+0x98>)
   80624:	4630      	mov	r0, r6
   80626:	a901      	add	r1, sp, #4
   80628:	47a0      	blx	r4
   8062a:	2800      	cmp	r0, #0
   8062c:	d1fa      	bne.n	80624 <usart_serial_getchar+0x60>
		*data = (uint8_t)(val & 0xFF);
   8062e:	9b01      	ldr	r3, [sp, #4]
   80630:	702b      	strb	r3, [r5, #0]
   80632:	e00b      	b.n	8064c <usart_serial_getchar+0x88>
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   80634:	4b0c      	ldr	r3, [pc, #48]	; (80668 <usart_serial_getchar+0xa4>)
   80636:	429c      	cmp	r4, r3
   80638:	d108      	bne.n	8064c <usart_serial_getchar+0x88>
		while (usart_read(p_usart, &val));
   8063a:	461e      	mov	r6, r3
   8063c:	4c07      	ldr	r4, [pc, #28]	; (8065c <usart_serial_getchar+0x98>)
   8063e:	4630      	mov	r0, r6
   80640:	a901      	add	r1, sp, #4
   80642:	47a0      	blx	r4
   80644:	2800      	cmp	r0, #0
   80646:	d1fa      	bne.n	8063e <usart_serial_getchar+0x7a>
		*data = (uint8_t)(val & 0xFF);
   80648:	9b01      	ldr	r3, [sp, #4]
   8064a:	702b      	strb	r3, [r5, #0]
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
   8064c:	b003      	add	sp, #12
   8064e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   80650:	400e0800 	.word	0x400e0800
   80654:	00082365 	.word	0x00082365
   80658:	40098000 	.word	0x40098000
   8065c:	0008034d 	.word	0x0008034d
   80660:	4009c000 	.word	0x4009c000
   80664:	400a0000 	.word	0x400a0000
   80668:	400a4000 	.word	0x400a4000

0008066c <usart_serial_putchar>:
 *   \retval 1  The character was written.
 *   \retval 0  The function timed out before the USART transmitter became
 * ready to send.
 */
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
   8066c:	b570      	push	{r4, r5, r6, lr}
   8066e:	460c      	mov	r4, r1
#ifdef UART
	if (UART == (Uart*)p_usart) {
   80670:	4b1e      	ldr	r3, [pc, #120]	; (806ec <usart_serial_putchar+0x80>)
   80672:	4298      	cmp	r0, r3
   80674:	d108      	bne.n	80688 <usart_serial_putchar+0x1c>
		while (uart_write((Uart*)p_usart, c)!=0);
   80676:	461e      	mov	r6, r3
   80678:	4d1d      	ldr	r5, [pc, #116]	; (806f0 <usart_serial_putchar+0x84>)
   8067a:	4630      	mov	r0, r6
   8067c:	4621      	mov	r1, r4
   8067e:	47a8      	blx	r5
   80680:	2800      	cmp	r0, #0
   80682:	d1fa      	bne.n	8067a <usart_serial_putchar+0xe>
		return 1;
   80684:	2001      	movs	r0, #1
   80686:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   80688:	4b1a      	ldr	r3, [pc, #104]	; (806f4 <usart_serial_putchar+0x88>)
   8068a:	4298      	cmp	r0, r3
   8068c:	d108      	bne.n	806a0 <usart_serial_putchar+0x34>
		while (usart_write(p_usart, c)!=0);
   8068e:	461e      	mov	r6, r3
   80690:	4d19      	ldr	r5, [pc, #100]	; (806f8 <usart_serial_putchar+0x8c>)
   80692:	4630      	mov	r0, r6
   80694:	4621      	mov	r1, r4
   80696:	47a8      	blx	r5
   80698:	2800      	cmp	r0, #0
   8069a:	d1fa      	bne.n	80692 <usart_serial_putchar+0x26>
		return 1;
   8069c:	2001      	movs	r0, #1
   8069e:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   806a0:	4b16      	ldr	r3, [pc, #88]	; (806fc <usart_serial_putchar+0x90>)
   806a2:	4298      	cmp	r0, r3
   806a4:	d108      	bne.n	806b8 <usart_serial_putchar+0x4c>
		while (usart_write(p_usart, c)!=0);
   806a6:	461e      	mov	r6, r3
   806a8:	4d13      	ldr	r5, [pc, #76]	; (806f8 <usart_serial_putchar+0x8c>)
   806aa:	4630      	mov	r0, r6
   806ac:	4621      	mov	r1, r4
   806ae:	47a8      	blx	r5
   806b0:	2800      	cmp	r0, #0
   806b2:	d1fa      	bne.n	806aa <usart_serial_putchar+0x3e>
		return 1;
   806b4:	2001      	movs	r0, #1
   806b6:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   806b8:	4b11      	ldr	r3, [pc, #68]	; (80700 <usart_serial_putchar+0x94>)
   806ba:	4298      	cmp	r0, r3
   806bc:	d108      	bne.n	806d0 <usart_serial_putchar+0x64>
		while (usart_write(p_usart, c)!=0);
   806be:	461e      	mov	r6, r3
   806c0:	4d0d      	ldr	r5, [pc, #52]	; (806f8 <usart_serial_putchar+0x8c>)
   806c2:	4630      	mov	r0, r6
   806c4:	4621      	mov	r1, r4
   806c6:	47a8      	blx	r5
   806c8:	2800      	cmp	r0, #0
   806ca:	d1fa      	bne.n	806c2 <usart_serial_putchar+0x56>
		return 1;
   806cc:	2001      	movs	r0, #1
   806ce:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   806d0:	4b0c      	ldr	r3, [pc, #48]	; (80704 <usart_serial_putchar+0x98>)
   806d2:	4298      	cmp	r0, r3
   806d4:	d108      	bne.n	806e8 <usart_serial_putchar+0x7c>
		while (usart_write(p_usart, c)!=0);
   806d6:	461e      	mov	r6, r3
   806d8:	4d07      	ldr	r5, [pc, #28]	; (806f8 <usart_serial_putchar+0x8c>)
   806da:	4630      	mov	r0, r6
   806dc:	4621      	mov	r1, r4
   806de:	47a8      	blx	r5
   806e0:	2800      	cmp	r0, #0
   806e2:	d1fa      	bne.n	806da <usart_serial_putchar+0x6e>
		return 1;
   806e4:	2001      	movs	r0, #1
   806e6:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
	}
# endif
#endif /* ifdef USART */

	return 0;
   806e8:	2000      	movs	r0, #0
}
   806ea:	bd70      	pop	{r4, r5, r6, pc}
   806ec:	400e0800 	.word	0x400e0800
   806f0:	00082355 	.word	0x00082355
   806f4:	40098000 	.word	0x40098000
   806f8:	00080339 	.word	0x00080339
   806fc:	4009c000 	.word	0x4009c000
   80700:	400a0000 	.word	0x400a0000
   80704:	400a4000 	.word	0x400a4000

00080708 <configure_console>:
#include "UARTFunctions.h"
#include "uart.h"
#include "conf_uart_serial.h"
#include "global_variables.h"

void configure_console(void){
   80708:	b530      	push	{r4, r5, lr}
   8070a:	b085      	sub	sp, #20
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
   8070c:	2008      	movs	r0, #8
   8070e:	4d18      	ldr	r5, [pc, #96]	; (80770 <configure_console+0x68>)
   80710:	47a8      	blx	r5
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
   80712:	4c18      	ldr	r4, [pc, #96]	; (80774 <configure_console+0x6c>)
   80714:	4b18      	ldr	r3, [pc, #96]	; (80778 <configure_console+0x70>)
   80716:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
   80718:	4a18      	ldr	r2, [pc, #96]	; (8077c <configure_console+0x74>)
   8071a:	4b19      	ldr	r3, [pc, #100]	; (80780 <configure_console+0x78>)
   8071c:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
   8071e:	4a19      	ldr	r2, [pc, #100]	; (80784 <configure_console+0x7c>)
   80720:	4b19      	ldr	r3, [pc, #100]	; (80788 <configure_console+0x80>)
   80722:	601a      	str	r2, [r3, #0]
static inline void usart_serial_init(usart_if p_usart,
		usart_serial_options_t *opt)
{
#if ((!SAM4L) && (!SAMG55))
	sam_uart_opt_t uart_settings;
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
   80724:	4b19      	ldr	r3, [pc, #100]	; (8078c <configure_console+0x84>)
   80726:	9301      	str	r3, [sp, #4]
	uart_settings.ul_baudrate = opt->baudrate;
   80728:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
   8072c:	9302      	str	r3, [sp, #8]
	uart_settings.ul_mode = opt->paritytype;
   8072e:	f44f 6300 	mov.w	r3, #2048	; 0x800
   80732:	9303      	str	r3, [sp, #12]
   80734:	2008      	movs	r0, #8
   80736:	47a8      	blx	r5
	
#ifdef UART
	if (UART == (Uart*)p_usart) {
		sysclk_enable_peripheral_clock(ID_UART);
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
   80738:	4620      	mov	r0, r4
   8073a:	a901      	add	r1, sp, #4
   8073c:	4b14      	ldr	r3, [pc, #80]	; (80790 <configure_console+0x88>)
   8073e:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
   80740:	4d14      	ldr	r5, [pc, #80]	; (80794 <configure_console+0x8c>)
   80742:	682b      	ldr	r3, [r5, #0]
   80744:	6898      	ldr	r0, [r3, #8]
   80746:	2100      	movs	r1, #0
   80748:	4c13      	ldr	r4, [pc, #76]	; (80798 <configure_console+0x90>)
   8074a:	47a0      	blx	r4
	setbuf(stdin, NULL);
   8074c:	682b      	ldr	r3, [r5, #0]
   8074e:	6858      	ldr	r0, [r3, #4]
   80750:	2100      	movs	r1, #0
   80752:	47a0      	blx	r4
		ioport_port_mask_t mask, ioport_mode_t mode)
{
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
   80754:	4b11      	ldr	r3, [pc, #68]	; (8079c <configure_console+0x94>)
   80756:	f44f 7280 	mov.w	r2, #256	; 0x100
   8075a:	665a      	str	r2, [r3, #100]	; 0x64
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
   8075c:	655a      	str	r2, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
   8075e:	625a      	str	r2, [r3, #36]	; 0x24
#else
		base->PIO_IFSCER = mask;
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
   80760:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

#if !defined(IOPORT_MODE_MUX_BIT1)
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABSR |= mask;
	} else {
		base->PIO_ABSR &= ~mask;
   80764:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   80766:	f422 7280 	bic.w	r2, r2, #256	; 0x100
   8076a:	671a      	str	r2, [r3, #112]	; 0x70
	// Configure console UART.
	sysclk_enable_peripheral_clock(CONSOLE_UART_ID);
	stdio_serial_init(CONF_UART, &uart_serial_options);
	// configure RX0 pin as pull-up otherwise it won't receive anything (only receive 0)
	ioport_set_pin_mode(PIO_PA8_IDX, IOPORT_MODE_PULLUP);
}
   8076c:	b005      	add	sp, #20
   8076e:	bd30      	pop	{r4, r5, pc}
   80770:	00082821 	.word	0x00082821
   80774:	400e0800 	.word	0x400e0800
   80778:	20078c80 	.word	0x20078c80
   8077c:	0008066d 	.word	0x0008066d
   80780:	20078c7c 	.word	0x20078c7c
   80784:	000805c5 	.word	0x000805c5
   80788:	20078c78 	.word	0x20078c78
   8078c:	0501bd00 	.word	0x0501bd00
   80790:	00082315 	.word	0x00082315
   80794:	20070568 	.word	0x20070568
   80798:	00083561 	.word	0x00083561
   8079c:	400e0e00 	.word	0x400e0e00

000807a0 <getPIDValues>:

/* Function that receives values from Matlab */
void getPIDValues()
{
   807a0:	b570      	push	{r4, r5, r6, lr}
   807a2:	b084      	sub	sp, #16
	// divier which is used to decode encoded doubles sent from Matlab
	const uint8_t divider = 10;

	isMatlab = 0; // 1 for matlab, 0 for terminal debugging
   807a4:	2300      	movs	r3, #0
   807a6:	4a72      	ldr	r2, [pc, #456]	; (80970 <getPIDValues+0x1d0>)
   807a8:	7013      	strb	r3, [r2, #0]
	uint16_t kP_Gain_temp = 0;
   807aa:	f8ad 300e 	strh.w	r3, [sp, #14]
	uint16_t kP_Gain_temp2 = 0;
	uint16_t kI_Gain_temp = 0;
   807ae:	f8ad 300c 	strh.w	r3, [sp, #12]
	uint16_t kD_Gain_temp = 0;
   807b2:	f8ad 300a 	strh.w	r3, [sp, #10]
	uint16_t setPointCm = 0;
   807b6:	f8ad 3008 	strh.w	r3, [sp, #8]
	while (!uart_is_rx_ready (CONF_UART)){
   807ba:	4d6e      	ldr	r5, [pc, #440]	; (80974 <getPIDValues+0x1d4>)
   807bc:	4c6e      	ldr	r4, [pc, #440]	; (80978 <getPIDValues+0x1d8>)
		vTaskDelay(1);
   807be:	4e6f      	ldr	r6, [pc, #444]	; (8097c <getPIDValues+0x1dc>)
	uint16_t kP_Gain_temp = 0;
	uint16_t kP_Gain_temp2 = 0;
	uint16_t kI_Gain_temp = 0;
	uint16_t kD_Gain_temp = 0;
	uint16_t setPointCm = 0;
	while (!uart_is_rx_ready (CONF_UART)){
   807c0:	e001      	b.n	807c6 <getPIDValues+0x26>
		vTaskDelay(1);
   807c2:	2001      	movs	r0, #1
   807c4:	47b0      	blx	r6
	uint16_t kP_Gain_temp = 0;
	uint16_t kP_Gain_temp2 = 0;
	uint16_t kI_Gain_temp = 0;
	uint16_t kD_Gain_temp = 0;
	uint16_t setPointCm = 0;
	while (!uart_is_rx_ready (CONF_UART)){
   807c6:	4628      	mov	r0, r5
   807c8:	47a0      	blx	r4
   807ca:	2800      	cmp	r0, #0
   807cc:	d0f9      	beq.n	807c2 <getPIDValues+0x22>
		vTaskDelay(1);
	}
	uart_read(CONF_UART, &isMatlab);
   807ce:	4c68      	ldr	r4, [pc, #416]	; (80970 <getPIDValues+0x1d0>)
   807d0:	4868      	ldr	r0, [pc, #416]	; (80974 <getPIDValues+0x1d4>)
   807d2:	4621      	mov	r1, r4
   807d4:	4b6a      	ldr	r3, [pc, #424]	; (80980 <getPIDValues+0x1e0>)
   807d6:	4798      	blx	r3
	if(isMatlab == 48){ // Receive 48 because its char, 48 = 0
   807d8:	7823      	ldrb	r3, [r4, #0]
   807da:	2b30      	cmp	r3, #48	; 0x30
   807dc:	d125      	bne.n	8082a <getPIDValues+0x8a>
		isMatlab = 0; // save 0 to indicate is not Matlab COM
   807de:	2200      	movs	r2, #0
   807e0:	7022      	strb	r2, [r4, #0]
		printf("Terminal debugging enabled\n");
   807e2:	4868      	ldr	r0, [pc, #416]	; (80984 <getPIDValues+0x1e4>)
   807e4:	4c68      	ldr	r4, [pc, #416]	; (80988 <getPIDValues+0x1e8>)
   807e6:	47a0      	blx	r4
		// Set debugging values
		kP_Gain_temp = KP_GAIN_DEBUGGING;
   807e8:	233c      	movs	r3, #60	; 0x3c
   807ea:	f8ad 300e 	strh.w	r3, [sp, #14]
		kI_Gain_temp = KI_GAIN_DEBUGGING;
   807ee:	2209      	movs	r2, #9
   807f0:	f8ad 200c 	strh.w	r2, [sp, #12]
		kD_Gain_temp = KD_GAIN_DEBUGGING;
   807f4:	f8ad 300a 	strh.w	r3, [sp, #10]
		setPointCm = SETPOINT_DEBUGGING;
   807f8:	2314      	movs	r3, #20
   807fa:	f8ad 3008 	strh.w	r3, [sp, #8]
		printf("Preset values:\n");
   807fe:	4863      	ldr	r0, [pc, #396]	; (8098c <getPIDValues+0x1ec>)
   80800:	47a0      	blx	r4
		printf("kP: %u\n\r", (uint16_t)(kP_Gain_temp));
   80802:	4863      	ldr	r0, [pc, #396]	; (80990 <getPIDValues+0x1f0>)
   80804:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   80808:	47a0      	blx	r4
		printf("kI: %u\n\r", (uint16_t)(kI_Gain_temp));
   8080a:	4862      	ldr	r0, [pc, #392]	; (80994 <getPIDValues+0x1f4>)
   8080c:	f8bd 100c 	ldrh.w	r1, [sp, #12]
   80810:	47a0      	blx	r4
		printf("kD: %u\n\r", (uint16_t)(kD_Gain_temp));
   80812:	4861      	ldr	r0, [pc, #388]	; (80998 <getPIDValues+0x1f8>)
   80814:	f8bd 100a 	ldrh.w	r1, [sp, #10]
   80818:	47a0      	blx	r4
		printf("SetpointCm: %u\n\r", setPointCm);
   8081a:	4860      	ldr	r0, [pc, #384]	; (8099c <getPIDValues+0x1fc>)
   8081c:	f8bd 1008 	ldrh.w	r1, [sp, #8]
   80820:	47a0      	blx	r4
   80822:	e039      	b.n	80898 <getPIDValues+0xf8>
		} else {
		while (!uart_is_rx_ready (CONF_UART)){
			vTaskDelay(1);
   80824:	2001      	movs	r0, #1
   80826:	47b0      	blx	r6
   80828:	e002      	b.n	80830 <getPIDValues+0x90>
		printf("kP: %u\n\r", (uint16_t)(kP_Gain_temp));
		printf("kI: %u\n\r", (uint16_t)(kI_Gain_temp));
		printf("kD: %u\n\r", (uint16_t)(kD_Gain_temp));
		printf("SetpointCm: %u\n\r", setPointCm);
		} else {
		while (!uart_is_rx_ready (CONF_UART)){
   8082a:	4d52      	ldr	r5, [pc, #328]	; (80974 <getPIDValues+0x1d4>)
   8082c:	4c52      	ldr	r4, [pc, #328]	; (80978 <getPIDValues+0x1d8>)
			vTaskDelay(1);
   8082e:	4e53      	ldr	r6, [pc, #332]	; (8097c <getPIDValues+0x1dc>)
		printf("kP: %u\n\r", (uint16_t)(kP_Gain_temp));
		printf("kI: %u\n\r", (uint16_t)(kI_Gain_temp));
		printf("kD: %u\n\r", (uint16_t)(kD_Gain_temp));
		printf("SetpointCm: %u\n\r", setPointCm);
		} else {
		while (!uart_is_rx_ready (CONF_UART)){
   80830:	4628      	mov	r0, r5
   80832:	47a0      	blx	r4
   80834:	2800      	cmp	r0, #0
   80836:	d0f5      	beq.n	80824 <getPIDValues+0x84>
			vTaskDelay(1);
		}

		uart_read(CONF_UART, &kP_Gain_temp);
   80838:	484e      	ldr	r0, [pc, #312]	; (80974 <getPIDValues+0x1d4>)
   8083a:	f10d 010e 	add.w	r1, sp, #14
   8083e:	4b50      	ldr	r3, [pc, #320]	; (80980 <getPIDValues+0x1e0>)
   80840:	4798      	blx	r3
		while (!uart_is_rx_ready (CONF_UART)){
   80842:	4d4c      	ldr	r5, [pc, #304]	; (80974 <getPIDValues+0x1d4>)
   80844:	4c4c      	ldr	r4, [pc, #304]	; (80978 <getPIDValues+0x1d8>)
			vTaskDelay(1);
   80846:	4e4d      	ldr	r6, [pc, #308]	; (8097c <getPIDValues+0x1dc>)
		while (!uart_is_rx_ready (CONF_UART)){
			vTaskDelay(1);
		}

		uart_read(CONF_UART, &kP_Gain_temp);
		while (!uart_is_rx_ready (CONF_UART)){
   80848:	e001      	b.n	8084e <getPIDValues+0xae>
			vTaskDelay(1);
   8084a:	2001      	movs	r0, #1
   8084c:	47b0      	blx	r6
		while (!uart_is_rx_ready (CONF_UART)){
			vTaskDelay(1);
		}

		uart_read(CONF_UART, &kP_Gain_temp);
		while (!uart_is_rx_ready (CONF_UART)){
   8084e:	4628      	mov	r0, r5
   80850:	47a0      	blx	r4
   80852:	2800      	cmp	r0, #0
   80854:	d0f9      	beq.n	8084a <getPIDValues+0xaa>
			vTaskDelay(1);
		}
		uart_read(CONF_UART, &kI_Gain_temp);
   80856:	4847      	ldr	r0, [pc, #284]	; (80974 <getPIDValues+0x1d4>)
   80858:	a903      	add	r1, sp, #12
   8085a:	4b49      	ldr	r3, [pc, #292]	; (80980 <getPIDValues+0x1e0>)
   8085c:	4798      	blx	r3
		while (!uart_is_rx_ready (CONF_UART)){
   8085e:	4d45      	ldr	r5, [pc, #276]	; (80974 <getPIDValues+0x1d4>)
   80860:	4c45      	ldr	r4, [pc, #276]	; (80978 <getPIDValues+0x1d8>)
			vTaskDelay(1);
   80862:	4e46      	ldr	r6, [pc, #280]	; (8097c <getPIDValues+0x1dc>)
		uart_read(CONF_UART, &kP_Gain_temp);
		while (!uart_is_rx_ready (CONF_UART)){
			vTaskDelay(1);
		}
		uart_read(CONF_UART, &kI_Gain_temp);
		while (!uart_is_rx_ready (CONF_UART)){
   80864:	e001      	b.n	8086a <getPIDValues+0xca>
			vTaskDelay(1);
   80866:	2001      	movs	r0, #1
   80868:	47b0      	blx	r6
		uart_read(CONF_UART, &kP_Gain_temp);
		while (!uart_is_rx_ready (CONF_UART)){
			vTaskDelay(1);
		}
		uart_read(CONF_UART, &kI_Gain_temp);
		while (!uart_is_rx_ready (CONF_UART)){
   8086a:	4628      	mov	r0, r5
   8086c:	47a0      	blx	r4
   8086e:	2800      	cmp	r0, #0
   80870:	d0f9      	beq.n	80866 <getPIDValues+0xc6>
			vTaskDelay(1);
		};
		uart_read(CONF_UART, &kD_Gain_temp);
   80872:	4840      	ldr	r0, [pc, #256]	; (80974 <getPIDValues+0x1d4>)
   80874:	f10d 010a 	add.w	r1, sp, #10
   80878:	4b41      	ldr	r3, [pc, #260]	; (80980 <getPIDValues+0x1e0>)
   8087a:	4798      	blx	r3
		while (!uart_is_rx_ready (CONF_UART)){
   8087c:	4d3d      	ldr	r5, [pc, #244]	; (80974 <getPIDValues+0x1d4>)
   8087e:	4c3e      	ldr	r4, [pc, #248]	; (80978 <getPIDValues+0x1d8>)
			vTaskDelay(1);
   80880:	4e3e      	ldr	r6, [pc, #248]	; (8097c <getPIDValues+0x1dc>)
		uart_read(CONF_UART, &kI_Gain_temp);
		while (!uart_is_rx_ready (CONF_UART)){
			vTaskDelay(1);
		};
		uart_read(CONF_UART, &kD_Gain_temp);
		while (!uart_is_rx_ready (CONF_UART)){
   80882:	e001      	b.n	80888 <getPIDValues+0xe8>
			vTaskDelay(1);
   80884:	2001      	movs	r0, #1
   80886:	47b0      	blx	r6
		uart_read(CONF_UART, &kI_Gain_temp);
		while (!uart_is_rx_ready (CONF_UART)){
			vTaskDelay(1);
		};
		uart_read(CONF_UART, &kD_Gain_temp);
		while (!uart_is_rx_ready (CONF_UART)){
   80888:	4628      	mov	r0, r5
   8088a:	47a0      	blx	r4
   8088c:	2800      	cmp	r0, #0
   8088e:	d0f9      	beq.n	80884 <getPIDValues+0xe4>
			vTaskDelay(1);
		};
		uart_read(CONF_UART, &setPointCm);
   80890:	4838      	ldr	r0, [pc, #224]	; (80974 <getPIDValues+0x1d4>)
   80892:	a902      	add	r1, sp, #8
   80894:	4b3a      	ldr	r3, [pc, #232]	; (80980 <getPIDValues+0x1e0>)
   80896:	4798      	blx	r3
	}

	//Convert to correct data types
	kP_Gain = (double) ((double) kP_Gain_temp / divider);
   80898:	f8bd 000e 	ldrh.w	r0, [sp, #14]
   8089c:	4b40      	ldr	r3, [pc, #256]	; (809a0 <getPIDValues+0x200>)
   8089e:	4798      	blx	r3
   808a0:	2200      	movs	r2, #0
   808a2:	4b40      	ldr	r3, [pc, #256]	; (809a4 <getPIDValues+0x204>)
   808a4:	4c40      	ldr	r4, [pc, #256]	; (809a8 <getPIDValues+0x208>)
   808a6:	47a0      	blx	r4
   808a8:	4b40      	ldr	r3, [pc, #256]	; (809ac <getPIDValues+0x20c>)
   808aa:	e9c3 0100 	strd	r0, r1, [r3]
	kI_Gain = (double) (kI_Gain_temp / divider);
   808ae:	f8bd 000c 	ldrh.w	r0, [sp, #12]
   808b2:	4d3f      	ldr	r5, [pc, #252]	; (809b0 <getPIDValues+0x210>)
   808b4:	fb85 3000 	smull	r3, r0, r5, r0
   808b8:	4c3e      	ldr	r4, [pc, #248]	; (809b4 <getPIDValues+0x214>)
   808ba:	1080      	asrs	r0, r0, #2
   808bc:	47a0      	blx	r4
   808be:	4b3e      	ldr	r3, [pc, #248]	; (809b8 <getPIDValues+0x218>)
   808c0:	e9c3 0100 	strd	r0, r1, [r3]
	kD_Gain = (double) (kD_Gain_temp / divider);
   808c4:	f8bd 000a 	ldrh.w	r0, [sp, #10]
   808c8:	fb85 3000 	smull	r3, r0, r5, r0
   808cc:	1080      	asrs	r0, r0, #2
   808ce:	47a0      	blx	r4
   808d0:	4b3a      	ldr	r3, [pc, #232]	; (809bc <getPIDValues+0x21c>)
   808d2:	e9c3 0100 	strd	r0, r1, [r3]

	switch(setPointCm){
   808d6:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   808da:	3b0a      	subs	r3, #10
   808dc:	2b28      	cmp	r3, #40	; 0x28
   808de:	d82d      	bhi.n	8093c <getPIDValues+0x19c>
   808e0:	e8df f003 	tbb	[pc, r3]
   808e4:	2c2c2c15 	.word	0x2c2c2c15
   808e8:	2c2c2c2c 	.word	0x2c2c2c2c
   808ec:	2c1c2c2c 	.word	0x2c1c2c2c
   808f0:	2c2c2c2c 	.word	0x2c2c2c2c
   808f4:	2c2c2c2c 	.word	0x2c2c2c2c
   808f8:	2c2c2c20 	.word	0x2c2c2c20
   808fc:	2c2c2c2c 	.word	0x2c2c2c2c
   80900:	2c242c2c 	.word	0x2c242c2c
   80904:	2c2c2c2c 	.word	0x2c2c2c2c
   80908:	2c2c2c2c 	.word	0x2c2c2c2c
   8090c:	28          	.byte	0x28
   8090d:	00          	.byte	0x00
		case 10 :
		setPoint = setPointCm;
   8090e:	220a      	movs	r2, #10
   80910:	4b2b      	ldr	r3, [pc, #172]	; (809c0 <getPIDValues+0x220>)
   80912:	601a      	str	r2, [r3, #0]
		break;
		printf("Invalid distance\n");
	}

	// Wait here untill start signal is sent from matlab
	while (!uart_is_rx_ready (CONF_UART)){
   80914:	4d17      	ldr	r5, [pc, #92]	; (80974 <getPIDValues+0x1d4>)
   80916:	4c18      	ldr	r4, [pc, #96]	; (80978 <getPIDValues+0x1d8>)
		vTaskDelay(1);
   80918:	4e18      	ldr	r6, [pc, #96]	; (8097c <getPIDValues+0x1dc>)
   8091a:	e015      	b.n	80948 <getPIDValues+0x1a8>
		case 10 :
		setPoint = setPointCm;
		break;

		case 20:
		setPoint = setPointCm;
   8091c:	2214      	movs	r2, #20
   8091e:	4b28      	ldr	r3, [pc, #160]	; (809c0 <getPIDValues+0x220>)
   80920:	601a      	str	r2, [r3, #0]
		break;
   80922:	e7f7      	b.n	80914 <getPIDValues+0x174>

		case 30 :
		setPoint = setPointCm;
   80924:	221e      	movs	r2, #30
   80926:	4b26      	ldr	r3, [pc, #152]	; (809c0 <getPIDValues+0x220>)
   80928:	601a      	str	r2, [r3, #0]
		break;
   8092a:	e7f3      	b.n	80914 <getPIDValues+0x174>

		case 40 :
		setPoint = setPointCm;
   8092c:	2228      	movs	r2, #40	; 0x28
   8092e:	4b24      	ldr	r3, [pc, #144]	; (809c0 <getPIDValues+0x220>)
   80930:	601a      	str	r2, [r3, #0]
		break;
   80932:	e7ef      	b.n	80914 <getPIDValues+0x174>

		case 50 :
		setPoint = setPointCm;
   80934:	2232      	movs	r2, #50	; 0x32
   80936:	4b22      	ldr	r3, [pc, #136]	; (809c0 <getPIDValues+0x220>)
   80938:	601a      	str	r2, [r3, #0]
		break;
   8093a:	e7eb      	b.n	80914 <getPIDValues+0x174>

		default:
		setPoint = CENTIMETER_DEFAULT;
   8093c:	221e      	movs	r2, #30
   8093e:	4b20      	ldr	r3, [pc, #128]	; (809c0 <getPIDValues+0x220>)
   80940:	601a      	str	r2, [r3, #0]
		break;
   80942:	e7e7      	b.n	80914 <getPIDValues+0x174>
		printf("Invalid distance\n");
	}

	// Wait here untill start signal is sent from matlab
	while (!uart_is_rx_ready (CONF_UART)){
		vTaskDelay(1);
   80944:	2001      	movs	r0, #1
   80946:	47b0      	blx	r6
		break;
		printf("Invalid distance\n");
	}

	// Wait here untill start signal is sent from matlab
	while (!uart_is_rx_ready (CONF_UART)){
   80948:	4628      	mov	r0, r5
   8094a:	47a0      	blx	r4
   8094c:	2800      	cmp	r0, #0
   8094e:	d0f9      	beq.n	80944 <getPIDValues+0x1a4>
		vTaskDelay(1);
	};
	// Clear RX buffer
	while (uart_is_rx_ready (CONF_UART)){
   80950:	4c08      	ldr	r4, [pc, #32]	; (80974 <getPIDValues+0x1d4>)
   80952:	4d09      	ldr	r5, [pc, #36]	; (80978 <getPIDValues+0x1d8>)
		uint8_t clearBuffer = 0;
		uart_read(CONF_UART, &clearBuffer);
   80954:	4e0a      	ldr	r6, [pc, #40]	; (80980 <getPIDValues+0x1e0>)
   80956:	e005      	b.n	80964 <getPIDValues+0x1c4>
	while (!uart_is_rx_ready (CONF_UART)){
		vTaskDelay(1);
	};
	// Clear RX buffer
	while (uart_is_rx_ready (CONF_UART)){
		uint8_t clearBuffer = 0;
   80958:	a904      	add	r1, sp, #16
   8095a:	2300      	movs	r3, #0
   8095c:	f801 3d09 	strb.w	r3, [r1, #-9]!
		uart_read(CONF_UART, &clearBuffer);
   80960:	4620      	mov	r0, r4
   80962:	47b0      	blx	r6
	// Wait here untill start signal is sent from matlab
	while (!uart_is_rx_ready (CONF_UART)){
		vTaskDelay(1);
	};
	// Clear RX buffer
	while (uart_is_rx_ready (CONF_UART)){
   80964:	4620      	mov	r0, r4
   80966:	47a8      	blx	r5
   80968:	2800      	cmp	r0, #0
   8096a:	d1f5      	bne.n	80958 <getPIDValues+0x1b8>
		uint8_t clearBuffer = 0;
		uart_read(CONF_UART, &clearBuffer);
	};
}
   8096c:	b004      	add	sp, #16
   8096e:	bd70      	pop	{r4, r5, r6, pc}
   80970:	2007012c 	.word	0x2007012c
   80974:	400e0800 	.word	0x400e0800
   80978:	0008234d 	.word	0x0008234d
   8097c:	00081901 	.word	0x00081901
   80980:	00082365 	.word	0x00082365
   80984:	00086328 	.word	0x00086328
   80988:	000833b1 	.word	0x000833b1
   8098c:	00086344 	.word	0x00086344
   80990:	00086354 	.word	0x00086354
   80994:	00086360 	.word	0x00086360
   80998:	0008636c 	.word	0x0008636c
   8099c:	00086378 	.word	0x00086378
   809a0:	00082e01 	.word	0x00082e01
   809a4:	40240000 	.word	0x40240000
   809a8:	00083141 	.word	0x00083141
   809ac:	200709d8 	.word	0x200709d8
   809b0:	66666667 	.word	0x66666667
   809b4:	00082e21 	.word	0x00082e21
   809b8:	200709f0 	.word	0x200709f0
   809bc:	200709e0 	.word	0x200709e0
   809c0:	200709fc 	.word	0x200709fc

000809c4 <sendValues>:

/* Function that sends values to Matlab */
void sendValues(){
   809c4:	b538      	push	{r3, r4, r5, lr}
	if(!isMatlab){
   809c6:	4b0c      	ldr	r3, [pc, #48]	; (809f8 <sendValues+0x34>)
   809c8:	781b      	ldrb	r3, [r3, #0]
   809ca:	b913      	cbnz	r3, 809d2 <sendValues+0xe>
		printf("Values:\n");
   809cc:	480b      	ldr	r0, [pc, #44]	; (809fc <sendValues+0x38>)
   809ce:	4b0c      	ldr	r3, [pc, #48]	; (80a00 <sendValues+0x3c>)
   809d0:	4798      	blx	r3
	}
	printf("%i\n\r", error);
   809d2:	4d0c      	ldr	r5, [pc, #48]	; (80a04 <sendValues+0x40>)
   809d4:	4628      	mov	r0, r5
   809d6:	4b0c      	ldr	r3, [pc, #48]	; (80a08 <sendValues+0x44>)
   809d8:	6819      	ldr	r1, [r3, #0]
   809da:	4c09      	ldr	r4, [pc, #36]	; (80a00 <sendValues+0x3c>)
   809dc:	47a0      	blx	r4
	printf("%i\n\r", pwm_val);
   809de:	4628      	mov	r0, r5
   809e0:	4b0a      	ldr	r3, [pc, #40]	; (80a0c <sendValues+0x48>)
   809e2:	6819      	ldr	r1, [r3, #0]
   809e4:	47a0      	blx	r4
	printf("%i\n\r", distance);
   809e6:	4628      	mov	r0, r5
   809e8:	4b09      	ldr	r3, [pc, #36]	; (80a10 <sendValues+0x4c>)
   809ea:	6819      	ldr	r1, [r3, #0]
   809ec:	47a0      	blx	r4
	printf("%i\n\r", setPoint);
   809ee:	4628      	mov	r0, r5
   809f0:	4b08      	ldr	r3, [pc, #32]	; (80a14 <sendValues+0x50>)
   809f2:	6819      	ldr	r1, [r3, #0]
   809f4:	47a0      	blx	r4
   809f6:	bd38      	pop	{r3, r4, r5, pc}
   809f8:	2007012c 	.word	0x2007012c
   809fc:	0008638c 	.word	0x0008638c
   80a00:	000833b1 	.word	0x000833b1
   80a04:	00086398 	.word	0x00086398
   80a08:	200709d4 	.word	0x200709d4
   80a0c:	200709c8 	.word	0x200709c8
   80a10:	200709d0 	.word	0x200709d0
   80a14:	200709fc 	.word	0x200709fc

00080a18 <SerialComTask>:
#include "UARTFunctions.h"
#include "ADCCustom.h"
#include "testFunctions.h"

void SerialComTask (void *pvParameters)
{
   80a18:	b5f0      	push	{r4, r5, r6, r7, lr}
   80a1a:	b083      	sub	sp, #12
	getPIDValues(); // Get Values from Matlab
   80a1c:	4b10      	ldr	r3, [pc, #64]	; (80a60 <SerialComTask+0x48>)
   80a1e:	4798      	blx	r3

	xSemaphoreGive(sem); // Tell PID Task to start
   80a20:	4b10      	ldr	r3, [pc, #64]	; (80a64 <SerialComTask+0x4c>)
   80a22:	6818      	ldr	r0, [r3, #0]
   80a24:	2100      	movs	r1, #0
   80a26:	460a      	mov	r2, r1
   80a28:	460b      	mov	r3, r1
   80a2a:	4c0f      	ldr	r4, [pc, #60]	; (80a68 <SerialComTask+0x50>)
   80a2c:	47a0      	blx	r4

	for(;;){

		// Wait here for Matlab to send signal its ready to receive values
		while (!uart_is_rx_ready (CONF_UART)){
   80a2e:	4c0f      	ldr	r4, [pc, #60]	; (80a6c <SerialComTask+0x54>)
   80a30:	4d0f      	ldr	r5, [pc, #60]	; (80a70 <SerialComTask+0x58>)
		};

		// Clear RX buffer
		while (uart_is_rx_ready (CONF_UART)){
			uint8_t clearBuffer = 0;
			uart_read(CONF_UART, &clearBuffer);
   80a32:	4e10      	ldr	r6, [pc, #64]	; (80a74 <SerialComTask+0x5c>)
		};

		sendValues(); // Send values to MATLAB for graphing
   80a34:	4f10      	ldr	r7, [pc, #64]	; (80a78 <SerialComTask+0x60>)
   80a36:	e002      	b.n	80a3e <SerialComTask+0x26>

	for(;;){

		// Wait here for Matlab to send signal its ready to receive values
		while (!uart_is_rx_ready (CONF_UART)){
			vTaskDelay(1);
   80a38:	2001      	movs	r0, #1
   80a3a:	4b10      	ldr	r3, [pc, #64]	; (80a7c <SerialComTask+0x64>)
   80a3c:	4798      	blx	r3
	xSemaphoreGive(sem); // Tell PID Task to start

	for(;;){

		// Wait here for Matlab to send signal its ready to receive values
		while (!uart_is_rx_ready (CONF_UART)){
   80a3e:	4620      	mov	r0, r4
   80a40:	47a8      	blx	r5
   80a42:	2800      	cmp	r0, #0
   80a44:	d0f8      	beq.n	80a38 <SerialComTask+0x20>
   80a46:	e005      	b.n	80a54 <SerialComTask+0x3c>
			vTaskDelay(1);
		};

		// Clear RX buffer
		while (uart_is_rx_ready (CONF_UART)){
			uint8_t clearBuffer = 0;
   80a48:	a902      	add	r1, sp, #8
   80a4a:	2300      	movs	r3, #0
   80a4c:	f801 3d01 	strb.w	r3, [r1, #-1]!
			uart_read(CONF_UART, &clearBuffer);
   80a50:	4620      	mov	r0, r4
   80a52:	47b0      	blx	r6
		while (!uart_is_rx_ready (CONF_UART)){
			vTaskDelay(1);
		};

		// Clear RX buffer
		while (uart_is_rx_ready (CONF_UART)){
   80a54:	4620      	mov	r0, r4
   80a56:	47a8      	blx	r5
   80a58:	2800      	cmp	r0, #0
   80a5a:	d1f5      	bne.n	80a48 <SerialComTask+0x30>
			uint8_t clearBuffer = 0;
			uart_read(CONF_UART, &clearBuffer);
		};

		sendValues(); // Send values to MATLAB for graphing
   80a5c:	47b8      	blx	r7
	}
   80a5e:	e7ee      	b.n	80a3e <SerialComTask+0x26>
   80a60:	000807a1 	.word	0x000807a1
   80a64:	200709c4 	.word	0x200709c4
   80a68:	00080fd5 	.word	0x00080fd5
   80a6c:	400e0800 	.word	0x400e0800
   80a70:	0008234d 	.word	0x0008234d
   80a74:	00082365 	.word	0x00082365
   80a78:	000809c5 	.word	0x000809c5
   80a7c:	00081901 	.word	0x00081901

00080a80 <vListInitialise>:
void vListInitialise( xList *pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
   80a80:	f100 0308 	add.w	r3, r0, #8
   80a84:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
   80a86:	f64f 72ff 	movw	r2, #65535	; 0xffff
   80a8a:	8102      	strh	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
   80a8c:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
   80a8e:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
   80a90:	2300      	movs	r3, #0
   80a92:	6003      	str	r3, [r0, #0]
   80a94:	4770      	bx	lr
   80a96:	bf00      	nop

00080a98 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
   80a98:	2300      	movs	r3, #0
   80a9a:	6103      	str	r3, [r0, #16]
   80a9c:	4770      	bx	lr
   80a9e:	bf00      	nop

00080aa0 <vListInsertEnd>:

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
   80aa0:	6843      	ldr	r3, [r0, #4]

	pxNewListItem->pxNext = pxIndex->pxNext;
   80aa2:	685a      	ldr	r2, [r3, #4]
   80aa4:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxPrevious = pxList->pxIndex;
   80aa6:	6842      	ldr	r2, [r0, #4]
   80aa8:	608a      	str	r2, [r1, #8]
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
   80aaa:	685a      	ldr	r2, [r3, #4]
   80aac:	6091      	str	r1, [r2, #8]
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
   80aae:	6059      	str	r1, [r3, #4]
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
   80ab0:	6041      	str	r1, [r0, #4]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   80ab2:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
   80ab4:	6803      	ldr	r3, [r0, #0]
   80ab6:	3301      	adds	r3, #1
   80ab8:	6003      	str	r3, [r0, #0]
   80aba:	4770      	bx	lr

00080abc <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
   80abc:	b410      	push	{r4}
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
   80abe:	880c      	ldrh	r4, [r1, #0]
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
   80ac0:	f64f 73ff 	movw	r3, #65535	; 0xffff
   80ac4:	429c      	cmp	r4, r3
   80ac6:	d101      	bne.n	80acc <vListInsert+0x10>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
   80ac8:	6902      	ldr	r2, [r0, #16]
   80aca:	e00c      	b.n	80ae6 <vListInsert+0x2a>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/

		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
   80acc:	f100 0208 	add.w	r2, r0, #8
   80ad0:	68c3      	ldr	r3, [r0, #12]
   80ad2:	881b      	ldrh	r3, [r3, #0]
   80ad4:	b29b      	uxth	r3, r3
   80ad6:	429c      	cmp	r4, r3
   80ad8:	d305      	bcc.n	80ae6 <vListInsert+0x2a>
   80ada:	6852      	ldr	r2, [r2, #4]
   80adc:	6853      	ldr	r3, [r2, #4]
   80ade:	881b      	ldrh	r3, [r3, #0]
   80ae0:	b29b      	uxth	r3, r3
   80ae2:	429c      	cmp	r4, r3
   80ae4:	d2f9      	bcs.n	80ada <vListInsert+0x1e>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
   80ae6:	6853      	ldr	r3, [r2, #4]
   80ae8:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
   80aea:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
   80aec:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
   80aee:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   80af0:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
   80af2:	6803      	ldr	r3, [r0, #0]
   80af4:	3301      	adds	r3, #1
   80af6:	6003      	str	r3, [r0, #0]
}
   80af8:	f85d 4b04 	ldr.w	r4, [sp], #4
   80afc:	4770      	bx	lr
   80afe:	bf00      	nop

00080b00 <uxListRemove>:

unsigned portBASE_TYPE uxListRemove( xListItem *pxItemToRemove )
{
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
   80b00:	6843      	ldr	r3, [r0, #4]
   80b02:	6882      	ldr	r2, [r0, #8]
   80b04:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
   80b06:	6883      	ldr	r3, [r0, #8]
   80b08:	6842      	ldr	r2, [r0, #4]
   80b0a:	605a      	str	r2, [r3, #4]

	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
   80b0c:	6903      	ldr	r3, [r0, #16]

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
   80b0e:	685a      	ldr	r2, [r3, #4]
   80b10:	4282      	cmp	r2, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
   80b12:	bf04      	itt	eq
   80b14:	6882      	ldreq	r2, [r0, #8]
   80b16:	605a      	streq	r2, [r3, #4]
	}

	pxItemToRemove->pvContainer = NULL;
   80b18:	2200      	movs	r2, #0
   80b1a:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
   80b1c:	681a      	ldr	r2, [r3, #0]
   80b1e:	3a01      	subs	r2, #1
   80b20:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
   80b22:	6818      	ldr	r0, [r3, #0]
}
   80b24:	4770      	bx	lr
   80b26:	bf00      	nop

00080b28 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
   80b28:	4803      	ldr	r0, [pc, #12]	; (80b38 <prvPortStartFirstTask+0x10>)
   80b2a:	6800      	ldr	r0, [r0, #0]
   80b2c:	6800      	ldr	r0, [r0, #0]
   80b2e:	f380 8808 	msr	MSP, r0
   80b32:	b662      	cpsie	i
   80b34:	df00      	svc	0
   80b36:	bf00      	nop
   80b38:	e000ed08 	.word	0xe000ed08

00080b3c <pxPortInitialiseStack>:
portSTACK_TYPE *pxPortInitialiseStack( portSTACK_TYPE *pxTopOfStack, pdTASK_CODE pxCode, void *pvParameters )
{
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
   80b3c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   80b40:	f840 3c04 	str.w	r3, [r0, #-4]
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) pxCode;	/* PC */
   80b44:	f840 1c08 	str.w	r1, [r0, #-8]
	pxTopOfStack--;
	*pxTopOfStack = 0;	/* LR */
   80b48:	2300      	movs	r3, #0
   80b4a:	f840 3c0c 	str.w	r3, [r0, #-12]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
	*pxTopOfStack = ( portSTACK_TYPE ) pvParameters;	/* R0 */
   80b4e:	f840 2c20 	str.w	r2, [r0, #-32]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */

	return pxTopOfStack;
}
   80b52:	3840      	subs	r0, #64	; 0x40
   80b54:	4770      	bx	lr
   80b56:	bf00      	nop

00080b58 <SVC_Handler>:
/*-----------------------------------------------------------*/

__attribute__ (( naked )) void SVC_Handler( void )
{
	__asm volatile (
   80b58:	4b06      	ldr	r3, [pc, #24]	; (80b74 <pxCurrentTCBConst2>)
   80b5a:	6819      	ldr	r1, [r3, #0]
   80b5c:	6808      	ldr	r0, [r1, #0]
   80b5e:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   80b62:	f380 8809 	msr	PSP, r0
   80b66:	f04f 0000 	mov.w	r0, #0
   80b6a:	f380 8811 	msr	BASEPRI, r0
   80b6e:	f04e 0e0d 	orr.w	lr, lr, #13
   80b72:	4770      	bx	lr

00080b74 <pxCurrentTCBConst2>:
   80b74:	20078b3c 	.word	0x20078b3c

00080b78 <vPortYieldFromISR>:
/*-----------------------------------------------------------*/

void vPortYieldFromISR( void )
{
	/* Set a PendSV to request a context switch. */
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
   80b78:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   80b7c:	4b01      	ldr	r3, [pc, #4]	; (80b84 <vPortYieldFromISR+0xc>)
   80b7e:	601a      	str	r2, [r3, #0]
   80b80:	4770      	bx	lr
   80b82:	bf00      	nop
   80b84:	e000ed04 	.word	0xe000ed04

00080b88 <ulPortSetInterruptMask>:
}
/*-----------------------------------------------------------*/

__attribute__(( naked )) unsigned long ulPortSetInterruptMask( void )
{
	__asm volatile														\
   80b88:	f3ef 8011 	mrs	r0, BASEPRI
   80b8c:	f04f 01a0 	mov.w	r1, #160	; 0xa0
   80b90:	f381 8811 	msr	BASEPRI, r1
   80b94:	4770      	bx	lr
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return 0;
}
   80b96:	2000      	movs	r0, #0

00080b98 <vPortEnterCritical>:
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
   80b98:	b508      	push	{r3, lr}
	portDISABLE_INTERRUPTS();
   80b9a:	4b03      	ldr	r3, [pc, #12]	; (80ba8 <vPortEnterCritical+0x10>)
   80b9c:	4798      	blx	r3
	uxCriticalNesting++;
   80b9e:	4a03      	ldr	r2, [pc, #12]	; (80bac <vPortEnterCritical+0x14>)
   80ba0:	6813      	ldr	r3, [r2, #0]
   80ba2:	3301      	adds	r3, #1
   80ba4:	6013      	str	r3, [r2, #0]
   80ba6:	bd08      	pop	{r3, pc}
   80ba8:	00080b89 	.word	0x00080b89
   80bac:	20070130 	.word	0x20070130

00080bb0 <vPortClearInterruptMask>:
}
/*-----------------------------------------------------------*/

__attribute__(( naked )) void vPortClearInterruptMask( unsigned long ulNewMaskValue )
{
	__asm volatile													\
   80bb0:	f380 8811 	msr	BASEPRI, r0
   80bb4:	4770      	bx	lr
   80bb6:	bf00      	nop

00080bb8 <vPortExitCritical>:
	uxCriticalNesting++;
}
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
   80bb8:	b508      	push	{r3, lr}
	uxCriticalNesting--;
   80bba:	4a04      	ldr	r2, [pc, #16]	; (80bcc <vPortExitCritical+0x14>)
   80bbc:	6813      	ldr	r3, [r2, #0]
   80bbe:	3b01      	subs	r3, #1
   80bc0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
   80bc2:	b913      	cbnz	r3, 80bca <vPortExitCritical+0x12>
	{
		portENABLE_INTERRUPTS();
   80bc4:	2000      	movs	r0, #0
   80bc6:	4b02      	ldr	r3, [pc, #8]	; (80bd0 <vPortExitCritical+0x18>)
   80bc8:	4798      	blx	r3
   80bca:	bd08      	pop	{r3, pc}
   80bcc:	20070130 	.word	0x20070130
   80bd0:	00080bb1 	.word	0x00080bb1

00080bd4 <PendSV_Handler>:

__attribute__(( naked )) void PendSV_Handler( void )
{
	/* This is a naked function. */

	__asm volatile
   80bd4:	f3ef 8009 	mrs	r0, PSP
   80bd8:	4b0c      	ldr	r3, [pc, #48]	; (80c0c <pxCurrentTCBConst>)
   80bda:	681a      	ldr	r2, [r3, #0]
   80bdc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   80be0:	6010      	str	r0, [r2, #0]
   80be2:	e92d 4008 	stmdb	sp!, {r3, lr}
   80be6:	f04f 00a0 	mov.w	r0, #160	; 0xa0
   80bea:	f380 8811 	msr	BASEPRI, r0
   80bee:	f000 feef 	bl	819d0 <vTaskSwitchContext>
   80bf2:	f04f 0000 	mov.w	r0, #0
   80bf6:	f380 8811 	msr	BASEPRI, r0
   80bfa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   80bfe:	6819      	ldr	r1, [r3, #0]
   80c00:	6808      	ldr	r0, [r1, #0]
   80c02:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   80c06:	f380 8809 	msr	PSP, r0
   80c0a:	4770      	bx	lr

00080c0c <pxCurrentTCBConst>:
   80c0c:	20078b3c 	.word	0x20078b3c

00080c10 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void SysTick_Handler( void )
{
   80c10:	b508      	push	{r3, lr}
	/* If using preemption, also force a context switch. */
	#if configUSE_PREEMPTION == 1
		portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
   80c12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   80c16:	4b05      	ldr	r3, [pc, #20]	; (80c2c <SysTick_Handler+0x1c>)
   80c18:	601a      	str	r2, [r3, #0]
	to generate the tick interrupt. */
	#if configUSE_TICKLESS_IDLE == 1
		portNVIC_SYSTICK_LOAD_REG = ulTimerReloadValueForOneTick;
	#endif

	( void ) portSET_INTERRUPT_MASK_FROM_ISR();
   80c1a:	4b05      	ldr	r3, [pc, #20]	; (80c30 <SysTick_Handler+0x20>)
   80c1c:	4798      	blx	r3
	{
		vTaskIncrementTick();
   80c1e:	4b05      	ldr	r3, [pc, #20]	; (80c34 <SysTick_Handler+0x24>)
   80c20:	4798      	blx	r3
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( 0 );
   80c22:	2000      	movs	r0, #0
   80c24:	4b04      	ldr	r3, [pc, #16]	; (80c38 <SysTick_Handler+0x28>)
   80c26:	4798      	blx	r3
   80c28:	bd08      	pop	{r3, pc}
   80c2a:	bf00      	nop
   80c2c:	e000ed04 	.word	0xe000ed04
   80c30:	00080b89 	.word	0x00080b89
   80c34:	00081639 	.word	0x00081639
   80c38:	00080bb1 	.word	0x00080bb1

00080c3c <vPortSetupTimerInterrupt>:
		ulStoppedTimerCompensation = 45UL / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;;
   80c3c:	4a03      	ldr	r2, [pc, #12]	; (80c4c <vPortSetupTimerInterrupt+0x10>)
   80c3e:	4b04      	ldr	r3, [pc, #16]	; (80c50 <vPortSetupTimerInterrupt+0x14>)
   80c40:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
   80c42:	2207      	movs	r2, #7
   80c44:	3b04      	subs	r3, #4
   80c46:	601a      	str	r2, [r3, #0]
   80c48:	4770      	bx	lr
   80c4a:	bf00      	nop
   80c4c:	0001481f 	.word	0x0001481f
   80c50:	e000e014 	.word	0xe000e014

00080c54 <xPortStartScheduler>:

/*
 * See header file for description.
 */
portBASE_TYPE xPortStartScheduler( void )
{
   80c54:	b510      	push	{r4, lr}
	/* configMAX_SYSCALL_INTERRUPT_PRIORITY must not be set to 0.
	See http://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
   80c56:	4b09      	ldr	r3, [pc, #36]	; (80c7c <xPortStartScheduler+0x28>)
   80c58:	681a      	ldr	r2, [r3, #0]
   80c5a:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
   80c5e:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
   80c60:	681a      	ldr	r2, [r3, #0]
   80c62:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
   80c66:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
   80c68:	4b05      	ldr	r3, [pc, #20]	; (80c80 <xPortStartScheduler+0x2c>)
   80c6a:	4798      	blx	r3

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
   80c6c:	2400      	movs	r4, #0
   80c6e:	4b05      	ldr	r3, [pc, #20]	; (80c84 <xPortStartScheduler+0x30>)
   80c70:	601c      	str	r4, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
   80c72:	4b05      	ldr	r3, [pc, #20]	; (80c88 <xPortStartScheduler+0x34>)
   80c74:	4798      	blx	r3

	/* Should not get here! */
	return 0;
}
   80c76:	4620      	mov	r0, r4
   80c78:	bd10      	pop	{r4, pc}
   80c7a:	bf00      	nop
   80c7c:	e000ed20 	.word	0xe000ed20
   80c80:	00080c3d 	.word	0x00080c3d
   80c84:	20070130 	.word	0x20070130
   80c88:	00080b29 	.word	0x00080b29

00080c8c <prvInsertBlockIntoFreeList>:
xBlockLink *pxIterator;
unsigned char *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
   80c8c:	4a13      	ldr	r2, [pc, #76]	; (80cdc <prvInsertBlockIntoFreeList+0x50>)
   80c8e:	e000      	b.n	80c92 <prvInsertBlockIntoFreeList+0x6>
   80c90:	461a      	mov	r2, r3
   80c92:	6813      	ldr	r3, [r2, #0]
   80c94:	4283      	cmp	r3, r0
   80c96:	d3fb      	bcc.n	80c90 <prvInsertBlockIntoFreeList+0x4>
	xFreeBytesRemaining -= heapSTRUCT_SIZE;
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( xBlockLink *pxBlockToInsert )
{
   80c98:	b430      	push	{r4, r5}
   80c9a:	4611      	mov	r1, r2
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */	
	puc = ( unsigned char * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( unsigned char * ) pxBlockToInsert )
   80c9c:	6854      	ldr	r4, [r2, #4]
   80c9e:	1915      	adds	r5, r2, r4
   80ca0:	4285      	cmp	r5, r0
   80ca2:	d103      	bne.n	80cac <prvInsertBlockIntoFreeList+0x20>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
   80ca4:	6868      	ldr	r0, [r5, #4]
   80ca6:	4404      	add	r4, r0
   80ca8:	6054      	str	r4, [r2, #4]
   80caa:	4610      	mov	r0, r2
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( unsigned char * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( unsigned char * ) pxIterator->pxNextFreeBlock )
   80cac:	6842      	ldr	r2, [r0, #4]
   80cae:	1884      	adds	r4, r0, r2
   80cb0:	429c      	cmp	r4, r3
   80cb2:	d10c      	bne.n	80cce <prvInsertBlockIntoFreeList+0x42>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
   80cb4:	4b0a      	ldr	r3, [pc, #40]	; (80ce0 <prvInsertBlockIntoFreeList+0x54>)
   80cb6:	681b      	ldr	r3, [r3, #0]
   80cb8:	429c      	cmp	r4, r3
   80cba:	d006      	beq.n	80cca <prvInsertBlockIntoFreeList+0x3e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
   80cbc:	6863      	ldr	r3, [r4, #4]
   80cbe:	441a      	add	r2, r3
   80cc0:	6042      	str	r2, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
   80cc2:	680b      	ldr	r3, [r1, #0]
   80cc4:	681b      	ldr	r3, [r3, #0]
   80cc6:	6003      	str	r3, [r0, #0]
   80cc8:	e002      	b.n	80cd0 <prvInsertBlockIntoFreeList+0x44>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
   80cca:	6004      	str	r4, [r0, #0]
   80ccc:	e000      	b.n	80cd0 <prvInsertBlockIntoFreeList+0x44>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;		
   80cce:	6003      	str	r3, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
   80cd0:	4281      	cmp	r1, r0
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
   80cd2:	bf18      	it	ne
   80cd4:	6008      	strne	r0, [r1, #0]
	}
}
   80cd6:	bc30      	pop	{r4, r5}
   80cd8:	4770      	bx	lr
   80cda:	bf00      	nop
   80cdc:	20078a04 	.word	0x20078a04
   80ce0:	20078a00 	.word	0x20078a00

00080ce4 <pvPortMalloc>:
/* STATIC FUNCTIONS ARE DEFINED AS MACROS TO MINIMIZE THE FUNCTION CALL DEPTH. */

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
   80ce4:	b538      	push	{r3, r4, r5, lr}
   80ce6:	4604      	mov	r4, r0
xBlockLink *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;

	vTaskSuspendAll();
   80ce8:	4b29      	ldr	r3, [pc, #164]	; (80d90 <pvPortMalloc+0xac>)
   80cea:	4798      	blx	r3
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
   80cec:	4b29      	ldr	r3, [pc, #164]	; (80d94 <pvPortMalloc+0xb0>)
   80cee:	681b      	ldr	r3, [r3, #0]
   80cf0:	b99b      	cbnz	r3, 80d1a <pvPortMalloc+0x36>
	/* Ensure the start of the heap is aligned. */
	configASSERT( ( ( ( unsigned long ) xHeap.ucHeap ) & ( ( unsigned long ) portBYTE_ALIGNMENT_MASK ) ) == 0UL );

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) xHeap.ucHeap;
   80cf2:	4a29      	ldr	r2, [pc, #164]	; (80d98 <pvPortMalloc+0xb4>)
   80cf4:	4b29      	ldr	r3, [pc, #164]	; (80d9c <pvPortMalloc+0xb8>)
   80cf6:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
   80cf8:	2100      	movs	r1, #0
   80cfa:	6051      	str	r1, [r2, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	pucHeapEnd = xHeap.ucHeap + xTotalHeapSize;
	pucHeapEnd -= heapSTRUCT_SIZE;
	pxEnd = ( void * ) pucHeapEnd;
   80cfc:	f647 72f0 	movw	r2, #32752	; 0x7ff0
   80d00:	1898      	adds	r0, r3, r2
   80d02:	4d24      	ldr	r5, [pc, #144]	; (80d94 <pvPortMalloc+0xb0>)
   80d04:	6028      	str	r0, [r5, #0]
	configASSERT( ( ( ( unsigned long ) pxEnd ) & ( ( unsigned long ) portBYTE_ALIGNMENT_MASK ) ) == 0UL );
	pxEnd->xBlockSize = 0;
   80d06:	f647 75f4 	movw	r5, #32756	; 0x7ff4
   80d0a:	5159      	str	r1, [r3, r5]
	pxEnd->pxNextFreeBlock = NULL;
   80d0c:	5099      	str	r1, [r3, r2]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) xHeap.ucHeap;
	pxFirstFreeBlock->xBlockSize = xTotalHeapSize - heapSTRUCT_SIZE;
   80d0e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
   80d10:	6018      	str	r0, [r3, #0]

	/* The heap now contains pxEnd. */
	xFreeBytesRemaining -= heapSTRUCT_SIZE;
   80d12:	4a23      	ldr	r2, [pc, #140]	; (80da0 <pvPortMalloc+0xbc>)
   80d14:	6813      	ldr	r3, [r2, #0]
   80d16:	3b10      	subs	r3, #16
   80d18:	6013      	str	r3, [r2, #0]
			prvHeapInit();
		}

		/* The wanted size is increased so it can contain a xBlockLink
		structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
   80d1a:	2c00      	cmp	r4, #0
   80d1c:	d02e      	beq.n	80d7c <pvPortMalloc+0x98>
		{
			xWantedSize += heapSTRUCT_SIZE;
   80d1e:	f104 0210 	add.w	r2, r4, #16

			/* Ensure that blocks are always aligned to the required number of 
			bytes. */
			if( xWantedSize & portBYTE_ALIGNMENT_MASK )
   80d22:	f012 0f07 	tst.w	r2, #7
			{
				/* Byte alignment required. */
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
   80d26:	bf1c      	itt	ne
   80d28:	f022 0207 	bicne.w	r2, r2, #7
   80d2c:	3208      	addne	r2, #8
			}
		}

		if( ( xWantedSize > 0 ) && ( xWantedSize < xTotalHeapSize ) )
   80d2e:	1e51      	subs	r1, r2, #1
   80d30:	f647 73fe 	movw	r3, #32766	; 0x7ffe
   80d34:	4299      	cmp	r1, r3
   80d36:	d823      	bhi.n	80d80 <pvPortMalloc+0x9c>
		{
			/* Traverse the list from the start	(lowest address) block until one
			of adequate size is found. */
			pxPreviousBlock = &xStart;
			pxBlock = xStart.pxNextFreeBlock;
   80d38:	4917      	ldr	r1, [pc, #92]	; (80d98 <pvPortMalloc+0xb4>)
   80d3a:	680c      	ldr	r4, [r1, #0]
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
   80d3c:	e001      	b.n	80d42 <pvPortMalloc+0x5e>
   80d3e:	4621      	mov	r1, r4
			{
				pxPreviousBlock = pxBlock;
				pxBlock = pxBlock->pxNextFreeBlock;
   80d40:	461c      	mov	r4, r3
		{
			/* Traverse the list from the start	(lowest address) block until one
			of adequate size is found. */
			pxPreviousBlock = &xStart;
			pxBlock = xStart.pxNextFreeBlock;
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
   80d42:	6863      	ldr	r3, [r4, #4]
   80d44:	429a      	cmp	r2, r3
   80d46:	d902      	bls.n	80d4e <pvPortMalloc+0x6a>
   80d48:	6823      	ldr	r3, [r4, #0]
   80d4a:	2b00      	cmp	r3, #0
   80d4c:	d1f7      	bne.n	80d3e <pvPortMalloc+0x5a>
				pxBlock = pxBlock->pxNextFreeBlock;
			}

			/* If the end marker was reached then a block of adequate size was
			not found. */
			if( pxBlock != pxEnd )
   80d4e:	4b11      	ldr	r3, [pc, #68]	; (80d94 <pvPortMalloc+0xb0>)
   80d50:	681b      	ldr	r3, [r3, #0]
   80d52:	429c      	cmp	r4, r3
   80d54:	d016      	beq.n	80d84 <pvPortMalloc+0xa0>
			{
				/* Return the memory space - jumping over the xBlockLink structure
				at its start. */
				pvReturn = ( void * ) ( ( ( unsigned char * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
   80d56:	680d      	ldr	r5, [r1, #0]
   80d58:	3510      	adds	r5, #16

				/* This block is being returned for use so must be taken out of
				the	list of free blocks. */
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
   80d5a:	6823      	ldr	r3, [r4, #0]
   80d5c:	600b      	str	r3, [r1, #0]

				/* If the block is larger than required it can be split into two. */
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
   80d5e:	6863      	ldr	r3, [r4, #4]
   80d60:	1a9b      	subs	r3, r3, r2
   80d62:	2b20      	cmp	r3, #32
   80d64:	d904      	bls.n	80d70 <pvPortMalloc+0x8c>
				{
					/* This block is to be split into two.  Create a new block
					following the number of bytes requested. The void cast is
					used to prevent byte alignment warnings from the compiler. */
					pxNewBlockLink = ( void * ) ( ( ( unsigned char * ) pxBlock ) + xWantedSize );
   80d66:	18a0      	adds	r0, r4, r2

					/* Calculate the sizes of two blocks split from the single
					block. */
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
   80d68:	6043      	str	r3, [r0, #4]
					pxBlock->xBlockSize = xWantedSize;
   80d6a:	6062      	str	r2, [r4, #4]

					/* Insert the new block into the list of free blocks. */
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
   80d6c:	4b0d      	ldr	r3, [pc, #52]	; (80da4 <pvPortMalloc+0xc0>)
   80d6e:	4798      	blx	r3
				}

				xFreeBytesRemaining -= pxBlock->xBlockSize;
   80d70:	4a0b      	ldr	r2, [pc, #44]	; (80da0 <pvPortMalloc+0xbc>)
   80d72:	6813      	ldr	r3, [r2, #0]
   80d74:	6861      	ldr	r1, [r4, #4]
   80d76:	1a5b      	subs	r3, r3, r1
   80d78:	6013      	str	r3, [r2, #0]
   80d7a:	e004      	b.n	80d86 <pvPortMalloc+0xa2>
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
xBlockLink *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
   80d7c:	2500      	movs	r5, #0
   80d7e:	e002      	b.n	80d86 <pvPortMalloc+0xa2>
   80d80:	2500      	movs	r5, #0
   80d82:	e000      	b.n	80d86 <pvPortMalloc+0xa2>
   80d84:	2500      	movs	r5, #0

				xFreeBytesRemaining -= pxBlock->xBlockSize;
			}
		}
	}
	xTaskResumeAll();
   80d86:	4b08      	ldr	r3, [pc, #32]	; (80da8 <pvPortMalloc+0xc4>)
   80d88:	4798      	blx	r3
		}
	}
	#endif

	return pvReturn;
}
   80d8a:	4628      	mov	r0, r5
   80d8c:	bd38      	pop	{r3, r4, r5, pc}
   80d8e:	bf00      	nop
   80d90:	00081609 	.word	0x00081609
   80d94:	20078a00 	.word	0x20078a00
   80d98:	20078a04 	.word	0x20078a04
   80d9c:	20070a00 	.word	0x20070a00
   80da0:	20070134 	.word	0x20070134
   80da4:	00080c8d 	.word	0x00080c8d
   80da8:	00081765 	.word	0x00081765

00080dac <vPortFree>:
void vPortFree( void *pv )
{
unsigned char *puc = ( unsigned char * ) pv;
xBlockLink *pxLink;

	if( pv != NULL )
   80dac:	b180      	cbz	r0, 80dd0 <vPortFree+0x24>
	return pvReturn;
}
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
   80dae:	b510      	push	{r4, lr}
   80db0:	4604      	mov	r4, r0
		puc -= heapSTRUCT_SIZE;

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;

		vTaskSuspendAll();
   80db2:	4b08      	ldr	r3, [pc, #32]	; (80dd4 <vPortFree+0x28>)
   80db4:	4798      	blx	r3
		{
			/* Add this block to the list of free blocks. */
			xFreeBytesRemaining += pxLink->xBlockSize;
   80db6:	4a08      	ldr	r2, [pc, #32]	; (80dd8 <vPortFree+0x2c>)
   80db8:	6811      	ldr	r1, [r2, #0]
   80dba:	f854 3c0c 	ldr.w	r3, [r4, #-12]
   80dbe:	440b      	add	r3, r1
   80dc0:	6013      	str	r3, [r2, #0]
			prvInsertBlockIntoFreeList( ( ( xBlockLink * ) pxLink ) );			
   80dc2:	f1a4 0010 	sub.w	r0, r4, #16
   80dc6:	4b05      	ldr	r3, [pc, #20]	; (80ddc <vPortFree+0x30>)
   80dc8:	4798      	blx	r3
		}
		xTaskResumeAll();
   80dca:	4b05      	ldr	r3, [pc, #20]	; (80de0 <vPortFree+0x34>)
   80dcc:	4798      	blx	r3
   80dce:	bd10      	pop	{r4, pc}
   80dd0:	4770      	bx	lr
   80dd2:	bf00      	nop
   80dd4:	00081609 	.word	0x00081609
   80dd8:	20070134 	.word	0x20070134
   80ddc:	00080c8d 	.word	0x00080c8d
   80de0:	00081765 	.word	0x00081765

00080de4 <prvCopyDataToQueue>:

#endif
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( xQUEUE *pxQueue, const void *pvItemToQueue, portBASE_TYPE xPosition )
{
   80de4:	b510      	push	{r4, lr}
   80de6:	4604      	mov	r4, r0
	if( pxQueue->uxItemSize == ( unsigned portBASE_TYPE ) 0 )
   80de8:	6c03      	ldr	r3, [r0, #64]	; 0x40
   80dea:	b93b      	cbnz	r3, 80dfc <prvCopyDataToQueue+0x18>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   80dec:	6803      	ldr	r3, [r0, #0]
   80dee:	bb1b      	cbnz	r3, 80e38 <prvCopyDataToQueue+0x54>
			{
				/* The mutex is no longer being held. */
				vTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
   80df0:	6840      	ldr	r0, [r0, #4]
   80df2:	4b13      	ldr	r3, [pc, #76]	; (80e40 <prvCopyDataToQueue+0x5c>)
   80df4:	4798      	blx	r3
				pxQueue->pxMutexHolder = NULL;
   80df6:	2300      	movs	r3, #0
   80df8:	6063      	str	r3, [r4, #4]
   80dfa:	e01d      	b.n	80e38 <prvCopyDataToQueue+0x54>
			}
		}
		#endif
	}
	else if( xPosition == queueSEND_TO_BACK )
   80dfc:	b96a      	cbnz	r2, 80e1a <prvCopyDataToQueue+0x36>
	{
		memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
   80dfe:	6880      	ldr	r0, [r0, #8]
   80e00:	461a      	mov	r2, r3
   80e02:	4b10      	ldr	r3, [pc, #64]	; (80e44 <prvCopyDataToQueue+0x60>)
   80e04:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
   80e06:	68a2      	ldr	r2, [r4, #8]
   80e08:	6c23      	ldr	r3, [r4, #64]	; 0x40
   80e0a:	4413      	add	r3, r2
   80e0c:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail )
   80e0e:	6862      	ldr	r2, [r4, #4]
   80e10:	4293      	cmp	r3, r2
   80e12:	d311      	bcc.n	80e38 <prvCopyDataToQueue+0x54>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
   80e14:	6823      	ldr	r3, [r4, #0]
   80e16:	60a3      	str	r3, [r4, #8]
   80e18:	e00e      	b.n	80e38 <prvCopyDataToQueue+0x54>
		}
	}
	else
	{
		memcpy( ( void * ) pxQueue->pcReadFrom, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
   80e1a:	68c0      	ldr	r0, [r0, #12]
   80e1c:	461a      	mov	r2, r3
   80e1e:	4b09      	ldr	r3, [pc, #36]	; (80e44 <prvCopyDataToQueue+0x60>)
   80e20:	4798      	blx	r3
		pxQueue->pcReadFrom -= pxQueue->uxItemSize;
   80e22:	6c23      	ldr	r3, [r4, #64]	; 0x40
   80e24:	425b      	negs	r3, r3
   80e26:	68e2      	ldr	r2, [r4, #12]
   80e28:	441a      	add	r2, r3
   80e2a:	60e2      	str	r2, [r4, #12]
		if( pxQueue->pcReadFrom < pxQueue->pcHead )
   80e2c:	6821      	ldr	r1, [r4, #0]
   80e2e:	428a      	cmp	r2, r1
   80e30:	d202      	bcs.n	80e38 <prvCopyDataToQueue+0x54>
		{
			pxQueue->pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
   80e32:	6862      	ldr	r2, [r4, #4]
   80e34:	4413      	add	r3, r2
   80e36:	60e3      	str	r3, [r4, #12]
		}
	}

	++( pxQueue->uxMessagesWaiting );
   80e38:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   80e3a:	3301      	adds	r3, #1
   80e3c:	63a3      	str	r3, [r4, #56]	; 0x38
   80e3e:	bd10      	pop	{r4, pc}
   80e40:	00081d11 	.word	0x00081d11
   80e44:	000833d9 	.word	0x000833d9

00080e48 <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( xQUEUE * const pxQueue, const void *pvBuffer )
{
   80e48:	b538      	push	{r3, r4, r5, lr}
   80e4a:	4603      	mov	r3, r0
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
   80e4c:	6800      	ldr	r0, [r0, #0]
   80e4e:	b158      	cbz	r0, 80e68 <prvCopyDataFromQueue+0x20>
	{
		pxQueue->pcReadFrom += pxQueue->uxItemSize;
   80e50:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   80e52:	68dc      	ldr	r4, [r3, #12]
   80e54:	4414      	add	r4, r2
   80e56:	60dc      	str	r4, [r3, #12]
		if( pxQueue->pcReadFrom >= pxQueue->pcTail )
   80e58:	685d      	ldr	r5, [r3, #4]
   80e5a:	42ac      	cmp	r4, r5
		{
			pxQueue->pcReadFrom = pxQueue->pcHead;
   80e5c:	bf28      	it	cs
   80e5e:	60d8      	strcs	r0, [r3, #12]
   80e60:	4608      	mov	r0, r1
		}
		memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->pcReadFrom, ( unsigned ) pxQueue->uxItemSize );
   80e62:	68d9      	ldr	r1, [r3, #12]
   80e64:	4b01      	ldr	r3, [pc, #4]	; (80e6c <prvCopyDataFromQueue+0x24>)
   80e66:	4798      	blx	r3
   80e68:	bd38      	pop	{r3, r4, r5, pc}
   80e6a:	bf00      	nop
   80e6c:	000833d9 	.word	0x000833d9

00080e70 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( xQueueHandle pxQueue )
{
   80e70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   80e72:	4604      	mov	r4, r0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
   80e74:	4b1e      	ldr	r3, [pc, #120]	; (80ef0 <prvUnlockQueue+0x80>)
   80e76:	4798      	blx	r3
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
   80e78:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   80e7a:	2b00      	cmp	r3, #0
   80e7c:	dd13      	ble.n	80ea6 <prvUnlockQueue+0x36>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   80e7e:	6a63      	ldr	r3, [r4, #36]	; 0x24
   80e80:	b91b      	cbnz	r3, 80e8a <prvUnlockQueue+0x1a>
   80e82:	e010      	b.n	80ea6 <prvUnlockQueue+0x36>
   80e84:	6a63      	ldr	r3, [r4, #36]	; 0x24
   80e86:	b923      	cbnz	r3, 80e92 <prvUnlockQueue+0x22>
   80e88:	e00d      	b.n	80ea6 <prvUnlockQueue+0x36>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   80e8a:	f104 0624 	add.w	r6, r4, #36	; 0x24
   80e8e:	4d19      	ldr	r5, [pc, #100]	; (80ef4 <prvUnlockQueue+0x84>)
				{
					/* The task waiting has a higher priority so record that a
					context	switch is required. */
					vTaskMissedYield();
   80e90:	4f19      	ldr	r7, [pc, #100]	; (80ef8 <prvUnlockQueue+0x88>)
			blocked waiting for data to become available? */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   80e92:	4630      	mov	r0, r6
   80e94:	47a8      	blx	r5
   80e96:	b100      	cbz	r0, 80e9a <prvUnlockQueue+0x2a>
				{
					/* The task waiting has a higher priority so record that a
					context	switch is required. */
					vTaskMissedYield();
   80e98:	47b8      	blx	r7
				}

				--( pxQueue->xTxLock );
   80e9a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   80e9c:	3b01      	subs	r3, #1
   80e9e:	64a3      	str	r3, [r4, #72]	; 0x48
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
   80ea0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   80ea2:	2b00      	cmp	r3, #0
   80ea4:	dcee      	bgt.n	80e84 <prvUnlockQueue+0x14>
			{
				break;
			}
		}

		pxQueue->xTxLock = queueUNLOCKED;
   80ea6:	f04f 33ff 	mov.w	r3, #4294967295
   80eaa:	64a3      	str	r3, [r4, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
   80eac:	4b13      	ldr	r3, [pc, #76]	; (80efc <prvUnlockQueue+0x8c>)
   80eae:	4798      	blx	r3

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
   80eb0:	4b0f      	ldr	r3, [pc, #60]	; (80ef0 <prvUnlockQueue+0x80>)
   80eb2:	4798      	blx	r3
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
   80eb4:	6c63      	ldr	r3, [r4, #68]	; 0x44
   80eb6:	2b00      	cmp	r3, #0
   80eb8:	dd13      	ble.n	80ee2 <prvUnlockQueue+0x72>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   80eba:	6923      	ldr	r3, [r4, #16]
   80ebc:	b91b      	cbnz	r3, 80ec6 <prvUnlockQueue+0x56>
   80ebe:	e010      	b.n	80ee2 <prvUnlockQueue+0x72>
   80ec0:	6923      	ldr	r3, [r4, #16]
   80ec2:	b923      	cbnz	r3, 80ece <prvUnlockQueue+0x5e>
   80ec4:	e00d      	b.n	80ee2 <prvUnlockQueue+0x72>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   80ec6:	f104 0610 	add.w	r6, r4, #16
   80eca:	4d0a      	ldr	r5, [pc, #40]	; (80ef4 <prvUnlockQueue+0x84>)
				{
					vTaskMissedYield();
   80ecc:	4f0a      	ldr	r7, [pc, #40]	; (80ef8 <prvUnlockQueue+0x88>)
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   80ece:	4630      	mov	r0, r6
   80ed0:	47a8      	blx	r5
   80ed2:	b100      	cbz	r0, 80ed6 <prvUnlockQueue+0x66>
				{
					vTaskMissedYield();
   80ed4:	47b8      	blx	r7
				}

				--( pxQueue->xRxLock );
   80ed6:	6c63      	ldr	r3, [r4, #68]	; 0x44
   80ed8:	3b01      	subs	r3, #1
   80eda:	6463      	str	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
   80edc:	6c63      	ldr	r3, [r4, #68]	; 0x44
   80ede:	2b00      	cmp	r3, #0
   80ee0:	dcee      	bgt.n	80ec0 <prvUnlockQueue+0x50>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
   80ee2:	f04f 33ff 	mov.w	r3, #4294967295
   80ee6:	6463      	str	r3, [r4, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
   80ee8:	4b04      	ldr	r3, [pc, #16]	; (80efc <prvUnlockQueue+0x8c>)
   80eea:	4798      	blx	r3
   80eec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   80eee:	bf00      	nop
   80ef0:	00080b99 	.word	0x00080b99
   80ef4:	00081b21 	.word	0x00081b21
   80ef8:	00081c59 	.word	0x00081c59
   80efc:	00080bb9 	.word	0x00080bb9

00080f00 <xQueueGenericReset>:
/*-----------------------------------------------------------
 * PUBLIC QUEUE MANAGEMENT API documented in queue.h
 *----------------------------------------------------------*/

portBASE_TYPE xQueueGenericReset( xQueueHandle pxQueue, portBASE_TYPE xNewQueue )
{
   80f00:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
   80f02:	b918      	cbnz	r0, 80f0c <xQueueGenericReset+0xc>
   80f04:	4b17      	ldr	r3, [pc, #92]	; (80f64 <xQueueGenericReset+0x64>)
   80f06:	4798      	blx	r3
   80f08:	bf00      	nop
   80f0a:	e7fd      	b.n	80f08 <xQueueGenericReset+0x8>
   80f0c:	460d      	mov	r5, r1
   80f0e:	4604      	mov	r4, r0

	taskENTER_CRITICAL();
   80f10:	4b15      	ldr	r3, [pc, #84]	; (80f68 <xQueueGenericReset+0x68>)
   80f12:	4798      	blx	r3
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
   80f14:	6822      	ldr	r2, [r4, #0]
   80f16:	6c21      	ldr	r1, [r4, #64]	; 0x40
   80f18:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   80f1a:	fb03 f301 	mul.w	r3, r3, r1
   80f1e:	18d0      	adds	r0, r2, r3
   80f20:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
   80f22:	2000      	movs	r0, #0
   80f24:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
   80f26:	60a2      	str	r2, [r4, #8]
		pxQueue->pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( unsigned portBASE_TYPE ) 1U ) * pxQueue->uxItemSize );
   80f28:	1a5b      	subs	r3, r3, r1
   80f2a:	4413      	add	r3, r2
   80f2c:	60e3      	str	r3, [r4, #12]
		pxQueue->xRxLock = queueUNLOCKED;
   80f2e:	f04f 33ff 	mov.w	r3, #4294967295
   80f32:	6463      	str	r3, [r4, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
   80f34:	64a3      	str	r3, [r4, #72]	; 0x48

		if( xNewQueue == pdFALSE )
   80f36:	b955      	cbnz	r5, 80f4e <xQueueGenericReset+0x4e>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to	write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   80f38:	6923      	ldr	r3, [r4, #16]
   80f3a:	b17b      	cbz	r3, 80f5c <xQueueGenericReset+0x5c>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
   80f3c:	f104 0010 	add.w	r0, r4, #16
   80f40:	4b0a      	ldr	r3, [pc, #40]	; (80f6c <xQueueGenericReset+0x6c>)
   80f42:	4798      	blx	r3
   80f44:	2801      	cmp	r0, #1
   80f46:	d109      	bne.n	80f5c <xQueueGenericReset+0x5c>
				{
					portYIELD_WITHIN_API();
   80f48:	4b09      	ldr	r3, [pc, #36]	; (80f70 <xQueueGenericReset+0x70>)
   80f4a:	4798      	blx	r3
   80f4c:	e006      	b.n	80f5c <xQueueGenericReset+0x5c>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
   80f4e:	f104 0010 	add.w	r0, r4, #16
   80f52:	4d08      	ldr	r5, [pc, #32]	; (80f74 <xQueueGenericReset+0x74>)
   80f54:	47a8      	blx	r5
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
   80f56:	f104 0024 	add.w	r0, r4, #36	; 0x24
   80f5a:	47a8      	blx	r5
		}
	}
	taskEXIT_CRITICAL();
   80f5c:	4b06      	ldr	r3, [pc, #24]	; (80f78 <xQueueGenericReset+0x78>)
   80f5e:	4798      	blx	r3

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
}
   80f60:	2001      	movs	r0, #1
   80f62:	bd38      	pop	{r3, r4, r5, pc}
   80f64:	00080b89 	.word	0x00080b89
   80f68:	00080b99 	.word	0x00080b99
   80f6c:	00081b21 	.word	0x00081b21
   80f70:	00080b79 	.word	0x00080b79
   80f74:	00080a81 	.word	0x00080a81
   80f78:	00080bb9 	.word	0x00080bb9

00080f7c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

xQueueHandle xQueueGenericCreate( unsigned portBASE_TYPE uxQueueLength, unsigned portBASE_TYPE uxItemSize, unsigned char ucQueueType )
{
   80f7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	/* Allocate the new queue structure. */
	if( uxQueueLength > ( unsigned portBASE_TYPE ) 0 )
   80f7e:	b1a0      	cbz	r0, 80faa <xQueueGenericCreate+0x2e>
   80f80:	460d      	mov	r5, r1
   80f82:	4617      	mov	r7, r2
   80f84:	4606      	mov	r6, r0
	{
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
   80f86:	2050      	movs	r0, #80	; 0x50
   80f88:	4b0e      	ldr	r3, [pc, #56]	; (80fc4 <xQueueGenericCreate+0x48>)
   80f8a:	4798      	blx	r3
		if( pxNewQueue != NULL )
   80f8c:	4604      	mov	r4, r0
   80f8e:	b160      	cbz	r0, 80faa <xQueueGenericCreate+0x2e>
		{
			/* Create the list of pointers to queue items.  The queue is one byte
			longer than asked for to make wrap checking easier/faster. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1;
   80f90:	fb05 f006 	mul.w	r0, r5, r6

			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
   80f94:	3001      	adds	r0, #1
   80f96:	4b0b      	ldr	r3, [pc, #44]	; (80fc4 <xQueueGenericCreate+0x48>)
   80f98:	4798      	blx	r3
   80f9a:	6020      	str	r0, [r4, #0]
			if( pxNewQueue->pcHead != NULL )
   80f9c:	b940      	cbnz	r0, 80fb0 <xQueueGenericCreate+0x34>
				xReturn = pxNewQueue;
			}
			else
			{
				traceQUEUE_CREATE_FAILED( ucQueueType );
				vPortFree( pxNewQueue );
   80f9e:	4620      	mov	r0, r4
   80fa0:	4b09      	ldr	r3, [pc, #36]	; (80fc8 <xQueueGenericCreate+0x4c>)
   80fa2:	4798      	blx	r3
   80fa4:	e001      	b.n	80faa <xQueueGenericCreate+0x2e>
			}
		}
	}

	configASSERT( xReturn );
   80fa6:	bf00      	nop
   80fa8:	e7fd      	b.n	80fa6 <xQueueGenericCreate+0x2a>
   80faa:	4b08      	ldr	r3, [pc, #32]	; (80fcc <xQueueGenericCreate+0x50>)
   80fac:	4798      	blx	r3
   80fae:	e7fa      	b.n	80fa6 <xQueueGenericCreate+0x2a>
			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
			if( pxNewQueue->pcHead != NULL )
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->uxLength = uxQueueLength;
   80fb0:	63e6      	str	r6, [r4, #60]	; 0x3c
				pxNewQueue->uxItemSize = uxItemSize;
   80fb2:	6425      	str	r5, [r4, #64]	; 0x40
				xQueueGenericReset( pxNewQueue, pdTRUE );
   80fb4:	4620      	mov	r0, r4
   80fb6:	2101      	movs	r1, #1
   80fb8:	4b05      	ldr	r3, [pc, #20]	; (80fd0 <xQueueGenericCreate+0x54>)
   80fba:	4798      	blx	r3
				#if ( configUSE_TRACE_FACILITY == 1 )
				{
					pxNewQueue->ucQueueType = ucQueueType;
   80fbc:	f884 704d 	strb.w	r7, [r4, #77]	; 0x4d
	}

	configASSERT( xReturn );

	return xReturn;
}
   80fc0:	4620      	mov	r0, r4
   80fc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   80fc4:	00080ce5 	.word	0x00080ce5
   80fc8:	00080dad 	.word	0x00080dad
   80fcc:	00080b89 	.word	0x00080b89
   80fd0:	00080f01 	.word	0x00080f01

00080fd4 <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSend( xQueueHandle pxQueue, const void * const pvItemToQueue, portTickType xTicksToWait, portBASE_TYPE xCopyPosition )
{
   80fd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   80fd8:	b085      	sub	sp, #20
   80fda:	9300      	str	r3, [sp, #0]
   80fdc:	f8ad 2006 	strh.w	r2, [sp, #6]
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
xTimeOutType xTimeOut;

	configASSERT( pxQueue );
   80fe0:	b918      	cbnz	r0, 80fea <xQueueGenericSend+0x16>
   80fe2:	4b3a      	ldr	r3, [pc, #232]	; (810cc <xQueueGenericSend+0xf8>)
   80fe4:	4798      	blx	r3
   80fe6:	bf00      	nop
   80fe8:	e7fd      	b.n	80fe6 <xQueueGenericSend+0x12>
   80fea:	468a      	mov	sl, r1
   80fec:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
   80fee:	b929      	cbnz	r1, 80ffc <xQueueGenericSend+0x28>
   80ff0:	6c03      	ldr	r3, [r0, #64]	; 0x40
   80ff2:	b12b      	cbz	r3, 81000 <xQueueGenericSend+0x2c>
   80ff4:	4b35      	ldr	r3, [pc, #212]	; (810cc <xQueueGenericSend+0xf8>)
   80ff6:	4798      	blx	r3
   80ff8:	bf00      	nop
   80ffa:	e7fd      	b.n	80ff8 <xQueueGenericSend+0x24>
   80ffc:	2700      	movs	r7, #0
   80ffe:	e000      	b.n	81002 <xQueueGenericSend+0x2e>
   81000:	2700      	movs	r7, #0
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
   81002:	4e33      	ldr	r6, [pc, #204]	; (810d0 <xQueueGenericSend+0xfc>)
				}
				else if( xEntryTimeSet == pdFALSE )
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
   81004:	f8df b0f0 	ldr.w	fp, [pc, #240]	; 810f8 <xQueueGenericSend+0x124>
					xEntryTimeSet = pdTRUE;
				}
			}
		}
		taskEXIT_CRITICAL();
   81008:	4d32      	ldr	r5, [pc, #200]	; (810d4 <xQueueGenericSend+0x100>)
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
   8100a:	47b0      	blx	r6
		{
			/* Is there room on the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
   8100c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   8100e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   81010:	429a      	cmp	r2, r3
   81012:	d212      	bcs.n	8103a <xQueueGenericSend+0x66>
			{
				traceQUEUE_SEND( pxQueue );
				prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
   81014:	4620      	mov	r0, r4
   81016:	4651      	mov	r1, sl
   81018:	9a00      	ldr	r2, [sp, #0]
   8101a:	4b2f      	ldr	r3, [pc, #188]	; (810d8 <xQueueGenericSend+0x104>)
   8101c:	4798      	blx	r3

				/* If there was a task waiting for data to arrive on the
				queue then unblock it now. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   8101e:	6a63      	ldr	r3, [r4, #36]	; 0x24
   81020:	b13b      	cbz	r3, 81032 <xQueueGenericSend+0x5e>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
   81022:	f104 0024 	add.w	r0, r4, #36	; 0x24
   81026:	4b2d      	ldr	r3, [pc, #180]	; (810dc <xQueueGenericSend+0x108>)
   81028:	4798      	blx	r3
   8102a:	2801      	cmp	r0, #1
   8102c:	d101      	bne.n	81032 <xQueueGenericSend+0x5e>
					{
						/* The unblocked task has a priority higher than
						our own so yield immediately.  Yes it is ok to do
						this from within the critical section - the kernel
						takes care of that. */
						portYIELD_WITHIN_API();
   8102e:	4b2c      	ldr	r3, [pc, #176]	; (810e0 <xQueueGenericSend+0x10c>)
   81030:	4798      	blx	r3
					}
				}

				taskEXIT_CRITICAL();
   81032:	4b28      	ldr	r3, [pc, #160]	; (810d4 <xQueueGenericSend+0x100>)
   81034:	4798      	blx	r3

				/* Return to the original privilege level before exiting the
				function. */
				return pdPASS;
   81036:	2001      	movs	r0, #1
   81038:	e045      	b.n	810c6 <xQueueGenericSend+0xf2>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
   8103a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   8103e:	b91b      	cbnz	r3, 81048 <xQueueGenericSend+0x74>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
   81040:	4b24      	ldr	r3, [pc, #144]	; (810d4 <xQueueGenericSend+0x100>)
   81042:	4798      	blx	r3

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
   81044:	2000      	movs	r0, #0
   81046:	e03e      	b.n	810c6 <xQueueGenericSend+0xf2>
				}
				else if( xEntryTimeSet == pdFALSE )
   81048:	b917      	cbnz	r7, 81050 <xQueueGenericSend+0x7c>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
   8104a:	a802      	add	r0, sp, #8
   8104c:	47d8      	blx	fp
					xEntryTimeSet = pdTRUE;
   8104e:	2701      	movs	r7, #1
				}
			}
		}
		taskEXIT_CRITICAL();
   81050:	47a8      	blx	r5

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
   81052:	4b24      	ldr	r3, [pc, #144]	; (810e4 <xQueueGenericSend+0x110>)
   81054:	4798      	blx	r3
		prvLockQueue( pxQueue );
   81056:	47b0      	blx	r6
   81058:	6c63      	ldr	r3, [r4, #68]	; 0x44
   8105a:	f1b3 3fff 	cmp.w	r3, #4294967295
   8105e:	bf04      	itt	eq
   81060:	2300      	moveq	r3, #0
   81062:	6463      	streq	r3, [r4, #68]	; 0x44
   81064:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   81066:	f1b3 3fff 	cmp.w	r3, #4294967295
   8106a:	bf04      	itt	eq
   8106c:	2300      	moveq	r3, #0
   8106e:	64a3      	streq	r3, [r4, #72]	; 0x48
   81070:	47a8      	blx	r5

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   81072:	a802      	add	r0, sp, #8
   81074:	f10d 0106 	add.w	r1, sp, #6
   81078:	4b1b      	ldr	r3, [pc, #108]	; (810e8 <xQueueGenericSend+0x114>)
   8107a:	4798      	blx	r3
   8107c:	b9e8      	cbnz	r0, 810ba <xQueueGenericSend+0xe6>

static signed portBASE_TYPE prvIsQueueFull( const xQueueHandle pxQueue )
{
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
   8107e:	47b0      	blx	r6
		xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
   81080:	f8d4 9038 	ldr.w	r9, [r4, #56]	; 0x38
   81084:	f8d4 803c 	ldr.w	r8, [r4, #60]	; 0x3c
	taskEXIT_CRITICAL();
   81088:	47a8      	blx	r5
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
   8108a:	45c1      	cmp	r9, r8
   8108c:	d10f      	bne.n	810ae <xQueueGenericSend+0xda>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
   8108e:	f104 0010 	add.w	r0, r4, #16
   81092:	f8bd 1006 	ldrh.w	r1, [sp, #6]
   81096:	4b15      	ldr	r3, [pc, #84]	; (810ec <xQueueGenericSend+0x118>)
   81098:	4798      	blx	r3
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
   8109a:	4620      	mov	r0, r4
   8109c:	4b14      	ldr	r3, [pc, #80]	; (810f0 <xQueueGenericSend+0x11c>)
   8109e:	4798      	blx	r3
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
   810a0:	4b14      	ldr	r3, [pc, #80]	; (810f4 <xQueueGenericSend+0x120>)
   810a2:	4798      	blx	r3
   810a4:	2800      	cmp	r0, #0
   810a6:	d1b0      	bne.n	8100a <xQueueGenericSend+0x36>
				{
					portYIELD_WITHIN_API();
   810a8:	4b0d      	ldr	r3, [pc, #52]	; (810e0 <xQueueGenericSend+0x10c>)
   810aa:	4798      	blx	r3
   810ac:	e7ad      	b.n	8100a <xQueueGenericSend+0x36>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
   810ae:	4620      	mov	r0, r4
   810b0:	4b0f      	ldr	r3, [pc, #60]	; (810f0 <xQueueGenericSend+0x11c>)
   810b2:	4798      	blx	r3
				( void ) xTaskResumeAll();
   810b4:	4b0f      	ldr	r3, [pc, #60]	; (810f4 <xQueueGenericSend+0x120>)
   810b6:	4798      	blx	r3
   810b8:	e7a7      	b.n	8100a <xQueueGenericSend+0x36>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
   810ba:	4620      	mov	r0, r4
   810bc:	4b0c      	ldr	r3, [pc, #48]	; (810f0 <xQueueGenericSend+0x11c>)
   810be:	4798      	blx	r3
			( void ) xTaskResumeAll();
   810c0:	4b0c      	ldr	r3, [pc, #48]	; (810f4 <xQueueGenericSend+0x120>)
   810c2:	4798      	blx	r3

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
   810c4:	2000      	movs	r0, #0
		}
	}
}
   810c6:	b005      	add	sp, #20
   810c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   810cc:	00080b89 	.word	0x00080b89
   810d0:	00080b99 	.word	0x00080b99
   810d4:	00080bb9 	.word	0x00080bb9
   810d8:	00080de5 	.word	0x00080de5
   810dc:	00081b21 	.word	0x00081b21
   810e0:	00080b79 	.word	0x00080b79
   810e4:	00081609 	.word	0x00081609
   810e8:	00081bcd 	.word	0x00081bcd
   810ec:	00081a75 	.word	0x00081a75
   810f0:	00080e71 	.word	0x00080e71
   810f4:	00081765 	.word	0x00081765
   810f8:	00081ba5 	.word	0x00081ba5

000810fc <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSendFromISR( xQueueHandle pxQueue, const void * const pvItemToQueue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portBASE_TYPE xCopyPosition )
{
   810fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
signed portBASE_TYPE xReturn;
unsigned portBASE_TYPE uxSavedInterruptStatus;

	configASSERT( pxQueue );
   81100:	b918      	cbnz	r0, 8110a <xQueueGenericSendFromISR+0xe>
   81102:	4b1e      	ldr	r3, [pc, #120]	; (8117c <xQueueGenericSendFromISR+0x80>)
   81104:	4798      	blx	r3
   81106:	bf00      	nop
   81108:	e7fd      	b.n	81106 <xQueueGenericSendFromISR+0xa>
   8110a:	460e      	mov	r6, r1
   8110c:	4615      	mov	r5, r2
   8110e:	4698      	mov	r8, r3
   81110:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
   81112:	b929      	cbnz	r1, 81120 <xQueueGenericSendFromISR+0x24>
   81114:	6c03      	ldr	r3, [r0, #64]	; 0x40
   81116:	b11b      	cbz	r3, 81120 <xQueueGenericSendFromISR+0x24>
   81118:	4b18      	ldr	r3, [pc, #96]	; (8117c <xQueueGenericSendFromISR+0x80>)
   8111a:	4798      	blx	r3
   8111c:	bf00      	nop
   8111e:	e7fd      	b.n	8111c <xQueueGenericSendFromISR+0x20>
	/* Similar to xQueueGenericSend, except we don't block if there is no room
	in the queue.  Also we don't directly wake a task that was blocked on a
	queue read, instead we return a flag to say whether a context switch is
	required or not (i.e. has a task with a higher priority than us been woken
	by this	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
   81120:	4b16      	ldr	r3, [pc, #88]	; (8117c <xQueueGenericSendFromISR+0x80>)
   81122:	4798      	blx	r3
   81124:	4607      	mov	r7, r0
	{
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
   81126:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   81128:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   8112a:	429a      	cmp	r2, r3
   8112c:	d218      	bcs.n	81160 <xQueueGenericSendFromISR+0x64>
		{
			traceQUEUE_SEND_FROM_ISR( pxQueue );

			prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
   8112e:	4620      	mov	r0, r4
   81130:	4631      	mov	r1, r6
   81132:	4642      	mov	r2, r8
   81134:	4b12      	ldr	r3, [pc, #72]	; (81180 <xQueueGenericSendFromISR+0x84>)
   81136:	4798      	blx	r3

			/* If the queue is locked we do not alter the event list.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
   81138:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   8113a:	f1b3 3fff 	cmp.w	r3, #4294967295
   8113e:	d10a      	bne.n	81156 <xQueueGenericSendFromISR+0x5a>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   81140:	6a63      	ldr	r3, [r4, #36]	; 0x24
   81142:	b17b      	cbz	r3, 81164 <xQueueGenericSendFromISR+0x68>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   81144:	f104 0024 	add.w	r0, r4, #36	; 0x24
   81148:	4b0e      	ldr	r3, [pc, #56]	; (81184 <xQueueGenericSendFromISR+0x88>)
   8114a:	4798      	blx	r3
   8114c:	b160      	cbz	r0, 81168 <xQueueGenericSendFromISR+0x6c>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						if( pxHigherPriorityTaskWoken != NULL )
   8114e:	b16d      	cbz	r5, 8116c <xQueueGenericSendFromISR+0x70>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
   81150:	2401      	movs	r4, #1
   81152:	602c      	str	r4, [r5, #0]
   81154:	e00b      	b.n	8116e <xQueueGenericSendFromISR+0x72>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
   81156:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   81158:	3301      	adds	r3, #1
   8115a:	64a3      	str	r3, [r4, #72]	; 0x48
			}

			xReturn = pdPASS;
   8115c:	2401      	movs	r4, #1
   8115e:	e006      	b.n	8116e <xQueueGenericSendFromISR+0x72>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
   81160:	2400      	movs	r4, #0
   81162:	e004      	b.n	8116e <xQueueGenericSendFromISR+0x72>
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
			}

			xReturn = pdPASS;
   81164:	2401      	movs	r4, #1
   81166:	e002      	b.n	8116e <xQueueGenericSendFromISR+0x72>
   81168:	2401      	movs	r4, #1
   8116a:	e000      	b.n	8116e <xQueueGenericSendFromISR+0x72>
   8116c:	2401      	movs	r4, #1
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
   8116e:	4638      	mov	r0, r7
   81170:	4b05      	ldr	r3, [pc, #20]	; (81188 <xQueueGenericSendFromISR+0x8c>)
   81172:	4798      	blx	r3

	return xReturn;
}
   81174:	4620      	mov	r0, r4
   81176:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8117a:	bf00      	nop
   8117c:	00080b89 	.word	0x00080b89
   81180:	00080de5 	.word	0x00080de5
   81184:	00081b21 	.word	0x00081b21
   81188:	00080bb1 	.word	0x00080bb1

0008118c <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericReceive( xQueueHandle pxQueue, void * const pvBuffer, portTickType xTicksToWait, portBASE_TYPE xJustPeeking )
{
   8118c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   81190:	b085      	sub	sp, #20
   81192:	f8ad 2006 	strh.w	r2, [sp, #6]
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
xTimeOutType xTimeOut;
signed char *pcOriginalReadPosition;

	configASSERT( pxQueue );
   81196:	b918      	cbnz	r0, 811a0 <xQueueGenericReceive+0x14>
   81198:	4b47      	ldr	r3, [pc, #284]	; (812b8 <xQueueGenericReceive+0x12c>)
   8119a:	4798      	blx	r3
   8119c:	bf00      	nop
   8119e:	e7fd      	b.n	8119c <xQueueGenericReceive+0x10>
   811a0:	4689      	mov	r9, r1
   811a2:	469a      	mov	sl, r3
   811a4:	4604      	mov	r4, r0
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
   811a6:	b929      	cbnz	r1, 811b4 <xQueueGenericReceive+0x28>
   811a8:	6c03      	ldr	r3, [r0, #64]	; 0x40
   811aa:	b12b      	cbz	r3, 811b8 <xQueueGenericReceive+0x2c>
   811ac:	4b42      	ldr	r3, [pc, #264]	; (812b8 <xQueueGenericReceive+0x12c>)
   811ae:	4798      	blx	r3
   811b0:	bf00      	nop
   811b2:	e7fd      	b.n	811b0 <xQueueGenericReceive+0x24>
   811b4:	2700      	movs	r7, #0
   811b6:	e000      	b.n	811ba <xQueueGenericReceive+0x2e>
   811b8:	2700      	movs	r7, #0
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
   811ba:	4e40      	ldr	r6, [pc, #256]	; (812bc <xQueueGenericReceive+0x130>)
				}
				else if( xEntryTimeSet == pdFALSE )
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
   811bc:	f8df b12c 	ldr.w	fp, [pc, #300]	; 812ec <xQueueGenericReceive+0x160>
					xEntryTimeSet = pdTRUE;
				}
			}
		}
		taskEXIT_CRITICAL();
   811c0:	4d3f      	ldr	r5, [pc, #252]	; (812c0 <xQueueGenericReceive+0x134>)
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
   811c2:	47b0      	blx	r6
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
   811c4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   811c6:	b343      	cbz	r3, 8121a <xQueueGenericReceive+0x8e>
			{
				/* Remember our read position in case we are just peeking. */
				pcOriginalReadPosition = pxQueue->pcReadFrom;
   811c8:	68e5      	ldr	r5, [r4, #12]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
   811ca:	4620      	mov	r0, r4
   811cc:	4649      	mov	r1, r9
   811ce:	4b3d      	ldr	r3, [pc, #244]	; (812c4 <xQueueGenericReceive+0x138>)
   811d0:	4798      	blx	r3

				if( xJustPeeking == pdFALSE )
   811d2:	f1ba 0f00 	cmp.w	sl, #0
   811d6:	d112      	bne.n	811fe <xQueueGenericReceive+0x72>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* We are actually removing data. */
					--( pxQueue->uxMessagesWaiting );
   811d8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   811da:	3b01      	subs	r3, #1
   811dc:	63a3      	str	r3, [r4, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   811de:	6823      	ldr	r3, [r4, #0]
   811e0:	b913      	cbnz	r3, 811e8 <xQueueGenericReceive+0x5c>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = xTaskGetCurrentTaskHandle();
   811e2:	4b39      	ldr	r3, [pc, #228]	; (812c8 <xQueueGenericReceive+0x13c>)
   811e4:	4798      	blx	r3
   811e6:	6060      	str	r0, [r4, #4]
						}
					}
					#endif

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   811e8:	6923      	ldr	r3, [r4, #16]
   811ea:	b193      	cbz	r3, 81212 <xQueueGenericReceive+0x86>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
   811ec:	f104 0010 	add.w	r0, r4, #16
   811f0:	4b36      	ldr	r3, [pc, #216]	; (812cc <xQueueGenericReceive+0x140>)
   811f2:	4798      	blx	r3
   811f4:	2801      	cmp	r0, #1
   811f6:	d10c      	bne.n	81212 <xQueueGenericReceive+0x86>
						{
							portYIELD_WITHIN_API();
   811f8:	4b35      	ldr	r3, [pc, #212]	; (812d0 <xQueueGenericReceive+0x144>)
   811fa:	4798      	blx	r3
   811fc:	e009      	b.n	81212 <xQueueGenericReceive+0x86>
				{
					traceQUEUE_PEEK( pxQueue );

					/* We are not removing the data, so reset our read
					pointer. */
					pxQueue->pcReadFrom = pcOriginalReadPosition;
   811fe:	60e5      	str	r5, [r4, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   81200:	6a63      	ldr	r3, [r4, #36]	; 0x24
   81202:	b133      	cbz	r3, 81212 <xQueueGenericReceive+0x86>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   81204:	f104 0024 	add.w	r0, r4, #36	; 0x24
   81208:	4b30      	ldr	r3, [pc, #192]	; (812cc <xQueueGenericReceive+0x140>)
   8120a:	4798      	blx	r3
   8120c:	b108      	cbz	r0, 81212 <xQueueGenericReceive+0x86>
						{
							/* The task waiting has a higher priority than this task. */
							portYIELD_WITHIN_API();
   8120e:	4b30      	ldr	r3, [pc, #192]	; (812d0 <xQueueGenericReceive+0x144>)
   81210:	4798      	blx	r3
						}
					}
				}

				taskEXIT_CRITICAL();
   81212:	4b2b      	ldr	r3, [pc, #172]	; (812c0 <xQueueGenericReceive+0x134>)
   81214:	4798      	blx	r3
				return pdPASS;
   81216:	2001      	movs	r0, #1
   81218:	e04b      	b.n	812b2 <xQueueGenericReceive+0x126>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
   8121a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   8121e:	b91b      	cbnz	r3, 81228 <xQueueGenericReceive+0x9c>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
   81220:	4b27      	ldr	r3, [pc, #156]	; (812c0 <xQueueGenericReceive+0x134>)
   81222:	4798      	blx	r3
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
   81224:	2000      	movs	r0, #0
   81226:	e044      	b.n	812b2 <xQueueGenericReceive+0x126>
				}
				else if( xEntryTimeSet == pdFALSE )
   81228:	b917      	cbnz	r7, 81230 <xQueueGenericReceive+0xa4>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
   8122a:	a802      	add	r0, sp, #8
   8122c:	47d8      	blx	fp
					xEntryTimeSet = pdTRUE;
   8122e:	2701      	movs	r7, #1
				}
			}
		}
		taskEXIT_CRITICAL();
   81230:	47a8      	blx	r5

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
   81232:	4b28      	ldr	r3, [pc, #160]	; (812d4 <xQueueGenericReceive+0x148>)
   81234:	4798      	blx	r3
		prvLockQueue( pxQueue );
   81236:	47b0      	blx	r6
   81238:	6c63      	ldr	r3, [r4, #68]	; 0x44
   8123a:	f1b3 3fff 	cmp.w	r3, #4294967295
   8123e:	bf04      	itt	eq
   81240:	2300      	moveq	r3, #0
   81242:	6463      	streq	r3, [r4, #68]	; 0x44
   81244:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   81246:	f1b3 3fff 	cmp.w	r3, #4294967295
   8124a:	bf04      	itt	eq
   8124c:	2300      	moveq	r3, #0
   8124e:	64a3      	streq	r3, [r4, #72]	; 0x48
   81250:	47a8      	blx	r5

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   81252:	a802      	add	r0, sp, #8
   81254:	f10d 0106 	add.w	r1, sp, #6
   81258:	4b1f      	ldr	r3, [pc, #124]	; (812d8 <xQueueGenericReceive+0x14c>)
   8125a:	4798      	blx	r3
   8125c:	bb18      	cbnz	r0, 812a6 <xQueueGenericReceive+0x11a>

static signed portBASE_TYPE prvIsQueueEmpty( const xQueueHandle pxQueue )
{
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
   8125e:	47b0      	blx	r6
		xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
   81260:	f8d4 8038 	ldr.w	r8, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
   81264:	47a8      	blx	r5
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   81266:	f1b8 0f00 	cmp.w	r8, #0
   8126a:	d116      	bne.n	8129a <xQueueGenericReceive+0x10e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   8126c:	6823      	ldr	r3, [r4, #0]
   8126e:	b923      	cbnz	r3, 8127a <xQueueGenericReceive+0xee>
					{
						portENTER_CRITICAL();
   81270:	47b0      	blx	r6
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
   81272:	6860      	ldr	r0, [r4, #4]
   81274:	4b19      	ldr	r3, [pc, #100]	; (812dc <xQueueGenericReceive+0x150>)
   81276:	4798      	blx	r3
						}
						portEXIT_CRITICAL();
   81278:	47a8      	blx	r5
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
   8127a:	f104 0024 	add.w	r0, r4, #36	; 0x24
   8127e:	f8bd 1006 	ldrh.w	r1, [sp, #6]
   81282:	4b17      	ldr	r3, [pc, #92]	; (812e0 <xQueueGenericReceive+0x154>)
   81284:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
   81286:	4620      	mov	r0, r4
   81288:	4b16      	ldr	r3, [pc, #88]	; (812e4 <xQueueGenericReceive+0x158>)
   8128a:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
   8128c:	4b16      	ldr	r3, [pc, #88]	; (812e8 <xQueueGenericReceive+0x15c>)
   8128e:	4798      	blx	r3
   81290:	2800      	cmp	r0, #0
   81292:	d196      	bne.n	811c2 <xQueueGenericReceive+0x36>
				{
					portYIELD_WITHIN_API();
   81294:	4b0e      	ldr	r3, [pc, #56]	; (812d0 <xQueueGenericReceive+0x144>)
   81296:	4798      	blx	r3
   81298:	e793      	b.n	811c2 <xQueueGenericReceive+0x36>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
   8129a:	4620      	mov	r0, r4
   8129c:	4b11      	ldr	r3, [pc, #68]	; (812e4 <xQueueGenericReceive+0x158>)
   8129e:	4798      	blx	r3
				( void ) xTaskResumeAll();
   812a0:	4b11      	ldr	r3, [pc, #68]	; (812e8 <xQueueGenericReceive+0x15c>)
   812a2:	4798      	blx	r3
   812a4:	e78d      	b.n	811c2 <xQueueGenericReceive+0x36>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
   812a6:	4620      	mov	r0, r4
   812a8:	4b0e      	ldr	r3, [pc, #56]	; (812e4 <xQueueGenericReceive+0x158>)
   812aa:	4798      	blx	r3
			( void ) xTaskResumeAll();
   812ac:	4b0e      	ldr	r3, [pc, #56]	; (812e8 <xQueueGenericReceive+0x15c>)
   812ae:	4798      	blx	r3
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
   812b0:	2000      	movs	r0, #0
		}
	}
}
   812b2:	b005      	add	sp, #20
   812b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   812b8:	00080b89 	.word	0x00080b89
   812bc:	00080b99 	.word	0x00080b99
   812c0:	00080bb9 	.word	0x00080bb9
   812c4:	00080e49 	.word	0x00080e49
   812c8:	00081c65 	.word	0x00081c65
   812cc:	00081b21 	.word	0x00081b21
   812d0:	00080b79 	.word	0x00080b79
   812d4:	00081609 	.word	0x00081609
   812d8:	00081bcd 	.word	0x00081bcd
   812dc:	00081c91 	.word	0x00081c91
   812e0:	00081a75 	.word	0x00081a75
   812e4:	00080e71 	.word	0x00080e71
   812e8:	00081765 	.word	0x00081765
   812ec:	00081ba5 	.word	0x00081ba5

000812f0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if configUSE_TIMERS == 1

	void vQueueWaitForMessageRestricted( xQueueHandle pxQueue, portTickType xTicksToWait )
	{
   812f0:	b538      	push	{r3, r4, r5, lr}
   812f2:	4604      	mov	r4, r0
   812f4:	460d      	mov	r5, r1
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
   812f6:	4b0d      	ldr	r3, [pc, #52]	; (8132c <vQueueWaitForMessageRestricted+0x3c>)
   812f8:	4798      	blx	r3
   812fa:	6c63      	ldr	r3, [r4, #68]	; 0x44
   812fc:	f1b3 3fff 	cmp.w	r3, #4294967295
   81300:	bf04      	itt	eq
   81302:	2300      	moveq	r3, #0
   81304:	6463      	streq	r3, [r4, #68]	; 0x44
   81306:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   81308:	f1b3 3fff 	cmp.w	r3, #4294967295
   8130c:	bf04      	itt	eq
   8130e:	2300      	moveq	r3, #0
   81310:	64a3      	streq	r3, [r4, #72]	; 0x48
   81312:	4b07      	ldr	r3, [pc, #28]	; (81330 <vQueueWaitForMessageRestricted+0x40>)
   81314:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0U )
   81316:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   81318:	b923      	cbnz	r3, 81324 <vQueueWaitForMessageRestricted+0x34>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
   8131a:	f104 0024 	add.w	r0, r4, #36	; 0x24
   8131e:	4629      	mov	r1, r5
   81320:	4b04      	ldr	r3, [pc, #16]	; (81334 <vQueueWaitForMessageRestricted+0x44>)
   81322:	4798      	blx	r3
		}
		prvUnlockQueue( pxQueue );
   81324:	4620      	mov	r0, r4
   81326:	4b04      	ldr	r3, [pc, #16]	; (81338 <vQueueWaitForMessageRestricted+0x48>)
   81328:	4798      	blx	r3
   8132a:	bd38      	pop	{r3, r4, r5, pc}
   8132c:	00080b99 	.word	0x00080b99
   81330:	00080bb9 	.word	0x00080bb9
   81334:	00081ad9 	.word	0x00081ad9
   81338:	00080e71 	.word	0x00080e71

0008133c <prvAddCurrentTaskToDelayedList>:
	#endif
}
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( portTickType xTimeToWake )
{
   8133c:	b510      	push	{r4, lr}
   8133e:	4604      	mov	r4, r0
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
   81340:	4b0f      	ldr	r3, [pc, #60]	; (81380 <prvAddCurrentTaskToDelayedList+0x44>)
   81342:	681b      	ldr	r3, [r3, #0]
   81344:	8098      	strh	r0, [r3, #4]

	if( xTimeToWake < xTickCount )
   81346:	4b0f      	ldr	r3, [pc, #60]	; (81384 <prvAddCurrentTaskToDelayedList+0x48>)
   81348:	881b      	ldrh	r3, [r3, #0]
   8134a:	b29b      	uxth	r3, r3
   8134c:	4298      	cmp	r0, r3
   8134e:	d207      	bcs.n	81360 <prvAddCurrentTaskToDelayedList+0x24>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
   81350:	4b0d      	ldr	r3, [pc, #52]	; (81388 <prvAddCurrentTaskToDelayedList+0x4c>)
   81352:	6818      	ldr	r0, [r3, #0]
   81354:	4b0a      	ldr	r3, [pc, #40]	; (81380 <prvAddCurrentTaskToDelayedList+0x44>)
   81356:	6819      	ldr	r1, [r3, #0]
   81358:	3104      	adds	r1, #4
   8135a:	4b0c      	ldr	r3, [pc, #48]	; (8138c <prvAddCurrentTaskToDelayedList+0x50>)
   8135c:	4798      	blx	r3
   8135e:	bd10      	pop	{r4, pc}
	}
	else
	{
		/* The wake time has not overflowed, so we can use the current block list. */
		vListInsert( ( xList * ) pxDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
   81360:	4b0b      	ldr	r3, [pc, #44]	; (81390 <prvAddCurrentTaskToDelayedList+0x54>)
   81362:	6818      	ldr	r0, [r3, #0]
   81364:	4b06      	ldr	r3, [pc, #24]	; (81380 <prvAddCurrentTaskToDelayedList+0x44>)
   81366:	6819      	ldr	r1, [r3, #0]
   81368:	3104      	adds	r1, #4
   8136a:	4b08      	ldr	r3, [pc, #32]	; (8138c <prvAddCurrentTaskToDelayedList+0x50>)
   8136c:	4798      	blx	r3

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
   8136e:	4b09      	ldr	r3, [pc, #36]	; (81394 <prvAddCurrentTaskToDelayedList+0x58>)
   81370:	881b      	ldrh	r3, [r3, #0]
   81372:	b29b      	uxth	r3, r3
   81374:	429c      	cmp	r4, r3
		{
			xNextTaskUnblockTime = xTimeToWake;
   81376:	bf3c      	itt	cc
   81378:	4b06      	ldrcc	r3, [pc, #24]	; (81394 <prvAddCurrentTaskToDelayedList+0x58>)
   8137a:	801c      	strhcc	r4, [r3, #0]
   8137c:	bd10      	pop	{r4, pc}
   8137e:	bf00      	nop
   81380:	20078b3c 	.word	0x20078b3c
   81384:	20078b58 	.word	0x20078b58
   81388:	20078b5c 	.word	0x20078b5c
   8138c:	00080abd 	.word	0x00080abd
   81390:	20078a24 	.word	0x20078a24
   81394:	20070138 	.word	0x20070138

00081398 <xTaskGenericCreate>:
/*-----------------------------------------------------------
 * TASK CREATION API documented in task.h
 *----------------------------------------------------------*/

signed portBASE_TYPE xTaskGenericCreate( pdTASK_CODE pxTaskCode, const signed char * const pcName, unsigned short usStackDepth, void *pvParameters, unsigned portBASE_TYPE uxPriority, xTaskHandle *pxCreatedTask, portSTACK_TYPE *puxStackBuffer, const xMemoryRegion * const xRegions )
{
   81398:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8139c:	b083      	sub	sp, #12
   8139e:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   813a0:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
   813a4:	9e0e      	ldr	r6, [sp, #56]	; 0x38
signed portBASE_TYPE xReturn;
tskTCB * pxNewTCB;

	configASSERT( pxTaskCode );
   813a6:	9001      	str	r0, [sp, #4]
   813a8:	b918      	cbnz	r0, 813b2 <xTaskGenericCreate+0x1a>
   813aa:	4b62      	ldr	r3, [pc, #392]	; (81534 <xTaskGenericCreate+0x19c>)
   813ac:	4798      	blx	r3
   813ae:	bf00      	nop
   813b0:	e7fd      	b.n	813ae <xTaskGenericCreate+0x16>
   813b2:	4689      	mov	r9, r1
   813b4:	4615      	mov	r5, r2
   813b6:	469b      	mov	fp, r3
	configASSERT( ( ( uxPriority & ( ~portPRIVILEGE_BIT ) ) < configMAX_PRIORITIES ) );
   813b8:	2f09      	cmp	r7, #9
   813ba:	d903      	bls.n	813c4 <xTaskGenericCreate+0x2c>
   813bc:	4b5d      	ldr	r3, [pc, #372]	; (81534 <xTaskGenericCreate+0x19c>)
   813be:	4798      	blx	r3
   813c0:	bf00      	nop
   813c2:	e7fd      	b.n	813c0 <xTaskGenericCreate+0x28>
{
tskTCB *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( tskTCB * ) pvPortMalloc( sizeof( tskTCB ) );
   813c4:	2050      	movs	r0, #80	; 0x50
   813c6:	4b5c      	ldr	r3, [pc, #368]	; (81538 <xTaskGenericCreate+0x1a0>)
   813c8:	4798      	blx	r3

	if( pxNewTCB != NULL )
   813ca:	4604      	mov	r4, r0
   813cc:	2800      	cmp	r0, #0
   813ce:	f000 80ab 	beq.w	81528 <xTaskGenericCreate+0x190>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
   813d2:	2e00      	cmp	r6, #0
   813d4:	f040 80a5 	bne.w	81522 <xTaskGenericCreate+0x18a>
   813d8:	00a8      	lsls	r0, r5, #2
   813da:	4b57      	ldr	r3, [pc, #348]	; (81538 <xTaskGenericCreate+0x1a0>)
   813dc:	4798      	blx	r3
   813de:	6320      	str	r0, [r4, #48]	; 0x30

		if( pxNewTCB->pxStack == NULL )
   813e0:	b918      	cbnz	r0, 813ea <xTaskGenericCreate+0x52>
		{
			/* Could not allocate the stack.  Delete the allocated TCB. */
			vPortFree( pxNewTCB );
   813e2:	4620      	mov	r0, r4
   813e4:	4b55      	ldr	r3, [pc, #340]	; (8153c <xTaskGenericCreate+0x1a4>)
   813e6:	4798      	blx	r3
   813e8:	e09e      	b.n	81528 <xTaskGenericCreate+0x190>
			pxNewTCB = NULL;
		}
		else
		{
			/* Just to help debugging. */
			memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( portSTACK_TYPE ) );
   813ea:	21a5      	movs	r1, #165	; 0xa5
   813ec:	00aa      	lsls	r2, r5, #2
   813ee:	4b54      	ldr	r3, [pc, #336]	; (81540 <xTaskGenericCreate+0x1a8>)
   813f0:	4798      	blx	r3
		stack grows from high memory to low (as per the 80x86) or visa versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( unsigned short ) 1 );
   813f2:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
   813f6:	3d01      	subs	r5, #1
   813f8:	6b23      	ldr	r3, [r4, #48]	; 0x30
   813fa:	eb03 0385 	add.w	r3, r3, r5, lsl #2
			pxTopOfStack = ( portSTACK_TYPE * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK  ) );
   813fe:	f023 0507 	bic.w	r5, r3, #7
{
	/* Store the function name in the TCB. */
	#if configMAX_TASK_NAME_LEN > 1
	{
		/* Don't bring strncpy into the build unnecessarily. */
		strncpy( ( char * ) pxTCB->pcTaskName, ( const char * ) pcName, ( unsigned short ) configMAX_TASK_NAME_LEN );
   81402:	f104 0034 	add.w	r0, r4, #52	; 0x34
   81406:	4649      	mov	r1, r9
   81408:	2210      	movs	r2, #16
   8140a:	4b4e      	ldr	r3, [pc, #312]	; (81544 <xTaskGenericCreate+0x1ac>)
   8140c:	4798      	blx	r3
	}
	#endif
	pxTCB->pcTaskName[ ( unsigned short ) configMAX_TASK_NAME_LEN - ( unsigned short ) 1 ] = ( signed char ) '\0';
   8140e:	2300      	movs	r3, #0
   81410:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   81414:	463e      	mov	r6, r7
   81416:	2f09      	cmp	r7, #9
   81418:	bf28      	it	cs
   8141a:	2609      	movcs	r6, #9
	if( uxPriority >= configMAX_PRIORITIES )
	{
		uxPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
	}

	pxTCB->uxPriority = uxPriority;
   8141c:	62e6      	str	r6, [r4, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
   8141e:	64e6      	str	r6, [r4, #76]	; 0x4c
	}
	#endif

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
   81420:	f104 0904 	add.w	r9, r4, #4
   81424:	4648      	mov	r0, r9
   81426:	f8df a16c 	ldr.w	sl, [pc, #364]	; 81594 <xTaskGenericCreate+0x1fc>
   8142a:	47d0      	blx	sl
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
   8142c:	f104 0018 	add.w	r0, r4, #24
   81430:	47d0      	blx	sl

	/* Set the pxTCB as a link back from the xListItem.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
   81432:	6124      	str	r4, [r4, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
   81434:	f1c6 060a 	rsb	r6, r6, #10
   81438:	8326      	strh	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
   8143a:	6264      	str	r4, [r4, #36]	; 0x24
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
   8143c:	4628      	mov	r0, r5
   8143e:	9901      	ldr	r1, [sp, #4]
   81440:	465a      	mov	r2, fp
   81442:	4b41      	ldr	r3, [pc, #260]	; (81548 <xTaskGenericCreate+0x1b0>)
   81444:	4798      	blx	r3
   81446:	6020      	str	r0, [r4, #0]
		}
		#endif

		/* Check the alignment of the initialised stack. */
		portALIGNMENT_ASSERT_pxCurrentTCB( ( ( ( unsigned long ) pxNewTCB->pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
   81448:	f010 0f07 	tst.w	r0, #7
   8144c:	d003      	beq.n	81456 <xTaskGenericCreate+0xbe>
   8144e:	4b39      	ldr	r3, [pc, #228]	; (81534 <xTaskGenericCreate+0x19c>)
   81450:	4798      	blx	r3
   81452:	bf00      	nop
   81454:	e7fd      	b.n	81452 <xTaskGenericCreate+0xba>

		if( ( void * ) pxCreatedTask != NULL )
   81456:	f1b8 0f00 	cmp.w	r8, #0
   8145a:	d001      	beq.n	81460 <xTaskGenericCreate+0xc8>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( xTaskHandle ) pxNewTCB;
   8145c:	f8c8 4000 	str.w	r4, [r8]
		}

		/* We are going to manipulate the task queues to add this task to a
		ready list, so must make sure no interrupts occur. */
		taskENTER_CRITICAL();
   81460:	4b3a      	ldr	r3, [pc, #232]	; (8154c <xTaskGenericCreate+0x1b4>)
   81462:	4798      	blx	r3
		{
			uxCurrentNumberOfTasks++;
   81464:	4a3a      	ldr	r2, [pc, #232]	; (81550 <xTaskGenericCreate+0x1b8>)
   81466:	6813      	ldr	r3, [r2, #0]
   81468:	3301      	adds	r3, #1
   8146a:	6013      	str	r3, [r2, #0]
			if( pxCurrentTCB == NULL )
   8146c:	4b39      	ldr	r3, [pc, #228]	; (81554 <xTaskGenericCreate+0x1bc>)
   8146e:	681b      	ldr	r3, [r3, #0]
   81470:	bb0b      	cbnz	r3, 814b6 <xTaskGenericCreate+0x11e>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
   81472:	4b38      	ldr	r3, [pc, #224]	; (81554 <xTaskGenericCreate+0x1bc>)
   81474:	601c      	str	r4, [r3, #0]

				if( uxCurrentNumberOfTasks == ( unsigned portBASE_TYPE ) 1 )
   81476:	6813      	ldr	r3, [r2, #0]
   81478:	2b01      	cmp	r3, #1
   8147a:	d126      	bne.n	814ca <xTaskGenericCreate+0x132>
   8147c:	4d36      	ldr	r5, [pc, #216]	; (81558 <xTaskGenericCreate+0x1c0>)
   8147e:	f105 08c8 	add.w	r8, r5, #200	; 0xc8
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
   81482:	4e36      	ldr	r6, [pc, #216]	; (8155c <xTaskGenericCreate+0x1c4>)
   81484:	4628      	mov	r0, r5
   81486:	47b0      	blx	r6
   81488:	3514      	adds	r5, #20

static void prvInitialiseTaskLists( void )
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
   8148a:	4545      	cmp	r5, r8
   8148c:	d1fa      	bne.n	81484 <xTaskGenericCreate+0xec>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( ( xList * ) &xDelayedTaskList1 );
   8148e:	f8df 8108 	ldr.w	r8, [pc, #264]	; 81598 <xTaskGenericCreate+0x200>
   81492:	4640      	mov	r0, r8
   81494:	4d31      	ldr	r5, [pc, #196]	; (8155c <xTaskGenericCreate+0x1c4>)
   81496:	47a8      	blx	r5
	vListInitialise( ( xList * ) &xDelayedTaskList2 );
   81498:	4e31      	ldr	r6, [pc, #196]	; (81560 <xTaskGenericCreate+0x1c8>)
   8149a:	4630      	mov	r0, r6
   8149c:	47a8      	blx	r5
	vListInitialise( ( xList * ) &xPendingReadyList );
   8149e:	4831      	ldr	r0, [pc, #196]	; (81564 <xTaskGenericCreate+0x1cc>)
   814a0:	47a8      	blx	r5

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( ( xList * ) &xTasksWaitingTermination );
   814a2:	4831      	ldr	r0, [pc, #196]	; (81568 <xTaskGenericCreate+0x1d0>)
   814a4:	47a8      	blx	r5
	}
	#endif

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( ( xList * ) &xSuspendedTaskList );
   814a6:	4831      	ldr	r0, [pc, #196]	; (8156c <xTaskGenericCreate+0x1d4>)
   814a8:	47a8      	blx	r5
	}
	#endif

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
   814aa:	4b31      	ldr	r3, [pc, #196]	; (81570 <xTaskGenericCreate+0x1d8>)
   814ac:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
   814b0:	4b30      	ldr	r3, [pc, #192]	; (81574 <xTaskGenericCreate+0x1dc>)
   814b2:	601e      	str	r6, [r3, #0]
   814b4:	e009      	b.n	814ca <xTaskGenericCreate+0x132>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
   814b6:	4b30      	ldr	r3, [pc, #192]	; (81578 <xTaskGenericCreate+0x1e0>)
   814b8:	681b      	ldr	r3, [r3, #0]
   814ba:	b933      	cbnz	r3, 814ca <xTaskGenericCreate+0x132>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
   814bc:	4b25      	ldr	r3, [pc, #148]	; (81554 <xTaskGenericCreate+0x1bc>)
   814be:	681b      	ldr	r3, [r3, #0]
   814c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   814c2:	429f      	cmp	r7, r3
					{
						pxCurrentTCB = pxNewTCB;
   814c4:	bf24      	itt	cs
   814c6:	4b23      	ldrcs	r3, [pc, #140]	; (81554 <xTaskGenericCreate+0x1bc>)
   814c8:	601c      	strcs	r4, [r3, #0]
				}
			}

			/* Remember the top priority to make context switching faster.  Use
			the priority in pxNewTCB as this has been capped to a valid value. */
			if( pxNewTCB->uxPriority > uxTopUsedPriority )
   814ca:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   814cc:	4b2b      	ldr	r3, [pc, #172]	; (8157c <xTaskGenericCreate+0x1e4>)
   814ce:	681b      	ldr	r3, [r3, #0]
   814d0:	4298      	cmp	r0, r3
			{
				uxTopUsedPriority = pxNewTCB->uxPriority;
   814d2:	bf84      	itt	hi
   814d4:	4b29      	ldrhi	r3, [pc, #164]	; (8157c <xTaskGenericCreate+0x1e4>)
   814d6:	6018      	strhi	r0, [r3, #0]
			}

			#if ( configUSE_TRACE_FACILITY == 1 )
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
   814d8:	4a29      	ldr	r2, [pc, #164]	; (81580 <xTaskGenericCreate+0x1e8>)
   814da:	6813      	ldr	r3, [r2, #0]
   814dc:	6463      	str	r3, [r4, #68]	; 0x44
			}
			#endif
			uxTaskNumber++;
   814de:	3301      	adds	r3, #1
   814e0:	6013      	str	r3, [r2, #0]

			prvAddTaskToReadyQueue( pxNewTCB );
   814e2:	4b28      	ldr	r3, [pc, #160]	; (81584 <xTaskGenericCreate+0x1ec>)
   814e4:	681b      	ldr	r3, [r3, #0]
   814e6:	4298      	cmp	r0, r3
   814e8:	bf84      	itt	hi
   814ea:	4b26      	ldrhi	r3, [pc, #152]	; (81584 <xTaskGenericCreate+0x1ec>)
   814ec:	6018      	strhi	r0, [r3, #0]
   814ee:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   814f2:	4b19      	ldr	r3, [pc, #100]	; (81558 <xTaskGenericCreate+0x1c0>)
   814f4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   814f8:	4649      	mov	r1, r9
   814fa:	4b23      	ldr	r3, [pc, #140]	; (81588 <xTaskGenericCreate+0x1f0>)
   814fc:	4798      	blx	r3

			xReturn = pdPASS;
			portSETUP_TCB( pxNewTCB );
			traceTASK_CREATE( pxNewTCB );
		}
		taskEXIT_CRITICAL();
   814fe:	4b23      	ldr	r3, [pc, #140]	; (8158c <xTaskGenericCreate+0x1f4>)
   81500:	4798      	blx	r3
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
	{
		if( xSchedulerRunning != pdFALSE )
   81502:	4b1d      	ldr	r3, [pc, #116]	; (81578 <xTaskGenericCreate+0x1e0>)
   81504:	681b      	ldr	r3, [r3, #0]
   81506:	b143      	cbz	r3, 8151a <xTaskGenericCreate+0x182>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
   81508:	4b12      	ldr	r3, [pc, #72]	; (81554 <xTaskGenericCreate+0x1bc>)
   8150a:	681b      	ldr	r3, [r3, #0]
   8150c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   8150e:	429f      	cmp	r7, r3
   81510:	d905      	bls.n	8151e <xTaskGenericCreate+0x186>
			{
				portYIELD_WITHIN_API();
   81512:	4b1f      	ldr	r3, [pc, #124]	; (81590 <xTaskGenericCreate+0x1f8>)
   81514:	4798      	blx	r3
   81516:	2001      	movs	r0, #1
   81518:	e008      	b.n	8152c <xTaskGenericCreate+0x194>
   8151a:	2001      	movs	r0, #1
   8151c:	e006      	b.n	8152c <xTaskGenericCreate+0x194>
   8151e:	2001      	movs	r0, #1
   81520:	e004      	b.n	8152c <xTaskGenericCreate+0x194>
	if( pxNewTCB != NULL )
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
   81522:	6306      	str	r6, [r0, #48]	; 0x30
   81524:	4630      	mov	r0, r6
   81526:	e760      	b.n	813ea <xTaskGenericCreate+0x52>
		}
		taskEXIT_CRITICAL();
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
   81528:	f04f 30ff 	mov.w	r0, #4294967295
			}
		}
	}

	return xReturn;
}
   8152c:	b003      	add	sp, #12
   8152e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   81532:	bf00      	nop
   81534:	00080b89 	.word	0x00080b89
   81538:	00080ce5 	.word	0x00080ce5
   8153c:	00080dad 	.word	0x00080dad
   81540:	000834c5 	.word	0x000834c5
   81544:	000836c5 	.word	0x000836c5
   81548:	00080b3d 	.word	0x00080b3d
   8154c:	00080b99 	.word	0x00080b99
   81550:	20078b64 	.word	0x20078b64
   81554:	20078b3c 	.word	0x20078b3c
   81558:	20078a5c 	.word	0x20078a5c
   8155c:	00080a81 	.word	0x00080a81
   81560:	20078a44 	.word	0x20078a44
   81564:	20078b40 	.word	0x20078b40
   81568:	20078b24 	.word	0x20078b24
   8156c:	20078a10 	.word	0x20078a10
   81570:	20078a24 	.word	0x20078a24
   81574:	20078b5c 	.word	0x20078b5c
   81578:	20078a28 	.word	0x20078a28
   8157c:	20078b6c 	.word	0x20078b6c
   81580:	20078b60 	.word	0x20078b60
   81584:	20078a58 	.word	0x20078a58
   81588:	00080aa1 	.word	0x00080aa1
   8158c:	00080bb9 	.word	0x00080bb9
   81590:	00080b79 	.word	0x00080b79
   81594:	00080a99 	.word	0x00080a99
   81598:	20078a30 	.word	0x20078a30

0008159c <vTaskStartScheduler>:
 * PUBLIC SCHEDULER CONTROL documented in task.h
 *----------------------------------------------------------*/


void vTaskStartScheduler( void )
{
   8159c:	b510      	push	{r4, lr}
   8159e:	b084      	sub	sp, #16
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle );
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );
   815a0:	2300      	movs	r3, #0
   815a2:	9300      	str	r3, [sp, #0]
   815a4:	9301      	str	r3, [sp, #4]
   815a6:	9302      	str	r3, [sp, #8]
   815a8:	9303      	str	r3, [sp, #12]
   815aa:	480f      	ldr	r0, [pc, #60]	; (815e8 <vTaskStartScheduler+0x4c>)
   815ac:	490f      	ldr	r1, [pc, #60]	; (815ec <vTaskStartScheduler+0x50>)
   815ae:	f44f 7280 	mov.w	r2, #256	; 0x100
   815b2:	4c0f      	ldr	r4, [pc, #60]	; (815f0 <vTaskStartScheduler+0x54>)
   815b4:	47a0      	blx	r4
	}
	#endif

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
   815b6:	2801      	cmp	r0, #1
   815b8:	d10e      	bne.n	815d8 <vTaskStartScheduler+0x3c>
		{
			xReturn = xTimerCreateTimerTask();
   815ba:	4b0e      	ldr	r3, [pc, #56]	; (815f4 <vTaskStartScheduler+0x58>)
   815bc:	4798      	blx	r3
		}
	}
	#endif

	if( xReturn == pdPASS )
   815be:	2801      	cmp	r0, #1
   815c0:	d10a      	bne.n	815d8 <vTaskStartScheduler+0x3c>
		so interrupts will automatically get re-enabled when the first task
		starts to run.

		STEPPING THROUGH HERE USING A DEBUGGER CAN CAUSE BIG PROBLEMS IF THE
		DEBUGGER ALLOWS INTERRUPTS TO BE PROCESSED. */
		portDISABLE_INTERRUPTS();
   815c2:	4b0d      	ldr	r3, [pc, #52]	; (815f8 <vTaskStartScheduler+0x5c>)
   815c4:	4798      	blx	r3

		xSchedulerRunning = pdTRUE;
   815c6:	2201      	movs	r2, #1
   815c8:	4b0c      	ldr	r3, [pc, #48]	; (815fc <vTaskStartScheduler+0x60>)
   815ca:	601a      	str	r2, [r3, #0]
		xTickCount = ( portTickType ) 0U;
   815cc:	2200      	movs	r2, #0
   815ce:	4b0c      	ldr	r3, [pc, #48]	; (81600 <vTaskStartScheduler+0x64>)
   815d0:	801a      	strh	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
   815d2:	4b0c      	ldr	r3, [pc, #48]	; (81604 <vTaskStartScheduler+0x68>)
   815d4:	4798      	blx	r3
   815d6:	e004      	b.n	815e2 <vTaskStartScheduler+0x46>
			/* Should only reach here if a task calls xTaskEndScheduler(). */
		}
	}

	/* This line will only be reached if the kernel could not be started. */
	configASSERT( xReturn );
   815d8:	b918      	cbnz	r0, 815e2 <vTaskStartScheduler+0x46>
   815da:	4b07      	ldr	r3, [pc, #28]	; (815f8 <vTaskStartScheduler+0x5c>)
   815dc:	4798      	blx	r3
   815de:	bf00      	nop
   815e0:	e7fd      	b.n	815de <vTaskStartScheduler+0x42>
}
   815e2:	b004      	add	sp, #16
   815e4:	bd10      	pop	{r4, pc}
   815e6:	bf00      	nop
   815e8:	0008194d 	.word	0x0008194d
   815ec:	000863b4 	.word	0x000863b4
   815f0:	00081399 	.word	0x00081399
   815f4:	00081e0d 	.word	0x00081e0d
   815f8:	00080b89 	.word	0x00080b89
   815fc:	20078a28 	.word	0x20078a28
   81600:	20078b58 	.word	0x20078b58
   81604:	00080c55 	.word	0x00080c55

00081608 <vTaskSuspendAll>:

void vTaskSuspendAll( void )
{
	/* A critical section is not required as the variable is of type
	portBASE_TYPE. */
	++uxSchedulerSuspended;
   81608:	4a02      	ldr	r2, [pc, #8]	; (81614 <vTaskSuspendAll+0xc>)
   8160a:	6813      	ldr	r3, [r2, #0]
   8160c:	3301      	adds	r3, #1
   8160e:	6013      	str	r3, [r2, #0]
   81610:	4770      	bx	lr
   81612:	bf00      	nop
   81614:	20078b54 	.word	0x20078b54

00081618 <xTaskGetTickCount>:
 *----------------------------------------------------------*/



portTickType xTaskGetTickCount( void )
{
   81618:	b510      	push	{r4, lr}
portTickType xTicks;

	/* Critical section required if running on a 16 bit processor. */
	taskENTER_CRITICAL();
   8161a:	4b04      	ldr	r3, [pc, #16]	; (8162c <xTaskGetTickCount+0x14>)
   8161c:	4798      	blx	r3
	{
		xTicks = xTickCount;
   8161e:	4b04      	ldr	r3, [pc, #16]	; (81630 <xTaskGetTickCount+0x18>)
   81620:	881c      	ldrh	r4, [r3, #0]
   81622:	b2a4      	uxth	r4, r4
	}
	taskEXIT_CRITICAL();
   81624:	4b03      	ldr	r3, [pc, #12]	; (81634 <xTaskGetTickCount+0x1c>)
   81626:	4798      	blx	r3

	return xTicks;
}
   81628:	4620      	mov	r0, r4
   8162a:	bd10      	pop	{r4, pc}
   8162c:	00080b99 	.word	0x00080b99
   81630:	20078b58 	.word	0x20078b58
   81634:	00080bb9 	.word	0x00080bb9

00081638 <vTaskIncrementTick>:
 * SCHEDULER INTERNALS AVAILABLE FOR PORTING PURPOSES
 * documented in task.h
 *----------------------------------------------------------*/

void vTaskIncrementTick( void )
{
   81638:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   8163c:	4b3d      	ldr	r3, [pc, #244]	; (81734 <vTaskIncrementTick+0xfc>)
   8163e:	681b      	ldr	r3, [r3, #0]
   81640:	2b00      	cmp	r3, #0
   81642:	d171      	bne.n	81728 <vTaskIncrementTick+0xf0>
	{
		++xTickCount;
   81644:	4a3c      	ldr	r2, [pc, #240]	; (81738 <vTaskIncrementTick+0x100>)
   81646:	8813      	ldrh	r3, [r2, #0]
   81648:	3301      	adds	r3, #1
   8164a:	b29b      	uxth	r3, r3
   8164c:	8013      	strh	r3, [r2, #0]
		if( xTickCount == ( portTickType ) 0U )
   8164e:	8813      	ldrh	r3, [r2, #0]
   81650:	b29b      	uxth	r3, r3
   81652:	bb03      	cbnz	r3, 81696 <vTaskIncrementTick+0x5e>
			xList *pxTemp;

			/* Tick count has overflowed so we need to swap the delay lists.
			If there are any items in pxDelayedTaskList here then there is
			an error! */
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );
   81654:	4b39      	ldr	r3, [pc, #228]	; (8173c <vTaskIncrementTick+0x104>)
   81656:	681b      	ldr	r3, [r3, #0]
   81658:	681b      	ldr	r3, [r3, #0]
   8165a:	b11b      	cbz	r3, 81664 <vTaskIncrementTick+0x2c>
   8165c:	4b38      	ldr	r3, [pc, #224]	; (81740 <vTaskIncrementTick+0x108>)
   8165e:	4798      	blx	r3
   81660:	bf00      	nop
   81662:	e7fd      	b.n	81660 <vTaskIncrementTick+0x28>

			pxTemp = pxDelayedTaskList;
   81664:	4b35      	ldr	r3, [pc, #212]	; (8173c <vTaskIncrementTick+0x104>)
   81666:	6819      	ldr	r1, [r3, #0]
			pxDelayedTaskList = pxOverflowDelayedTaskList;
   81668:	4a36      	ldr	r2, [pc, #216]	; (81744 <vTaskIncrementTick+0x10c>)
   8166a:	6810      	ldr	r0, [r2, #0]
   8166c:	6018      	str	r0, [r3, #0]
			pxOverflowDelayedTaskList = pxTemp;
   8166e:	6011      	str	r1, [r2, #0]
			xNumOfOverflows++;
   81670:	4935      	ldr	r1, [pc, #212]	; (81748 <vTaskIncrementTick+0x110>)
   81672:	680a      	ldr	r2, [r1, #0]
   81674:	3201      	adds	r2, #1
   81676:	600a      	str	r2, [r1, #0]

			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   81678:	681b      	ldr	r3, [r3, #0]
   8167a:	681b      	ldr	r3, [r3, #0]
   8167c:	b923      	cbnz	r3, 81688 <vTaskIncrementTick+0x50>
				/* The new current delayed list is empty.  Set
				xNextTaskUnblockTime to the maximum possible value so it is
				extremely unlikely that the
				if( xTickCount >= xNextTaskUnblockTime ) test will pass until
				there is an item in the delayed list. */
				xNextTaskUnblockTime = portMAX_DELAY;
   8167e:	f64f 72ff 	movw	r2, #65535	; 0xffff
   81682:	4b32      	ldr	r3, [pc, #200]	; (8174c <vTaskIncrementTick+0x114>)
   81684:	801a      	strh	r2, [r3, #0]
   81686:	e006      	b.n	81696 <vTaskIncrementTick+0x5e>
			{
				/* The new current delayed list is not empty, get the value of
				the item at the head of the delayed list.  This is the time at
				which the task at the head of the delayed list should be removed
				from the Blocked state. */
				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
   81688:	4b2c      	ldr	r3, [pc, #176]	; (8173c <vTaskIncrementTick+0x104>)
   8168a:	681b      	ldr	r3, [r3, #0]
   8168c:	68db      	ldr	r3, [r3, #12]
   8168e:	68db      	ldr	r3, [r3, #12]
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
   81690:	889a      	ldrh	r2, [r3, #4]
   81692:	4b2e      	ldr	r3, [pc, #184]	; (8174c <vTaskIncrementTick+0x114>)
   81694:	801a      	strh	r2, [r3, #0]
			}
		}

		/* See if this tick has made a timeout expire. */
		prvCheckDelayedTasks();
   81696:	4b28      	ldr	r3, [pc, #160]	; (81738 <vTaskIncrementTick+0x100>)
   81698:	881a      	ldrh	r2, [r3, #0]
   8169a:	b292      	uxth	r2, r2
   8169c:	4b2b      	ldr	r3, [pc, #172]	; (8174c <vTaskIncrementTick+0x114>)
   8169e:	881b      	ldrh	r3, [r3, #0]
   816a0:	b29b      	uxth	r3, r3
   816a2:	429a      	cmp	r2, r3
   816a4:	d344      	bcc.n	81730 <vTaskIncrementTick+0xf8>
   816a6:	4b25      	ldr	r3, [pc, #148]	; (8173c <vTaskIncrementTick+0x104>)
   816a8:	681b      	ldr	r3, [r3, #0]
   816aa:	681b      	ldr	r3, [r3, #0]
   816ac:	b16b      	cbz	r3, 816ca <vTaskIncrementTick+0x92>
   816ae:	4b23      	ldr	r3, [pc, #140]	; (8173c <vTaskIncrementTick+0x104>)
   816b0:	681b      	ldr	r3, [r3, #0]
   816b2:	68db      	ldr	r3, [r3, #12]
   816b4:	68dc      	ldr	r4, [r3, #12]
   816b6:	88a2      	ldrh	r2, [r4, #4]
   816b8:	4b1f      	ldr	r3, [pc, #124]	; (81738 <vTaskIncrementTick+0x100>)
   816ba:	881b      	ldrh	r3, [r3, #0]
   816bc:	b29b      	uxth	r3, r3
   816be:	429a      	cmp	r2, r3
   816c0:	d813      	bhi.n	816ea <vTaskIncrementTick+0xb2>
   816c2:	4d23      	ldr	r5, [pc, #140]	; (81750 <vTaskIncrementTick+0x118>)
   816c4:	4e23      	ldr	r6, [pc, #140]	; (81754 <vTaskIncrementTick+0x11c>)
   816c6:	4f24      	ldr	r7, [pc, #144]	; (81758 <vTaskIncrementTick+0x120>)
   816c8:	e013      	b.n	816f2 <vTaskIncrementTick+0xba>
   816ca:	f64f 72ff 	movw	r2, #65535	; 0xffff
   816ce:	4b1f      	ldr	r3, [pc, #124]	; (8174c <vTaskIncrementTick+0x114>)
   816d0:	801a      	strh	r2, [r3, #0]
   816d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   816d6:	4b19      	ldr	r3, [pc, #100]	; (8173c <vTaskIncrementTick+0x104>)
   816d8:	681b      	ldr	r3, [r3, #0]
   816da:	68db      	ldr	r3, [r3, #12]
   816dc:	68dc      	ldr	r4, [r3, #12]
   816de:	88a2      	ldrh	r2, [r4, #4]
   816e0:	4b15      	ldr	r3, [pc, #84]	; (81738 <vTaskIncrementTick+0x100>)
   816e2:	881b      	ldrh	r3, [r3, #0]
   816e4:	b29b      	uxth	r3, r3
   816e6:	429a      	cmp	r2, r3
   816e8:	d903      	bls.n	816f2 <vTaskIncrementTick+0xba>
   816ea:	4b18      	ldr	r3, [pc, #96]	; (8174c <vTaskIncrementTick+0x114>)
   816ec:	801a      	strh	r2, [r3, #0]
   816ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   816f2:	f104 0804 	add.w	r8, r4, #4
   816f6:	4640      	mov	r0, r8
   816f8:	47a8      	blx	r5
   816fa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   816fc:	b113      	cbz	r3, 81704 <vTaskIncrementTick+0xcc>
   816fe:	f104 0018 	add.w	r0, r4, #24
   81702:	47a8      	blx	r5
   81704:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   81706:	6833      	ldr	r3, [r6, #0]
   81708:	4298      	cmp	r0, r3
   8170a:	bf88      	it	hi
   8170c:	6030      	strhi	r0, [r6, #0]
   8170e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   81712:	eb07 0080 	add.w	r0, r7, r0, lsl #2
   81716:	4641      	mov	r1, r8
   81718:	4b10      	ldr	r3, [pc, #64]	; (8175c <vTaskIncrementTick+0x124>)
   8171a:	4798      	blx	r3
   8171c:	4b07      	ldr	r3, [pc, #28]	; (8173c <vTaskIncrementTick+0x104>)
   8171e:	681b      	ldr	r3, [r3, #0]
   81720:	681b      	ldr	r3, [r3, #0]
   81722:	2b00      	cmp	r3, #0
   81724:	d1d7      	bne.n	816d6 <vTaskIncrementTick+0x9e>
   81726:	e7d0      	b.n	816ca <vTaskIncrementTick+0x92>
	}
	else
	{
		++uxMissedTicks;
   81728:	4a0d      	ldr	r2, [pc, #52]	; (81760 <vTaskIncrementTick+0x128>)
   8172a:	6813      	ldr	r3, [r2, #0]
   8172c:	3301      	adds	r3, #1
   8172e:	6013      	str	r3, [r2, #0]
   81730:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   81734:	20078b54 	.word	0x20078b54
   81738:	20078b58 	.word	0x20078b58
   8173c:	20078a24 	.word	0x20078a24
   81740:	00080b89 	.word	0x00080b89
   81744:	20078b5c 	.word	0x20078b5c
   81748:	20078b38 	.word	0x20078b38
   8174c:	20070138 	.word	0x20070138
   81750:	00080b01 	.word	0x00080b01
   81754:	20078a58 	.word	0x20078a58
   81758:	20078a5c 	.word	0x20078a5c
   8175c:	00080aa1 	.word	0x00080aa1
   81760:	20078a0c 	.word	0x20078a0c

00081764 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE != 0  */
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
   81764:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
   81768:	4b30      	ldr	r3, [pc, #192]	; (8182c <xTaskResumeAll+0xc8>)
   8176a:	681b      	ldr	r3, [r3, #0]
   8176c:	b91b      	cbnz	r3, 81776 <xTaskResumeAll+0x12>
   8176e:	4b30      	ldr	r3, [pc, #192]	; (81830 <xTaskResumeAll+0xcc>)
   81770:	4798      	blx	r3
   81772:	bf00      	nop
   81774:	e7fd      	b.n	81772 <xTaskResumeAll+0xe>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
   81776:	4b2f      	ldr	r3, [pc, #188]	; (81834 <xTaskResumeAll+0xd0>)
   81778:	4798      	blx	r3
	{
		--uxSchedulerSuspended;
   8177a:	4b2c      	ldr	r3, [pc, #176]	; (8182c <xTaskResumeAll+0xc8>)
   8177c:	681a      	ldr	r2, [r3, #0]
   8177e:	3a01      	subs	r2, #1
   81780:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   81782:	681b      	ldr	r3, [r3, #0]
   81784:	2b00      	cmp	r3, #0
   81786:	d149      	bne.n	8181c <xTaskResumeAll+0xb8>
		{
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0U )
   81788:	4b2b      	ldr	r3, [pc, #172]	; (81838 <xTaskResumeAll+0xd4>)
   8178a:	681b      	ldr	r3, [r3, #0]
   8178c:	bb03      	cbnz	r3, 817d0 <xTaskResumeAll+0x6c>
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;
   8178e:	2400      	movs	r4, #0
   81790:	e047      	b.n	81822 <xTaskResumeAll+0xbe>

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
   81792:	f8d8 300c 	ldr.w	r3, [r8, #12]
   81796:	68dc      	ldr	r4, [r3, #12]
					uxListRemove( &( pxTCB->xEventListItem ) );
   81798:	f104 0018 	add.w	r0, r4, #24
   8179c:	47b8      	blx	r7
					uxListRemove( &( pxTCB->xGenericListItem ) );
   8179e:	f104 0904 	add.w	r9, r4, #4
   817a2:	4648      	mov	r0, r9
   817a4:	47b8      	blx	r7
					prvAddTaskToReadyQueue( pxTCB );
   817a6:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   817a8:	6833      	ldr	r3, [r6, #0]
   817aa:	4298      	cmp	r0, r3
   817ac:	bf88      	it	hi
   817ae:	6030      	strhi	r0, [r6, #0]
   817b0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   817b4:	4b21      	ldr	r3, [pc, #132]	; (8183c <xTaskResumeAll+0xd8>)
   817b6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   817ba:	4649      	mov	r1, r9
   817bc:	4b20      	ldr	r3, [pc, #128]	; (81840 <xTaskResumeAll+0xdc>)
   817be:	4798      	blx	r3

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
   817c0:	4b20      	ldr	r3, [pc, #128]	; (81844 <xTaskResumeAll+0xe0>)
   817c2:	681b      	ldr	r3, [r3, #0]
   817c4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   817c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
					{
						xYieldRequired = pdTRUE;
   817c8:	429a      	cmp	r2, r3
   817ca:	bf28      	it	cs
   817cc:	2501      	movcs	r5, #1
   817ce:	e004      	b.n	817da <xTaskResumeAll+0x76>
   817d0:	2500      	movs	r5, #0
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
   817d2:	f8df 8090 	ldr.w	r8, [pc, #144]	; 81864 <xTaskResumeAll+0x100>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
					uxListRemove( &( pxTCB->xEventListItem ) );
   817d6:	4f1c      	ldr	r7, [pc, #112]	; (81848 <xTaskResumeAll+0xe4>)
					uxListRemove( &( pxTCB->xGenericListItem ) );
					prvAddTaskToReadyQueue( pxTCB );
   817d8:	4e1c      	ldr	r6, [pc, #112]	; (8184c <xTaskResumeAll+0xe8>)
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
   817da:	f8d8 3000 	ldr.w	r3, [r8]
   817de:	2b00      	cmp	r3, #0
   817e0:	d1d7      	bne.n	81792 <xTaskResumeAll+0x2e>
				}

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
   817e2:	4b1b      	ldr	r3, [pc, #108]	; (81850 <xTaskResumeAll+0xec>)
   817e4:	681b      	ldr	r3, [r3, #0]
   817e6:	b163      	cbz	r3, 81802 <xTaskResumeAll+0x9e>
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
   817e8:	4b19      	ldr	r3, [pc, #100]	; (81850 <xTaskResumeAll+0xec>)
   817ea:	681b      	ldr	r3, [r3, #0]
   817ec:	b17b      	cbz	r3, 8180e <xTaskResumeAll+0xaa>
					{
						vTaskIncrementTick();
   817ee:	4d19      	ldr	r5, [pc, #100]	; (81854 <xTaskResumeAll+0xf0>)
						--uxMissedTicks;
   817f0:	4c17      	ldr	r4, [pc, #92]	; (81850 <xTaskResumeAll+0xec>)
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
					{
						vTaskIncrementTick();
   817f2:	47a8      	blx	r5
						--uxMissedTicks;
   817f4:	6823      	ldr	r3, [r4, #0]
   817f6:	3b01      	subs	r3, #1
   817f8:	6023      	str	r3, [r4, #0]
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
   817fa:	6823      	ldr	r3, [r4, #0]
   817fc:	2b00      	cmp	r3, #0
   817fe:	d1f8      	bne.n	817f2 <xTaskResumeAll+0x8e>
   81800:	e005      	b.n	8180e <xTaskResumeAll+0xaa>
						xYieldRequired = pdTRUE;
					}
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
   81802:	2d01      	cmp	r5, #1
   81804:	d003      	beq.n	8180e <xTaskResumeAll+0xaa>
   81806:	4b14      	ldr	r3, [pc, #80]	; (81858 <xTaskResumeAll+0xf4>)
   81808:	681b      	ldr	r3, [r3, #0]
   8180a:	2b01      	cmp	r3, #1
   8180c:	d108      	bne.n	81820 <xTaskResumeAll+0xbc>
				{
					xAlreadyYielded = pdTRUE;
					xMissedYield = pdFALSE;
   8180e:	2200      	movs	r2, #0
   81810:	4b11      	ldr	r3, [pc, #68]	; (81858 <xTaskResumeAll+0xf4>)
   81812:	601a      	str	r2, [r3, #0]
					portYIELD_WITHIN_API();
   81814:	4b11      	ldr	r3, [pc, #68]	; (8185c <xTaskResumeAll+0xf8>)
   81816:	4798      	blx	r3
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
				{
					xAlreadyYielded = pdTRUE;
   81818:	2401      	movs	r4, #1
   8181a:	e002      	b.n	81822 <xTaskResumeAll+0xbe>
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;
   8181c:	2400      	movs	r4, #0
   8181e:	e000      	b.n	81822 <xTaskResumeAll+0xbe>
   81820:	2400      	movs	r4, #0
					portYIELD_WITHIN_API();
				}
			}
		}
	}
	taskEXIT_CRITICAL();
   81822:	4b0f      	ldr	r3, [pc, #60]	; (81860 <xTaskResumeAll+0xfc>)
   81824:	4798      	blx	r3

	return xAlreadyYielded;
}
   81826:	4620      	mov	r0, r4
   81828:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   8182c:	20078b54 	.word	0x20078b54
   81830:	00080b89 	.word	0x00080b89
   81834:	00080b99 	.word	0x00080b99
   81838:	20078b64 	.word	0x20078b64
   8183c:	20078a5c 	.word	0x20078a5c
   81840:	00080aa1 	.word	0x00080aa1
   81844:	20078b3c 	.word	0x20078b3c
   81848:	00080b01 	.word	0x00080b01
   8184c:	20078a58 	.word	0x20078a58
   81850:	20078a0c 	.word	0x20078a0c
   81854:	00081639 	.word	0x00081639
   81858:	20078b68 	.word	0x20078b68
   8185c:	00080b79 	.word	0x00080b79
   81860:	00080bb9 	.word	0x00080bb9
   81864:	20078b40 	.word	0x20078b40

00081868 <vTaskDelayUntil>:
 *----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( portTickType * const pxPreviousWakeTime, portTickType xTimeIncrement )
	{
   81868:	b538      	push	{r3, r4, r5, lr}
	portTickType xTimeToWake;
	portBASE_TYPE xAlreadyYielded, xShouldDelay = pdFALSE;

		configASSERT( pxPreviousWakeTime );
   8186a:	b918      	cbnz	r0, 81874 <vTaskDelayUntil+0xc>
   8186c:	4b1c      	ldr	r3, [pc, #112]	; (818e0 <vTaskDelayUntil+0x78>)
   8186e:	4798      	blx	r3
   81870:	bf00      	nop
   81872:	e7fd      	b.n	81870 <vTaskDelayUntil+0x8>
   81874:	460c      	mov	r4, r1
   81876:	4605      	mov	r5, r0
		configASSERT( ( xTimeIncrement > 0U ) );
   81878:	b919      	cbnz	r1, 81882 <vTaskDelayUntil+0x1a>
   8187a:	4b19      	ldr	r3, [pc, #100]	; (818e0 <vTaskDelayUntil+0x78>)
   8187c:	4798      	blx	r3
   8187e:	bf00      	nop
   81880:	e7fd      	b.n	8187e <vTaskDelayUntil+0x16>

		vTaskSuspendAll();
   81882:	4b18      	ldr	r3, [pc, #96]	; (818e4 <vTaskDelayUntil+0x7c>)
   81884:	4798      	blx	r3
		{
			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
   81886:	882b      	ldrh	r3, [r5, #0]
   81888:	441c      	add	r4, r3
   8188a:	b2a4      	uxth	r4, r4

			if( xTickCount < *pxPreviousWakeTime )
   8188c:	4a16      	ldr	r2, [pc, #88]	; (818e8 <vTaskDelayUntil+0x80>)
   8188e:	8812      	ldrh	r2, [r2, #0]
   81890:	b292      	uxth	r2, r2
   81892:	4293      	cmp	r3, r2
   81894:	d908      	bls.n	818a8 <vTaskDelayUntil+0x40>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xTickCount ) )
   81896:	42a3      	cmp	r3, r4
   81898:	d91e      	bls.n	818d8 <vTaskDelayUntil+0x70>
   8189a:	4b13      	ldr	r3, [pc, #76]	; (818e8 <vTaskDelayUntil+0x80>)
   8189c:	881b      	ldrh	r3, [r3, #0]
   8189e:	b29b      	uxth	r3, r3
					xShouldDelay = pdTRUE;
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
   818a0:	802c      	strh	r4, [r5, #0]

			if( xShouldDelay != pdFALSE )
   818a2:	429c      	cmp	r4, r3
   818a4:	d910      	bls.n	818c8 <vTaskDelayUntil+0x60>
   818a6:	e007      	b.n	818b8 <vTaskDelayUntil+0x50>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xTickCount ) )
   818a8:	42a3      	cmp	r3, r4
   818aa:	d813      	bhi.n	818d4 <vTaskDelayUntil+0x6c>
   818ac:	4b0e      	ldr	r3, [pc, #56]	; (818e8 <vTaskDelayUntil+0x80>)
   818ae:	881b      	ldrh	r3, [r3, #0]
   818b0:	b29b      	uxth	r3, r3
   818b2:	429c      	cmp	r4, r3
   818b4:	d80e      	bhi.n	818d4 <vTaskDelayUntil+0x6c>
   818b6:	e00f      	b.n	818d8 <vTaskDelayUntil+0x70>
				traceTASK_DELAY_UNTIL();

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
   818b8:	4b0c      	ldr	r3, [pc, #48]	; (818ec <vTaskDelayUntil+0x84>)
   818ba:	6818      	ldr	r0, [r3, #0]
   818bc:	3004      	adds	r0, #4
   818be:	4b0c      	ldr	r3, [pc, #48]	; (818f0 <vTaskDelayUntil+0x88>)
   818c0:	4798      	blx	r3
					no need to check, and the port reset macro can be called
					directly. */
					portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
				}

				prvAddCurrentTaskToDelayedList( xTimeToWake );
   818c2:	4620      	mov	r0, r4
   818c4:	4b0b      	ldr	r3, [pc, #44]	; (818f4 <vTaskDelayUntil+0x8c>)
   818c6:	4798      	blx	r3
			}
		}
		xAlreadyYielded = xTaskResumeAll();
   818c8:	4b0b      	ldr	r3, [pc, #44]	; (818f8 <vTaskDelayUntil+0x90>)
   818ca:	4798      	blx	r3

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
   818cc:	b930      	cbnz	r0, 818dc <vTaskDelayUntil+0x74>
		{
			portYIELD_WITHIN_API();
   818ce:	4b0b      	ldr	r3, [pc, #44]	; (818fc <vTaskDelayUntil+0x94>)
   818d0:	4798      	blx	r3
   818d2:	bd38      	pop	{r3, r4, r5, pc}
					xShouldDelay = pdTRUE;
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
   818d4:	802c      	strh	r4, [r5, #0]
   818d6:	e7ef      	b.n	818b8 <vTaskDelayUntil+0x50>
   818d8:	802c      	strh	r4, [r5, #0]
   818da:	e7f5      	b.n	818c8 <vTaskDelayUntil+0x60>
   818dc:	bd38      	pop	{r3, r4, r5, pc}
   818de:	bf00      	nop
   818e0:	00080b89 	.word	0x00080b89
   818e4:	00081609 	.word	0x00081609
   818e8:	20078b58 	.word	0x20078b58
   818ec:	20078b3c 	.word	0x20078b3c
   818f0:	00080b01 	.word	0x00080b01
   818f4:	0008133d 	.word	0x0008133d
   818f8:	00081765 	.word	0x00081765
   818fc:	00080b79 	.word	0x00080b79

00081900 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( portTickType xTicksToDelay )
	{
   81900:	b510      	push	{r4, lr}
	portTickType xTimeToWake;
	signed portBASE_TYPE xAlreadyYielded = pdFALSE;

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( portTickType ) 0U )
   81902:	b188      	cbz	r0, 81928 <vTaskDelay+0x28>
   81904:	4604      	mov	r4, r0
		{
			vTaskSuspendAll();
   81906:	4b0a      	ldr	r3, [pc, #40]	; (81930 <vTaskDelay+0x30>)
   81908:	4798      	blx	r3
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
   8190a:	4b0a      	ldr	r3, [pc, #40]	; (81934 <vTaskDelay+0x34>)
   8190c:	881b      	ldrh	r3, [r3, #0]
   8190e:	441c      	add	r4, r3
   81910:	b2a4      	uxth	r4, r4

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
   81912:	4b09      	ldr	r3, [pc, #36]	; (81938 <vTaskDelay+0x38>)
   81914:	6818      	ldr	r0, [r3, #0]
   81916:	3004      	adds	r0, #4
   81918:	4b08      	ldr	r3, [pc, #32]	; (8193c <vTaskDelay+0x3c>)
   8191a:	4798      	blx	r3
					/* The current task must be in a ready list, so there is
					no need to check, and the port reset macro can be called
					directly. */
					portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
				}
				prvAddCurrentTaskToDelayedList( xTimeToWake );
   8191c:	4620      	mov	r0, r4
   8191e:	4b08      	ldr	r3, [pc, #32]	; (81940 <vTaskDelay+0x40>)
   81920:	4798      	blx	r3
			}
			xAlreadyYielded = xTaskResumeAll();
   81922:	4b08      	ldr	r3, [pc, #32]	; (81944 <vTaskDelay+0x44>)
   81924:	4798      	blx	r3
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
   81926:	b908      	cbnz	r0, 8192c <vTaskDelay+0x2c>
		{
			portYIELD_WITHIN_API();
   81928:	4b07      	ldr	r3, [pc, #28]	; (81948 <vTaskDelay+0x48>)
   8192a:	4798      	blx	r3
   8192c:	bd10      	pop	{r4, pc}
   8192e:	bf00      	nop
   81930:	00081609 	.word	0x00081609
   81934:	20078b58 	.word	0x20078b58
   81938:	20078b3c 	.word	0x20078b3c
   8193c:	00080b01 	.word	0x00080b01
   81940:	0008133d 	.word	0x0008133d
   81944:	00081765 	.word	0x00081765
   81948:	00080b79 	.word	0x00080b79

0008194c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
   8194c:	b580      	push	{r7, lr}
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
   8194e:	4d15      	ldr	r5, [pc, #84]	; (819a4 <prvIdleTask+0x58>)
		{
			vTaskSuspendAll();
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
   81950:	4e15      	ldr	r6, [pc, #84]	; (819a8 <prvIdleTask+0x5c>)

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
		{
			vTaskSuspendAll();
   81952:	f8df 8074 	ldr.w	r8, [pc, #116]	; 819c8 <prvIdleTask+0x7c>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
			xTaskResumeAll();
   81956:	4f15      	ldr	r7, [pc, #84]	; (819ac <prvIdleTask+0x60>)
   81958:	e019      	b.n	8198e <prvIdleTask+0x42>

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
		{
			vTaskSuspendAll();
   8195a:	47c0      	blx	r8
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
   8195c:	6834      	ldr	r4, [r6, #0]
			xTaskResumeAll();
   8195e:	47b8      	blx	r7

			if( xListIsEmpty == pdFALSE )
   81960:	b1ac      	cbz	r4, 8198e <prvIdleTask+0x42>
			{
				tskTCB *pxTCB;

				taskENTER_CRITICAL();
   81962:	4b13      	ldr	r3, [pc, #76]	; (819b0 <prvIdleTask+0x64>)
   81964:	4798      	blx	r3
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
   81966:	68f3      	ldr	r3, [r6, #12]
   81968:	68dc      	ldr	r4, [r3, #12]
					uxListRemove( &( pxTCB->xGenericListItem ) );
   8196a:	1d20      	adds	r0, r4, #4
   8196c:	4b11      	ldr	r3, [pc, #68]	; (819b4 <prvIdleTask+0x68>)
   8196e:	4798      	blx	r3
					--uxCurrentNumberOfTasks;
   81970:	4a11      	ldr	r2, [pc, #68]	; (819b8 <prvIdleTask+0x6c>)
   81972:	6813      	ldr	r3, [r2, #0]
   81974:	3b01      	subs	r3, #1
   81976:	6013      	str	r3, [r2, #0]
					--uxTasksDeleted;
   81978:	682b      	ldr	r3, [r5, #0]
   8197a:	3b01      	subs	r3, #1
   8197c:	602b      	str	r3, [r5, #0]
				}
				taskEXIT_CRITICAL();
   8197e:	4b0f      	ldr	r3, [pc, #60]	; (819bc <prvIdleTask+0x70>)
   81980:	4798      	blx	r3
		want to allocate and clean RAM statically. */
		portCLEAN_UP_TCB( pxTCB );

		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
   81982:	6b20      	ldr	r0, [r4, #48]	; 0x30
   81984:	f8df 9044 	ldr.w	r9, [pc, #68]	; 819cc <prvIdleTask+0x80>
   81988:	47c8      	blx	r9
		vPortFree( pxTCB );
   8198a:	4620      	mov	r0, r4
   8198c:	47c8      	blx	r9
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
   8198e:	682b      	ldr	r3, [r5, #0]
   81990:	2b00      	cmp	r3, #0
   81992:	d1e2      	bne.n	8195a <prvIdleTask+0xe>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
   81994:	4b0a      	ldr	r3, [pc, #40]	; (819c0 <prvIdleTask+0x74>)
   81996:	681b      	ldr	r3, [r3, #0]
   81998:	2b01      	cmp	r3, #1
   8199a:	d9f8      	bls.n	8198e <prvIdleTask+0x42>
			{
				taskYIELD();
   8199c:	4b09      	ldr	r3, [pc, #36]	; (819c4 <prvIdleTask+0x78>)
   8199e:	4798      	blx	r3
   819a0:	e7d7      	b.n	81952 <prvIdleTask+0x6>
   819a2:	bf00      	nop
   819a4:	20078a2c 	.word	0x20078a2c
   819a8:	20078b24 	.word	0x20078b24
   819ac:	00081765 	.word	0x00081765
   819b0:	00080b99 	.word	0x00080b99
   819b4:	00080b01 	.word	0x00080b01
   819b8:	20078b64 	.word	0x20078b64
   819bc:	00080bb9 	.word	0x00080bb9
   819c0:	20078a5c 	.word	0x20078a5c
   819c4:	00080b79 	.word	0x00080b79
   819c8:	00081609 	.word	0x00081609
   819cc:	00080dad 	.word	0x00080dad

000819d0 <vTaskSwitchContext>:

#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
   819d0:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
   819d2:	4b22      	ldr	r3, [pc, #136]	; (81a5c <vTaskSwitchContext+0x8c>)
   819d4:	681b      	ldr	r3, [r3, #0]
   819d6:	b96b      	cbnz	r3, 819f4 <vTaskSwitchContext+0x24>
		#endif

		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();

		taskSELECT_HIGHEST_PRIORITY_TASK();
   819d8:	4b21      	ldr	r3, [pc, #132]	; (81a60 <vTaskSwitchContext+0x90>)
   819da:	681b      	ldr	r3, [r3, #0]
   819dc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   819e0:	009b      	lsls	r3, r3, #2
   819e2:	4a20      	ldr	r2, [pc, #128]	; (81a64 <vTaskSwitchContext+0x94>)
   819e4:	58d3      	ldr	r3, [r2, r3]
   819e6:	b9cb      	cbnz	r3, 81a1c <vTaskSwitchContext+0x4c>
   819e8:	4b1d      	ldr	r3, [pc, #116]	; (81a60 <vTaskSwitchContext+0x90>)
   819ea:	681b      	ldr	r3, [r3, #0]
   819ec:	b143      	cbz	r3, 81a00 <vTaskSwitchContext+0x30>
   819ee:	4a1c      	ldr	r2, [pc, #112]	; (81a60 <vTaskSwitchContext+0x90>)
   819f0:	491c      	ldr	r1, [pc, #112]	; (81a64 <vTaskSwitchContext+0x94>)
   819f2:	e009      	b.n	81a08 <vTaskSwitchContext+0x38>
{
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
   819f4:	2201      	movs	r2, #1
   819f6:	4b1c      	ldr	r3, [pc, #112]	; (81a68 <vTaskSwitchContext+0x98>)
   819f8:	601a      	str	r2, [r3, #0]
   819fa:	bd10      	pop	{r4, pc}
		#endif

		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();

		taskSELECT_HIGHEST_PRIORITY_TASK();
   819fc:	6813      	ldr	r3, [r2, #0]
   819fe:	b91b      	cbnz	r3, 81a08 <vTaskSwitchContext+0x38>
   81a00:	4b1a      	ldr	r3, [pc, #104]	; (81a6c <vTaskSwitchContext+0x9c>)
   81a02:	4798      	blx	r3
   81a04:	bf00      	nop
   81a06:	e7fd      	b.n	81a04 <vTaskSwitchContext+0x34>
   81a08:	6813      	ldr	r3, [r2, #0]
   81a0a:	3b01      	subs	r3, #1
   81a0c:	6013      	str	r3, [r2, #0]
   81a0e:	6813      	ldr	r3, [r2, #0]
   81a10:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   81a14:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   81a18:	2b00      	cmp	r3, #0
   81a1a:	d0ef      	beq.n	819fc <vTaskSwitchContext+0x2c>
   81a1c:	4b10      	ldr	r3, [pc, #64]	; (81a60 <vTaskSwitchContext+0x90>)
   81a1e:	681b      	ldr	r3, [r3, #0]
   81a20:	4a10      	ldr	r2, [pc, #64]	; (81a64 <vTaskSwitchContext+0x94>)
   81a22:	0099      	lsls	r1, r3, #2
   81a24:	18c8      	adds	r0, r1, r3
   81a26:	eb02 0080 	add.w	r0, r2, r0, lsl #2
   81a2a:	6844      	ldr	r4, [r0, #4]
   81a2c:	6864      	ldr	r4, [r4, #4]
   81a2e:	6044      	str	r4, [r0, #4]
   81a30:	4602      	mov	r2, r0
   81a32:	3208      	adds	r2, #8
   81a34:	4294      	cmp	r4, r2
   81a36:	d106      	bne.n	81a46 <vTaskSwitchContext+0x76>
   81a38:	6860      	ldr	r0, [r4, #4]
   81a3a:	eb03 0183 	add.w	r1, r3, r3, lsl #2
   81a3e:	4a09      	ldr	r2, [pc, #36]	; (81a64 <vTaskSwitchContext+0x94>)
   81a40:	eb02 0281 	add.w	r2, r2, r1, lsl #2
   81a44:	6050      	str	r0, [r2, #4]
   81a46:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   81a4a:	4a06      	ldr	r2, [pc, #24]	; (81a64 <vTaskSwitchContext+0x94>)
   81a4c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   81a50:	685b      	ldr	r3, [r3, #4]
   81a52:	68da      	ldr	r2, [r3, #12]
   81a54:	4b06      	ldr	r3, [pc, #24]	; (81a70 <vTaskSwitchContext+0xa0>)
   81a56:	601a      	str	r2, [r3, #0]
   81a58:	bd10      	pop	{r4, pc}
   81a5a:	bf00      	nop
   81a5c:	20078b54 	.word	0x20078b54
   81a60:	20078a58 	.word	0x20078a58
   81a64:	20078a5c 	.word	0x20078a5c
   81a68:	20078b68 	.word	0x20078b68
   81a6c:	00080b89 	.word	0x00080b89
   81a70:	20078b3c 	.word	0x20078b3c

00081a74 <vTaskPlaceOnEventList>:
	}
}
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( const xList * const pxEventList, portTickType xTicksToWait )
{
   81a74:	b538      	push	{r3, r4, r5, lr}
portTickType xTimeToWake;

	configASSERT( pxEventList );
   81a76:	b918      	cbnz	r0, 81a80 <vTaskPlaceOnEventList+0xc>
   81a78:	4b0f      	ldr	r3, [pc, #60]	; (81ab8 <vTaskPlaceOnEventList+0x44>)
   81a7a:	4798      	blx	r3
   81a7c:	bf00      	nop
   81a7e:	e7fd      	b.n	81a7c <vTaskPlaceOnEventList+0x8>
   81a80:	460c      	mov	r4, r1
	SCHEDULER SUSPENDED. */

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event. */
	vListInsert( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
   81a82:	4d0e      	ldr	r5, [pc, #56]	; (81abc <vTaskPlaceOnEventList+0x48>)
   81a84:	6829      	ldr	r1, [r5, #0]
   81a86:	3118      	adds	r1, #24
   81a88:	4b0d      	ldr	r3, [pc, #52]	; (81ac0 <vTaskPlaceOnEventList+0x4c>)
   81a8a:	4798      	blx	r3

	/* We must remove ourselves from the ready list before adding ourselves
	to the blocked list as the same list item is used for both lists.  We have
	exclusive access to the ready lists as the scheduler is locked. */
	if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
   81a8c:	6828      	ldr	r0, [r5, #0]
   81a8e:	3004      	adds	r0, #4
   81a90:	4b0c      	ldr	r3, [pc, #48]	; (81ac4 <vTaskPlaceOnEventList+0x50>)
   81a92:	4798      	blx	r3
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( xTicksToWait == portMAX_DELAY )
   81a94:	f64f 73ff 	movw	r3, #65535	; 0xffff
   81a98:	429c      	cmp	r4, r3
   81a9a:	d105      	bne.n	81aa8 <vTaskPlaceOnEventList+0x34>
		{
			/* Add ourselves to the suspended task list instead of a delayed task
			list to ensure we are not woken by a timing event.  We will block
			indefinitely. */
			vListInsertEnd( ( xList * ) &xSuspendedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
   81a9c:	6829      	ldr	r1, [r5, #0]
   81a9e:	480a      	ldr	r0, [pc, #40]	; (81ac8 <vTaskPlaceOnEventList+0x54>)
   81aa0:	3104      	adds	r1, #4
   81aa2:	4b0a      	ldr	r3, [pc, #40]	; (81acc <vTaskPlaceOnEventList+0x58>)
   81aa4:	4798      	blx	r3
   81aa6:	bd38      	pop	{r3, r4, r5, pc}
		}
		else
		{
			/* Calculate the time at which the task should be woken if the event does
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
   81aa8:	4b09      	ldr	r3, [pc, #36]	; (81ad0 <vTaskPlaceOnEventList+0x5c>)
   81aaa:	8818      	ldrh	r0, [r3, #0]
   81aac:	4420      	add	r0, r4
			prvAddCurrentTaskToDelayedList( xTimeToWake );
   81aae:	b280      	uxth	r0, r0
   81ab0:	4b08      	ldr	r3, [pc, #32]	; (81ad4 <vTaskPlaceOnEventList+0x60>)
   81ab2:	4798      	blx	r3
   81ab4:	bd38      	pop	{r3, r4, r5, pc}
   81ab6:	bf00      	nop
   81ab8:	00080b89 	.word	0x00080b89
   81abc:	20078b3c 	.word	0x20078b3c
   81ac0:	00080abd 	.word	0x00080abd
   81ac4:	00080b01 	.word	0x00080b01
   81ac8:	20078a10 	.word	0x20078a10
   81acc:	00080aa1 	.word	0x00080aa1
   81ad0:	20078b58 	.word	0x20078b58
   81ad4:	0008133d 	.word	0x0008133d

00081ad8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if configUSE_TIMERS == 1

	void vTaskPlaceOnEventListRestricted( const xList * const pxEventList, portTickType xTicksToWait )
	{
   81ad8:	b538      	push	{r3, r4, r5, lr}
	portTickType xTimeToWake;

		configASSERT( pxEventList );
   81ada:	b918      	cbnz	r0, 81ae4 <vTaskPlaceOnEventListRestricted+0xc>
   81adc:	4b0a      	ldr	r3, [pc, #40]	; (81b08 <vTaskPlaceOnEventListRestricted+0x30>)
   81ade:	4798      	blx	r3
   81ae0:	bf00      	nop
   81ae2:	e7fd      	b.n	81ae0 <vTaskPlaceOnEventListRestricted+0x8>
   81ae4:	460d      	mov	r5, r1

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
   81ae6:	4c09      	ldr	r4, [pc, #36]	; (81b0c <vTaskPlaceOnEventListRestricted+0x34>)
   81ae8:	6821      	ldr	r1, [r4, #0]
   81aea:	3118      	adds	r1, #24
   81aec:	4b08      	ldr	r3, [pc, #32]	; (81b10 <vTaskPlaceOnEventListRestricted+0x38>)
   81aee:	4798      	blx	r3

		/* We must remove this task from the ready list before adding it to the
		blocked list as the same list item is used for both lists.  This
		function is called form a critical section. */
		if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
   81af0:	6820      	ldr	r0, [r4, #0]
   81af2:	3004      	adds	r0, #4
   81af4:	4b07      	ldr	r3, [pc, #28]	; (81b14 <vTaskPlaceOnEventListRestricted+0x3c>)
   81af6:	4798      	blx	r3
			portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
		}

		/* Calculate the time at which the task should be woken if the event does
		not occur.  This may overflow but this doesn't matter. */
		xTimeToWake = xTickCount + xTicksToWait;
   81af8:	4b07      	ldr	r3, [pc, #28]	; (81b18 <vTaskPlaceOnEventListRestricted+0x40>)
   81afa:	8818      	ldrh	r0, [r3, #0]
   81afc:	4428      	add	r0, r5
		
		traceTASK_DELAY_UNTIL();
		prvAddCurrentTaskToDelayedList( xTimeToWake );
   81afe:	b280      	uxth	r0, r0
   81b00:	4b06      	ldr	r3, [pc, #24]	; (81b1c <vTaskPlaceOnEventListRestricted+0x44>)
   81b02:	4798      	blx	r3
   81b04:	bd38      	pop	{r3, r4, r5, pc}
   81b06:	bf00      	nop
   81b08:	00080b89 	.word	0x00080b89
   81b0c:	20078b3c 	.word	0x20078b3c
   81b10:	00080aa1 	.word	0x00080aa1
   81b14:	00080b01 	.word	0x00080b01
   81b18:	20078b58 	.word	0x20078b58
   81b1c:	0008133d 	.word	0x0008133d

00081b20 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xTaskRemoveFromEventList( const xList * const pxEventList )
{
   81b20:	b538      	push	{r3, r4, r5, lr}
	get called - the lock count on the queue will get modified instead.  This
	means we can always expect exclusive access to the event list here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
   81b22:	68c3      	ldr	r3, [r0, #12]
   81b24:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
   81b26:	b91c      	cbnz	r4, 81b30 <xTaskRemoveFromEventList+0x10>
   81b28:	4b16      	ldr	r3, [pc, #88]	; (81b84 <xTaskRemoveFromEventList+0x64>)
   81b2a:	4798      	blx	r3
   81b2c:	bf00      	nop
   81b2e:	e7fd      	b.n	81b2c <xTaskRemoveFromEventList+0xc>
	uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
   81b30:	f104 0518 	add.w	r5, r4, #24
   81b34:	4628      	mov	r0, r5
   81b36:	4b14      	ldr	r3, [pc, #80]	; (81b88 <xTaskRemoveFromEventList+0x68>)
   81b38:	4798      	blx	r3

	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   81b3a:	4b14      	ldr	r3, [pc, #80]	; (81b8c <xTaskRemoveFromEventList+0x6c>)
   81b3c:	681b      	ldr	r3, [r3, #0]
   81b3e:	b99b      	cbnz	r3, 81b68 <xTaskRemoveFromEventList+0x48>
	{
		uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
   81b40:	1d25      	adds	r5, r4, #4
   81b42:	4628      	mov	r0, r5
   81b44:	4b10      	ldr	r3, [pc, #64]	; (81b88 <xTaskRemoveFromEventList+0x68>)
   81b46:	4798      	blx	r3
		prvAddTaskToReadyQueue( pxUnblockedTCB );
   81b48:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   81b4a:	4b11      	ldr	r3, [pc, #68]	; (81b90 <xTaskRemoveFromEventList+0x70>)
   81b4c:	681b      	ldr	r3, [r3, #0]
   81b4e:	4298      	cmp	r0, r3
   81b50:	bf84      	itt	hi
   81b52:	4b0f      	ldrhi	r3, [pc, #60]	; (81b90 <xTaskRemoveFromEventList+0x70>)
   81b54:	6018      	strhi	r0, [r3, #0]
   81b56:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   81b5a:	4b0e      	ldr	r3, [pc, #56]	; (81b94 <xTaskRemoveFromEventList+0x74>)
   81b5c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   81b60:	4629      	mov	r1, r5
   81b62:	4b0d      	ldr	r3, [pc, #52]	; (81b98 <xTaskRemoveFromEventList+0x78>)
   81b64:	4798      	blx	r3
   81b66:	e003      	b.n	81b70 <xTaskRemoveFromEventList+0x50>
	}
	else
	{
		/* We cannot access the delayed or ready lists, so will hold this
		task pending until the scheduler is resumed. */
		vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
   81b68:	480c      	ldr	r0, [pc, #48]	; (81b9c <xTaskRemoveFromEventList+0x7c>)
   81b6a:	4629      	mov	r1, r5
   81b6c:	4b0a      	ldr	r3, [pc, #40]	; (81b98 <xTaskRemoveFromEventList+0x78>)
   81b6e:	4798      	blx	r3
	}

	if( pxUnblockedTCB->uxPriority >= pxCurrentTCB->uxPriority )
   81b70:	4b0b      	ldr	r3, [pc, #44]	; (81ba0 <xTaskRemoveFromEventList+0x80>)
   81b72:	681b      	ldr	r3, [r3, #0]
   81b74:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   81b76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	{
		xReturn = pdFALSE;
	}

	return xReturn;
}
   81b78:	4298      	cmp	r0, r3
   81b7a:	bf34      	ite	cc
   81b7c:	2000      	movcc	r0, #0
   81b7e:	2001      	movcs	r0, #1
   81b80:	bd38      	pop	{r3, r4, r5, pc}
   81b82:	bf00      	nop
   81b84:	00080b89 	.word	0x00080b89
   81b88:	00080b01 	.word	0x00080b01
   81b8c:	20078b54 	.word	0x20078b54
   81b90:	20078a58 	.word	0x20078a58
   81b94:	20078a5c 	.word	0x20078a5c
   81b98:	00080aa1 	.word	0x00080aa1
   81b9c:	20078b40 	.word	0x20078b40
   81ba0:	20078b3c 	.word	0x20078b3c

00081ba4 <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( xTimeOutType * const pxTimeOut )
{
   81ba4:	b508      	push	{r3, lr}
	configASSERT( pxTimeOut );
   81ba6:	b918      	cbnz	r0, 81bb0 <vTaskSetTimeOutState+0xc>
   81ba8:	4b05      	ldr	r3, [pc, #20]	; (81bc0 <vTaskSetTimeOutState+0x1c>)
   81baa:	4798      	blx	r3
   81bac:	bf00      	nop
   81bae:	e7fd      	b.n	81bac <vTaskSetTimeOutState+0x8>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
   81bb0:	4a04      	ldr	r2, [pc, #16]	; (81bc4 <vTaskSetTimeOutState+0x20>)
   81bb2:	6812      	ldr	r2, [r2, #0]
   81bb4:	6002      	str	r2, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
   81bb6:	4a04      	ldr	r2, [pc, #16]	; (81bc8 <vTaskSetTimeOutState+0x24>)
   81bb8:	8812      	ldrh	r2, [r2, #0]
   81bba:	8082      	strh	r2, [r0, #4]
   81bbc:	bd08      	pop	{r3, pc}
   81bbe:	bf00      	nop
   81bc0:	00080b89 	.word	0x00080b89
   81bc4:	20078b38 	.word	0x20078b38
   81bc8:	20078b58 	.word	0x20078b58

00081bcc <xTaskCheckForTimeOut>:
}
/*-----------------------------------------------------------*/

portBASE_TYPE xTaskCheckForTimeOut( xTimeOutType * const pxTimeOut, portTickType * const pxTicksToWait )
{
   81bcc:	b538      	push	{r3, r4, r5, lr}
portBASE_TYPE xReturn;

	configASSERT( pxTimeOut );
   81bce:	b918      	cbnz	r0, 81bd8 <xTaskCheckForTimeOut+0xc>
   81bd0:	4b1b      	ldr	r3, [pc, #108]	; (81c40 <xTaskCheckForTimeOut+0x74>)
   81bd2:	4798      	blx	r3
   81bd4:	bf00      	nop
   81bd6:	e7fd      	b.n	81bd4 <xTaskCheckForTimeOut+0x8>
   81bd8:	460d      	mov	r5, r1
   81bda:	4604      	mov	r4, r0
	configASSERT( pxTicksToWait );
   81bdc:	b919      	cbnz	r1, 81be6 <xTaskCheckForTimeOut+0x1a>
   81bde:	4b18      	ldr	r3, [pc, #96]	; (81c40 <xTaskCheckForTimeOut+0x74>)
   81be0:	4798      	blx	r3
   81be2:	bf00      	nop
   81be4:	e7fd      	b.n	81be2 <xTaskCheckForTimeOut+0x16>

	taskENTER_CRITICAL();
   81be6:	4b17      	ldr	r3, [pc, #92]	; (81c44 <xTaskCheckForTimeOut+0x78>)
   81be8:	4798      	blx	r3
	{
		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
   81bea:	882b      	ldrh	r3, [r5, #0]
   81bec:	f64f 72ff 	movw	r2, #65535	; 0xffff
   81bf0:	4293      	cmp	r3, r2
   81bf2:	d01b      	beq.n	81c2c <xTaskCheckForTimeOut+0x60>
				xReturn = pdFALSE;
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( ( portTickType ) xTickCount >= ( portTickType ) pxTimeOut->xTimeOnEntering ) )
   81bf4:	4a14      	ldr	r2, [pc, #80]	; (81c48 <xTaskCheckForTimeOut+0x7c>)
   81bf6:	6812      	ldr	r2, [r2, #0]
   81bf8:	6821      	ldr	r1, [r4, #0]
   81bfa:	4291      	cmp	r1, r2
   81bfc:	d005      	beq.n	81c0a <xTaskCheckForTimeOut+0x3e>
   81bfe:	4a13      	ldr	r2, [pc, #76]	; (81c4c <xTaskCheckForTimeOut+0x80>)
   81c00:	8812      	ldrh	r2, [r2, #0]
   81c02:	b292      	uxth	r2, r2
   81c04:	88a1      	ldrh	r1, [r4, #4]
   81c06:	4291      	cmp	r1, r2
   81c08:	d912      	bls.n	81c30 <xTaskCheckForTimeOut+0x64>
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
		}
		else if( ( ( portTickType ) ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering ) ) < ( portTickType ) *pxTicksToWait )
   81c0a:	4a10      	ldr	r2, [pc, #64]	; (81c4c <xTaskCheckForTimeOut+0x80>)
   81c0c:	8811      	ldrh	r1, [r2, #0]
   81c0e:	88a0      	ldrh	r0, [r4, #4]
   81c10:	1a09      	subs	r1, r1, r0
   81c12:	b289      	uxth	r1, r1
   81c14:	428b      	cmp	r3, r1
   81c16:	d90d      	bls.n	81c34 <xTaskCheckForTimeOut+0x68>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering );
   81c18:	8812      	ldrh	r2, [r2, #0]
   81c1a:	b292      	uxth	r2, r2
   81c1c:	1a12      	subs	r2, r2, r0
   81c1e:	1a9b      	subs	r3, r3, r2
   81c20:	802b      	strh	r3, [r5, #0]
			vTaskSetTimeOutState( pxTimeOut );
   81c22:	4620      	mov	r0, r4
   81c24:	4b0a      	ldr	r3, [pc, #40]	; (81c50 <xTaskCheckForTimeOut+0x84>)
   81c26:	4798      	blx	r3
			xReturn = pdFALSE;
   81c28:	2400      	movs	r4, #0
   81c2a:	e004      	b.n	81c36 <xTaskCheckForTimeOut+0x6a>
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
			{
				xReturn = pdFALSE;
   81c2c:	2400      	movs	r4, #0
   81c2e:	e002      	b.n	81c36 <xTaskCheckForTimeOut+0x6a>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
   81c30:	2401      	movs	r4, #1
   81c32:	e000      	b.n	81c36 <xTaskCheckForTimeOut+0x6a>
			vTaskSetTimeOutState( pxTimeOut );
			xReturn = pdFALSE;
		}
		else
		{
			xReturn = pdTRUE;
   81c34:	2401      	movs	r4, #1
		}
	}
	taskEXIT_CRITICAL();
   81c36:	4b07      	ldr	r3, [pc, #28]	; (81c54 <xTaskCheckForTimeOut+0x88>)
   81c38:	4798      	blx	r3

	return xReturn;
}
   81c3a:	4620      	mov	r0, r4
   81c3c:	bd38      	pop	{r3, r4, r5, pc}
   81c3e:	bf00      	nop
   81c40:	00080b89 	.word	0x00080b89
   81c44:	00080b99 	.word	0x00080b99
   81c48:	20078b38 	.word	0x20078b38
   81c4c:	20078b58 	.word	0x20078b58
   81c50:	00081ba5 	.word	0x00081ba5
   81c54:	00080bb9 	.word	0x00080bb9

00081c58 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
	xMissedYield = pdTRUE;
   81c58:	2201      	movs	r2, #1
   81c5a:	4b01      	ldr	r3, [pc, #4]	; (81c60 <vTaskMissedYield+0x8>)
   81c5c:	601a      	str	r2, [r3, #0]
   81c5e:	4770      	bx	lr
   81c60:	20078b68 	.word	0x20078b68

00081c64 <xTaskGetCurrentTaskHandle>:
	xTaskHandle xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
   81c64:	4b01      	ldr	r3, [pc, #4]	; (81c6c <xTaskGetCurrentTaskHandle+0x8>)
   81c66:	6818      	ldr	r0, [r3, #0]

		return xReturn;
	}
   81c68:	4770      	bx	lr
   81c6a:	bf00      	nop
   81c6c:	20078b3c 	.word	0x20078b3c

00081c70 <xTaskGetSchedulerState>:

	portBASE_TYPE xTaskGetSchedulerState( void )
	{
	portBASE_TYPE xReturn;

		if( xSchedulerRunning == pdFALSE )
   81c70:	4b05      	ldr	r3, [pc, #20]	; (81c88 <xTaskGetSchedulerState+0x18>)
   81c72:	681b      	ldr	r3, [r3, #0]
   81c74:	b133      	cbz	r3, 81c84 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
		}
		else
		{
			if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   81c76:	4b05      	ldr	r3, [pc, #20]	; (81c8c <xTaskGetSchedulerState+0x1c>)
   81c78:	681b      	ldr	r3, [r3, #0]
			{
				xReturn = taskSCHEDULER_RUNNING;
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
   81c7a:	2b00      	cmp	r3, #0
   81c7c:	bf0c      	ite	eq
   81c7e:	2001      	moveq	r0, #1
   81c80:	2002      	movne	r0, #2
   81c82:	4770      	bx	lr
	{
	portBASE_TYPE xReturn;

		if( xSchedulerRunning == pdFALSE )
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
   81c84:	2000      	movs	r0, #0
				xReturn = taskSCHEDULER_SUSPENDED;
			}
		}

		return xReturn;
	}
   81c86:	4770      	bx	lr
   81c88:	20078a28 	.word	0x20078a28
   81c8c:	20078b54 	.word	0x20078b54

00081c90 <vTaskPriorityInherit>:
	{
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
   81c90:	2800      	cmp	r0, #0
   81c92:	d031      	beq.n	81cf8 <vTaskPriorityInherit+0x68>
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( xTaskHandle * const pxMutexHolder )
	{
   81c94:	b538      	push	{r3, r4, r5, lr}

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
		{
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
   81c96:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   81c98:	4918      	ldr	r1, [pc, #96]	; (81cfc <vTaskPriorityInherit+0x6c>)
   81c9a:	6809      	ldr	r1, [r1, #0]
   81c9c:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
   81c9e:	428b      	cmp	r3, r1
   81ca0:	d229      	bcs.n	81cf6 <vTaskPriorityInherit+0x66>
			{
				/* Adjust the mutex holder state to account for its new priority. */
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxCurrentTCB->uxPriority );
   81ca2:	4916      	ldr	r1, [pc, #88]	; (81cfc <vTaskPriorityInherit+0x6c>)
   81ca4:	6809      	ldr	r1, [r1, #0]
   81ca6:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
   81ca8:	f1c1 010a 	rsb	r1, r1, #10
   81cac:	8301      	strh	r1, [r0, #24]

				/* If the task being modified is in the ready state it will need to
				be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
   81cae:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   81cb2:	4913      	ldr	r1, [pc, #76]	; (81d00 <vTaskPriorityInherit+0x70>)
   81cb4:	eb01 0383 	add.w	r3, r1, r3, lsl #2
   81cb8:	6941      	ldr	r1, [r0, #20]
   81cba:	4299      	cmp	r1, r3
   81cbc:	d117      	bne.n	81cee <vTaskPriorityInherit+0x5e>
   81cbe:	4605      	mov	r5, r0
				{
					if( uxListRemove( ( xListItem * ) &( pxTCB->xGenericListItem ) ) == 0 )
   81cc0:	1d04      	adds	r4, r0, #4
   81cc2:	4620      	mov	r0, r4
   81cc4:	4b0f      	ldr	r3, [pc, #60]	; (81d04 <vTaskPriorityInherit+0x74>)
   81cc6:	4798      	blx	r3
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
   81cc8:	4b0c      	ldr	r3, [pc, #48]	; (81cfc <vTaskPriorityInherit+0x6c>)
   81cca:	681b      	ldr	r3, [r3, #0]
   81ccc:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
   81cce:	62e8      	str	r0, [r5, #44]	; 0x2c
					prvAddTaskToReadyQueue( pxTCB );
   81cd0:	4b0d      	ldr	r3, [pc, #52]	; (81d08 <vTaskPriorityInherit+0x78>)
   81cd2:	681b      	ldr	r3, [r3, #0]
   81cd4:	4298      	cmp	r0, r3
   81cd6:	bf84      	itt	hi
   81cd8:	4b0b      	ldrhi	r3, [pc, #44]	; (81d08 <vTaskPriorityInherit+0x78>)
   81cda:	6018      	strhi	r0, [r3, #0]
   81cdc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   81ce0:	4b07      	ldr	r3, [pc, #28]	; (81d00 <vTaskPriorityInherit+0x70>)
   81ce2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   81ce6:	4621      	mov	r1, r4
   81ce8:	4b08      	ldr	r3, [pc, #32]	; (81d0c <vTaskPriorityInherit+0x7c>)
   81cea:	4798      	blx	r3
   81cec:	bd38      	pop	{r3, r4, r5, pc}
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
   81cee:	4b03      	ldr	r3, [pc, #12]	; (81cfc <vTaskPriorityInherit+0x6c>)
   81cf0:	681b      	ldr	r3, [r3, #0]
   81cf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   81cf4:	62c3      	str	r3, [r0, #44]	; 0x2c
   81cf6:	bd38      	pop	{r3, r4, r5, pc}
   81cf8:	4770      	bx	lr
   81cfa:	bf00      	nop
   81cfc:	20078b3c 	.word	0x20078b3c
   81d00:	20078a5c 	.word	0x20078a5c
   81d04:	00080b01 	.word	0x00080b01
   81d08:	20078a58 	.word	0x20078a58
   81d0c:	00080aa1 	.word	0x00080aa1

00081d10 <vTaskPriorityDisinherit>:

	void vTaskPriorityDisinherit( xTaskHandle * const pxMutexHolder )
	{
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;

		if( pxMutexHolder != NULL )
   81d10:	b1e8      	cbz	r0, 81d4e <vTaskPriorityDisinherit+0x3e>
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinherit( xTaskHandle * const pxMutexHolder )
	{
   81d12:	b538      	push	{r3, r4, r5, lr}
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;

		if( pxMutexHolder != NULL )
		{
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
   81d14:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
   81d16:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
   81d18:	4291      	cmp	r1, r2
   81d1a:	d017      	beq.n	81d4c <vTaskPriorityDisinherit+0x3c>
   81d1c:	4604      	mov	r4, r0
			{
				/* We must be the running task to be able to give the mutex back.
				Remove ourselves from the ready list we currently appear in. */
				if( uxListRemove( ( xListItem * ) &( pxTCB->xGenericListItem ) ) == 0 )
   81d1e:	1d05      	adds	r5, r0, #4
   81d20:	4628      	mov	r0, r5
   81d22:	4b0b      	ldr	r3, [pc, #44]	; (81d50 <vTaskPriorityDisinherit+0x40>)
   81d24:	4798      	blx	r3
				}

				/* Disinherit the priority before adding the task into the new
				ready list. */
				traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
				pxTCB->uxPriority = pxTCB->uxBasePriority;
   81d26:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
   81d28:	62e0      	str	r0, [r4, #44]	; 0x2c
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxTCB->uxPriority );
   81d2a:	f1c0 030a 	rsb	r3, r0, #10
   81d2e:	8323      	strh	r3, [r4, #24]
				prvAddTaskToReadyQueue( pxTCB );
   81d30:	4b08      	ldr	r3, [pc, #32]	; (81d54 <vTaskPriorityDisinherit+0x44>)
   81d32:	681b      	ldr	r3, [r3, #0]
   81d34:	4298      	cmp	r0, r3
   81d36:	bf84      	itt	hi
   81d38:	4b06      	ldrhi	r3, [pc, #24]	; (81d54 <vTaskPriorityDisinherit+0x44>)
   81d3a:	6018      	strhi	r0, [r3, #0]
   81d3c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   81d40:	4b05      	ldr	r3, [pc, #20]	; (81d58 <vTaskPriorityDisinherit+0x48>)
   81d42:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   81d46:	4629      	mov	r1, r5
   81d48:	4b04      	ldr	r3, [pc, #16]	; (81d5c <vTaskPriorityDisinherit+0x4c>)
   81d4a:	4798      	blx	r3
   81d4c:	bd38      	pop	{r3, r4, r5, pc}
   81d4e:	4770      	bx	lr
   81d50:	00080b01 	.word	0x00080b01
   81d54:	20078a58 	.word	0x20078a58
   81d58:	20078a5c 	.word	0x20078a5c
   81d5c:	00080aa1 	.word	0x00080aa1

00081d60 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static portBASE_TYPE prvInsertTimerInActiveList( xTIMER *pxTimer, portTickType xNextExpiryTime, portTickType xTimeNow, portTickType xCommandTime )
{
   81d60:	b510      	push	{r4, lr}
   81d62:	4604      	mov	r4, r0
portBASE_TYPE xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
   81d64:	8081      	strh	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   81d66:	6120      	str	r0, [r4, #16]

	if( xNextExpiryTime <= xTimeNow )
   81d68:	4291      	cmp	r1, r2
   81d6a:	d80b      	bhi.n	81d84 <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( portTickType ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
   81d6c:	1ad2      	subs	r2, r2, r3
   81d6e:	8b03      	ldrh	r3, [r0, #24]
   81d70:	b292      	uxth	r2, r2
   81d72:	4293      	cmp	r3, r2
   81d74:	d911      	bls.n	81d9a <prvInsertTimerInActiveList+0x3a>
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
   81d76:	4b0b      	ldr	r3, [pc, #44]	; (81da4 <prvInsertTimerInActiveList+0x44>)
   81d78:	6818      	ldr	r0, [r3, #0]
   81d7a:	1d21      	adds	r1, r4, #4
   81d7c:	4b0a      	ldr	r3, [pc, #40]	; (81da8 <prvInsertTimerInActiveList+0x48>)
   81d7e:	4798      	blx	r3
}
/*-----------------------------------------------------------*/

static portBASE_TYPE prvInsertTimerInActiveList( xTIMER *pxTimer, portTickType xNextExpiryTime, portTickType xTimeNow, portTickType xCommandTime )
{
portBASE_TYPE xProcessTimerNow = pdFALSE;
   81d80:	2000      	movs	r0, #0
   81d82:	bd10      	pop	{r4, pc}
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
   81d84:	429a      	cmp	r2, r3
   81d86:	d201      	bcs.n	81d8c <prvInsertTimerInActiveList+0x2c>
   81d88:	4299      	cmp	r1, r3
   81d8a:	d208      	bcs.n	81d9e <prvInsertTimerInActiveList+0x3e>
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   81d8c:	4b07      	ldr	r3, [pc, #28]	; (81dac <prvInsertTimerInActiveList+0x4c>)
   81d8e:	6818      	ldr	r0, [r3, #0]
   81d90:	1d21      	adds	r1, r4, #4
   81d92:	4b05      	ldr	r3, [pc, #20]	; (81da8 <prvInsertTimerInActiveList+0x48>)
   81d94:	4798      	blx	r3
}
/*-----------------------------------------------------------*/

static portBASE_TYPE prvInsertTimerInActiveList( xTIMER *pxTimer, portTickType xNextExpiryTime, portTickType xTimeNow, portTickType xCommandTime )
{
portBASE_TYPE xProcessTimerNow = pdFALSE;
   81d96:	2000      	movs	r0, #0
   81d98:	bd10      	pop	{r4, pc}
		timer was issued, and the time the command was processed? */
		if( ( ( portTickType ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
   81d9a:	2001      	movs	r0, #1
   81d9c:	bd10      	pop	{r4, pc}
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
   81d9e:	2001      	movs	r0, #1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
   81da0:	bd10      	pop	{r4, pc}
   81da2:	bf00      	nop
   81da4:	20078ba4 	.word	0x20078ba4
   81da8:	00080abd 	.word	0x00080abd
   81dac:	20078b70 	.word	0x20078b70

00081db0 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
   81db0:	b570      	push	{r4, r5, r6, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
   81db2:	4b0d      	ldr	r3, [pc, #52]	; (81de8 <prvCheckForValidListAndQueue+0x38>)
   81db4:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
   81db6:	4b0d      	ldr	r3, [pc, #52]	; (81dec <prvCheckForValidListAndQueue+0x3c>)
   81db8:	681b      	ldr	r3, [r3, #0]
   81dba:	b98b      	cbnz	r3, 81de0 <prvCheckForValidListAndQueue+0x30>
		{
			vListInitialise( &xActiveTimerList1 );
   81dbc:	4d0c      	ldr	r5, [pc, #48]	; (81df0 <prvCheckForValidListAndQueue+0x40>)
   81dbe:	4628      	mov	r0, r5
   81dc0:	4e0c      	ldr	r6, [pc, #48]	; (81df4 <prvCheckForValidListAndQueue+0x44>)
   81dc2:	47b0      	blx	r6
			vListInitialise( &xActiveTimerList2 );
   81dc4:	4c0c      	ldr	r4, [pc, #48]	; (81df8 <prvCheckForValidListAndQueue+0x48>)
   81dc6:	4620      	mov	r0, r4
   81dc8:	47b0      	blx	r6
			pxCurrentTimerList = &xActiveTimerList1;
   81dca:	4b0c      	ldr	r3, [pc, #48]	; (81dfc <prvCheckForValidListAndQueue+0x4c>)
   81dcc:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
   81dce:	4b0c      	ldr	r3, [pc, #48]	; (81e00 <prvCheckForValidListAndQueue+0x50>)
   81dd0:	601c      	str	r4, [r3, #0]
			xTimerQueue = xQueueCreate( ( unsigned portBASE_TYPE ) configTIMER_QUEUE_LENGTH, sizeof( xTIMER_MESSAGE ) );
   81dd2:	2005      	movs	r0, #5
   81dd4:	210c      	movs	r1, #12
   81dd6:	2200      	movs	r2, #0
   81dd8:	4b0a      	ldr	r3, [pc, #40]	; (81e04 <prvCheckForValidListAndQueue+0x54>)
   81dda:	4798      	blx	r3
   81ddc:	4b03      	ldr	r3, [pc, #12]	; (81dec <prvCheckForValidListAndQueue+0x3c>)
   81dde:	6018      	str	r0, [r3, #0]
		}
	}
	taskEXIT_CRITICAL();
   81de0:	4b09      	ldr	r3, [pc, #36]	; (81e08 <prvCheckForValidListAndQueue+0x58>)
   81de2:	4798      	blx	r3
   81de4:	bd70      	pop	{r4, r5, r6, pc}
   81de6:	bf00      	nop
   81de8:	00080b99 	.word	0x00080b99
   81dec:	20078ba0 	.word	0x20078ba0
   81df0:	20078b74 	.word	0x20078b74
   81df4:	00080a81 	.word	0x00080a81
   81df8:	20078b88 	.word	0x20078b88
   81dfc:	20078b70 	.word	0x20078b70
   81e00:	20078ba4 	.word	0x20078ba4
   81e04:	00080f7d 	.word	0x00080f7d
   81e08:	00080bb9 	.word	0x00080bb9

00081e0c <xTimerCreateTimerTask>:
static void prvProcessTimerOrBlockTask( portTickType xNextExpireTime, portBASE_TYPE xListWasEmpty ) PRIVILEGED_FUNCTION;

/*-----------------------------------------------------------*/

portBASE_TYPE xTimerCreateTimerTask( void )
{
   81e0c:	b510      	push	{r4, lr}
   81e0e:	b084      	sub	sp, #16

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
   81e10:	4b0b      	ldr	r3, [pc, #44]	; (81e40 <xTimerCreateTimerTask+0x34>)
   81e12:	4798      	blx	r3

	if( xTimerQueue != NULL )
   81e14:	4b0b      	ldr	r3, [pc, #44]	; (81e44 <xTimerCreateTimerTask+0x38>)
   81e16:	681b      	ldr	r3, [r3, #0]
   81e18:	b163      	cbz	r3, 81e34 <xTimerCreateTimerTask+0x28>
			xReturn = xTaskCreate( prvTimerTask, ( const signed char * ) "Tmr Svc", ( unsigned short ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( unsigned portBASE_TYPE ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, &xTimerTaskHandle );
		}
		#else
		{
			/* Create the timer task without storing its handle. */
			xReturn = xTaskCreate( prvTimerTask, ( const signed char * ) "Tmr Svc", ( unsigned short ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( unsigned portBASE_TYPE ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
   81e1a:	2309      	movs	r3, #9
   81e1c:	9300      	str	r3, [sp, #0]
   81e1e:	2300      	movs	r3, #0
   81e20:	9301      	str	r3, [sp, #4]
   81e22:	9302      	str	r3, [sp, #8]
   81e24:	9303      	str	r3, [sp, #12]
   81e26:	4808      	ldr	r0, [pc, #32]	; (81e48 <xTimerCreateTimerTask+0x3c>)
   81e28:	4908      	ldr	r1, [pc, #32]	; (81e4c <xTimerCreateTimerTask+0x40>)
   81e2a:	f44f 7200 	mov.w	r2, #512	; 0x200
   81e2e:	4c08      	ldr	r4, [pc, #32]	; (81e50 <xTimerCreateTimerTask+0x44>)
   81e30:	47a0      	blx	r4
		}
		#endif
	}

	configASSERT( xReturn );
   81e32:	b918      	cbnz	r0, 81e3c <xTimerCreateTimerTask+0x30>
   81e34:	4b07      	ldr	r3, [pc, #28]	; (81e54 <xTimerCreateTimerTask+0x48>)
   81e36:	4798      	blx	r3
   81e38:	bf00      	nop
   81e3a:	e7fd      	b.n	81e38 <xTimerCreateTimerTask+0x2c>
	return xReturn;
}
   81e3c:	b004      	add	sp, #16
   81e3e:	bd10      	pop	{r4, pc}
   81e40:	00081db1 	.word	0x00081db1
   81e44:	20078ba0 	.word	0x20078ba0
   81e48:	00081f69 	.word	0x00081f69
   81e4c:	000863bc 	.word	0x000863bc
   81e50:	00081399 	.word	0x00081399
   81e54:	00080b89 	.word	0x00080b89

00081e58 <xTimerGenericCommand>:
	return ( xTimerHandle ) pxNewTimer;
}
/*-----------------------------------------------------------*/

portBASE_TYPE xTimerGenericCommand( xTimerHandle xTimer, portBASE_TYPE xCommandID, portTickType xOptionalValue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portTickType xBlockTime )
{
   81e58:	b510      	push	{r4, lr}
   81e5a:	b084      	sub	sp, #16
portBASE_TYPE xReturn = pdFAIL;
xTIMER_MESSAGE xMessage;

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
   81e5c:	4c10      	ldr	r4, [pc, #64]	; (81ea0 <xTimerGenericCommand+0x48>)
   81e5e:	6824      	ldr	r4, [r4, #0]
   81e60:	b1d4      	cbz	r4, 81e98 <xTimerGenericCommand+0x40>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
   81e62:	9101      	str	r1, [sp, #4]
		xMessage.xMessageValue = xOptionalValue;
   81e64:	f8ad 2008 	strh.w	r2, [sp, #8]
		xMessage.pxTimer = ( xTIMER * ) xTimer;
   81e68:	9003      	str	r0, [sp, #12]

		if( pxHigherPriorityTaskWoken == NULL )
   81e6a:	b973      	cbnz	r3, 81e8a <xTimerGenericCommand+0x32>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
   81e6c:	4b0d      	ldr	r3, [pc, #52]	; (81ea4 <xTimerGenericCommand+0x4c>)
   81e6e:	4798      	blx	r3
   81e70:	2801      	cmp	r0, #1
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xBlockTime );
   81e72:	4b0b      	ldr	r3, [pc, #44]	; (81ea0 <xTimerGenericCommand+0x48>)
   81e74:	6818      	ldr	r0, [r3, #0]
   81e76:	a901      	add	r1, sp, #4
   81e78:	bf07      	ittee	eq
   81e7a:	f8bd 2018 	ldrheq.w	r2, [sp, #24]
   81e7e:	2300      	moveq	r3, #0
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
   81e80:	2200      	movne	r2, #0
   81e82:	4613      	movne	r3, r2
   81e84:	4c08      	ldr	r4, [pc, #32]	; (81ea8 <xTimerGenericCommand+0x50>)
   81e86:	47a0      	blx	r4
   81e88:	e007      	b.n	81e9a <xTimerGenericCommand+0x42>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
   81e8a:	4620      	mov	r0, r4
   81e8c:	a901      	add	r1, sp, #4
   81e8e:	461a      	mov	r2, r3
   81e90:	2300      	movs	r3, #0
   81e92:	4c06      	ldr	r4, [pc, #24]	; (81eac <xTimerGenericCommand+0x54>)
   81e94:	47a0      	blx	r4
   81e96:	e000      	b.n	81e9a <xTimerGenericCommand+0x42>
}
/*-----------------------------------------------------------*/

portBASE_TYPE xTimerGenericCommand( xTimerHandle xTimer, portBASE_TYPE xCommandID, portTickType xOptionalValue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portTickType xBlockTime )
{
portBASE_TYPE xReturn = pdFAIL;
   81e98:	2000      	movs	r0, #0

		traceTIMER_COMMAND_SEND( xTimer, xCommandID, xOptionalValue, xReturn );
	}

	return xReturn;
}
   81e9a:	b004      	add	sp, #16
   81e9c:	bd10      	pop	{r4, pc}
   81e9e:	bf00      	nop
   81ea0:	20078ba0 	.word	0x20078ba0
   81ea4:	00081c71 	.word	0x00081c71
   81ea8:	00080fd5 	.word	0x00080fd5
   81eac:	000810fd 	.word	0x000810fd

00081eb0 <prvSampleTimeNow>:
	return xNextExpireTime;
}
/*-----------------------------------------------------------*/

static portTickType prvSampleTimeNow( portBASE_TYPE *pxTimerListsWereSwitched )
{
   81eb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   81eb4:	b082      	sub	sp, #8
   81eb6:	4681      	mov	r9, r0
portTickType xTimeNow;
PRIVILEGED_DATA static portTickType xLastTime = ( portTickType ) 0U;

	xTimeNow = xTaskGetTickCount();
   81eb8:	4b23      	ldr	r3, [pc, #140]	; (81f48 <prvSampleTimeNow+0x98>)
   81eba:	4798      	blx	r3
   81ebc:	4680      	mov	r8, r0

	if( xTimeNow < xLastTime )
   81ebe:	4b23      	ldr	r3, [pc, #140]	; (81f4c <prvSampleTimeNow+0x9c>)
   81ec0:	881b      	ldrh	r3, [r3, #0]
   81ec2:	4283      	cmp	r3, r0
   81ec4:	d936      	bls.n	81f34 <prvSampleTimeNow+0x84>
   81ec6:	e026      	b.n	81f16 <prvSampleTimeNow+0x66>
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   81ec8:	68da      	ldr	r2, [r3, #12]
   81eca:	8815      	ldrh	r5, [r2, #0]
   81ecc:	b2ad      	uxth	r5, r5

		/* Remove the timer from the list. */
		pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
   81ece:	68db      	ldr	r3, [r3, #12]
   81ed0:	68dc      	ldr	r4, [r3, #12]
		uxListRemove( &( pxTimer->xTimerListItem ) );
   81ed2:	f104 0a04 	add.w	sl, r4, #4
   81ed6:	4650      	mov	r0, sl
   81ed8:	47b8      	blx	r7

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
   81eda:	6a63      	ldr	r3, [r4, #36]	; 0x24
   81edc:	4620      	mov	r0, r4
   81ede:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
   81ee0:	69e3      	ldr	r3, [r4, #28]
   81ee2:	2b01      	cmp	r3, #1
   81ee4:	d119      	bne.n	81f1a <prvSampleTimeNow+0x6a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
   81ee6:	8b23      	ldrh	r3, [r4, #24]
   81ee8:	442b      	add	r3, r5
   81eea:	b29b      	uxth	r3, r3
			if( xReloadTime > xNextExpireTime )
   81eec:	42ab      	cmp	r3, r5
   81eee:	d906      	bls.n	81efe <prvSampleTimeNow+0x4e>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
   81ef0:	80a3      	strh	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   81ef2:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   81ef4:	6830      	ldr	r0, [r6, #0]
   81ef6:	4651      	mov	r1, sl
   81ef8:	4b15      	ldr	r3, [pc, #84]	; (81f50 <prvSampleTimeNow+0xa0>)
   81efa:	4798      	blx	r3
   81efc:	e00d      	b.n	81f1a <prvSampleTimeNow+0x6a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xNextExpireTime, NULL, tmrNO_DELAY );
   81efe:	2300      	movs	r3, #0
   81f00:	9300      	str	r3, [sp, #0]
   81f02:	4620      	mov	r0, r4
   81f04:	4619      	mov	r1, r3
   81f06:	462a      	mov	r2, r5
   81f08:	4c12      	ldr	r4, [pc, #72]	; (81f54 <prvSampleTimeNow+0xa4>)
   81f0a:	47a0      	blx	r4
				configASSERT( xResult );
   81f0c:	b928      	cbnz	r0, 81f1a <prvSampleTimeNow+0x6a>
   81f0e:	4b12      	ldr	r3, [pc, #72]	; (81f58 <prvSampleTimeNow+0xa8>)
   81f10:	4798      	blx	r3
   81f12:	bf00      	nop
   81f14:	e7fd      	b.n	81f12 <prvSampleTimeNow+0x62>

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
   81f16:	4e11      	ldr	r6, [pc, #68]	; (81f5c <prvSampleTimeNow+0xac>)
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );

		/* Remove the timer from the list. */
		pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
		uxListRemove( &( pxTimer->xTimerListItem ) );
   81f18:	4f11      	ldr	r7, [pc, #68]	; (81f60 <prvSampleTimeNow+0xb0>)

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
   81f1a:	6833      	ldr	r3, [r6, #0]
   81f1c:	681a      	ldr	r2, [r3, #0]
   81f1e:	2a00      	cmp	r2, #0
   81f20:	d1d2      	bne.n	81ec8 <prvSampleTimeNow+0x18>
			}
		}
	}

	pxTemp = pxCurrentTimerList;
	pxCurrentTimerList = pxOverflowTimerList;
   81f22:	4a10      	ldr	r2, [pc, #64]	; (81f64 <prvSampleTimeNow+0xb4>)
   81f24:	6810      	ldr	r0, [r2, #0]
   81f26:	490d      	ldr	r1, [pc, #52]	; (81f5c <prvSampleTimeNow+0xac>)
   81f28:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
   81f2a:	6013      	str	r3, [r2, #0]
	xTimeNow = xTaskGetTickCount();

	if( xTimeNow < xLastTime )
	{
		prvSwitchTimerLists( xLastTime );
		*pxTimerListsWereSwitched = pdTRUE;
   81f2c:	2301      	movs	r3, #1
   81f2e:	f8c9 3000 	str.w	r3, [r9]
   81f32:	e002      	b.n	81f3a <prvSampleTimeNow+0x8a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
   81f34:	2300      	movs	r3, #0
   81f36:	f8c9 3000 	str.w	r3, [r9]
	}

	xLastTime = xTimeNow;
   81f3a:	4b04      	ldr	r3, [pc, #16]	; (81f4c <prvSampleTimeNow+0x9c>)
   81f3c:	f8a3 8000 	strh.w	r8, [r3]

	return xTimeNow;
}
   81f40:	4640      	mov	r0, r8
   81f42:	b002      	add	sp, #8
   81f44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   81f48:	00081619 	.word	0x00081619
   81f4c:	20078b9c 	.word	0x20078b9c
   81f50:	00080abd 	.word	0x00080abd
   81f54:	00081e59 	.word	0x00081e59
   81f58:	00080b89 	.word	0x00080b89
   81f5c:	20078b70 	.word	0x20078b70
   81f60:	00080b01 	.word	0x00080b01
   81f64:	20078ba4 	.word	0x20078ba4

00081f68 <prvTimerTask>:
	pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
}
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
   81f68:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   81f6c:	b087      	sub	sp, #28
				time has not been reached yet.  This task should therefore
				block to wait for the next expire time or a command to be
				received - whichever comes first.  The following line cannot
				be reached unless xNextExpireTime > xTimeNow, except in the
				case when the current timer list is empty. */
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
   81f6e:	4d51      	ldr	r5, [pc, #324]	; (820b4 <prvTimerTask+0x14c>)
portBASE_TYPE xResult;

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
	uxListRemove( &( pxTimer->xTimerListItem ) );
   81f70:	f8df 8170 	ldr.w	r8, [pc, #368]	; 820e4 <prvTimerTask+0x17c>
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
   81f74:	4b50      	ldr	r3, [pc, #320]	; (820b8 <prvTimerTask+0x150>)
   81f76:	681b      	ldr	r3, [r3, #0]
   81f78:	681a      	ldr	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
   81f7a:	2a00      	cmp	r2, #0
   81f7c:	f000 8090 	beq.w	820a0 <prvTimerTask+0x138>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   81f80:	68db      	ldr	r3, [r3, #12]
   81f82:	881c      	ldrh	r4, [r3, #0]
   81f84:	b2a4      	uxth	r4, r4
static void prvProcessTimerOrBlockTask( portTickType xNextExpireTime, portBASE_TYPE xListWasEmpty )
{
portTickType xTimeNow;
portBASE_TYPE xTimerListsWereSwitched;

	vTaskSuspendAll();
   81f86:	4b4d      	ldr	r3, [pc, #308]	; (820bc <prvTimerTask+0x154>)
   81f88:	4798      	blx	r3
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampelTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   81f8a:	a803      	add	r0, sp, #12
   81f8c:	4b4c      	ldr	r3, [pc, #304]	; (820c0 <prvTimerTask+0x158>)
   81f8e:	4798      	blx	r3
   81f90:	4607      	mov	r7, r0
		if( xTimerListsWereSwitched == pdFALSE )
   81f92:	9b03      	ldr	r3, [sp, #12]
   81f94:	2b00      	cmp	r3, #0
   81f96:	d132      	bne.n	81ffe <prvTimerTask+0x96>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
   81f98:	4284      	cmp	r4, r0
   81f9a:	d825      	bhi.n	81fe8 <prvTimerTask+0x80>
			{
				xTaskResumeAll();
   81f9c:	4b49      	ldr	r3, [pc, #292]	; (820c4 <prvTimerTask+0x15c>)
   81f9e:	4798      	blx	r3
xTIMER *pxTimer;
portBASE_TYPE xResult;

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
   81fa0:	4b45      	ldr	r3, [pc, #276]	; (820b8 <prvTimerTask+0x150>)
   81fa2:	681b      	ldr	r3, [r3, #0]
   81fa4:	68db      	ldr	r3, [r3, #12]
   81fa6:	68de      	ldr	r6, [r3, #12]
	uxListRemove( &( pxTimer->xTimerListItem ) );
   81fa8:	1d30      	adds	r0, r6, #4
   81faa:	47c0      	blx	r8
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
   81fac:	69f3      	ldr	r3, [r6, #28]
   81fae:	2b01      	cmp	r3, #1
   81fb0:	d115      	bne.n	81fde <prvTimerTask+0x76>
		a time relative to anything other than the current time.  It
		will therefore be inserted into the correct list relative to
		the time this task thinks it is now, even if a command to
		switch lists due to a tick count overflow is already waiting in
		the timer queue. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
   81fb2:	8b31      	ldrh	r1, [r6, #24]
   81fb4:	4421      	add	r1, r4
   81fb6:	4630      	mov	r0, r6
   81fb8:	b289      	uxth	r1, r1
   81fba:	463a      	mov	r2, r7
   81fbc:	4623      	mov	r3, r4
   81fbe:	4f42      	ldr	r7, [pc, #264]	; (820c8 <prvTimerTask+0x160>)
   81fc0:	47b8      	blx	r7
   81fc2:	2801      	cmp	r0, #1
   81fc4:	d10b      	bne.n	81fde <prvTimerTask+0x76>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xNextExpireTime, NULL, tmrNO_DELAY );
   81fc6:	2300      	movs	r3, #0
   81fc8:	9300      	str	r3, [sp, #0]
   81fca:	4630      	mov	r0, r6
   81fcc:	4619      	mov	r1, r3
   81fce:	4622      	mov	r2, r4
   81fd0:	4c3e      	ldr	r4, [pc, #248]	; (820cc <prvTimerTask+0x164>)
   81fd2:	47a0      	blx	r4
			configASSERT( xResult );
   81fd4:	b918      	cbnz	r0, 81fde <prvTimerTask+0x76>
   81fd6:	4b3e      	ldr	r3, [pc, #248]	; (820d0 <prvTimerTask+0x168>)
   81fd8:	4798      	blx	r3
   81fda:	bf00      	nop
   81fdc:	e7fd      	b.n	81fda <prvTimerTask+0x72>
			( void ) xResult;
		}
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
   81fde:	6a73      	ldr	r3, [r6, #36]	; 0x24
   81fe0:	4630      	mov	r0, r6
   81fe2:	4798      	blx	r3
   81fe4:	e00d      	b.n	82002 <prvTimerTask+0x9a>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( portTickType ) 0U;
   81fe6:	2400      	movs	r4, #0
				time has not been reached yet.  This task should therefore
				block to wait for the next expire time or a command to be
				received - whichever comes first.  The following line cannot
				be reached unless xNextExpireTime > xTimeNow, except in the
				case when the current timer list is empty. */
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
   81fe8:	1be1      	subs	r1, r4, r7
   81fea:	6828      	ldr	r0, [r5, #0]
   81fec:	b289      	uxth	r1, r1
   81fee:	4b39      	ldr	r3, [pc, #228]	; (820d4 <prvTimerTask+0x16c>)
   81ff0:	4798      	blx	r3

				if( xTaskResumeAll() == pdFALSE )
   81ff2:	4b34      	ldr	r3, [pc, #208]	; (820c4 <prvTimerTask+0x15c>)
   81ff4:	4798      	blx	r3
   81ff6:	b920      	cbnz	r0, 82002 <prvTimerTask+0x9a>
				{
					/* Yield to wait for either a command to arrive, or the block time
					to expire.  If a command arrived between the critical section being
					exited and this yield then the yield will not cause the task
					to block. */
					portYIELD_WITHIN_API();
   81ff8:	4b37      	ldr	r3, [pc, #220]	; (820d8 <prvTimerTask+0x170>)
   81ffa:	4798      	blx	r3
   81ffc:	e001      	b.n	82002 <prvTimerTask+0x9a>
				}
			}
		}
		else
		{
			xTaskResumeAll();
   81ffe:	4b31      	ldr	r3, [pc, #196]	; (820c4 <prvTimerTask+0x15c>)
   82000:	4798      	blx	r3
portBASE_TYPE xTimerListsWereSwitched, xResult;
portTickType xTimeNow;

	/* In this case the xTimerListsWereSwitched parameter is not used, but it
	must be present in the function call. */
	xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   82002:	a802      	add	r0, sp, #8
   82004:	4b2e      	ldr	r3, [pc, #184]	; (820c0 <prvTimerTask+0x158>)
   82006:	4798      	blx	r3
   82008:	4607      	mov	r7, r0

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
   8200a:	4e34      	ldr	r6, [pc, #208]	; (820dc <prvTimerTask+0x174>)
				break;

			case tmrCOMMAND_CHANGE_PERIOD :
				pxTimer->xTimerPeriodInTicks = xMessage.xMessageValue;
				configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
				prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
   8200c:	f8df 90b8 	ldr.w	r9, [pc, #184]	; 820c8 <prvTimerTask+0x160>
   82010:	e03e      	b.n	82090 <prvTimerTask+0x128>
	must be present in the function call. */
	xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
	{
		pxTimer = xMessage.pxTimer;
   82012:	9c05      	ldr	r4, [sp, #20]

		/* Is the timer already in a list of active timers?  When the command
		is trmCOMMAND_PROCESS_TIMER_OVERFLOW, the timer will be NULL as the
		command is to the task rather than to an individual timer. */
		if( pxTimer != NULL )
   82014:	b11c      	cbz	r4, 8201e <prvTimerTask+0xb6>
		{
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
   82016:	6963      	ldr	r3, [r4, #20]
   82018:	b10b      	cbz	r3, 8201e <prvTimerTask+0xb6>
			{
				/* The timer is in a list, remove it. */
				uxListRemove( &( pxTimer->xTimerListItem ) );
   8201a:	1d20      	adds	r0, r4, #4
   8201c:	47c0      	blx	r8
			}
		}

		traceTIMER_COMMAND_RECEIVED( pxTimer, xMessage.xMessageID, xMessage.xMessageValue );

		switch( xMessage.xMessageID )
   8201e:	9b03      	ldr	r3, [sp, #12]
   82020:	2b02      	cmp	r3, #2
   82022:	d023      	beq.n	8206c <prvTimerTask+0x104>
   82024:	2b03      	cmp	r3, #3
   82026:	d030      	beq.n	8208a <prvTimerTask+0x122>
   82028:	2b00      	cmp	r3, #0
   8202a:	d131      	bne.n	82090 <prvTimerTask+0x128>
		{
			case tmrCOMMAND_START :
				/* Start or restart a timer. */
				if( prvInsertTimerInActiveList( pxTimer,  xMessage.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.xMessageValue ) == pdTRUE )
   8202c:	f8bd 3010 	ldrh.w	r3, [sp, #16]
   82030:	8b21      	ldrh	r1, [r4, #24]
   82032:	4419      	add	r1, r3
   82034:	4620      	mov	r0, r4
   82036:	b289      	uxth	r1, r1
   82038:	463a      	mov	r2, r7
   8203a:	47c8      	blx	r9
   8203c:	2801      	cmp	r0, #1
   8203e:	d127      	bne.n	82090 <prvTimerTask+0x128>
				{
					/* The timer expired before it was added to the active timer
					list.  Process it now. */
					pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
   82040:	6a63      	ldr	r3, [r4, #36]	; 0x24
   82042:	4620      	mov	r0, r4
   82044:	4798      	blx	r3

					if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
   82046:	69e3      	ldr	r3, [r4, #28]
   82048:	2b01      	cmp	r3, #1
   8204a:	d121      	bne.n	82090 <prvTimerTask+0x128>
					{
						xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xMessage.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
   8204c:	8b22      	ldrh	r2, [r4, #24]
   8204e:	f8bd 3010 	ldrh.w	r3, [sp, #16]
   82052:	441a      	add	r2, r3
   82054:	2300      	movs	r3, #0
   82056:	9300      	str	r3, [sp, #0]
   82058:	4620      	mov	r0, r4
   8205a:	4619      	mov	r1, r3
   8205c:	b292      	uxth	r2, r2
   8205e:	4c1b      	ldr	r4, [pc, #108]	; (820cc <prvTimerTask+0x164>)
   82060:	47a0      	blx	r4
						configASSERT( xResult );
   82062:	b9a8      	cbnz	r0, 82090 <prvTimerTask+0x128>
   82064:	4b1a      	ldr	r3, [pc, #104]	; (820d0 <prvTimerTask+0x168>)
   82066:	4798      	blx	r3
   82068:	bf00      	nop
   8206a:	e7fd      	b.n	82068 <prvTimerTask+0x100>
				/* The timer has already been removed from the active list.
				There is nothing to do here. */
				break;

			case tmrCOMMAND_CHANGE_PERIOD :
				pxTimer->xTimerPeriodInTicks = xMessage.xMessageValue;
   8206c:	f8bd 3010 	ldrh.w	r3, [sp, #16]
   82070:	8323      	strh	r3, [r4, #24]
				configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
   82072:	b91b      	cbnz	r3, 8207c <prvTimerTask+0x114>
   82074:	4b16      	ldr	r3, [pc, #88]	; (820d0 <prvTimerTask+0x168>)
   82076:	4798      	blx	r3
   82078:	bf00      	nop
   8207a:	e7fd      	b.n	82078 <prvTimerTask+0x110>
				prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
   8207c:	18f9      	adds	r1, r7, r3
   8207e:	4620      	mov	r0, r4
   82080:	b289      	uxth	r1, r1
   82082:	463a      	mov	r2, r7
   82084:	463b      	mov	r3, r7
   82086:	47c8      	blx	r9
   82088:	e002      	b.n	82090 <prvTimerTask+0x128>
				break;

			case tmrCOMMAND_DELETE :
				/* The timer has already been removed from the active list,
				just free up the memory. */
				vPortFree( pxTimer );
   8208a:	4620      	mov	r0, r4
   8208c:	4b14      	ldr	r3, [pc, #80]	; (820e0 <prvTimerTask+0x178>)
   8208e:	4798      	blx	r3

	/* In this case the xTimerListsWereSwitched parameter is not used, but it
	must be present in the function call. */
	xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
   82090:	6828      	ldr	r0, [r5, #0]
   82092:	a903      	add	r1, sp, #12
   82094:	2200      	movs	r2, #0
   82096:	4613      	mov	r3, r2
   82098:	47b0      	blx	r6
   8209a:	2800      	cmp	r0, #0
   8209c:	d1b9      	bne.n	82012 <prvTimerTask+0xaa>
   8209e:	e769      	b.n	81f74 <prvTimerTask+0xc>
static void prvProcessTimerOrBlockTask( portTickType xNextExpireTime, portBASE_TYPE xListWasEmpty )
{
portTickType xTimeNow;
portBASE_TYPE xTimerListsWereSwitched;

	vTaskSuspendAll();
   820a0:	4b06      	ldr	r3, [pc, #24]	; (820bc <prvTimerTask+0x154>)
   820a2:	4798      	blx	r3
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampelTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   820a4:	a803      	add	r0, sp, #12
   820a6:	4b06      	ldr	r3, [pc, #24]	; (820c0 <prvTimerTask+0x158>)
   820a8:	4798      	blx	r3
   820aa:	4607      	mov	r7, r0
		if( xTimerListsWereSwitched == pdFALSE )
   820ac:	9b03      	ldr	r3, [sp, #12]
   820ae:	2b00      	cmp	r3, #0
   820b0:	d099      	beq.n	81fe6 <prvTimerTask+0x7e>
   820b2:	e7a4      	b.n	81ffe <prvTimerTask+0x96>
   820b4:	20078ba0 	.word	0x20078ba0
   820b8:	20078b70 	.word	0x20078b70
   820bc:	00081609 	.word	0x00081609
   820c0:	00081eb1 	.word	0x00081eb1
   820c4:	00081765 	.word	0x00081765
   820c8:	00081d61 	.word	0x00081d61
   820cc:	00081e59 	.word	0x00081e59
   820d0:	00080b89 	.word	0x00080b89
   820d4:	000812f1 	.word	0x000812f1
   820d8:	00080b79 	.word	0x00080b79
   820dc:	0008118d 	.word	0x0008118d
   820e0:	00080dad 	.word	0x00080dad
   820e4:	00080b01 	.word	0x00080b01

000820e8 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
   820e8:	3801      	subs	r0, #1
   820ea:	2802      	cmp	r0, #2
   820ec:	d818      	bhi.n	82120 <_write+0x38>
int __attribute__((weak))
_write (int file, const char *ptr, int len);

int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
   820ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   820f2:	460e      	mov	r6, r1
   820f4:	4614      	mov	r4, r2

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
   820f6:	b182      	cbz	r2, 8211a <_write+0x32>
   820f8:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
   820fa:	f8df 8038 	ldr.w	r8, [pc, #56]	; 82134 <_write+0x4c>
   820fe:	4f0c      	ldr	r7, [pc, #48]	; (82130 <_write+0x48>)
   82100:	f8d8 0000 	ldr.w	r0, [r8]
   82104:	f815 1b01 	ldrb.w	r1, [r5], #1
   82108:	683b      	ldr	r3, [r7, #0]
   8210a:	4798      	blx	r3
   8210c:	2800      	cmp	r0, #0
   8210e:	db0a      	blt.n	82126 <_write+0x3e>
   82110:	1ba8      	subs	r0, r5, r6

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
   82112:	3c01      	subs	r4, #1
   82114:	d1f4      	bne.n	82100 <_write+0x18>
   82116:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8211a:	2000      	movs	r0, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
		}
		++nChars;
	}
	return nChars;
   8211c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
   82120:	f04f 30ff 	mov.w	r0, #4294967295
			return -1;
		}
		++nChars;
	}
	return nChars;
}
   82124:	4770      	bx	lr
		return -1;
	}

	for (; len != 0; --len) {
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
   82126:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
   8212a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8212e:	bf00      	nop
   82130:	20078c7c 	.word	0x20078c7c
   82134:	20078c80 	.word	0x20078c80

00082138 <pwm_clocks_generate>:
 *
 * \retval Return the value to be set in the PWM Clock Register (PWM Mode Register for
 * SAM3N/SAM4N/SAM4C/SAM4CP/SAM4CM) or PWM_INVALID_ARGUMENT if the configuration cannot be met.
 */
static uint32_t pwm_clocks_generate(uint32_t ul_frequency, uint32_t ul_mck)
{
   82138:	b4f0      	push	{r4, r5, r6, r7}
   8213a:	b08c      	sub	sp, #48	; 0x30
   8213c:	4607      	mov	r7, r0
   8213e:	460e      	mov	r6, r1
	uint32_t ul_divisors[PWM_CLOCK_PRE_MAX] =
   82140:	ac01      	add	r4, sp, #4
   82142:	4d11      	ldr	r5, [pc, #68]	; (82188 <pwm_clocks_generate+0x50>)
   82144:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   82146:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   82148:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   8214a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   8214c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   82150:	e884 0007 	stmia.w	r4, {r0, r1, r2}
   82154:	aa01      	add	r2, sp, #4
			{1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024 };
	uint32_t ul_pre = 0;
   82156:	2000      	movs	r0, #0
	uint32_t ul_div;

	/* Find prescaler and divisor values */
	do {
		ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
   82158:	f852 3b04 	ldr.w	r3, [r2], #4
   8215c:	fbb6 f3f3 	udiv	r3, r6, r3
   82160:	fbb3 f3f7 	udiv	r3, r3, r7
		if (ul_div <= PWM_CLOCK_DIV_MAX) {
   82164:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   82168:	d905      	bls.n	82176 <pwm_clocks_generate+0x3e>
			break;
		}
		ul_pre++;
   8216a:	3001      	adds	r0, #1
	} while (ul_pre < PWM_CLOCK_PRE_MAX);
   8216c:	280b      	cmp	r0, #11
   8216e:	d1f3      	bne.n	82158 <pwm_clocks_generate+0x20>

	/* Return result */
	if (ul_pre < PWM_CLOCK_PRE_MAX) {
		return ul_div | (ul_pre << 8);
	} else {
		return PWM_INVALID_ARGUMENT;
   82170:	f64f 70ff 	movw	r0, #65535	; 0xffff
   82174:	e005      	b.n	82182 <pwm_clocks_generate+0x4a>
		}
		ul_pre++;
	} while (ul_pre < PWM_CLOCK_PRE_MAX);

	/* Return result */
	if (ul_pre < PWM_CLOCK_PRE_MAX) {
   82176:	280a      	cmp	r0, #10
		return ul_div | (ul_pre << 8);
   82178:	bf94      	ite	ls
   8217a:	ea43 2000 	orrls.w	r0, r3, r0, lsl #8
	} else {
		return PWM_INVALID_ARGUMENT;
   8217e:	f64f 70ff 	movwhi	r0, #65535	; 0xffff
	}
}
   82182:	b00c      	add	sp, #48	; 0x30
   82184:	bcf0      	pop	{r4, r5, r6, r7}
   82186:	4770      	bx	lr
   82188:	000863c4 	.word	0x000863c4

0008218c <pwm_init>:
 * \param clock_config PWM clock configuration.
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_init(Pwm *p_pwm, pwm_clock_t *clock_config)
{
   8218c:	b570      	push	{r4, r5, r6, lr}
   8218e:	4606      	mov	r6, r0
   82190:	460c      	mov	r4, r1
	uint32_t clock = 0;
	uint32_t result;

	/* Clock A */
	if (clock_config->ul_clka != 0) {
   82192:	6808      	ldr	r0, [r1, #0]
   82194:	b140      	cbz	r0, 821a8 <pwm_init+0x1c>
		result = pwm_clocks_generate(clock_config->ul_clka, clock_config->ul_mck);
   82196:	6889      	ldr	r1, [r1, #8]
   82198:	4b0e      	ldr	r3, [pc, #56]	; (821d4 <pwm_init+0x48>)
   8219a:	4798      	blx	r3
   8219c:	4605      	mov	r5, r0
		if (result == PWM_INVALID_ARGUMENT) {
   8219e:	f64f 73ff 	movw	r3, #65535	; 0xffff
   821a2:	4298      	cmp	r0, r3
   821a4:	d101      	bne.n	821aa <pwm_init+0x1e>
   821a6:	e00e      	b.n	821c6 <pwm_init+0x3a>
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_init(Pwm *p_pwm, pwm_clock_t *clock_config)
{
	uint32_t clock = 0;
   821a8:	2500      	movs	r5, #0

		clock = result;
	}

	/* Clock B */
	if (clock_config->ul_clkb != 0) {
   821aa:	6860      	ldr	r0, [r4, #4]
   821ac:	b140      	cbz	r0, 821c0 <pwm_init+0x34>
		result = pwm_clocks_generate(clock_config->ul_clkb, clock_config->ul_mck);
   821ae:	68a1      	ldr	r1, [r4, #8]
   821b0:	4b08      	ldr	r3, [pc, #32]	; (821d4 <pwm_init+0x48>)
   821b2:	4798      	blx	r3

		if (result == PWM_INVALID_ARGUMENT) {
   821b4:	f64f 73ff 	movw	r3, #65535	; 0xffff
   821b8:	4298      	cmp	r0, r3
   821ba:	d007      	beq.n	821cc <pwm_init+0x40>
			return result;
		}

		clock |= (result << 16);
   821bc:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
	}
#if (SAM3N || SAM4N || SAM4C || SAM4CP || SAM4CM)
	p_pwm->PWM_MR = clock;
#else
	p_pwm->PWM_CLK = clock;
   821c0:	6035      	str	r5, [r6, #0]
#endif
	return 0;
   821c2:	2000      	movs	r0, #0
   821c4:	bd70      	pop	{r4, r5, r6, pc}

	/* Clock A */
	if (clock_config->ul_clka != 0) {
		result = pwm_clocks_generate(clock_config->ul_clka, clock_config->ul_mck);
		if (result == PWM_INVALID_ARGUMENT) {
			return result;
   821c6:	f64f 70ff 	movw	r0, #65535	; 0xffff
   821ca:	bd70      	pop	{r4, r5, r6, pc}
	/* Clock B */
	if (clock_config->ul_clkb != 0) {
		result = pwm_clocks_generate(clock_config->ul_clkb, clock_config->ul_mck);

		if (result == PWM_INVALID_ARGUMENT) {
			return result;
   821cc:	f64f 70ff 	movw	r0, #65535	; 0xffff
	p_pwm->PWM_MR = clock;
#else
	p_pwm->PWM_CLK = clock;
#endif
	return 0;
}
   821d0:	bd70      	pop	{r4, r5, r6, pc}
   821d2:	bf00      	nop
   821d4:	00082139 	.word	0x00082139

000821d8 <pwm_channel_init>:
 * \param p_channel Configurations of the specified PWM channel.
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_channel_init(Pwm *p_pwm, pwm_channel_t *p_channel)
{
   821d8:	b470      	push	{r4, r5, r6}
	uint32_t tmp_reg = 0;
	uint32_t ch_num = p_channel->channel;
   821da:	680b      	ldr	r3, [r1, #0]

	/* Channel Mode/Clock Register */
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
			(p_channel->polarity << 9) |
   821dc:	8a8a      	ldrh	r2, [r1, #20]
{
	uint32_t tmp_reg = 0;
	uint32_t ch_num = p_channel->channel;

	/* Channel Mode/Clock Register */
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
   821de:	684c      	ldr	r4, [r1, #4]
   821e0:	f004 040f 	and.w	r4, r4, #15
   821e4:	4322      	orrs	r2, r4
			(p_channel->polarity << 9) |
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E || SAMV70 || SAMV71 || SAME70 || SAMS70)
			(p_channel->counter_event) |
			(p_channel->b_deadtime_generator << 16) |
			(p_channel->b_pwmh_output_inverted << 17) |
			(p_channel->b_pwml_output_inverted << 18) |
   821e6:	890c      	ldrh	r4, [r1, #8]
   821e8:	4322      	orrs	r2, r4
	uint32_t tmp_reg = 0;
	uint32_t ch_num = p_channel->channel;

	/* Channel Mode/Clock Register */
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
			(p_channel->polarity << 9) |
   821ea:	7a8c      	ldrb	r4, [r1, #10]
   821ec:	ea42 2244 	orr.w	r2, r2, r4, lsl #9
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E || SAMV70 || SAMV71 || SAME70 || SAMS70)
			(p_channel->counter_event) |
			(p_channel->b_deadtime_generator << 16) |
   821f0:	7d8c      	ldrb	r4, [r1, #22]
   821f2:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
			(p_channel->b_pwmh_output_inverted << 17) |
   821f6:	7dcc      	ldrb	r4, [r1, #23]
   821f8:	ea42 4244 	orr.w	r2, r2, r4, lsl #17
			(p_channel->b_pwml_output_inverted << 18) |
   821fc:	7e0c      	ldrb	r4, [r1, #24]
{
	uint32_t tmp_reg = 0;
	uint32_t ch_num = p_channel->channel;

	/* Channel Mode/Clock Register */
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
   821fe:	ea42 4284 	orr.w	r2, r2, r4, lsl #18
   82202:	eb00 1443 	add.w	r4, r0, r3, lsl #5
			(p_channel->b_deadtime_generator << 16) |
			(p_channel->b_pwmh_output_inverted << 17) |
			(p_channel->b_pwml_output_inverted << 18) |
#endif
			(p_channel->alignment);
	p_pwm->PWM_CH_NUM[ch_num].PWM_CMR = tmp_reg;
   82206:	f8c4 2200 	str.w	r2, [r4, #512]	; 0x200

	/* Channel Duty Cycle Register */
	p_pwm->PWM_CH_NUM[ch_num].PWM_CDTY = p_channel->ul_duty;
   8220a:	68ca      	ldr	r2, [r1, #12]
   8220c:	f8c4 2204 	str.w	r2, [r4, #516]	; 0x204

	/* Channel Period Register */
	p_pwm->PWM_CH_NUM[ch_num].PWM_CPRD = p_channel->ul_period;
   82210:	690a      	ldr	r2, [r1, #16]
   82212:	f8c4 220c 	str.w	r2, [r4, #524]	; 0x20c
	
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E || SAMV70 || SAMV71 || SAME70 || SAMS70)
	/* Channel Dead Time Register */
	if (p_channel->b_deadtime_generator) {
   82216:	7d8a      	ldrb	r2, [r1, #22]
   82218:	b13a      	cbz	r2, 8222a <pwm_channel_init+0x52>
		p_pwm->PWM_CH_NUM[ch_num].PWM_DT =
				PWM_DT_DTL(p_channel->
   8221a:	8b8c      	ldrh	r4, [r1, #28]
				us_deadtime_pwml) | PWM_DT_DTH(p_channel->
   8221c:	8b4a      	ldrh	r2, [r1, #26]
   8221e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
	p_pwm->PWM_CH_NUM[ch_num].PWM_CPRD = p_channel->ul_period;
	
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E || SAMV70 || SAMV71 || SAME70 || SAMS70)
	/* Channel Dead Time Register */
	if (p_channel->b_deadtime_generator) {
		p_pwm->PWM_CH_NUM[ch_num].PWM_DT =
   82222:	eb00 1443 	add.w	r4, r0, r3, lsl #5
   82226:	f8c4 2218 	str.w	r2, [r4, #536]	; 0x218
				us_deadtime_pwml) | PWM_DT_DTH(p_channel->
				us_deadtime_pwmh);
	}

	/* Output Selection Register */
	tmp_reg  = p_pwm->PWM_OS & (~((PWM_OS_OSH0 | PWM_OS_OSL0) << ch_num));
   8222a:	6c84      	ldr	r4, [r0, #72]	; 0x48
   8222c:	f04f 1201 	mov.w	r2, #65537	; 0x10001
   82230:	409a      	lsls	r2, r3
   82232:	43d2      	mvns	r2, r2
   82234:	ea02 0504 	and.w	r5, r2, r4
	tmp_reg |= ((p_channel->output_selection.b_override_pwmh) << ch_num) |
			(((p_channel->output_selection.b_override_pwml) << ch_num)
   82238:	7fcc      	ldrb	r4, [r1, #31]
   8223a:	fa04 f603 	lsl.w	r6, r4, r3
				us_deadtime_pwmh);
	}

	/* Output Selection Register */
	tmp_reg  = p_pwm->PWM_OS & (~((PWM_OS_OSH0 | PWM_OS_OSL0) << ch_num));
	tmp_reg |= ((p_channel->output_selection.b_override_pwmh) << ch_num) |
   8223e:	7f8c      	ldrb	r4, [r1, #30]
   82240:	409c      	lsls	r4, r3
   82242:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
   82246:	432c      	orrs	r4, r5
			(((p_channel->output_selection.b_override_pwml) << ch_num)
					<< 16);
	p_pwm->PWM_OS = tmp_reg;
   82248:	6484      	str	r4, [r0, #72]	; 0x48

	/* Output Override Value Register */
	tmp_reg  = p_pwm->PWM_OOV & (~((PWM_OOV_OOVH0 | PWM_OOV_OOVL0) << ch_num));
   8224a:	6c44      	ldr	r4, [r0, #68]	; 0x44
   8224c:	4014      	ands	r4, r2
	tmp_reg |= ((p_channel->output_selection.override_level_pwmh) << ch_num) |
			(((p_channel->output_selection.override_level_pwml) << ch_num)
   8224e:	f891 2021 	ldrb.w	r2, [r1, #33]	; 0x21
   82252:	fa02 f503 	lsl.w	r5, r2, r3
					<< 16);
	p_pwm->PWM_OS = tmp_reg;

	/* Output Override Value Register */
	tmp_reg  = p_pwm->PWM_OOV & (~((PWM_OOV_OOVH0 | PWM_OOV_OOVL0) << ch_num));
	tmp_reg |= ((p_channel->output_selection.override_level_pwmh) << ch_num) |
   82256:	f891 2020 	ldrb.w	r2, [r1, #32]
   8225a:	409a      	lsls	r2, r3
   8225c:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
   82260:	4322      	orrs	r2, r4
			(((p_channel->output_selection.override_level_pwml) << ch_num)
					<< 16);
	p_pwm->PWM_OOV = tmp_reg;
   82262:	6442      	str	r2, [r0, #68]	; 0x44

	/* Sync Channels Mode Register */
	uint32_t channel = (1 << ch_num);
   82264:	2201      	movs	r2, #1
   82266:	409a      	lsls	r2, r3
	if (p_channel->b_sync_ch) {
   82268:	f891 4022 	ldrb.w	r4, [r1, #34]	; 0x22
   8226c:	b11c      	cbz	r4, 82276 <pwm_channel_init+0x9e>
		p_pwm->PWM_SCM |= channel;
   8226e:	6a04      	ldr	r4, [r0, #32]
   82270:	4314      	orrs	r4, r2
   82272:	6204      	str	r4, [r0, #32]
   82274:	e003      	b.n	8227e <pwm_channel_init+0xa6>
	} else {
		p_pwm->PWM_SCM &= ~((uint32_t) channel);
   82276:	6a04      	ldr	r4, [r0, #32]
   82278:	ea24 0402 	bic.w	r4, r4, r2
   8227c:	6204      	str	r4, [r0, #32]
		} else {
			p_pwm->PWM_FPV1 &= (~((0x01 << ch_num) << 16));
		}
	}
#else
	if (p_channel->ul_fault_output_pwmh == PWM_HIGH) {
   8227e:	f891 4024 	ldrb.w	r4, [r1, #36]	; 0x24
   82282:	2c01      	cmp	r4, #1
		p_pwm->PWM_FPV |= (0x01 << ch_num);
   82284:	6e84      	ldr	r4, [r0, #104]	; 0x68
   82286:	bf0c      	ite	eq
   82288:	4314      	orreq	r4, r2
	} else {
		p_pwm->PWM_FPV &= (~(0x01 << ch_num));
   8228a:	4394      	bicne	r4, r2
   8228c:	6684      	str	r4, [r0, #104]	; 0x68
	}
	if (p_channel->ul_fault_output_pwml == PWM_HIGH) {
   8228e:	f891 4025 	ldrb.w	r4, [r1, #37]	; 0x25
   82292:	2c01      	cmp	r4, #1
		p_pwm->PWM_FPV |= ((0x01 << ch_num) << 16);
   82294:	6e84      	ldr	r4, [r0, #104]	; 0x68
   82296:	bf0c      	ite	eq
   82298:	ea44 4202 	orreq.w	r2, r4, r2, lsl #16
	} else {
		p_pwm->PWM_FPV &= (~((0x01 << ch_num) << 16));
   8229c:	ea24 4202 	bicne.w	r2, r4, r2, lsl #16
   822a0:	6682      	str	r2, [r0, #104]	; 0x68
	}
#endif
	/* Fault Protection Enable Register */
	uint32_t fault_enable_reg = 0;
#if (SAM3XA)
	if (ch_num < 4) {
   822a2:	2b03      	cmp	r3, #3
   822a4:	d80b      	bhi.n	822be <pwm_channel_init+0xe6>
		ch_num *= 8;
		fault_enable_reg = p_pwm->PWM_FPE1;
   822a6:	6ec4      	ldr	r4, [r0, #108]	; 0x6c
#endif
	/* Fault Protection Enable Register */
	uint32_t fault_enable_reg = 0;
#if (SAM3XA)
	if (ch_num < 4) {
		ch_num *= 8;
   822a8:	00dd      	lsls	r5, r3, #3
		fault_enable_reg = p_pwm->PWM_FPE1;
		fault_enable_reg &= ~(0xFF << ch_num);
   822aa:	22ff      	movs	r2, #255	; 0xff
   822ac:	40aa      	lsls	r2, r5
   822ae:	ea24 0202 	bic.w	r2, r4, r2
		fault_enable_reg |= ((p_channel->fault_id) << ch_num);
   822b2:	f891 3023 	ldrb.w	r3, [r1, #35]	; 0x23
   822b6:	40ab      	lsls	r3, r5
   822b8:	4313      	orrs	r3, r2
		p_pwm->PWM_FPE1 = fault_enable_reg;
   822ba:	66c3      	str	r3, [r0, #108]	; 0x6c
   822bc:	e00c      	b.n	822d8 <pwm_channel_init+0x100>
	} else {
		ch_num -= 4;
   822be:	3b04      	subs	r3, #4
		ch_num *= 8;
		fault_enable_reg = p_pwm->PWM_FPE2;
   822c0:	6f02      	ldr	r2, [r0, #112]	; 0x70
		fault_enable_reg &= ~(0xFF << ch_num);
		fault_enable_reg |= ((p_channel->fault_id) << ch_num);
		p_pwm->PWM_FPE1 = fault_enable_reg;
	} else {
		ch_num -= 4;
		ch_num *= 8;
   822c2:	00db      	lsls	r3, r3, #3
		fault_enable_reg = p_pwm->PWM_FPE2;
		fault_enable_reg &= ~(0xFF << ch_num);
   822c4:	24ff      	movs	r4, #255	; 0xff
   822c6:	409c      	lsls	r4, r3
   822c8:	ea22 0404 	bic.w	r4, r2, r4
		fault_enable_reg |= ((p_channel->fault_id) << ch_num);
   822cc:	f891 2023 	ldrb.w	r2, [r1, #35]	; 0x23
   822d0:	fa02 f303 	lsl.w	r3, r2, r3
   822d4:	4323      	orrs	r3, r4
		p_pwm->PWM_FPE2 = fault_enable_reg;
   822d6:	6703      	str	r3, [r0, #112]	; 0x70
	p_pwm->PWM_CH_NUM[ch_num].PWM_CMR &= (~PWM_CMR_PPM);
	p_pwm->PWM_CH_NUM[ch_num].PWM_CMR |= (p_channel->ul_ppm_mode & PWM_CMR_PPM);
#endif

	return 0;
}
   822d8:	2000      	movs	r0, #0
   822da:	bc70      	pop	{r4, r5, r6}
   822dc:	4770      	bx	lr
   822de:	bf00      	nop

000822e0 <pwm_channel_update_duty>:
 *
 * \retval 0 if changing succeeds, otherwise fails.
 */
uint32_t pwm_channel_update_duty(Pwm *p_pwm, pwm_channel_t *p_channel,
		uint32_t ul_duty)
{
   822e0:	b410      	push	{r4}
	uint32_t ch_num = p_channel->channel;
   822e2:	680c      	ldr	r4, [r1, #0]

		/** Check parameter */
	if (p_channel->ul_period < ul_duty) {
   822e4:	690b      	ldr	r3, [r1, #16]
   822e6:	4293      	cmp	r3, r2
   822e8:	d306      	bcc.n	822f8 <pwm_channel_update_duty+0x18>
		return PWM_INVALID_ARGUMENT;
	} else {
		/* Save new duty cycle value */
		p_channel->ul_duty = ul_duty;
   822ea:	60ca      	str	r2, [r1, #12]
		mode &= ~PWM_CMR_CPD;
		p_pwm->PWM_CH_NUM[ch_num].PWM_CMR = mode;

		p_pwm->PWM_CH_NUM[ch_num].PWM_CUPD = ul_duty;
#else
		p_pwm->PWM_CH_NUM[ch_num].PWM_CDTYUPD = ul_duty;
   822ec:	eb00 1044 	add.w	r0, r0, r4, lsl #5
   822f0:	f8c0 2208 	str.w	r2, [r0, #520]	; 0x208
#endif
	}

	return 0;
   822f4:	2000      	movs	r0, #0
   822f6:	e001      	b.n	822fc <pwm_channel_update_duty+0x1c>
{
	uint32_t ch_num = p_channel->channel;

		/** Check parameter */
	if (p_channel->ul_period < ul_duty) {
		return PWM_INVALID_ARGUMENT;
   822f8:	f64f 70ff 	movw	r0, #65535	; 0xffff
		p_pwm->PWM_CH_NUM[ch_num].PWM_CDTYUPD = ul_duty;
#endif
	}

	return 0;
}
   822fc:	f85d 4b04 	ldr.w	r4, [sp], #4
   82300:	4770      	bx	lr
   82302:	bf00      	nop

00082304 <pwm_channel_enable>:
 * \param p_pwm Pointer to a PWM instance.
 * \param ul_channel PWM channel number to enable.
 */
void pwm_channel_enable(Pwm *p_pwm, uint32_t ul_channel)
{
	p_pwm->PWM_ENA = (1 << ul_channel);
   82304:	2301      	movs	r3, #1
   82306:	408b      	lsls	r3, r1
   82308:	6043      	str	r3, [r0, #4]
   8230a:	4770      	bx	lr

0008230c <pwm_channel_disable>:
 * \param p_pwm Pointer to a PWM instance.
 * \param ul_channel PWM channel number to disable.
 */
void pwm_channel_disable(Pwm *p_pwm, uint32_t ul_channel)
{
	p_pwm->PWM_DIS = (1 << ul_channel);
   8230c:	2301      	movs	r3, #1
   8230e:	408b      	lsls	r3, r1
   82310:	6083      	str	r3, [r0, #8]
   82312:	4770      	bx	lr

00082314 <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
   82314:	b410      	push	{r4}
	uint32_t cd = 0;

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
   82316:	23ac      	movs	r3, #172	; 0xac
   82318:	6003      	str	r3, [r0, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
   8231a:	680b      	ldr	r3, [r1, #0]
   8231c:	684a      	ldr	r2, [r1, #4]
   8231e:	fbb3 f3f2 	udiv	r3, r3, r2
   82322:	091b      	lsrs	r3, r3, #4
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
   82324:	1e5c      	subs	r4, r3, #1
   82326:	f64f 72fe 	movw	r2, #65534	; 0xfffe
   8232a:	4294      	cmp	r4, r2
   8232c:	d80a      	bhi.n	82344 <uart_init+0x30>
		return 1;

	p_uart->UART_BRGR = cd;
   8232e:	6203      	str	r3, [r0, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
   82330:	688b      	ldr	r3, [r1, #8]
   82332:	6043      	str	r3, [r0, #4]

#if (!SAMV71 && !SAMV70 && !SAME70 && !SAMS70)
	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
   82334:	f240 2302 	movw	r3, #514	; 0x202
   82338:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
#endif

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
   8233c:	2350      	movs	r3, #80	; 0x50
   8233e:	6003      	str	r3, [r0, #0]

	return 0;
   82340:	2000      	movs	r0, #0
   82342:	e000      	b.n	82346 <uart_init+0x32>

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
		return 1;
   82344:	2001      	movs	r0, #1

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;

	return 0;
}
   82346:	f85d 4b04 	ldr.w	r4, [sp], #4
   8234a:	4770      	bx	lr

0008234c <uart_is_rx_ready>:
 * \retval 1 One data has been received.
 * \retval 0 No data has been received.
 */
uint32_t uart_is_rx_ready(Uart *p_uart)
{
	return (p_uart->UART_SR & UART_SR_RXRDY) > 0;
   8234c:	6940      	ldr	r0, [r0, #20]
}
   8234e:	f000 0001 	and.w	r0, r0, #1
   82352:	4770      	bx	lr

00082354 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
   82354:	6943      	ldr	r3, [r0, #20]
   82356:	f013 0f02 	tst.w	r3, #2
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
   8235a:	bf1a      	itte	ne
   8235c:	61c1      	strne	r1, [r0, #28]
	return 0;
   8235e:	2000      	movne	r0, #0
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
		return 1;
   82360:	2001      	moveq	r0, #1

	/* Send character */
	p_uart->UART_THR = uc_data;
	return 0;
}
   82362:	4770      	bx	lr

00082364 <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
   82364:	6943      	ldr	r3, [r0, #20]
   82366:	f013 0f01 	tst.w	r3, #1
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
   8236a:	bf1d      	ittte	ne
   8236c:	6983      	ldrne	r3, [r0, #24]
   8236e:	700b      	strbne	r3, [r1, #0]
	return 0;
   82370:	2000      	movne	r0, #0
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
		return 1;
   82372:	2001      	moveq	r0, #1

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
	return 0;
}
   82374:	4770      	bx	lr
   82376:	bf00      	nop

00082378 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
   82378:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
   8237a:	480e      	ldr	r0, [pc, #56]	; (823b4 <sysclk_init+0x3c>)
   8237c:	4b0e      	ldr	r3, [pc, #56]	; (823b8 <sysclk_init+0x40>)
   8237e:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
   82380:	2000      	movs	r0, #0
   82382:	213e      	movs	r1, #62	; 0x3e
   82384:	4b0d      	ldr	r3, [pc, #52]	; (823bc <sysclk_init+0x44>)
   82386:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
   82388:	4c0d      	ldr	r4, [pc, #52]	; (823c0 <sysclk_init+0x48>)
   8238a:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
   8238c:	2800      	cmp	r0, #0
   8238e:	d0fc      	beq.n	8238a <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
   82390:	4b0c      	ldr	r3, [pc, #48]	; (823c4 <sysclk_init+0x4c>)
   82392:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   82394:	4a0c      	ldr	r2, [pc, #48]	; (823c8 <sysclk_init+0x50>)
   82396:	4b0d      	ldr	r3, [pc, #52]	; (823cc <sysclk_init+0x54>)
   82398:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
   8239a:	4c0d      	ldr	r4, [pc, #52]	; (823d0 <sysclk_init+0x58>)
   8239c:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   8239e:	2800      	cmp	r0, #0
   823a0:	d0fc      	beq.n	8239c <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   823a2:	2010      	movs	r0, #16
   823a4:	4b0b      	ldr	r3, [pc, #44]	; (823d4 <sysclk_init+0x5c>)
   823a6:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   823a8:	4b0b      	ldr	r3, [pc, #44]	; (823d8 <sysclk_init+0x60>)
   823aa:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   823ac:	4801      	ldr	r0, [pc, #4]	; (823b4 <sysclk_init+0x3c>)
   823ae:	4b02      	ldr	r3, [pc, #8]	; (823b8 <sysclk_init+0x40>)
   823b0:	4798      	blx	r3
   823b2:	bd10      	pop	{r4, pc}
   823b4:	0501bd00 	.word	0x0501bd00
   823b8:	200700a5 	.word	0x200700a5
   823bc:	0008279d 	.word	0x0008279d
   823c0:	000827f1 	.word	0x000827f1
   823c4:	00082801 	.word	0x00082801
   823c8:	200d3f01 	.word	0x200d3f01
   823cc:	400e0600 	.word	0x400e0600
   823d0:	00082811 	.word	0x00082811
   823d4:	00082735 	.word	0x00082735
   823d8:	00082929 	.word	0x00082929

000823dc <board_init>:
#include "conf_board.h"
#include "gpio.h"
#include "ioport.h"

void board_init(void)
{
   823dc:	b510      	push	{r4, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   823de:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   823e2:	4b1e      	ldr	r3, [pc, #120]	; (8245c <board_init+0x80>)
   823e4:	605a      	str	r2, [r3, #4]
   823e6:	200b      	movs	r0, #11
   823e8:	4c1d      	ldr	r4, [pc, #116]	; (82460 <board_init+0x84>)
   823ea:	47a0      	blx	r4
   823ec:	200c      	movs	r0, #12
   823ee:	47a0      	blx	r4
   823f0:	200d      	movs	r0, #13
   823f2:	47a0      	blx	r4
   823f4:	200e      	movs	r0, #14
   823f6:	47a0      	blx	r4
	 * In new designs IOPORT is used instead.
	 * Here IOPORT must be initialized for others to use before setting up IO.
	 */
	ioport_init();
	/* Configure LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
   823f8:	203b      	movs	r0, #59	; 0x3b
   823fa:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   823fe:	4c19      	ldr	r4, [pc, #100]	; (82464 <board_init+0x88>)
   82400:	47a0      	blx	r4
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
   82402:	2055      	movs	r0, #85	; 0x55
   82404:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   82408:	47a0      	blx	r4
	gpio_configure_pin(LED2_GPIO, LED2_FLAGS);
   8240a:	2056      	movs	r0, #86	; 0x56
   8240c:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   82410:	47a0      	blx	r4

	/* Configure Push Button pins */
	gpio_configure_pin(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS);
   82412:	2068      	movs	r0, #104	; 0x68
   82414:	4914      	ldr	r1, [pc, #80]	; (82468 <board_init+0x8c>)
   82416:	47a0      	blx	r4
	gpio_configure_pin(GPIO_PUSH_BUTTON_2, GPIO_PUSH_BUTTON_2_FLAGS);
   82418:	205c      	movs	r0, #92	; 0x5c
   8241a:	4914      	ldr	r1, [pc, #80]	; (8246c <board_init+0x90>)
   8241c:	47a0      	blx	r4

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART_PIO, PINS_UART, PINS_UART_FLAGS);
   8241e:	4814      	ldr	r0, [pc, #80]	; (82470 <board_init+0x94>)
   82420:	f44f 7140 	mov.w	r1, #768	; 0x300
   82424:	4a13      	ldr	r2, [pc, #76]	; (82474 <board_init+0x98>)
   82426:	4b14      	ldr	r3, [pc, #80]	; (82478 <board_init+0x9c>)
   82428:	4798      	blx	r3
#endif

	/* Configure ADC example pins */
#ifdef CONF_BOARD_ADC
	/* TC TIOA configuration */
	gpio_configure_pin(PIN_TC0_TIOA0,PIN_TC0_TIOA0_FLAGS);
   8242a:	2039      	movs	r0, #57	; 0x39
   8242c:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   82430:	47a0      	blx	r4

	/* ADC Trigger configuration */
	gpio_configure_pin(PINS_ADC_TRIG, PINS_ADC_TRIG_FLAG);
   82432:	200b      	movs	r0, #11
   82434:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   82438:	47a0      	blx	r4

	/* PWMH0 configuration */
	gpio_configure_pin(PIN_PWMC_PWMH0_TRIG, PIN_PWMC_PWMH0_TRIG_FLAG);
   8243a:	202c      	movs	r0, #44	; 0x2c
   8243c:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   82440:	47a0      	blx	r4
	gpio_configure_pin(PIN_PWM_LED1_GPIO, PIN_PWM_LED1_FLAGS);
#endif

#ifdef CONF_BOARD_PWM_LED2
	/* Configure PWM LED2 pin */
	gpio_configure_pin(PIN_PWM_LED2_GPIO, PIN_PWM_LED2_FLAGS);
   82442:	2057      	movs	r0, #87	; 0x57
   82444:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   82448:	47a0      	blx	r4
	gpio_configure_pin(PIN_USART0_TXD_IDX, PIN_USART0_TXD_FLAGS);
#endif

#ifdef CONF_BOARD_USB_PORT
	/* Configure USB_ID (UOTGID) pin */
	gpio_configure_pin(USB_ID_GPIO, USB_ID_FLAGS);
   8244a:	202b      	movs	r0, #43	; 0x2b
   8244c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   82450:	47a0      	blx	r4
	/* Configure USB_VBOF (UOTGVBOF) pin */
	gpio_configure_pin(USB_VBOF_GPIO, USB_VBOF_FLAGS);
   82452:	202a      	movs	r0, #42	; 0x2a
   82454:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   82458:	47a0      	blx	r4
   8245a:	bd10      	pop	{r4, pc}
   8245c:	400e1a50 	.word	0x400e1a50
   82460:	00082821 	.word	0x00082821
   82464:	00082521 	.word	0x00082521
   82468:	28000079 	.word	0x28000079
   8246c:	28000001 	.word	0x28000001
   82470:	400e0e00 	.word	0x400e0e00
   82474:	08000001 	.word	0x08000001
   82478:	000825f5 	.word	0x000825f5

0008247c <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
   8247c:	6442      	str	r2, [r0, #68]	; 0x44
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
	}
#elif (SAM3XA|| SAM3U)
	switch (ul_type) {
   8247e:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
   82482:	d016      	beq.n	824b2 <pio_set_peripheral+0x36>
   82484:	d804      	bhi.n	82490 <pio_set_peripheral+0x14>
   82486:	b1c1      	cbz	r1, 824ba <pio_set_peripheral+0x3e>
   82488:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
   8248c:	d00a      	beq.n	824a4 <pio_set_peripheral+0x28>
   8248e:	e013      	b.n	824b8 <pio_set_peripheral+0x3c>
   82490:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
   82494:	d011      	beq.n	824ba <pio_set_peripheral+0x3e>
   82496:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
   8249a:	d00e      	beq.n	824ba <pio_set_peripheral+0x3e>
   8249c:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
   824a0:	d10a      	bne.n	824b8 <pio_set_peripheral+0x3c>
   824a2:	4770      	bx	lr
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABSR;
   824a4:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   824a6:	6f01      	ldr	r1, [r0, #112]	; 0x70
   824a8:	400b      	ands	r3, r1
   824aa:	ea23 0302 	bic.w	r3, r3, r2
   824ae:	6703      	str	r3, [r0, #112]	; 0x70
		break;
   824b0:	e002      	b.n	824b8 <pio_set_peripheral+0x3c>

	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABSR;
   824b2:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   824b4:	4313      	orrs	r3, r2
   824b6:	6703      	str	r3, [r0, #112]	; 0x70
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
   824b8:	6042      	str	r2, [r0, #4]
   824ba:	4770      	bx	lr

000824bc <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   824bc:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   824be:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
   824c2:	bf14      	ite	ne
   824c4:	6641      	strne	r1, [r0, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   824c6:	6601      	streq	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   824c8:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
   824cc:	bf14      	ite	ne
   824ce:	6201      	strne	r1, [r0, #32]
	} else {
		p_pio->PIO_IFDR = ul_mask;
   824d0:	6241      	streq	r1, [r0, #36]	; 0x24
			p_pio->PIO_IFSCER = ul_mask;
		}
	}
#elif (SAM3XA|| SAM3U)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
   824d2:	f012 0f02 	tst.w	r2, #2
   824d6:	d002      	beq.n	824de <pio_set_input+0x22>
		p_pio->PIO_SCIFSR = ul_mask;
   824d8:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
   824dc:	e004      	b.n	824e8 <pio_set_input+0x2c>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
   824de:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_DIFSR = ul_mask;
   824e2:	bf18      	it	ne
   824e4:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
   824e8:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
   824ea:	6001      	str	r1, [r0, #0]
   824ec:	4770      	bx	lr
   824ee:	bf00      	nop

000824f0 <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
   824f0:	b410      	push	{r4}
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   824f2:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   824f4:	9c01      	ldr	r4, [sp, #4]
   824f6:	b10c      	cbz	r4, 824fc <pio_set_output+0xc>
		p_pio->PIO_PUER = ul_mask;
   824f8:	6641      	str	r1, [r0, #100]	; 0x64
   824fa:	e000      	b.n	824fe <pio_set_output+0xe>
	} else {
		p_pio->PIO_PUDR = ul_mask;
   824fc:	6601      	str	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
   824fe:	b10b      	cbz	r3, 82504 <pio_set_output+0x14>
		p_pio->PIO_MDER = ul_mask;
   82500:	6501      	str	r1, [r0, #80]	; 0x50
   82502:	e000      	b.n	82506 <pio_set_output+0x16>
	} else {
		p_pio->PIO_MDDR = ul_mask;
   82504:	6541      	str	r1, [r0, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
   82506:	b10a      	cbz	r2, 8250c <pio_set_output+0x1c>
		p_pio->PIO_SODR = ul_mask;
   82508:	6301      	str	r1, [r0, #48]	; 0x30
   8250a:	e000      	b.n	8250e <pio_set_output+0x1e>
	} else {
		p_pio->PIO_CODR = ul_mask;
   8250c:	6341      	str	r1, [r0, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
   8250e:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
   82510:	6001      	str	r1, [r0, #0]
}
   82512:	f85d 4b04 	ldr.w	r4, [sp], #4
   82516:	4770      	bx	lr

00082518 <pio_get_interrupt_status>:
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
   82518:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
   8251a:	4770      	bx	lr

0008251c <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
   8251c:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
   8251e:	4770      	bx	lr

00082520 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
   82520:	b570      	push	{r4, r5, r6, lr}
   82522:	b082      	sub	sp, #8
   82524:	460d      	mov	r5, r1
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   82526:	0943      	lsrs	r3, r0, #5
   82528:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   8252c:	f203 7307 	addw	r3, r3, #1799	; 0x707
   82530:	025c      	lsls	r4, r3, #9
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
	Pio *p_pio = pio_get_pin_group(ul_pin);

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   82532:	f001 43f0 	and.w	r3, r1, #2013265920	; 0x78000000
   82536:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   8253a:	d030      	beq.n	8259e <pio_configure_pin+0x7e>
   8253c:	d806      	bhi.n	8254c <pio_configure_pin+0x2c>
   8253e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   82542:	d00a      	beq.n	8255a <pio_configure_pin+0x3a>
   82544:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   82548:	d018      	beq.n	8257c <pio_configure_pin+0x5c>
   8254a:	e049      	b.n	825e0 <pio_configure_pin+0xc0>
   8254c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   82550:	d030      	beq.n	825b4 <pio_configure_pin+0x94>
   82552:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   82556:	d02d      	beq.n	825b4 <pio_configure_pin+0x94>
   82558:	e042      	b.n	825e0 <pio_configure_pin+0xc0>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
   8255a:	f000 001f 	and.w	r0, r0, #31
   8255e:	2601      	movs	r6, #1
   82560:	4086      	lsls	r6, r0
   82562:	4620      	mov	r0, r4
   82564:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   82568:	4632      	mov	r2, r6
   8256a:	4b1f      	ldr	r3, [pc, #124]	; (825e8 <pio_configure_pin+0xc8>)
   8256c:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   8256e:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   82572:	bf14      	ite	ne
   82574:	6666      	strne	r6, [r4, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   82576:	6626      	streq	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   82578:	2001      	movs	r0, #1
   8257a:	e032      	b.n	825e2 <pio_configure_pin+0xc2>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
   8257c:	f000 001f 	and.w	r0, r0, #31
   82580:	2601      	movs	r6, #1
   82582:	4086      	lsls	r6, r0
   82584:	4620      	mov	r0, r4
   82586:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   8258a:	4632      	mov	r2, r6
   8258c:	4b16      	ldr	r3, [pc, #88]	; (825e8 <pio_configure_pin+0xc8>)
   8258e:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   82590:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   82594:	bf14      	ite	ne
   82596:	6666      	strne	r6, [r4, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   82598:	6626      	streq	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   8259a:	2001      	movs	r0, #1
   8259c:	e021      	b.n	825e2 <pio_configure_pin+0xc2>
				(ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
   8259e:	f000 031f 	and.w	r3, r0, #31
   825a2:	2601      	movs	r6, #1
   825a4:	4620      	mov	r0, r4
   825a6:	fa06 f103 	lsl.w	r1, r6, r3
   825aa:	462a      	mov	r2, r5
   825ac:	4b0f      	ldr	r3, [pc, #60]	; (825ec <pio_configure_pin+0xcc>)
   825ae:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   825b0:	4630      	mov	r0, r6
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;
   825b2:	e016      	b.n	825e2 <pio_configure_pin+0xc2>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   825b4:	f000 031f 	and.w	r3, r0, #31
   825b8:	2601      	movs	r6, #1
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   825ba:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   825be:	ea05 0106 	and.w	r1, r5, r6
   825c2:	9100      	str	r1, [sp, #0]
   825c4:	4620      	mov	r0, r4
   825c6:	fa06 f103 	lsl.w	r1, r6, r3
   825ca:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   825ce:	bf14      	ite	ne
   825d0:	2200      	movne	r2, #0
   825d2:	2201      	moveq	r2, #1
   825d4:	f3c5 0380 	ubfx	r3, r5, #2, #1
   825d8:	4c05      	ldr	r4, [pc, #20]	; (825f0 <pio_configure_pin+0xd0>)
   825da:	47a0      	blx	r4

	default:
		return 0;
	}

	return 1;
   825dc:	4630      	mov	r0, r6
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   825de:	e000      	b.n	825e2 <pio_configure_pin+0xc2>

	default:
		return 0;
   825e0:	2000      	movs	r0, #0
	}

	return 1;
}
   825e2:	b002      	add	sp, #8
   825e4:	bd70      	pop	{r4, r5, r6, pc}
   825e6:	bf00      	nop
   825e8:	0008247d 	.word	0x0008247d
   825ec:	000824bd 	.word	0x000824bd
   825f0:	000824f1 	.word	0x000824f1

000825f4 <pio_configure_pin_group>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin_group(Pio *p_pio,
		uint32_t ul_mask, const uint32_t ul_flags)
{
   825f4:	b570      	push	{r4, r5, r6, lr}
   825f6:	b082      	sub	sp, #8
   825f8:	4606      	mov	r6, r0
   825fa:	460d      	mov	r5, r1
   825fc:	4614      	mov	r4, r2
	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   825fe:	f002 43f0 	and.w	r3, r2, #2013265920	; 0x78000000
   82602:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   82606:	d026      	beq.n	82656 <pio_configure_pin_group+0x62>
   82608:	d806      	bhi.n	82618 <pio_configure_pin_group+0x24>
   8260a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   8260e:	d00a      	beq.n	82626 <pio_configure_pin_group+0x32>
   82610:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   82614:	d013      	beq.n	8263e <pio_configure_pin_group+0x4a>
   82616:	e034      	b.n	82682 <pio_configure_pin_group+0x8e>
   82618:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   8261c:	d01f      	beq.n	8265e <pio_configure_pin_group+0x6a>
   8261e:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   82622:	d01c      	beq.n	8265e <pio_configure_pin_group+0x6a>
   82624:	e02d      	b.n	82682 <pio_configure_pin_group+0x8e>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
   82626:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   8262a:	462a      	mov	r2, r5
   8262c:	4b16      	ldr	r3, [pc, #88]	; (82688 <pio_configure_pin_group+0x94>)
   8262e:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   82630:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
   82634:	bf14      	ite	ne
   82636:	6675      	strne	r5, [r6, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   82638:	6635      	streq	r5, [r6, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   8263a:	2001      	movs	r0, #1
   8263c:	e022      	b.n	82684 <pio_configure_pin_group+0x90>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
   8263e:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   82642:	462a      	mov	r2, r5
   82644:	4b10      	ldr	r3, [pc, #64]	; (82688 <pio_configure_pin_group+0x94>)
   82646:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   82648:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
   8264c:	bf14      	ite	ne
   8264e:	6675      	strne	r5, [r6, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   82650:	6635      	streq	r5, [r6, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   82652:	2001      	movs	r0, #1
   82654:	e016      	b.n	82684 <pio_configure_pin_group+0x90>
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
   82656:	4b0d      	ldr	r3, [pc, #52]	; (8268c <pio_configure_pin_group+0x98>)
   82658:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   8265a:	2001      	movs	r0, #1
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;
   8265c:	e012      	b.n	82684 <pio_configure_pin_group+0x90>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   8265e:	f004 5260 	and.w	r2, r4, #939524096	; 0x38000000
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
   82662:	f004 0301 	and.w	r3, r4, #1
   82666:	9300      	str	r3, [sp, #0]
   82668:	4630      	mov	r0, r6
   8266a:	4629      	mov	r1, r5
   8266c:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   82670:	bf14      	ite	ne
   82672:	2200      	movne	r2, #0
   82674:	2201      	moveq	r2, #1
   82676:	f3c4 0380 	ubfx	r3, r4, #2, #1
   8267a:	4c05      	ldr	r4, [pc, #20]	; (82690 <pio_configure_pin_group+0x9c>)
   8267c:	47a0      	blx	r4

	default:
		return 0;
	}

	return 1;
   8267e:	2001      	movs	r0, #1
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   82680:	e000      	b.n	82684 <pio_configure_pin_group+0x90>

	default:
		return 0;
   82682:	2000      	movs	r0, #0
	}

	return 1;
}
   82684:	b002      	add	sp, #8
   82686:	bd70      	pop	{r4, r5, r6, pc}
   82688:	0008247d 	.word	0x0008247d
   8268c:	000824bd 	.word	0x000824bd
   82690:	000824f1 	.word	0x000824f1

00082694 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   82694:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   82698:	4604      	mov	r4, r0
   8269a:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   8269c:	4b0e      	ldr	r3, [pc, #56]	; (826d8 <pio_handler_process+0x44>)
   8269e:	4798      	blx	r3
   826a0:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
   826a2:	4620      	mov	r0, r4
   826a4:	4b0d      	ldr	r3, [pc, #52]	; (826dc <pio_handler_process+0x48>)
   826a6:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
   826a8:	4005      	ands	r5, r0
   826aa:	d013      	beq.n	826d4 <pio_handler_process+0x40>
   826ac:	4c0c      	ldr	r4, [pc, #48]	; (826e0 <pio_handler_process+0x4c>)
   826ae:	f104 0660 	add.w	r6, r4, #96	; 0x60
		/* Find triggering source */
		i = 0;
		while (status != 0) {
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
   826b2:	6823      	ldr	r3, [r4, #0]
   826b4:	4543      	cmp	r3, r8
   826b6:	d108      	bne.n	826ca <pio_handler_process+0x36>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   826b8:	6861      	ldr	r1, [r4, #4]
   826ba:	4229      	tst	r1, r5
   826bc:	d005      	beq.n	826ca <pio_handler_process+0x36>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   826be:	68e3      	ldr	r3, [r4, #12]
   826c0:	4640      	mov	r0, r8
   826c2:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
   826c4:	6863      	ldr	r3, [r4, #4]
   826c6:	ea25 0503 	bic.w	r5, r5, r3
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
   826ca:	42b4      	cmp	r4, r6
   826cc:	d002      	beq.n	826d4 <pio_handler_process+0x40>
   826ce:	3410      	adds	r4, #16

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
   826d0:	2d00      	cmp	r5, #0
   826d2:	d1ee      	bne.n	826b2 <pio_handler_process+0x1e>
   826d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   826d8:	00082519 	.word	0x00082519
   826dc:	0008251d 	.word	0x0008251d
   826e0:	20078ba8 	.word	0x20078ba8

000826e4 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   826e4:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
   826e6:	4802      	ldr	r0, [pc, #8]	; (826f0 <PIOA_Handler+0xc>)
   826e8:	210b      	movs	r1, #11
   826ea:	4b02      	ldr	r3, [pc, #8]	; (826f4 <PIOA_Handler+0x10>)
   826ec:	4798      	blx	r3
   826ee:	bd08      	pop	{r3, pc}
   826f0:	400e0e00 	.word	0x400e0e00
   826f4:	00082695 	.word	0x00082695

000826f8 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   826f8:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
   826fa:	4802      	ldr	r0, [pc, #8]	; (82704 <PIOB_Handler+0xc>)
   826fc:	210c      	movs	r1, #12
   826fe:	4b02      	ldr	r3, [pc, #8]	; (82708 <PIOB_Handler+0x10>)
   82700:	4798      	blx	r3
   82702:	bd08      	pop	{r3, pc}
   82704:	400e1000 	.word	0x400e1000
   82708:	00082695 	.word	0x00082695

0008270c <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
   8270c:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
   8270e:	4802      	ldr	r0, [pc, #8]	; (82718 <PIOC_Handler+0xc>)
   82710:	210d      	movs	r1, #13
   82712:	4b02      	ldr	r3, [pc, #8]	; (8271c <PIOC_Handler+0x10>)
   82714:	4798      	blx	r3
   82716:	bd08      	pop	{r3, pc}
   82718:	400e1200 	.word	0x400e1200
   8271c:	00082695 	.word	0x00082695

00082720 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
   82720:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
   82722:	4802      	ldr	r0, [pc, #8]	; (8272c <PIOD_Handler+0xc>)
   82724:	210e      	movs	r1, #14
   82726:	4b02      	ldr	r3, [pc, #8]	; (82730 <PIOD_Handler+0x10>)
   82728:	4798      	blx	r3
   8272a:	bd08      	pop	{r3, pc}
   8272c:	400e1400 	.word	0x400e1400
   82730:	00082695 	.word	0x00082695

00082734 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   82734:	4a18      	ldr	r2, [pc, #96]	; (82798 <pmc_switch_mck_to_pllack+0x64>)
   82736:	6b13      	ldr	r3, [r2, #48]	; 0x30
   82738:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   8273c:	4318      	orrs	r0, r3
   8273e:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   82740:	6e93      	ldr	r3, [r2, #104]	; 0x68
   82742:	f013 0f08 	tst.w	r3, #8
   82746:	d003      	beq.n	82750 <pmc_switch_mck_to_pllack+0x1c>
   82748:	e009      	b.n	8275e <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
   8274a:	3b01      	subs	r3, #1
   8274c:	d103      	bne.n	82756 <pmc_switch_mck_to_pllack+0x22>
   8274e:	e01e      	b.n	8278e <pmc_switch_mck_to_pllack+0x5a>
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   82750:	f44f 6300 	mov.w	r3, #2048	; 0x800
   82754:	4910      	ldr	r1, [pc, #64]	; (82798 <pmc_switch_mck_to_pllack+0x64>)
   82756:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   82758:	f012 0f08 	tst.w	r2, #8
   8275c:	d0f5      	beq.n	8274a <pmc_switch_mck_to_pllack+0x16>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   8275e:	4a0e      	ldr	r2, [pc, #56]	; (82798 <pmc_switch_mck_to_pllack+0x64>)
   82760:	6b13      	ldr	r3, [r2, #48]	; 0x30
   82762:	f023 0303 	bic.w	r3, r3, #3
   82766:	f043 0302 	orr.w	r3, r3, #2
   8276a:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   8276c:	6e90      	ldr	r0, [r2, #104]	; 0x68
   8276e:	f010 0008 	ands.w	r0, r0, #8
   82772:	d004      	beq.n	8277e <pmc_switch_mck_to_pllack+0x4a>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
   82774:	2000      	movs	r0, #0
   82776:	4770      	bx	lr
	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
   82778:	3b01      	subs	r3, #1
   8277a:	d103      	bne.n	82784 <pmc_switch_mck_to_pllack+0x50>
   8277c:	e009      	b.n	82792 <pmc_switch_mck_to_pllack+0x5e>
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   8277e:	f44f 6300 	mov.w	r3, #2048	; 0x800
   82782:	4905      	ldr	r1, [pc, #20]	; (82798 <pmc_switch_mck_to_pllack+0x64>)
   82784:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   82786:	f012 0f08 	tst.w	r2, #8
   8278a:	d0f5      	beq.n	82778 <pmc_switch_mck_to_pllack+0x44>
   8278c:	4770      	bx	lr

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
   8278e:	2001      	movs	r0, #1
   82790:	4770      	bx	lr
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
   82792:	2001      	movs	r0, #1
		}
	}

	return 0;
}
   82794:	4770      	bx	lr
   82796:	bf00      	nop
   82798:	400e0600 	.word	0x400e0600

0008279c <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
   8279c:	b138      	cbz	r0, 827ae <pmc_switch_mainck_to_xtal+0x12>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   8279e:	4911      	ldr	r1, [pc, #68]	; (827e4 <pmc_switch_mainck_to_xtal+0x48>)
   827a0:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
   827a2:	4a11      	ldr	r2, [pc, #68]	; (827e8 <pmc_switch_mainck_to_xtal+0x4c>)
   827a4:	401a      	ands	r2, r3
   827a6:	4b11      	ldr	r3, [pc, #68]	; (827ec <pmc_switch_mainck_to_xtal+0x50>)
   827a8:	4313      	orrs	r3, r2
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   827aa:	620b      	str	r3, [r1, #32]
   827ac:	4770      	bx	lr
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   827ae:	4a0d      	ldr	r2, [pc, #52]	; (827e4 <pmc_switch_mainck_to_xtal+0x48>)
   827b0:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   827b2:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   827b6:	f023 0303 	bic.w	r3, r3, #3
   827ba:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   827be:	f043 0301 	orr.w	r3, r3, #1
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
   827c2:	0209      	lsls	r1, r1, #8
   827c4:	b289      	uxth	r1, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   827c6:	430b      	orrs	r3, r1
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   827c8:	6213      	str	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   827ca:	6e93      	ldr	r3, [r2, #104]	; 0x68
   827cc:	f013 0f01 	tst.w	r3, #1
   827d0:	d0fb      	beq.n	827ca <pmc_switch_mainck_to_xtal+0x2e>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
   827d2:	4a04      	ldr	r2, [pc, #16]	; (827e4 <pmc_switch_mainck_to_xtal+0x48>)
   827d4:	6a13      	ldr	r3, [r2, #32]
   827d6:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
   827da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   827de:	6213      	str	r3, [r2, #32]
   827e0:	4770      	bx	lr
   827e2:	bf00      	nop
   827e4:	400e0600 	.word	0x400e0600
   827e8:	fec8fffc 	.word	0xfec8fffc
   827ec:	01370002 	.word	0x01370002

000827f0 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   827f0:	4b02      	ldr	r3, [pc, #8]	; (827fc <pmc_osc_is_ready_mainck+0xc>)
   827f2:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   827f4:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
   827f8:	4770      	bx	lr
   827fa:	bf00      	nop
   827fc:	400e0600 	.word	0x400e0600

00082800 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   82800:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   82804:	4b01      	ldr	r3, [pc, #4]	; (8280c <pmc_disable_pllack+0xc>)
   82806:	629a      	str	r2, [r3, #40]	; 0x28
   82808:	4770      	bx	lr
   8280a:	bf00      	nop
   8280c:	400e0600 	.word	0x400e0600

00082810 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   82810:	4b02      	ldr	r3, [pc, #8]	; (8281c <pmc_is_locked_pllack+0xc>)
   82812:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   82814:	f000 0002 	and.w	r0, r0, #2
   82818:	4770      	bx	lr
   8281a:	bf00      	nop
   8281c:	400e0600 	.word	0x400e0600

00082820 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
   82820:	282c      	cmp	r0, #44	; 0x2c
   82822:	d81e      	bhi.n	82862 <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
   82824:	281f      	cmp	r0, #31
   82826:	d80c      	bhi.n	82842 <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   82828:	4b11      	ldr	r3, [pc, #68]	; (82870 <pmc_enable_periph_clk+0x50>)
   8282a:	699a      	ldr	r2, [r3, #24]
   8282c:	2301      	movs	r3, #1
   8282e:	4083      	lsls	r3, r0
   82830:	401a      	ands	r2, r3
   82832:	4293      	cmp	r3, r2
   82834:	d017      	beq.n	82866 <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
   82836:	2301      	movs	r3, #1
   82838:	4083      	lsls	r3, r0
   8283a:	4a0d      	ldr	r2, [pc, #52]	; (82870 <pmc_enable_periph_clk+0x50>)
   8283c:	6113      	str	r3, [r2, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   8283e:	2000      	movs	r0, #0
   82840:	4770      	bx	lr
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   82842:	4b0b      	ldr	r3, [pc, #44]	; (82870 <pmc_enable_periph_clk+0x50>)
   82844:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
   82848:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   8284a:	2301      	movs	r3, #1
   8284c:	4083      	lsls	r3, r0
   8284e:	401a      	ands	r2, r3
   82850:	4293      	cmp	r3, r2
   82852:	d00a      	beq.n	8286a <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
   82854:	2301      	movs	r3, #1
   82856:	4083      	lsls	r3, r0
   82858:	4a05      	ldr	r2, [pc, #20]	; (82870 <pmc_enable_periph_clk+0x50>)
   8285a:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
		}
#endif
	}

	return 0;
   8285e:	2000      	movs	r0, #0
   82860:	4770      	bx	lr
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
		return 1;
   82862:	2001      	movs	r0, #1
   82864:	4770      	bx	lr
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   82866:	2000      	movs	r0, #0
   82868:	4770      	bx	lr
   8286a:	2000      	movs	r0, #0
}
   8286c:	4770      	bx	lr
   8286e:	bf00      	nop
   82870:	400e0600 	.word	0x400e0600

00082874 <Dummy_Handler>:
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
	while (1) {
	}
   82874:	e7fe      	b.n	82874 <Dummy_Handler>
   82876:	bf00      	nop

00082878 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   82878:	b508      	push	{r3, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
   8287a:	4b1f      	ldr	r3, [pc, #124]	; (828f8 <Reset_Handler+0x80>)
   8287c:	4a1f      	ldr	r2, [pc, #124]	; (828fc <Reset_Handler+0x84>)
   8287e:	429a      	cmp	r2, r3
   82880:	d003      	beq.n	8288a <Reset_Handler+0x12>
		for (; pDest < &_erelocate;) {
   82882:	4b1f      	ldr	r3, [pc, #124]	; (82900 <Reset_Handler+0x88>)
   82884:	4a1c      	ldr	r2, [pc, #112]	; (828f8 <Reset_Handler+0x80>)
   82886:	429a      	cmp	r2, r3
   82888:	d304      	bcc.n	82894 <Reset_Handler+0x1c>
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   8288a:	4b1e      	ldr	r3, [pc, #120]	; (82904 <Reset_Handler+0x8c>)
   8288c:	4a1e      	ldr	r2, [pc, #120]	; (82908 <Reset_Handler+0x90>)
   8288e:	429a      	cmp	r2, r3
   82890:	d310      	bcc.n	828b4 <Reset_Handler+0x3c>
   82892:	e01b      	b.n	828cc <Reset_Handler+0x54>
   82894:	4918      	ldr	r1, [pc, #96]	; (828f8 <Reset_Handler+0x80>)
   82896:	1d0a      	adds	r2, r1, #4
   82898:	4b1c      	ldr	r3, [pc, #112]	; (8290c <Reset_Handler+0x94>)
   8289a:	1a9b      	subs	r3, r3, r2
   8289c:	f023 0303 	bic.w	r3, r3, #3
   828a0:	3304      	adds	r3, #4
   828a2:	4a16      	ldr	r2, [pc, #88]	; (828fc <Reset_Handler+0x84>)
   828a4:	4413      	add	r3, r2
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
			*pDest++ = *pSrc++;
   828a6:	f852 0b04 	ldr.w	r0, [r2], #4
   828aa:	f841 0b04 	str.w	r0, [r1], #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   828ae:	429a      	cmp	r2, r3
   828b0:	d1f9      	bne.n	828a6 <Reset_Handler+0x2e>
   828b2:	e7ea      	b.n	8288a <Reset_Handler+0x12>
   828b4:	4b16      	ldr	r3, [pc, #88]	; (82910 <Reset_Handler+0x98>)
   828b6:	4a17      	ldr	r2, [pc, #92]	; (82914 <Reset_Handler+0x9c>)
   828b8:	1ad2      	subs	r2, r2, r3
   828ba:	f022 0203 	bic.w	r2, r2, #3
   828be:	441a      	add	r2, r3
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   828c0:	3b04      	subs	r3, #4
		*pDest++ = 0;
   828c2:	2100      	movs	r1, #0
   828c4:	f843 1b04 	str.w	r1, [r3], #4
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   828c8:	4293      	cmp	r3, r2
   828ca:	d1fb      	bne.n	828c4 <Reset_Handler+0x4c>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   828cc:	4b12      	ldr	r3, [pc, #72]	; (82918 <Reset_Handler+0xa0>)
   828ce:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
   828d2:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   828d6:	4911      	ldr	r1, [pc, #68]	; (8291c <Reset_Handler+0xa4>)
   828d8:	608a      	str	r2, [r1, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < NFC_RAM_ADDR)) {
   828da:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   828de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   828e2:	d203      	bcs.n	828ec <Reset_Handler+0x74>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   828e4:	688b      	ldr	r3, [r1, #8]
   828e6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   828ea:	608b      	str	r3, [r1, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   828ec:	4b0c      	ldr	r3, [pc, #48]	; (82920 <Reset_Handler+0xa8>)
   828ee:	4798      	blx	r3

	/* Branch to main function */
	main();
   828f0:	4b0c      	ldr	r3, [pc, #48]	; (82924 <Reset_Handler+0xac>)
   828f2:	4798      	blx	r3

	/* Infinite loop */
	while (1);
   828f4:	e7fe      	b.n	828f4 <Reset_Handler+0x7c>
   828f6:	bf00      	nop
   828f8:	20070000 	.word	0x20070000
   828fc:	000864f4 	.word	0x000864f4
   82900:	200709a4 	.word	0x200709a4
   82904:	20078c88 	.word	0x20078c88
   82908:	200709a8 	.word	0x200709a8
   8290c:	200709a7 	.word	0x200709a7
   82910:	200709ac 	.word	0x200709ac
   82914:	20078c8b 	.word	0x20078c8b
   82918:	00080000 	.word	0x00080000
   8291c:	e000ed00 	.word	0xe000ed00
   82920:	00083361 	.word	0x00083361
   82924:	00082a95 	.word	0x00082a95

00082928 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate(void)
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   82928:	4b3e      	ldr	r3, [pc, #248]	; (82a24 <SystemCoreClockUpdate+0xfc>)
   8292a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   8292c:	f003 0303 	and.w	r3, r3, #3
   82930:	2b03      	cmp	r3, #3
   82932:	d85f      	bhi.n	829f4 <SystemCoreClockUpdate+0xcc>
   82934:	e8df f003 	tbb	[pc, r3]
   82938:	2b2b0e02 	.word	0x2b2b0e02
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   8293c:	4b3a      	ldr	r3, [pc, #232]	; (82a28 <SystemCoreClockUpdate+0x100>)
   8293e:	695b      	ldr	r3, [r3, #20]
   82940:	f013 0f80 	tst.w	r3, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   82944:	bf14      	ite	ne
   82946:	f44f 4200 	movne.w	r2, #32768	; 0x8000
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   8294a:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
   8294e:	4b37      	ldr	r3, [pc, #220]	; (82a2c <SystemCoreClockUpdate+0x104>)
   82950:	601a      	str	r2, [r3, #0]
   82952:	e04f      	b.n	829f4 <SystemCoreClockUpdate+0xcc>
		}
		break;
	case PMC_MCKR_CSS_MAIN_CLK:	/* Main clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   82954:	4b33      	ldr	r3, [pc, #204]	; (82a24 <SystemCoreClockUpdate+0xfc>)
   82956:	6a1b      	ldr	r3, [r3, #32]
   82958:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   8295c:	d003      	beq.n	82966 <SystemCoreClockUpdate+0x3e>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   8295e:	4a34      	ldr	r2, [pc, #208]	; (82a30 <SystemCoreClockUpdate+0x108>)
   82960:	4b32      	ldr	r3, [pc, #200]	; (82a2c <SystemCoreClockUpdate+0x104>)
   82962:	601a      	str	r2, [r3, #0]
   82964:	e046      	b.n	829f4 <SystemCoreClockUpdate+0xcc>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   82966:	4a33      	ldr	r2, [pc, #204]	; (82a34 <SystemCoreClockUpdate+0x10c>)
   82968:	4b30      	ldr	r3, [pc, #192]	; (82a2c <SystemCoreClockUpdate+0x104>)
   8296a:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   8296c:	4b2d      	ldr	r3, [pc, #180]	; (82a24 <SystemCoreClockUpdate+0xfc>)
   8296e:	6a1b      	ldr	r3, [r3, #32]
   82970:	f003 0370 	and.w	r3, r3, #112	; 0x70
   82974:	2b10      	cmp	r3, #16
   82976:	d002      	beq.n	8297e <SystemCoreClockUpdate+0x56>
   82978:	2b20      	cmp	r3, #32
   8297a:	d004      	beq.n	82986 <SystemCoreClockUpdate+0x5e>
   8297c:	e03a      	b.n	829f4 <SystemCoreClockUpdate+0xcc>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   8297e:	4a2e      	ldr	r2, [pc, #184]	; (82a38 <SystemCoreClockUpdate+0x110>)
   82980:	4b2a      	ldr	r3, [pc, #168]	; (82a2c <SystemCoreClockUpdate+0x104>)
   82982:	601a      	str	r2, [r3, #0]
				break;
   82984:	e036      	b.n	829f4 <SystemCoreClockUpdate+0xcc>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   82986:	4a2a      	ldr	r2, [pc, #168]	; (82a30 <SystemCoreClockUpdate+0x108>)
   82988:	4b28      	ldr	r3, [pc, #160]	; (82a2c <SystemCoreClockUpdate+0x104>)
   8298a:	601a      	str	r2, [r3, #0]
				break;
   8298c:	e032      	b.n	829f4 <SystemCoreClockUpdate+0xcc>
			}
		}
		break;
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_UPLL_CLK:	/* UPLL clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   8298e:	4b25      	ldr	r3, [pc, #148]	; (82a24 <SystemCoreClockUpdate+0xfc>)
   82990:	6a1b      	ldr	r3, [r3, #32]
   82992:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   82996:	d003      	beq.n	829a0 <SystemCoreClockUpdate+0x78>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   82998:	4a25      	ldr	r2, [pc, #148]	; (82a30 <SystemCoreClockUpdate+0x108>)
   8299a:	4b24      	ldr	r3, [pc, #144]	; (82a2c <SystemCoreClockUpdate+0x104>)
   8299c:	601a      	str	r2, [r3, #0]
   8299e:	e012      	b.n	829c6 <SystemCoreClockUpdate+0x9e>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   829a0:	4a24      	ldr	r2, [pc, #144]	; (82a34 <SystemCoreClockUpdate+0x10c>)
   829a2:	4b22      	ldr	r3, [pc, #136]	; (82a2c <SystemCoreClockUpdate+0x104>)
   829a4:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   829a6:	4b1f      	ldr	r3, [pc, #124]	; (82a24 <SystemCoreClockUpdate+0xfc>)
   829a8:	6a1b      	ldr	r3, [r3, #32]
   829aa:	f003 0370 	and.w	r3, r3, #112	; 0x70
   829ae:	2b10      	cmp	r3, #16
   829b0:	d002      	beq.n	829b8 <SystemCoreClockUpdate+0x90>
   829b2:	2b20      	cmp	r3, #32
   829b4:	d004      	beq.n	829c0 <SystemCoreClockUpdate+0x98>
   829b6:	e006      	b.n	829c6 <SystemCoreClockUpdate+0x9e>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   829b8:	4a1f      	ldr	r2, [pc, #124]	; (82a38 <SystemCoreClockUpdate+0x110>)
   829ba:	4b1c      	ldr	r3, [pc, #112]	; (82a2c <SystemCoreClockUpdate+0x104>)
   829bc:	601a      	str	r2, [r3, #0]
				break;
   829be:	e002      	b.n	829c6 <SystemCoreClockUpdate+0x9e>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   829c0:	4a1b      	ldr	r2, [pc, #108]	; (82a30 <SystemCoreClockUpdate+0x108>)
   829c2:	4b1a      	ldr	r3, [pc, #104]	; (82a2c <SystemCoreClockUpdate+0x104>)
   829c4:	601a      	str	r2, [r3, #0]
				break;
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   829c6:	4b17      	ldr	r3, [pc, #92]	; (82a24 <SystemCoreClockUpdate+0xfc>)
   829c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   829ca:	f003 0303 	and.w	r3, r3, #3
   829ce:	2b02      	cmp	r3, #2
   829d0:	d10d      	bne.n	829ee <SystemCoreClockUpdate+0xc6>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   829d2:	4a14      	ldr	r2, [pc, #80]	; (82a24 <SystemCoreClockUpdate+0xfc>)
   829d4:	6a93      	ldr	r3, [r2, #40]	; 0x28
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   829d6:	6a92      	ldr	r2, [r2, #40]	; 0x28
   829d8:	4814      	ldr	r0, [pc, #80]	; (82a2c <SystemCoreClockUpdate+0x104>)
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   829da:	f3c3 410a 	ubfx	r1, r3, #16, #11
   829de:	6803      	ldr	r3, [r0, #0]
   829e0:	fb01 3303 	mla	r3, r1, r3, r3
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   829e4:	b2d2      	uxtb	r2, r2
   829e6:	fbb3 f3f2 	udiv	r3, r3, r2
   829ea:	6003      	str	r3, [r0, #0]
   829ec:	e002      	b.n	829f4 <SystemCoreClockUpdate+0xcc>
				                             CKGR_PLLAR_DIVA_Pos));
		} else {
			SystemCoreClock = SYS_UTMIPLL / 2U;
   829ee:	4a13      	ldr	r2, [pc, #76]	; (82a3c <SystemCoreClockUpdate+0x114>)
   829f0:	4b0e      	ldr	r3, [pc, #56]	; (82a2c <SystemCoreClockUpdate+0x104>)
   829f2:	601a      	str	r2, [r3, #0]
		}
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   829f4:	4b0b      	ldr	r3, [pc, #44]	; (82a24 <SystemCoreClockUpdate+0xfc>)
   829f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   829f8:	f003 0370 	and.w	r3, r3, #112	; 0x70
   829fc:	2b70      	cmp	r3, #112	; 0x70
   829fe:	d107      	bne.n	82a10 <SystemCoreClockUpdate+0xe8>
		SystemCoreClock /= 3U;
   82a00:	4a0a      	ldr	r2, [pc, #40]	; (82a2c <SystemCoreClockUpdate+0x104>)
   82a02:	6813      	ldr	r3, [r2, #0]
   82a04:	490e      	ldr	r1, [pc, #56]	; (82a40 <SystemCoreClockUpdate+0x118>)
   82a06:	fba1 1303 	umull	r1, r3, r1, r3
   82a0a:	085b      	lsrs	r3, r3, #1
   82a0c:	6013      	str	r3, [r2, #0]
   82a0e:	4770      	bx	lr
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   82a10:	4b04      	ldr	r3, [pc, #16]	; (82a24 <SystemCoreClockUpdate+0xfc>)
   82a12:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   82a14:	4905      	ldr	r1, [pc, #20]	; (82a2c <SystemCoreClockUpdate+0x104>)
   82a16:	f3c2 1202 	ubfx	r2, r2, #4, #3
   82a1a:	680b      	ldr	r3, [r1, #0]
   82a1c:	40d3      	lsrs	r3, r2
   82a1e:	600b      	str	r3, [r1, #0]
   82a20:	4770      	bx	lr
   82a22:	bf00      	nop
   82a24:	400e0600 	.word	0x400e0600
   82a28:	400e1a10 	.word	0x400e1a10
   82a2c:	2007013c 	.word	0x2007013c
   82a30:	00b71b00 	.word	0x00b71b00
   82a34:	003d0900 	.word	0x003d0900
   82a38:	007a1200 	.word	0x007a1200
   82a3c:	0e4e1c00 	.word	0x0e4e1c00
   82a40:	aaaaaaab 	.word	0xaaaaaaab

00082a44 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
   82a44:	4b09      	ldr	r3, [pc, #36]	; (82a6c <_sbrk+0x28>)
   82a46:	681b      	ldr	r3, [r3, #0]
   82a48:	b913      	cbnz	r3, 82a50 <_sbrk+0xc>
		heap = (unsigned char *)&_end;
   82a4a:	4a09      	ldr	r2, [pc, #36]	; (82a70 <_sbrk+0x2c>)
   82a4c:	4b07      	ldr	r3, [pc, #28]	; (82a6c <_sbrk+0x28>)
   82a4e:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
   82a50:	4b06      	ldr	r3, [pc, #24]	; (82a6c <_sbrk+0x28>)
   82a52:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
   82a54:	181a      	adds	r2, r3, r0
   82a56:	4907      	ldr	r1, [pc, #28]	; (82a74 <_sbrk+0x30>)
   82a58:	4291      	cmp	r1, r2
   82a5a:	db04      	blt.n	82a66 <_sbrk+0x22>
		return (caddr_t) -1;	
	}

	heap += incr;
   82a5c:	4610      	mov	r0, r2
   82a5e:	4a03      	ldr	r2, [pc, #12]	; (82a6c <_sbrk+0x28>)
   82a60:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
   82a62:	4618      	mov	r0, r3
   82a64:	4770      	bx	lr
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;

	if (((int)prev_heap + incr) > ramend) {
		return (caddr_t) -1;	
   82a66:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap += incr;

	return (caddr_t) prev_heap;
}
   82a6a:	4770      	bx	lr
   82a6c:	20078c18 	.word	0x20078c18
   82a70:	2007ac88 	.word	0x2007ac88
   82a74:	20087ffc 	.word	0x20087ffc

00082a78 <_close>:
}

extern int _close(int file)
{
	return -1;
}
   82a78:	f04f 30ff 	mov.w	r0, #4294967295
   82a7c:	4770      	bx	lr
   82a7e:	bf00      	nop

00082a80 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
   82a80:	f44f 5300 	mov.w	r3, #8192	; 0x2000
   82a84:	604b      	str	r3, [r1, #4]

	return 0;
}
   82a86:	2000      	movs	r0, #0
   82a88:	4770      	bx	lr
   82a8a:	bf00      	nop

00082a8c <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
   82a8c:	2001      	movs	r0, #1
   82a8e:	4770      	bx	lr

00082a90 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
   82a90:	2000      	movs	r0, #0
   82a92:	4770      	bx	lr

00082a94 <main>:
#include "UARTFunctions.h"
#include "UARTTask.h"
#include "PIDTask.h"

int main (void)
{
   82a94:	b500      	push	{lr}
   82a96:	b085      	sub	sp, #20
	// Board init
	sysclk_init();
   82a98:	4b24      	ldr	r3, [pc, #144]	; (82b2c <main+0x98>)
   82a9a:	4798      	blx	r3
	board_init();
   82a9c:	4b24      	ldr	r3, [pc, #144]	; (82b30 <main+0x9c>)
   82a9e:	4798      	blx	r3
   82aa0:	200b      	movs	r0, #11
   82aa2:	4c24      	ldr	r4, [pc, #144]	; (82b34 <main+0xa0>)
   82aa4:	47a0      	blx	r4
   82aa6:	200c      	movs	r0, #12
   82aa8:	47a0      	blx	r4
   82aaa:	200d      	movs	r0, #13
   82aac:	47a0      	blx	r4
   82aae:	200e      	movs	r0, #14
   82ab0:	47a0      	blx	r4
	ioport_init();

	delay_init();
	configure_console(); // Initialize UART
   82ab2:	4b21      	ldr	r3, [pc, #132]	; (82b38 <main+0xa4>)
   82ab4:	4798      	blx	r3

	PWMSetup();
   82ab6:	4b21      	ldr	r3, [pc, #132]	; (82b3c <main+0xa8>)
   82ab8:	4798      	blx	r3
	shieldInit();
   82aba:	4b21      	ldr	r3, [pc, #132]	; (82b40 <main+0xac>)
   82abc:	4798      	blx	r3
	ADCSetup();
   82abe:	4b21      	ldr	r3, [pc, #132]	; (82b44 <main+0xb0>)
   82ac0:	4798      	blx	r3
	//testFans(); // Loops fan speed
	//testFilter(); // Loops FIR-filtered sensor values
	//testADC(); // Loops sensor values
	
	//initialize binary semaphore
	vSemaphoreCreateBinary(sem);
   82ac2:	2001      	movs	r0, #1
   82ac4:	2100      	movs	r1, #0
   82ac6:	2203      	movs	r2, #3
   82ac8:	4b1f      	ldr	r3, [pc, #124]	; (82b48 <main+0xb4>)
   82aca:	4798      	blx	r3
   82acc:	4b1f      	ldr	r3, [pc, #124]	; (82b4c <main+0xb8>)
   82ace:	6018      	str	r0, [r3, #0]
   82ad0:	b120      	cbz	r0, 82adc <main+0x48>
   82ad2:	2100      	movs	r1, #0
   82ad4:	460a      	mov	r2, r1
   82ad6:	460b      	mov	r3, r1
   82ad8:	4c1d      	ldr	r4, [pc, #116]	; (82b50 <main+0xbc>)
   82ada:	47a0      	blx	r4
		// The semaphore can now be used.
	}
	
	/* Creating the PID regulation task */
	//	printf("Created PIDRegulationTask\n\r");
	if (xTaskCreate(PIDRegulationTask, (const signed char * const) "PIDRegulation",
   82adc:	2302      	movs	r3, #2
   82ade:	9300      	str	r3, [sp, #0]
   82ae0:	2300      	movs	r3, #0
   82ae2:	9301      	str	r3, [sp, #4]
   82ae4:	9302      	str	r3, [sp, #8]
   82ae6:	9303      	str	r3, [sp, #12]
   82ae8:	481a      	ldr	r0, [pc, #104]	; (82b54 <main+0xc0>)
   82aea:	491b      	ldr	r1, [pc, #108]	; (82b58 <main+0xc4>)
   82aec:	f44f 7200 	mov.w	r2, #512	; 0x200
   82af0:	4c1a      	ldr	r4, [pc, #104]	; (82b5c <main+0xc8>)
   82af2:	47a0      	blx	r4
   82af4:	2801      	cmp	r0, #1
   82af6:	d002      	beq.n	82afe <main+0x6a>
	TASK_PIDRegulation_STACK_SIZE, NULL, TASK_PIDRegulation_STACK_PRIORITY, NULL) != pdPASS)
	{
		printf("Failed to create PIDRegulationTask\r\n");
   82af8:	4819      	ldr	r0, [pc, #100]	; (82b60 <main+0xcc>)
   82afa:	4b1a      	ldr	r3, [pc, #104]	; (82b64 <main+0xd0>)
   82afc:	4798      	blx	r3
	}
	
	/* Creating the serial communication task */
	//	printf("Created SerialComTask\n\r");
	if (xTaskCreate(SerialComTask, (const signed char * const) "SerialComTask",
   82afe:	2301      	movs	r3, #1
   82b00:	9300      	str	r3, [sp, #0]
   82b02:	2300      	movs	r3, #0
   82b04:	9301      	str	r3, [sp, #4]
   82b06:	9302      	str	r3, [sp, #8]
   82b08:	9303      	str	r3, [sp, #12]
   82b0a:	4817      	ldr	r0, [pc, #92]	; (82b68 <main+0xd4>)
   82b0c:	4917      	ldr	r1, [pc, #92]	; (82b6c <main+0xd8>)
   82b0e:	f44f 7200 	mov.w	r2, #512	; 0x200
   82b12:	4c12      	ldr	r4, [pc, #72]	; (82b5c <main+0xc8>)
   82b14:	47a0      	blx	r4
   82b16:	2801      	cmp	r0, #1
   82b18:	d002      	beq.n	82b20 <main+0x8c>
	TASK_SerialComTask_STACK_SIZE, NULL, TASK_SerialComTask_STACK_PRIORITY, NULL) != pdPASS)
	{
		printf("Failed to create SerialComTask\r\n");
   82b1a:	4815      	ldr	r0, [pc, #84]	; (82b70 <main+0xdc>)
   82b1c:	4b11      	ldr	r3, [pc, #68]	; (82b64 <main+0xd0>)
   82b1e:	4798      	blx	r3
	}
	
	///* Start the FreeRTOS scheduler running all tasks indefinitely*/
	vTaskStartScheduler();
   82b20:	4b14      	ldr	r3, [pc, #80]	; (82b74 <main+0xe0>)
   82b22:	4798      	blx	r3
	printf("Insufficient RAM\r\n");
   82b24:	4814      	ldr	r0, [pc, #80]	; (82b78 <main+0xe4>)
   82b26:	4b0f      	ldr	r3, [pc, #60]	; (82b64 <main+0xd0>)
   82b28:	4798      	blx	r3
	while(1);
   82b2a:	e7fe      	b.n	82b2a <main+0x96>
   82b2c:	00082379 	.word	0x00082379
   82b30:	000823dd 	.word	0x000823dd
   82b34:	00082821 	.word	0x00082821
   82b38:	00080709 	.word	0x00080709
   82b3c:	00080511 	.word	0x00080511
   82b40:	000805a1 	.word	0x000805a1
   82b44:	00080151 	.word	0x00080151
   82b48:	00080f7d 	.word	0x00080f7d
   82b4c:	200709c4 	.word	0x200709c4
   82b50:	00080fd5 	.word	0x00080fd5
   82b54:	000804b9 	.word	0x000804b9
   82b58:	000863f0 	.word	0x000863f0
   82b5c:	00081399 	.word	0x00081399
   82b60:	00086400 	.word	0x00086400
   82b64:	000833b1 	.word	0x000833b1
   82b68:	00080a19 	.word	0x00080a19
   82b6c:	00086428 	.word	0x00086428
   82b70:	00086438 	.word	0x00086438
   82b74:	0008159d 	.word	0x0008159d
   82b78:	0008645c 	.word	0x0008645c

00082b7c <__aeabi_drsub>:
   82b7c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   82b80:	e002      	b.n	82b88 <__adddf3>
   82b82:	bf00      	nop

00082b84 <__aeabi_dsub>:
   82b84:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00082b88 <__adddf3>:
   82b88:	b530      	push	{r4, r5, lr}
   82b8a:	ea4f 0441 	mov.w	r4, r1, lsl #1
   82b8e:	ea4f 0543 	mov.w	r5, r3, lsl #1
   82b92:	ea94 0f05 	teq	r4, r5
   82b96:	bf08      	it	eq
   82b98:	ea90 0f02 	teqeq	r0, r2
   82b9c:	bf1f      	itttt	ne
   82b9e:	ea54 0c00 	orrsne.w	ip, r4, r0
   82ba2:	ea55 0c02 	orrsne.w	ip, r5, r2
   82ba6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   82baa:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   82bae:	f000 80e2 	beq.w	82d76 <__adddf3+0x1ee>
   82bb2:	ea4f 5454 	mov.w	r4, r4, lsr #21
   82bb6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   82bba:	bfb8      	it	lt
   82bbc:	426d      	neglt	r5, r5
   82bbe:	dd0c      	ble.n	82bda <__adddf3+0x52>
   82bc0:	442c      	add	r4, r5
   82bc2:	ea80 0202 	eor.w	r2, r0, r2
   82bc6:	ea81 0303 	eor.w	r3, r1, r3
   82bca:	ea82 0000 	eor.w	r0, r2, r0
   82bce:	ea83 0101 	eor.w	r1, r3, r1
   82bd2:	ea80 0202 	eor.w	r2, r0, r2
   82bd6:	ea81 0303 	eor.w	r3, r1, r3
   82bda:	2d36      	cmp	r5, #54	; 0x36
   82bdc:	bf88      	it	hi
   82bde:	bd30      	pophi	{r4, r5, pc}
   82be0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   82be4:	ea4f 3101 	mov.w	r1, r1, lsl #12
   82be8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   82bec:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   82bf0:	d002      	beq.n	82bf8 <__adddf3+0x70>
   82bf2:	4240      	negs	r0, r0
   82bf4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   82bf8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   82bfc:	ea4f 3303 	mov.w	r3, r3, lsl #12
   82c00:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   82c04:	d002      	beq.n	82c0c <__adddf3+0x84>
   82c06:	4252      	negs	r2, r2
   82c08:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   82c0c:	ea94 0f05 	teq	r4, r5
   82c10:	f000 80a7 	beq.w	82d62 <__adddf3+0x1da>
   82c14:	f1a4 0401 	sub.w	r4, r4, #1
   82c18:	f1d5 0e20 	rsbs	lr, r5, #32
   82c1c:	db0d      	blt.n	82c3a <__adddf3+0xb2>
   82c1e:	fa02 fc0e 	lsl.w	ip, r2, lr
   82c22:	fa22 f205 	lsr.w	r2, r2, r5
   82c26:	1880      	adds	r0, r0, r2
   82c28:	f141 0100 	adc.w	r1, r1, #0
   82c2c:	fa03 f20e 	lsl.w	r2, r3, lr
   82c30:	1880      	adds	r0, r0, r2
   82c32:	fa43 f305 	asr.w	r3, r3, r5
   82c36:	4159      	adcs	r1, r3
   82c38:	e00e      	b.n	82c58 <__adddf3+0xd0>
   82c3a:	f1a5 0520 	sub.w	r5, r5, #32
   82c3e:	f10e 0e20 	add.w	lr, lr, #32
   82c42:	2a01      	cmp	r2, #1
   82c44:	fa03 fc0e 	lsl.w	ip, r3, lr
   82c48:	bf28      	it	cs
   82c4a:	f04c 0c02 	orrcs.w	ip, ip, #2
   82c4e:	fa43 f305 	asr.w	r3, r3, r5
   82c52:	18c0      	adds	r0, r0, r3
   82c54:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   82c58:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   82c5c:	d507      	bpl.n	82c6e <__adddf3+0xe6>
   82c5e:	f04f 0e00 	mov.w	lr, #0
   82c62:	f1dc 0c00 	rsbs	ip, ip, #0
   82c66:	eb7e 0000 	sbcs.w	r0, lr, r0
   82c6a:	eb6e 0101 	sbc.w	r1, lr, r1
   82c6e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   82c72:	d31b      	bcc.n	82cac <__adddf3+0x124>
   82c74:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   82c78:	d30c      	bcc.n	82c94 <__adddf3+0x10c>
   82c7a:	0849      	lsrs	r1, r1, #1
   82c7c:	ea5f 0030 	movs.w	r0, r0, rrx
   82c80:	ea4f 0c3c 	mov.w	ip, ip, rrx
   82c84:	f104 0401 	add.w	r4, r4, #1
   82c88:	ea4f 5244 	mov.w	r2, r4, lsl #21
   82c8c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   82c90:	f080 809a 	bcs.w	82dc8 <__adddf3+0x240>
   82c94:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   82c98:	bf08      	it	eq
   82c9a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   82c9e:	f150 0000 	adcs.w	r0, r0, #0
   82ca2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   82ca6:	ea41 0105 	orr.w	r1, r1, r5
   82caa:	bd30      	pop	{r4, r5, pc}
   82cac:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   82cb0:	4140      	adcs	r0, r0
   82cb2:	eb41 0101 	adc.w	r1, r1, r1
   82cb6:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   82cba:	f1a4 0401 	sub.w	r4, r4, #1
   82cbe:	d1e9      	bne.n	82c94 <__adddf3+0x10c>
   82cc0:	f091 0f00 	teq	r1, #0
   82cc4:	bf04      	itt	eq
   82cc6:	4601      	moveq	r1, r0
   82cc8:	2000      	moveq	r0, #0
   82cca:	fab1 f381 	clz	r3, r1
   82cce:	bf08      	it	eq
   82cd0:	3320      	addeq	r3, #32
   82cd2:	f1a3 030b 	sub.w	r3, r3, #11
   82cd6:	f1b3 0220 	subs.w	r2, r3, #32
   82cda:	da0c      	bge.n	82cf6 <__adddf3+0x16e>
   82cdc:	320c      	adds	r2, #12
   82cde:	dd08      	ble.n	82cf2 <__adddf3+0x16a>
   82ce0:	f102 0c14 	add.w	ip, r2, #20
   82ce4:	f1c2 020c 	rsb	r2, r2, #12
   82ce8:	fa01 f00c 	lsl.w	r0, r1, ip
   82cec:	fa21 f102 	lsr.w	r1, r1, r2
   82cf0:	e00c      	b.n	82d0c <__adddf3+0x184>
   82cf2:	f102 0214 	add.w	r2, r2, #20
   82cf6:	bfd8      	it	le
   82cf8:	f1c2 0c20 	rsble	ip, r2, #32
   82cfc:	fa01 f102 	lsl.w	r1, r1, r2
   82d00:	fa20 fc0c 	lsr.w	ip, r0, ip
   82d04:	bfdc      	itt	le
   82d06:	ea41 010c 	orrle.w	r1, r1, ip
   82d0a:	4090      	lslle	r0, r2
   82d0c:	1ae4      	subs	r4, r4, r3
   82d0e:	bfa2      	ittt	ge
   82d10:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   82d14:	4329      	orrge	r1, r5
   82d16:	bd30      	popge	{r4, r5, pc}
   82d18:	ea6f 0404 	mvn.w	r4, r4
   82d1c:	3c1f      	subs	r4, #31
   82d1e:	da1c      	bge.n	82d5a <__adddf3+0x1d2>
   82d20:	340c      	adds	r4, #12
   82d22:	dc0e      	bgt.n	82d42 <__adddf3+0x1ba>
   82d24:	f104 0414 	add.w	r4, r4, #20
   82d28:	f1c4 0220 	rsb	r2, r4, #32
   82d2c:	fa20 f004 	lsr.w	r0, r0, r4
   82d30:	fa01 f302 	lsl.w	r3, r1, r2
   82d34:	ea40 0003 	orr.w	r0, r0, r3
   82d38:	fa21 f304 	lsr.w	r3, r1, r4
   82d3c:	ea45 0103 	orr.w	r1, r5, r3
   82d40:	bd30      	pop	{r4, r5, pc}
   82d42:	f1c4 040c 	rsb	r4, r4, #12
   82d46:	f1c4 0220 	rsb	r2, r4, #32
   82d4a:	fa20 f002 	lsr.w	r0, r0, r2
   82d4e:	fa01 f304 	lsl.w	r3, r1, r4
   82d52:	ea40 0003 	orr.w	r0, r0, r3
   82d56:	4629      	mov	r1, r5
   82d58:	bd30      	pop	{r4, r5, pc}
   82d5a:	fa21 f004 	lsr.w	r0, r1, r4
   82d5e:	4629      	mov	r1, r5
   82d60:	bd30      	pop	{r4, r5, pc}
   82d62:	f094 0f00 	teq	r4, #0
   82d66:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   82d6a:	bf06      	itte	eq
   82d6c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   82d70:	3401      	addeq	r4, #1
   82d72:	3d01      	subne	r5, #1
   82d74:	e74e      	b.n	82c14 <__adddf3+0x8c>
   82d76:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   82d7a:	bf18      	it	ne
   82d7c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   82d80:	d029      	beq.n	82dd6 <__adddf3+0x24e>
   82d82:	ea94 0f05 	teq	r4, r5
   82d86:	bf08      	it	eq
   82d88:	ea90 0f02 	teqeq	r0, r2
   82d8c:	d005      	beq.n	82d9a <__adddf3+0x212>
   82d8e:	ea54 0c00 	orrs.w	ip, r4, r0
   82d92:	bf04      	itt	eq
   82d94:	4619      	moveq	r1, r3
   82d96:	4610      	moveq	r0, r2
   82d98:	bd30      	pop	{r4, r5, pc}
   82d9a:	ea91 0f03 	teq	r1, r3
   82d9e:	bf1e      	ittt	ne
   82da0:	2100      	movne	r1, #0
   82da2:	2000      	movne	r0, #0
   82da4:	bd30      	popne	{r4, r5, pc}
   82da6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   82daa:	d105      	bne.n	82db8 <__adddf3+0x230>
   82dac:	0040      	lsls	r0, r0, #1
   82dae:	4149      	adcs	r1, r1
   82db0:	bf28      	it	cs
   82db2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   82db6:	bd30      	pop	{r4, r5, pc}
   82db8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   82dbc:	bf3c      	itt	cc
   82dbe:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   82dc2:	bd30      	popcc	{r4, r5, pc}
   82dc4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   82dc8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   82dcc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   82dd0:	f04f 0000 	mov.w	r0, #0
   82dd4:	bd30      	pop	{r4, r5, pc}
   82dd6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   82dda:	bf1a      	itte	ne
   82ddc:	4619      	movne	r1, r3
   82dde:	4610      	movne	r0, r2
   82de0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   82de4:	bf1c      	itt	ne
   82de6:	460b      	movne	r3, r1
   82de8:	4602      	movne	r2, r0
   82dea:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   82dee:	bf06      	itte	eq
   82df0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   82df4:	ea91 0f03 	teqeq	r1, r3
   82df8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   82dfc:	bd30      	pop	{r4, r5, pc}
   82dfe:	bf00      	nop

00082e00 <__aeabi_ui2d>:
   82e00:	f090 0f00 	teq	r0, #0
   82e04:	bf04      	itt	eq
   82e06:	2100      	moveq	r1, #0
   82e08:	4770      	bxeq	lr
   82e0a:	b530      	push	{r4, r5, lr}
   82e0c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   82e10:	f104 0432 	add.w	r4, r4, #50	; 0x32
   82e14:	f04f 0500 	mov.w	r5, #0
   82e18:	f04f 0100 	mov.w	r1, #0
   82e1c:	e750      	b.n	82cc0 <__adddf3+0x138>
   82e1e:	bf00      	nop

00082e20 <__aeabi_i2d>:
   82e20:	f090 0f00 	teq	r0, #0
   82e24:	bf04      	itt	eq
   82e26:	2100      	moveq	r1, #0
   82e28:	4770      	bxeq	lr
   82e2a:	b530      	push	{r4, r5, lr}
   82e2c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   82e30:	f104 0432 	add.w	r4, r4, #50	; 0x32
   82e34:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   82e38:	bf48      	it	mi
   82e3a:	4240      	negmi	r0, r0
   82e3c:	f04f 0100 	mov.w	r1, #0
   82e40:	e73e      	b.n	82cc0 <__adddf3+0x138>
   82e42:	bf00      	nop

00082e44 <__aeabi_f2d>:
   82e44:	0042      	lsls	r2, r0, #1
   82e46:	ea4f 01e2 	mov.w	r1, r2, asr #3
   82e4a:	ea4f 0131 	mov.w	r1, r1, rrx
   82e4e:	ea4f 7002 	mov.w	r0, r2, lsl #28
   82e52:	bf1f      	itttt	ne
   82e54:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   82e58:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   82e5c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   82e60:	4770      	bxne	lr
   82e62:	f092 0f00 	teq	r2, #0
   82e66:	bf14      	ite	ne
   82e68:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   82e6c:	4770      	bxeq	lr
   82e6e:	b530      	push	{r4, r5, lr}
   82e70:	f44f 7460 	mov.w	r4, #896	; 0x380
   82e74:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   82e78:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   82e7c:	e720      	b.n	82cc0 <__adddf3+0x138>
   82e7e:	bf00      	nop

00082e80 <__aeabi_ul2d>:
   82e80:	ea50 0201 	orrs.w	r2, r0, r1
   82e84:	bf08      	it	eq
   82e86:	4770      	bxeq	lr
   82e88:	b530      	push	{r4, r5, lr}
   82e8a:	f04f 0500 	mov.w	r5, #0
   82e8e:	e00a      	b.n	82ea6 <__aeabi_l2d+0x16>

00082e90 <__aeabi_l2d>:
   82e90:	ea50 0201 	orrs.w	r2, r0, r1
   82e94:	bf08      	it	eq
   82e96:	4770      	bxeq	lr
   82e98:	b530      	push	{r4, r5, lr}
   82e9a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   82e9e:	d502      	bpl.n	82ea6 <__aeabi_l2d+0x16>
   82ea0:	4240      	negs	r0, r0
   82ea2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   82ea6:	f44f 6480 	mov.w	r4, #1024	; 0x400
   82eaa:	f104 0432 	add.w	r4, r4, #50	; 0x32
   82eae:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   82eb2:	f43f aedc 	beq.w	82c6e <__adddf3+0xe6>
   82eb6:	f04f 0203 	mov.w	r2, #3
   82eba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   82ebe:	bf18      	it	ne
   82ec0:	3203      	addne	r2, #3
   82ec2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   82ec6:	bf18      	it	ne
   82ec8:	3203      	addne	r2, #3
   82eca:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   82ece:	f1c2 0320 	rsb	r3, r2, #32
   82ed2:	fa00 fc03 	lsl.w	ip, r0, r3
   82ed6:	fa20 f002 	lsr.w	r0, r0, r2
   82eda:	fa01 fe03 	lsl.w	lr, r1, r3
   82ede:	ea40 000e 	orr.w	r0, r0, lr
   82ee2:	fa21 f102 	lsr.w	r1, r1, r2
   82ee6:	4414      	add	r4, r2
   82ee8:	e6c1      	b.n	82c6e <__adddf3+0xe6>
   82eea:	bf00      	nop

00082eec <__aeabi_dmul>:
   82eec:	b570      	push	{r4, r5, r6, lr}
   82eee:	f04f 0cff 	mov.w	ip, #255	; 0xff
   82ef2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   82ef6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   82efa:	bf1d      	ittte	ne
   82efc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   82f00:	ea94 0f0c 	teqne	r4, ip
   82f04:	ea95 0f0c 	teqne	r5, ip
   82f08:	f000 f8de 	bleq	830c8 <__aeabi_dmul+0x1dc>
   82f0c:	442c      	add	r4, r5
   82f0e:	ea81 0603 	eor.w	r6, r1, r3
   82f12:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   82f16:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   82f1a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   82f1e:	bf18      	it	ne
   82f20:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   82f24:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   82f28:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   82f2c:	d038      	beq.n	82fa0 <__aeabi_dmul+0xb4>
   82f2e:	fba0 ce02 	umull	ip, lr, r0, r2
   82f32:	f04f 0500 	mov.w	r5, #0
   82f36:	fbe1 e502 	umlal	lr, r5, r1, r2
   82f3a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   82f3e:	fbe0 e503 	umlal	lr, r5, r0, r3
   82f42:	f04f 0600 	mov.w	r6, #0
   82f46:	fbe1 5603 	umlal	r5, r6, r1, r3
   82f4a:	f09c 0f00 	teq	ip, #0
   82f4e:	bf18      	it	ne
   82f50:	f04e 0e01 	orrne.w	lr, lr, #1
   82f54:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   82f58:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   82f5c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   82f60:	d204      	bcs.n	82f6c <__aeabi_dmul+0x80>
   82f62:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   82f66:	416d      	adcs	r5, r5
   82f68:	eb46 0606 	adc.w	r6, r6, r6
   82f6c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   82f70:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   82f74:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   82f78:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   82f7c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   82f80:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   82f84:	bf88      	it	hi
   82f86:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   82f8a:	d81e      	bhi.n	82fca <__aeabi_dmul+0xde>
   82f8c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   82f90:	bf08      	it	eq
   82f92:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   82f96:	f150 0000 	adcs.w	r0, r0, #0
   82f9a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   82f9e:	bd70      	pop	{r4, r5, r6, pc}
   82fa0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   82fa4:	ea46 0101 	orr.w	r1, r6, r1
   82fa8:	ea40 0002 	orr.w	r0, r0, r2
   82fac:	ea81 0103 	eor.w	r1, r1, r3
   82fb0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   82fb4:	bfc2      	ittt	gt
   82fb6:	ebd4 050c 	rsbsgt	r5, r4, ip
   82fba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   82fbe:	bd70      	popgt	{r4, r5, r6, pc}
   82fc0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   82fc4:	f04f 0e00 	mov.w	lr, #0
   82fc8:	3c01      	subs	r4, #1
   82fca:	f300 80ab 	bgt.w	83124 <__aeabi_dmul+0x238>
   82fce:	f114 0f36 	cmn.w	r4, #54	; 0x36
   82fd2:	bfde      	ittt	le
   82fd4:	2000      	movle	r0, #0
   82fd6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   82fda:	bd70      	pople	{r4, r5, r6, pc}
   82fdc:	f1c4 0400 	rsb	r4, r4, #0
   82fe0:	3c20      	subs	r4, #32
   82fe2:	da35      	bge.n	83050 <__aeabi_dmul+0x164>
   82fe4:	340c      	adds	r4, #12
   82fe6:	dc1b      	bgt.n	83020 <__aeabi_dmul+0x134>
   82fe8:	f104 0414 	add.w	r4, r4, #20
   82fec:	f1c4 0520 	rsb	r5, r4, #32
   82ff0:	fa00 f305 	lsl.w	r3, r0, r5
   82ff4:	fa20 f004 	lsr.w	r0, r0, r4
   82ff8:	fa01 f205 	lsl.w	r2, r1, r5
   82ffc:	ea40 0002 	orr.w	r0, r0, r2
   83000:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   83004:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   83008:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   8300c:	fa21 f604 	lsr.w	r6, r1, r4
   83010:	eb42 0106 	adc.w	r1, r2, r6
   83014:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   83018:	bf08      	it	eq
   8301a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   8301e:	bd70      	pop	{r4, r5, r6, pc}
   83020:	f1c4 040c 	rsb	r4, r4, #12
   83024:	f1c4 0520 	rsb	r5, r4, #32
   83028:	fa00 f304 	lsl.w	r3, r0, r4
   8302c:	fa20 f005 	lsr.w	r0, r0, r5
   83030:	fa01 f204 	lsl.w	r2, r1, r4
   83034:	ea40 0002 	orr.w	r0, r0, r2
   83038:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   8303c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   83040:	f141 0100 	adc.w	r1, r1, #0
   83044:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   83048:	bf08      	it	eq
   8304a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   8304e:	bd70      	pop	{r4, r5, r6, pc}
   83050:	f1c4 0520 	rsb	r5, r4, #32
   83054:	fa00 f205 	lsl.w	r2, r0, r5
   83058:	ea4e 0e02 	orr.w	lr, lr, r2
   8305c:	fa20 f304 	lsr.w	r3, r0, r4
   83060:	fa01 f205 	lsl.w	r2, r1, r5
   83064:	ea43 0302 	orr.w	r3, r3, r2
   83068:	fa21 f004 	lsr.w	r0, r1, r4
   8306c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   83070:	fa21 f204 	lsr.w	r2, r1, r4
   83074:	ea20 0002 	bic.w	r0, r0, r2
   83078:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   8307c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   83080:	bf08      	it	eq
   83082:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   83086:	bd70      	pop	{r4, r5, r6, pc}
   83088:	f094 0f00 	teq	r4, #0
   8308c:	d10f      	bne.n	830ae <__aeabi_dmul+0x1c2>
   8308e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   83092:	0040      	lsls	r0, r0, #1
   83094:	eb41 0101 	adc.w	r1, r1, r1
   83098:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   8309c:	bf08      	it	eq
   8309e:	3c01      	subeq	r4, #1
   830a0:	d0f7      	beq.n	83092 <__aeabi_dmul+0x1a6>
   830a2:	ea41 0106 	orr.w	r1, r1, r6
   830a6:	f095 0f00 	teq	r5, #0
   830aa:	bf18      	it	ne
   830ac:	4770      	bxne	lr
   830ae:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   830b2:	0052      	lsls	r2, r2, #1
   830b4:	eb43 0303 	adc.w	r3, r3, r3
   830b8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   830bc:	bf08      	it	eq
   830be:	3d01      	subeq	r5, #1
   830c0:	d0f7      	beq.n	830b2 <__aeabi_dmul+0x1c6>
   830c2:	ea43 0306 	orr.w	r3, r3, r6
   830c6:	4770      	bx	lr
   830c8:	ea94 0f0c 	teq	r4, ip
   830cc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   830d0:	bf18      	it	ne
   830d2:	ea95 0f0c 	teqne	r5, ip
   830d6:	d00c      	beq.n	830f2 <__aeabi_dmul+0x206>
   830d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   830dc:	bf18      	it	ne
   830de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   830e2:	d1d1      	bne.n	83088 <__aeabi_dmul+0x19c>
   830e4:	ea81 0103 	eor.w	r1, r1, r3
   830e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   830ec:	f04f 0000 	mov.w	r0, #0
   830f0:	bd70      	pop	{r4, r5, r6, pc}
   830f2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   830f6:	bf06      	itte	eq
   830f8:	4610      	moveq	r0, r2
   830fa:	4619      	moveq	r1, r3
   830fc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   83100:	d019      	beq.n	83136 <__aeabi_dmul+0x24a>
   83102:	ea94 0f0c 	teq	r4, ip
   83106:	d102      	bne.n	8310e <__aeabi_dmul+0x222>
   83108:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   8310c:	d113      	bne.n	83136 <__aeabi_dmul+0x24a>
   8310e:	ea95 0f0c 	teq	r5, ip
   83112:	d105      	bne.n	83120 <__aeabi_dmul+0x234>
   83114:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   83118:	bf1c      	itt	ne
   8311a:	4610      	movne	r0, r2
   8311c:	4619      	movne	r1, r3
   8311e:	d10a      	bne.n	83136 <__aeabi_dmul+0x24a>
   83120:	ea81 0103 	eor.w	r1, r1, r3
   83124:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   83128:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   8312c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   83130:	f04f 0000 	mov.w	r0, #0
   83134:	bd70      	pop	{r4, r5, r6, pc}
   83136:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   8313a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   8313e:	bd70      	pop	{r4, r5, r6, pc}

00083140 <__aeabi_ddiv>:
   83140:	b570      	push	{r4, r5, r6, lr}
   83142:	f04f 0cff 	mov.w	ip, #255	; 0xff
   83146:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   8314a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   8314e:	bf1d      	ittte	ne
   83150:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   83154:	ea94 0f0c 	teqne	r4, ip
   83158:	ea95 0f0c 	teqne	r5, ip
   8315c:	f000 f8a7 	bleq	832ae <__aeabi_ddiv+0x16e>
   83160:	eba4 0405 	sub.w	r4, r4, r5
   83164:	ea81 0e03 	eor.w	lr, r1, r3
   83168:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   8316c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   83170:	f000 8088 	beq.w	83284 <__aeabi_ddiv+0x144>
   83174:	ea4f 3303 	mov.w	r3, r3, lsl #12
   83178:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   8317c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   83180:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   83184:	ea4f 2202 	mov.w	r2, r2, lsl #8
   83188:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   8318c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   83190:	ea4f 2600 	mov.w	r6, r0, lsl #8
   83194:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   83198:	429d      	cmp	r5, r3
   8319a:	bf08      	it	eq
   8319c:	4296      	cmpeq	r6, r2
   8319e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   831a2:	f504 7440 	add.w	r4, r4, #768	; 0x300
   831a6:	d202      	bcs.n	831ae <__aeabi_ddiv+0x6e>
   831a8:	085b      	lsrs	r3, r3, #1
   831aa:	ea4f 0232 	mov.w	r2, r2, rrx
   831ae:	1ab6      	subs	r6, r6, r2
   831b0:	eb65 0503 	sbc.w	r5, r5, r3
   831b4:	085b      	lsrs	r3, r3, #1
   831b6:	ea4f 0232 	mov.w	r2, r2, rrx
   831ba:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   831be:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   831c2:	ebb6 0e02 	subs.w	lr, r6, r2
   831c6:	eb75 0e03 	sbcs.w	lr, r5, r3
   831ca:	bf22      	ittt	cs
   831cc:	1ab6      	subcs	r6, r6, r2
   831ce:	4675      	movcs	r5, lr
   831d0:	ea40 000c 	orrcs.w	r0, r0, ip
   831d4:	085b      	lsrs	r3, r3, #1
   831d6:	ea4f 0232 	mov.w	r2, r2, rrx
   831da:	ebb6 0e02 	subs.w	lr, r6, r2
   831de:	eb75 0e03 	sbcs.w	lr, r5, r3
   831e2:	bf22      	ittt	cs
   831e4:	1ab6      	subcs	r6, r6, r2
   831e6:	4675      	movcs	r5, lr
   831e8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   831ec:	085b      	lsrs	r3, r3, #1
   831ee:	ea4f 0232 	mov.w	r2, r2, rrx
   831f2:	ebb6 0e02 	subs.w	lr, r6, r2
   831f6:	eb75 0e03 	sbcs.w	lr, r5, r3
   831fa:	bf22      	ittt	cs
   831fc:	1ab6      	subcs	r6, r6, r2
   831fe:	4675      	movcs	r5, lr
   83200:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   83204:	085b      	lsrs	r3, r3, #1
   83206:	ea4f 0232 	mov.w	r2, r2, rrx
   8320a:	ebb6 0e02 	subs.w	lr, r6, r2
   8320e:	eb75 0e03 	sbcs.w	lr, r5, r3
   83212:	bf22      	ittt	cs
   83214:	1ab6      	subcs	r6, r6, r2
   83216:	4675      	movcs	r5, lr
   83218:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   8321c:	ea55 0e06 	orrs.w	lr, r5, r6
   83220:	d018      	beq.n	83254 <__aeabi_ddiv+0x114>
   83222:	ea4f 1505 	mov.w	r5, r5, lsl #4
   83226:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   8322a:	ea4f 1606 	mov.w	r6, r6, lsl #4
   8322e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   83232:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   83236:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   8323a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   8323e:	d1c0      	bne.n	831c2 <__aeabi_ddiv+0x82>
   83240:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   83244:	d10b      	bne.n	8325e <__aeabi_ddiv+0x11e>
   83246:	ea41 0100 	orr.w	r1, r1, r0
   8324a:	f04f 0000 	mov.w	r0, #0
   8324e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   83252:	e7b6      	b.n	831c2 <__aeabi_ddiv+0x82>
   83254:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   83258:	bf04      	itt	eq
   8325a:	4301      	orreq	r1, r0
   8325c:	2000      	moveq	r0, #0
   8325e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   83262:	bf88      	it	hi
   83264:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   83268:	f63f aeaf 	bhi.w	82fca <__aeabi_dmul+0xde>
   8326c:	ebb5 0c03 	subs.w	ip, r5, r3
   83270:	bf04      	itt	eq
   83272:	ebb6 0c02 	subseq.w	ip, r6, r2
   83276:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   8327a:	f150 0000 	adcs.w	r0, r0, #0
   8327e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   83282:	bd70      	pop	{r4, r5, r6, pc}
   83284:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   83288:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   8328c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   83290:	bfc2      	ittt	gt
   83292:	ebd4 050c 	rsbsgt	r5, r4, ip
   83296:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   8329a:	bd70      	popgt	{r4, r5, r6, pc}
   8329c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   832a0:	f04f 0e00 	mov.w	lr, #0
   832a4:	3c01      	subs	r4, #1
   832a6:	e690      	b.n	82fca <__aeabi_dmul+0xde>
   832a8:	ea45 0e06 	orr.w	lr, r5, r6
   832ac:	e68d      	b.n	82fca <__aeabi_dmul+0xde>
   832ae:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   832b2:	ea94 0f0c 	teq	r4, ip
   832b6:	bf08      	it	eq
   832b8:	ea95 0f0c 	teqeq	r5, ip
   832bc:	f43f af3b 	beq.w	83136 <__aeabi_dmul+0x24a>
   832c0:	ea94 0f0c 	teq	r4, ip
   832c4:	d10a      	bne.n	832dc <__aeabi_ddiv+0x19c>
   832c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   832ca:	f47f af34 	bne.w	83136 <__aeabi_dmul+0x24a>
   832ce:	ea95 0f0c 	teq	r5, ip
   832d2:	f47f af25 	bne.w	83120 <__aeabi_dmul+0x234>
   832d6:	4610      	mov	r0, r2
   832d8:	4619      	mov	r1, r3
   832da:	e72c      	b.n	83136 <__aeabi_dmul+0x24a>
   832dc:	ea95 0f0c 	teq	r5, ip
   832e0:	d106      	bne.n	832f0 <__aeabi_ddiv+0x1b0>
   832e2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   832e6:	f43f aefd 	beq.w	830e4 <__aeabi_dmul+0x1f8>
   832ea:	4610      	mov	r0, r2
   832ec:	4619      	mov	r1, r3
   832ee:	e722      	b.n	83136 <__aeabi_dmul+0x24a>
   832f0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   832f4:	bf18      	it	ne
   832f6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   832fa:	f47f aec5 	bne.w	83088 <__aeabi_dmul+0x19c>
   832fe:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   83302:	f47f af0d 	bne.w	83120 <__aeabi_dmul+0x234>
   83306:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   8330a:	f47f aeeb 	bne.w	830e4 <__aeabi_dmul+0x1f8>
   8330e:	e712      	b.n	83136 <__aeabi_dmul+0x24a>

00083310 <__aeabi_d2iz>:
   83310:	ea4f 0241 	mov.w	r2, r1, lsl #1
   83314:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   83318:	d215      	bcs.n	83346 <__aeabi_d2iz+0x36>
   8331a:	d511      	bpl.n	83340 <__aeabi_d2iz+0x30>
   8331c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   83320:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   83324:	d912      	bls.n	8334c <__aeabi_d2iz+0x3c>
   83326:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   8332a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   8332e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   83332:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   83336:	fa23 f002 	lsr.w	r0, r3, r2
   8333a:	bf18      	it	ne
   8333c:	4240      	negne	r0, r0
   8333e:	4770      	bx	lr
   83340:	f04f 0000 	mov.w	r0, #0
   83344:	4770      	bx	lr
   83346:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   8334a:	d105      	bne.n	83358 <__aeabi_d2iz+0x48>
   8334c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   83350:	bf08      	it	eq
   83352:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   83356:	4770      	bx	lr
   83358:	f04f 0000 	mov.w	r0, #0
   8335c:	4770      	bx	lr
   8335e:	bf00      	nop

00083360 <__libc_init_array>:
   83360:	b570      	push	{r4, r5, r6, lr}
   83362:	4e0f      	ldr	r6, [pc, #60]	; (833a0 <__libc_init_array+0x40>)
   83364:	4d0f      	ldr	r5, [pc, #60]	; (833a4 <__libc_init_array+0x44>)
   83366:	1b76      	subs	r6, r6, r5
   83368:	10b6      	asrs	r6, r6, #2
   8336a:	bf18      	it	ne
   8336c:	2400      	movne	r4, #0
   8336e:	d005      	beq.n	8337c <__libc_init_array+0x1c>
   83370:	3401      	adds	r4, #1
   83372:	f855 3b04 	ldr.w	r3, [r5], #4
   83376:	4798      	blx	r3
   83378:	42a6      	cmp	r6, r4
   8337a:	d1f9      	bne.n	83370 <__libc_init_array+0x10>
   8337c:	4e0a      	ldr	r6, [pc, #40]	; (833a8 <__libc_init_array+0x48>)
   8337e:	4d0b      	ldr	r5, [pc, #44]	; (833ac <__libc_init_array+0x4c>)
   83380:	f003 f8a2 	bl	864c8 <_init>
   83384:	1b76      	subs	r6, r6, r5
   83386:	10b6      	asrs	r6, r6, #2
   83388:	bf18      	it	ne
   8338a:	2400      	movne	r4, #0
   8338c:	d006      	beq.n	8339c <__libc_init_array+0x3c>
   8338e:	3401      	adds	r4, #1
   83390:	f855 3b04 	ldr.w	r3, [r5], #4
   83394:	4798      	blx	r3
   83396:	42a6      	cmp	r6, r4
   83398:	d1f9      	bne.n	8338e <__libc_init_array+0x2e>
   8339a:	bd70      	pop	{r4, r5, r6, pc}
   8339c:	bd70      	pop	{r4, r5, r6, pc}
   8339e:	bf00      	nop
   833a0:	000864d4 	.word	0x000864d4
   833a4:	000864d4 	.word	0x000864d4
   833a8:	000864dc 	.word	0x000864dc
   833ac:	000864d4 	.word	0x000864d4

000833b0 <iprintf>:
   833b0:	b40f      	push	{r0, r1, r2, r3}
   833b2:	b510      	push	{r4, lr}
   833b4:	4b07      	ldr	r3, [pc, #28]	; (833d4 <iprintf+0x24>)
   833b6:	b082      	sub	sp, #8
   833b8:	ac04      	add	r4, sp, #16
   833ba:	f854 2b04 	ldr.w	r2, [r4], #4
   833be:	6818      	ldr	r0, [r3, #0]
   833c0:	4623      	mov	r3, r4
   833c2:	6881      	ldr	r1, [r0, #8]
   833c4:	9401      	str	r4, [sp, #4]
   833c6:	f000 f9ed 	bl	837a4 <_vfiprintf_r>
   833ca:	b002      	add	sp, #8
   833cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   833d0:	b004      	add	sp, #16
   833d2:	4770      	bx	lr
   833d4:	20070568 	.word	0x20070568

000833d8 <memcpy>:
   833d8:	4684      	mov	ip, r0
   833da:	ea41 0300 	orr.w	r3, r1, r0
   833de:	f013 0303 	ands.w	r3, r3, #3
   833e2:	d149      	bne.n	83478 <memcpy+0xa0>
   833e4:	3a40      	subs	r2, #64	; 0x40
   833e6:	d323      	bcc.n	83430 <memcpy+0x58>
   833e8:	680b      	ldr	r3, [r1, #0]
   833ea:	6003      	str	r3, [r0, #0]
   833ec:	684b      	ldr	r3, [r1, #4]
   833ee:	6043      	str	r3, [r0, #4]
   833f0:	688b      	ldr	r3, [r1, #8]
   833f2:	6083      	str	r3, [r0, #8]
   833f4:	68cb      	ldr	r3, [r1, #12]
   833f6:	60c3      	str	r3, [r0, #12]
   833f8:	690b      	ldr	r3, [r1, #16]
   833fa:	6103      	str	r3, [r0, #16]
   833fc:	694b      	ldr	r3, [r1, #20]
   833fe:	6143      	str	r3, [r0, #20]
   83400:	698b      	ldr	r3, [r1, #24]
   83402:	6183      	str	r3, [r0, #24]
   83404:	69cb      	ldr	r3, [r1, #28]
   83406:	61c3      	str	r3, [r0, #28]
   83408:	6a0b      	ldr	r3, [r1, #32]
   8340a:	6203      	str	r3, [r0, #32]
   8340c:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   8340e:	6243      	str	r3, [r0, #36]	; 0x24
   83410:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   83412:	6283      	str	r3, [r0, #40]	; 0x28
   83414:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   83416:	62c3      	str	r3, [r0, #44]	; 0x2c
   83418:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   8341a:	6303      	str	r3, [r0, #48]	; 0x30
   8341c:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   8341e:	6343      	str	r3, [r0, #52]	; 0x34
   83420:	6b8b      	ldr	r3, [r1, #56]	; 0x38
   83422:	6383      	str	r3, [r0, #56]	; 0x38
   83424:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   83426:	63c3      	str	r3, [r0, #60]	; 0x3c
   83428:	3040      	adds	r0, #64	; 0x40
   8342a:	3140      	adds	r1, #64	; 0x40
   8342c:	3a40      	subs	r2, #64	; 0x40
   8342e:	d2db      	bcs.n	833e8 <memcpy+0x10>
   83430:	3230      	adds	r2, #48	; 0x30
   83432:	d30b      	bcc.n	8344c <memcpy+0x74>
   83434:	680b      	ldr	r3, [r1, #0]
   83436:	6003      	str	r3, [r0, #0]
   83438:	684b      	ldr	r3, [r1, #4]
   8343a:	6043      	str	r3, [r0, #4]
   8343c:	688b      	ldr	r3, [r1, #8]
   8343e:	6083      	str	r3, [r0, #8]
   83440:	68cb      	ldr	r3, [r1, #12]
   83442:	60c3      	str	r3, [r0, #12]
   83444:	3010      	adds	r0, #16
   83446:	3110      	adds	r1, #16
   83448:	3a10      	subs	r2, #16
   8344a:	d2f3      	bcs.n	83434 <memcpy+0x5c>
   8344c:	320c      	adds	r2, #12
   8344e:	d305      	bcc.n	8345c <memcpy+0x84>
   83450:	f851 3b04 	ldr.w	r3, [r1], #4
   83454:	f840 3b04 	str.w	r3, [r0], #4
   83458:	3a04      	subs	r2, #4
   8345a:	d2f9      	bcs.n	83450 <memcpy+0x78>
   8345c:	3204      	adds	r2, #4
   8345e:	d008      	beq.n	83472 <memcpy+0x9a>
   83460:	07d2      	lsls	r2, r2, #31
   83462:	bf1c      	itt	ne
   83464:	f811 3b01 	ldrbne.w	r3, [r1], #1
   83468:	f800 3b01 	strbne.w	r3, [r0], #1
   8346c:	d301      	bcc.n	83472 <memcpy+0x9a>
   8346e:	880b      	ldrh	r3, [r1, #0]
   83470:	8003      	strh	r3, [r0, #0]
   83472:	4660      	mov	r0, ip
   83474:	4770      	bx	lr
   83476:	bf00      	nop
   83478:	2a08      	cmp	r2, #8
   8347a:	d313      	bcc.n	834a4 <memcpy+0xcc>
   8347c:	078b      	lsls	r3, r1, #30
   8347e:	d0b1      	beq.n	833e4 <memcpy+0xc>
   83480:	f010 0303 	ands.w	r3, r0, #3
   83484:	d0ae      	beq.n	833e4 <memcpy+0xc>
   83486:	f1c3 0304 	rsb	r3, r3, #4
   8348a:	1ad2      	subs	r2, r2, r3
   8348c:	07db      	lsls	r3, r3, #31
   8348e:	bf1c      	itt	ne
   83490:	f811 3b01 	ldrbne.w	r3, [r1], #1
   83494:	f800 3b01 	strbne.w	r3, [r0], #1
   83498:	d3a4      	bcc.n	833e4 <memcpy+0xc>
   8349a:	f831 3b02 	ldrh.w	r3, [r1], #2
   8349e:	f820 3b02 	strh.w	r3, [r0], #2
   834a2:	e79f      	b.n	833e4 <memcpy+0xc>
   834a4:	3a04      	subs	r2, #4
   834a6:	d3d9      	bcc.n	8345c <memcpy+0x84>
   834a8:	3a01      	subs	r2, #1
   834aa:	f811 3b01 	ldrb.w	r3, [r1], #1
   834ae:	f800 3b01 	strb.w	r3, [r0], #1
   834b2:	d2f9      	bcs.n	834a8 <memcpy+0xd0>
   834b4:	780b      	ldrb	r3, [r1, #0]
   834b6:	7003      	strb	r3, [r0, #0]
   834b8:	784b      	ldrb	r3, [r1, #1]
   834ba:	7043      	strb	r3, [r0, #1]
   834bc:	788b      	ldrb	r3, [r1, #2]
   834be:	7083      	strb	r3, [r0, #2]
   834c0:	4660      	mov	r0, ip
   834c2:	4770      	bx	lr

000834c4 <memset>:
   834c4:	b470      	push	{r4, r5, r6}
   834c6:	0784      	lsls	r4, r0, #30
   834c8:	d046      	beq.n	83558 <memset+0x94>
   834ca:	1e54      	subs	r4, r2, #1
   834cc:	2a00      	cmp	r2, #0
   834ce:	d041      	beq.n	83554 <memset+0x90>
   834d0:	b2cd      	uxtb	r5, r1
   834d2:	4603      	mov	r3, r0
   834d4:	e002      	b.n	834dc <memset+0x18>
   834d6:	1e62      	subs	r2, r4, #1
   834d8:	b3e4      	cbz	r4, 83554 <memset+0x90>
   834da:	4614      	mov	r4, r2
   834dc:	f803 5b01 	strb.w	r5, [r3], #1
   834e0:	079a      	lsls	r2, r3, #30
   834e2:	d1f8      	bne.n	834d6 <memset+0x12>
   834e4:	2c03      	cmp	r4, #3
   834e6:	d92e      	bls.n	83546 <memset+0x82>
   834e8:	b2cd      	uxtb	r5, r1
   834ea:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   834ee:	2c0f      	cmp	r4, #15
   834f0:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   834f4:	d919      	bls.n	8352a <memset+0x66>
   834f6:	4626      	mov	r6, r4
   834f8:	f103 0210 	add.w	r2, r3, #16
   834fc:	3e10      	subs	r6, #16
   834fe:	2e0f      	cmp	r6, #15
   83500:	f842 5c10 	str.w	r5, [r2, #-16]
   83504:	f842 5c0c 	str.w	r5, [r2, #-12]
   83508:	f842 5c08 	str.w	r5, [r2, #-8]
   8350c:	f842 5c04 	str.w	r5, [r2, #-4]
   83510:	f102 0210 	add.w	r2, r2, #16
   83514:	d8f2      	bhi.n	834fc <memset+0x38>
   83516:	f1a4 0210 	sub.w	r2, r4, #16
   8351a:	f022 020f 	bic.w	r2, r2, #15
   8351e:	f004 040f 	and.w	r4, r4, #15
   83522:	3210      	adds	r2, #16
   83524:	2c03      	cmp	r4, #3
   83526:	4413      	add	r3, r2
   83528:	d90d      	bls.n	83546 <memset+0x82>
   8352a:	461e      	mov	r6, r3
   8352c:	4622      	mov	r2, r4
   8352e:	3a04      	subs	r2, #4
   83530:	2a03      	cmp	r2, #3
   83532:	f846 5b04 	str.w	r5, [r6], #4
   83536:	d8fa      	bhi.n	8352e <memset+0x6a>
   83538:	1f22      	subs	r2, r4, #4
   8353a:	f022 0203 	bic.w	r2, r2, #3
   8353e:	3204      	adds	r2, #4
   83540:	4413      	add	r3, r2
   83542:	f004 0403 	and.w	r4, r4, #3
   83546:	b12c      	cbz	r4, 83554 <memset+0x90>
   83548:	b2c9      	uxtb	r1, r1
   8354a:	441c      	add	r4, r3
   8354c:	f803 1b01 	strb.w	r1, [r3], #1
   83550:	42a3      	cmp	r3, r4
   83552:	d1fb      	bne.n	8354c <memset+0x88>
   83554:	bc70      	pop	{r4, r5, r6}
   83556:	4770      	bx	lr
   83558:	4614      	mov	r4, r2
   8355a:	4603      	mov	r3, r0
   8355c:	e7c2      	b.n	834e4 <memset+0x20>
   8355e:	bf00      	nop

00083560 <setbuf>:
   83560:	2900      	cmp	r1, #0
   83562:	bf0c      	ite	eq
   83564:	2202      	moveq	r2, #2
   83566:	2200      	movne	r2, #0
   83568:	f44f 6380 	mov.w	r3, #1024	; 0x400
   8356c:	f000 b800 	b.w	83570 <setvbuf>

00083570 <setvbuf>:
   83570:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   83574:	4d3a      	ldr	r5, [pc, #232]	; (83660 <setvbuf+0xf0>)
   83576:	4604      	mov	r4, r0
   83578:	682e      	ldr	r6, [r5, #0]
   8357a:	4690      	mov	r8, r2
   8357c:	460d      	mov	r5, r1
   8357e:	461f      	mov	r7, r3
   83580:	b116      	cbz	r6, 83588 <setvbuf+0x18>
   83582:	6bb3      	ldr	r3, [r6, #56]	; 0x38
   83584:	2b00      	cmp	r3, #0
   83586:	d03c      	beq.n	83602 <setvbuf+0x92>
   83588:	f1b8 0f02 	cmp.w	r8, #2
   8358c:	d82f      	bhi.n	835ee <setvbuf+0x7e>
   8358e:	2f00      	cmp	r7, #0
   83590:	db2d      	blt.n	835ee <setvbuf+0x7e>
   83592:	4621      	mov	r1, r4
   83594:	4630      	mov	r0, r6
   83596:	f001 f861 	bl	8465c <_fflush_r>
   8359a:	89a1      	ldrh	r1, [r4, #12]
   8359c:	2300      	movs	r3, #0
   8359e:	6063      	str	r3, [r4, #4]
   835a0:	61a3      	str	r3, [r4, #24]
   835a2:	060b      	lsls	r3, r1, #24
   835a4:	d427      	bmi.n	835f6 <setvbuf+0x86>
   835a6:	f021 0183 	bic.w	r1, r1, #131	; 0x83
   835aa:	b289      	uxth	r1, r1
   835ac:	f1b8 0f02 	cmp.w	r8, #2
   835b0:	81a1      	strh	r1, [r4, #12]
   835b2:	d02a      	beq.n	8360a <setvbuf+0x9a>
   835b4:	2d00      	cmp	r5, #0
   835b6:	d036      	beq.n	83626 <setvbuf+0xb6>
   835b8:	f1b8 0f01 	cmp.w	r8, #1
   835bc:	d011      	beq.n	835e2 <setvbuf+0x72>
   835be:	b289      	uxth	r1, r1
   835c0:	f001 0008 	and.w	r0, r1, #8
   835c4:	4b27      	ldr	r3, [pc, #156]	; (83664 <setvbuf+0xf4>)
   835c6:	b280      	uxth	r0, r0
   835c8:	63f3      	str	r3, [r6, #60]	; 0x3c
   835ca:	6025      	str	r5, [r4, #0]
   835cc:	6125      	str	r5, [r4, #16]
   835ce:	6167      	str	r7, [r4, #20]
   835d0:	b178      	cbz	r0, 835f2 <setvbuf+0x82>
   835d2:	f011 0f03 	tst.w	r1, #3
   835d6:	bf18      	it	ne
   835d8:	2700      	movne	r7, #0
   835da:	2000      	movs	r0, #0
   835dc:	60a7      	str	r7, [r4, #8]
   835de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   835e2:	f041 0101 	orr.w	r1, r1, #1
   835e6:	427b      	negs	r3, r7
   835e8:	81a1      	strh	r1, [r4, #12]
   835ea:	61a3      	str	r3, [r4, #24]
   835ec:	e7e7      	b.n	835be <setvbuf+0x4e>
   835ee:	f04f 30ff 	mov.w	r0, #4294967295
   835f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   835f6:	6921      	ldr	r1, [r4, #16]
   835f8:	4630      	mov	r0, r6
   835fa:	f001 f99b 	bl	84934 <_free_r>
   835fe:	89a1      	ldrh	r1, [r4, #12]
   83600:	e7d1      	b.n	835a6 <setvbuf+0x36>
   83602:	4630      	mov	r0, r6
   83604:	f001 f8be 	bl	84784 <__sinit>
   83608:	e7be      	b.n	83588 <setvbuf+0x18>
   8360a:	2000      	movs	r0, #0
   8360c:	f104 0343 	add.w	r3, r4, #67	; 0x43
   83610:	f041 0102 	orr.w	r1, r1, #2
   83614:	2500      	movs	r5, #0
   83616:	2201      	movs	r2, #1
   83618:	81a1      	strh	r1, [r4, #12]
   8361a:	60a5      	str	r5, [r4, #8]
   8361c:	6023      	str	r3, [r4, #0]
   8361e:	6123      	str	r3, [r4, #16]
   83620:	6162      	str	r2, [r4, #20]
   83622:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   83626:	2f00      	cmp	r7, #0
   83628:	bf08      	it	eq
   8362a:	f44f 6780 	moveq.w	r7, #1024	; 0x400
   8362e:	4638      	mov	r0, r7
   83630:	f001 fc8a 	bl	84f48 <malloc>
   83634:	4605      	mov	r5, r0
   83636:	b128      	cbz	r0, 83644 <setvbuf+0xd4>
   83638:	89a1      	ldrh	r1, [r4, #12]
   8363a:	f041 0180 	orr.w	r1, r1, #128	; 0x80
   8363e:	b289      	uxth	r1, r1
   83640:	81a1      	strh	r1, [r4, #12]
   83642:	e7b9      	b.n	835b8 <setvbuf+0x48>
   83644:	f44f 6080 	mov.w	r0, #1024	; 0x400
   83648:	f001 fc7e 	bl	84f48 <malloc>
   8364c:	4605      	mov	r5, r0
   8364e:	b918      	cbnz	r0, 83658 <setvbuf+0xe8>
   83650:	89a1      	ldrh	r1, [r4, #12]
   83652:	f04f 30ff 	mov.w	r0, #4294967295
   83656:	e7d9      	b.n	8360c <setvbuf+0x9c>
   83658:	f44f 6780 	mov.w	r7, #1024	; 0x400
   8365c:	e7ec      	b.n	83638 <setvbuf+0xc8>
   8365e:	bf00      	nop
   83660:	20070568 	.word	0x20070568
   83664:	00084689 	.word	0x00084689

00083668 <strlen>:
   83668:	f020 0103 	bic.w	r1, r0, #3
   8366c:	f010 0003 	ands.w	r0, r0, #3
   83670:	f1c0 0000 	rsb	r0, r0, #0
   83674:	f851 3b04 	ldr.w	r3, [r1], #4
   83678:	f100 0c04 	add.w	ip, r0, #4
   8367c:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
   83680:	f06f 0200 	mvn.w	r2, #0
   83684:	bf1c      	itt	ne
   83686:	fa22 f20c 	lsrne.w	r2, r2, ip
   8368a:	4313      	orrne	r3, r2
   8368c:	f04f 0c01 	mov.w	ip, #1
   83690:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
   83694:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
   83698:	eba3 020c 	sub.w	r2, r3, ip
   8369c:	ea22 0203 	bic.w	r2, r2, r3
   836a0:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
   836a4:	bf04      	itt	eq
   836a6:	f851 3b04 	ldreq.w	r3, [r1], #4
   836aa:	3004      	addeq	r0, #4
   836ac:	d0f4      	beq.n	83698 <strlen+0x30>
   836ae:	f1c2 0100 	rsb	r1, r2, #0
   836b2:	ea02 0201 	and.w	r2, r2, r1
   836b6:	fab2 f282 	clz	r2, r2
   836ba:	f1c2 021f 	rsb	r2, r2, #31
   836be:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
   836c2:	4770      	bx	lr

000836c4 <strncpy>:
   836c4:	ea40 0301 	orr.w	r3, r0, r1
   836c8:	079b      	lsls	r3, r3, #30
   836ca:	b470      	push	{r4, r5, r6}
   836cc:	d12b      	bne.n	83726 <strncpy+0x62>
   836ce:	2a03      	cmp	r2, #3
   836d0:	d929      	bls.n	83726 <strncpy+0x62>
   836d2:	460c      	mov	r4, r1
   836d4:	4603      	mov	r3, r0
   836d6:	4621      	mov	r1, r4
   836d8:	f854 6b04 	ldr.w	r6, [r4], #4
   836dc:	f1a6 3501 	sub.w	r5, r6, #16843009	; 0x1010101
   836e0:	ea25 0506 	bic.w	r5, r5, r6
   836e4:	f015 3f80 	tst.w	r5, #2155905152	; 0x80808080
   836e8:	d105      	bne.n	836f6 <strncpy+0x32>
   836ea:	3a04      	subs	r2, #4
   836ec:	2a03      	cmp	r2, #3
   836ee:	f843 6b04 	str.w	r6, [r3], #4
   836f2:	4621      	mov	r1, r4
   836f4:	d8ef      	bhi.n	836d6 <strncpy+0x12>
   836f6:	b1a2      	cbz	r2, 83722 <strncpy+0x5e>
   836f8:	780c      	ldrb	r4, [r1, #0]
   836fa:	3a01      	subs	r2, #1
   836fc:	701c      	strb	r4, [r3, #0]
   836fe:	3101      	adds	r1, #1
   83700:	3301      	adds	r3, #1
   83702:	b13c      	cbz	r4, 83714 <strncpy+0x50>
   83704:	b16a      	cbz	r2, 83722 <strncpy+0x5e>
   83706:	f811 4b01 	ldrb.w	r4, [r1], #1
   8370a:	3a01      	subs	r2, #1
   8370c:	f803 4b01 	strb.w	r4, [r3], #1
   83710:	2c00      	cmp	r4, #0
   83712:	d1f7      	bne.n	83704 <strncpy+0x40>
   83714:	b12a      	cbz	r2, 83722 <strncpy+0x5e>
   83716:	441a      	add	r2, r3
   83718:	2100      	movs	r1, #0
   8371a:	f803 1b01 	strb.w	r1, [r3], #1
   8371e:	4293      	cmp	r3, r2
   83720:	d1fb      	bne.n	8371a <strncpy+0x56>
   83722:	bc70      	pop	{r4, r5, r6}
   83724:	4770      	bx	lr
   83726:	4603      	mov	r3, r0
   83728:	e7e5      	b.n	836f6 <strncpy+0x32>
   8372a:	bf00      	nop

0008372c <__sprint_r.part.0>:
   8372c:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   8372e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   83732:	049c      	lsls	r4, r3, #18
   83734:	460f      	mov	r7, r1
   83736:	4692      	mov	sl, r2
   83738:	d52b      	bpl.n	83792 <__sprint_r.part.0+0x66>
   8373a:	6893      	ldr	r3, [r2, #8]
   8373c:	6812      	ldr	r2, [r2, #0]
   8373e:	b333      	cbz	r3, 8378e <__sprint_r.part.0+0x62>
   83740:	4680      	mov	r8, r0
   83742:	f102 0908 	add.w	r9, r2, #8
   83746:	e919 0060 	ldmdb	r9, {r5, r6}
   8374a:	08b6      	lsrs	r6, r6, #2
   8374c:	d017      	beq.n	8377e <__sprint_r.part.0+0x52>
   8374e:	3d04      	subs	r5, #4
   83750:	2400      	movs	r4, #0
   83752:	e001      	b.n	83758 <__sprint_r.part.0+0x2c>
   83754:	42a6      	cmp	r6, r4
   83756:	d010      	beq.n	8377a <__sprint_r.part.0+0x4e>
   83758:	4640      	mov	r0, r8
   8375a:	f855 1f04 	ldr.w	r1, [r5, #4]!
   8375e:	463a      	mov	r2, r7
   83760:	f001 f888 	bl	84874 <_fputwc_r>
   83764:	1c43      	adds	r3, r0, #1
   83766:	f104 0401 	add.w	r4, r4, #1
   8376a:	d1f3      	bne.n	83754 <__sprint_r.part.0+0x28>
   8376c:	2300      	movs	r3, #0
   8376e:	f8ca 3008 	str.w	r3, [sl, #8]
   83772:	f8ca 3004 	str.w	r3, [sl, #4]
   83776:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   8377a:	f8da 3008 	ldr.w	r3, [sl, #8]
   8377e:	eba3 0386 	sub.w	r3, r3, r6, lsl #2
   83782:	f8ca 3008 	str.w	r3, [sl, #8]
   83786:	f109 0908 	add.w	r9, r9, #8
   8378a:	2b00      	cmp	r3, #0
   8378c:	d1db      	bne.n	83746 <__sprint_r.part.0+0x1a>
   8378e:	2000      	movs	r0, #0
   83790:	e7ec      	b.n	8376c <__sprint_r.part.0+0x40>
   83792:	f001 f9a7 	bl	84ae4 <__sfvwrite_r>
   83796:	2300      	movs	r3, #0
   83798:	f8ca 3008 	str.w	r3, [sl, #8]
   8379c:	f8ca 3004 	str.w	r3, [sl, #4]
   837a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000837a4 <_vfiprintf_r>:
   837a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   837a8:	b0ab      	sub	sp, #172	; 0xac
   837aa:	461c      	mov	r4, r3
   837ac:	9100      	str	r1, [sp, #0]
   837ae:	4693      	mov	fp, r2
   837b0:	9304      	str	r3, [sp, #16]
   837b2:	9001      	str	r0, [sp, #4]
   837b4:	b118      	cbz	r0, 837be <_vfiprintf_r+0x1a>
   837b6:	6b83      	ldr	r3, [r0, #56]	; 0x38
   837b8:	2b00      	cmp	r3, #0
   837ba:	f000 80e3 	beq.w	83984 <_vfiprintf_r+0x1e0>
   837be:	9b00      	ldr	r3, [sp, #0]
   837c0:	8999      	ldrh	r1, [r3, #12]
   837c2:	b28a      	uxth	r2, r1
   837c4:	0490      	lsls	r0, r2, #18
   837c6:	d408      	bmi.n	837da <_vfiprintf_r+0x36>
   837c8:	4618      	mov	r0, r3
   837ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   837cc:	f441 5200 	orr.w	r2, r1, #8192	; 0x2000
   837d0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   837d4:	8182      	strh	r2, [r0, #12]
   837d6:	6643      	str	r3, [r0, #100]	; 0x64
   837d8:	b292      	uxth	r2, r2
   837da:	0711      	lsls	r1, r2, #28
   837dc:	f140 80b2 	bpl.w	83944 <_vfiprintf_r+0x1a0>
   837e0:	9b00      	ldr	r3, [sp, #0]
   837e2:	691b      	ldr	r3, [r3, #16]
   837e4:	2b00      	cmp	r3, #0
   837e6:	f000 80ad 	beq.w	83944 <_vfiprintf_r+0x1a0>
   837ea:	f002 021a 	and.w	r2, r2, #26
   837ee:	2a0a      	cmp	r2, #10
   837f0:	f000 80b4 	beq.w	8395c <_vfiprintf_r+0x1b8>
   837f4:	f10d 0a68 	add.w	sl, sp, #104	; 0x68
   837f8:	4654      	mov	r4, sl
   837fa:	2300      	movs	r3, #0
   837fc:	9309      	str	r3, [sp, #36]	; 0x24
   837fe:	9302      	str	r3, [sp, #8]
   83800:	930f      	str	r3, [sp, #60]	; 0x3c
   83802:	930e      	str	r3, [sp, #56]	; 0x38
   83804:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
   83808:	f89b 3000 	ldrb.w	r3, [fp]
   8380c:	2b00      	cmp	r3, #0
   8380e:	f000 84a3 	beq.w	84158 <_vfiprintf_r+0x9b4>
   83812:	2b25      	cmp	r3, #37	; 0x25
   83814:	f000 84a0 	beq.w	84158 <_vfiprintf_r+0x9b4>
   83818:	465a      	mov	r2, fp
   8381a:	e001      	b.n	83820 <_vfiprintf_r+0x7c>
   8381c:	2b25      	cmp	r3, #37	; 0x25
   8381e:	d003      	beq.n	83828 <_vfiprintf_r+0x84>
   83820:	f812 3f01 	ldrb.w	r3, [r2, #1]!
   83824:	2b00      	cmp	r3, #0
   83826:	d1f9      	bne.n	8381c <_vfiprintf_r+0x78>
   83828:	ebcb 0602 	rsb	r6, fp, r2
   8382c:	4615      	mov	r5, r2
   8382e:	b196      	cbz	r6, 83856 <_vfiprintf_r+0xb2>
   83830:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   83832:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   83834:	3301      	adds	r3, #1
   83836:	4432      	add	r2, r6
   83838:	2b07      	cmp	r3, #7
   8383a:	f8c4 b000 	str.w	fp, [r4]
   8383e:	6066      	str	r6, [r4, #4]
   83840:	920f      	str	r2, [sp, #60]	; 0x3c
   83842:	930e      	str	r3, [sp, #56]	; 0x38
   83844:	dd79      	ble.n	8393a <_vfiprintf_r+0x196>
   83846:	2a00      	cmp	r2, #0
   83848:	f040 84ad 	bne.w	841a6 <_vfiprintf_r+0xa02>
   8384c:	4654      	mov	r4, sl
   8384e:	9b02      	ldr	r3, [sp, #8]
   83850:	920e      	str	r2, [sp, #56]	; 0x38
   83852:	4433      	add	r3, r6
   83854:	9302      	str	r3, [sp, #8]
   83856:	782b      	ldrb	r3, [r5, #0]
   83858:	2b00      	cmp	r3, #0
   8385a:	f000 835f 	beq.w	83f1c <_vfiprintf_r+0x778>
   8385e:	f04f 0300 	mov.w	r3, #0
   83862:	2100      	movs	r1, #0
   83864:	f04f 3cff 	mov.w	ip, #4294967295
   83868:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
   8386c:	1c68      	adds	r0, r5, #1
   8386e:	786b      	ldrb	r3, [r5, #1]
   83870:	4688      	mov	r8, r1
   83872:	460d      	mov	r5, r1
   83874:	4666      	mov	r6, ip
   83876:	f100 0b01 	add.w	fp, r0, #1
   8387a:	f1a3 0220 	sub.w	r2, r3, #32
   8387e:	2a58      	cmp	r2, #88	; 0x58
   83880:	f200 82aa 	bhi.w	83dd8 <_vfiprintf_r+0x634>
   83884:	e8df f012 	tbh	[pc, r2, lsl #1]
   83888:	02a8029a 	.word	0x02a8029a
   8388c:	02a202a8 	.word	0x02a202a8
   83890:	02a802a8 	.word	0x02a802a8
   83894:	02a802a8 	.word	0x02a802a8
   83898:	02a802a8 	.word	0x02a802a8
   8389c:	02600254 	.word	0x02600254
   838a0:	010d02a8 	.word	0x010d02a8
   838a4:	02a8026c 	.word	0x02a8026c
   838a8:	012f0129 	.word	0x012f0129
   838ac:	012f012f 	.word	0x012f012f
   838b0:	012f012f 	.word	0x012f012f
   838b4:	012f012f 	.word	0x012f012f
   838b8:	012f012f 	.word	0x012f012f
   838bc:	02a802a8 	.word	0x02a802a8
   838c0:	02a802a8 	.word	0x02a802a8
   838c4:	02a802a8 	.word	0x02a802a8
   838c8:	02a802a8 	.word	0x02a802a8
   838cc:	02a802a8 	.word	0x02a802a8
   838d0:	02a8013d 	.word	0x02a8013d
   838d4:	02a802a8 	.word	0x02a802a8
   838d8:	02a802a8 	.word	0x02a802a8
   838dc:	02a802a8 	.word	0x02a802a8
   838e0:	02a802a8 	.word	0x02a802a8
   838e4:	017402a8 	.word	0x017402a8
   838e8:	02a802a8 	.word	0x02a802a8
   838ec:	02a802a8 	.word	0x02a802a8
   838f0:	018b02a8 	.word	0x018b02a8
   838f4:	02a802a8 	.word	0x02a802a8
   838f8:	02a801a3 	.word	0x02a801a3
   838fc:	02a802a8 	.word	0x02a802a8
   83900:	02a802a8 	.word	0x02a802a8
   83904:	02a802a8 	.word	0x02a802a8
   83908:	02a802a8 	.word	0x02a802a8
   8390c:	01c702a8 	.word	0x01c702a8
   83910:	02a801da 	.word	0x02a801da
   83914:	02a802a8 	.word	0x02a802a8
   83918:	01da0123 	.word	0x01da0123
   8391c:	02a802a8 	.word	0x02a802a8
   83920:	02a8024b 	.word	0x02a8024b
   83924:	01130288 	.word	0x01130288
   83928:	020701f4 	.word	0x020701f4
   8392c:	020d02a8 	.word	0x020d02a8
   83930:	008102a8 	.word	0x008102a8
   83934:	02a802a8 	.word	0x02a802a8
   83938:	0232      	.short	0x0232
   8393a:	3408      	adds	r4, #8
   8393c:	9b02      	ldr	r3, [sp, #8]
   8393e:	4433      	add	r3, r6
   83940:	9302      	str	r3, [sp, #8]
   83942:	e788      	b.n	83856 <_vfiprintf_r+0xb2>
   83944:	9801      	ldr	r0, [sp, #4]
   83946:	9900      	ldr	r1, [sp, #0]
   83948:	f000 fd72 	bl	84430 <__swsetup_r>
   8394c:	b9a8      	cbnz	r0, 8397a <_vfiprintf_r+0x1d6>
   8394e:	9b00      	ldr	r3, [sp, #0]
   83950:	899a      	ldrh	r2, [r3, #12]
   83952:	f002 021a 	and.w	r2, r2, #26
   83956:	2a0a      	cmp	r2, #10
   83958:	f47f af4c 	bne.w	837f4 <_vfiprintf_r+0x50>
   8395c:	9b00      	ldr	r3, [sp, #0]
   8395e:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
   83962:	2b00      	cmp	r3, #0
   83964:	f6ff af46 	blt.w	837f4 <_vfiprintf_r+0x50>
   83968:	9801      	ldr	r0, [sp, #4]
   8396a:	9900      	ldr	r1, [sp, #0]
   8396c:	465a      	mov	r2, fp
   8396e:	4623      	mov	r3, r4
   83970:	f000 fd20 	bl	843b4 <__sbprintf>
   83974:	b02b      	add	sp, #172	; 0xac
   83976:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8397a:	f04f 30ff 	mov.w	r0, #4294967295
   8397e:	b02b      	add	sp, #172	; 0xac
   83980:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83984:	f000 fefe 	bl	84784 <__sinit>
   83988:	e719      	b.n	837be <_vfiprintf_r+0x1a>
   8398a:	f018 0f20 	tst.w	r8, #32
   8398e:	9503      	str	r5, [sp, #12]
   83990:	46b4      	mov	ip, r6
   83992:	f000 810c 	beq.w	83bae <_vfiprintf_r+0x40a>
   83996:	9b04      	ldr	r3, [sp, #16]
   83998:	3307      	adds	r3, #7
   8399a:	f023 0307 	bic.w	r3, r3, #7
   8399e:	f103 0208 	add.w	r2, r3, #8
   839a2:	e9d3 6700 	ldrd	r6, r7, [r3]
   839a6:	9204      	str	r2, [sp, #16]
   839a8:	2301      	movs	r3, #1
   839aa:	f04f 0200 	mov.w	r2, #0
   839ae:	46e1      	mov	r9, ip
   839b0:	f88d 202f 	strb.w	r2, [sp, #47]	; 0x2f
   839b4:	2500      	movs	r5, #0
   839b6:	f1bc 0f00 	cmp.w	ip, #0
   839ba:	bfa8      	it	ge
   839bc:	f028 0880 	bicge.w	r8, r8, #128	; 0x80
   839c0:	ea56 0207 	orrs.w	r2, r6, r7
   839c4:	f040 80c4 	bne.w	83b50 <_vfiprintf_r+0x3ac>
   839c8:	f1bc 0f00 	cmp.w	ip, #0
   839cc:	f000 8380 	beq.w	840d0 <_vfiprintf_r+0x92c>
   839d0:	2b01      	cmp	r3, #1
   839d2:	f000 80c5 	beq.w	83b60 <_vfiprintf_r+0x3bc>
   839d6:	2b02      	cmp	r3, #2
   839d8:	f000 8386 	beq.w	840e8 <_vfiprintf_r+0x944>
   839dc:	4651      	mov	r1, sl
   839de:	08f2      	lsrs	r2, r6, #3
   839e0:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
   839e4:	08f8      	lsrs	r0, r7, #3
   839e6:	f006 0307 	and.w	r3, r6, #7
   839ea:	4607      	mov	r7, r0
   839ec:	4616      	mov	r6, r2
   839ee:	3330      	adds	r3, #48	; 0x30
   839f0:	ea56 0207 	orrs.w	r2, r6, r7
   839f4:	f801 3d01 	strb.w	r3, [r1, #-1]!
   839f8:	d1f1      	bne.n	839de <_vfiprintf_r+0x23a>
   839fa:	f018 0f01 	tst.w	r8, #1
   839fe:	9107      	str	r1, [sp, #28]
   83a00:	f040 83fa 	bne.w	841f8 <_vfiprintf_r+0xa54>
   83a04:	ebc1 090a 	rsb	r9, r1, sl
   83a08:	45e1      	cmp	r9, ip
   83a0a:	464e      	mov	r6, r9
   83a0c:	bfb8      	it	lt
   83a0e:	4666      	movlt	r6, ip
   83a10:	b105      	cbz	r5, 83a14 <_vfiprintf_r+0x270>
   83a12:	3601      	adds	r6, #1
   83a14:	f018 0302 	ands.w	r3, r8, #2
   83a18:	9305      	str	r3, [sp, #20]
   83a1a:	bf18      	it	ne
   83a1c:	3602      	addne	r6, #2
   83a1e:	f018 0384 	ands.w	r3, r8, #132	; 0x84
   83a22:	9306      	str	r3, [sp, #24]
   83a24:	f040 81f9 	bne.w	83e1a <_vfiprintf_r+0x676>
   83a28:	9b03      	ldr	r3, [sp, #12]
   83a2a:	1b9d      	subs	r5, r3, r6
   83a2c:	2d00      	cmp	r5, #0
   83a2e:	f340 81f4 	ble.w	83e1a <_vfiprintf_r+0x676>
   83a32:	2d10      	cmp	r5, #16
   83a34:	f340 848a 	ble.w	8434c <_vfiprintf_r+0xba8>
   83a38:	4620      	mov	r0, r4
   83a3a:	f8dd e038 	ldr.w	lr, [sp, #56]	; 0x38
   83a3e:	4664      	mov	r4, ip
   83a40:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   83a42:	4fc4      	ldr	r7, [pc, #784]	; (83d54 <_vfiprintf_r+0x5b0>)
   83a44:	2310      	movs	r3, #16
   83a46:	4671      	mov	r1, lr
   83a48:	4684      	mov	ip, r0
   83a4a:	e007      	b.n	83a5c <_vfiprintf_r+0x2b8>
   83a4c:	f101 0e02 	add.w	lr, r1, #2
   83a50:	4601      	mov	r1, r0
   83a52:	f10c 0c08 	add.w	ip, ip, #8
   83a56:	3d10      	subs	r5, #16
   83a58:	2d10      	cmp	r5, #16
   83a5a:	dd13      	ble.n	83a84 <_vfiprintf_r+0x2e0>
   83a5c:	1c48      	adds	r0, r1, #1
   83a5e:	3210      	adds	r2, #16
   83a60:	2807      	cmp	r0, #7
   83a62:	920f      	str	r2, [sp, #60]	; 0x3c
   83a64:	f8cc 7000 	str.w	r7, [ip]
   83a68:	f8cc 3004 	str.w	r3, [ip, #4]
   83a6c:	900e      	str	r0, [sp, #56]	; 0x38
   83a6e:	dded      	ble.n	83a4c <_vfiprintf_r+0x2a8>
   83a70:	2a00      	cmp	r2, #0
   83a72:	f040 81c2 	bne.w	83dfa <_vfiprintf_r+0x656>
   83a76:	3d10      	subs	r5, #16
   83a78:	2d10      	cmp	r5, #16
   83a7a:	4611      	mov	r1, r2
   83a7c:	f04f 0e01 	mov.w	lr, #1
   83a80:	46d4      	mov	ip, sl
   83a82:	dceb      	bgt.n	83a5c <_vfiprintf_r+0x2b8>
   83a84:	4663      	mov	r3, ip
   83a86:	4671      	mov	r1, lr
   83a88:	46a4      	mov	ip, r4
   83a8a:	461c      	mov	r4, r3
   83a8c:	442a      	add	r2, r5
   83a8e:	2907      	cmp	r1, #7
   83a90:	920f      	str	r2, [sp, #60]	; 0x3c
   83a92:	6027      	str	r7, [r4, #0]
   83a94:	6065      	str	r5, [r4, #4]
   83a96:	910e      	str	r1, [sp, #56]	; 0x38
   83a98:	f300 8346 	bgt.w	84128 <_vfiprintf_r+0x984>
   83a9c:	3408      	adds	r4, #8
   83a9e:	1c48      	adds	r0, r1, #1
   83aa0:	e1be      	b.n	83e20 <_vfiprintf_r+0x67c>
   83aa2:	4658      	mov	r0, fp
   83aa4:	f048 0804 	orr.w	r8, r8, #4
   83aa8:	f89b 3000 	ldrb.w	r3, [fp]
   83aac:	e6e3      	b.n	83876 <_vfiprintf_r+0xd2>
   83aae:	f018 0320 	ands.w	r3, r8, #32
   83ab2:	9503      	str	r5, [sp, #12]
   83ab4:	46b4      	mov	ip, r6
   83ab6:	d062      	beq.n	83b7e <_vfiprintf_r+0x3da>
   83ab8:	9b04      	ldr	r3, [sp, #16]
   83aba:	3307      	adds	r3, #7
   83abc:	f023 0307 	bic.w	r3, r3, #7
   83ac0:	f103 0208 	add.w	r2, r3, #8
   83ac4:	e9d3 6700 	ldrd	r6, r7, [r3]
   83ac8:	9204      	str	r2, [sp, #16]
   83aca:	2300      	movs	r3, #0
   83acc:	e76d      	b.n	839aa <_vfiprintf_r+0x206>
   83ace:	f048 0840 	orr.w	r8, r8, #64	; 0x40
   83ad2:	f89b 3000 	ldrb.w	r3, [fp]
   83ad6:	4658      	mov	r0, fp
   83ad8:	e6cd      	b.n	83876 <_vfiprintf_r+0xd2>
   83ada:	f048 0880 	orr.w	r8, r8, #128	; 0x80
   83ade:	f89b 3000 	ldrb.w	r3, [fp]
   83ae2:	4658      	mov	r0, fp
   83ae4:	e6c7      	b.n	83876 <_vfiprintf_r+0xd2>
   83ae6:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   83aea:	2500      	movs	r5, #0
   83aec:	f81b 3b01 	ldrb.w	r3, [fp], #1
   83af0:	eb05 0585 	add.w	r5, r5, r5, lsl #2
   83af4:	eb02 0545 	add.w	r5, r2, r5, lsl #1
   83af8:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   83afc:	2a09      	cmp	r2, #9
   83afe:	d9f5      	bls.n	83aec <_vfiprintf_r+0x348>
   83b00:	e6bb      	b.n	8387a <_vfiprintf_r+0xd6>
   83b02:	f048 0810 	orr.w	r8, r8, #16
   83b06:	f018 0f20 	tst.w	r8, #32
   83b0a:	9503      	str	r5, [sp, #12]
   83b0c:	46b4      	mov	ip, r6
   83b0e:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
   83b12:	f000 809b 	beq.w	83c4c <_vfiprintf_r+0x4a8>
   83b16:	9904      	ldr	r1, [sp, #16]
   83b18:	3107      	adds	r1, #7
   83b1a:	f021 0107 	bic.w	r1, r1, #7
   83b1e:	e9d1 2300 	ldrd	r2, r3, [r1]
   83b22:	4616      	mov	r6, r2
   83b24:	461f      	mov	r7, r3
   83b26:	3108      	adds	r1, #8
   83b28:	9104      	str	r1, [sp, #16]
   83b2a:	2a00      	cmp	r2, #0
   83b2c:	f173 0300 	sbcs.w	r3, r3, #0
   83b30:	f2c0 83a4 	blt.w	8427c <_vfiprintf_r+0xad8>
   83b34:	f1bc 0f00 	cmp.w	ip, #0
   83b38:	bfa8      	it	ge
   83b3a:	f028 0880 	bicge.w	r8, r8, #128	; 0x80
   83b3e:	ea56 0207 	orrs.w	r2, r6, r7
   83b42:	f89d 502f 	ldrb.w	r5, [sp, #47]	; 0x2f
   83b46:	46e1      	mov	r9, ip
   83b48:	f04f 0301 	mov.w	r3, #1
   83b4c:	f43f af3c 	beq.w	839c8 <_vfiprintf_r+0x224>
   83b50:	2b01      	cmp	r3, #1
   83b52:	f47f af40 	bne.w	839d6 <_vfiprintf_r+0x232>
   83b56:	2f00      	cmp	r7, #0
   83b58:	bf08      	it	eq
   83b5a:	2e0a      	cmpeq	r6, #10
   83b5c:	f080 8332 	bcs.w	841c4 <_vfiprintf_r+0xa20>
   83b60:	ab2a      	add	r3, sp, #168	; 0xa8
   83b62:	3630      	adds	r6, #48	; 0x30
   83b64:	f803 6d41 	strb.w	r6, [r3, #-65]!
   83b68:	ebc3 090a 	rsb	r9, r3, sl
   83b6c:	9307      	str	r3, [sp, #28]
   83b6e:	e74b      	b.n	83a08 <_vfiprintf_r+0x264>
   83b70:	f048 0810 	orr.w	r8, r8, #16
   83b74:	f018 0320 	ands.w	r3, r8, #32
   83b78:	9503      	str	r5, [sp, #12]
   83b7a:	46b4      	mov	ip, r6
   83b7c:	d19c      	bne.n	83ab8 <_vfiprintf_r+0x314>
   83b7e:	f018 0210 	ands.w	r2, r8, #16
   83b82:	f040 82f7 	bne.w	84174 <_vfiprintf_r+0x9d0>
   83b86:	f018 0340 	ands.w	r3, r8, #64	; 0x40
   83b8a:	f000 82f3 	beq.w	84174 <_vfiprintf_r+0x9d0>
   83b8e:	9904      	ldr	r1, [sp, #16]
   83b90:	4613      	mov	r3, r2
   83b92:	460a      	mov	r2, r1
   83b94:	3204      	adds	r2, #4
   83b96:	880e      	ldrh	r6, [r1, #0]
   83b98:	2700      	movs	r7, #0
   83b9a:	9204      	str	r2, [sp, #16]
   83b9c:	e705      	b.n	839aa <_vfiprintf_r+0x206>
   83b9e:	f048 0810 	orr.w	r8, r8, #16
   83ba2:	f018 0f20 	tst.w	r8, #32
   83ba6:	9503      	str	r5, [sp, #12]
   83ba8:	46b4      	mov	ip, r6
   83baa:	f47f aef4 	bne.w	83996 <_vfiprintf_r+0x1f2>
   83bae:	9a04      	ldr	r2, [sp, #16]
   83bb0:	f018 0f10 	tst.w	r8, #16
   83bb4:	4613      	mov	r3, r2
   83bb6:	f040 82e4 	bne.w	84182 <_vfiprintf_r+0x9de>
   83bba:	f018 0f40 	tst.w	r8, #64	; 0x40
   83bbe:	f000 82e0 	beq.w	84182 <_vfiprintf_r+0x9de>
   83bc2:	8816      	ldrh	r6, [r2, #0]
   83bc4:	3204      	adds	r2, #4
   83bc6:	2700      	movs	r7, #0
   83bc8:	2301      	movs	r3, #1
   83bca:	9204      	str	r2, [sp, #16]
   83bcc:	e6ed      	b.n	839aa <_vfiprintf_r+0x206>
   83bce:	4a62      	ldr	r2, [pc, #392]	; (83d58 <_vfiprintf_r+0x5b4>)
   83bd0:	f018 0f20 	tst.w	r8, #32
   83bd4:	9503      	str	r5, [sp, #12]
   83bd6:	46b4      	mov	ip, r6
   83bd8:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
   83bdc:	9209      	str	r2, [sp, #36]	; 0x24
   83bde:	f000 808f 	beq.w	83d00 <_vfiprintf_r+0x55c>
   83be2:	9a04      	ldr	r2, [sp, #16]
   83be4:	3207      	adds	r2, #7
   83be6:	f022 0207 	bic.w	r2, r2, #7
   83bea:	f102 0108 	add.w	r1, r2, #8
   83bee:	9104      	str	r1, [sp, #16]
   83bf0:	e9d2 6700 	ldrd	r6, r7, [r2]
   83bf4:	f018 0f01 	tst.w	r8, #1
   83bf8:	f000 828f 	beq.w	8411a <_vfiprintf_r+0x976>
   83bfc:	ea56 0207 	orrs.w	r2, r6, r7
   83c00:	f000 828b 	beq.w	8411a <_vfiprintf_r+0x976>
   83c04:	2230      	movs	r2, #48	; 0x30
   83c06:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
   83c0a:	f048 0802 	orr.w	r8, r8, #2
   83c0e:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
   83c12:	2302      	movs	r3, #2
   83c14:	e6c9      	b.n	839aa <_vfiprintf_r+0x206>
   83c16:	9a04      	ldr	r2, [sp, #16]
   83c18:	2601      	movs	r6, #1
   83c1a:	6813      	ldr	r3, [r2, #0]
   83c1c:	f04f 0100 	mov.w	r1, #0
   83c20:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
   83c24:	4613      	mov	r3, r2
   83c26:	46b1      	mov	r9, r6
   83c28:	3304      	adds	r3, #4
   83c2a:	9304      	str	r3, [sp, #16]
   83c2c:	ab10      	add	r3, sp, #64	; 0x40
   83c2e:	9503      	str	r5, [sp, #12]
   83c30:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
   83c34:	9307      	str	r3, [sp, #28]
   83c36:	f04f 0c00 	mov.w	ip, #0
   83c3a:	e6eb      	b.n	83a14 <_vfiprintf_r+0x270>
   83c3c:	f018 0f20 	tst.w	r8, #32
   83c40:	9503      	str	r5, [sp, #12]
   83c42:	46b4      	mov	ip, r6
   83c44:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
   83c48:	f47f af65 	bne.w	83b16 <_vfiprintf_r+0x372>
   83c4c:	9a04      	ldr	r2, [sp, #16]
   83c4e:	f018 0f10 	tst.w	r8, #16
   83c52:	4613      	mov	r3, r2
   83c54:	f040 82a0 	bne.w	84198 <_vfiprintf_r+0x9f4>
   83c58:	f018 0f40 	tst.w	r8, #64	; 0x40
   83c5c:	f000 829c 	beq.w	84198 <_vfiprintf_r+0x9f4>
   83c60:	f9b2 6000 	ldrsh.w	r6, [r2]
   83c64:	3304      	adds	r3, #4
   83c66:	17f7      	asrs	r7, r6, #31
   83c68:	9304      	str	r3, [sp, #16]
   83c6a:	4632      	mov	r2, r6
   83c6c:	463b      	mov	r3, r7
   83c6e:	e75c      	b.n	83b2a <_vfiprintf_r+0x386>
   83c70:	9904      	ldr	r1, [sp, #16]
   83c72:	2378      	movs	r3, #120	; 0x78
   83c74:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
   83c78:	4b38      	ldr	r3, [pc, #224]	; (83d5c <_vfiprintf_r+0x5b8>)
   83c7a:	46b4      	mov	ip, r6
   83c7c:	2230      	movs	r2, #48	; 0x30
   83c7e:	680e      	ldr	r6, [r1, #0]
   83c80:	3104      	adds	r1, #4
   83c82:	9309      	str	r3, [sp, #36]	; 0x24
   83c84:	9503      	str	r5, [sp, #12]
   83c86:	f048 0802 	orr.w	r8, r8, #2
   83c8a:	9104      	str	r1, [sp, #16]
   83c8c:	2700      	movs	r7, #0
   83c8e:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
   83c92:	2302      	movs	r3, #2
   83c94:	e689      	b.n	839aa <_vfiprintf_r+0x206>
   83c96:	f048 0820 	orr.w	r8, r8, #32
   83c9a:	f89b 3000 	ldrb.w	r3, [fp]
   83c9e:	4658      	mov	r0, fp
   83ca0:	e5e9      	b.n	83876 <_vfiprintf_r+0xd2>
   83ca2:	f04f 0100 	mov.w	r1, #0
   83ca6:	9a04      	ldr	r2, [sp, #16]
   83ca8:	9503      	str	r5, [sp, #12]
   83caa:	6813      	ldr	r3, [r2, #0]
   83cac:	46b4      	mov	ip, r6
   83cae:	9307      	str	r3, [sp, #28]
   83cb0:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
   83cb4:	1d15      	adds	r5, r2, #4
   83cb6:	2b00      	cmp	r3, #0
   83cb8:	f000 834e 	beq.w	84358 <_vfiprintf_r+0xbb4>
   83cbc:	2e00      	cmp	r6, #0
   83cbe:	f2c0 8329 	blt.w	84314 <_vfiprintf_r+0xb70>
   83cc2:	9e07      	ldr	r6, [sp, #28]
   83cc4:	4662      	mov	r2, ip
   83cc6:	4630      	mov	r0, r6
   83cc8:	2100      	movs	r1, #0
   83cca:	f8cd c010 	str.w	ip, [sp, #16]
   83cce:	f001 fbc9 	bl	85464 <memchr>
   83cd2:	f8dd c010 	ldr.w	ip, [sp, #16]
   83cd6:	2800      	cmp	r0, #0
   83cd8:	f000 834e 	beq.w	84378 <_vfiprintf_r+0xbd4>
   83cdc:	9504      	str	r5, [sp, #16]
   83cde:	ebc6 0900 	rsb	r9, r6, r0
   83ce2:	f89d 502f 	ldrb.w	r5, [sp, #47]	; 0x2f
   83ce6:	f04f 0c00 	mov.w	ip, #0
   83cea:	e68d      	b.n	83a08 <_vfiprintf_r+0x264>
   83cec:	4a1b      	ldr	r2, [pc, #108]	; (83d5c <_vfiprintf_r+0x5b8>)
   83cee:	f018 0f20 	tst.w	r8, #32
   83cf2:	9503      	str	r5, [sp, #12]
   83cf4:	46b4      	mov	ip, r6
   83cf6:	9209      	str	r2, [sp, #36]	; 0x24
   83cf8:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
   83cfc:	f47f af71 	bne.w	83be2 <_vfiprintf_r+0x43e>
   83d00:	9904      	ldr	r1, [sp, #16]
   83d02:	f018 0f10 	tst.w	r8, #16
   83d06:	460a      	mov	r2, r1
   83d08:	f040 8241 	bne.w	8418e <_vfiprintf_r+0x9ea>
   83d0c:	f018 0f40 	tst.w	r8, #64	; 0x40
   83d10:	f000 823d 	beq.w	8418e <_vfiprintf_r+0x9ea>
   83d14:	3204      	adds	r2, #4
   83d16:	880e      	ldrh	r6, [r1, #0]
   83d18:	2700      	movs	r7, #0
   83d1a:	9204      	str	r2, [sp, #16]
   83d1c:	e76a      	b.n	83bf4 <_vfiprintf_r+0x450>
   83d1e:	f89b 3000 	ldrb.w	r3, [fp]
   83d22:	2b6c      	cmp	r3, #108	; 0x6c
   83d24:	f000 82e9 	beq.w	842fa <_vfiprintf_r+0xb56>
   83d28:	f048 0810 	orr.w	r8, r8, #16
   83d2c:	4658      	mov	r0, fp
   83d2e:	e5a2      	b.n	83876 <_vfiprintf_r+0xd2>
   83d30:	9a04      	ldr	r2, [sp, #16]
   83d32:	4613      	mov	r3, r2
   83d34:	6815      	ldr	r5, [r2, #0]
   83d36:	3304      	adds	r3, #4
   83d38:	2d00      	cmp	r5, #0
   83d3a:	f2c0 82e6 	blt.w	8430a <_vfiprintf_r+0xb66>
   83d3e:	9304      	str	r3, [sp, #16]
   83d40:	f89b 3000 	ldrb.w	r3, [fp]
   83d44:	4658      	mov	r0, fp
   83d46:	e596      	b.n	83876 <_vfiprintf_r+0xd2>
   83d48:	f89b 3000 	ldrb.w	r3, [fp]
   83d4c:	4658      	mov	r0, fp
   83d4e:	212b      	movs	r1, #43	; 0x2b
   83d50:	e591      	b.n	83876 <_vfiprintf_r+0xd2>
   83d52:	bf00      	nop
   83d54:	000864b8 	.word	0x000864b8
   83d58:	00086488 	.word	0x00086488
   83d5c:	0008649c 	.word	0x0008649c
   83d60:	f89b 3000 	ldrb.w	r3, [fp]
   83d64:	f10b 0001 	add.w	r0, fp, #1
   83d68:	2b2a      	cmp	r3, #42	; 0x2a
   83d6a:	f000 830f 	beq.w	8438c <_vfiprintf_r+0xbe8>
   83d6e:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   83d72:	2a09      	cmp	r2, #9
   83d74:	4683      	mov	fp, r0
   83d76:	f04f 0600 	mov.w	r6, #0
   83d7a:	f63f ad7e 	bhi.w	8387a <_vfiprintf_r+0xd6>
   83d7e:	f81b 3b01 	ldrb.w	r3, [fp], #1
   83d82:	eb06 0686 	add.w	r6, r6, r6, lsl #2
   83d86:	eb02 0646 	add.w	r6, r2, r6, lsl #1
   83d8a:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   83d8e:	2a09      	cmp	r2, #9
   83d90:	d9f5      	bls.n	83d7e <_vfiprintf_r+0x5da>
   83d92:	ea46 76e6 	orr.w	r6, r6, r6, asr #31
   83d96:	e570      	b.n	8387a <_vfiprintf_r+0xd6>
   83d98:	f018 0f20 	tst.w	r8, #32
   83d9c:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
   83da0:	f000 8283 	beq.w	842aa <_vfiprintf_r+0xb06>
   83da4:	9a04      	ldr	r2, [sp, #16]
   83da6:	4613      	mov	r3, r2
   83da8:	3304      	adds	r3, #4
   83daa:	9304      	str	r3, [sp, #16]
   83dac:	9b02      	ldr	r3, [sp, #8]
   83dae:	6811      	ldr	r1, [r2, #0]
   83db0:	17df      	asrs	r7, r3, #31
   83db2:	461a      	mov	r2, r3
   83db4:	463b      	mov	r3, r7
   83db6:	e9c1 2300 	strd	r2, r3, [r1]
   83dba:	e525      	b.n	83808 <_vfiprintf_r+0x64>
   83dbc:	4658      	mov	r0, fp
   83dbe:	f89b 3000 	ldrb.w	r3, [fp]
   83dc2:	2900      	cmp	r1, #0
   83dc4:	f47f ad57 	bne.w	83876 <_vfiprintf_r+0xd2>
   83dc8:	2120      	movs	r1, #32
   83dca:	e554      	b.n	83876 <_vfiprintf_r+0xd2>
   83dcc:	f048 0801 	orr.w	r8, r8, #1
   83dd0:	4658      	mov	r0, fp
   83dd2:	f89b 3000 	ldrb.w	r3, [fp]
   83dd6:	e54e      	b.n	83876 <_vfiprintf_r+0xd2>
   83dd8:	9503      	str	r5, [sp, #12]
   83dda:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
   83dde:	2b00      	cmp	r3, #0
   83de0:	f000 809c 	beq.w	83f1c <_vfiprintf_r+0x778>
   83de4:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
   83de8:	f04f 0300 	mov.w	r3, #0
   83dec:	2601      	movs	r6, #1
   83dee:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
   83df2:	ab10      	add	r3, sp, #64	; 0x40
   83df4:	46b1      	mov	r9, r6
   83df6:	9307      	str	r3, [sp, #28]
   83df8:	e71d      	b.n	83c36 <_vfiprintf_r+0x492>
   83dfa:	9801      	ldr	r0, [sp, #4]
   83dfc:	9900      	ldr	r1, [sp, #0]
   83dfe:	aa0d      	add	r2, sp, #52	; 0x34
   83e00:	9308      	str	r3, [sp, #32]
   83e02:	f7ff fc93 	bl	8372c <__sprint_r.part.0>
   83e06:	2800      	cmp	r0, #0
   83e08:	f040 808f 	bne.w	83f2a <_vfiprintf_r+0x786>
   83e0c:	990e      	ldr	r1, [sp, #56]	; 0x38
   83e0e:	46d4      	mov	ip, sl
   83e10:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   83e12:	f101 0e01 	add.w	lr, r1, #1
   83e16:	9b08      	ldr	r3, [sp, #32]
   83e18:	e61d      	b.n	83a56 <_vfiprintf_r+0x2b2>
   83e1a:	990e      	ldr	r1, [sp, #56]	; 0x38
   83e1c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   83e1e:	1c48      	adds	r0, r1, #1
   83e20:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
   83e24:	b16b      	cbz	r3, 83e42 <_vfiprintf_r+0x69e>
   83e26:	3201      	adds	r2, #1
   83e28:	f10d 032f 	add.w	r3, sp, #47	; 0x2f
   83e2c:	2101      	movs	r1, #1
   83e2e:	2807      	cmp	r0, #7
   83e30:	920f      	str	r2, [sp, #60]	; 0x3c
   83e32:	900e      	str	r0, [sp, #56]	; 0x38
   83e34:	6023      	str	r3, [r4, #0]
   83e36:	6061      	str	r1, [r4, #4]
   83e38:	f300 8134 	bgt.w	840a4 <_vfiprintf_r+0x900>
   83e3c:	4601      	mov	r1, r0
   83e3e:	3408      	adds	r4, #8
   83e40:	3001      	adds	r0, #1
   83e42:	9b05      	ldr	r3, [sp, #20]
   83e44:	b163      	cbz	r3, 83e60 <_vfiprintf_r+0x6bc>
   83e46:	3202      	adds	r2, #2
   83e48:	a90c      	add	r1, sp, #48	; 0x30
   83e4a:	2302      	movs	r3, #2
   83e4c:	2807      	cmp	r0, #7
   83e4e:	920f      	str	r2, [sp, #60]	; 0x3c
   83e50:	900e      	str	r0, [sp, #56]	; 0x38
   83e52:	e884 000a 	stmia.w	r4, {r1, r3}
   83e56:	f300 8134 	bgt.w	840c2 <_vfiprintf_r+0x91e>
   83e5a:	4601      	mov	r1, r0
   83e5c:	3408      	adds	r4, #8
   83e5e:	3001      	adds	r0, #1
   83e60:	9b06      	ldr	r3, [sp, #24]
   83e62:	2b80      	cmp	r3, #128	; 0x80
   83e64:	f000 80d4 	beq.w	84010 <_vfiprintf_r+0x86c>
   83e68:	ebc9 070c 	rsb	r7, r9, ip
   83e6c:	2f00      	cmp	r7, #0
   83e6e:	dd2b      	ble.n	83ec8 <_vfiprintf_r+0x724>
   83e70:	2f10      	cmp	r7, #16
   83e72:	4dab      	ldr	r5, [pc, #684]	; (84120 <_vfiprintf_r+0x97c>)
   83e74:	dd1f      	ble.n	83eb6 <_vfiprintf_r+0x712>
   83e76:	46a6      	mov	lr, r4
   83e78:	2310      	movs	r3, #16
   83e7a:	9c01      	ldr	r4, [sp, #4]
   83e7c:	e007      	b.n	83e8e <_vfiprintf_r+0x6ea>
   83e7e:	f101 0c02 	add.w	ip, r1, #2
   83e82:	4601      	mov	r1, r0
   83e84:	f10e 0e08 	add.w	lr, lr, #8
   83e88:	3f10      	subs	r7, #16
   83e8a:	2f10      	cmp	r7, #16
   83e8c:	dd11      	ble.n	83eb2 <_vfiprintf_r+0x70e>
   83e8e:	1c48      	adds	r0, r1, #1
   83e90:	3210      	adds	r2, #16
   83e92:	2807      	cmp	r0, #7
   83e94:	920f      	str	r2, [sp, #60]	; 0x3c
   83e96:	f8ce 5000 	str.w	r5, [lr]
   83e9a:	f8ce 3004 	str.w	r3, [lr, #4]
   83e9e:	900e      	str	r0, [sp, #56]	; 0x38
   83ea0:	dded      	ble.n	83e7e <_vfiprintf_r+0x6da>
   83ea2:	bb6a      	cbnz	r2, 83f00 <_vfiprintf_r+0x75c>
   83ea4:	3f10      	subs	r7, #16
   83ea6:	2f10      	cmp	r7, #16
   83ea8:	f04f 0c01 	mov.w	ip, #1
   83eac:	4611      	mov	r1, r2
   83eae:	46d6      	mov	lr, sl
   83eb0:	dced      	bgt.n	83e8e <_vfiprintf_r+0x6ea>
   83eb2:	4674      	mov	r4, lr
   83eb4:	4660      	mov	r0, ip
   83eb6:	443a      	add	r2, r7
   83eb8:	2807      	cmp	r0, #7
   83eba:	920f      	str	r2, [sp, #60]	; 0x3c
   83ebc:	e884 00a0 	stmia.w	r4, {r5, r7}
   83ec0:	900e      	str	r0, [sp, #56]	; 0x38
   83ec2:	dc3b      	bgt.n	83f3c <_vfiprintf_r+0x798>
   83ec4:	3408      	adds	r4, #8
   83ec6:	3001      	adds	r0, #1
   83ec8:	eb02 0309 	add.w	r3, r2, r9
   83ecc:	9a07      	ldr	r2, [sp, #28]
   83ece:	2807      	cmp	r0, #7
   83ed0:	930f      	str	r3, [sp, #60]	; 0x3c
   83ed2:	e884 0204 	stmia.w	r4, {r2, r9}
   83ed6:	900e      	str	r0, [sp, #56]	; 0x38
   83ed8:	dd3d      	ble.n	83f56 <_vfiprintf_r+0x7b2>
   83eda:	2b00      	cmp	r3, #0
   83edc:	f040 813f 	bne.w	8415e <_vfiprintf_r+0x9ba>
   83ee0:	f018 0f04 	tst.w	r8, #4
   83ee4:	930e      	str	r3, [sp, #56]	; 0x38
   83ee6:	f040 8130 	bne.w	8414a <_vfiprintf_r+0x9a6>
   83eea:	9b02      	ldr	r3, [sp, #8]
   83eec:	9a03      	ldr	r2, [sp, #12]
   83eee:	4296      	cmp	r6, r2
   83ef0:	bfac      	ite	ge
   83ef2:	199b      	addge	r3, r3, r6
   83ef4:	189b      	addlt	r3, r3, r2
   83ef6:	9302      	str	r3, [sp, #8]
   83ef8:	2300      	movs	r3, #0
   83efa:	930e      	str	r3, [sp, #56]	; 0x38
   83efc:	4654      	mov	r4, sl
   83efe:	e483      	b.n	83808 <_vfiprintf_r+0x64>
   83f00:	4620      	mov	r0, r4
   83f02:	9900      	ldr	r1, [sp, #0]
   83f04:	aa0d      	add	r2, sp, #52	; 0x34
   83f06:	9305      	str	r3, [sp, #20]
   83f08:	f7ff fc10 	bl	8372c <__sprint_r.part.0>
   83f0c:	b968      	cbnz	r0, 83f2a <_vfiprintf_r+0x786>
   83f0e:	990e      	ldr	r1, [sp, #56]	; 0x38
   83f10:	46d6      	mov	lr, sl
   83f12:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   83f14:	f101 0c01 	add.w	ip, r1, #1
   83f18:	9b05      	ldr	r3, [sp, #20]
   83f1a:	e7b5      	b.n	83e88 <_vfiprintf_r+0x6e4>
   83f1c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   83f1e:	b123      	cbz	r3, 83f2a <_vfiprintf_r+0x786>
   83f20:	9801      	ldr	r0, [sp, #4]
   83f22:	9900      	ldr	r1, [sp, #0]
   83f24:	aa0d      	add	r2, sp, #52	; 0x34
   83f26:	f7ff fc01 	bl	8372c <__sprint_r.part.0>
   83f2a:	9b00      	ldr	r3, [sp, #0]
   83f2c:	899b      	ldrh	r3, [r3, #12]
   83f2e:	065b      	lsls	r3, r3, #25
   83f30:	f53f ad23 	bmi.w	8397a <_vfiprintf_r+0x1d6>
   83f34:	9802      	ldr	r0, [sp, #8]
   83f36:	b02b      	add	sp, #172	; 0xac
   83f38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83f3c:	2a00      	cmp	r2, #0
   83f3e:	f040 8190 	bne.w	84262 <_vfiprintf_r+0xabe>
   83f42:	464b      	mov	r3, r9
   83f44:	4654      	mov	r4, sl
   83f46:	9907      	ldr	r1, [sp, #28]
   83f48:	2201      	movs	r2, #1
   83f4a:	f8cd 906c 	str.w	r9, [sp, #108]	; 0x6c
   83f4e:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
   83f52:	911a      	str	r1, [sp, #104]	; 0x68
   83f54:	920e      	str	r2, [sp, #56]	; 0x38
   83f56:	f104 0208 	add.w	r2, r4, #8
   83f5a:	f018 0f04 	tst.w	r8, #4
   83f5e:	d039      	beq.n	83fd4 <_vfiprintf_r+0x830>
   83f60:	9903      	ldr	r1, [sp, #12]
   83f62:	1b8d      	subs	r5, r1, r6
   83f64:	2d00      	cmp	r5, #0
   83f66:	dd35      	ble.n	83fd4 <_vfiprintf_r+0x830>
   83f68:	2d10      	cmp	r5, #16
   83f6a:	f340 8200 	ble.w	8436e <_vfiprintf_r+0xbca>
   83f6e:	980e      	ldr	r0, [sp, #56]	; 0x38
   83f70:	4f6c      	ldr	r7, [pc, #432]	; (84124 <_vfiprintf_r+0x980>)
   83f72:	2410      	movs	r4, #16
   83f74:	f8dd 8004 	ldr.w	r8, [sp, #4]
   83f78:	f8dd 9000 	ldr.w	r9, [sp]
   83f7c:	e006      	b.n	83f8c <_vfiprintf_r+0x7e8>
   83f7e:	f100 0e02 	add.w	lr, r0, #2
   83f82:	4608      	mov	r0, r1
   83f84:	3208      	adds	r2, #8
   83f86:	3d10      	subs	r5, #16
   83f88:	2d10      	cmp	r5, #16
   83f8a:	dd10      	ble.n	83fae <_vfiprintf_r+0x80a>
   83f8c:	1c41      	adds	r1, r0, #1
   83f8e:	3310      	adds	r3, #16
   83f90:	2907      	cmp	r1, #7
   83f92:	930f      	str	r3, [sp, #60]	; 0x3c
   83f94:	6017      	str	r7, [r2, #0]
   83f96:	6054      	str	r4, [r2, #4]
   83f98:	910e      	str	r1, [sp, #56]	; 0x38
   83f9a:	ddf0      	ble.n	83f7e <_vfiprintf_r+0x7da>
   83f9c:	2b00      	cmp	r3, #0
   83f9e:	d12a      	bne.n	83ff6 <_vfiprintf_r+0x852>
   83fa0:	3d10      	subs	r5, #16
   83fa2:	2d10      	cmp	r5, #16
   83fa4:	f04f 0e01 	mov.w	lr, #1
   83fa8:	4618      	mov	r0, r3
   83faa:	4652      	mov	r2, sl
   83fac:	dcee      	bgt.n	83f8c <_vfiprintf_r+0x7e8>
   83fae:	442b      	add	r3, r5
   83fb0:	f1be 0f07 	cmp.w	lr, #7
   83fb4:	930f      	str	r3, [sp, #60]	; 0x3c
   83fb6:	6017      	str	r7, [r2, #0]
   83fb8:	6055      	str	r5, [r2, #4]
   83fba:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
   83fbe:	dd09      	ble.n	83fd4 <_vfiprintf_r+0x830>
   83fc0:	2b00      	cmp	r3, #0
   83fc2:	d092      	beq.n	83eea <_vfiprintf_r+0x746>
   83fc4:	9801      	ldr	r0, [sp, #4]
   83fc6:	9900      	ldr	r1, [sp, #0]
   83fc8:	aa0d      	add	r2, sp, #52	; 0x34
   83fca:	f7ff fbaf 	bl	8372c <__sprint_r.part.0>
   83fce:	2800      	cmp	r0, #0
   83fd0:	d1ab      	bne.n	83f2a <_vfiprintf_r+0x786>
   83fd2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   83fd4:	9a02      	ldr	r2, [sp, #8]
   83fd6:	9903      	ldr	r1, [sp, #12]
   83fd8:	428e      	cmp	r6, r1
   83fda:	bfac      	ite	ge
   83fdc:	1992      	addge	r2, r2, r6
   83fde:	1852      	addlt	r2, r2, r1
   83fe0:	9202      	str	r2, [sp, #8]
   83fe2:	2b00      	cmp	r3, #0
   83fe4:	d088      	beq.n	83ef8 <_vfiprintf_r+0x754>
   83fe6:	9801      	ldr	r0, [sp, #4]
   83fe8:	9900      	ldr	r1, [sp, #0]
   83fea:	aa0d      	add	r2, sp, #52	; 0x34
   83fec:	f7ff fb9e 	bl	8372c <__sprint_r.part.0>
   83ff0:	2800      	cmp	r0, #0
   83ff2:	d081      	beq.n	83ef8 <_vfiprintf_r+0x754>
   83ff4:	e799      	b.n	83f2a <_vfiprintf_r+0x786>
   83ff6:	4640      	mov	r0, r8
   83ff8:	4649      	mov	r1, r9
   83ffa:	aa0d      	add	r2, sp, #52	; 0x34
   83ffc:	f7ff fb96 	bl	8372c <__sprint_r.part.0>
   84000:	2800      	cmp	r0, #0
   84002:	d192      	bne.n	83f2a <_vfiprintf_r+0x786>
   84004:	980e      	ldr	r0, [sp, #56]	; 0x38
   84006:	4652      	mov	r2, sl
   84008:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   8400a:	f100 0e01 	add.w	lr, r0, #1
   8400e:	e7ba      	b.n	83f86 <_vfiprintf_r+0x7e2>
   84010:	9b03      	ldr	r3, [sp, #12]
   84012:	1b9f      	subs	r7, r3, r6
   84014:	2f00      	cmp	r7, #0
   84016:	f77f af27 	ble.w	83e68 <_vfiprintf_r+0x6c4>
   8401a:	2f10      	cmp	r7, #16
   8401c:	f340 81b3 	ble.w	84386 <_vfiprintf_r+0xbe2>
   84020:	4620      	mov	r0, r4
   84022:	4d3f      	ldr	r5, [pc, #252]	; (84120 <_vfiprintf_r+0x97c>)
   84024:	4664      	mov	r4, ip
   84026:	2310      	movs	r3, #16
   84028:	4684      	mov	ip, r0
   8402a:	e007      	b.n	8403c <_vfiprintf_r+0x898>
   8402c:	f101 0e02 	add.w	lr, r1, #2
   84030:	4601      	mov	r1, r0
   84032:	f10c 0c08 	add.w	ip, ip, #8
   84036:	3f10      	subs	r7, #16
   84038:	2f10      	cmp	r7, #16
   8403a:	dd11      	ble.n	84060 <_vfiprintf_r+0x8bc>
   8403c:	1c48      	adds	r0, r1, #1
   8403e:	3210      	adds	r2, #16
   84040:	2807      	cmp	r0, #7
   84042:	920f      	str	r2, [sp, #60]	; 0x3c
   84044:	f8cc 5000 	str.w	r5, [ip]
   84048:	f8cc 3004 	str.w	r3, [ip, #4]
   8404c:	900e      	str	r0, [sp, #56]	; 0x38
   8404e:	dded      	ble.n	8402c <_vfiprintf_r+0x888>
   84050:	b9c2      	cbnz	r2, 84084 <_vfiprintf_r+0x8e0>
   84052:	3f10      	subs	r7, #16
   84054:	2f10      	cmp	r7, #16
   84056:	f04f 0e01 	mov.w	lr, #1
   8405a:	4611      	mov	r1, r2
   8405c:	46d4      	mov	ip, sl
   8405e:	dced      	bgt.n	8403c <_vfiprintf_r+0x898>
   84060:	4663      	mov	r3, ip
   84062:	46a4      	mov	ip, r4
   84064:	461c      	mov	r4, r3
   84066:	443a      	add	r2, r7
   84068:	f1be 0f07 	cmp.w	lr, #7
   8406c:	920f      	str	r2, [sp, #60]	; 0x3c
   8406e:	e884 00a0 	stmia.w	r4, {r5, r7}
   84072:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
   84076:	f300 80ee 	bgt.w	84256 <_vfiprintf_r+0xab2>
   8407a:	3408      	adds	r4, #8
   8407c:	f10e 0001 	add.w	r0, lr, #1
   84080:	4671      	mov	r1, lr
   84082:	e6f1      	b.n	83e68 <_vfiprintf_r+0x6c4>
   84084:	9801      	ldr	r0, [sp, #4]
   84086:	9900      	ldr	r1, [sp, #0]
   84088:	aa0d      	add	r2, sp, #52	; 0x34
   8408a:	9305      	str	r3, [sp, #20]
   8408c:	f7ff fb4e 	bl	8372c <__sprint_r.part.0>
   84090:	2800      	cmp	r0, #0
   84092:	f47f af4a 	bne.w	83f2a <_vfiprintf_r+0x786>
   84096:	990e      	ldr	r1, [sp, #56]	; 0x38
   84098:	46d4      	mov	ip, sl
   8409a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   8409c:	f101 0e01 	add.w	lr, r1, #1
   840a0:	9b05      	ldr	r3, [sp, #20]
   840a2:	e7c8      	b.n	84036 <_vfiprintf_r+0x892>
   840a4:	2a00      	cmp	r2, #0
   840a6:	f040 80c5 	bne.w	84234 <_vfiprintf_r+0xa90>
   840aa:	9b05      	ldr	r3, [sp, #20]
   840ac:	2b00      	cmp	r3, #0
   840ae:	f000 8085 	beq.w	841bc <_vfiprintf_r+0xa18>
   840b2:	aa0c      	add	r2, sp, #48	; 0x30
   840b4:	2302      	movs	r3, #2
   840b6:	921a      	str	r2, [sp, #104]	; 0x68
   840b8:	4608      	mov	r0, r1
   840ba:	931b      	str	r3, [sp, #108]	; 0x6c
   840bc:	461a      	mov	r2, r3
   840be:	4654      	mov	r4, sl
   840c0:	e6cb      	b.n	83e5a <_vfiprintf_r+0x6b6>
   840c2:	2a00      	cmp	r2, #0
   840c4:	f040 80a5 	bne.w	84212 <_vfiprintf_r+0xa6e>
   840c8:	2001      	movs	r0, #1
   840ca:	4611      	mov	r1, r2
   840cc:	4654      	mov	r4, sl
   840ce:	e6c7      	b.n	83e60 <_vfiprintf_r+0x6bc>
   840d0:	bb03      	cbnz	r3, 84114 <_vfiprintf_r+0x970>
   840d2:	f018 0f01 	tst.w	r8, #1
   840d6:	d01d      	beq.n	84114 <_vfiprintf_r+0x970>
   840d8:	ab2a      	add	r3, sp, #168	; 0xa8
   840da:	2230      	movs	r2, #48	; 0x30
   840dc:	f803 2d41 	strb.w	r2, [r3, #-65]!
   840e0:	ebc3 090a 	rsb	r9, r3, sl
   840e4:	9307      	str	r3, [sp, #28]
   840e6:	e48f      	b.n	83a08 <_vfiprintf_r+0x264>
   840e8:	46d1      	mov	r9, sl
   840ea:	9809      	ldr	r0, [sp, #36]	; 0x24
   840ec:	0933      	lsrs	r3, r6, #4
   840ee:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
   840f2:	0939      	lsrs	r1, r7, #4
   840f4:	f006 020f 	and.w	r2, r6, #15
   840f8:	460f      	mov	r7, r1
   840fa:	461e      	mov	r6, r3
   840fc:	5c83      	ldrb	r3, [r0, r2]
   840fe:	f809 3d01 	strb.w	r3, [r9, #-1]!
   84102:	ea56 0307 	orrs.w	r3, r6, r7
   84106:	d1f1      	bne.n	840ec <_vfiprintf_r+0x948>
   84108:	464b      	mov	r3, r9
   8410a:	f8cd 901c 	str.w	r9, [sp, #28]
   8410e:	ebc3 090a 	rsb	r9, r3, sl
   84112:	e479      	b.n	83a08 <_vfiprintf_r+0x264>
   84114:	f8cd a01c 	str.w	sl, [sp, #28]
   84118:	e476      	b.n	83a08 <_vfiprintf_r+0x264>
   8411a:	2302      	movs	r3, #2
   8411c:	e445      	b.n	839aa <_vfiprintf_r+0x206>
   8411e:	bf00      	nop
   84120:	00086478 	.word	0x00086478
   84124:	000864b8 	.word	0x000864b8
   84128:	2a00      	cmp	r2, #0
   8412a:	f040 80d5 	bne.w	842d8 <_vfiprintf_r+0xb34>
   8412e:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
   84132:	2b00      	cmp	r3, #0
   84134:	f000 80ac 	beq.w	84290 <_vfiprintf_r+0xaec>
   84138:	2301      	movs	r3, #1
   8413a:	f10d 012f 	add.w	r1, sp, #47	; 0x2f
   8413e:	4618      	mov	r0, r3
   84140:	931b      	str	r3, [sp, #108]	; 0x6c
   84142:	461a      	mov	r2, r3
   84144:	911a      	str	r1, [sp, #104]	; 0x68
   84146:	4654      	mov	r4, sl
   84148:	e678      	b.n	83e3c <_vfiprintf_r+0x698>
   8414a:	9a03      	ldr	r2, [sp, #12]
   8414c:	1b95      	subs	r5, r2, r6
   8414e:	2d00      	cmp	r5, #0
   84150:	4652      	mov	r2, sl
   84152:	f73f af09 	bgt.w	83f68 <_vfiprintf_r+0x7c4>
   84156:	e6c8      	b.n	83eea <_vfiprintf_r+0x746>
   84158:	465d      	mov	r5, fp
   8415a:	f7ff bb7c 	b.w	83856 <_vfiprintf_r+0xb2>
   8415e:	9801      	ldr	r0, [sp, #4]
   84160:	9900      	ldr	r1, [sp, #0]
   84162:	aa0d      	add	r2, sp, #52	; 0x34
   84164:	f7ff fae2 	bl	8372c <__sprint_r.part.0>
   84168:	2800      	cmp	r0, #0
   8416a:	f47f aede 	bne.w	83f2a <_vfiprintf_r+0x786>
   8416e:	4652      	mov	r2, sl
   84170:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   84172:	e6f2      	b.n	83f5a <_vfiprintf_r+0x7b6>
   84174:	9904      	ldr	r1, [sp, #16]
   84176:	2700      	movs	r7, #0
   84178:	460a      	mov	r2, r1
   8417a:	3204      	adds	r2, #4
   8417c:	680e      	ldr	r6, [r1, #0]
   8417e:	9204      	str	r2, [sp, #16]
   84180:	e413      	b.n	839aa <_vfiprintf_r+0x206>
   84182:	3204      	adds	r2, #4
   84184:	681e      	ldr	r6, [r3, #0]
   84186:	2700      	movs	r7, #0
   84188:	2301      	movs	r3, #1
   8418a:	9204      	str	r2, [sp, #16]
   8418c:	e40d      	b.n	839aa <_vfiprintf_r+0x206>
   8418e:	6816      	ldr	r6, [r2, #0]
   84190:	3204      	adds	r2, #4
   84192:	9204      	str	r2, [sp, #16]
   84194:	2700      	movs	r7, #0
   84196:	e52d      	b.n	83bf4 <_vfiprintf_r+0x450>
   84198:	681e      	ldr	r6, [r3, #0]
   8419a:	3304      	adds	r3, #4
   8419c:	17f7      	asrs	r7, r6, #31
   8419e:	9304      	str	r3, [sp, #16]
   841a0:	4632      	mov	r2, r6
   841a2:	463b      	mov	r3, r7
   841a4:	e4c1      	b.n	83b2a <_vfiprintf_r+0x386>
   841a6:	9801      	ldr	r0, [sp, #4]
   841a8:	9900      	ldr	r1, [sp, #0]
   841aa:	aa0d      	add	r2, sp, #52	; 0x34
   841ac:	f7ff fabe 	bl	8372c <__sprint_r.part.0>
   841b0:	2800      	cmp	r0, #0
   841b2:	f47f aeba 	bne.w	83f2a <_vfiprintf_r+0x786>
   841b6:	4654      	mov	r4, sl
   841b8:	f7ff bbc0 	b.w	8393c <_vfiprintf_r+0x198>
   841bc:	4608      	mov	r0, r1
   841be:	4654      	mov	r4, sl
   841c0:	4611      	mov	r1, r2
   841c2:	e64d      	b.n	83e60 <_vfiprintf_r+0x6bc>
   841c4:	46d1      	mov	r9, sl
   841c6:	f8cd c014 	str.w	ip, [sp, #20]
   841ca:	4630      	mov	r0, r6
   841cc:	4639      	mov	r1, r7
   841ce:	220a      	movs	r2, #10
   841d0:	2300      	movs	r3, #0
   841d2:	f001 fdd1 	bl	85d78 <__aeabi_uldivmod>
   841d6:	3230      	adds	r2, #48	; 0x30
   841d8:	4630      	mov	r0, r6
   841da:	4639      	mov	r1, r7
   841dc:	f809 2d01 	strb.w	r2, [r9, #-1]!
   841e0:	2300      	movs	r3, #0
   841e2:	220a      	movs	r2, #10
   841e4:	f001 fdc8 	bl	85d78 <__aeabi_uldivmod>
   841e8:	4606      	mov	r6, r0
   841ea:	460f      	mov	r7, r1
   841ec:	ea56 0307 	orrs.w	r3, r6, r7
   841f0:	d1eb      	bne.n	841ca <_vfiprintf_r+0xa26>
   841f2:	f8dd c014 	ldr.w	ip, [sp, #20]
   841f6:	e787      	b.n	84108 <_vfiprintf_r+0x964>
   841f8:	2b30      	cmp	r3, #48	; 0x30
   841fa:	9b07      	ldr	r3, [sp, #28]
   841fc:	d087      	beq.n	8410e <_vfiprintf_r+0x96a>
   841fe:	3b01      	subs	r3, #1
   84200:	461a      	mov	r2, r3
   84202:	9307      	str	r3, [sp, #28]
   84204:	2330      	movs	r3, #48	; 0x30
   84206:	ebc2 090a 	rsb	r9, r2, sl
   8420a:	f801 3c01 	strb.w	r3, [r1, #-1]
   8420e:	f7ff bbfb 	b.w	83a08 <_vfiprintf_r+0x264>
   84212:	9801      	ldr	r0, [sp, #4]
   84214:	9900      	ldr	r1, [sp, #0]
   84216:	aa0d      	add	r2, sp, #52	; 0x34
   84218:	f8cd c014 	str.w	ip, [sp, #20]
   8421c:	f7ff fa86 	bl	8372c <__sprint_r.part.0>
   84220:	2800      	cmp	r0, #0
   84222:	f47f ae82 	bne.w	83f2a <_vfiprintf_r+0x786>
   84226:	990e      	ldr	r1, [sp, #56]	; 0x38
   84228:	4654      	mov	r4, sl
   8422a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   8422c:	1c48      	adds	r0, r1, #1
   8422e:	f8dd c014 	ldr.w	ip, [sp, #20]
   84232:	e615      	b.n	83e60 <_vfiprintf_r+0x6bc>
   84234:	9801      	ldr	r0, [sp, #4]
   84236:	9900      	ldr	r1, [sp, #0]
   84238:	aa0d      	add	r2, sp, #52	; 0x34
   8423a:	f8cd c020 	str.w	ip, [sp, #32]
   8423e:	f7ff fa75 	bl	8372c <__sprint_r.part.0>
   84242:	2800      	cmp	r0, #0
   84244:	f47f ae71 	bne.w	83f2a <_vfiprintf_r+0x786>
   84248:	990e      	ldr	r1, [sp, #56]	; 0x38
   8424a:	4654      	mov	r4, sl
   8424c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   8424e:	1c48      	adds	r0, r1, #1
   84250:	f8dd c020 	ldr.w	ip, [sp, #32]
   84254:	e5f5      	b.n	83e42 <_vfiprintf_r+0x69e>
   84256:	2a00      	cmp	r2, #0
   84258:	d167      	bne.n	8432a <_vfiprintf_r+0xb86>
   8425a:	2001      	movs	r0, #1
   8425c:	4611      	mov	r1, r2
   8425e:	4654      	mov	r4, sl
   84260:	e602      	b.n	83e68 <_vfiprintf_r+0x6c4>
   84262:	9801      	ldr	r0, [sp, #4]
   84264:	9900      	ldr	r1, [sp, #0]
   84266:	aa0d      	add	r2, sp, #52	; 0x34
   84268:	f7ff fa60 	bl	8372c <__sprint_r.part.0>
   8426c:	2800      	cmp	r0, #0
   8426e:	f47f ae5c 	bne.w	83f2a <_vfiprintf_r+0x786>
   84272:	980e      	ldr	r0, [sp, #56]	; 0x38
   84274:	4654      	mov	r4, sl
   84276:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   84278:	3001      	adds	r0, #1
   8427a:	e625      	b.n	83ec8 <_vfiprintf_r+0x724>
   8427c:	252d      	movs	r5, #45	; 0x2d
   8427e:	4276      	negs	r6, r6
   84280:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
   84284:	f88d 502f 	strb.w	r5, [sp, #47]	; 0x2f
   84288:	46e1      	mov	r9, ip
   8428a:	2301      	movs	r3, #1
   8428c:	f7ff bb93 	b.w	839b6 <_vfiprintf_r+0x212>
   84290:	9b05      	ldr	r3, [sp, #20]
   84292:	4611      	mov	r1, r2
   84294:	2001      	movs	r0, #1
   84296:	4654      	mov	r4, sl
   84298:	2b00      	cmp	r3, #0
   8429a:	f43f ade5 	beq.w	83e68 <_vfiprintf_r+0x6c4>
   8429e:	aa0c      	add	r2, sp, #48	; 0x30
   842a0:	2302      	movs	r3, #2
   842a2:	e88a 000c 	stmia.w	sl, {r2, r3}
   842a6:	461a      	mov	r2, r3
   842a8:	e5d7      	b.n	83e5a <_vfiprintf_r+0x6b6>
   842aa:	f018 0f10 	tst.w	r8, #16
   842ae:	d10b      	bne.n	842c8 <_vfiprintf_r+0xb24>
   842b0:	f018 0f40 	tst.w	r8, #64	; 0x40
   842b4:	d008      	beq.n	842c8 <_vfiprintf_r+0xb24>
   842b6:	9a04      	ldr	r2, [sp, #16]
   842b8:	6813      	ldr	r3, [r2, #0]
   842ba:	3204      	adds	r2, #4
   842bc:	9204      	str	r2, [sp, #16]
   842be:	f8bd 2008 	ldrh.w	r2, [sp, #8]
   842c2:	801a      	strh	r2, [r3, #0]
   842c4:	f7ff baa0 	b.w	83808 <_vfiprintf_r+0x64>
   842c8:	9a04      	ldr	r2, [sp, #16]
   842ca:	6813      	ldr	r3, [r2, #0]
   842cc:	3204      	adds	r2, #4
   842ce:	9204      	str	r2, [sp, #16]
   842d0:	9a02      	ldr	r2, [sp, #8]
   842d2:	601a      	str	r2, [r3, #0]
   842d4:	f7ff ba98 	b.w	83808 <_vfiprintf_r+0x64>
   842d8:	9801      	ldr	r0, [sp, #4]
   842da:	9900      	ldr	r1, [sp, #0]
   842dc:	aa0d      	add	r2, sp, #52	; 0x34
   842de:	f8cd c020 	str.w	ip, [sp, #32]
   842e2:	f7ff fa23 	bl	8372c <__sprint_r.part.0>
   842e6:	2800      	cmp	r0, #0
   842e8:	f47f ae1f 	bne.w	83f2a <_vfiprintf_r+0x786>
   842ec:	990e      	ldr	r1, [sp, #56]	; 0x38
   842ee:	4654      	mov	r4, sl
   842f0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   842f2:	1c48      	adds	r0, r1, #1
   842f4:	f8dd c020 	ldr.w	ip, [sp, #32]
   842f8:	e592      	b.n	83e20 <_vfiprintf_r+0x67c>
   842fa:	f048 0820 	orr.w	r8, r8, #32
   842fe:	f10b 0001 	add.w	r0, fp, #1
   84302:	f89b 3001 	ldrb.w	r3, [fp, #1]
   84306:	f7ff bab6 	b.w	83876 <_vfiprintf_r+0xd2>
   8430a:	426d      	negs	r5, r5
   8430c:	9304      	str	r3, [sp, #16]
   8430e:	4658      	mov	r0, fp
   84310:	f7ff bbc8 	b.w	83aa4 <_vfiprintf_r+0x300>
   84314:	9807      	ldr	r0, [sp, #28]
   84316:	9504      	str	r5, [sp, #16]
   84318:	f7ff f9a6 	bl	83668 <strlen>
   8431c:	f89d 502f 	ldrb.w	r5, [sp, #47]	; 0x2f
   84320:	4681      	mov	r9, r0
   84322:	f04f 0c00 	mov.w	ip, #0
   84326:	f7ff bb6f 	b.w	83a08 <_vfiprintf_r+0x264>
   8432a:	9801      	ldr	r0, [sp, #4]
   8432c:	9900      	ldr	r1, [sp, #0]
   8432e:	aa0d      	add	r2, sp, #52	; 0x34
   84330:	f8cd c014 	str.w	ip, [sp, #20]
   84334:	f7ff f9fa 	bl	8372c <__sprint_r.part.0>
   84338:	2800      	cmp	r0, #0
   8433a:	f47f adf6 	bne.w	83f2a <_vfiprintf_r+0x786>
   8433e:	990e      	ldr	r1, [sp, #56]	; 0x38
   84340:	4654      	mov	r4, sl
   84342:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   84344:	1c48      	adds	r0, r1, #1
   84346:	f8dd c014 	ldr.w	ip, [sp, #20]
   8434a:	e58d      	b.n	83e68 <_vfiprintf_r+0x6c4>
   8434c:	990e      	ldr	r1, [sp, #56]	; 0x38
   8434e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   84350:	3101      	adds	r1, #1
   84352:	4f15      	ldr	r7, [pc, #84]	; (843a8 <_vfiprintf_r+0xc04>)
   84354:	f7ff bb9a 	b.w	83a8c <_vfiprintf_r+0x2e8>
   84358:	2e06      	cmp	r6, #6
   8435a:	4b14      	ldr	r3, [pc, #80]	; (843ac <_vfiprintf_r+0xc08>)
   8435c:	bf28      	it	cs
   8435e:	f04f 0c06 	movcs.w	ip, #6
   84362:	46e1      	mov	r9, ip
   84364:	9504      	str	r5, [sp, #16]
   84366:	ea2c 76ec 	bic.w	r6, ip, ip, asr #31
   8436a:	9307      	str	r3, [sp, #28]
   8436c:	e463      	b.n	83c36 <_vfiprintf_r+0x492>
   8436e:	990e      	ldr	r1, [sp, #56]	; 0x38
   84370:	4f0d      	ldr	r7, [pc, #52]	; (843a8 <_vfiprintf_r+0xc04>)
   84372:	f101 0e01 	add.w	lr, r1, #1
   84376:	e61a      	b.n	83fae <_vfiprintf_r+0x80a>
   84378:	46e1      	mov	r9, ip
   8437a:	9504      	str	r5, [sp, #16]
   8437c:	4684      	mov	ip, r0
   8437e:	f89d 502f 	ldrb.w	r5, [sp, #47]	; 0x2f
   84382:	f7ff bb41 	b.w	83a08 <_vfiprintf_r+0x264>
   84386:	4686      	mov	lr, r0
   84388:	4d09      	ldr	r5, [pc, #36]	; (843b0 <_vfiprintf_r+0xc0c>)
   8438a:	e66c      	b.n	84066 <_vfiprintf_r+0x8c2>
   8438c:	9a04      	ldr	r2, [sp, #16]
   8438e:	f89b 3001 	ldrb.w	r3, [fp, #1]
   84392:	6816      	ldr	r6, [r2, #0]
   84394:	3204      	adds	r2, #4
   84396:	2e00      	cmp	r6, #0
   84398:	9204      	str	r2, [sp, #16]
   8439a:	f6bf aa6c 	bge.w	83876 <_vfiprintf_r+0xd2>
   8439e:	f04f 36ff 	mov.w	r6, #4294967295
   843a2:	f7ff ba68 	b.w	83876 <_vfiprintf_r+0xd2>
   843a6:	bf00      	nop
   843a8:	000864b8 	.word	0x000864b8
   843ac:	000864b0 	.word	0x000864b0
   843b0:	00086478 	.word	0x00086478

000843b4 <__sbprintf>:
   843b4:	e92d 45f0 	stmdb	sp!, {r4, r5, r6, r7, r8, sl, lr}
   843b8:	4688      	mov	r8, r1
   843ba:	6e4f      	ldr	r7, [r1, #100]	; 0x64
   843bc:	f2ad 4d6c 	subw	sp, sp, #1132	; 0x46c
   843c0:	9719      	str	r7, [sp, #100]	; 0x64
   843c2:	f8d8 701c 	ldr.w	r7, [r8, #28]
   843c6:	f8b1 e00c 	ldrh.w	lr, [r1, #12]
   843ca:	f8b1 a00e 	ldrh.w	sl, [r1, #14]
   843ce:	9707      	str	r7, [sp, #28]
   843d0:	f8d8 7024 	ldr.w	r7, [r8, #36]	; 0x24
   843d4:	ac1a      	add	r4, sp, #104	; 0x68
   843d6:	f44f 6580 	mov.w	r5, #1024	; 0x400
   843da:	f02e 0e02 	bic.w	lr, lr, #2
   843de:	2600      	movs	r6, #0
   843e0:	4669      	mov	r1, sp
   843e2:	9400      	str	r4, [sp, #0]
   843e4:	9404      	str	r4, [sp, #16]
   843e6:	9502      	str	r5, [sp, #8]
   843e8:	9505      	str	r5, [sp, #20]
   843ea:	f8ad e00c 	strh.w	lr, [sp, #12]
   843ee:	f8ad a00e 	strh.w	sl, [sp, #14]
   843f2:	9709      	str	r7, [sp, #36]	; 0x24
   843f4:	9606      	str	r6, [sp, #24]
   843f6:	4605      	mov	r5, r0
   843f8:	f7ff f9d4 	bl	837a4 <_vfiprintf_r>
   843fc:	1e04      	subs	r4, r0, #0
   843fe:	db07      	blt.n	84410 <__sbprintf+0x5c>
   84400:	4628      	mov	r0, r5
   84402:	4669      	mov	r1, sp
   84404:	f000 f92a 	bl	8465c <_fflush_r>
   84408:	42b0      	cmp	r0, r6
   8440a:	bf18      	it	ne
   8440c:	f04f 34ff 	movne.w	r4, #4294967295
   84410:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   84414:	065b      	lsls	r3, r3, #25
   84416:	d505      	bpl.n	84424 <__sbprintf+0x70>
   84418:	f8b8 300c 	ldrh.w	r3, [r8, #12]
   8441c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   84420:	f8a8 300c 	strh.w	r3, [r8, #12]
   84424:	4620      	mov	r0, r4
   84426:	f20d 4d6c 	addw	sp, sp, #1132	; 0x46c
   8442a:	e8bd 85f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl, pc}
   8442e:	bf00      	nop

00084430 <__swsetup_r>:
   84430:	b538      	push	{r3, r4, r5, lr}
   84432:	4b2f      	ldr	r3, [pc, #188]	; (844f0 <__swsetup_r+0xc0>)
   84434:	4605      	mov	r5, r0
   84436:	6818      	ldr	r0, [r3, #0]
   84438:	460c      	mov	r4, r1
   8443a:	b110      	cbz	r0, 84442 <__swsetup_r+0x12>
   8443c:	6b83      	ldr	r3, [r0, #56]	; 0x38
   8443e:	2b00      	cmp	r3, #0
   84440:	d036      	beq.n	844b0 <__swsetup_r+0x80>
   84442:	89a2      	ldrh	r2, [r4, #12]
   84444:	b293      	uxth	r3, r2
   84446:	0718      	lsls	r0, r3, #28
   84448:	d50c      	bpl.n	84464 <__swsetup_r+0x34>
   8444a:	6920      	ldr	r0, [r4, #16]
   8444c:	b1a8      	cbz	r0, 8447a <__swsetup_r+0x4a>
   8444e:	f013 0201 	ands.w	r2, r3, #1
   84452:	d01e      	beq.n	84492 <__swsetup_r+0x62>
   84454:	6963      	ldr	r3, [r4, #20]
   84456:	2200      	movs	r2, #0
   84458:	425b      	negs	r3, r3
   8445a:	61a3      	str	r3, [r4, #24]
   8445c:	60a2      	str	r2, [r4, #8]
   8445e:	b1f0      	cbz	r0, 8449e <__swsetup_r+0x6e>
   84460:	2000      	movs	r0, #0
   84462:	bd38      	pop	{r3, r4, r5, pc}
   84464:	06d9      	lsls	r1, r3, #27
   84466:	d53a      	bpl.n	844de <__swsetup_r+0xae>
   84468:	0758      	lsls	r0, r3, #29
   8446a:	d424      	bmi.n	844b6 <__swsetup_r+0x86>
   8446c:	6920      	ldr	r0, [r4, #16]
   8446e:	f042 0308 	orr.w	r3, r2, #8
   84472:	81a3      	strh	r3, [r4, #12]
   84474:	b29b      	uxth	r3, r3
   84476:	2800      	cmp	r0, #0
   84478:	d1e9      	bne.n	8444e <__swsetup_r+0x1e>
   8447a:	f403 7220 	and.w	r2, r3, #640	; 0x280
   8447e:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   84482:	d0e4      	beq.n	8444e <__swsetup_r+0x1e>
   84484:	4628      	mov	r0, r5
   84486:	4621      	mov	r1, r4
   84488:	f000 fcee 	bl	84e68 <__smakebuf_r>
   8448c:	89a3      	ldrh	r3, [r4, #12]
   8448e:	6920      	ldr	r0, [r4, #16]
   84490:	e7dd      	b.n	8444e <__swsetup_r+0x1e>
   84492:	0799      	lsls	r1, r3, #30
   84494:	bf58      	it	pl
   84496:	6962      	ldrpl	r2, [r4, #20]
   84498:	60a2      	str	r2, [r4, #8]
   8449a:	2800      	cmp	r0, #0
   8449c:	d1e0      	bne.n	84460 <__swsetup_r+0x30>
   8449e:	89a3      	ldrh	r3, [r4, #12]
   844a0:	061a      	lsls	r2, r3, #24
   844a2:	d5de      	bpl.n	84462 <__swsetup_r+0x32>
   844a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   844a8:	81a3      	strh	r3, [r4, #12]
   844aa:	f04f 30ff 	mov.w	r0, #4294967295
   844ae:	bd38      	pop	{r3, r4, r5, pc}
   844b0:	f000 f968 	bl	84784 <__sinit>
   844b4:	e7c5      	b.n	84442 <__swsetup_r+0x12>
   844b6:	6b21      	ldr	r1, [r4, #48]	; 0x30
   844b8:	b149      	cbz	r1, 844ce <__swsetup_r+0x9e>
   844ba:	f104 0340 	add.w	r3, r4, #64	; 0x40
   844be:	4299      	cmp	r1, r3
   844c0:	d003      	beq.n	844ca <__swsetup_r+0x9a>
   844c2:	4628      	mov	r0, r5
   844c4:	f000 fa36 	bl	84934 <_free_r>
   844c8:	89a2      	ldrh	r2, [r4, #12]
   844ca:	2300      	movs	r3, #0
   844cc:	6323      	str	r3, [r4, #48]	; 0x30
   844ce:	6920      	ldr	r0, [r4, #16]
   844d0:	f022 0224 	bic.w	r2, r2, #36	; 0x24
   844d4:	2300      	movs	r3, #0
   844d6:	b292      	uxth	r2, r2
   844d8:	e884 0009 	stmia.w	r4, {r0, r3}
   844dc:	e7c7      	b.n	8446e <__swsetup_r+0x3e>
   844de:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   844e2:	2309      	movs	r3, #9
   844e4:	602b      	str	r3, [r5, #0]
   844e6:	f04f 30ff 	mov.w	r0, #4294967295
   844ea:	81a2      	strh	r2, [r4, #12]
   844ec:	bd38      	pop	{r3, r4, r5, pc}
   844ee:	bf00      	nop
   844f0:	20070568 	.word	0x20070568

000844f4 <register_fini>:
   844f4:	4b02      	ldr	r3, [pc, #8]	; (84500 <register_fini+0xc>)
   844f6:	b113      	cbz	r3, 844fe <register_fini+0xa>
   844f8:	4802      	ldr	r0, [pc, #8]	; (84504 <register_fini+0x10>)
   844fa:	f000 b805 	b.w	84508 <atexit>
   844fe:	4770      	bx	lr
   84500:	00000000 	.word	0x00000000
   84504:	00084799 	.word	0x00084799

00084508 <atexit>:
   84508:	4601      	mov	r1, r0
   8450a:	2000      	movs	r0, #0
   8450c:	4602      	mov	r2, r0
   8450e:	4603      	mov	r3, r0
   84510:	f001 bb3e 	b.w	85b90 <__register_exitproc>

00084514 <__sflush_r>:
   84514:	898b      	ldrh	r3, [r1, #12]
   84516:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8451a:	b29a      	uxth	r2, r3
   8451c:	460d      	mov	r5, r1
   8451e:	0711      	lsls	r1, r2, #28
   84520:	4680      	mov	r8, r0
   84522:	d43c      	bmi.n	8459e <__sflush_r+0x8a>
   84524:	686a      	ldr	r2, [r5, #4]
   84526:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   8452a:	2a00      	cmp	r2, #0
   8452c:	81ab      	strh	r3, [r5, #12]
   8452e:	dd65      	ble.n	845fc <__sflush_r+0xe8>
   84530:	6aae      	ldr	r6, [r5, #40]	; 0x28
   84532:	2e00      	cmp	r6, #0
   84534:	d04b      	beq.n	845ce <__sflush_r+0xba>
   84536:	b29b      	uxth	r3, r3
   84538:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
   8453c:	2100      	movs	r1, #0
   8453e:	b292      	uxth	r2, r2
   84540:	f8d8 4000 	ldr.w	r4, [r8]
   84544:	f8c8 1000 	str.w	r1, [r8]
   84548:	2a00      	cmp	r2, #0
   8454a:	d05b      	beq.n	84604 <__sflush_r+0xf0>
   8454c:	6d2a      	ldr	r2, [r5, #80]	; 0x50
   8454e:	075f      	lsls	r7, r3, #29
   84550:	d505      	bpl.n	8455e <__sflush_r+0x4a>
   84552:	6869      	ldr	r1, [r5, #4]
   84554:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   84556:	1a52      	subs	r2, r2, r1
   84558:	b10b      	cbz	r3, 8455e <__sflush_r+0x4a>
   8455a:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   8455c:	1ad2      	subs	r2, r2, r3
   8455e:	4640      	mov	r0, r8
   84560:	69e9      	ldr	r1, [r5, #28]
   84562:	2300      	movs	r3, #0
   84564:	47b0      	blx	r6
   84566:	1c46      	adds	r6, r0, #1
   84568:	d056      	beq.n	84618 <__sflush_r+0x104>
   8456a:	89ab      	ldrh	r3, [r5, #12]
   8456c:	692a      	ldr	r2, [r5, #16]
   8456e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   84572:	b29b      	uxth	r3, r3
   84574:	2100      	movs	r1, #0
   84576:	602a      	str	r2, [r5, #0]
   84578:	04da      	lsls	r2, r3, #19
   8457a:	81ab      	strh	r3, [r5, #12]
   8457c:	6069      	str	r1, [r5, #4]
   8457e:	d43b      	bmi.n	845f8 <__sflush_r+0xe4>
   84580:	6b29      	ldr	r1, [r5, #48]	; 0x30
   84582:	f8c8 4000 	str.w	r4, [r8]
   84586:	b311      	cbz	r1, 845ce <__sflush_r+0xba>
   84588:	f105 0340 	add.w	r3, r5, #64	; 0x40
   8458c:	4299      	cmp	r1, r3
   8458e:	d002      	beq.n	84596 <__sflush_r+0x82>
   84590:	4640      	mov	r0, r8
   84592:	f000 f9cf 	bl	84934 <_free_r>
   84596:	2000      	movs	r0, #0
   84598:	6328      	str	r0, [r5, #48]	; 0x30
   8459a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8459e:	692e      	ldr	r6, [r5, #16]
   845a0:	b1ae      	cbz	r6, 845ce <__sflush_r+0xba>
   845a2:	0791      	lsls	r1, r2, #30
   845a4:	682c      	ldr	r4, [r5, #0]
   845a6:	bf0c      	ite	eq
   845a8:	696b      	ldreq	r3, [r5, #20]
   845aa:	2300      	movne	r3, #0
   845ac:	602e      	str	r6, [r5, #0]
   845ae:	1ba4      	subs	r4, r4, r6
   845b0:	60ab      	str	r3, [r5, #8]
   845b2:	e00a      	b.n	845ca <__sflush_r+0xb6>
   845b4:	4632      	mov	r2, r6
   845b6:	4623      	mov	r3, r4
   845b8:	6a6f      	ldr	r7, [r5, #36]	; 0x24
   845ba:	4640      	mov	r0, r8
   845bc:	69e9      	ldr	r1, [r5, #28]
   845be:	47b8      	blx	r7
   845c0:	2800      	cmp	r0, #0
   845c2:	eba4 0400 	sub.w	r4, r4, r0
   845c6:	4406      	add	r6, r0
   845c8:	dd04      	ble.n	845d4 <__sflush_r+0xc0>
   845ca:	2c00      	cmp	r4, #0
   845cc:	dcf2      	bgt.n	845b4 <__sflush_r+0xa0>
   845ce:	2000      	movs	r0, #0
   845d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   845d4:	89ab      	ldrh	r3, [r5, #12]
   845d6:	f04f 30ff 	mov.w	r0, #4294967295
   845da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   845de:	81ab      	strh	r3, [r5, #12]
   845e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   845e4:	89ab      	ldrh	r3, [r5, #12]
   845e6:	692a      	ldr	r2, [r5, #16]
   845e8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   845ec:	b29b      	uxth	r3, r3
   845ee:	81ab      	strh	r3, [r5, #12]
   845f0:	04db      	lsls	r3, r3, #19
   845f2:	6069      	str	r1, [r5, #4]
   845f4:	602a      	str	r2, [r5, #0]
   845f6:	d5c3      	bpl.n	84580 <__sflush_r+0x6c>
   845f8:	6528      	str	r0, [r5, #80]	; 0x50
   845fa:	e7c1      	b.n	84580 <__sflush_r+0x6c>
   845fc:	6bea      	ldr	r2, [r5, #60]	; 0x3c
   845fe:	2a00      	cmp	r2, #0
   84600:	dc96      	bgt.n	84530 <__sflush_r+0x1c>
   84602:	e7e4      	b.n	845ce <__sflush_r+0xba>
   84604:	2301      	movs	r3, #1
   84606:	4640      	mov	r0, r8
   84608:	69e9      	ldr	r1, [r5, #28]
   8460a:	47b0      	blx	r6
   8460c:	1c43      	adds	r3, r0, #1
   8460e:	4602      	mov	r2, r0
   84610:	d019      	beq.n	84646 <__sflush_r+0x132>
   84612:	89ab      	ldrh	r3, [r5, #12]
   84614:	6aae      	ldr	r6, [r5, #40]	; 0x28
   84616:	e79a      	b.n	8454e <__sflush_r+0x3a>
   84618:	f8d8 1000 	ldr.w	r1, [r8]
   8461c:	2900      	cmp	r1, #0
   8461e:	d0e1      	beq.n	845e4 <__sflush_r+0xd0>
   84620:	291d      	cmp	r1, #29
   84622:	d007      	beq.n	84634 <__sflush_r+0x120>
   84624:	2916      	cmp	r1, #22
   84626:	d005      	beq.n	84634 <__sflush_r+0x120>
   84628:	89ab      	ldrh	r3, [r5, #12]
   8462a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8462e:	81ab      	strh	r3, [r5, #12]
   84630:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   84634:	89ab      	ldrh	r3, [r5, #12]
   84636:	6929      	ldr	r1, [r5, #16]
   84638:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   8463c:	2200      	movs	r2, #0
   8463e:	81ab      	strh	r3, [r5, #12]
   84640:	e885 0006 	stmia.w	r5, {r1, r2}
   84644:	e79c      	b.n	84580 <__sflush_r+0x6c>
   84646:	f8d8 3000 	ldr.w	r3, [r8]
   8464a:	2b00      	cmp	r3, #0
   8464c:	d0e1      	beq.n	84612 <__sflush_r+0xfe>
   8464e:	2b1d      	cmp	r3, #29
   84650:	d001      	beq.n	84656 <__sflush_r+0x142>
   84652:	2b16      	cmp	r3, #22
   84654:	d1be      	bne.n	845d4 <__sflush_r+0xc0>
   84656:	f8c8 4000 	str.w	r4, [r8]
   8465a:	e7b8      	b.n	845ce <__sflush_r+0xba>

0008465c <_fflush_r>:
   8465c:	b510      	push	{r4, lr}
   8465e:	4604      	mov	r4, r0
   84660:	b082      	sub	sp, #8
   84662:	b108      	cbz	r0, 84668 <_fflush_r+0xc>
   84664:	6b83      	ldr	r3, [r0, #56]	; 0x38
   84666:	b153      	cbz	r3, 8467e <_fflush_r+0x22>
   84668:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
   8466c:	b908      	cbnz	r0, 84672 <_fflush_r+0x16>
   8466e:	b002      	add	sp, #8
   84670:	bd10      	pop	{r4, pc}
   84672:	4620      	mov	r0, r4
   84674:	b002      	add	sp, #8
   84676:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   8467a:	f7ff bf4b 	b.w	84514 <__sflush_r>
   8467e:	9101      	str	r1, [sp, #4]
   84680:	f000 f880 	bl	84784 <__sinit>
   84684:	9901      	ldr	r1, [sp, #4]
   84686:	e7ef      	b.n	84668 <_fflush_r+0xc>

00084688 <_cleanup_r>:
   84688:	4901      	ldr	r1, [pc, #4]	; (84690 <_cleanup_r+0x8>)
   8468a:	f000 bbbb 	b.w	84e04 <_fwalk_reent>
   8468e:	bf00      	nop
   84690:	00085c59 	.word	0x00085c59

00084694 <__sinit.part.1>:
   84694:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   84698:	4607      	mov	r7, r0
   8469a:	4835      	ldr	r0, [pc, #212]	; (84770 <__sinit.part.1+0xdc>)
   8469c:	687d      	ldr	r5, [r7, #4]
   8469e:	2400      	movs	r4, #0
   846a0:	f507 723b 	add.w	r2, r7, #748	; 0x2ec
   846a4:	2304      	movs	r3, #4
   846a6:	2103      	movs	r1, #3
   846a8:	63f8      	str	r0, [r7, #60]	; 0x3c
   846aa:	f8c7 12e4 	str.w	r1, [r7, #740]	; 0x2e4
   846ae:	f8c7 22e8 	str.w	r2, [r7, #744]	; 0x2e8
   846b2:	f8c7 42e0 	str.w	r4, [r7, #736]	; 0x2e0
   846b6:	b083      	sub	sp, #12
   846b8:	602c      	str	r4, [r5, #0]
   846ba:	606c      	str	r4, [r5, #4]
   846bc:	60ac      	str	r4, [r5, #8]
   846be:	666c      	str	r4, [r5, #100]	; 0x64
   846c0:	81ec      	strh	r4, [r5, #14]
   846c2:	612c      	str	r4, [r5, #16]
   846c4:	616c      	str	r4, [r5, #20]
   846c6:	61ac      	str	r4, [r5, #24]
   846c8:	81ab      	strh	r3, [r5, #12]
   846ca:	4621      	mov	r1, r4
   846cc:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   846d0:	2208      	movs	r2, #8
   846d2:	f7fe fef7 	bl	834c4 <memset>
   846d6:	f8df b09c 	ldr.w	fp, [pc, #156]	; 84774 <__sinit.part.1+0xe0>
   846da:	68be      	ldr	r6, [r7, #8]
   846dc:	f8df a098 	ldr.w	sl, [pc, #152]	; 84778 <__sinit.part.1+0xe4>
   846e0:	f8df 9098 	ldr.w	r9, [pc, #152]	; 8477c <__sinit.part.1+0xe8>
   846e4:	f8df 8098 	ldr.w	r8, [pc, #152]	; 84780 <__sinit.part.1+0xec>
   846e8:	2301      	movs	r3, #1
   846ea:	2209      	movs	r2, #9
   846ec:	f8c5 b020 	str.w	fp, [r5, #32]
   846f0:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
   846f4:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
   846f8:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
   846fc:	61ed      	str	r5, [r5, #28]
   846fe:	4621      	mov	r1, r4
   84700:	81f3      	strh	r3, [r6, #14]
   84702:	81b2      	strh	r2, [r6, #12]
   84704:	f106 005c 	add.w	r0, r6, #92	; 0x5c
   84708:	6034      	str	r4, [r6, #0]
   8470a:	6074      	str	r4, [r6, #4]
   8470c:	60b4      	str	r4, [r6, #8]
   8470e:	6674      	str	r4, [r6, #100]	; 0x64
   84710:	6134      	str	r4, [r6, #16]
   84712:	6174      	str	r4, [r6, #20]
   84714:	61b4      	str	r4, [r6, #24]
   84716:	2208      	movs	r2, #8
   84718:	9301      	str	r3, [sp, #4]
   8471a:	f7fe fed3 	bl	834c4 <memset>
   8471e:	68fd      	ldr	r5, [r7, #12]
   84720:	2012      	movs	r0, #18
   84722:	2202      	movs	r2, #2
   84724:	61f6      	str	r6, [r6, #28]
   84726:	f8c6 b020 	str.w	fp, [r6, #32]
   8472a:	f8c6 a024 	str.w	sl, [r6, #36]	; 0x24
   8472e:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
   84732:	f8c6 802c 	str.w	r8, [r6, #44]	; 0x2c
   84736:	4621      	mov	r1, r4
   84738:	81a8      	strh	r0, [r5, #12]
   8473a:	81ea      	strh	r2, [r5, #14]
   8473c:	602c      	str	r4, [r5, #0]
   8473e:	606c      	str	r4, [r5, #4]
   84740:	60ac      	str	r4, [r5, #8]
   84742:	666c      	str	r4, [r5, #100]	; 0x64
   84744:	612c      	str	r4, [r5, #16]
   84746:	616c      	str	r4, [r5, #20]
   84748:	61ac      	str	r4, [r5, #24]
   8474a:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   8474e:	2208      	movs	r2, #8
   84750:	f7fe feb8 	bl	834c4 <memset>
   84754:	9b01      	ldr	r3, [sp, #4]
   84756:	61ed      	str	r5, [r5, #28]
   84758:	f8c5 b020 	str.w	fp, [r5, #32]
   8475c:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
   84760:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
   84764:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
   84768:	63bb      	str	r3, [r7, #56]	; 0x38
   8476a:	b003      	add	sp, #12
   8476c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   84770:	00084689 	.word	0x00084689
   84774:	000859cd 	.word	0x000859cd
   84778:	000859f1 	.word	0x000859f1
   8477c:	00085a29 	.word	0x00085a29
   84780:	00085a49 	.word	0x00085a49

00084784 <__sinit>:
   84784:	6b83      	ldr	r3, [r0, #56]	; 0x38
   84786:	b103      	cbz	r3, 8478a <__sinit+0x6>
   84788:	4770      	bx	lr
   8478a:	f7ff bf83 	b.w	84694 <__sinit.part.1>
   8478e:	bf00      	nop

00084790 <__sfp_lock_acquire>:
   84790:	4770      	bx	lr
   84792:	bf00      	nop

00084794 <__sfp_lock_release>:
   84794:	4770      	bx	lr
   84796:	bf00      	nop

00084798 <__libc_fini_array>:
   84798:	b538      	push	{r3, r4, r5, lr}
   8479a:	4b08      	ldr	r3, [pc, #32]	; (847bc <__libc_fini_array+0x24>)
   8479c:	4d08      	ldr	r5, [pc, #32]	; (847c0 <__libc_fini_array+0x28>)
   8479e:	1aed      	subs	r5, r5, r3
   847a0:	10ac      	asrs	r4, r5, #2
   847a2:	bf18      	it	ne
   847a4:	18ed      	addne	r5, r5, r3
   847a6:	d005      	beq.n	847b4 <__libc_fini_array+0x1c>
   847a8:	3c01      	subs	r4, #1
   847aa:	f855 3d04 	ldr.w	r3, [r5, #-4]!
   847ae:	4798      	blx	r3
   847b0:	2c00      	cmp	r4, #0
   847b2:	d1f9      	bne.n	847a8 <__libc_fini_array+0x10>
   847b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   847b8:	f001 be90 	b.w	864dc <_fini>
   847bc:	000864e8 	.word	0x000864e8
   847c0:	000864ec 	.word	0x000864ec

000847c4 <__fputwc>:
   847c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   847c8:	b082      	sub	sp, #8
   847ca:	4607      	mov	r7, r0
   847cc:	460e      	mov	r6, r1
   847ce:	4614      	mov	r4, r2
   847d0:	f000 fb44 	bl	84e5c <__locale_mb_cur_max>
   847d4:	2801      	cmp	r0, #1
   847d6:	d040      	beq.n	8485a <__fputwc+0x96>
   847d8:	4638      	mov	r0, r7
   847da:	a901      	add	r1, sp, #4
   847dc:	4632      	mov	r2, r6
   847de:	f104 035c 	add.w	r3, r4, #92	; 0x5c
   847e2:	f001 f989 	bl	85af8 <_wcrtomb_r>
   847e6:	f1b0 3fff 	cmp.w	r0, #4294967295
   847ea:	4680      	mov	r8, r0
   847ec:	d02e      	beq.n	8484c <__fputwc+0x88>
   847ee:	2800      	cmp	r0, #0
   847f0:	d03b      	beq.n	8486a <__fputwc+0xa6>
   847f2:	f89d 1004 	ldrb.w	r1, [sp, #4]
   847f6:	2500      	movs	r5, #0
   847f8:	e009      	b.n	8480e <__fputwc+0x4a>
   847fa:	6823      	ldr	r3, [r4, #0]
   847fc:	7019      	strb	r1, [r3, #0]
   847fe:	6823      	ldr	r3, [r4, #0]
   84800:	3301      	adds	r3, #1
   84802:	6023      	str	r3, [r4, #0]
   84804:	3501      	adds	r5, #1
   84806:	45a8      	cmp	r8, r5
   84808:	d92f      	bls.n	8486a <__fputwc+0xa6>
   8480a:	ab01      	add	r3, sp, #4
   8480c:	5d59      	ldrb	r1, [r3, r5]
   8480e:	68a3      	ldr	r3, [r4, #8]
   84810:	3b01      	subs	r3, #1
   84812:	2b00      	cmp	r3, #0
   84814:	60a3      	str	r3, [r4, #8]
   84816:	daf0      	bge.n	847fa <__fputwc+0x36>
   84818:	69a2      	ldr	r2, [r4, #24]
   8481a:	4293      	cmp	r3, r2
   8481c:	db06      	blt.n	8482c <__fputwc+0x68>
   8481e:	6823      	ldr	r3, [r4, #0]
   84820:	7019      	strb	r1, [r3, #0]
   84822:	6823      	ldr	r3, [r4, #0]
   84824:	7819      	ldrb	r1, [r3, #0]
   84826:	3301      	adds	r3, #1
   84828:	290a      	cmp	r1, #10
   8482a:	d1ea      	bne.n	84802 <__fputwc+0x3e>
   8482c:	4638      	mov	r0, r7
   8482e:	4622      	mov	r2, r4
   84830:	f001 f90e 	bl	85a50 <__swbuf_r>
   84834:	f1a0 30ff 	sub.w	r0, r0, #4294967295
   84838:	fab0 f080 	clz	r0, r0
   8483c:	0940      	lsrs	r0, r0, #5
   8483e:	2800      	cmp	r0, #0
   84840:	d0e0      	beq.n	84804 <__fputwc+0x40>
   84842:	f04f 30ff 	mov.w	r0, #4294967295
   84846:	b002      	add	sp, #8
   84848:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8484c:	89a3      	ldrh	r3, [r4, #12]
   8484e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   84852:	81a3      	strh	r3, [r4, #12]
   84854:	b002      	add	sp, #8
   84856:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8485a:	1e73      	subs	r3, r6, #1
   8485c:	2bfe      	cmp	r3, #254	; 0xfe
   8485e:	d8bb      	bhi.n	847d8 <__fputwc+0x14>
   84860:	b2f1      	uxtb	r1, r6
   84862:	4680      	mov	r8, r0
   84864:	f88d 1004 	strb.w	r1, [sp, #4]
   84868:	e7c5      	b.n	847f6 <__fputwc+0x32>
   8486a:	4630      	mov	r0, r6
   8486c:	b002      	add	sp, #8
   8486e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   84872:	bf00      	nop

00084874 <_fputwc_r>:
   84874:	8993      	ldrh	r3, [r2, #12]
   84876:	f413 5f00 	tst.w	r3, #8192	; 0x2000
   8487a:	d10b      	bne.n	84894 <_fputwc_r+0x20>
   8487c:	b410      	push	{r4}
   8487e:	6e54      	ldr	r4, [r2, #100]	; 0x64
   84880:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   84884:	f444 5400 	orr.w	r4, r4, #8192	; 0x2000
   84888:	6654      	str	r4, [r2, #100]	; 0x64
   8488a:	8193      	strh	r3, [r2, #12]
   8488c:	f85d 4b04 	ldr.w	r4, [sp], #4
   84890:	f7ff bf98 	b.w	847c4 <__fputwc>
   84894:	f7ff bf96 	b.w	847c4 <__fputwc>

00084898 <_malloc_trim_r>:
   84898:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8489a:	460c      	mov	r4, r1
   8489c:	4f22      	ldr	r7, [pc, #136]	; (84928 <_malloc_trim_r+0x90>)
   8489e:	4606      	mov	r6, r0
   848a0:	f000 fe8e 	bl	855c0 <__malloc_lock>
   848a4:	68bb      	ldr	r3, [r7, #8]
   848a6:	685d      	ldr	r5, [r3, #4]
   848a8:	f025 0503 	bic.w	r5, r5, #3
   848ac:	1b29      	subs	r1, r5, r4
   848ae:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
   848b2:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
   848b6:	f021 010f 	bic.w	r1, r1, #15
   848ba:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
   848be:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
   848c2:	db07      	blt.n	848d4 <_malloc_trim_r+0x3c>
   848c4:	4630      	mov	r0, r6
   848c6:	2100      	movs	r1, #0
   848c8:	f001 f86e 	bl	859a8 <_sbrk_r>
   848cc:	68bb      	ldr	r3, [r7, #8]
   848ce:	442b      	add	r3, r5
   848d0:	4298      	cmp	r0, r3
   848d2:	d004      	beq.n	848de <_malloc_trim_r+0x46>
   848d4:	4630      	mov	r0, r6
   848d6:	f000 fe75 	bl	855c4 <__malloc_unlock>
   848da:	2000      	movs	r0, #0
   848dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   848de:	4630      	mov	r0, r6
   848e0:	4261      	negs	r1, r4
   848e2:	f001 f861 	bl	859a8 <_sbrk_r>
   848e6:	3001      	adds	r0, #1
   848e8:	d00d      	beq.n	84906 <_malloc_trim_r+0x6e>
   848ea:	4b10      	ldr	r3, [pc, #64]	; (8492c <_malloc_trim_r+0x94>)
   848ec:	68ba      	ldr	r2, [r7, #8]
   848ee:	6819      	ldr	r1, [r3, #0]
   848f0:	1b2d      	subs	r5, r5, r4
   848f2:	f045 0501 	orr.w	r5, r5, #1
   848f6:	4630      	mov	r0, r6
   848f8:	1b09      	subs	r1, r1, r4
   848fa:	6055      	str	r5, [r2, #4]
   848fc:	6019      	str	r1, [r3, #0]
   848fe:	f000 fe61 	bl	855c4 <__malloc_unlock>
   84902:	2001      	movs	r0, #1
   84904:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   84906:	4630      	mov	r0, r6
   84908:	2100      	movs	r1, #0
   8490a:	f001 f84d 	bl	859a8 <_sbrk_r>
   8490e:	68ba      	ldr	r2, [r7, #8]
   84910:	1a83      	subs	r3, r0, r2
   84912:	2b0f      	cmp	r3, #15
   84914:	ddde      	ble.n	848d4 <_malloc_trim_r+0x3c>
   84916:	4c06      	ldr	r4, [pc, #24]	; (84930 <_malloc_trim_r+0x98>)
   84918:	4904      	ldr	r1, [pc, #16]	; (8492c <_malloc_trim_r+0x94>)
   8491a:	6824      	ldr	r4, [r4, #0]
   8491c:	f043 0301 	orr.w	r3, r3, #1
   84920:	1b00      	subs	r0, r0, r4
   84922:	6053      	str	r3, [r2, #4]
   84924:	6008      	str	r0, [r1, #0]
   84926:	e7d5      	b.n	848d4 <_malloc_trim_r+0x3c>
   84928:	20070590 	.word	0x20070590
   8492c:	20078c28 	.word	0x20078c28
   84930:	2007099c 	.word	0x2007099c

00084934 <_free_r>:
   84934:	2900      	cmp	r1, #0
   84936:	d04e      	beq.n	849d6 <_free_r+0xa2>
   84938:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8493c:	460c      	mov	r4, r1
   8493e:	4680      	mov	r8, r0
   84940:	f000 fe3e 	bl	855c0 <__malloc_lock>
   84944:	f854 7c04 	ldr.w	r7, [r4, #-4]
   84948:	4962      	ldr	r1, [pc, #392]	; (84ad4 <_free_r+0x1a0>)
   8494a:	f1a4 0508 	sub.w	r5, r4, #8
   8494e:	f027 0201 	bic.w	r2, r7, #1
   84952:	18ab      	adds	r3, r5, r2
   84954:	688e      	ldr	r6, [r1, #8]
   84956:	6858      	ldr	r0, [r3, #4]
   84958:	429e      	cmp	r6, r3
   8495a:	f020 0003 	bic.w	r0, r0, #3
   8495e:	d05a      	beq.n	84a16 <_free_r+0xe2>
   84960:	07fe      	lsls	r6, r7, #31
   84962:	6058      	str	r0, [r3, #4]
   84964:	d40b      	bmi.n	8497e <_free_r+0x4a>
   84966:	f854 7c08 	ldr.w	r7, [r4, #-8]
   8496a:	f101 0e08 	add.w	lr, r1, #8
   8496e:	1bed      	subs	r5, r5, r7
   84970:	68ac      	ldr	r4, [r5, #8]
   84972:	443a      	add	r2, r7
   84974:	4574      	cmp	r4, lr
   84976:	d067      	beq.n	84a48 <_free_r+0x114>
   84978:	68ef      	ldr	r7, [r5, #12]
   8497a:	60e7      	str	r7, [r4, #12]
   8497c:	60bc      	str	r4, [r7, #8]
   8497e:	181c      	adds	r4, r3, r0
   84980:	6864      	ldr	r4, [r4, #4]
   84982:	07e4      	lsls	r4, r4, #31
   84984:	d40c      	bmi.n	849a0 <_free_r+0x6c>
   84986:	4f54      	ldr	r7, [pc, #336]	; (84ad8 <_free_r+0x1a4>)
   84988:	689c      	ldr	r4, [r3, #8]
   8498a:	4402      	add	r2, r0
   8498c:	42bc      	cmp	r4, r7
   8498e:	d07c      	beq.n	84a8a <_free_r+0x156>
   84990:	68d8      	ldr	r0, [r3, #12]
   84992:	f042 0301 	orr.w	r3, r2, #1
   84996:	60e0      	str	r0, [r4, #12]
   84998:	6084      	str	r4, [r0, #8]
   8499a:	606b      	str	r3, [r5, #4]
   8499c:	50aa      	str	r2, [r5, r2]
   8499e:	e003      	b.n	849a8 <_free_r+0x74>
   849a0:	f042 0301 	orr.w	r3, r2, #1
   849a4:	606b      	str	r3, [r5, #4]
   849a6:	50aa      	str	r2, [r5, r2]
   849a8:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   849ac:	d214      	bcs.n	849d8 <_free_r+0xa4>
   849ae:	08d2      	lsrs	r2, r2, #3
   849b0:	eb01 03c2 	add.w	r3, r1, r2, lsl #3
   849b4:	2401      	movs	r4, #1
   849b6:	6848      	ldr	r0, [r1, #4]
   849b8:	1092      	asrs	r2, r2, #2
   849ba:	fa04 f202 	lsl.w	r2, r4, r2
   849be:	689c      	ldr	r4, [r3, #8]
   849c0:	4310      	orrs	r0, r2
   849c2:	60ac      	str	r4, [r5, #8]
   849c4:	60eb      	str	r3, [r5, #12]
   849c6:	6048      	str	r0, [r1, #4]
   849c8:	609d      	str	r5, [r3, #8]
   849ca:	60e5      	str	r5, [r4, #12]
   849cc:	4640      	mov	r0, r8
   849ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   849d2:	f000 bdf7 	b.w	855c4 <__malloc_unlock>
   849d6:	4770      	bx	lr
   849d8:	0a53      	lsrs	r3, r2, #9
   849da:	2b04      	cmp	r3, #4
   849dc:	d847      	bhi.n	84a6e <_free_r+0x13a>
   849de:	0993      	lsrs	r3, r2, #6
   849e0:	f103 0438 	add.w	r4, r3, #56	; 0x38
   849e4:	0060      	lsls	r0, r4, #1
   849e6:	eb01 0080 	add.w	r0, r1, r0, lsl #2
   849ea:	6883      	ldr	r3, [r0, #8]
   849ec:	4939      	ldr	r1, [pc, #228]	; (84ad4 <_free_r+0x1a0>)
   849ee:	4283      	cmp	r3, r0
   849f0:	d043      	beq.n	84a7a <_free_r+0x146>
   849f2:	6859      	ldr	r1, [r3, #4]
   849f4:	f021 0103 	bic.w	r1, r1, #3
   849f8:	4291      	cmp	r1, r2
   849fa:	d902      	bls.n	84a02 <_free_r+0xce>
   849fc:	689b      	ldr	r3, [r3, #8]
   849fe:	4298      	cmp	r0, r3
   84a00:	d1f7      	bne.n	849f2 <_free_r+0xbe>
   84a02:	68da      	ldr	r2, [r3, #12]
   84a04:	60ea      	str	r2, [r5, #12]
   84a06:	60ab      	str	r3, [r5, #8]
   84a08:	4640      	mov	r0, r8
   84a0a:	6095      	str	r5, [r2, #8]
   84a0c:	60dd      	str	r5, [r3, #12]
   84a0e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   84a12:	f000 bdd7 	b.w	855c4 <__malloc_unlock>
   84a16:	07ff      	lsls	r7, r7, #31
   84a18:	4402      	add	r2, r0
   84a1a:	d407      	bmi.n	84a2c <_free_r+0xf8>
   84a1c:	f854 4c08 	ldr.w	r4, [r4, #-8]
   84a20:	1b2d      	subs	r5, r5, r4
   84a22:	68eb      	ldr	r3, [r5, #12]
   84a24:	68a8      	ldr	r0, [r5, #8]
   84a26:	4422      	add	r2, r4
   84a28:	60c3      	str	r3, [r0, #12]
   84a2a:	6098      	str	r0, [r3, #8]
   84a2c:	4b2b      	ldr	r3, [pc, #172]	; (84adc <_free_r+0x1a8>)
   84a2e:	f042 0001 	orr.w	r0, r2, #1
   84a32:	681b      	ldr	r3, [r3, #0]
   84a34:	6068      	str	r0, [r5, #4]
   84a36:	429a      	cmp	r2, r3
   84a38:	608d      	str	r5, [r1, #8]
   84a3a:	d3c7      	bcc.n	849cc <_free_r+0x98>
   84a3c:	4b28      	ldr	r3, [pc, #160]	; (84ae0 <_free_r+0x1ac>)
   84a3e:	4640      	mov	r0, r8
   84a40:	6819      	ldr	r1, [r3, #0]
   84a42:	f7ff ff29 	bl	84898 <_malloc_trim_r>
   84a46:	e7c1      	b.n	849cc <_free_r+0x98>
   84a48:	1819      	adds	r1, r3, r0
   84a4a:	6849      	ldr	r1, [r1, #4]
   84a4c:	07c9      	lsls	r1, r1, #31
   84a4e:	d409      	bmi.n	84a64 <_free_r+0x130>
   84a50:	68d9      	ldr	r1, [r3, #12]
   84a52:	4402      	add	r2, r0
   84a54:	689b      	ldr	r3, [r3, #8]
   84a56:	f042 0001 	orr.w	r0, r2, #1
   84a5a:	60d9      	str	r1, [r3, #12]
   84a5c:	608b      	str	r3, [r1, #8]
   84a5e:	6068      	str	r0, [r5, #4]
   84a60:	50aa      	str	r2, [r5, r2]
   84a62:	e7b3      	b.n	849cc <_free_r+0x98>
   84a64:	f042 0301 	orr.w	r3, r2, #1
   84a68:	606b      	str	r3, [r5, #4]
   84a6a:	50aa      	str	r2, [r5, r2]
   84a6c:	e7ae      	b.n	849cc <_free_r+0x98>
   84a6e:	2b14      	cmp	r3, #20
   84a70:	d814      	bhi.n	84a9c <_free_r+0x168>
   84a72:	f103 045b 	add.w	r4, r3, #91	; 0x5b
   84a76:	0060      	lsls	r0, r4, #1
   84a78:	e7b5      	b.n	849e6 <_free_r+0xb2>
   84a7a:	684a      	ldr	r2, [r1, #4]
   84a7c:	10a4      	asrs	r4, r4, #2
   84a7e:	2001      	movs	r0, #1
   84a80:	40a0      	lsls	r0, r4
   84a82:	4302      	orrs	r2, r0
   84a84:	604a      	str	r2, [r1, #4]
   84a86:	461a      	mov	r2, r3
   84a88:	e7bc      	b.n	84a04 <_free_r+0xd0>
   84a8a:	f042 0301 	orr.w	r3, r2, #1
   84a8e:	614d      	str	r5, [r1, #20]
   84a90:	610d      	str	r5, [r1, #16]
   84a92:	60ec      	str	r4, [r5, #12]
   84a94:	60ac      	str	r4, [r5, #8]
   84a96:	606b      	str	r3, [r5, #4]
   84a98:	50aa      	str	r2, [r5, r2]
   84a9a:	e797      	b.n	849cc <_free_r+0x98>
   84a9c:	2b54      	cmp	r3, #84	; 0x54
   84a9e:	d804      	bhi.n	84aaa <_free_r+0x176>
   84aa0:	0b13      	lsrs	r3, r2, #12
   84aa2:	f103 046e 	add.w	r4, r3, #110	; 0x6e
   84aa6:	0060      	lsls	r0, r4, #1
   84aa8:	e79d      	b.n	849e6 <_free_r+0xb2>
   84aaa:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   84aae:	d804      	bhi.n	84aba <_free_r+0x186>
   84ab0:	0bd3      	lsrs	r3, r2, #15
   84ab2:	f103 0477 	add.w	r4, r3, #119	; 0x77
   84ab6:	0060      	lsls	r0, r4, #1
   84ab8:	e795      	b.n	849e6 <_free_r+0xb2>
   84aba:	f240 5054 	movw	r0, #1364	; 0x554
   84abe:	4283      	cmp	r3, r0
   84ac0:	d804      	bhi.n	84acc <_free_r+0x198>
   84ac2:	0c93      	lsrs	r3, r2, #18
   84ac4:	f103 047c 	add.w	r4, r3, #124	; 0x7c
   84ac8:	0060      	lsls	r0, r4, #1
   84aca:	e78c      	b.n	849e6 <_free_r+0xb2>
   84acc:	20fc      	movs	r0, #252	; 0xfc
   84ace:	247e      	movs	r4, #126	; 0x7e
   84ad0:	e789      	b.n	849e6 <_free_r+0xb2>
   84ad2:	bf00      	nop
   84ad4:	20070590 	.word	0x20070590
   84ad8:	20070598 	.word	0x20070598
   84adc:	20070998 	.word	0x20070998
   84ae0:	20078c24 	.word	0x20078c24

00084ae4 <__sfvwrite_r>:
   84ae4:	6893      	ldr	r3, [r2, #8]
   84ae6:	2b00      	cmp	r3, #0
   84ae8:	f000 80b1 	beq.w	84c4e <__sfvwrite_r+0x16a>
   84aec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   84af0:	f8b1 e00c 	ldrh.w	lr, [r1, #12]
   84af4:	b083      	sub	sp, #12
   84af6:	f01e 0f08 	tst.w	lr, #8
   84afa:	460c      	mov	r4, r1
   84afc:	4681      	mov	r9, r0
   84afe:	4616      	mov	r6, r2
   84b00:	d028      	beq.n	84b54 <__sfvwrite_r+0x70>
   84b02:	690b      	ldr	r3, [r1, #16]
   84b04:	b333      	cbz	r3, 84b54 <__sfvwrite_r+0x70>
   84b06:	f00e 0802 	and.w	r8, lr, #2
   84b0a:	fa1f f088 	uxth.w	r0, r8
   84b0e:	6835      	ldr	r5, [r6, #0]
   84b10:	b380      	cbz	r0, 84b74 <__sfvwrite_r+0x90>
   84b12:	f04f 0b00 	mov.w	fp, #0
   84b16:	46d8      	mov	r8, fp
   84b18:	f8df a2e4 	ldr.w	sl, [pc, #740]	; 84e00 <__sfvwrite_r+0x31c>
   84b1c:	f1b8 0f00 	cmp.w	r8, #0
   84b20:	f000 808f 	beq.w	84c42 <__sfvwrite_r+0x15e>
   84b24:	45d0      	cmp	r8, sl
   84b26:	4643      	mov	r3, r8
   84b28:	4648      	mov	r0, r9
   84b2a:	bf28      	it	cs
   84b2c:	4653      	movcs	r3, sl
   84b2e:	69e1      	ldr	r1, [r4, #28]
   84b30:	465a      	mov	r2, fp
   84b32:	6a67      	ldr	r7, [r4, #36]	; 0x24
   84b34:	47b8      	blx	r7
   84b36:	2800      	cmp	r0, #0
   84b38:	f340 80a8 	ble.w	84c8c <__sfvwrite_r+0x1a8>
   84b3c:	68b3      	ldr	r3, [r6, #8]
   84b3e:	4483      	add	fp, r0
   84b40:	1a1b      	subs	r3, r3, r0
   84b42:	ebc0 0808 	rsb	r8, r0, r8
   84b46:	60b3      	str	r3, [r6, #8]
   84b48:	2b00      	cmp	r3, #0
   84b4a:	d1e7      	bne.n	84b1c <__sfvwrite_r+0x38>
   84b4c:	2000      	movs	r0, #0
   84b4e:	b003      	add	sp, #12
   84b50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   84b54:	4648      	mov	r0, r9
   84b56:	4621      	mov	r1, r4
   84b58:	f7ff fc6a 	bl	84430 <__swsetup_r>
   84b5c:	2800      	cmp	r0, #0
   84b5e:	f040 8146 	bne.w	84dee <__sfvwrite_r+0x30a>
   84b62:	f8b4 e00c 	ldrh.w	lr, [r4, #12]
   84b66:	6835      	ldr	r5, [r6, #0]
   84b68:	f00e 0802 	and.w	r8, lr, #2
   84b6c:	fa1f f088 	uxth.w	r0, r8
   84b70:	2800      	cmp	r0, #0
   84b72:	d1ce      	bne.n	84b12 <__sfvwrite_r+0x2e>
   84b74:	f01e 0b01 	ands.w	fp, lr, #1
   84b78:	f040 8091 	bne.w	84c9e <__sfvwrite_r+0x1ba>
   84b7c:	46d8      	mov	r8, fp
   84b7e:	f1b8 0f00 	cmp.w	r8, #0
   84b82:	d058      	beq.n	84c36 <__sfvwrite_r+0x152>
   84b84:	f41e 7f00 	tst.w	lr, #512	; 0x200
   84b88:	68a7      	ldr	r7, [r4, #8]
   84b8a:	d062      	beq.n	84c52 <__sfvwrite_r+0x16e>
   84b8c:	45b8      	cmp	r8, r7
   84b8e:	46ba      	mov	sl, r7
   84b90:	f0c0 80c2 	bcc.w	84d18 <__sfvwrite_r+0x234>
   84b94:	f41e 6f90 	tst.w	lr, #1152	; 0x480
   84b98:	f000 80c0 	beq.w	84d1c <__sfvwrite_r+0x238>
   84b9c:	6967      	ldr	r7, [r4, #20]
   84b9e:	6921      	ldr	r1, [r4, #16]
   84ba0:	6823      	ldr	r3, [r4, #0]
   84ba2:	eb07 0747 	add.w	r7, r7, r7, lsl #1
   84ba6:	1a5b      	subs	r3, r3, r1
   84ba8:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
   84bac:	1c58      	adds	r0, r3, #1
   84bae:	107f      	asrs	r7, r7, #1
   84bb0:	4440      	add	r0, r8
   84bb2:	4287      	cmp	r7, r0
   84bb4:	463a      	mov	r2, r7
   84bb6:	bf3c      	itt	cc
   84bb8:	4607      	movcc	r7, r0
   84bba:	463a      	movcc	r2, r7
   84bbc:	f41e 6f80 	tst.w	lr, #1024	; 0x400
   84bc0:	9300      	str	r3, [sp, #0]
   84bc2:	f000 80fb 	beq.w	84dbc <__sfvwrite_r+0x2d8>
   84bc6:	4611      	mov	r1, r2
   84bc8:	4648      	mov	r0, r9
   84bca:	f000 f9c5 	bl	84f58 <_malloc_r>
   84bce:	9b00      	ldr	r3, [sp, #0]
   84bd0:	4682      	mov	sl, r0
   84bd2:	2800      	cmp	r0, #0
   84bd4:	f000 810e 	beq.w	84df4 <__sfvwrite_r+0x310>
   84bd8:	461a      	mov	r2, r3
   84bda:	6921      	ldr	r1, [r4, #16]
   84bdc:	9300      	str	r3, [sp, #0]
   84bde:	f7fe fbfb 	bl	833d8 <memcpy>
   84be2:	89a2      	ldrh	r2, [r4, #12]
   84be4:	9b00      	ldr	r3, [sp, #0]
   84be6:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   84bea:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   84bee:	81a2      	strh	r2, [r4, #12]
   84bf0:	eb0a 0003 	add.w	r0, sl, r3
   84bf4:	f8c4 a010 	str.w	sl, [r4, #16]
   84bf8:	1afb      	subs	r3, r7, r3
   84bfa:	6167      	str	r7, [r4, #20]
   84bfc:	46c2      	mov	sl, r8
   84bfe:	4647      	mov	r7, r8
   84c00:	6020      	str	r0, [r4, #0]
   84c02:	60a3      	str	r3, [r4, #8]
   84c04:	4652      	mov	r2, sl
   84c06:	4659      	mov	r1, fp
   84c08:	f000 fc76 	bl	854f8 <memmove>
   84c0c:	68a0      	ldr	r0, [r4, #8]
   84c0e:	6822      	ldr	r2, [r4, #0]
   84c10:	1bc0      	subs	r0, r0, r7
   84c12:	60a0      	str	r0, [r4, #8]
   84c14:	4640      	mov	r0, r8
   84c16:	eb02 030a 	add.w	r3, r2, sl
   84c1a:	6023      	str	r3, [r4, #0]
   84c1c:	68b3      	ldr	r3, [r6, #8]
   84c1e:	4483      	add	fp, r0
   84c20:	1a1b      	subs	r3, r3, r0
   84c22:	ebc0 0808 	rsb	r8, r0, r8
   84c26:	60b3      	str	r3, [r6, #8]
   84c28:	2b00      	cmp	r3, #0
   84c2a:	d08f      	beq.n	84b4c <__sfvwrite_r+0x68>
   84c2c:	f8b4 e00c 	ldrh.w	lr, [r4, #12]
   84c30:	f1b8 0f00 	cmp.w	r8, #0
   84c34:	d1a6      	bne.n	84b84 <__sfvwrite_r+0xa0>
   84c36:	f8d5 b000 	ldr.w	fp, [r5]
   84c3a:	f8d5 8004 	ldr.w	r8, [r5, #4]
   84c3e:	3508      	adds	r5, #8
   84c40:	e79d      	b.n	84b7e <__sfvwrite_r+0x9a>
   84c42:	f8d5 b000 	ldr.w	fp, [r5]
   84c46:	f8d5 8004 	ldr.w	r8, [r5, #4]
   84c4a:	3508      	adds	r5, #8
   84c4c:	e766      	b.n	84b1c <__sfvwrite_r+0x38>
   84c4e:	2000      	movs	r0, #0
   84c50:	4770      	bx	lr
   84c52:	6820      	ldr	r0, [r4, #0]
   84c54:	6923      	ldr	r3, [r4, #16]
   84c56:	4298      	cmp	r0, r3
   84c58:	d803      	bhi.n	84c62 <__sfvwrite_r+0x17e>
   84c5a:	6962      	ldr	r2, [r4, #20]
   84c5c:	4590      	cmp	r8, r2
   84c5e:	f080 8085 	bcs.w	84d6c <__sfvwrite_r+0x288>
   84c62:	4547      	cmp	r7, r8
   84c64:	bf28      	it	cs
   84c66:	4647      	movcs	r7, r8
   84c68:	4659      	mov	r1, fp
   84c6a:	463a      	mov	r2, r7
   84c6c:	f000 fc44 	bl	854f8 <memmove>
   84c70:	68a3      	ldr	r3, [r4, #8]
   84c72:	6822      	ldr	r2, [r4, #0]
   84c74:	1bdb      	subs	r3, r3, r7
   84c76:	443a      	add	r2, r7
   84c78:	60a3      	str	r3, [r4, #8]
   84c7a:	6022      	str	r2, [r4, #0]
   84c7c:	2b00      	cmp	r3, #0
   84c7e:	d149      	bne.n	84d14 <__sfvwrite_r+0x230>
   84c80:	4648      	mov	r0, r9
   84c82:	4621      	mov	r1, r4
   84c84:	f7ff fcea 	bl	8465c <_fflush_r>
   84c88:	2800      	cmp	r0, #0
   84c8a:	d043      	beq.n	84d14 <__sfvwrite_r+0x230>
   84c8c:	89a3      	ldrh	r3, [r4, #12]
   84c8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   84c92:	f04f 30ff 	mov.w	r0, #4294967295
   84c96:	81a3      	strh	r3, [r4, #12]
   84c98:	b003      	add	sp, #12
   84c9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   84c9e:	4680      	mov	r8, r0
   84ca0:	4683      	mov	fp, r0
   84ca2:	4682      	mov	sl, r0
   84ca4:	9000      	str	r0, [sp, #0]
   84ca6:	f1ba 0f00 	cmp.w	sl, #0
   84caa:	d02b      	beq.n	84d04 <__sfvwrite_r+0x220>
   84cac:	9b00      	ldr	r3, [sp, #0]
   84cae:	2b00      	cmp	r3, #0
   84cb0:	d04f      	beq.n	84d52 <__sfvwrite_r+0x26e>
   84cb2:	45d0      	cmp	r8, sl
   84cb4:	4643      	mov	r3, r8
   84cb6:	bf28      	it	cs
   84cb8:	4653      	movcs	r3, sl
   84cba:	6820      	ldr	r0, [r4, #0]
   84cbc:	6921      	ldr	r1, [r4, #16]
   84cbe:	461f      	mov	r7, r3
   84cc0:	4288      	cmp	r0, r1
   84cc2:	f8d4 e008 	ldr.w	lr, [r4, #8]
   84cc6:	6962      	ldr	r2, [r4, #20]
   84cc8:	d903      	bls.n	84cd2 <__sfvwrite_r+0x1ee>
   84cca:	eb0e 0c02 	add.w	ip, lr, r2
   84cce:	4563      	cmp	r3, ip
   84cd0:	dc5e      	bgt.n	84d90 <__sfvwrite_r+0x2ac>
   84cd2:	4293      	cmp	r3, r2
   84cd4:	db24      	blt.n	84d20 <__sfvwrite_r+0x23c>
   84cd6:	4613      	mov	r3, r2
   84cd8:	6a67      	ldr	r7, [r4, #36]	; 0x24
   84cda:	4648      	mov	r0, r9
   84cdc:	69e1      	ldr	r1, [r4, #28]
   84cde:	465a      	mov	r2, fp
   84ce0:	47b8      	blx	r7
   84ce2:	1e07      	subs	r7, r0, #0
   84ce4:	ddd2      	ble.n	84c8c <__sfvwrite_r+0x1a8>
   84ce6:	ebb8 0807 	subs.w	r8, r8, r7
   84cea:	d029      	beq.n	84d40 <__sfvwrite_r+0x25c>
   84cec:	68b3      	ldr	r3, [r6, #8]
   84cee:	44bb      	add	fp, r7
   84cf0:	1bdb      	subs	r3, r3, r7
   84cf2:	ebc7 0a0a 	rsb	sl, r7, sl
   84cf6:	60b3      	str	r3, [r6, #8]
   84cf8:	2b00      	cmp	r3, #0
   84cfa:	f43f af27 	beq.w	84b4c <__sfvwrite_r+0x68>
   84cfe:	f1ba 0f00 	cmp.w	sl, #0
   84d02:	d1d3      	bne.n	84cac <__sfvwrite_r+0x1c8>
   84d04:	2300      	movs	r3, #0
   84d06:	f8d5 b000 	ldr.w	fp, [r5]
   84d0a:	f8d5 a004 	ldr.w	sl, [r5, #4]
   84d0e:	9300      	str	r3, [sp, #0]
   84d10:	3508      	adds	r5, #8
   84d12:	e7c8      	b.n	84ca6 <__sfvwrite_r+0x1c2>
   84d14:	4638      	mov	r0, r7
   84d16:	e781      	b.n	84c1c <__sfvwrite_r+0x138>
   84d18:	4647      	mov	r7, r8
   84d1a:	46c2      	mov	sl, r8
   84d1c:	6820      	ldr	r0, [r4, #0]
   84d1e:	e771      	b.n	84c04 <__sfvwrite_r+0x120>
   84d20:	461a      	mov	r2, r3
   84d22:	4659      	mov	r1, fp
   84d24:	9301      	str	r3, [sp, #4]
   84d26:	f000 fbe7 	bl	854f8 <memmove>
   84d2a:	68a2      	ldr	r2, [r4, #8]
   84d2c:	6821      	ldr	r1, [r4, #0]
   84d2e:	9b01      	ldr	r3, [sp, #4]
   84d30:	ebb8 0807 	subs.w	r8, r8, r7
   84d34:	eba2 0203 	sub.w	r2, r2, r3
   84d38:	440b      	add	r3, r1
   84d3a:	60a2      	str	r2, [r4, #8]
   84d3c:	6023      	str	r3, [r4, #0]
   84d3e:	d1d5      	bne.n	84cec <__sfvwrite_r+0x208>
   84d40:	4648      	mov	r0, r9
   84d42:	4621      	mov	r1, r4
   84d44:	f7ff fc8a 	bl	8465c <_fflush_r>
   84d48:	2800      	cmp	r0, #0
   84d4a:	d19f      	bne.n	84c8c <__sfvwrite_r+0x1a8>
   84d4c:	f8cd 8000 	str.w	r8, [sp]
   84d50:	e7cc      	b.n	84cec <__sfvwrite_r+0x208>
   84d52:	4658      	mov	r0, fp
   84d54:	210a      	movs	r1, #10
   84d56:	4652      	mov	r2, sl
   84d58:	f000 fb84 	bl	85464 <memchr>
   84d5c:	2800      	cmp	r0, #0
   84d5e:	d041      	beq.n	84de4 <__sfvwrite_r+0x300>
   84d60:	3001      	adds	r0, #1
   84d62:	2301      	movs	r3, #1
   84d64:	ebcb 0800 	rsb	r8, fp, r0
   84d68:	9300      	str	r3, [sp, #0]
   84d6a:	e7a2      	b.n	84cb2 <__sfvwrite_r+0x1ce>
   84d6c:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   84d70:	4543      	cmp	r3, r8
   84d72:	bf28      	it	cs
   84d74:	4643      	movcs	r3, r8
   84d76:	fb93 f3f2 	sdiv	r3, r3, r2
   84d7a:	6a67      	ldr	r7, [r4, #36]	; 0x24
   84d7c:	fb03 f302 	mul.w	r3, r3, r2
   84d80:	4648      	mov	r0, r9
   84d82:	69e1      	ldr	r1, [r4, #28]
   84d84:	465a      	mov	r2, fp
   84d86:	47b8      	blx	r7
   84d88:	2800      	cmp	r0, #0
   84d8a:	f73f af47 	bgt.w	84c1c <__sfvwrite_r+0x138>
   84d8e:	e77d      	b.n	84c8c <__sfvwrite_r+0x1a8>
   84d90:	4662      	mov	r2, ip
   84d92:	4659      	mov	r1, fp
   84d94:	f8cd c004 	str.w	ip, [sp, #4]
   84d98:	f000 fbae 	bl	854f8 <memmove>
   84d9c:	6823      	ldr	r3, [r4, #0]
   84d9e:	f8dd c004 	ldr.w	ip, [sp, #4]
   84da2:	4648      	mov	r0, r9
   84da4:	4463      	add	r3, ip
   84da6:	6023      	str	r3, [r4, #0]
   84da8:	4621      	mov	r1, r4
   84daa:	f7ff fc57 	bl	8465c <_fflush_r>
   84dae:	f8dd c004 	ldr.w	ip, [sp, #4]
   84db2:	2800      	cmp	r0, #0
   84db4:	f47f af6a 	bne.w	84c8c <__sfvwrite_r+0x1a8>
   84db8:	4667      	mov	r7, ip
   84dba:	e794      	b.n	84ce6 <__sfvwrite_r+0x202>
   84dbc:	4648      	mov	r0, r9
   84dbe:	f000 fc03 	bl	855c8 <_realloc_r>
   84dc2:	9b00      	ldr	r3, [sp, #0]
   84dc4:	4682      	mov	sl, r0
   84dc6:	2800      	cmp	r0, #0
   84dc8:	f47f af12 	bne.w	84bf0 <__sfvwrite_r+0x10c>
   84dcc:	4648      	mov	r0, r9
   84dce:	6921      	ldr	r1, [r4, #16]
   84dd0:	f7ff fdb0 	bl	84934 <_free_r>
   84dd4:	89a3      	ldrh	r3, [r4, #12]
   84dd6:	220c      	movs	r2, #12
   84dd8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   84ddc:	b29b      	uxth	r3, r3
   84dde:	f8c9 2000 	str.w	r2, [r9]
   84de2:	e754      	b.n	84c8e <__sfvwrite_r+0x1aa>
   84de4:	2301      	movs	r3, #1
   84de6:	f10a 0801 	add.w	r8, sl, #1
   84dea:	9300      	str	r3, [sp, #0]
   84dec:	e761      	b.n	84cb2 <__sfvwrite_r+0x1ce>
   84dee:	f04f 30ff 	mov.w	r0, #4294967295
   84df2:	e6ac      	b.n	84b4e <__sfvwrite_r+0x6a>
   84df4:	230c      	movs	r3, #12
   84df6:	f8c9 3000 	str.w	r3, [r9]
   84dfa:	89a3      	ldrh	r3, [r4, #12]
   84dfc:	e747      	b.n	84c8e <__sfvwrite_r+0x1aa>
   84dfe:	bf00      	nop
   84e00:	7ffffc00 	.word	0x7ffffc00

00084e04 <_fwalk_reent>:
   84e04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   84e08:	f510 7638 	adds.w	r6, r0, #736	; 0x2e0
   84e0c:	d01e      	beq.n	84e4c <_fwalk_reent+0x48>
   84e0e:	4688      	mov	r8, r1
   84e10:	4607      	mov	r7, r0
   84e12:	f04f 0900 	mov.w	r9, #0
   84e16:	6875      	ldr	r5, [r6, #4]
   84e18:	68b4      	ldr	r4, [r6, #8]
   84e1a:	3d01      	subs	r5, #1
   84e1c:	d410      	bmi.n	84e40 <_fwalk_reent+0x3c>
   84e1e:	89a3      	ldrh	r3, [r4, #12]
   84e20:	3d01      	subs	r5, #1
   84e22:	2b01      	cmp	r3, #1
   84e24:	d908      	bls.n	84e38 <_fwalk_reent+0x34>
   84e26:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
   84e2a:	3301      	adds	r3, #1
   84e2c:	d004      	beq.n	84e38 <_fwalk_reent+0x34>
   84e2e:	4638      	mov	r0, r7
   84e30:	4621      	mov	r1, r4
   84e32:	47c0      	blx	r8
   84e34:	ea49 0900 	orr.w	r9, r9, r0
   84e38:	1c6b      	adds	r3, r5, #1
   84e3a:	f104 0468 	add.w	r4, r4, #104	; 0x68
   84e3e:	d1ee      	bne.n	84e1e <_fwalk_reent+0x1a>
   84e40:	6836      	ldr	r6, [r6, #0]
   84e42:	2e00      	cmp	r6, #0
   84e44:	d1e7      	bne.n	84e16 <_fwalk_reent+0x12>
   84e46:	4648      	mov	r0, r9
   84e48:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   84e4c:	46b1      	mov	r9, r6
   84e4e:	4648      	mov	r0, r9
   84e50:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00084e54 <__locale_charset>:
   84e54:	4800      	ldr	r0, [pc, #0]	; (84e58 <__locale_charset+0x4>)
   84e56:	4770      	bx	lr
   84e58:	2007056c 	.word	0x2007056c

00084e5c <__locale_mb_cur_max>:
   84e5c:	4b01      	ldr	r3, [pc, #4]	; (84e64 <__locale_mb_cur_max+0x8>)
   84e5e:	6818      	ldr	r0, [r3, #0]
   84e60:	4770      	bx	lr
   84e62:	bf00      	nop
   84e64:	2007058c 	.word	0x2007058c

00084e68 <__smakebuf_r>:
   84e68:	898b      	ldrh	r3, [r1, #12]
   84e6a:	b29a      	uxth	r2, r3
   84e6c:	f012 0f02 	tst.w	r2, #2
   84e70:	d13c      	bne.n	84eec <__smakebuf_r+0x84>
   84e72:	b5f0      	push	{r4, r5, r6, r7, lr}
   84e74:	460c      	mov	r4, r1
   84e76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   84e7a:	b091      	sub	sp, #68	; 0x44
   84e7c:	2900      	cmp	r1, #0
   84e7e:	4605      	mov	r5, r0
   84e80:	db19      	blt.n	84eb6 <__smakebuf_r+0x4e>
   84e82:	aa01      	add	r2, sp, #4
   84e84:	f000 ff2a 	bl	85cdc <_fstat_r>
   84e88:	2800      	cmp	r0, #0
   84e8a:	db12      	blt.n	84eb2 <__smakebuf_r+0x4a>
   84e8c:	9b02      	ldr	r3, [sp, #8]
   84e8e:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
   84e92:	f5a3 5700 	sub.w	r7, r3, #8192	; 0x2000
   84e96:	fab7 f787 	clz	r7, r7
   84e9a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   84e9e:	ea4f 1757 	mov.w	r7, r7, lsr #5
   84ea2:	d02a      	beq.n	84efa <__smakebuf_r+0x92>
   84ea4:	89a3      	ldrh	r3, [r4, #12]
   84ea6:	f44f 6680 	mov.w	r6, #1024	; 0x400
   84eaa:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   84eae:	81a3      	strh	r3, [r4, #12]
   84eb0:	e00b      	b.n	84eca <__smakebuf_r+0x62>
   84eb2:	89a3      	ldrh	r3, [r4, #12]
   84eb4:	b29a      	uxth	r2, r3
   84eb6:	f012 0f80 	tst.w	r2, #128	; 0x80
   84eba:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   84ebe:	81a3      	strh	r3, [r4, #12]
   84ec0:	bf0c      	ite	eq
   84ec2:	f44f 6680 	moveq.w	r6, #1024	; 0x400
   84ec6:	2640      	movne	r6, #64	; 0x40
   84ec8:	2700      	movs	r7, #0
   84eca:	4628      	mov	r0, r5
   84ecc:	4631      	mov	r1, r6
   84ece:	f000 f843 	bl	84f58 <_malloc_r>
   84ed2:	89a3      	ldrh	r3, [r4, #12]
   84ed4:	b340      	cbz	r0, 84f28 <__smakebuf_r+0xc0>
   84ed6:	4a1a      	ldr	r2, [pc, #104]	; (84f40 <__smakebuf_r+0xd8>)
   84ed8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   84edc:	63ea      	str	r2, [r5, #60]	; 0x3c
   84ede:	81a3      	strh	r3, [r4, #12]
   84ee0:	6020      	str	r0, [r4, #0]
   84ee2:	6120      	str	r0, [r4, #16]
   84ee4:	6166      	str	r6, [r4, #20]
   84ee6:	b99f      	cbnz	r7, 84f10 <__smakebuf_r+0xa8>
   84ee8:	b011      	add	sp, #68	; 0x44
   84eea:	bdf0      	pop	{r4, r5, r6, r7, pc}
   84eec:	f101 0343 	add.w	r3, r1, #67	; 0x43
   84ef0:	2201      	movs	r2, #1
   84ef2:	600b      	str	r3, [r1, #0]
   84ef4:	610b      	str	r3, [r1, #16]
   84ef6:	614a      	str	r2, [r1, #20]
   84ef8:	4770      	bx	lr
   84efa:	4b12      	ldr	r3, [pc, #72]	; (84f44 <__smakebuf_r+0xdc>)
   84efc:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   84efe:	429a      	cmp	r2, r3
   84f00:	d1d0      	bne.n	84ea4 <__smakebuf_r+0x3c>
   84f02:	89a3      	ldrh	r3, [r4, #12]
   84f04:	f44f 6680 	mov.w	r6, #1024	; 0x400
   84f08:	4333      	orrs	r3, r6
   84f0a:	81a3      	strh	r3, [r4, #12]
   84f0c:	64e6      	str	r6, [r4, #76]	; 0x4c
   84f0e:	e7dc      	b.n	84eca <__smakebuf_r+0x62>
   84f10:	4628      	mov	r0, r5
   84f12:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   84f16:	f000 fef5 	bl	85d04 <_isatty_r>
   84f1a:	2800      	cmp	r0, #0
   84f1c:	d0e4      	beq.n	84ee8 <__smakebuf_r+0x80>
   84f1e:	89a3      	ldrh	r3, [r4, #12]
   84f20:	f043 0301 	orr.w	r3, r3, #1
   84f24:	81a3      	strh	r3, [r4, #12]
   84f26:	e7df      	b.n	84ee8 <__smakebuf_r+0x80>
   84f28:	059a      	lsls	r2, r3, #22
   84f2a:	d4dd      	bmi.n	84ee8 <__smakebuf_r+0x80>
   84f2c:	f104 0243 	add.w	r2, r4, #67	; 0x43
   84f30:	f043 0302 	orr.w	r3, r3, #2
   84f34:	2101      	movs	r1, #1
   84f36:	81a3      	strh	r3, [r4, #12]
   84f38:	6022      	str	r2, [r4, #0]
   84f3a:	6122      	str	r2, [r4, #16]
   84f3c:	6161      	str	r1, [r4, #20]
   84f3e:	e7d3      	b.n	84ee8 <__smakebuf_r+0x80>
   84f40:	00084689 	.word	0x00084689
   84f44:	00085a29 	.word	0x00085a29

00084f48 <malloc>:
   84f48:	4b02      	ldr	r3, [pc, #8]	; (84f54 <malloc+0xc>)
   84f4a:	4601      	mov	r1, r0
   84f4c:	6818      	ldr	r0, [r3, #0]
   84f4e:	f000 b803 	b.w	84f58 <_malloc_r>
   84f52:	bf00      	nop
   84f54:	20070568 	.word	0x20070568

00084f58 <_malloc_r>:
   84f58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   84f5c:	f101 050b 	add.w	r5, r1, #11
   84f60:	2d16      	cmp	r5, #22
   84f62:	b083      	sub	sp, #12
   84f64:	4606      	mov	r6, r0
   84f66:	d927      	bls.n	84fb8 <_malloc_r+0x60>
   84f68:	f035 0507 	bics.w	r5, r5, #7
   84f6c:	f100 80b6 	bmi.w	850dc <_malloc_r+0x184>
   84f70:	42a9      	cmp	r1, r5
   84f72:	f200 80b3 	bhi.w	850dc <_malloc_r+0x184>
   84f76:	f000 fb23 	bl	855c0 <__malloc_lock>
   84f7a:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
   84f7e:	d222      	bcs.n	84fc6 <_malloc_r+0x6e>
   84f80:	4fbc      	ldr	r7, [pc, #752]	; (85274 <_malloc_r+0x31c>)
   84f82:	08e8      	lsrs	r0, r5, #3
   84f84:	eb07 03c0 	add.w	r3, r7, r0, lsl #3
   84f88:	68dc      	ldr	r4, [r3, #12]
   84f8a:	429c      	cmp	r4, r3
   84f8c:	f000 81bc 	beq.w	85308 <_malloc_r+0x3b0>
   84f90:	6863      	ldr	r3, [r4, #4]
   84f92:	68e1      	ldr	r1, [r4, #12]
   84f94:	f023 0303 	bic.w	r3, r3, #3
   84f98:	4423      	add	r3, r4
   84f9a:	685a      	ldr	r2, [r3, #4]
   84f9c:	68a5      	ldr	r5, [r4, #8]
   84f9e:	f042 0201 	orr.w	r2, r2, #1
   84fa2:	60e9      	str	r1, [r5, #12]
   84fa4:	4630      	mov	r0, r6
   84fa6:	608d      	str	r5, [r1, #8]
   84fa8:	605a      	str	r2, [r3, #4]
   84faa:	f000 fb0b 	bl	855c4 <__malloc_unlock>
   84fae:	3408      	adds	r4, #8
   84fb0:	4620      	mov	r0, r4
   84fb2:	b003      	add	sp, #12
   84fb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   84fb8:	2910      	cmp	r1, #16
   84fba:	f200 808f 	bhi.w	850dc <_malloc_r+0x184>
   84fbe:	f000 faff 	bl	855c0 <__malloc_lock>
   84fc2:	2510      	movs	r5, #16
   84fc4:	e7dc      	b.n	84f80 <_malloc_r+0x28>
   84fc6:	0a68      	lsrs	r0, r5, #9
   84fc8:	f000 808f 	beq.w	850ea <_malloc_r+0x192>
   84fcc:	2804      	cmp	r0, #4
   84fce:	f200 8147 	bhi.w	85260 <_malloc_r+0x308>
   84fd2:	09a8      	lsrs	r0, r5, #6
   84fd4:	3038      	adds	r0, #56	; 0x38
   84fd6:	0041      	lsls	r1, r0, #1
   84fd8:	4fa6      	ldr	r7, [pc, #664]	; (85274 <_malloc_r+0x31c>)
   84fda:	eb07 0181 	add.w	r1, r7, r1, lsl #2
   84fde:	68cc      	ldr	r4, [r1, #12]
   84fe0:	42a1      	cmp	r1, r4
   84fe2:	d106      	bne.n	84ff2 <_malloc_r+0x9a>
   84fe4:	e00c      	b.n	85000 <_malloc_r+0xa8>
   84fe6:	2a00      	cmp	r2, #0
   84fe8:	f280 8082 	bge.w	850f0 <_malloc_r+0x198>
   84fec:	68e4      	ldr	r4, [r4, #12]
   84fee:	42a1      	cmp	r1, r4
   84ff0:	d006      	beq.n	85000 <_malloc_r+0xa8>
   84ff2:	6863      	ldr	r3, [r4, #4]
   84ff4:	f023 0303 	bic.w	r3, r3, #3
   84ff8:	1b5a      	subs	r2, r3, r5
   84ffa:	2a0f      	cmp	r2, #15
   84ffc:	ddf3      	ble.n	84fe6 <_malloc_r+0x8e>
   84ffe:	3801      	subs	r0, #1
   85000:	3001      	adds	r0, #1
   85002:	499c      	ldr	r1, [pc, #624]	; (85274 <_malloc_r+0x31c>)
   85004:	693c      	ldr	r4, [r7, #16]
   85006:	f101 0e08 	add.w	lr, r1, #8
   8500a:	4574      	cmp	r4, lr
   8500c:	f000 8171 	beq.w	852f2 <_malloc_r+0x39a>
   85010:	6863      	ldr	r3, [r4, #4]
   85012:	f023 0303 	bic.w	r3, r3, #3
   85016:	1b5a      	subs	r2, r3, r5
   85018:	2a0f      	cmp	r2, #15
   8501a:	f300 8157 	bgt.w	852cc <_malloc_r+0x374>
   8501e:	2a00      	cmp	r2, #0
   85020:	f8c1 e014 	str.w	lr, [r1, #20]
   85024:	f8c1 e010 	str.w	lr, [r1, #16]
   85028:	da66      	bge.n	850f8 <_malloc_r+0x1a0>
   8502a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   8502e:	f080 812d 	bcs.w	8528c <_malloc_r+0x334>
   85032:	08db      	lsrs	r3, r3, #3
   85034:	eb01 08c3 	add.w	r8, r1, r3, lsl #3
   85038:	ea4f 0ca3 	mov.w	ip, r3, asr #2
   8503c:	684a      	ldr	r2, [r1, #4]
   8503e:	2301      	movs	r3, #1
   85040:	fa03 f30c 	lsl.w	r3, r3, ip
   85044:	f8d8 c008 	ldr.w	ip, [r8, #8]
   85048:	4313      	orrs	r3, r2
   8504a:	f8c4 c008 	str.w	ip, [r4, #8]
   8504e:	f8c4 800c 	str.w	r8, [r4, #12]
   85052:	604b      	str	r3, [r1, #4]
   85054:	f8c8 4008 	str.w	r4, [r8, #8]
   85058:	f8cc 400c 	str.w	r4, [ip, #12]
   8505c:	1082      	asrs	r2, r0, #2
   8505e:	2401      	movs	r4, #1
   85060:	4094      	lsls	r4, r2
   85062:	429c      	cmp	r4, r3
   85064:	d855      	bhi.n	85112 <_malloc_r+0x1ba>
   85066:	4223      	tst	r3, r4
   85068:	d106      	bne.n	85078 <_malloc_r+0x120>
   8506a:	f020 0003 	bic.w	r0, r0, #3
   8506e:	0064      	lsls	r4, r4, #1
   85070:	4223      	tst	r3, r4
   85072:	f100 0004 	add.w	r0, r0, #4
   85076:	d0fa      	beq.n	8506e <_malloc_r+0x116>
   85078:	eb07 08c0 	add.w	r8, r7, r0, lsl #3
   8507c:	46c4      	mov	ip, r8
   8507e:	4681      	mov	r9, r0
   85080:	f8dc 300c 	ldr.w	r3, [ip, #12]
   85084:	459c      	cmp	ip, r3
   85086:	d107      	bne.n	85098 <_malloc_r+0x140>
   85088:	e135      	b.n	852f6 <_malloc_r+0x39e>
   8508a:	2900      	cmp	r1, #0
   8508c:	f280 8145 	bge.w	8531a <_malloc_r+0x3c2>
   85090:	68db      	ldr	r3, [r3, #12]
   85092:	459c      	cmp	ip, r3
   85094:	f000 812f 	beq.w	852f6 <_malloc_r+0x39e>
   85098:	685a      	ldr	r2, [r3, #4]
   8509a:	f022 0203 	bic.w	r2, r2, #3
   8509e:	1b51      	subs	r1, r2, r5
   850a0:	290f      	cmp	r1, #15
   850a2:	ddf2      	ble.n	8508a <_malloc_r+0x132>
   850a4:	461c      	mov	r4, r3
   850a6:	68da      	ldr	r2, [r3, #12]
   850a8:	f854 cf08 	ldr.w	ip, [r4, #8]!
   850ac:	f045 0901 	orr.w	r9, r5, #1
   850b0:	f041 0801 	orr.w	r8, r1, #1
   850b4:	441d      	add	r5, r3
   850b6:	f8c3 9004 	str.w	r9, [r3, #4]
   850ba:	4630      	mov	r0, r6
   850bc:	f8cc 200c 	str.w	r2, [ip, #12]
   850c0:	f8c2 c008 	str.w	ip, [r2, #8]
   850c4:	617d      	str	r5, [r7, #20]
   850c6:	613d      	str	r5, [r7, #16]
   850c8:	f8c5 e00c 	str.w	lr, [r5, #12]
   850cc:	f8c5 e008 	str.w	lr, [r5, #8]
   850d0:	f8c5 8004 	str.w	r8, [r5, #4]
   850d4:	5069      	str	r1, [r5, r1]
   850d6:	f000 fa75 	bl	855c4 <__malloc_unlock>
   850da:	e769      	b.n	84fb0 <_malloc_r+0x58>
   850dc:	2400      	movs	r4, #0
   850de:	4620      	mov	r0, r4
   850e0:	230c      	movs	r3, #12
   850e2:	6033      	str	r3, [r6, #0]
   850e4:	b003      	add	sp, #12
   850e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   850ea:	217e      	movs	r1, #126	; 0x7e
   850ec:	203f      	movs	r0, #63	; 0x3f
   850ee:	e773      	b.n	84fd8 <_malloc_r+0x80>
   850f0:	4423      	add	r3, r4
   850f2:	685a      	ldr	r2, [r3, #4]
   850f4:	68e1      	ldr	r1, [r4, #12]
   850f6:	e751      	b.n	84f9c <_malloc_r+0x44>
   850f8:	4423      	add	r3, r4
   850fa:	685a      	ldr	r2, [r3, #4]
   850fc:	4630      	mov	r0, r6
   850fe:	f042 0201 	orr.w	r2, r2, #1
   85102:	605a      	str	r2, [r3, #4]
   85104:	3408      	adds	r4, #8
   85106:	f000 fa5d 	bl	855c4 <__malloc_unlock>
   8510a:	4620      	mov	r0, r4
   8510c:	b003      	add	sp, #12
   8510e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   85112:	68bc      	ldr	r4, [r7, #8]
   85114:	6863      	ldr	r3, [r4, #4]
   85116:	f023 0803 	bic.w	r8, r3, #3
   8511a:	4545      	cmp	r5, r8
   8511c:	d804      	bhi.n	85128 <_malloc_r+0x1d0>
   8511e:	ebc5 0308 	rsb	r3, r5, r8
   85122:	2b0f      	cmp	r3, #15
   85124:	f300 808c 	bgt.w	85240 <_malloc_r+0x2e8>
   85128:	4b53      	ldr	r3, [pc, #332]	; (85278 <_malloc_r+0x320>)
   8512a:	f8df a15c 	ldr.w	sl, [pc, #348]	; 85288 <_malloc_r+0x330>
   8512e:	681a      	ldr	r2, [r3, #0]
   85130:	f8da 3000 	ldr.w	r3, [sl]
   85134:	442a      	add	r2, r5
   85136:	3301      	adds	r3, #1
   85138:	eb04 0b08 	add.w	fp, r4, r8
   8513c:	f000 8151 	beq.w	853e2 <_malloc_r+0x48a>
   85140:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
   85144:	320f      	adds	r2, #15
   85146:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
   8514a:	f022 020f 	bic.w	r2, r2, #15
   8514e:	4611      	mov	r1, r2
   85150:	4630      	mov	r0, r6
   85152:	9201      	str	r2, [sp, #4]
   85154:	f000 fc28 	bl	859a8 <_sbrk_r>
   85158:	f1b0 3fff 	cmp.w	r0, #4294967295
   8515c:	4681      	mov	r9, r0
   8515e:	9a01      	ldr	r2, [sp, #4]
   85160:	f000 8148 	beq.w	853f4 <_malloc_r+0x49c>
   85164:	4583      	cmp	fp, r0
   85166:	f200 80ef 	bhi.w	85348 <_malloc_r+0x3f0>
   8516a:	4b44      	ldr	r3, [pc, #272]	; (8527c <_malloc_r+0x324>)
   8516c:	45cb      	cmp	fp, r9
   8516e:	6819      	ldr	r1, [r3, #0]
   85170:	4411      	add	r1, r2
   85172:	6019      	str	r1, [r3, #0]
   85174:	f000 8143 	beq.w	853fe <_malloc_r+0x4a6>
   85178:	f8da 0000 	ldr.w	r0, [sl]
   8517c:	f8df e108 	ldr.w	lr, [pc, #264]	; 85288 <_malloc_r+0x330>
   85180:	3001      	adds	r0, #1
   85182:	bf1b      	ittet	ne
   85184:	ebcb 0b09 	rsbne	fp, fp, r9
   85188:	4459      	addne	r1, fp
   8518a:	f8ce 9000 	streq.w	r9, [lr]
   8518e:	6019      	strne	r1, [r3, #0]
   85190:	f019 0107 	ands.w	r1, r9, #7
   85194:	f000 8108 	beq.w	853a8 <_malloc_r+0x450>
   85198:	f1c1 0008 	rsb	r0, r1, #8
   8519c:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
   851a0:	4481      	add	r9, r0
   851a2:	3108      	adds	r1, #8
   851a4:	444a      	add	r2, r9
   851a6:	f3c2 020b 	ubfx	r2, r2, #0, #12
   851aa:	ebc2 0a01 	rsb	sl, r2, r1
   851ae:	4651      	mov	r1, sl
   851b0:	4630      	mov	r0, r6
   851b2:	9301      	str	r3, [sp, #4]
   851b4:	f000 fbf8 	bl	859a8 <_sbrk_r>
   851b8:	1c43      	adds	r3, r0, #1
   851ba:	9b01      	ldr	r3, [sp, #4]
   851bc:	f000 812d 	beq.w	8541a <_malloc_r+0x4c2>
   851c0:	ebc9 0200 	rsb	r2, r9, r0
   851c4:	4452      	add	r2, sl
   851c6:	f042 0201 	orr.w	r2, r2, #1
   851ca:	6819      	ldr	r1, [r3, #0]
   851cc:	42bc      	cmp	r4, r7
   851ce:	4451      	add	r1, sl
   851d0:	f8c7 9008 	str.w	r9, [r7, #8]
   851d4:	6019      	str	r1, [r3, #0]
   851d6:	f8c9 2004 	str.w	r2, [r9, #4]
   851da:	f8df a0a0 	ldr.w	sl, [pc, #160]	; 8527c <_malloc_r+0x324>
   851de:	d016      	beq.n	8520e <_malloc_r+0x2b6>
   851e0:	f1b8 0f0f 	cmp.w	r8, #15
   851e4:	f240 80ef 	bls.w	853c6 <_malloc_r+0x46e>
   851e8:	6862      	ldr	r2, [r4, #4]
   851ea:	f1a8 030c 	sub.w	r3, r8, #12
   851ee:	f023 0307 	bic.w	r3, r3, #7
   851f2:	f002 0201 	and.w	r2, r2, #1
   851f6:	18e0      	adds	r0, r4, r3
   851f8:	f04f 0e05 	mov.w	lr, #5
   851fc:	431a      	orrs	r2, r3
   851fe:	2b0f      	cmp	r3, #15
   85200:	6062      	str	r2, [r4, #4]
   85202:	f8c0 e004 	str.w	lr, [r0, #4]
   85206:	f8c0 e008 	str.w	lr, [r0, #8]
   8520a:	f200 810a 	bhi.w	85422 <_malloc_r+0x4ca>
   8520e:	4b1c      	ldr	r3, [pc, #112]	; (85280 <_malloc_r+0x328>)
   85210:	68bc      	ldr	r4, [r7, #8]
   85212:	681a      	ldr	r2, [r3, #0]
   85214:	4291      	cmp	r1, r2
   85216:	bf88      	it	hi
   85218:	6019      	strhi	r1, [r3, #0]
   8521a:	4b1a      	ldr	r3, [pc, #104]	; (85284 <_malloc_r+0x32c>)
   8521c:	681a      	ldr	r2, [r3, #0]
   8521e:	4291      	cmp	r1, r2
   85220:	6862      	ldr	r2, [r4, #4]
   85222:	bf88      	it	hi
   85224:	6019      	strhi	r1, [r3, #0]
   85226:	f022 0203 	bic.w	r2, r2, #3
   8522a:	4295      	cmp	r5, r2
   8522c:	eba2 0305 	sub.w	r3, r2, r5
   85230:	d801      	bhi.n	85236 <_malloc_r+0x2de>
   85232:	2b0f      	cmp	r3, #15
   85234:	dc04      	bgt.n	85240 <_malloc_r+0x2e8>
   85236:	4630      	mov	r0, r6
   85238:	f000 f9c4 	bl	855c4 <__malloc_unlock>
   8523c:	2400      	movs	r4, #0
   8523e:	e6b7      	b.n	84fb0 <_malloc_r+0x58>
   85240:	f045 0201 	orr.w	r2, r5, #1
   85244:	f043 0301 	orr.w	r3, r3, #1
   85248:	4425      	add	r5, r4
   8524a:	6062      	str	r2, [r4, #4]
   8524c:	4630      	mov	r0, r6
   8524e:	60bd      	str	r5, [r7, #8]
   85250:	3408      	adds	r4, #8
   85252:	606b      	str	r3, [r5, #4]
   85254:	f000 f9b6 	bl	855c4 <__malloc_unlock>
   85258:	4620      	mov	r0, r4
   8525a:	b003      	add	sp, #12
   8525c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   85260:	2814      	cmp	r0, #20
   85262:	d969      	bls.n	85338 <_malloc_r+0x3e0>
   85264:	2854      	cmp	r0, #84	; 0x54
   85266:	f200 8098 	bhi.w	8539a <_malloc_r+0x442>
   8526a:	0b28      	lsrs	r0, r5, #12
   8526c:	306e      	adds	r0, #110	; 0x6e
   8526e:	0041      	lsls	r1, r0, #1
   85270:	e6b2      	b.n	84fd8 <_malloc_r+0x80>
   85272:	bf00      	nop
   85274:	20070590 	.word	0x20070590
   85278:	20078c24 	.word	0x20078c24
   8527c:	20078c28 	.word	0x20078c28
   85280:	20078c20 	.word	0x20078c20
   85284:	20078c1c 	.word	0x20078c1c
   85288:	2007099c 	.word	0x2007099c
   8528c:	0a5a      	lsrs	r2, r3, #9
   8528e:	2a04      	cmp	r2, #4
   85290:	d955      	bls.n	8533e <_malloc_r+0x3e6>
   85292:	2a14      	cmp	r2, #20
   85294:	f200 80a7 	bhi.w	853e6 <_malloc_r+0x48e>
   85298:	325b      	adds	r2, #91	; 0x5b
   8529a:	ea4f 0c42 	mov.w	ip, r2, lsl #1
   8529e:	eb07 0c8c 	add.w	ip, r7, ip, lsl #2
   852a2:	f8dc 1008 	ldr.w	r1, [ip, #8]
   852a6:	f8df 81b8 	ldr.w	r8, [pc, #440]	; 85460 <_malloc_r+0x508>
   852aa:	4561      	cmp	r1, ip
   852ac:	d07f      	beq.n	853ae <_malloc_r+0x456>
   852ae:	684a      	ldr	r2, [r1, #4]
   852b0:	f022 0203 	bic.w	r2, r2, #3
   852b4:	4293      	cmp	r3, r2
   852b6:	d202      	bcs.n	852be <_malloc_r+0x366>
   852b8:	6889      	ldr	r1, [r1, #8]
   852ba:	458c      	cmp	ip, r1
   852bc:	d1f7      	bne.n	852ae <_malloc_r+0x356>
   852be:	68ca      	ldr	r2, [r1, #12]
   852c0:	687b      	ldr	r3, [r7, #4]
   852c2:	60e2      	str	r2, [r4, #12]
   852c4:	60a1      	str	r1, [r4, #8]
   852c6:	6094      	str	r4, [r2, #8]
   852c8:	60cc      	str	r4, [r1, #12]
   852ca:	e6c7      	b.n	8505c <_malloc_r+0x104>
   852cc:	f045 0701 	orr.w	r7, r5, #1
   852d0:	f042 0301 	orr.w	r3, r2, #1
   852d4:	4425      	add	r5, r4
   852d6:	6067      	str	r7, [r4, #4]
   852d8:	4630      	mov	r0, r6
   852da:	614d      	str	r5, [r1, #20]
   852dc:	610d      	str	r5, [r1, #16]
   852de:	f8c5 e00c 	str.w	lr, [r5, #12]
   852e2:	f8c5 e008 	str.w	lr, [r5, #8]
   852e6:	606b      	str	r3, [r5, #4]
   852e8:	50aa      	str	r2, [r5, r2]
   852ea:	3408      	adds	r4, #8
   852ec:	f000 f96a 	bl	855c4 <__malloc_unlock>
   852f0:	e65e      	b.n	84fb0 <_malloc_r+0x58>
   852f2:	684b      	ldr	r3, [r1, #4]
   852f4:	e6b2      	b.n	8505c <_malloc_r+0x104>
   852f6:	f109 0901 	add.w	r9, r9, #1
   852fa:	f019 0f03 	tst.w	r9, #3
   852fe:	f10c 0c08 	add.w	ip, ip, #8
   85302:	f47f aebd 	bne.w	85080 <_malloc_r+0x128>
   85306:	e02c      	b.n	85362 <_malloc_r+0x40a>
   85308:	f104 0308 	add.w	r3, r4, #8
   8530c:	6964      	ldr	r4, [r4, #20]
   8530e:	42a3      	cmp	r3, r4
   85310:	bf08      	it	eq
   85312:	3002      	addeq	r0, #2
   85314:	f43f ae75 	beq.w	85002 <_malloc_r+0xaa>
   85318:	e63a      	b.n	84f90 <_malloc_r+0x38>
   8531a:	461c      	mov	r4, r3
   8531c:	441a      	add	r2, r3
   8531e:	6851      	ldr	r1, [r2, #4]
   85320:	68db      	ldr	r3, [r3, #12]
   85322:	f854 5f08 	ldr.w	r5, [r4, #8]!
   85326:	f041 0101 	orr.w	r1, r1, #1
   8532a:	6051      	str	r1, [r2, #4]
   8532c:	4630      	mov	r0, r6
   8532e:	60eb      	str	r3, [r5, #12]
   85330:	609d      	str	r5, [r3, #8]
   85332:	f000 f947 	bl	855c4 <__malloc_unlock>
   85336:	e63b      	b.n	84fb0 <_malloc_r+0x58>
   85338:	305b      	adds	r0, #91	; 0x5b
   8533a:	0041      	lsls	r1, r0, #1
   8533c:	e64c      	b.n	84fd8 <_malloc_r+0x80>
   8533e:	099a      	lsrs	r2, r3, #6
   85340:	3238      	adds	r2, #56	; 0x38
   85342:	ea4f 0c42 	mov.w	ip, r2, lsl #1
   85346:	e7aa      	b.n	8529e <_malloc_r+0x346>
   85348:	42bc      	cmp	r4, r7
   8534a:	4b45      	ldr	r3, [pc, #276]	; (85460 <_malloc_r+0x508>)
   8534c:	f43f af0d 	beq.w	8516a <_malloc_r+0x212>
   85350:	689c      	ldr	r4, [r3, #8]
   85352:	6862      	ldr	r2, [r4, #4]
   85354:	f022 0203 	bic.w	r2, r2, #3
   85358:	e767      	b.n	8522a <_malloc_r+0x2d2>
   8535a:	f8d8 8000 	ldr.w	r8, [r8]
   8535e:	4598      	cmp	r8, r3
   85360:	d17c      	bne.n	8545c <_malloc_r+0x504>
   85362:	f010 0f03 	tst.w	r0, #3
   85366:	f1a8 0308 	sub.w	r3, r8, #8
   8536a:	f100 30ff 	add.w	r0, r0, #4294967295
   8536e:	d1f4      	bne.n	8535a <_malloc_r+0x402>
   85370:	687b      	ldr	r3, [r7, #4]
   85372:	ea23 0304 	bic.w	r3, r3, r4
   85376:	607b      	str	r3, [r7, #4]
   85378:	0064      	lsls	r4, r4, #1
   8537a:	429c      	cmp	r4, r3
   8537c:	f63f aec9 	bhi.w	85112 <_malloc_r+0x1ba>
   85380:	2c00      	cmp	r4, #0
   85382:	f43f aec6 	beq.w	85112 <_malloc_r+0x1ba>
   85386:	4223      	tst	r3, r4
   85388:	4648      	mov	r0, r9
   8538a:	f47f ae75 	bne.w	85078 <_malloc_r+0x120>
   8538e:	0064      	lsls	r4, r4, #1
   85390:	4223      	tst	r3, r4
   85392:	f100 0004 	add.w	r0, r0, #4
   85396:	d0fa      	beq.n	8538e <_malloc_r+0x436>
   85398:	e66e      	b.n	85078 <_malloc_r+0x120>
   8539a:	f5b0 7faa 	cmp.w	r0, #340	; 0x154
   8539e:	d818      	bhi.n	853d2 <_malloc_r+0x47a>
   853a0:	0be8      	lsrs	r0, r5, #15
   853a2:	3077      	adds	r0, #119	; 0x77
   853a4:	0041      	lsls	r1, r0, #1
   853a6:	e617      	b.n	84fd8 <_malloc_r+0x80>
   853a8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   853ac:	e6fa      	b.n	851a4 <_malloc_r+0x24c>
   853ae:	f8d8 3004 	ldr.w	r3, [r8, #4]
   853b2:	1092      	asrs	r2, r2, #2
   853b4:	f04f 0c01 	mov.w	ip, #1
   853b8:	fa0c f202 	lsl.w	r2, ip, r2
   853bc:	4313      	orrs	r3, r2
   853be:	f8c8 3004 	str.w	r3, [r8, #4]
   853c2:	460a      	mov	r2, r1
   853c4:	e77d      	b.n	852c2 <_malloc_r+0x36a>
   853c6:	2301      	movs	r3, #1
   853c8:	f8c9 3004 	str.w	r3, [r9, #4]
   853cc:	464c      	mov	r4, r9
   853ce:	2200      	movs	r2, #0
   853d0:	e72b      	b.n	8522a <_malloc_r+0x2d2>
   853d2:	f240 5354 	movw	r3, #1364	; 0x554
   853d6:	4298      	cmp	r0, r3
   853d8:	d81c      	bhi.n	85414 <_malloc_r+0x4bc>
   853da:	0ca8      	lsrs	r0, r5, #18
   853dc:	307c      	adds	r0, #124	; 0x7c
   853de:	0041      	lsls	r1, r0, #1
   853e0:	e5fa      	b.n	84fd8 <_malloc_r+0x80>
   853e2:	3210      	adds	r2, #16
   853e4:	e6b3      	b.n	8514e <_malloc_r+0x1f6>
   853e6:	2a54      	cmp	r2, #84	; 0x54
   853e8:	d823      	bhi.n	85432 <_malloc_r+0x4da>
   853ea:	0b1a      	lsrs	r2, r3, #12
   853ec:	326e      	adds	r2, #110	; 0x6e
   853ee:	ea4f 0c42 	mov.w	ip, r2, lsl #1
   853f2:	e754      	b.n	8529e <_malloc_r+0x346>
   853f4:	68bc      	ldr	r4, [r7, #8]
   853f6:	6862      	ldr	r2, [r4, #4]
   853f8:	f022 0203 	bic.w	r2, r2, #3
   853fc:	e715      	b.n	8522a <_malloc_r+0x2d2>
   853fe:	f3cb 000b 	ubfx	r0, fp, #0, #12
   85402:	2800      	cmp	r0, #0
   85404:	f47f aeb8 	bne.w	85178 <_malloc_r+0x220>
   85408:	4442      	add	r2, r8
   8540a:	68bb      	ldr	r3, [r7, #8]
   8540c:	f042 0201 	orr.w	r2, r2, #1
   85410:	605a      	str	r2, [r3, #4]
   85412:	e6fc      	b.n	8520e <_malloc_r+0x2b6>
   85414:	21fc      	movs	r1, #252	; 0xfc
   85416:	207e      	movs	r0, #126	; 0x7e
   85418:	e5de      	b.n	84fd8 <_malloc_r+0x80>
   8541a:	2201      	movs	r2, #1
   8541c:	f04f 0a00 	mov.w	sl, #0
   85420:	e6d3      	b.n	851ca <_malloc_r+0x272>
   85422:	f104 0108 	add.w	r1, r4, #8
   85426:	4630      	mov	r0, r6
   85428:	f7ff fa84 	bl	84934 <_free_r>
   8542c:	f8da 1000 	ldr.w	r1, [sl]
   85430:	e6ed      	b.n	8520e <_malloc_r+0x2b6>
   85432:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   85436:	d804      	bhi.n	85442 <_malloc_r+0x4ea>
   85438:	0bda      	lsrs	r2, r3, #15
   8543a:	3277      	adds	r2, #119	; 0x77
   8543c:	ea4f 0c42 	mov.w	ip, r2, lsl #1
   85440:	e72d      	b.n	8529e <_malloc_r+0x346>
   85442:	f240 5154 	movw	r1, #1364	; 0x554
   85446:	428a      	cmp	r2, r1
   85448:	d804      	bhi.n	85454 <_malloc_r+0x4fc>
   8544a:	0c9a      	lsrs	r2, r3, #18
   8544c:	327c      	adds	r2, #124	; 0x7c
   8544e:	ea4f 0c42 	mov.w	ip, r2, lsl #1
   85452:	e724      	b.n	8529e <_malloc_r+0x346>
   85454:	f04f 0cfc 	mov.w	ip, #252	; 0xfc
   85458:	227e      	movs	r2, #126	; 0x7e
   8545a:	e720      	b.n	8529e <_malloc_r+0x346>
   8545c:	687b      	ldr	r3, [r7, #4]
   8545e:	e78b      	b.n	85378 <_malloc_r+0x420>
   85460:	20070590 	.word	0x20070590

00085464 <memchr>:
   85464:	0783      	lsls	r3, r0, #30
   85466:	b470      	push	{r4, r5, r6}
   85468:	b2c9      	uxtb	r1, r1
   8546a:	d040      	beq.n	854ee <memchr+0x8a>
   8546c:	1e54      	subs	r4, r2, #1
   8546e:	2a00      	cmp	r2, #0
   85470:	d03f      	beq.n	854f2 <memchr+0x8e>
   85472:	7803      	ldrb	r3, [r0, #0]
   85474:	428b      	cmp	r3, r1
   85476:	bf18      	it	ne
   85478:	1c43      	addne	r3, r0, #1
   8547a:	d105      	bne.n	85488 <memchr+0x24>
   8547c:	e01c      	b.n	854b8 <memchr+0x54>
   8547e:	b1ec      	cbz	r4, 854bc <memchr+0x58>
   85480:	7802      	ldrb	r2, [r0, #0]
   85482:	3c01      	subs	r4, #1
   85484:	428a      	cmp	r2, r1
   85486:	d017      	beq.n	854b8 <memchr+0x54>
   85488:	f013 0f03 	tst.w	r3, #3
   8548c:	4618      	mov	r0, r3
   8548e:	f103 0301 	add.w	r3, r3, #1
   85492:	d1f4      	bne.n	8547e <memchr+0x1a>
   85494:	2c03      	cmp	r4, #3
   85496:	d814      	bhi.n	854c2 <memchr+0x5e>
   85498:	b184      	cbz	r4, 854bc <memchr+0x58>
   8549a:	7803      	ldrb	r3, [r0, #0]
   8549c:	428b      	cmp	r3, r1
   8549e:	d00b      	beq.n	854b8 <memchr+0x54>
   854a0:	1905      	adds	r5, r0, r4
   854a2:	1c43      	adds	r3, r0, #1
   854a4:	e002      	b.n	854ac <memchr+0x48>
   854a6:	7802      	ldrb	r2, [r0, #0]
   854a8:	428a      	cmp	r2, r1
   854aa:	d005      	beq.n	854b8 <memchr+0x54>
   854ac:	42ab      	cmp	r3, r5
   854ae:	4618      	mov	r0, r3
   854b0:	f103 0301 	add.w	r3, r3, #1
   854b4:	d1f7      	bne.n	854a6 <memchr+0x42>
   854b6:	2000      	movs	r0, #0
   854b8:	bc70      	pop	{r4, r5, r6}
   854ba:	4770      	bx	lr
   854bc:	4620      	mov	r0, r4
   854be:	bc70      	pop	{r4, r5, r6}
   854c0:	4770      	bx	lr
   854c2:	4602      	mov	r2, r0
   854c4:	ea41 2601 	orr.w	r6, r1, r1, lsl #8
   854c8:	ea46 4606 	orr.w	r6, r6, r6, lsl #16
   854cc:	6813      	ldr	r3, [r2, #0]
   854ce:	4610      	mov	r0, r2
   854d0:	4073      	eors	r3, r6
   854d2:	f1a3 3501 	sub.w	r5, r3, #16843009	; 0x1010101
   854d6:	ea25 0303 	bic.w	r3, r5, r3
   854da:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
   854de:	f102 0204 	add.w	r2, r2, #4
   854e2:	d1d9      	bne.n	85498 <memchr+0x34>
   854e4:	3c04      	subs	r4, #4
   854e6:	2c03      	cmp	r4, #3
   854e8:	4610      	mov	r0, r2
   854ea:	d8ef      	bhi.n	854cc <memchr+0x68>
   854ec:	e7d4      	b.n	85498 <memchr+0x34>
   854ee:	4614      	mov	r4, r2
   854f0:	e7d0      	b.n	85494 <memchr+0x30>
   854f2:	4610      	mov	r0, r2
   854f4:	e7e0      	b.n	854b8 <memchr+0x54>
   854f6:	bf00      	nop

000854f8 <memmove>:
   854f8:	4288      	cmp	r0, r1
   854fa:	b5f0      	push	{r4, r5, r6, r7, lr}
   854fc:	d90d      	bls.n	8551a <memmove+0x22>
   854fe:	188b      	adds	r3, r1, r2
   85500:	4298      	cmp	r0, r3
   85502:	d20a      	bcs.n	8551a <memmove+0x22>
   85504:	1881      	adds	r1, r0, r2
   85506:	2a00      	cmp	r2, #0
   85508:	d054      	beq.n	855b4 <memmove+0xbc>
   8550a:	1a9a      	subs	r2, r3, r2
   8550c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   85510:	4293      	cmp	r3, r2
   85512:	f801 4d01 	strb.w	r4, [r1, #-1]!
   85516:	d1f9      	bne.n	8550c <memmove+0x14>
   85518:	bdf0      	pop	{r4, r5, r6, r7, pc}
   8551a:	2a0f      	cmp	r2, #15
   8551c:	d948      	bls.n	855b0 <memmove+0xb8>
   8551e:	ea40 0301 	orr.w	r3, r0, r1
   85522:	079b      	lsls	r3, r3, #30
   85524:	d147      	bne.n	855b6 <memmove+0xbe>
   85526:	4615      	mov	r5, r2
   85528:	f100 0410 	add.w	r4, r0, #16
   8552c:	f101 0310 	add.w	r3, r1, #16
   85530:	f853 6c10 	ldr.w	r6, [r3, #-16]
   85534:	3d10      	subs	r5, #16
   85536:	f844 6c10 	str.w	r6, [r4, #-16]
   8553a:	f853 6c0c 	ldr.w	r6, [r3, #-12]
   8553e:	2d0f      	cmp	r5, #15
   85540:	f844 6c0c 	str.w	r6, [r4, #-12]
   85544:	f853 6c08 	ldr.w	r6, [r3, #-8]
   85548:	f104 0410 	add.w	r4, r4, #16
   8554c:	f844 6c18 	str.w	r6, [r4, #-24]
   85550:	f853 6c04 	ldr.w	r6, [r3, #-4]
   85554:	f103 0310 	add.w	r3, r3, #16
   85558:	f844 6c14 	str.w	r6, [r4, #-20]
   8555c:	d8e8      	bhi.n	85530 <memmove+0x38>
   8555e:	f1a2 0310 	sub.w	r3, r2, #16
   85562:	f023 030f 	bic.w	r3, r3, #15
   85566:	f002 0e0f 	and.w	lr, r2, #15
   8556a:	3310      	adds	r3, #16
   8556c:	f1be 0f03 	cmp.w	lr, #3
   85570:	4419      	add	r1, r3
   85572:	4403      	add	r3, r0
   85574:	d921      	bls.n	855ba <memmove+0xc2>
   85576:	460e      	mov	r6, r1
   85578:	4674      	mov	r4, lr
   8557a:	1f1d      	subs	r5, r3, #4
   8557c:	f856 7b04 	ldr.w	r7, [r6], #4
   85580:	3c04      	subs	r4, #4
   85582:	2c03      	cmp	r4, #3
   85584:	f845 7f04 	str.w	r7, [r5, #4]!
   85588:	d8f8      	bhi.n	8557c <memmove+0x84>
   8558a:	f1ae 0404 	sub.w	r4, lr, #4
   8558e:	f024 0403 	bic.w	r4, r4, #3
   85592:	3404      	adds	r4, #4
   85594:	4423      	add	r3, r4
   85596:	4421      	add	r1, r4
   85598:	f002 0203 	and.w	r2, r2, #3
   8559c:	b152      	cbz	r2, 855b4 <memmove+0xbc>
   8559e:	3b01      	subs	r3, #1
   855a0:	440a      	add	r2, r1
   855a2:	f811 4b01 	ldrb.w	r4, [r1], #1
   855a6:	4291      	cmp	r1, r2
   855a8:	f803 4f01 	strb.w	r4, [r3, #1]!
   855ac:	d1f9      	bne.n	855a2 <memmove+0xaa>
   855ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
   855b0:	4603      	mov	r3, r0
   855b2:	e7f3      	b.n	8559c <memmove+0xa4>
   855b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   855b6:	4603      	mov	r3, r0
   855b8:	e7f1      	b.n	8559e <memmove+0xa6>
   855ba:	4672      	mov	r2, lr
   855bc:	e7ee      	b.n	8559c <memmove+0xa4>
   855be:	bf00      	nop

000855c0 <__malloc_lock>:
   855c0:	4770      	bx	lr
   855c2:	bf00      	nop

000855c4 <__malloc_unlock>:
   855c4:	4770      	bx	lr
   855c6:	bf00      	nop

000855c8 <_realloc_r>:
   855c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   855cc:	4617      	mov	r7, r2
   855ce:	b083      	sub	sp, #12
   855d0:	460d      	mov	r5, r1
   855d2:	2900      	cmp	r1, #0
   855d4:	f000 80e2 	beq.w	8579c <_realloc_r+0x1d4>
   855d8:	4681      	mov	r9, r0
   855da:	f107 040b 	add.w	r4, r7, #11
   855de:	f7ff ffef 	bl	855c0 <__malloc_lock>
   855e2:	f855 3c04 	ldr.w	r3, [r5, #-4]
   855e6:	2c16      	cmp	r4, #22
   855e8:	f023 0603 	bic.w	r6, r3, #3
   855ec:	f1a5 0808 	sub.w	r8, r5, #8
   855f0:	d84b      	bhi.n	8568a <_realloc_r+0xc2>
   855f2:	2210      	movs	r2, #16
   855f4:	4614      	mov	r4, r2
   855f6:	42a7      	cmp	r7, r4
   855f8:	d84c      	bhi.n	85694 <_realloc_r+0xcc>
   855fa:	4296      	cmp	r6, r2
   855fc:	da51      	bge.n	856a2 <_realloc_r+0xda>
   855fe:	f8df b3a4 	ldr.w	fp, [pc, #932]	; 859a4 <_realloc_r+0x3dc>
   85602:	eb08 0106 	add.w	r1, r8, r6
   85606:	f8db 0008 	ldr.w	r0, [fp, #8]
   8560a:	4288      	cmp	r0, r1
   8560c:	f000 80d3 	beq.w	857b6 <_realloc_r+0x1ee>
   85610:	6848      	ldr	r0, [r1, #4]
   85612:	f020 0e01 	bic.w	lr, r0, #1
   85616:	448e      	add	lr, r1
   85618:	f8de e004 	ldr.w	lr, [lr, #4]
   8561c:	f01e 0f01 	tst.w	lr, #1
   85620:	d154      	bne.n	856cc <_realloc_r+0x104>
   85622:	f020 0003 	bic.w	r0, r0, #3
   85626:	4430      	add	r0, r6
   85628:	4290      	cmp	r0, r2
   8562a:	f280 80bd 	bge.w	857a8 <_realloc_r+0x1e0>
   8562e:	07db      	lsls	r3, r3, #31
   85630:	f100 8090 	bmi.w	85754 <_realloc_r+0x18c>
   85634:	f855 3c08 	ldr.w	r3, [r5, #-8]
   85638:	ebc3 0a08 	rsb	sl, r3, r8
   8563c:	f8da 3004 	ldr.w	r3, [sl, #4]
   85640:	f023 0303 	bic.w	r3, r3, #3
   85644:	eb00 0e03 	add.w	lr, r0, r3
   85648:	4596      	cmp	lr, r2
   8564a:	db49      	blt.n	856e0 <_realloc_r+0x118>
   8564c:	4657      	mov	r7, sl
   8564e:	68cb      	ldr	r3, [r1, #12]
   85650:	6889      	ldr	r1, [r1, #8]
   85652:	1f32      	subs	r2, r6, #4
   85654:	60cb      	str	r3, [r1, #12]
   85656:	6099      	str	r1, [r3, #8]
   85658:	f857 1f08 	ldr.w	r1, [r7, #8]!
   8565c:	f8da 300c 	ldr.w	r3, [sl, #12]
   85660:	2a24      	cmp	r2, #36	; 0x24
   85662:	60cb      	str	r3, [r1, #12]
   85664:	6099      	str	r1, [r3, #8]
   85666:	f200 8133 	bhi.w	858d0 <_realloc_r+0x308>
   8566a:	2a13      	cmp	r2, #19
   8566c:	f240 80fa 	bls.w	85864 <_realloc_r+0x29c>
   85670:	682b      	ldr	r3, [r5, #0]
   85672:	2a1b      	cmp	r2, #27
   85674:	f8ca 3008 	str.w	r3, [sl, #8]
   85678:	686b      	ldr	r3, [r5, #4]
   8567a:	f8ca 300c 	str.w	r3, [sl, #12]
   8567e:	f200 813b 	bhi.w	858f8 <_realloc_r+0x330>
   85682:	3508      	adds	r5, #8
   85684:	f10a 0310 	add.w	r3, sl, #16
   85688:	e0ed      	b.n	85866 <_realloc_r+0x29e>
   8568a:	f024 0407 	bic.w	r4, r4, #7
   8568e:	2c00      	cmp	r4, #0
   85690:	4622      	mov	r2, r4
   85692:	dab0      	bge.n	855f6 <_realloc_r+0x2e>
   85694:	230c      	movs	r3, #12
   85696:	2000      	movs	r0, #0
   85698:	f8c9 3000 	str.w	r3, [r9]
   8569c:	b003      	add	sp, #12
   8569e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   856a2:	462f      	mov	r7, r5
   856a4:	1b32      	subs	r2, r6, r4
   856a6:	2a0f      	cmp	r2, #15
   856a8:	f003 0301 	and.w	r3, r3, #1
   856ac:	d840      	bhi.n	85730 <_realloc_r+0x168>
   856ae:	4333      	orrs	r3, r6
   856b0:	f8c8 3004 	str.w	r3, [r8, #4]
   856b4:	4446      	add	r6, r8
   856b6:	6873      	ldr	r3, [r6, #4]
   856b8:	f043 0301 	orr.w	r3, r3, #1
   856bc:	6073      	str	r3, [r6, #4]
   856be:	4648      	mov	r0, r9
   856c0:	f7ff ff80 	bl	855c4 <__malloc_unlock>
   856c4:	4638      	mov	r0, r7
   856c6:	b003      	add	sp, #12
   856c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   856cc:	07d9      	lsls	r1, r3, #31
   856ce:	d441      	bmi.n	85754 <_realloc_r+0x18c>
   856d0:	f855 3c08 	ldr.w	r3, [r5, #-8]
   856d4:	ebc3 0a08 	rsb	sl, r3, r8
   856d8:	f8da 3004 	ldr.w	r3, [sl, #4]
   856dc:	f023 0303 	bic.w	r3, r3, #3
   856e0:	4433      	add	r3, r6
   856e2:	4293      	cmp	r3, r2
   856e4:	db36      	blt.n	85754 <_realloc_r+0x18c>
   856e6:	4657      	mov	r7, sl
   856e8:	f8da 100c 	ldr.w	r1, [sl, #12]
   856ec:	f857 0f08 	ldr.w	r0, [r7, #8]!
   856f0:	1f32      	subs	r2, r6, #4
   856f2:	2a24      	cmp	r2, #36	; 0x24
   856f4:	60c1      	str	r1, [r0, #12]
   856f6:	6088      	str	r0, [r1, #8]
   856f8:	f200 80f5 	bhi.w	858e6 <_realloc_r+0x31e>
   856fc:	2a13      	cmp	r2, #19
   856fe:	f240 80f0 	bls.w	858e2 <_realloc_r+0x31a>
   85702:	6829      	ldr	r1, [r5, #0]
   85704:	2a1b      	cmp	r2, #27
   85706:	f8ca 1008 	str.w	r1, [sl, #8]
   8570a:	6869      	ldr	r1, [r5, #4]
   8570c:	f8ca 100c 	str.w	r1, [sl, #12]
   85710:	f200 8107 	bhi.w	85922 <_realloc_r+0x35a>
   85714:	3508      	adds	r5, #8
   85716:	f10a 0210 	add.w	r2, sl, #16
   8571a:	6829      	ldr	r1, [r5, #0]
   8571c:	461e      	mov	r6, r3
   8571e:	6011      	str	r1, [r2, #0]
   85720:	6869      	ldr	r1, [r5, #4]
   85722:	46d0      	mov	r8, sl
   85724:	6051      	str	r1, [r2, #4]
   85726:	68ab      	ldr	r3, [r5, #8]
   85728:	6093      	str	r3, [r2, #8]
   8572a:	f8da 3004 	ldr.w	r3, [sl, #4]
   8572e:	e7b9      	b.n	856a4 <_realloc_r+0xdc>
   85730:	eb08 0104 	add.w	r1, r8, r4
   85734:	4323      	orrs	r3, r4
   85736:	f042 0001 	orr.w	r0, r2, #1
   8573a:	f8c8 3004 	str.w	r3, [r8, #4]
   8573e:	440a      	add	r2, r1
   85740:	6048      	str	r0, [r1, #4]
   85742:	6853      	ldr	r3, [r2, #4]
   85744:	3108      	adds	r1, #8
   85746:	f043 0301 	orr.w	r3, r3, #1
   8574a:	6053      	str	r3, [r2, #4]
   8574c:	4648      	mov	r0, r9
   8574e:	f7ff f8f1 	bl	84934 <_free_r>
   85752:	e7b4      	b.n	856be <_realloc_r+0xf6>
   85754:	4639      	mov	r1, r7
   85756:	4648      	mov	r0, r9
   85758:	f7ff fbfe 	bl	84f58 <_malloc_r>
   8575c:	4607      	mov	r7, r0
   8575e:	2800      	cmp	r0, #0
   85760:	d0ad      	beq.n	856be <_realloc_r+0xf6>
   85762:	f855 3c04 	ldr.w	r3, [r5, #-4]
   85766:	f1a0 0108 	sub.w	r1, r0, #8
   8576a:	f023 0201 	bic.w	r2, r3, #1
   8576e:	4442      	add	r2, r8
   85770:	4291      	cmp	r1, r2
   85772:	f000 80a6 	beq.w	858c2 <_realloc_r+0x2fa>
   85776:	1f32      	subs	r2, r6, #4
   85778:	2a24      	cmp	r2, #36	; 0x24
   8577a:	f200 8093 	bhi.w	858a4 <_realloc_r+0x2dc>
   8577e:	2a13      	cmp	r2, #19
   85780:	d865      	bhi.n	8584e <_realloc_r+0x286>
   85782:	4603      	mov	r3, r0
   85784:	462a      	mov	r2, r5
   85786:	6811      	ldr	r1, [r2, #0]
   85788:	6019      	str	r1, [r3, #0]
   8578a:	6851      	ldr	r1, [r2, #4]
   8578c:	6059      	str	r1, [r3, #4]
   8578e:	6892      	ldr	r2, [r2, #8]
   85790:	609a      	str	r2, [r3, #8]
   85792:	4629      	mov	r1, r5
   85794:	4648      	mov	r0, r9
   85796:	f7ff f8cd 	bl	84934 <_free_r>
   8579a:	e790      	b.n	856be <_realloc_r+0xf6>
   8579c:	4611      	mov	r1, r2
   8579e:	b003      	add	sp, #12
   857a0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   857a4:	f7ff bbd8 	b.w	84f58 <_malloc_r>
   857a8:	68ca      	ldr	r2, [r1, #12]
   857aa:	6889      	ldr	r1, [r1, #8]
   857ac:	462f      	mov	r7, r5
   857ae:	60ca      	str	r2, [r1, #12]
   857b0:	4606      	mov	r6, r0
   857b2:	6091      	str	r1, [r2, #8]
   857b4:	e776      	b.n	856a4 <_realloc_r+0xdc>
   857b6:	6841      	ldr	r1, [r0, #4]
   857b8:	f104 0010 	add.w	r0, r4, #16
   857bc:	f021 0103 	bic.w	r1, r1, #3
   857c0:	4431      	add	r1, r6
   857c2:	4281      	cmp	r1, r0
   857c4:	da5a      	bge.n	8587c <_realloc_r+0x2b4>
   857c6:	07db      	lsls	r3, r3, #31
   857c8:	d4c4      	bmi.n	85754 <_realloc_r+0x18c>
   857ca:	f855 3c08 	ldr.w	r3, [r5, #-8]
   857ce:	ebc3 0a08 	rsb	sl, r3, r8
   857d2:	f8da 3004 	ldr.w	r3, [sl, #4]
   857d6:	f023 0303 	bic.w	r3, r3, #3
   857da:	eb01 0c03 	add.w	ip, r1, r3
   857de:	4560      	cmp	r0, ip
   857e0:	f73f af7e 	bgt.w	856e0 <_realloc_r+0x118>
   857e4:	4657      	mov	r7, sl
   857e6:	f8da 300c 	ldr.w	r3, [sl, #12]
   857ea:	f857 1f08 	ldr.w	r1, [r7, #8]!
   857ee:	1f32      	subs	r2, r6, #4
   857f0:	2a24      	cmp	r2, #36	; 0x24
   857f2:	60cb      	str	r3, [r1, #12]
   857f4:	6099      	str	r1, [r3, #8]
   857f6:	f200 80b6 	bhi.w	85966 <_realloc_r+0x39e>
   857fa:	2a13      	cmp	r2, #19
   857fc:	f240 80a7 	bls.w	8594e <_realloc_r+0x386>
   85800:	682b      	ldr	r3, [r5, #0]
   85802:	2a1b      	cmp	r2, #27
   85804:	f8ca 3008 	str.w	r3, [sl, #8]
   85808:	686b      	ldr	r3, [r5, #4]
   8580a:	f8ca 300c 	str.w	r3, [sl, #12]
   8580e:	f200 80b3 	bhi.w	85978 <_realloc_r+0x3b0>
   85812:	3508      	adds	r5, #8
   85814:	f10a 0310 	add.w	r3, sl, #16
   85818:	682a      	ldr	r2, [r5, #0]
   8581a:	601a      	str	r2, [r3, #0]
   8581c:	686a      	ldr	r2, [r5, #4]
   8581e:	605a      	str	r2, [r3, #4]
   85820:	68aa      	ldr	r2, [r5, #8]
   85822:	609a      	str	r2, [r3, #8]
   85824:	ebc4 030c 	rsb	r3, r4, ip
   85828:	eb0a 0204 	add.w	r2, sl, r4
   8582c:	f043 0301 	orr.w	r3, r3, #1
   85830:	f8cb 2008 	str.w	r2, [fp, #8]
   85834:	6053      	str	r3, [r2, #4]
   85836:	f8da 3004 	ldr.w	r3, [sl, #4]
   8583a:	4648      	mov	r0, r9
   8583c:	f003 0301 	and.w	r3, r3, #1
   85840:	431c      	orrs	r4, r3
   85842:	f8ca 4004 	str.w	r4, [sl, #4]
   85846:	f7ff febd 	bl	855c4 <__malloc_unlock>
   8584a:	4638      	mov	r0, r7
   8584c:	e73b      	b.n	856c6 <_realloc_r+0xfe>
   8584e:	682b      	ldr	r3, [r5, #0]
   85850:	2a1b      	cmp	r2, #27
   85852:	6003      	str	r3, [r0, #0]
   85854:	686b      	ldr	r3, [r5, #4]
   85856:	6043      	str	r3, [r0, #4]
   85858:	d828      	bhi.n	858ac <_realloc_r+0x2e4>
   8585a:	f100 0308 	add.w	r3, r0, #8
   8585e:	f105 0208 	add.w	r2, r5, #8
   85862:	e790      	b.n	85786 <_realloc_r+0x1be>
   85864:	463b      	mov	r3, r7
   85866:	682a      	ldr	r2, [r5, #0]
   85868:	4676      	mov	r6, lr
   8586a:	601a      	str	r2, [r3, #0]
   8586c:	686a      	ldr	r2, [r5, #4]
   8586e:	46d0      	mov	r8, sl
   85870:	605a      	str	r2, [r3, #4]
   85872:	68aa      	ldr	r2, [r5, #8]
   85874:	609a      	str	r2, [r3, #8]
   85876:	f8da 3004 	ldr.w	r3, [sl, #4]
   8587a:	e713      	b.n	856a4 <_realloc_r+0xdc>
   8587c:	1b0b      	subs	r3, r1, r4
   8587e:	eb08 0204 	add.w	r2, r8, r4
   85882:	f043 0301 	orr.w	r3, r3, #1
   85886:	f8cb 2008 	str.w	r2, [fp, #8]
   8588a:	6053      	str	r3, [r2, #4]
   8588c:	f855 3c04 	ldr.w	r3, [r5, #-4]
   85890:	4648      	mov	r0, r9
   85892:	f003 0301 	and.w	r3, r3, #1
   85896:	431c      	orrs	r4, r3
   85898:	f845 4c04 	str.w	r4, [r5, #-4]
   8589c:	f7ff fe92 	bl	855c4 <__malloc_unlock>
   858a0:	4628      	mov	r0, r5
   858a2:	e710      	b.n	856c6 <_realloc_r+0xfe>
   858a4:	4629      	mov	r1, r5
   858a6:	f7ff fe27 	bl	854f8 <memmove>
   858aa:	e772      	b.n	85792 <_realloc_r+0x1ca>
   858ac:	68ab      	ldr	r3, [r5, #8]
   858ae:	2a24      	cmp	r2, #36	; 0x24
   858b0:	6083      	str	r3, [r0, #8]
   858b2:	68eb      	ldr	r3, [r5, #12]
   858b4:	60c3      	str	r3, [r0, #12]
   858b6:	d02b      	beq.n	85910 <_realloc_r+0x348>
   858b8:	f100 0310 	add.w	r3, r0, #16
   858bc:	f105 0210 	add.w	r2, r5, #16
   858c0:	e761      	b.n	85786 <_realloc_r+0x1be>
   858c2:	f850 2c04 	ldr.w	r2, [r0, #-4]
   858c6:	462f      	mov	r7, r5
   858c8:	f022 0203 	bic.w	r2, r2, #3
   858cc:	4416      	add	r6, r2
   858ce:	e6e9      	b.n	856a4 <_realloc_r+0xdc>
   858d0:	4629      	mov	r1, r5
   858d2:	4638      	mov	r0, r7
   858d4:	4676      	mov	r6, lr
   858d6:	46d0      	mov	r8, sl
   858d8:	f7ff fe0e 	bl	854f8 <memmove>
   858dc:	f8da 3004 	ldr.w	r3, [sl, #4]
   858e0:	e6e0      	b.n	856a4 <_realloc_r+0xdc>
   858e2:	463a      	mov	r2, r7
   858e4:	e719      	b.n	8571a <_realloc_r+0x152>
   858e6:	4629      	mov	r1, r5
   858e8:	4638      	mov	r0, r7
   858ea:	461e      	mov	r6, r3
   858ec:	46d0      	mov	r8, sl
   858ee:	f7ff fe03 	bl	854f8 <memmove>
   858f2:	f8da 3004 	ldr.w	r3, [sl, #4]
   858f6:	e6d5      	b.n	856a4 <_realloc_r+0xdc>
   858f8:	68ab      	ldr	r3, [r5, #8]
   858fa:	2a24      	cmp	r2, #36	; 0x24
   858fc:	f8ca 3010 	str.w	r3, [sl, #16]
   85900:	68eb      	ldr	r3, [r5, #12]
   85902:	f8ca 3014 	str.w	r3, [sl, #20]
   85906:	d018      	beq.n	8593a <_realloc_r+0x372>
   85908:	3510      	adds	r5, #16
   8590a:	f10a 0318 	add.w	r3, sl, #24
   8590e:	e7aa      	b.n	85866 <_realloc_r+0x29e>
   85910:	692a      	ldr	r2, [r5, #16]
   85912:	f100 0318 	add.w	r3, r0, #24
   85916:	6102      	str	r2, [r0, #16]
   85918:	6969      	ldr	r1, [r5, #20]
   8591a:	f105 0218 	add.w	r2, r5, #24
   8591e:	6141      	str	r1, [r0, #20]
   85920:	e731      	b.n	85786 <_realloc_r+0x1be>
   85922:	68a9      	ldr	r1, [r5, #8]
   85924:	2a24      	cmp	r2, #36	; 0x24
   85926:	f8ca 1010 	str.w	r1, [sl, #16]
   8592a:	68e9      	ldr	r1, [r5, #12]
   8592c:	f8ca 1014 	str.w	r1, [sl, #20]
   85930:	d00f      	beq.n	85952 <_realloc_r+0x38a>
   85932:	3510      	adds	r5, #16
   85934:	f10a 0218 	add.w	r2, sl, #24
   85938:	e6ef      	b.n	8571a <_realloc_r+0x152>
   8593a:	692a      	ldr	r2, [r5, #16]
   8593c:	f10a 0320 	add.w	r3, sl, #32
   85940:	f8ca 2018 	str.w	r2, [sl, #24]
   85944:	696a      	ldr	r2, [r5, #20]
   85946:	3518      	adds	r5, #24
   85948:	f8ca 201c 	str.w	r2, [sl, #28]
   8594c:	e78b      	b.n	85866 <_realloc_r+0x29e>
   8594e:	463b      	mov	r3, r7
   85950:	e762      	b.n	85818 <_realloc_r+0x250>
   85952:	6929      	ldr	r1, [r5, #16]
   85954:	f10a 0220 	add.w	r2, sl, #32
   85958:	f8ca 1018 	str.w	r1, [sl, #24]
   8595c:	6969      	ldr	r1, [r5, #20]
   8595e:	3518      	adds	r5, #24
   85960:	f8ca 101c 	str.w	r1, [sl, #28]
   85964:	e6d9      	b.n	8571a <_realloc_r+0x152>
   85966:	4629      	mov	r1, r5
   85968:	4638      	mov	r0, r7
   8596a:	f8cd c004 	str.w	ip, [sp, #4]
   8596e:	f7ff fdc3 	bl	854f8 <memmove>
   85972:	f8dd c004 	ldr.w	ip, [sp, #4]
   85976:	e755      	b.n	85824 <_realloc_r+0x25c>
   85978:	68ab      	ldr	r3, [r5, #8]
   8597a:	2a24      	cmp	r2, #36	; 0x24
   8597c:	f8ca 3010 	str.w	r3, [sl, #16]
   85980:	68eb      	ldr	r3, [r5, #12]
   85982:	f8ca 3014 	str.w	r3, [sl, #20]
   85986:	d003      	beq.n	85990 <_realloc_r+0x3c8>
   85988:	3510      	adds	r5, #16
   8598a:	f10a 0318 	add.w	r3, sl, #24
   8598e:	e743      	b.n	85818 <_realloc_r+0x250>
   85990:	692a      	ldr	r2, [r5, #16]
   85992:	f10a 0320 	add.w	r3, sl, #32
   85996:	f8ca 2018 	str.w	r2, [sl, #24]
   8599a:	696a      	ldr	r2, [r5, #20]
   8599c:	3518      	adds	r5, #24
   8599e:	f8ca 201c 	str.w	r2, [sl, #28]
   859a2:	e739      	b.n	85818 <_realloc_r+0x250>
   859a4:	20070590 	.word	0x20070590

000859a8 <_sbrk_r>:
   859a8:	b538      	push	{r3, r4, r5, lr}
   859aa:	4c07      	ldr	r4, [pc, #28]	; (859c8 <_sbrk_r+0x20>)
   859ac:	2300      	movs	r3, #0
   859ae:	4605      	mov	r5, r0
   859b0:	4608      	mov	r0, r1
   859b2:	6023      	str	r3, [r4, #0]
   859b4:	f7fd f846 	bl	82a44 <_sbrk>
   859b8:	1c43      	adds	r3, r0, #1
   859ba:	d000      	beq.n	859be <_sbrk_r+0x16>
   859bc:	bd38      	pop	{r3, r4, r5, pc}
   859be:	6823      	ldr	r3, [r4, #0]
   859c0:	2b00      	cmp	r3, #0
   859c2:	d0fb      	beq.n	859bc <_sbrk_r+0x14>
   859c4:	602b      	str	r3, [r5, #0]
   859c6:	bd38      	pop	{r3, r4, r5, pc}
   859c8:	20078c84 	.word	0x20078c84

000859cc <__sread>:
   859cc:	b510      	push	{r4, lr}
   859ce:	460c      	mov	r4, r1
   859d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   859d4:	f000 f9bc 	bl	85d50 <_read_r>
   859d8:	2800      	cmp	r0, #0
   859da:	db03      	blt.n	859e4 <__sread+0x18>
   859dc:	6d23      	ldr	r3, [r4, #80]	; 0x50
   859de:	4403      	add	r3, r0
   859e0:	6523      	str	r3, [r4, #80]	; 0x50
   859e2:	bd10      	pop	{r4, pc}
   859e4:	89a3      	ldrh	r3, [r4, #12]
   859e6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   859ea:	81a3      	strh	r3, [r4, #12]
   859ec:	bd10      	pop	{r4, pc}
   859ee:	bf00      	nop

000859f0 <__swrite>:
   859f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   859f4:	460c      	mov	r4, r1
   859f6:	8989      	ldrh	r1, [r1, #12]
   859f8:	461d      	mov	r5, r3
   859fa:	05cb      	lsls	r3, r1, #23
   859fc:	4616      	mov	r6, r2
   859fe:	4607      	mov	r7, r0
   85a00:	d506      	bpl.n	85a10 <__swrite+0x20>
   85a02:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   85a06:	2200      	movs	r2, #0
   85a08:	2302      	movs	r3, #2
   85a0a:	f000 f98d 	bl	85d28 <_lseek_r>
   85a0e:	89a1      	ldrh	r1, [r4, #12]
   85a10:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
   85a14:	81a1      	strh	r1, [r4, #12]
   85a16:	4638      	mov	r0, r7
   85a18:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   85a1c:	4632      	mov	r2, r6
   85a1e:	462b      	mov	r3, r5
   85a20:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   85a24:	f000 b8a0 	b.w	85b68 <_write_r>

00085a28 <__sseek>:
   85a28:	b510      	push	{r4, lr}
   85a2a:	460c      	mov	r4, r1
   85a2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   85a30:	f000 f97a 	bl	85d28 <_lseek_r>
   85a34:	89a3      	ldrh	r3, [r4, #12]
   85a36:	1c42      	adds	r2, r0, #1
   85a38:	bf0e      	itee	eq
   85a3a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   85a3e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   85a42:	6520      	strne	r0, [r4, #80]	; 0x50
   85a44:	81a3      	strh	r3, [r4, #12]
   85a46:	bd10      	pop	{r4, pc}

00085a48 <__sclose>:
   85a48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   85a4c:	f000 b8f2 	b.w	85c34 <_close_r>

00085a50 <__swbuf_r>:
   85a50:	b570      	push	{r4, r5, r6, lr}
   85a52:	460d      	mov	r5, r1
   85a54:	4614      	mov	r4, r2
   85a56:	4606      	mov	r6, r0
   85a58:	b110      	cbz	r0, 85a60 <__swbuf_r+0x10>
   85a5a:	6b83      	ldr	r3, [r0, #56]	; 0x38
   85a5c:	2b00      	cmp	r3, #0
   85a5e:	d048      	beq.n	85af2 <__swbuf_r+0xa2>
   85a60:	89a2      	ldrh	r2, [r4, #12]
   85a62:	69a3      	ldr	r3, [r4, #24]
   85a64:	b291      	uxth	r1, r2
   85a66:	0708      	lsls	r0, r1, #28
   85a68:	60a3      	str	r3, [r4, #8]
   85a6a:	d538      	bpl.n	85ade <__swbuf_r+0x8e>
   85a6c:	6923      	ldr	r3, [r4, #16]
   85a6e:	2b00      	cmp	r3, #0
   85a70:	d035      	beq.n	85ade <__swbuf_r+0x8e>
   85a72:	0489      	lsls	r1, r1, #18
   85a74:	b2ed      	uxtb	r5, r5
   85a76:	d515      	bpl.n	85aa4 <__swbuf_r+0x54>
   85a78:	6822      	ldr	r2, [r4, #0]
   85a7a:	6961      	ldr	r1, [r4, #20]
   85a7c:	1ad3      	subs	r3, r2, r3
   85a7e:	428b      	cmp	r3, r1
   85a80:	da1c      	bge.n	85abc <__swbuf_r+0x6c>
   85a82:	3301      	adds	r3, #1
   85a84:	68a1      	ldr	r1, [r4, #8]
   85a86:	1c50      	adds	r0, r2, #1
   85a88:	3901      	subs	r1, #1
   85a8a:	60a1      	str	r1, [r4, #8]
   85a8c:	6020      	str	r0, [r4, #0]
   85a8e:	7015      	strb	r5, [r2, #0]
   85a90:	6962      	ldr	r2, [r4, #20]
   85a92:	429a      	cmp	r2, r3
   85a94:	d01a      	beq.n	85acc <__swbuf_r+0x7c>
   85a96:	89a3      	ldrh	r3, [r4, #12]
   85a98:	07db      	lsls	r3, r3, #31
   85a9a:	d501      	bpl.n	85aa0 <__swbuf_r+0x50>
   85a9c:	2d0a      	cmp	r5, #10
   85a9e:	d015      	beq.n	85acc <__swbuf_r+0x7c>
   85aa0:	4628      	mov	r0, r5
   85aa2:	bd70      	pop	{r4, r5, r6, pc}
   85aa4:	6e61      	ldr	r1, [r4, #100]	; 0x64
   85aa6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   85aaa:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
   85aae:	81a2      	strh	r2, [r4, #12]
   85ab0:	6822      	ldr	r2, [r4, #0]
   85ab2:	6661      	str	r1, [r4, #100]	; 0x64
   85ab4:	6961      	ldr	r1, [r4, #20]
   85ab6:	1ad3      	subs	r3, r2, r3
   85ab8:	428b      	cmp	r3, r1
   85aba:	dbe2      	blt.n	85a82 <__swbuf_r+0x32>
   85abc:	4630      	mov	r0, r6
   85abe:	4621      	mov	r1, r4
   85ac0:	f7fe fdcc 	bl	8465c <_fflush_r>
   85ac4:	b940      	cbnz	r0, 85ad8 <__swbuf_r+0x88>
   85ac6:	6822      	ldr	r2, [r4, #0]
   85ac8:	2301      	movs	r3, #1
   85aca:	e7db      	b.n	85a84 <__swbuf_r+0x34>
   85acc:	4630      	mov	r0, r6
   85ace:	4621      	mov	r1, r4
   85ad0:	f7fe fdc4 	bl	8465c <_fflush_r>
   85ad4:	2800      	cmp	r0, #0
   85ad6:	d0e3      	beq.n	85aa0 <__swbuf_r+0x50>
   85ad8:	f04f 30ff 	mov.w	r0, #4294967295
   85adc:	bd70      	pop	{r4, r5, r6, pc}
   85ade:	4630      	mov	r0, r6
   85ae0:	4621      	mov	r1, r4
   85ae2:	f7fe fca5 	bl	84430 <__swsetup_r>
   85ae6:	2800      	cmp	r0, #0
   85ae8:	d1f6      	bne.n	85ad8 <__swbuf_r+0x88>
   85aea:	89a2      	ldrh	r2, [r4, #12]
   85aec:	6923      	ldr	r3, [r4, #16]
   85aee:	b291      	uxth	r1, r2
   85af0:	e7bf      	b.n	85a72 <__swbuf_r+0x22>
   85af2:	f7fe fe47 	bl	84784 <__sinit>
   85af6:	e7b3      	b.n	85a60 <__swbuf_r+0x10>

00085af8 <_wcrtomb_r>:
   85af8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   85afc:	4605      	mov	r5, r0
   85afe:	b086      	sub	sp, #24
   85b00:	461e      	mov	r6, r3
   85b02:	460c      	mov	r4, r1
   85b04:	b1a1      	cbz	r1, 85b30 <_wcrtomb_r+0x38>
   85b06:	4b10      	ldr	r3, [pc, #64]	; (85b48 <_wcrtomb_r+0x50>)
   85b08:	4617      	mov	r7, r2
   85b0a:	f8d3 8000 	ldr.w	r8, [r3]
   85b0e:	f7ff f9a1 	bl	84e54 <__locale_charset>
   85b12:	9600      	str	r6, [sp, #0]
   85b14:	4603      	mov	r3, r0
   85b16:	4621      	mov	r1, r4
   85b18:	463a      	mov	r2, r7
   85b1a:	4628      	mov	r0, r5
   85b1c:	47c0      	blx	r8
   85b1e:	1c43      	adds	r3, r0, #1
   85b20:	d103      	bne.n	85b2a <_wcrtomb_r+0x32>
   85b22:	2200      	movs	r2, #0
   85b24:	238a      	movs	r3, #138	; 0x8a
   85b26:	6032      	str	r2, [r6, #0]
   85b28:	602b      	str	r3, [r5, #0]
   85b2a:	b006      	add	sp, #24
   85b2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   85b30:	4b05      	ldr	r3, [pc, #20]	; (85b48 <_wcrtomb_r+0x50>)
   85b32:	681f      	ldr	r7, [r3, #0]
   85b34:	f7ff f98e 	bl	84e54 <__locale_charset>
   85b38:	9600      	str	r6, [sp, #0]
   85b3a:	4603      	mov	r3, r0
   85b3c:	4622      	mov	r2, r4
   85b3e:	4628      	mov	r0, r5
   85b40:	a903      	add	r1, sp, #12
   85b42:	47b8      	blx	r7
   85b44:	e7eb      	b.n	85b1e <_wcrtomb_r+0x26>
   85b46:	bf00      	nop
   85b48:	200709a0 	.word	0x200709a0

00085b4c <__ascii_wctomb>:
   85b4c:	b121      	cbz	r1, 85b58 <__ascii_wctomb+0xc>
   85b4e:	2aff      	cmp	r2, #255	; 0xff
   85b50:	d804      	bhi.n	85b5c <__ascii_wctomb+0x10>
   85b52:	700a      	strb	r2, [r1, #0]
   85b54:	2001      	movs	r0, #1
   85b56:	4770      	bx	lr
   85b58:	4608      	mov	r0, r1
   85b5a:	4770      	bx	lr
   85b5c:	238a      	movs	r3, #138	; 0x8a
   85b5e:	6003      	str	r3, [r0, #0]
   85b60:	f04f 30ff 	mov.w	r0, #4294967295
   85b64:	4770      	bx	lr
   85b66:	bf00      	nop

00085b68 <_write_r>:
   85b68:	b570      	push	{r4, r5, r6, lr}
   85b6a:	4c08      	ldr	r4, [pc, #32]	; (85b8c <_write_r+0x24>)
   85b6c:	4606      	mov	r6, r0
   85b6e:	2500      	movs	r5, #0
   85b70:	4608      	mov	r0, r1
   85b72:	4611      	mov	r1, r2
   85b74:	461a      	mov	r2, r3
   85b76:	6025      	str	r5, [r4, #0]
   85b78:	f7fc fab6 	bl	820e8 <_write>
   85b7c:	1c43      	adds	r3, r0, #1
   85b7e:	d000      	beq.n	85b82 <_write_r+0x1a>
   85b80:	bd70      	pop	{r4, r5, r6, pc}
   85b82:	6823      	ldr	r3, [r4, #0]
   85b84:	2b00      	cmp	r3, #0
   85b86:	d0fb      	beq.n	85b80 <_write_r+0x18>
   85b88:	6033      	str	r3, [r6, #0]
   85b8a:	bd70      	pop	{r4, r5, r6, pc}
   85b8c:	20078c84 	.word	0x20078c84

00085b90 <__register_exitproc>:
   85b90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   85b94:	4c25      	ldr	r4, [pc, #148]	; (85c2c <__register_exitproc+0x9c>)
   85b96:	4606      	mov	r6, r0
   85b98:	6825      	ldr	r5, [r4, #0]
   85b9a:	4688      	mov	r8, r1
   85b9c:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
   85ba0:	4692      	mov	sl, r2
   85ba2:	4699      	mov	r9, r3
   85ba4:	b3c4      	cbz	r4, 85c18 <__register_exitproc+0x88>
   85ba6:	6860      	ldr	r0, [r4, #4]
   85ba8:	281f      	cmp	r0, #31
   85baa:	dc17      	bgt.n	85bdc <__register_exitproc+0x4c>
   85bac:	1c41      	adds	r1, r0, #1
   85bae:	b176      	cbz	r6, 85bce <__register_exitproc+0x3e>
   85bb0:	eb04 0380 	add.w	r3, r4, r0, lsl #2
   85bb4:	f8c3 a088 	str.w	sl, [r3, #136]	; 0x88
   85bb8:	f8d4 5188 	ldr.w	r5, [r4, #392]	; 0x188
   85bbc:	2201      	movs	r2, #1
   85bbe:	4082      	lsls	r2, r0
   85bc0:	4315      	orrs	r5, r2
   85bc2:	2e02      	cmp	r6, #2
   85bc4:	f8c4 5188 	str.w	r5, [r4, #392]	; 0x188
   85bc8:	f8c3 9108 	str.w	r9, [r3, #264]	; 0x108
   85bcc:	d01e      	beq.n	85c0c <__register_exitproc+0x7c>
   85bce:	1c83      	adds	r3, r0, #2
   85bd0:	6061      	str	r1, [r4, #4]
   85bd2:	2000      	movs	r0, #0
   85bd4:	f844 8023 	str.w	r8, [r4, r3, lsl #2]
   85bd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   85bdc:	4b14      	ldr	r3, [pc, #80]	; (85c30 <__register_exitproc+0xa0>)
   85bde:	b303      	cbz	r3, 85c22 <__register_exitproc+0x92>
   85be0:	f44f 70c8 	mov.w	r0, #400	; 0x190
   85be4:	f7ff f9b0 	bl	84f48 <malloc>
   85be8:	4604      	mov	r4, r0
   85bea:	b1d0      	cbz	r0, 85c22 <__register_exitproc+0x92>
   85bec:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
   85bf0:	2700      	movs	r7, #0
   85bf2:	e884 0088 	stmia.w	r4, {r3, r7}
   85bf6:	4638      	mov	r0, r7
   85bf8:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
   85bfc:	2101      	movs	r1, #1
   85bfe:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
   85c02:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
   85c06:	2e00      	cmp	r6, #0
   85c08:	d0e1      	beq.n	85bce <__register_exitproc+0x3e>
   85c0a:	e7d1      	b.n	85bb0 <__register_exitproc+0x20>
   85c0c:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
   85c10:	431a      	orrs	r2, r3
   85c12:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
   85c16:	e7da      	b.n	85bce <__register_exitproc+0x3e>
   85c18:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
   85c1c:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
   85c20:	e7c1      	b.n	85ba6 <__register_exitproc+0x16>
   85c22:	f04f 30ff 	mov.w	r0, #4294967295
   85c26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   85c2a:	bf00      	nop
   85c2c:	00086474 	.word	0x00086474
   85c30:	00084f49 	.word	0x00084f49

00085c34 <_close_r>:
   85c34:	b538      	push	{r3, r4, r5, lr}
   85c36:	4c07      	ldr	r4, [pc, #28]	; (85c54 <_close_r+0x20>)
   85c38:	2300      	movs	r3, #0
   85c3a:	4605      	mov	r5, r0
   85c3c:	4608      	mov	r0, r1
   85c3e:	6023      	str	r3, [r4, #0]
   85c40:	f7fc ff1a 	bl	82a78 <_close>
   85c44:	1c43      	adds	r3, r0, #1
   85c46:	d000      	beq.n	85c4a <_close_r+0x16>
   85c48:	bd38      	pop	{r3, r4, r5, pc}
   85c4a:	6823      	ldr	r3, [r4, #0]
   85c4c:	2b00      	cmp	r3, #0
   85c4e:	d0fb      	beq.n	85c48 <_close_r+0x14>
   85c50:	602b      	str	r3, [r5, #0]
   85c52:	bd38      	pop	{r3, r4, r5, pc}
   85c54:	20078c84 	.word	0x20078c84

00085c58 <_fclose_r>:
   85c58:	2900      	cmp	r1, #0
   85c5a:	d03d      	beq.n	85cd8 <_fclose_r+0x80>
   85c5c:	b570      	push	{r4, r5, r6, lr}
   85c5e:	4605      	mov	r5, r0
   85c60:	460c      	mov	r4, r1
   85c62:	b108      	cbz	r0, 85c68 <_fclose_r+0x10>
   85c64:	6b83      	ldr	r3, [r0, #56]	; 0x38
   85c66:	b37b      	cbz	r3, 85cc8 <_fclose_r+0x70>
   85c68:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   85c6c:	b90b      	cbnz	r3, 85c72 <_fclose_r+0x1a>
   85c6e:	2000      	movs	r0, #0
   85c70:	bd70      	pop	{r4, r5, r6, pc}
   85c72:	4628      	mov	r0, r5
   85c74:	4621      	mov	r1, r4
   85c76:	f7fe fc4d 	bl	84514 <__sflush_r>
   85c7a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   85c7c:	4606      	mov	r6, r0
   85c7e:	b133      	cbz	r3, 85c8e <_fclose_r+0x36>
   85c80:	4628      	mov	r0, r5
   85c82:	69e1      	ldr	r1, [r4, #28]
   85c84:	4798      	blx	r3
   85c86:	2800      	cmp	r0, #0
   85c88:	bfb8      	it	lt
   85c8a:	f04f 36ff 	movlt.w	r6, #4294967295
   85c8e:	89a3      	ldrh	r3, [r4, #12]
   85c90:	061b      	lsls	r3, r3, #24
   85c92:	d41c      	bmi.n	85cce <_fclose_r+0x76>
   85c94:	6b21      	ldr	r1, [r4, #48]	; 0x30
   85c96:	b141      	cbz	r1, 85caa <_fclose_r+0x52>
   85c98:	f104 0340 	add.w	r3, r4, #64	; 0x40
   85c9c:	4299      	cmp	r1, r3
   85c9e:	d002      	beq.n	85ca6 <_fclose_r+0x4e>
   85ca0:	4628      	mov	r0, r5
   85ca2:	f7fe fe47 	bl	84934 <_free_r>
   85ca6:	2300      	movs	r3, #0
   85ca8:	6323      	str	r3, [r4, #48]	; 0x30
   85caa:	6c61      	ldr	r1, [r4, #68]	; 0x44
   85cac:	b121      	cbz	r1, 85cb8 <_fclose_r+0x60>
   85cae:	4628      	mov	r0, r5
   85cb0:	f7fe fe40 	bl	84934 <_free_r>
   85cb4:	2300      	movs	r3, #0
   85cb6:	6463      	str	r3, [r4, #68]	; 0x44
   85cb8:	f7fe fd6a 	bl	84790 <__sfp_lock_acquire>
   85cbc:	2300      	movs	r3, #0
   85cbe:	81a3      	strh	r3, [r4, #12]
   85cc0:	f7fe fd68 	bl	84794 <__sfp_lock_release>
   85cc4:	4630      	mov	r0, r6
   85cc6:	bd70      	pop	{r4, r5, r6, pc}
   85cc8:	f7fe fd5c 	bl	84784 <__sinit>
   85ccc:	e7cc      	b.n	85c68 <_fclose_r+0x10>
   85cce:	4628      	mov	r0, r5
   85cd0:	6921      	ldr	r1, [r4, #16]
   85cd2:	f7fe fe2f 	bl	84934 <_free_r>
   85cd6:	e7dd      	b.n	85c94 <_fclose_r+0x3c>
   85cd8:	2000      	movs	r0, #0
   85cda:	4770      	bx	lr

00085cdc <_fstat_r>:
   85cdc:	b538      	push	{r3, r4, r5, lr}
   85cde:	4c08      	ldr	r4, [pc, #32]	; (85d00 <_fstat_r+0x24>)
   85ce0:	2300      	movs	r3, #0
   85ce2:	4605      	mov	r5, r0
   85ce4:	4608      	mov	r0, r1
   85ce6:	4611      	mov	r1, r2
   85ce8:	6023      	str	r3, [r4, #0]
   85cea:	f7fc fec9 	bl	82a80 <_fstat>
   85cee:	1c43      	adds	r3, r0, #1
   85cf0:	d000      	beq.n	85cf4 <_fstat_r+0x18>
   85cf2:	bd38      	pop	{r3, r4, r5, pc}
   85cf4:	6823      	ldr	r3, [r4, #0]
   85cf6:	2b00      	cmp	r3, #0
   85cf8:	d0fb      	beq.n	85cf2 <_fstat_r+0x16>
   85cfa:	602b      	str	r3, [r5, #0]
   85cfc:	bd38      	pop	{r3, r4, r5, pc}
   85cfe:	bf00      	nop
   85d00:	20078c84 	.word	0x20078c84

00085d04 <_isatty_r>:
   85d04:	b538      	push	{r3, r4, r5, lr}
   85d06:	4c07      	ldr	r4, [pc, #28]	; (85d24 <_isatty_r+0x20>)
   85d08:	2300      	movs	r3, #0
   85d0a:	4605      	mov	r5, r0
   85d0c:	4608      	mov	r0, r1
   85d0e:	6023      	str	r3, [r4, #0]
   85d10:	f7fc febc 	bl	82a8c <_isatty>
   85d14:	1c43      	adds	r3, r0, #1
   85d16:	d000      	beq.n	85d1a <_isatty_r+0x16>
   85d18:	bd38      	pop	{r3, r4, r5, pc}
   85d1a:	6823      	ldr	r3, [r4, #0]
   85d1c:	2b00      	cmp	r3, #0
   85d1e:	d0fb      	beq.n	85d18 <_isatty_r+0x14>
   85d20:	602b      	str	r3, [r5, #0]
   85d22:	bd38      	pop	{r3, r4, r5, pc}
   85d24:	20078c84 	.word	0x20078c84

00085d28 <_lseek_r>:
   85d28:	b570      	push	{r4, r5, r6, lr}
   85d2a:	4c08      	ldr	r4, [pc, #32]	; (85d4c <_lseek_r+0x24>)
   85d2c:	4606      	mov	r6, r0
   85d2e:	2500      	movs	r5, #0
   85d30:	4608      	mov	r0, r1
   85d32:	4611      	mov	r1, r2
   85d34:	461a      	mov	r2, r3
   85d36:	6025      	str	r5, [r4, #0]
   85d38:	f7fc feaa 	bl	82a90 <_lseek>
   85d3c:	1c43      	adds	r3, r0, #1
   85d3e:	d000      	beq.n	85d42 <_lseek_r+0x1a>
   85d40:	bd70      	pop	{r4, r5, r6, pc}
   85d42:	6823      	ldr	r3, [r4, #0]
   85d44:	2b00      	cmp	r3, #0
   85d46:	d0fb      	beq.n	85d40 <_lseek_r+0x18>
   85d48:	6033      	str	r3, [r6, #0]
   85d4a:	bd70      	pop	{r4, r5, r6, pc}
   85d4c:	20078c84 	.word	0x20078c84

00085d50 <_read_r>:
   85d50:	b570      	push	{r4, r5, r6, lr}
   85d52:	4c08      	ldr	r4, [pc, #32]	; (85d74 <_read_r+0x24>)
   85d54:	4606      	mov	r6, r0
   85d56:	2500      	movs	r5, #0
   85d58:	4608      	mov	r0, r1
   85d5a:	4611      	mov	r1, r2
   85d5c:	461a      	mov	r2, r3
   85d5e:	6025      	str	r5, [r4, #0]
   85d60:	f7fa fa86 	bl	80270 <_read>
   85d64:	1c43      	adds	r3, r0, #1
   85d66:	d000      	beq.n	85d6a <_read_r+0x1a>
   85d68:	bd70      	pop	{r4, r5, r6, pc}
   85d6a:	6823      	ldr	r3, [r4, #0]
   85d6c:	2b00      	cmp	r3, #0
   85d6e:	d0fb      	beq.n	85d68 <_read_r+0x18>
   85d70:	6033      	str	r3, [r6, #0]
   85d72:	bd70      	pop	{r4, r5, r6, pc}
   85d74:	20078c84 	.word	0x20078c84

00085d78 <__aeabi_uldivmod>:
   85d78:	b953      	cbnz	r3, 85d90 <__aeabi_uldivmod+0x18>
   85d7a:	b94a      	cbnz	r2, 85d90 <__aeabi_uldivmod+0x18>
   85d7c:	2900      	cmp	r1, #0
   85d7e:	bf08      	it	eq
   85d80:	2800      	cmpeq	r0, #0
   85d82:	bf1c      	itt	ne
   85d84:	f04f 31ff 	movne.w	r1, #4294967295
   85d88:	f04f 30ff 	movne.w	r0, #4294967295
   85d8c:	f000 b83c 	b.w	85e08 <__aeabi_idiv0>
   85d90:	b082      	sub	sp, #8
   85d92:	46ec      	mov	ip, sp
   85d94:	e92d 5000 	stmdb	sp!, {ip, lr}
   85d98:	f000 f81e 	bl	85dd8 <__gnu_uldivmod_helper>
   85d9c:	f8dd e004 	ldr.w	lr, [sp, #4]
   85da0:	b002      	add	sp, #8
   85da2:	bc0c      	pop	{r2, r3}
   85da4:	4770      	bx	lr
   85da6:	bf00      	nop

00085da8 <__gnu_ldivmod_helper>:
   85da8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   85dac:	9c06      	ldr	r4, [sp, #24]
   85dae:	4690      	mov	r8, r2
   85db0:	4606      	mov	r6, r0
   85db2:	460f      	mov	r7, r1
   85db4:	461d      	mov	r5, r3
   85db6:	f000 f829 	bl	85e0c <__divdi3>
   85dba:	fb08 fc01 	mul.w	ip, r8, r1
   85dbe:	fba8 2300 	umull	r2, r3, r8, r0
   85dc2:	fb00 c505 	mla	r5, r0, r5, ip
   85dc6:	1ab2      	subs	r2, r6, r2
   85dc8:	442b      	add	r3, r5
   85dca:	eb67 0303 	sbc.w	r3, r7, r3
   85dce:	4686      	mov	lr, r0
   85dd0:	e9c4 2300 	strd	r2, r3, [r4]
   85dd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00085dd8 <__gnu_uldivmod_helper>:
   85dd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   85ddc:	9e08      	ldr	r6, [sp, #32]
   85dde:	4617      	mov	r7, r2
   85de0:	4680      	mov	r8, r0
   85de2:	4689      	mov	r9, r1
   85de4:	461d      	mov	r5, r3
   85de6:	f000 f967 	bl	860b8 <__udivdi3>
   85dea:	fb00 f305 	mul.w	r3, r0, r5
   85dee:	fba0 4507 	umull	r4, r5, r0, r7
   85df2:	fb07 3701 	mla	r7, r7, r1, r3
   85df6:	ebb8 0404 	subs.w	r4, r8, r4
   85dfa:	443d      	add	r5, r7
   85dfc:	eb69 0505 	sbc.w	r5, r9, r5
   85e00:	e9c6 4500 	strd	r4, r5, [r6]
   85e04:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00085e08 <__aeabi_idiv0>:
   85e08:	4770      	bx	lr
   85e0a:	bf00      	nop

00085e0c <__divdi3>:
   85e0c:	2900      	cmp	r1, #0
   85e0e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   85e12:	f2c0 80a8 	blt.w	85f66 <__divdi3+0x15a>
   85e16:	2600      	movs	r6, #0
   85e18:	2b00      	cmp	r3, #0
   85e1a:	f2c0 809e 	blt.w	85f5a <__divdi3+0x14e>
   85e1e:	4681      	mov	r9, r0
   85e20:	468e      	mov	lr, r1
   85e22:	4690      	mov	r8, r2
   85e24:	469c      	mov	ip, r3
   85e26:	4617      	mov	r7, r2
   85e28:	4604      	mov	r4, r0
   85e2a:	460d      	mov	r5, r1
   85e2c:	2b00      	cmp	r3, #0
   85e2e:	d13d      	bne.n	85eac <__divdi3+0xa0>
   85e30:	428a      	cmp	r2, r1
   85e32:	d959      	bls.n	85ee8 <__divdi3+0xdc>
   85e34:	fab2 f382 	clz	r3, r2
   85e38:	b13b      	cbz	r3, 85e4a <__divdi3+0x3e>
   85e3a:	f1c3 0220 	rsb	r2, r3, #32
   85e3e:	409d      	lsls	r5, r3
   85e40:	fa20 f202 	lsr.w	r2, r0, r2
   85e44:	409f      	lsls	r7, r3
   85e46:	4315      	orrs	r5, r2
   85e48:	409c      	lsls	r4, r3
   85e4a:	0c39      	lsrs	r1, r7, #16
   85e4c:	fbb5 f0f1 	udiv	r0, r5, r1
   85e50:	fa1f fe87 	uxth.w	lr, r7
   85e54:	fb01 5510 	mls	r5, r1, r0, r5
   85e58:	fb0e f300 	mul.w	r3, lr, r0
   85e5c:	0c22      	lsrs	r2, r4, #16
   85e5e:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
   85e62:	42ab      	cmp	r3, r5
   85e64:	d909      	bls.n	85e7a <__divdi3+0x6e>
   85e66:	19ed      	adds	r5, r5, r7
   85e68:	f100 32ff 	add.w	r2, r0, #4294967295
   85e6c:	f080 810b 	bcs.w	86086 <__divdi3+0x27a>
   85e70:	42ab      	cmp	r3, r5
   85e72:	f240 8108 	bls.w	86086 <__divdi3+0x27a>
   85e76:	3802      	subs	r0, #2
   85e78:	443d      	add	r5, r7
   85e7a:	1aed      	subs	r5, r5, r3
   85e7c:	fbb5 f3f1 	udiv	r3, r5, r1
   85e80:	fb01 5513 	mls	r5, r1, r3, r5
   85e84:	fb0e fe03 	mul.w	lr, lr, r3
   85e88:	b2a4      	uxth	r4, r4
   85e8a:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
   85e8e:	45ae      	cmp	lr, r5
   85e90:	d908      	bls.n	85ea4 <__divdi3+0x98>
   85e92:	19ed      	adds	r5, r5, r7
   85e94:	f103 32ff 	add.w	r2, r3, #4294967295
   85e98:	f080 80f7 	bcs.w	8608a <__divdi3+0x27e>
   85e9c:	45ae      	cmp	lr, r5
   85e9e:	f240 80f4 	bls.w	8608a <__divdi3+0x27e>
   85ea2:	3b02      	subs	r3, #2
   85ea4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
   85ea8:	2200      	movs	r2, #0
   85eaa:	e003      	b.n	85eb4 <__divdi3+0xa8>
   85eac:	428b      	cmp	r3, r1
   85eae:	d90f      	bls.n	85ed0 <__divdi3+0xc4>
   85eb0:	2200      	movs	r2, #0
   85eb2:	4613      	mov	r3, r2
   85eb4:	1c34      	adds	r4, r6, #0
   85eb6:	bf18      	it	ne
   85eb8:	2401      	movne	r4, #1
   85eba:	4260      	negs	r0, r4
   85ebc:	f04f 0500 	mov.w	r5, #0
   85ec0:	eb65 0145 	sbc.w	r1, r5, r5, lsl #1
   85ec4:	4058      	eors	r0, r3
   85ec6:	4051      	eors	r1, r2
   85ec8:	1900      	adds	r0, r0, r4
   85eca:	4169      	adcs	r1, r5
   85ecc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   85ed0:	fab3 f283 	clz	r2, r3
   85ed4:	2a00      	cmp	r2, #0
   85ed6:	f040 8089 	bne.w	85fec <__divdi3+0x1e0>
   85eda:	428b      	cmp	r3, r1
   85edc:	d302      	bcc.n	85ee4 <__divdi3+0xd8>
   85ede:	4580      	cmp	r8, r0
   85ee0:	f200 80e2 	bhi.w	860a8 <__divdi3+0x29c>
   85ee4:	2301      	movs	r3, #1
   85ee6:	e7e5      	b.n	85eb4 <__divdi3+0xa8>
   85ee8:	b912      	cbnz	r2, 85ef0 <__divdi3+0xe4>
   85eea:	2301      	movs	r3, #1
   85eec:	fbb3 f7f2 	udiv	r7, r3, r2
   85ef0:	fab7 f887 	clz	r8, r7
   85ef4:	f1b8 0f00 	cmp.w	r8, #0
   85ef8:	d13b      	bne.n	85f72 <__divdi3+0x166>
   85efa:	1bed      	subs	r5, r5, r7
   85efc:	ea4f 4c17 	mov.w	ip, r7, lsr #16
   85f00:	fa1f fe87 	uxth.w	lr, r7
   85f04:	2201      	movs	r2, #1
   85f06:	fbb5 f0fc 	udiv	r0, r5, ip
   85f0a:	fb0c 5510 	mls	r5, ip, r0, r5
   85f0e:	fb0e f300 	mul.w	r3, lr, r0
   85f12:	0c21      	lsrs	r1, r4, #16
   85f14:	ea41 4505 	orr.w	r5, r1, r5, lsl #16
   85f18:	42ab      	cmp	r3, r5
   85f1a:	d907      	bls.n	85f2c <__divdi3+0x120>
   85f1c:	19ed      	adds	r5, r5, r7
   85f1e:	f100 31ff 	add.w	r1, r0, #4294967295
   85f22:	d202      	bcs.n	85f2a <__divdi3+0x11e>
   85f24:	42ab      	cmp	r3, r5
   85f26:	f200 80c3 	bhi.w	860b0 <__divdi3+0x2a4>
   85f2a:	4608      	mov	r0, r1
   85f2c:	1aed      	subs	r5, r5, r3
   85f2e:	fbb5 f3fc 	udiv	r3, r5, ip
   85f32:	fb0c 5513 	mls	r5, ip, r3, r5
   85f36:	fb0e fe03 	mul.w	lr, lr, r3
   85f3a:	b2a4      	uxth	r4, r4
   85f3c:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
   85f40:	45ae      	cmp	lr, r5
   85f42:	d907      	bls.n	85f54 <__divdi3+0x148>
   85f44:	19ed      	adds	r5, r5, r7
   85f46:	f103 31ff 	add.w	r1, r3, #4294967295
   85f4a:	d202      	bcs.n	85f52 <__divdi3+0x146>
   85f4c:	45ae      	cmp	lr, r5
   85f4e:	f200 80ad 	bhi.w	860ac <__divdi3+0x2a0>
   85f52:	460b      	mov	r3, r1
   85f54:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
   85f58:	e7ac      	b.n	85eb4 <__divdi3+0xa8>
   85f5a:	4252      	negs	r2, r2
   85f5c:	ea6f 0606 	mvn.w	r6, r6
   85f60:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   85f64:	e75b      	b.n	85e1e <__divdi3+0x12>
   85f66:	4240      	negs	r0, r0
   85f68:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   85f6c:	f04f 36ff 	mov.w	r6, #4294967295
   85f70:	e752      	b.n	85e18 <__divdi3+0xc>
   85f72:	fa07 f708 	lsl.w	r7, r7, r8
   85f76:	f1c8 0220 	rsb	r2, r8, #32
   85f7a:	fa25 f302 	lsr.w	r3, r5, r2
   85f7e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
   85f82:	fbb3 f1fc 	udiv	r1, r3, ip
   85f86:	fa1f fe87 	uxth.w	lr, r7
   85f8a:	fb0c 3311 	mls	r3, ip, r1, r3
   85f8e:	fa24 f202 	lsr.w	r2, r4, r2
   85f92:	fa05 f508 	lsl.w	r5, r5, r8
   85f96:	fb0e f901 	mul.w	r9, lr, r1
   85f9a:	432a      	orrs	r2, r5
   85f9c:	0c10      	lsrs	r0, r2, #16
   85f9e:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
   85fa2:	4599      	cmp	r9, r3
   85fa4:	fa04 f408 	lsl.w	r4, r4, r8
   85fa8:	d907      	bls.n	85fba <__divdi3+0x1ae>
   85faa:	19db      	adds	r3, r3, r7
   85fac:	f101 30ff 	add.w	r0, r1, #4294967295
   85fb0:	d278      	bcs.n	860a4 <__divdi3+0x298>
   85fb2:	4599      	cmp	r9, r3
   85fb4:	d976      	bls.n	860a4 <__divdi3+0x298>
   85fb6:	3902      	subs	r1, #2
   85fb8:	443b      	add	r3, r7
   85fba:	ebc9 0303 	rsb	r3, r9, r3
   85fbe:	fbb3 f0fc 	udiv	r0, r3, ip
   85fc2:	fb0c 3310 	mls	r3, ip, r0, r3
   85fc6:	fb0e f500 	mul.w	r5, lr, r0
   85fca:	b292      	uxth	r2, r2
   85fcc:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
   85fd0:	429d      	cmp	r5, r3
   85fd2:	d907      	bls.n	85fe4 <__divdi3+0x1d8>
   85fd4:	19db      	adds	r3, r3, r7
   85fd6:	f100 32ff 	add.w	r2, r0, #4294967295
   85fda:	d25f      	bcs.n	8609c <__divdi3+0x290>
   85fdc:	429d      	cmp	r5, r3
   85fde:	d95d      	bls.n	8609c <__divdi3+0x290>
   85fe0:	3802      	subs	r0, #2
   85fe2:	443b      	add	r3, r7
   85fe4:	1b5d      	subs	r5, r3, r5
   85fe6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
   85fea:	e78c      	b.n	85f06 <__divdi3+0xfa>
   85fec:	f1c2 0320 	rsb	r3, r2, #32
   85ff0:	fa28 f103 	lsr.w	r1, r8, r3
   85ff4:	fa0c fc02 	lsl.w	ip, ip, r2
   85ff8:	ea41 0c0c 	orr.w	ip, r1, ip
   85ffc:	ea4f 401c 	mov.w	r0, ip, lsr #16
   86000:	fa2e f103 	lsr.w	r1, lr, r3
   86004:	fbb1 f5f0 	udiv	r5, r1, r0
   86008:	fa1f f78c 	uxth.w	r7, ip
   8600c:	fb00 1115 	mls	r1, r0, r5, r1
   86010:	fa29 f303 	lsr.w	r3, r9, r3
   86014:	fa0e fe02 	lsl.w	lr, lr, r2
   86018:	fb07 f905 	mul.w	r9, r7, r5
   8601c:	ea43 0e0e 	orr.w	lr, r3, lr
   86020:	ea4f 431e 	mov.w	r3, lr, lsr #16
   86024:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
   86028:	4589      	cmp	r9, r1
   8602a:	fa08 f802 	lsl.w	r8, r8, r2
   8602e:	d908      	bls.n	86042 <__divdi3+0x236>
   86030:	eb11 010c 	adds.w	r1, r1, ip
   86034:	f105 33ff 	add.w	r3, r5, #4294967295
   86038:	d232      	bcs.n	860a0 <__divdi3+0x294>
   8603a:	4589      	cmp	r9, r1
   8603c:	d930      	bls.n	860a0 <__divdi3+0x294>
   8603e:	3d02      	subs	r5, #2
   86040:	4461      	add	r1, ip
   86042:	ebc9 0101 	rsb	r1, r9, r1
   86046:	fbb1 f3f0 	udiv	r3, r1, r0
   8604a:	fb00 1113 	mls	r1, r0, r3, r1
   8604e:	fb07 f703 	mul.w	r7, r7, r3
   86052:	fa1f fe8e 	uxth.w	lr, lr
   86056:	ea4e 4e01 	orr.w	lr, lr, r1, lsl #16
   8605a:	4577      	cmp	r7, lr
   8605c:	d908      	bls.n	86070 <__divdi3+0x264>
   8605e:	eb1e 0e0c 	adds.w	lr, lr, ip
   86062:	f103 31ff 	add.w	r1, r3, #4294967295
   86066:	d217      	bcs.n	86098 <__divdi3+0x28c>
   86068:	4577      	cmp	r7, lr
   8606a:	d915      	bls.n	86098 <__divdi3+0x28c>
   8606c:	3b02      	subs	r3, #2
   8606e:	44e6      	add	lr, ip
   86070:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
   86074:	fba3 8908 	umull	r8, r9, r3, r8
   86078:	ebc7 0e0e 	rsb	lr, r7, lr
   8607c:	45ce      	cmp	lr, r9
   8607e:	d309      	bcc.n	86094 <__divdi3+0x288>
   86080:	d005      	beq.n	8608e <__divdi3+0x282>
   86082:	2200      	movs	r2, #0
   86084:	e716      	b.n	85eb4 <__divdi3+0xa8>
   86086:	4610      	mov	r0, r2
   86088:	e6f7      	b.n	85e7a <__divdi3+0x6e>
   8608a:	4613      	mov	r3, r2
   8608c:	e70a      	b.n	85ea4 <__divdi3+0x98>
   8608e:	4094      	lsls	r4, r2
   86090:	4544      	cmp	r4, r8
   86092:	d2f6      	bcs.n	86082 <__divdi3+0x276>
   86094:	3b01      	subs	r3, #1
   86096:	e7f4      	b.n	86082 <__divdi3+0x276>
   86098:	460b      	mov	r3, r1
   8609a:	e7e9      	b.n	86070 <__divdi3+0x264>
   8609c:	4610      	mov	r0, r2
   8609e:	e7a1      	b.n	85fe4 <__divdi3+0x1d8>
   860a0:	461d      	mov	r5, r3
   860a2:	e7ce      	b.n	86042 <__divdi3+0x236>
   860a4:	4601      	mov	r1, r0
   860a6:	e788      	b.n	85fba <__divdi3+0x1ae>
   860a8:	4613      	mov	r3, r2
   860aa:	e703      	b.n	85eb4 <__divdi3+0xa8>
   860ac:	3b02      	subs	r3, #2
   860ae:	e751      	b.n	85f54 <__divdi3+0x148>
   860b0:	3802      	subs	r0, #2
   860b2:	443d      	add	r5, r7
   860b4:	e73a      	b.n	85f2c <__divdi3+0x120>
   860b6:	bf00      	nop

000860b8 <__udivdi3>:
   860b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   860bc:	2b00      	cmp	r3, #0
   860be:	d144      	bne.n	8614a <__udivdi3+0x92>
   860c0:	428a      	cmp	r2, r1
   860c2:	4615      	mov	r5, r2
   860c4:	4604      	mov	r4, r0
   860c6:	d94f      	bls.n	86168 <__udivdi3+0xb0>
   860c8:	fab2 f782 	clz	r7, r2
   860cc:	460e      	mov	r6, r1
   860ce:	b14f      	cbz	r7, 860e4 <__udivdi3+0x2c>
   860d0:	f1c7 0320 	rsb	r3, r7, #32
   860d4:	40b9      	lsls	r1, r7
   860d6:	fa20 f603 	lsr.w	r6, r0, r3
   860da:	fa02 f507 	lsl.w	r5, r2, r7
   860de:	430e      	orrs	r6, r1
   860e0:	fa00 f407 	lsl.w	r4, r0, r7
   860e4:	0c2f      	lsrs	r7, r5, #16
   860e6:	fbb6 f0f7 	udiv	r0, r6, r7
   860ea:	fa1f fe85 	uxth.w	lr, r5
   860ee:	fb07 6210 	mls	r2, r7, r0, r6
   860f2:	fb0e f100 	mul.w	r1, lr, r0
   860f6:	0c26      	lsrs	r6, r4, #16
   860f8:	ea46 4302 	orr.w	r3, r6, r2, lsl #16
   860fc:	4299      	cmp	r1, r3
   860fe:	d909      	bls.n	86114 <__udivdi3+0x5c>
   86100:	195b      	adds	r3, r3, r5
   86102:	f100 32ff 	add.w	r2, r0, #4294967295
   86106:	f080 80ee 	bcs.w	862e6 <__udivdi3+0x22e>
   8610a:	4299      	cmp	r1, r3
   8610c:	f240 80eb 	bls.w	862e6 <__udivdi3+0x22e>
   86110:	3802      	subs	r0, #2
   86112:	442b      	add	r3, r5
   86114:	1a59      	subs	r1, r3, r1
   86116:	fbb1 f3f7 	udiv	r3, r1, r7
   8611a:	fb07 1113 	mls	r1, r7, r3, r1
   8611e:	fb0e fe03 	mul.w	lr, lr, r3
   86122:	b2a4      	uxth	r4, r4
   86124:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
   86128:	458e      	cmp	lr, r1
   8612a:	d908      	bls.n	8613e <__udivdi3+0x86>
   8612c:	1949      	adds	r1, r1, r5
   8612e:	f103 32ff 	add.w	r2, r3, #4294967295
   86132:	f080 80da 	bcs.w	862ea <__udivdi3+0x232>
   86136:	458e      	cmp	lr, r1
   86138:	f240 80d7 	bls.w	862ea <__udivdi3+0x232>
   8613c:	3b02      	subs	r3, #2
   8613e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
   86142:	2600      	movs	r6, #0
   86144:	4631      	mov	r1, r6
   86146:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   8614a:	428b      	cmp	r3, r1
   8614c:	d847      	bhi.n	861de <__udivdi3+0x126>
   8614e:	fab3 f683 	clz	r6, r3
   86152:	2e00      	cmp	r6, #0
   86154:	d148      	bne.n	861e8 <__udivdi3+0x130>
   86156:	428b      	cmp	r3, r1
   86158:	d302      	bcc.n	86160 <__udivdi3+0xa8>
   8615a:	4282      	cmp	r2, r0
   8615c:	f200 80cf 	bhi.w	862fe <__udivdi3+0x246>
   86160:	2001      	movs	r0, #1
   86162:	4631      	mov	r1, r6
   86164:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   86168:	b912      	cbnz	r2, 86170 <__udivdi3+0xb8>
   8616a:	2501      	movs	r5, #1
   8616c:	fbb5 f5f2 	udiv	r5, r5, r2
   86170:	fab5 fc85 	clz	ip, r5
   86174:	f1bc 0f00 	cmp.w	ip, #0
   86178:	d178      	bne.n	8626c <__udivdi3+0x1b4>
   8617a:	1b49      	subs	r1, r1, r5
   8617c:	0c2f      	lsrs	r7, r5, #16
   8617e:	fa1f fe85 	uxth.w	lr, r5
   86182:	2601      	movs	r6, #1
   86184:	fbb1 f0f7 	udiv	r0, r1, r7
   86188:	fb07 1110 	mls	r1, r7, r0, r1
   8618c:	fb0e f200 	mul.w	r2, lr, r0
   86190:	0c23      	lsrs	r3, r4, #16
   86192:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
   86196:	428a      	cmp	r2, r1
   86198:	d907      	bls.n	861aa <__udivdi3+0xf2>
   8619a:	1949      	adds	r1, r1, r5
   8619c:	f100 33ff 	add.w	r3, r0, #4294967295
   861a0:	d202      	bcs.n	861a8 <__udivdi3+0xf0>
   861a2:	428a      	cmp	r2, r1
   861a4:	f200 80bc 	bhi.w	86320 <__udivdi3+0x268>
   861a8:	4618      	mov	r0, r3
   861aa:	1a89      	subs	r1, r1, r2
   861ac:	fbb1 f3f7 	udiv	r3, r1, r7
   861b0:	fb07 1113 	mls	r1, r7, r3, r1
   861b4:	fb0e fe03 	mul.w	lr, lr, r3
   861b8:	b2a4      	uxth	r4, r4
   861ba:	ea44 4201 	orr.w	r2, r4, r1, lsl #16
   861be:	4596      	cmp	lr, r2
   861c0:	d908      	bls.n	861d4 <__udivdi3+0x11c>
   861c2:	1952      	adds	r2, r2, r5
   861c4:	f103 31ff 	add.w	r1, r3, #4294967295
   861c8:	f080 8091 	bcs.w	862ee <__udivdi3+0x236>
   861cc:	4596      	cmp	lr, r2
   861ce:	f240 808e 	bls.w	862ee <__udivdi3+0x236>
   861d2:	3b02      	subs	r3, #2
   861d4:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
   861d8:	4631      	mov	r1, r6
   861da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   861de:	2600      	movs	r6, #0
   861e0:	4630      	mov	r0, r6
   861e2:	4631      	mov	r1, r6
   861e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   861e8:	f1c6 0420 	rsb	r4, r6, #32
   861ec:	fa22 f504 	lsr.w	r5, r2, r4
   861f0:	40b3      	lsls	r3, r6
   861f2:	432b      	orrs	r3, r5
   861f4:	fa21 f704 	lsr.w	r7, r1, r4
   861f8:	ea4f 4813 	mov.w	r8, r3, lsr #16
   861fc:	fbb7 fcf8 	udiv	ip, r7, r8
   86200:	fa1f f983 	uxth.w	r9, r3
   86204:	fb08 771c 	mls	r7, r8, ip, r7
   86208:	fa20 fe04 	lsr.w	lr, r0, r4
   8620c:	fa01 f506 	lsl.w	r5, r1, r6
   86210:	fb09 f40c 	mul.w	r4, r9, ip
   86214:	ea4e 0505 	orr.w	r5, lr, r5
   86218:	ea4f 4e15 	mov.w	lr, r5, lsr #16
   8621c:	ea4e 4707 	orr.w	r7, lr, r7, lsl #16
   86220:	42bc      	cmp	r4, r7
   86222:	fa02 f206 	lsl.w	r2, r2, r6
   86226:	d904      	bls.n	86232 <__udivdi3+0x17a>
   86228:	18ff      	adds	r7, r7, r3
   8622a:	f10c 31ff 	add.w	r1, ip, #4294967295
   8622e:	d368      	bcc.n	86302 <__udivdi3+0x24a>
   86230:	468c      	mov	ip, r1
   86232:	1b3f      	subs	r7, r7, r4
   86234:	fbb7 f4f8 	udiv	r4, r7, r8
   86238:	fb08 7714 	mls	r7, r8, r4, r7
   8623c:	fb09 f904 	mul.w	r9, r9, r4
   86240:	b2ad      	uxth	r5, r5
   86242:	ea45 4107 	orr.w	r1, r5, r7, lsl #16
   86246:	4589      	cmp	r9, r1
   86248:	d904      	bls.n	86254 <__udivdi3+0x19c>
   8624a:	18c9      	adds	r1, r1, r3
   8624c:	f104 35ff 	add.w	r5, r4, #4294967295
   86250:	d35d      	bcc.n	8630e <__udivdi3+0x256>
   86252:	462c      	mov	r4, r5
   86254:	ea44 440c 	orr.w	r4, r4, ip, lsl #16
   86258:	fba4 2302 	umull	r2, r3, r4, r2
   8625c:	ebc9 0101 	rsb	r1, r9, r1
   86260:	4299      	cmp	r1, r3
   86262:	d349      	bcc.n	862f8 <__udivdi3+0x240>
   86264:	d045      	beq.n	862f2 <__udivdi3+0x23a>
   86266:	4620      	mov	r0, r4
   86268:	2600      	movs	r6, #0
   8626a:	e76b      	b.n	86144 <__udivdi3+0x8c>
   8626c:	f1cc 0420 	rsb	r4, ip, #32
   86270:	fa05 f50c 	lsl.w	r5, r5, ip
   86274:	fa21 f304 	lsr.w	r3, r1, r4
   86278:	0c2a      	lsrs	r2, r5, #16
   8627a:	fbb3 f6f2 	udiv	r6, r3, r2
   8627e:	fa1f fe85 	uxth.w	lr, r5
   86282:	fb02 3816 	mls	r8, r2, r6, r3
   86286:	fa20 f704 	lsr.w	r7, r0, r4
   8628a:	fa01 f10c 	lsl.w	r1, r1, ip
   8628e:	fb0e f906 	mul.w	r9, lr, r6
   86292:	430f      	orrs	r7, r1
   86294:	0c3c      	lsrs	r4, r7, #16
   86296:	ea44 4308 	orr.w	r3, r4, r8, lsl #16
   8629a:	4599      	cmp	r9, r3
   8629c:	fa00 f40c 	lsl.w	r4, r0, ip
   862a0:	d907      	bls.n	862b2 <__udivdi3+0x1fa>
   862a2:	195b      	adds	r3, r3, r5
   862a4:	f106 31ff 	add.w	r1, r6, #4294967295
   862a8:	d238      	bcs.n	8631c <__udivdi3+0x264>
   862aa:	4599      	cmp	r9, r3
   862ac:	d936      	bls.n	8631c <__udivdi3+0x264>
   862ae:	3e02      	subs	r6, #2
   862b0:	442b      	add	r3, r5
   862b2:	ebc9 0303 	rsb	r3, r9, r3
   862b6:	fbb3 f0f2 	udiv	r0, r3, r2
   862ba:	fb02 3310 	mls	r3, r2, r0, r3
   862be:	fb0e f100 	mul.w	r1, lr, r0
   862c2:	b2bf      	uxth	r7, r7
   862c4:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
   862c8:	4299      	cmp	r1, r3
   862ca:	d907      	bls.n	862dc <__udivdi3+0x224>
   862cc:	195b      	adds	r3, r3, r5
   862ce:	f100 37ff 	add.w	r7, r0, #4294967295
   862d2:	d221      	bcs.n	86318 <__udivdi3+0x260>
   862d4:	4299      	cmp	r1, r3
   862d6:	d91f      	bls.n	86318 <__udivdi3+0x260>
   862d8:	3802      	subs	r0, #2
   862da:	442b      	add	r3, r5
   862dc:	4617      	mov	r7, r2
   862de:	1a59      	subs	r1, r3, r1
   862e0:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
   862e4:	e74e      	b.n	86184 <__udivdi3+0xcc>
   862e6:	4610      	mov	r0, r2
   862e8:	e714      	b.n	86114 <__udivdi3+0x5c>
   862ea:	4613      	mov	r3, r2
   862ec:	e727      	b.n	8613e <__udivdi3+0x86>
   862ee:	460b      	mov	r3, r1
   862f0:	e770      	b.n	861d4 <__udivdi3+0x11c>
   862f2:	40b0      	lsls	r0, r6
   862f4:	4290      	cmp	r0, r2
   862f6:	d2b6      	bcs.n	86266 <__udivdi3+0x1ae>
   862f8:	1e60      	subs	r0, r4, #1
   862fa:	2600      	movs	r6, #0
   862fc:	e722      	b.n	86144 <__udivdi3+0x8c>
   862fe:	4630      	mov	r0, r6
   86300:	e720      	b.n	86144 <__udivdi3+0x8c>
   86302:	42bc      	cmp	r4, r7
   86304:	d994      	bls.n	86230 <__udivdi3+0x178>
   86306:	f1ac 0c02 	sub.w	ip, ip, #2
   8630a:	441f      	add	r7, r3
   8630c:	e791      	b.n	86232 <__udivdi3+0x17a>
   8630e:	4589      	cmp	r9, r1
   86310:	d99f      	bls.n	86252 <__udivdi3+0x19a>
   86312:	3c02      	subs	r4, #2
   86314:	4419      	add	r1, r3
   86316:	e79d      	b.n	86254 <__udivdi3+0x19c>
   86318:	4638      	mov	r0, r7
   8631a:	e7df      	b.n	862dc <__udivdi3+0x224>
   8631c:	460e      	mov	r6, r1
   8631e:	e7c8      	b.n	862b2 <__udivdi3+0x1fa>
   86320:	3802      	subs	r0, #2
   86322:	4429      	add	r1, r5
   86324:	e741      	b.n	861aa <__udivdi3+0xf2>
   86326:	bf00      	nop
   86328:	6d726554 	.word	0x6d726554
   8632c:	6c616e69 	.word	0x6c616e69
   86330:	62656420 	.word	0x62656420
   86334:	69676775 	.word	0x69676775
   86338:	6520676e 	.word	0x6520676e
   8633c:	6c62616e 	.word	0x6c62616e
   86340:	000a6465 	.word	0x000a6465
   86344:	73657250 	.word	0x73657250
   86348:	76207465 	.word	0x76207465
   8634c:	65756c61 	.word	0x65756c61
   86350:	000a3a73 	.word	0x000a3a73
   86354:	203a506b 	.word	0x203a506b
   86358:	0d0a7525 	.word	0x0d0a7525
   8635c:	00000000 	.word	0x00000000
   86360:	203a496b 	.word	0x203a496b
   86364:	0d0a7525 	.word	0x0d0a7525
   86368:	00000000 	.word	0x00000000
   8636c:	203a446b 	.word	0x203a446b
   86370:	0d0a7525 	.word	0x0d0a7525
   86374:	00000000 	.word	0x00000000
   86378:	70746553 	.word	0x70746553
   8637c:	746e696f 	.word	0x746e696f
   86380:	203a6d43 	.word	0x203a6d43
   86384:	0d0a7525 	.word	0x0d0a7525
   86388:	00000000 	.word	0x00000000
   8638c:	756c6156 	.word	0x756c6156
   86390:	0a3a7365 	.word	0x0a3a7365
   86394:	00000000 	.word	0x00000000
   86398:	0d0a6925 	.word	0x0d0a6925
   8639c:	00000000 	.word	0x00000000
   863a0:	09097325 	.word	0x09097325
   863a4:	25096325 	.word	0x25096325
   863a8:	75250975 	.word	0x75250975
   863ac:	0d752509 	.word	0x0d752509
   863b0:	0000000a 	.word	0x0000000a
   863b4:	454c4449 	.word	0x454c4449
   863b8:	00000000 	.word	0x00000000
   863bc:	20726d54 	.word	0x20726d54
   863c0:	00637653 	.word	0x00637653
   863c4:	00000001 	.word	0x00000001
   863c8:	00000002 	.word	0x00000002
   863cc:	00000004 	.word	0x00000004
   863d0:	00000008 	.word	0x00000008
   863d4:	00000010 	.word	0x00000010
   863d8:	00000020 	.word	0x00000020
   863dc:	00000040 	.word	0x00000040
   863e0:	00000080 	.word	0x00000080
   863e4:	00000100 	.word	0x00000100
   863e8:	00000200 	.word	0x00000200
   863ec:	00000400 	.word	0x00000400
   863f0:	52444950 	.word	0x52444950
   863f4:	6c756765 	.word	0x6c756765
   863f8:	6f697461 	.word	0x6f697461
   863fc:	0000006e 	.word	0x0000006e
   86400:	6c696146 	.word	0x6c696146
   86404:	74206465 	.word	0x74206465
   86408:	7263206f 	.word	0x7263206f
   8640c:	65746165 	.word	0x65746165
   86410:	44495020 	.word	0x44495020
   86414:	75676552 	.word	0x75676552
   86418:	6974616c 	.word	0x6974616c
   8641c:	61546e6f 	.word	0x61546e6f
   86420:	0a0d6b73 	.word	0x0a0d6b73
   86424:	00000000 	.word	0x00000000
   86428:	69726553 	.word	0x69726553
   8642c:	6f436c61 	.word	0x6f436c61
   86430:	7361546d 	.word	0x7361546d
   86434:	0000006b 	.word	0x0000006b
   86438:	6c696146 	.word	0x6c696146
   8643c:	74206465 	.word	0x74206465
   86440:	7263206f 	.word	0x7263206f
   86444:	65746165 	.word	0x65746165
   86448:	72655320 	.word	0x72655320
   8644c:	436c6169 	.word	0x436c6169
   86450:	61546d6f 	.word	0x61546d6f
   86454:	0a0d6b73 	.word	0x0a0d6b73
   86458:	00000000 	.word	0x00000000
   8645c:	75736e49 	.word	0x75736e49
   86460:	63696666 	.word	0x63696666
   86464:	746e6569 	.word	0x746e6569
   86468:	4d415220 	.word	0x4d415220
   8646c:	00000a0d 	.word	0x00000a0d
   86470:	00000043 	.word	0x00000043

00086474 <_global_impure_ptr>:
   86474:	20070140                                @.. 

00086478 <zeroes.6869>:
   86478:	30303030 30303030 30303030 30303030     0000000000000000
   86488:	33323130 37363534 42413938 46454443     0123456789ABCDEF
   86498:	00000000 33323130 37363534 62613938     ....0123456789ab
   864a8:	66656463 00000000 6c756e28 0000296c     cdef....(null)..

000864b8 <blanks.6868>:
   864b8:	20202020 20202020 20202020 20202020                     

000864c8 <_init>:
   864c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   864ca:	bf00      	nop
   864cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
   864ce:	bc08      	pop	{r3}
   864d0:	469e      	mov	lr, r3
   864d2:	4770      	bx	lr

000864d4 <__init_array_start>:
   864d4:	000844f5 	.word	0x000844f5

000864d8 <__frame_dummy_init_array_entry>:
   864d8:	00080119                                ....

000864dc <_fini>:
   864dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   864de:	bf00      	nop
   864e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
   864e2:	bc08      	pop	{r3}
   864e4:	469e      	mov	lr, r3
   864e6:	4770      	bx	lr

000864e8 <__fini_array_start>:
   864e8:	000800f5 	.word	0x000800f5

Disassembly of section .relocate:

20070000 <SystemInit>:
__no_inline
RAMFUNC
void SystemInit(void)
{
	/* Set FWS according to SYS_BOARD_MCKR configuration */
	EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
20070000:	f44f 6380 	mov.w	r3, #1024	; 0x400
20070004:	4a20      	ldr	r2, [pc, #128]	; (20070088 <SystemInit+0x88>)
20070006:	6013      	str	r3, [r2, #0]
	EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
20070008:	f502 7200 	add.w	r2, r2, #512	; 0x200
2007000c:	6013      	str	r3, [r2, #0]

	/* Initialize main oscillator */
	if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
2007000e:	4b1f      	ldr	r3, [pc, #124]	; (2007008c <SystemInit+0x8c>)
20070010:	6a1b      	ldr	r3, [r3, #32]
20070012:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
20070016:	d107      	bne.n	20070028 <SystemInit+0x28>
		PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070018:	4a1d      	ldr	r2, [pc, #116]	; (20070090 <SystemInit+0x90>)
2007001a:	4b1c      	ldr	r3, [pc, #112]	; (2007008c <SystemInit+0x8c>)
2007001c:	621a      	str	r2, [r3, #32]
			                     CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN;
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS)) {
2007001e:	461a      	mov	r2, r3
20070020:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070022:	f013 0f01 	tst.w	r3, #1
20070026:	d0fb      	beq.n	20070020 <SystemInit+0x20>
		}
	}

	/* Switch to 3-20MHz Xtal oscillator */
	PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070028:	4a1a      	ldr	r2, [pc, #104]	; (20070094 <SystemInit+0x94>)
2007002a:	4b18      	ldr	r3, [pc, #96]	; (2007008c <SystemInit+0x8c>)
2007002c:	621a      	str	r2, [r3, #32]
	                           CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCSEL;

	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS)) {
2007002e:	461a      	mov	r2, r3
20070030:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070032:	f413 3f80 	tst.w	r3, #65536	; 0x10000
20070036:	d0fb      	beq.n	20070030 <SystemInit+0x30>
	}
 	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | 
20070038:	4a14      	ldr	r2, [pc, #80]	; (2007008c <SystemInit+0x8c>)
2007003a:	6b13      	ldr	r3, [r2, #48]	; 0x30
2007003c:	f023 0303 	bic.w	r3, r3, #3
20070040:	f043 0301 	orr.w	r3, r3, #1
20070044:	6313      	str	r3, [r2, #48]	; 0x30
		                     PMC_MCKR_CSS_MAIN_CLK;
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070046:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070048:	f013 0f08 	tst.w	r3, #8
2007004c:	d0fb      	beq.n	20070046 <SystemInit+0x46>
	}

	/* Initialize PLLA */
	PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
2007004e:	4a12      	ldr	r2, [pc, #72]	; (20070098 <SystemInit+0x98>)
20070050:	4b0e      	ldr	r3, [pc, #56]	; (2007008c <SystemInit+0x8c>)
20070052:	629a      	str	r2, [r3, #40]	; 0x28
	while (!(PMC->PMC_SR & PMC_SR_LOCKA)) {
20070054:	461a      	mov	r2, r3
20070056:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070058:	f013 0f02 	tst.w	r3, #2
2007005c:	d0fb      	beq.n	20070056 <SystemInit+0x56>
	}

	/* Switch to main clock */
	PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
2007005e:	2211      	movs	r2, #17
20070060:	4b0a      	ldr	r3, [pc, #40]	; (2007008c <SystemInit+0x8c>)
20070062:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070064:	461a      	mov	r2, r3
20070066:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070068:	f013 0f08 	tst.w	r3, #8
2007006c:	d0fb      	beq.n	20070066 <SystemInit+0x66>
	}

	/* Switch to PLLA */
	PMC->PMC_MCKR = SYS_BOARD_MCKR;
2007006e:	2212      	movs	r2, #18
20070070:	4b06      	ldr	r3, [pc, #24]	; (2007008c <SystemInit+0x8c>)
20070072:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070074:	461a      	mov	r2, r3
20070076:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070078:	f013 0f08 	tst.w	r3, #8
2007007c:	d0fb      	beq.n	20070076 <SystemInit+0x76>
	}

	SystemCoreClock = CHIP_FREQ_CPU_MAX;
2007007e:	4a07      	ldr	r2, [pc, #28]	; (2007009c <SystemInit+0x9c>)
20070080:	4b07      	ldr	r3, [pc, #28]	; (200700a0 <SystemInit+0xa0>)
20070082:	601a      	str	r2, [r3, #0]
20070084:	4770      	bx	lr
20070086:	bf00      	nop
20070088:	400e0a00 	.word	0x400e0a00
2007008c:	400e0600 	.word	0x400e0600
20070090:	00370809 	.word	0x00370809
20070094:	01370809 	.word	0x01370809
20070098:	200d3f01 	.word	0x200d3f01
2007009c:	0501bd00 	.word	0x0501bd00
200700a0:	2007013c 	.word	0x2007013c

200700a4 <system_init_flash>:
__no_inline
RAMFUNC
void system_init_flash(uint32_t ul_clk)
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
200700a4:	4b1b      	ldr	r3, [pc, #108]	; (20070114 <system_init_flash+0x70>)
200700a6:	4298      	cmp	r0, r3
200700a8:	d806      	bhi.n	200700b8 <system_init_flash+0x14>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
200700aa:	2300      	movs	r3, #0
200700ac:	4a1a      	ldr	r2, [pc, #104]	; (20070118 <system_init_flash+0x74>)
200700ae:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
200700b0:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700b4:	6013      	str	r3, [r2, #0]
200700b6:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
200700b8:	4b18      	ldr	r3, [pc, #96]	; (2007011c <system_init_flash+0x78>)
200700ba:	4298      	cmp	r0, r3
200700bc:	d807      	bhi.n	200700ce <system_init_flash+0x2a>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
200700be:	f44f 7380 	mov.w	r3, #256	; 0x100
200700c2:	4a15      	ldr	r2, [pc, #84]	; (20070118 <system_init_flash+0x74>)
200700c4:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
200700c6:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700ca:	6013      	str	r3, [r2, #0]
200700cc:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
200700ce:	4b14      	ldr	r3, [pc, #80]	; (20070120 <system_init_flash+0x7c>)
200700d0:	4298      	cmp	r0, r3
200700d2:	d807      	bhi.n	200700e4 <system_init_flash+0x40>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
200700d4:	f44f 7300 	mov.w	r3, #512	; 0x200
200700d8:	4a0f      	ldr	r2, [pc, #60]	; (20070118 <system_init_flash+0x74>)
200700da:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
200700dc:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700e0:	6013      	str	r3, [r2, #0]
200700e2:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
200700e4:	4b0f      	ldr	r3, [pc, #60]	; (20070124 <system_init_flash+0x80>)
200700e6:	4298      	cmp	r0, r3
200700e8:	d807      	bhi.n	200700fa <system_init_flash+0x56>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
200700ea:	f44f 7340 	mov.w	r3, #768	; 0x300
200700ee:	4a0a      	ldr	r2, [pc, #40]	; (20070118 <system_init_flash+0x74>)
200700f0:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
200700f2:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700f6:	6013      	str	r3, [r2, #0]
200700f8:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_4) {
200700fa:	4b0b      	ldr	r3, [pc, #44]	; (20070128 <system_init_flash+0x84>)
200700fc:	4298      	cmp	r0, r3
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
200700fe:	bf94      	ite	ls
20070100:	f44f 6380 	movls.w	r3, #1024	; 0x400
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
20070104:	f44f 63a0 	movhi.w	r3, #1280	; 0x500
20070108:	4a03      	ldr	r2, [pc, #12]	; (20070118 <system_init_flash+0x74>)
2007010a:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
2007010c:	f502 7200 	add.w	r2, r2, #512	; 0x200
20070110:	6013      	str	r3, [r2, #0]
20070112:	4770      	bx	lr
20070114:	0121eabf 	.word	0x0121eabf
20070118:	400e0a00 	.word	0x400e0a00
2007011c:	02faf07f 	.word	0x02faf07f
20070120:	03d08fff 	.word	0x03d08fff
20070124:	04c4b3ff 	.word	0x04c4b3ff
20070128:	055d4a7f 	.word	0x055d4a7f

2007012c <isMatlab>:
2007012c:	00000001                                ....

20070130 <uxCriticalNesting>:
20070130:	aaaaaaaa                                ....

20070134 <xFreeBytesRemaining>:
20070134:	00008000                                ....

20070138 <xNextTaskUnblockTime>:
20070138:	0000ffff                                ....

2007013c <SystemCoreClock>:
2007013c:	003d0900                                ..=.

20070140 <impure_data>:
20070140:	00000000 2007042c 20070494 200704fc     ....,.. ... ... 
	...
20070174:	00086470 00000000 00000000 00000000     pd..............
	...
200701e8:	00000001 00000000 abcd330e e66d1234     .........3..4.m.
200701f8:	0005deec 0000000b 00000000 00000000     ................
	...

20070568 <_impure_ptr>:
20070568:	20070140                                @.. 

2007056c <lc_ctype_charset>:
2007056c:	49435341 00000049 00000000 00000000     ASCII...........
	...

2007058c <__mb_cur_max>:
2007058c:	00000001                                ....

20070590 <__malloc_av_>:
	...
20070598:	20070590 20070590 20070598 20070598     ... ... ... ... 
200705a8:	200705a0 200705a0 200705a8 200705a8     ... ... ... ... 
200705b8:	200705b0 200705b0 200705b8 200705b8     ... ... ... ... 
200705c8:	200705c0 200705c0 200705c8 200705c8     ... ... ... ... 
200705d8:	200705d0 200705d0 200705d8 200705d8     ... ... ... ... 
200705e8:	200705e0 200705e0 200705e8 200705e8     ... ... ... ... 
200705f8:	200705f0 200705f0 200705f8 200705f8     ... ... ... ... 
20070608:	20070600 20070600 20070608 20070608     ... ... ... ... 
20070618:	20070610 20070610 20070618 20070618     ... ... ... ... 
20070628:	20070620 20070620 20070628 20070628      ..  .. (.. (.. 
20070638:	20070630 20070630 20070638 20070638     0.. 0.. 8.. 8.. 
20070648:	20070640 20070640 20070648 20070648     @.. @.. H.. H.. 
20070658:	20070650 20070650 20070658 20070658     P.. P.. X.. X.. 
20070668:	20070660 20070660 20070668 20070668     `.. `.. h.. h.. 
20070678:	20070670 20070670 20070678 20070678     p.. p.. x.. x.. 
20070688:	20070680 20070680 20070688 20070688     ... ... ... ... 
20070698:	20070690 20070690 20070698 20070698     ... ... ... ... 
200706a8:	200706a0 200706a0 200706a8 200706a8     ... ... ... ... 
200706b8:	200706b0 200706b0 200706b8 200706b8     ... ... ... ... 
200706c8:	200706c0 200706c0 200706c8 200706c8     ... ... ... ... 
200706d8:	200706d0 200706d0 200706d8 200706d8     ... ... ... ... 
200706e8:	200706e0 200706e0 200706e8 200706e8     ... ... ... ... 
200706f8:	200706f0 200706f0 200706f8 200706f8     ... ... ... ... 
20070708:	20070700 20070700 20070708 20070708     ... ... ... ... 
20070718:	20070710 20070710 20070718 20070718     ... ... ... ... 
20070728:	20070720 20070720 20070728 20070728      ..  .. (.. (.. 
20070738:	20070730 20070730 20070738 20070738     0.. 0.. 8.. 8.. 
20070748:	20070740 20070740 20070748 20070748     @.. @.. H.. H.. 
20070758:	20070750 20070750 20070758 20070758     P.. P.. X.. X.. 
20070768:	20070760 20070760 20070768 20070768     `.. `.. h.. h.. 
20070778:	20070770 20070770 20070778 20070778     p.. p.. x.. x.. 
20070788:	20070780 20070780 20070788 20070788     ... ... ... ... 
20070798:	20070790 20070790 20070798 20070798     ... ... ... ... 
200707a8:	200707a0 200707a0 200707a8 200707a8     ... ... ... ... 
200707b8:	200707b0 200707b0 200707b8 200707b8     ... ... ... ... 
200707c8:	200707c0 200707c0 200707c8 200707c8     ... ... ... ... 
200707d8:	200707d0 200707d0 200707d8 200707d8     ... ... ... ... 
200707e8:	200707e0 200707e0 200707e8 200707e8     ... ... ... ... 
200707f8:	200707f0 200707f0 200707f8 200707f8     ... ... ... ... 
20070808:	20070800 20070800 20070808 20070808     ... ... ... ... 
20070818:	20070810 20070810 20070818 20070818     ... ... ... ... 
20070828:	20070820 20070820 20070828 20070828      ..  .. (.. (.. 
20070838:	20070830 20070830 20070838 20070838     0.. 0.. 8.. 8.. 
20070848:	20070840 20070840 20070848 20070848     @.. @.. H.. H.. 
20070858:	20070850 20070850 20070858 20070858     P.. P.. X.. X.. 
20070868:	20070860 20070860 20070868 20070868     `.. `.. h.. h.. 
20070878:	20070870 20070870 20070878 20070878     p.. p.. x.. x.. 
20070888:	20070880 20070880 20070888 20070888     ... ... ... ... 
20070898:	20070890 20070890 20070898 20070898     ... ... ... ... 
200708a8:	200708a0 200708a0 200708a8 200708a8     ... ... ... ... 
200708b8:	200708b0 200708b0 200708b8 200708b8     ... ... ... ... 
200708c8:	200708c0 200708c0 200708c8 200708c8     ... ... ... ... 
200708d8:	200708d0 200708d0 200708d8 200708d8     ... ... ... ... 
200708e8:	200708e0 200708e0 200708e8 200708e8     ... ... ... ... 
200708f8:	200708f0 200708f0 200708f8 200708f8     ... ... ... ... 
20070908:	20070900 20070900 20070908 20070908     ... ... ... ... 
20070918:	20070910 20070910 20070918 20070918     ... ... ... ... 
20070928:	20070920 20070920 20070928 20070928      ..  .. (.. (.. 
20070938:	20070930 20070930 20070938 20070938     0.. 0.. 8.. 8.. 
20070948:	20070940 20070940 20070948 20070948     @.. @.. H.. H.. 
20070958:	20070950 20070950 20070958 20070958     P.. P.. X.. X.. 
20070968:	20070960 20070960 20070968 20070968     `.. `.. h.. h.. 
20070978:	20070970 20070970 20070978 20070978     p.. p.. x.. x.. 
20070988:	20070980 20070980 20070988 20070988     ... ... ... ... 

20070998 <__malloc_trim_threshold>:
20070998:	00020000                                ....

2007099c <__malloc_sbrk_base>:
2007099c:	ffffffff                                ....

200709a0 <__wctomb>:
200709a0:	00085b4d                                M[..
