
ExUppgift2014_6_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00006590  00080000  00080000  00008000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00086590  00086590  0000e590  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000009a4  20070000  00086598  00010000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          000082e0  200709a8  00086f40  000109a4  2**3
                  ALLOC
  4 .stack        00002000  20078c88  0008f220  000109a4  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  000109a4  2**0
                  CONTENTS, READONLY
  6 .comment      0000005b  00000000  00000000  000109cd  2**0
                  CONTENTS, READONLY
  7 .debug_info   000166ec  00000000  00000000  00010a28  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00003aef  00000000  00000000  00027114  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000086e9  00000000  00000000  0002ac03  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000ff8  00000000  00000000  000332ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000ed8  00000000  00000000  000342e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0001bdba  00000000  00000000  000351bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00016b8e  00000000  00000000  00050f76  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0006b03a  00000000  00000000  00067b04  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00002db4  00000000  00000000  000d2b40  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <_sfixed>:
   80000:	2007ac88 	.word	0x2007ac88
   80004:	000827dd 	.word	0x000827dd
   80008:	000827d9 	.word	0x000827d9
   8000c:	000827d9 	.word	0x000827d9
   80010:	000827d9 	.word	0x000827d9
   80014:	000827d9 	.word	0x000827d9
   80018:	000827d9 	.word	0x000827d9
	...
   8002c:	00080ad1 	.word	0x00080ad1
   80030:	000827d9 	.word	0x000827d9
   80034:	00000000 	.word	0x00000000
   80038:	00080b4d 	.word	0x00080b4d
   8003c:	00080b89 	.word	0x00080b89
   80040:	000827d9 	.word	0x000827d9
   80044:	000827d9 	.word	0x000827d9
   80048:	000827d9 	.word	0x000827d9
   8004c:	000827d9 	.word	0x000827d9
   80050:	000827d9 	.word	0x000827d9
   80054:	000827d9 	.word	0x000827d9
   80058:	000827d9 	.word	0x000827d9
   8005c:	000827d9 	.word	0x000827d9
   80060:	000827d9 	.word	0x000827d9
   80064:	000827d9 	.word	0x000827d9
   80068:	00000000 	.word	0x00000000
   8006c:	00082649 	.word	0x00082649
   80070:	0008265d 	.word	0x0008265d
   80074:	00082671 	.word	0x00082671
   80078:	00082685 	.word	0x00082685
	...
   80084:	000827d9 	.word	0x000827d9
   80088:	000827d9 	.word	0x000827d9
   8008c:	000827d9 	.word	0x000827d9
   80090:	000827d9 	.word	0x000827d9
   80094:	000827d9 	.word	0x000827d9
   80098:	000827d9 	.word	0x000827d9
   8009c:	000827d9 	.word	0x000827d9
   800a0:	000827d9 	.word	0x000827d9
   800a4:	00000000 	.word	0x00000000
   800a8:	000827d9 	.word	0x000827d9
   800ac:	000827d9 	.word	0x000827d9
   800b0:	000827d9 	.word	0x000827d9
   800b4:	000827d9 	.word	0x000827d9
   800b8:	000827d9 	.word	0x000827d9
   800bc:	000827d9 	.word	0x000827d9
   800c0:	000827d9 	.word	0x000827d9
   800c4:	000827d9 	.word	0x000827d9
   800c8:	000827d9 	.word	0x000827d9
   800cc:	000827d9 	.word	0x000827d9
   800d0:	000827d9 	.word	0x000827d9
   800d4:	000827d9 	.word	0x000827d9
   800d8:	000827d9 	.word	0x000827d9
   800dc:	000827d9 	.word	0x000827d9
   800e0:	000827d9 	.word	0x000827d9
   800e4:	000827d9 	.word	0x000827d9
   800e8:	000827d9 	.word	0x000827d9
   800ec:	000827d9 	.word	0x000827d9
   800f0:	000827d9 	.word	0x000827d9

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	200709a8 	.word	0x200709a8
   80110:	00000000 	.word	0x00000000
   80114:	00086598 	.word	0x00086598

00080118 <frame_dummy>:
   80118:	b508      	push	{r3, lr}
   8011a:	4b06      	ldr	r3, [pc, #24]	; (80134 <frame_dummy+0x1c>)
   8011c:	b11b      	cbz	r3, 80126 <frame_dummy+0xe>
   8011e:	4806      	ldr	r0, [pc, #24]	; (80138 <frame_dummy+0x20>)
   80120:	4906      	ldr	r1, [pc, #24]	; (8013c <frame_dummy+0x24>)
   80122:	f3af 8000 	nop.w
   80126:	4806      	ldr	r0, [pc, #24]	; (80140 <frame_dummy+0x28>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b113      	cbz	r3, 80132 <frame_dummy+0x1a>
   8012c:	4b05      	ldr	r3, [pc, #20]	; (80144 <frame_dummy+0x2c>)
   8012e:	b103      	cbz	r3, 80132 <frame_dummy+0x1a>
   80130:	4798      	blx	r3
   80132:	bd08      	pop	{r3, pc}
   80134:	00000000 	.word	0x00000000
   80138:	00086598 	.word	0x00086598
   8013c:	200709ac 	.word	0x200709ac
   80140:	00086598 	.word	0x00086598
   80144:	00000000 	.word	0x00000000

00080148 <ADCSetup>:
#include "global_variables.h"
#include "PWMCustom.h"

/* Setup Function for ADC */
void ADCSetup()
{
   80148:	b538      	push	{r3, r4, r5, lr}
	pmc_enable_periph_clk(ID_ADC);
   8014a:	2025      	movs	r0, #37	; 0x25
   8014c:	4b0e      	ldr	r3, [pc, #56]	; (80188 <ADCSetup+0x40>)
   8014e:	4798      	blx	r3
	adc_init(ADC, sysclk_get_main_hz(), 20000000, 0);		// Configure for maximum frequency @ 20 MHz
   80150:	4c0e      	ldr	r4, [pc, #56]	; (8018c <ADCSetup+0x44>)
   80152:	4620      	mov	r0, r4
   80154:	490e      	ldr	r1, [pc, #56]	; (80190 <ADCSetup+0x48>)
   80156:	4a0f      	ldr	r2, [pc, #60]	; (80194 <ADCSetup+0x4c>)
   80158:	2300      	movs	r3, #0
   8015a:	4d0f      	ldr	r5, [pc, #60]	; (80198 <ADCSetup+0x50>)
   8015c:	47a8      	blx	r5
	adc_configure_timing(ADC, 0, 0, 0);
   8015e:	4620      	mov	r0, r4
   80160:	2100      	movs	r1, #0
   80162:	460a      	mov	r2, r1
   80164:	460b      	mov	r3, r1
   80166:	4d0d      	ldr	r5, [pc, #52]	; (8019c <ADCSetup+0x54>)
   80168:	47a8      	blx	r5
	adc_set_resolution(ADC, ADC_MR_LOWRES_BITS_12);			// 0-4095
   8016a:	4620      	mov	r0, r4
   8016c:	2100      	movs	r1, #0
   8016e:	4b0c      	ldr	r3, [pc, #48]	; (801a0 <ADCSetup+0x58>)
   80170:	4798      	blx	r3
	adc_configure_trigger(ADC, ADC_TRIG_SW, 0);				// trig just by software
   80172:	4620      	mov	r0, r4
   80174:	2100      	movs	r1, #0
   80176:	460a      	mov	r2, r1
   80178:	4b0a      	ldr	r3, [pc, #40]	; (801a4 <ADCSetup+0x5c>)
   8017a:	4798      	blx	r3
	adc_enable_channel(ADC, ADC_CHANNEL_10);				// PB17 - AD8 for Arduino Due
   8017c:	4620      	mov	r0, r4
   8017e:	210a      	movs	r1, #10
   80180:	4b09      	ldr	r3, [pc, #36]	; (801a8 <ADCSetup+0x60>)
   80182:	4798      	blx	r3
   80184:	bd38      	pop	{r3, r4, r5, pc}
   80186:	bf00      	nop
   80188:	00082781 	.word	0x00082781
   8018c:	400c0000 	.word	0x400c0000
   80190:	0a037a00 	.word	0x0a037a00
   80194:	01312d00 	.word	0x01312d00
   80198:	0008021d 	.word	0x0008021d
   8019c:	00080271 	.word	0x00080271
   801a0:	00080251 	.word	0x00080251
   801a4:	00080261 	.word	0x00080261
   801a8:	00080299 	.word	0x00080299

000801ac <ADCReadSensor>:
}

/* Read ADC value*/
int ADCReadSensor()
{
   801ac:	b538      	push	{r3, r4, r5, lr}
	adc_start(ADC);
   801ae:	4807      	ldr	r0, [pc, #28]	; (801cc <ADCReadSensor+0x20>)
   801b0:	4b07      	ldr	r3, [pc, #28]	; (801d0 <ADCReadSensor+0x24>)
   801b2:	4798      	blx	r3
	while((adc_get_status(ADC) & 0x1<<24)==0);  // Wait until DRDY(Data Ready) is HIGH
   801b4:	4d05      	ldr	r5, [pc, #20]	; (801cc <ADCReadSensor+0x20>)
   801b6:	4c07      	ldr	r4, [pc, #28]	; (801d4 <ADCReadSensor+0x28>)
   801b8:	4628      	mov	r0, r5
   801ba:	47a0      	blx	r4
   801bc:	f010 7f80 	tst.w	r0, #16777216	; 0x1000000
   801c0:	d0fa      	beq.n	801b8 <ADCReadSensor+0xc>
	return adc_get_latest_value(ADC);
   801c2:	4802      	ldr	r0, [pc, #8]	; (801cc <ADCReadSensor+0x20>)
   801c4:	4b04      	ldr	r3, [pc, #16]	; (801d8 <ADCReadSensor+0x2c>)
   801c6:	4798      	blx	r3
}
   801c8:	bd38      	pop	{r3, r4, r5, pc}
   801ca:	bf00      	nop
   801cc:	400c0000 	.word	0x400c0000
   801d0:	00080291 	.word	0x00080291
   801d4:	000802a9 	.word	0x000802a9
   801d8:	000802a5 	.word	0x000802a5

000801dc <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
   801dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   801e0:	460c      	mov	r4, r1
   801e2:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
   801e4:	b960      	cbnz	r0, 80200 <_read+0x24>
		return -1;
	}

	for (; len > 0; --len) {
   801e6:	2a00      	cmp	r2, #0
   801e8:	dd0e      	ble.n	80208 <_read+0x2c>
   801ea:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
   801ec:	4e09      	ldr	r6, [pc, #36]	; (80214 <_read+0x38>)
   801ee:	4d0a      	ldr	r5, [pc, #40]	; (80218 <_read+0x3c>)
   801f0:	6830      	ldr	r0, [r6, #0]
   801f2:	4621      	mov	r1, r4
   801f4:	682b      	ldr	r3, [r5, #0]
   801f6:	4798      	blx	r3
		ptr++;
   801f8:	3401      	adds	r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
   801fa:	42bc      	cmp	r4, r7
   801fc:	d1f8      	bne.n	801f0 <_read+0x14>
   801fe:	e006      	b.n	8020e <_read+0x32>
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
   80200:	f04f 30ff 	mov.w	r0, #4294967295
   80204:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}

	for (; len > 0; --len) {
   80208:	2000      	movs	r0, #0
   8020a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
   8020e:	4640      	mov	r0, r8
	}
	return nChars;
}
   80210:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80214:	20078c80 	.word	0x20078c80
   80218:	20078c78 	.word	0x20078c78

0008021c <adc_init>:
 *
 * \return 0 on success.
 */
uint32_t adc_init(Adc *p_adc, const uint32_t ul_mck,
		const uint32_t ul_adc_clock, const enum adc_startup_time startup)
{
   8021c:	b430      	push	{r4, r5}
	uint32_t ul_prescal;

	/*  Reset the controller. */
	p_adc->ADC_CR = ADC_CR_SWRST;
   8021e:	2401      	movs	r4, #1
   80220:	6004      	str	r4, [r0, #0]

	/* Reset Mode Register. */
	p_adc->ADC_MR = 0;
   80222:	2400      	movs	r4, #0
   80224:	6044      	str	r4, [r0, #4]

	/* Reset PDC transfer. */
	p_adc->ADC_PTCR = (ADC_PTCR_RXTDIS | ADC_PTCR_TXTDIS);
   80226:	f240 2502 	movw	r5, #514	; 0x202
   8022a:	f8c0 5120 	str.w	r5, [r0, #288]	; 0x120
	p_adc->ADC_RCR = 0;
   8022e:	f8c0 4104 	str.w	r4, [r0, #260]	; 0x104
	p_adc->ADC_RNCR = 0;
   80232:	f8c0 4114 	str.w	r4, [r0, #276]	; 0x114

	ul_prescal = ul_mck / (2 * ul_adc_clock) - 1;
	p_adc->ADC_MR |= ADC_MR_PRESCAL(ul_prescal) | startup;
   80236:	6845      	ldr	r5, [r0, #4]
   80238:	432b      	orrs	r3, r5
	/* Reset PDC transfer. */
	p_adc->ADC_PTCR = (ADC_PTCR_RXTDIS | ADC_PTCR_TXTDIS);
	p_adc->ADC_RCR = 0;
	p_adc->ADC_RNCR = 0;

	ul_prescal = ul_mck / (2 * ul_adc_clock) - 1;
   8023a:	0052      	lsls	r2, r2, #1
   8023c:	fbb1 f1f2 	udiv	r1, r1, r2
   80240:	1e4d      	subs	r5, r1, #1
	p_adc->ADC_MR |= ADC_MR_PRESCAL(ul_prescal) | startup;
   80242:	022d      	lsls	r5, r5, #8
   80244:	b2ad      	uxth	r5, r5
   80246:	432b      	orrs	r3, r5
   80248:	6043      	str	r3, [r0, #4]
	return 0;
}
   8024a:	4620      	mov	r0, r4
   8024c:	bc30      	pop	{r4, r5}
   8024e:	4770      	bx	lr

00080250 <adc_set_resolution>:
		p_adc->ADC_MR &= ~ADC_MR_LOWRES;
		p_adc->ADC_EMR |= resolution;
		break;
	}
#else
	p_adc->ADC_MR &= ~ADC_MR_LOWRES;
   80250:	6843      	ldr	r3, [r0, #4]
   80252:	f023 0310 	bic.w	r3, r3, #16
   80256:	6043      	str	r3, [r0, #4]
	p_adc->ADC_MR |= resolution;
   80258:	6843      	ldr	r3, [r0, #4]
   8025a:	4319      	orrs	r1, r3
   8025c:	6041      	str	r1, [r0, #4]
   8025e:	4770      	bx	lr

00080260 <adc_configure_trigger>:
 *
 */
void adc_configure_trigger(Adc *p_adc, const enum adc_trigger_t trigger,
		uint8_t uc_freerun)
{
	p_adc->ADC_MR |= trigger | ((uc_freerun << 7) & ADC_MR_FREERUN);
   80260:	6843      	ldr	r3, [r0, #4]
   80262:	4319      	orrs	r1, r3
   80264:	01d2      	lsls	r2, r2, #7
   80266:	b2d3      	uxtb	r3, r2
   80268:	4319      	orrs	r1, r3
   8026a:	6041      	str	r1, [r0, #4]
   8026c:	4770      	bx	lr
   8026e:	bf00      	nop

00080270 <adc_configure_timing>:
 * \param uc_settling Analog settling time = (uc_settling + 1) / ADC clock.
 * \param uc_transfer Data transfer time = (uc_transfer * 2 + 3) / ADC clock.
 */
void adc_configure_timing(Adc *p_adc, const uint8_t uc_tracking,
		const enum adc_settling_time_t settling,const uint8_t uc_transfer)
{
   80270:	b410      	push	{r4}
	p_adc->ADC_MR |= ADC_MR_TRANSFER(uc_transfer)
   80272:	6844      	ldr	r4, [r0, #4]
			| settling | ADC_MR_TRACKTIM(uc_tracking);
   80274:	4322      	orrs	r2, r4
   80276:	0609      	lsls	r1, r1, #24
   80278:	f001 6470 	and.w	r4, r1, #251658240	; 0xf000000
   8027c:	4322      	orrs	r2, r4
 * \param uc_transfer Data transfer time = (uc_transfer * 2 + 3) / ADC clock.
 */
void adc_configure_timing(Adc *p_adc, const uint8_t uc_tracking,
		const enum adc_settling_time_t settling,const uint8_t uc_transfer)
{
	p_adc->ADC_MR |= ADC_MR_TRANSFER(uc_transfer)
   8027e:	071b      	lsls	r3, r3, #28
   80280:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
   80284:	431a      	orrs	r2, r3
   80286:	6042      	str	r2, [r0, #4]
			| settling | ADC_MR_TRACKTIM(uc_tracking);
}
   80288:	f85d 4b04 	ldr.w	r4, [sp], #4
   8028c:	4770      	bx	lr
   8028e:	bf00      	nop

00080290 <adc_start>:
 * \param p_adc Pointer to an ADC instance.
 */

void adc_start(Adc *p_adc)
{
	p_adc->ADC_CR = ADC_CR_START;
   80290:	2302      	movs	r3, #2
   80292:	6003      	str	r3, [r0, #0]
   80294:	4770      	bx	lr
   80296:	bf00      	nop

00080298 <adc_enable_channel>:
 * \param p_adc Pointer to an ADC instance.
 * \param adc_ch ADC channel number.
 */
void adc_enable_channel(Adc *p_adc, const enum adc_channel_num_t adc_ch)
{
	p_adc->ADC_CHER = 1 << adc_ch;
   80298:	2301      	movs	r3, #1
   8029a:	fa03 f101 	lsl.w	r1, r3, r1
   8029e:	6101      	str	r1, [r0, #16]
   802a0:	4770      	bx	lr
   802a2:	bf00      	nop

000802a4 <adc_get_latest_value>:
 *
 * \return ADC latest value.
 */
uint32_t adc_get_latest_value(const Adc *p_adc)
{
	return p_adc->ADC_LCDR;
   802a4:	6a00      	ldr	r0, [r0, #32]
}
   802a6:	4770      	bx	lr

000802a8 <adc_get_status>:
 *
 * \return ADC status structure.
 */
uint32_t adc_get_status(const Adc *p_adc)
{
	return p_adc->ADC_ISR;
   802a8:	6b00      	ldr	r0, [r0, #48]	; 0x30
}
   802aa:	4770      	bx	lr

000802ac <usart_write>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
   802ac:	6943      	ldr	r3, [r0, #20]
   802ae:	f013 0f02 	tst.w	r3, #2
		return 1;
	}

	p_usart->US_THR = US_THR_TXCHR(c);
   802b2:	bf1d      	ittte	ne
   802b4:	f3c1 0108 	ubfxne	r1, r1, #0, #9
   802b8:	61c1      	strne	r1, [r0, #28]
	return 0;
   802ba:	2000      	movne	r0, #0
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
		return 1;
   802bc:	2001      	moveq	r0, #1
	}

	p_usart->US_THR = US_THR_TXCHR(c);
	return 0;
}
   802be:	4770      	bx	lr

000802c0 <usart_read>:
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
   802c0:	6943      	ldr	r3, [r0, #20]
   802c2:	f013 0f01 	tst.w	r3, #1
   802c6:	d005      	beq.n	802d4 <usart_read+0x14>
		return 1;
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
   802c8:	6983      	ldr	r3, [r0, #24]
   802ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
   802ce:	600b      	str	r3, [r1, #0]

	return 0;
   802d0:	2000      	movs	r0, #0
   802d2:	4770      	bx	lr
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
		return 1;
   802d4:	2001      	movs	r0, #1

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;

	return 0;
}
   802d6:	4770      	bx	lr

000802d8 <PIDRegulate>:
#include "ADCCustom.h"
#include "global_variables.h"
#include "UARTFunctions.h"

/* PID Function */
void PIDRegulate(void){
   802d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   802dc:	2431      	movs	r4, #49	; 0x31

	// moving average filter of sampled sensor values
	uint32_t valuesTotal = 0;
   802de:	2500      	movs	r5, #0
	for(int i = 0; i<FILTER_AVERAGE_SAMPLES-1; i++){
		valuesTotal += ADCReadSensor();
   802e0:	4e49      	ldr	r6, [pc, #292]	; (80408 <PIDRegulate+0x130>)
   802e2:	47b0      	blx	r6
   802e4:	4405      	add	r5, r0
/* PID Function */
void PIDRegulate(void){

	// moving average filter of sampled sensor values
	uint32_t valuesTotal = 0;
	for(int i = 0; i<FILTER_AVERAGE_SAMPLES-1; i++){
   802e6:	3c01      	subs	r4, #1
   802e8:	d1fb      	bne.n	802e2 <PIDRegulate+0xa>
		valuesTotal += ADCReadSensor();
	}
	distance = valuesTotal / FILTER_AVERAGE_SAMPLES;
   802ea:	4b48      	ldr	r3, [pc, #288]	; (8040c <PIDRegulate+0x134>)
   802ec:	fba3 2505 	umull	r2, r5, r3, r5
   802f0:	092d      	lsrs	r5, r5, #4
   802f2:	4b47      	ldr	r3, [pc, #284]	; (80410 <PIDRegulate+0x138>)
   802f4:	601d      	str	r5, [r3, #0]

	// P-regulation
	error = (setPoint - distance);
   802f6:	4b47      	ldr	r3, [pc, #284]	; (80414 <PIDRegulate+0x13c>)
   802f8:	681b      	ldr	r3, [r3, #0]
   802fa:	ebc5 0a03 	rsb	sl, r5, r3
   802fe:	4b46      	ldr	r3, [pc, #280]	; (80418 <PIDRegulate+0x140>)
   80300:	f8c3 a000 	str.w	sl, [r3]

	// I-regulation
	error_sum = (double)error_sum + (double)error*DT_SECONDS;
   80304:	4e45      	ldr	r6, [pc, #276]	; (8041c <PIDRegulate+0x144>)
   80306:	4650      	mov	r0, sl
   80308:	47b0      	blx	r6
   8030a:	4604      	mov	r4, r0
   8030c:	460d      	mov	r5, r1
   8030e:	f8df 8134 	ldr.w	r8, [pc, #308]	; 80444 <PIDRegulate+0x16c>
   80312:	f8d8 0000 	ldr.w	r0, [r8]
   80316:	47b0      	blx	r6
   80318:	4606      	mov	r6, r0
   8031a:	460f      	mov	r7, r1
   8031c:	4620      	mov	r0, r4
   8031e:	4629      	mov	r1, r5
   80320:	a337      	add	r3, pc, #220	; (adr r3, 80400 <PIDRegulate+0x128>)
   80322:	e9d3 2300 	ldrd	r2, r3, [r3]
   80326:	f8df c104 	ldr.w	ip, [pc, #260]	; 8042c <PIDRegulate+0x154>
   8032a:	47e0      	blx	ip
   8032c:	4602      	mov	r2, r0
   8032e:	460b      	mov	r3, r1
   80330:	4630      	mov	r0, r6
   80332:	4639      	mov	r1, r7
   80334:	4e3a      	ldr	r6, [pc, #232]	; (80420 <PIDRegulate+0x148>)
   80336:	47b0      	blx	r6
   80338:	4b3a      	ldr	r3, [pc, #232]	; (80424 <PIDRegulate+0x14c>)
   8033a:	4798      	blx	r3
   8033c:	4681      	mov	r9, r0
   8033e:	f8c8 0000 	str.w	r0, [r8]
	double I_Output;
	if(kI_Gain == 0)
   80342:	4b39      	ldr	r3, [pc, #228]	; (80428 <PIDRegulate+0x150>)
   80344:	e9d3 6700 	ldrd	r6, r7, [r3]
   80348:	4630      	mov	r0, r6
   8034a:	4639      	mov	r1, r7
   8034c:	2200      	movs	r2, #0
   8034e:	2300      	movs	r3, #0
   80350:	f8df c0f4 	ldr.w	ip, [pc, #244]	; 80448 <PIDRegulate+0x170>
   80354:	47e0      	blx	ip
   80356:	b958      	cbnz	r0, 80370 <PIDRegulate+0x98>
	{
		I_Output = 0;
		} else {
		I_Output = (double)kI_Gain*error_sum;
   80358:	4648      	mov	r0, r9
   8035a:	4b30      	ldr	r3, [pc, #192]	; (8041c <PIDRegulate+0x144>)
   8035c:	4798      	blx	r3
   8035e:	4602      	mov	r2, r0
   80360:	460b      	mov	r3, r1
   80362:	4630      	mov	r0, r6
   80364:	4639      	mov	r1, r7
   80366:	4e31      	ldr	r6, [pc, #196]	; (8042c <PIDRegulate+0x154>)
   80368:	47b0      	blx	r6
   8036a:	4606      	mov	r6, r0
   8036c:	460f      	mov	r7, r1
   8036e:	e001      	b.n	80374 <PIDRegulate+0x9c>
	// I-regulation
	error_sum = (double)error_sum + (double)error*DT_SECONDS;
	double I_Output;
	if(kI_Gain == 0)
	{
		I_Output = 0;
   80370:	2600      	movs	r6, #0
   80372:	2700      	movs	r7, #0
	}

	// D-regulation
	double D_Output;

	if(error == 1)
   80374:	f1ba 0f01 	cmp.w	sl, #1
   80378:	d014      	beq.n	803a4 <PIDRegulate+0xcc>
	{
		D_Output = 0;
		} else {
		D_Output = (double)((kD_Gain*(error - error_old))/DT_SECONDS);
   8037a:	4b2d      	ldr	r3, [pc, #180]	; (80430 <PIDRegulate+0x158>)
   8037c:	6818      	ldr	r0, [r3, #0]
   8037e:	ebc0 000a 	rsb	r0, r0, sl
   80382:	4b26      	ldr	r3, [pc, #152]	; (8041c <PIDRegulate+0x144>)
   80384:	4798      	blx	r3
   80386:	4b2b      	ldr	r3, [pc, #172]	; (80434 <PIDRegulate+0x15c>)
   80388:	e9d3 2300 	ldrd	r2, r3, [r3]
   8038c:	f8df c09c 	ldr.w	ip, [pc, #156]	; 8042c <PIDRegulate+0x154>
   80390:	47e0      	blx	ip
   80392:	a31b      	add	r3, pc, #108	; (adr r3, 80400 <PIDRegulate+0x128>)
   80394:	e9d3 2300 	ldrd	r2, r3, [r3]
   80398:	f8df c0b0 	ldr.w	ip, [pc, #176]	; 8044c <PIDRegulate+0x174>
   8039c:	47e0      	blx	ip
   8039e:	4680      	mov	r8, r0
   803a0:	4689      	mov	r9, r1
   803a2:	e003      	b.n	803ac <PIDRegulate+0xd4>
	// D-regulation
	double D_Output;

	if(error == 1)
	{
		D_Output = 0;
   803a4:	f04f 0800 	mov.w	r8, #0
   803a8:	f04f 0900 	mov.w	r9, #0
		} else {
		D_Output = (double)((kD_Gain*(error - error_old))/DT_SECONDS);
	}
	error_old = error;
   803ac:	4b20      	ldr	r3, [pc, #128]	; (80430 <PIDRegulate+0x158>)
   803ae:	f8c3 a000 	str.w	sl, [r3]

	// Add up P, I and D outputs
	output_value = (kP_Gain*error)+I_Output+D_Output;
   803b2:	4620      	mov	r0, r4
   803b4:	4629      	mov	r1, r5
   803b6:	4b20      	ldr	r3, [pc, #128]	; (80438 <PIDRegulate+0x160>)
   803b8:	e9d3 2300 	ldrd	r2, r3, [r3]
   803bc:	4c1b      	ldr	r4, [pc, #108]	; (8042c <PIDRegulate+0x154>)
   803be:	47a0      	blx	r4
   803c0:	4c17      	ldr	r4, [pc, #92]	; (80420 <PIDRegulate+0x148>)
   803c2:	4632      	mov	r2, r6
   803c4:	463b      	mov	r3, r7
   803c6:	47a0      	blx	r4
   803c8:	4642      	mov	r2, r8
   803ca:	464b      	mov	r3, r9
   803cc:	47a0      	blx	r4
   803ce:	4b15      	ldr	r3, [pc, #84]	; (80424 <PIDRegulate+0x14c>)
   803d0:	4798      	blx	r3
	
	// Protection vs overflow/underflow
	if (output_value < PID_PWM_MIN)
   803d2:	2800      	cmp	r0, #0
   803d4:	da03      	bge.n	803de <PIDRegulate+0x106>
	{
		output_value = PID_PWM_MIN;
   803d6:	2200      	movs	r2, #0
   803d8:	4b18      	ldr	r3, [pc, #96]	; (8043c <PIDRegulate+0x164>)
   803da:	601a      	str	r2, [r3, #0]
   803dc:	e009      	b.n	803f2 <PIDRegulate+0x11a>
	}
	else if (output_value > PID_PWM_MAX)
   803de:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
   803e2:	da02      	bge.n	803ea <PIDRegulate+0x112>
		D_Output = (double)((kD_Gain*(error - error_old))/DT_SECONDS);
	}
	error_old = error;

	// Add up P, I and D outputs
	output_value = (kP_Gain*error)+I_Output+D_Output;
   803e4:	4b15      	ldr	r3, [pc, #84]	; (8043c <PIDRegulate+0x164>)
   803e6:	6018      	str	r0, [r3, #0]
   803e8:	e003      	b.n	803f2 <PIDRegulate+0x11a>
	{
		output_value = PID_PWM_MIN;
	}
	else if (output_value > PID_PWM_MAX)
	{
		output_value = PID_PWM_MAX;
   803ea:	f240 32e7 	movw	r2, #999	; 0x3e7
   803ee:	4b13      	ldr	r3, [pc, #76]	; (8043c <PIDRegulate+0x164>)
   803f0:	601a      	str	r2, [r3, #0]
	}

	// Write PID value to PWM
	PWMDutyCycle(output_value);
   803f2:	4b12      	ldr	r3, [pc, #72]	; (8043c <PIDRegulate+0x164>)
   803f4:	6818      	ldr	r0, [r3, #0]
   803f6:	4b12      	ldr	r3, [pc, #72]	; (80440 <PIDRegulate+0x168>)
   803f8:	4798      	blx	r3
   803fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   803fe:	bf00      	nop
   80400:	9999999a 	.word	0x9999999a
   80404:	3fa99999 	.word	0x3fa99999
   80408:	000801ad 	.word	0x000801ad
   8040c:	51eb851f 	.word	0x51eb851f
   80410:	200709d4 	.word	0x200709d4
   80414:	200709f8 	.word	0x200709f8
   80418:	200709d8 	.word	0x200709d8
   8041c:	00082d85 	.word	0x00082d85
   80420:	00082aed 	.word	0x00082aed
   80424:	00083385 	.word	0x00083385
   80428:	200709f0 	.word	0x200709f0
   8042c:	00082e51 	.word	0x00082e51
   80430:	200709d0 	.word	0x200709d0
   80434:	200709e8 	.word	0x200709e8
   80438:	200709e0 	.word	0x200709e0
   8043c:	200709cc 	.word	0x200709cc
   80440:	00080511 	.word	0x00080511
   80444:	200709c4 	.word	0x200709c4
   80448:	00083321 	.word	0x00083321
   8044c:	000830a5 	.word	0x000830a5

00080450 <PIDRegulationTask>:
#include "global_variables.h"
#include "PIDRegulation.h"
#include "testFunctions.h"

void PIDRegulationTask (void *pvParameters)
{
   80450:	b570      	push	{r4, r5, r6, lr}
   80452:	b082      	sub	sp, #8
	//	printf("PID Task initialized and PAUSED\n\r");

	// Pause here untill Matlab sent values
	xSemaphoreTake(sem, portMAX_DELAY);
   80454:	4d0c      	ldr	r5, [pc, #48]	; (80488 <PIDRegulationTask+0x38>)
   80456:	6828      	ldr	r0, [r5, #0]
   80458:	2100      	movs	r1, #0
   8045a:	f64f 72ff 	movw	r2, #65535	; 0xffff
   8045e:	460b      	mov	r3, r1
   80460:	4c0a      	ldr	r4, [pc, #40]	; (8048c <PIDRegulationTask+0x3c>)
   80462:	47a0      	blx	r4
	xSemaphoreTake(sem, portMAX_DELAY);
   80464:	6828      	ldr	r0, [r5, #0]
   80466:	2100      	movs	r1, #0
   80468:	f64f 72ff 	movw	r2, #65535	; 0xffff
   8046c:	460b      	mov	r3, r1
   8046e:	47a0      	blx	r4

	portTickType xLastWakeTime = xTaskGetTickCount();
   80470:	4b07      	ldr	r3, [pc, #28]	; (80490 <PIDRegulationTask+0x40>)
   80472:	4798      	blx	r3
   80474:	ac02      	add	r4, sp, #8
   80476:	f824 0d02 	strh.w	r0, [r4, #-2]!
	const portTickType xFrequency =  DTIME_MS; // Run between 50-100ms

	for(;;){
		vTaskDelayUntil(&xLastWakeTime,xFrequency);	// Samplingstid
   8047a:	4e06      	ldr	r6, [pc, #24]	; (80494 <PIDRegulationTask+0x44>)
		PIDRegulate(); // Run PID
   8047c:	4d06      	ldr	r5, [pc, #24]	; (80498 <PIDRegulationTask+0x48>)

	portTickType xLastWakeTime = xTaskGetTickCount();
	const portTickType xFrequency =  DTIME_MS; // Run between 50-100ms

	for(;;){
		vTaskDelayUntil(&xLastWakeTime,xFrequency);	// Samplingstid
   8047e:	4620      	mov	r0, r4
   80480:	2132      	movs	r1, #50	; 0x32
   80482:	47b0      	blx	r6
		PIDRegulate(); // Run PID
   80484:	47a8      	blx	r5
   80486:	e7fa      	b.n	8047e <PIDRegulationTask+0x2e>
   80488:	200709c8 	.word	0x200709c8
   8048c:	000810f5 	.word	0x000810f5
   80490:	00081585 	.word	0x00081585
   80494:	000817d9 	.word	0x000817d9
   80498:	000802d9 	.word	0x000802d9

0008049c <PWMSetup>:
#include <asf.h>
#include "PWMCustom.h"
#include "global_variables.h"

void PWMSetup()
{
   8049c:	b530      	push	{r4, r5, lr}
   8049e:	b085      	sub	sp, #20
	pmc_enable_periph_clk(ID_PWM);
   804a0:	2024      	movs	r0, #36	; 0x24
   804a2:	4b12      	ldr	r3, [pc, #72]	; (804ec <PWMSetup+0x50>)
   804a4:	4798      	blx	r3
	pwm_channel_disable(PWM, PWM_CHANNEL_6);
   804a6:	4c12      	ldr	r4, [pc, #72]	; (804f0 <PWMSetup+0x54>)
   804a8:	4620      	mov	r0, r4
   804aa:	2106      	movs	r1, #6
   804ac:	4b11      	ldr	r3, [pc, #68]	; (804f4 <PWMSetup+0x58>)
   804ae:	4798      	blx	r3
	pwm_clock_t pwm_clock ={
   804b0:	4b11      	ldr	r3, [pc, #68]	; (804f8 <PWMSetup+0x5c>)
   804b2:	9301      	str	r3, [sp, #4]
   804b4:	2500      	movs	r5, #0
   804b6:	9502      	str	r5, [sp, #8]
   804b8:	4b10      	ldr	r3, [pc, #64]	; (804fc <PWMSetup+0x60>)
   804ba:	9303      	str	r3, [sp, #12]
		.ul_clka = 1000*999,
		.ul_clkb = 0,
		.ul_mck = sysclk_get_cpu_hz()
	};
	pwm_init(PWM, &pwm_clock);
   804bc:	4620      	mov	r0, r4
   804be:	a901      	add	r1, sp, #4
   804c0:	4b0f      	ldr	r3, [pc, #60]	; (80500 <PWMSetup+0x64>)
   804c2:	4798      	blx	r3

	pwm_channel.alignment = PWM_ALIGN_LEFT;
   804c4:	490f      	ldr	r1, [pc, #60]	; (80504 <PWMSetup+0x68>)
   804c6:	810d      	strh	r5, [r1, #8]
	pwm_channel.polarity = PWM_LOW;
   804c8:	728d      	strb	r5, [r1, #10]
	pwm_channel.ul_prescaler = PWM_CMR_CPRE_CLKA;
   804ca:	220b      	movs	r2, #11
   804cc:	604a      	str	r2, [r1, #4]
	pwm_channel.ul_duty = 0;
   804ce:	60cd      	str	r5, [r1, #12]
	pwm_channel.ul_period = 999;
   804d0:	f240 32e7 	movw	r2, #999	; 0x3e7
   804d4:	610a      	str	r2, [r1, #16]
	pwm_channel.channel = PWM_CHANNEL_6;
   804d6:	2506      	movs	r5, #6
   804d8:	600d      	str	r5, [r1, #0]
	pwm_channel_init(PWM, &pwm_channel);
   804da:	4620      	mov	r0, r4
   804dc:	4b0a      	ldr	r3, [pc, #40]	; (80508 <PWMSetup+0x6c>)
   804de:	4798      	blx	r3
	pwm_channel_enable(PWM, PWM_CHANNEL_6);
   804e0:	4620      	mov	r0, r4
   804e2:	4629      	mov	r1, r5
   804e4:	4b09      	ldr	r3, [pc, #36]	; (8050c <PWMSetup+0x70>)
   804e6:	4798      	blx	r3
}
   804e8:	b005      	add	sp, #20
   804ea:	bd30      	pop	{r4, r5, pc}
   804ec:	00082781 	.word	0x00082781
   804f0:	40094000 	.word	0x40094000
   804f4:	00082265 	.word	0x00082265
   804f8:	000f3e58 	.word	0x000f3e58
   804fc:	0501bd00 	.word	0x0501bd00
   80500:	000820f1 	.word	0x000820f1
   80504:	20078c50 	.word	0x20078c50
   80508:	00082131 	.word	0x00082131
   8050c:	00082259 	.word	0x00082259

00080510 <PWMDutyCycle>:

void PWMDutyCycle(int value){
   80510:	b508      	push	{r3, lr}
   80512:	4602      	mov	r2, r0
	pwm_channel_update_duty(PWM, &pwm_channel, value);
   80514:	4802      	ldr	r0, [pc, #8]	; (80520 <PWMDutyCycle+0x10>)
   80516:	4903      	ldr	r1, [pc, #12]	; (80524 <PWMDutyCycle+0x14>)
   80518:	4b03      	ldr	r3, [pc, #12]	; (80528 <PWMDutyCycle+0x18>)
   8051a:	4798      	blx	r3
   8051c:	bd08      	pop	{r3, pc}
   8051e:	bf00      	nop
   80520:	40094000 	.word	0x40094000
   80524:	20078c50 	.word	0x20078c50
   80528:	00082235 	.word	0x00082235

0008052c <shieldInit>:
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   8052c:	4b07      	ldr	r3, [pc, #28]	; (8054c <shieldInit+0x20>)
   8052e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   80532:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   80534:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   80538:	635a      	str	r2, [r3, #52]	; 0x34
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   8053a:	f503 7300 	add.w	r3, r3, #512	; 0x200
   8053e:	f44f 7280 	mov.w	r2, #256	; 0x100
   80542:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   80544:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   80548:	631a      	str	r2, [r3, #48]	; 0x30
   8054a:	4770      	bx	lr
   8054c:	400e1200 	.word	0x400e1200

00080550 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
   80550:	b5f0      	push	{r4, r5, r6, r7, lr}
   80552:	b083      	sub	sp, #12
   80554:	4604      	mov	r4, r0
   80556:	460d      	mov	r5, r1
	uint32_t val = 0;
   80558:	2300      	movs	r3, #0
   8055a:	9301      	str	r3, [sp, #4]

	/* Avoid Cppcheck Warning */
	UNUSED(val);

#ifdef UART
	if (UART == (Uart*)p_usart) {
   8055c:	4b1f      	ldr	r3, [pc, #124]	; (805dc <usart_serial_getchar+0x8c>)
   8055e:	4298      	cmp	r0, r3
   80560:	d107      	bne.n	80572 <usart_serial_getchar+0x22>
		while (uart_read((Uart*)p_usart, data));
   80562:	461f      	mov	r7, r3
   80564:	4e1e      	ldr	r6, [pc, #120]	; (805e0 <usart_serial_getchar+0x90>)
   80566:	4638      	mov	r0, r7
   80568:	4629      	mov	r1, r5
   8056a:	47b0      	blx	r6
   8056c:	2800      	cmp	r0, #0
   8056e:	d1fa      	bne.n	80566 <usart_serial_getchar+0x16>
   80570:	e019      	b.n	805a6 <usart_serial_getchar+0x56>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   80572:	4b1c      	ldr	r3, [pc, #112]	; (805e4 <usart_serial_getchar+0x94>)
   80574:	4298      	cmp	r0, r3
   80576:	d109      	bne.n	8058c <usart_serial_getchar+0x3c>
		while (usart_read(p_usart, &val));
   80578:	461f      	mov	r7, r3
   8057a:	4e1b      	ldr	r6, [pc, #108]	; (805e8 <usart_serial_getchar+0x98>)
   8057c:	4638      	mov	r0, r7
   8057e:	a901      	add	r1, sp, #4
   80580:	47b0      	blx	r6
   80582:	2800      	cmp	r0, #0
   80584:	d1fa      	bne.n	8057c <usart_serial_getchar+0x2c>
		*data = (uint8_t)(val & 0xFF);
   80586:	9b01      	ldr	r3, [sp, #4]
   80588:	702b      	strb	r3, [r5, #0]
   8058a:	e019      	b.n	805c0 <usart_serial_getchar+0x70>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   8058c:	4b17      	ldr	r3, [pc, #92]	; (805ec <usart_serial_getchar+0x9c>)
   8058e:	4298      	cmp	r0, r3
   80590:	d109      	bne.n	805a6 <usart_serial_getchar+0x56>
		while (usart_read(p_usart, &val));
   80592:	461e      	mov	r6, r3
   80594:	4c14      	ldr	r4, [pc, #80]	; (805e8 <usart_serial_getchar+0x98>)
   80596:	4630      	mov	r0, r6
   80598:	a901      	add	r1, sp, #4
   8059a:	47a0      	blx	r4
   8059c:	2800      	cmp	r0, #0
   8059e:	d1fa      	bne.n	80596 <usart_serial_getchar+0x46>
		*data = (uint8_t)(val & 0xFF);
   805a0:	9b01      	ldr	r3, [sp, #4]
   805a2:	702b      	strb	r3, [r5, #0]
   805a4:	e018      	b.n	805d8 <usart_serial_getchar+0x88>
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   805a6:	4b12      	ldr	r3, [pc, #72]	; (805f0 <usart_serial_getchar+0xa0>)
   805a8:	429c      	cmp	r4, r3
   805aa:	d109      	bne.n	805c0 <usart_serial_getchar+0x70>
		while (usart_read(p_usart, &val));
   805ac:	461e      	mov	r6, r3
   805ae:	4c0e      	ldr	r4, [pc, #56]	; (805e8 <usart_serial_getchar+0x98>)
   805b0:	4630      	mov	r0, r6
   805b2:	a901      	add	r1, sp, #4
   805b4:	47a0      	blx	r4
   805b6:	2800      	cmp	r0, #0
   805b8:	d1fa      	bne.n	805b0 <usart_serial_getchar+0x60>
		*data = (uint8_t)(val & 0xFF);
   805ba:	9b01      	ldr	r3, [sp, #4]
   805bc:	702b      	strb	r3, [r5, #0]
   805be:	e00b      	b.n	805d8 <usart_serial_getchar+0x88>
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   805c0:	4b0c      	ldr	r3, [pc, #48]	; (805f4 <usart_serial_getchar+0xa4>)
   805c2:	429c      	cmp	r4, r3
   805c4:	d108      	bne.n	805d8 <usart_serial_getchar+0x88>
		while (usart_read(p_usart, &val));
   805c6:	461e      	mov	r6, r3
   805c8:	4c07      	ldr	r4, [pc, #28]	; (805e8 <usart_serial_getchar+0x98>)
   805ca:	4630      	mov	r0, r6
   805cc:	a901      	add	r1, sp, #4
   805ce:	47a0      	blx	r4
   805d0:	2800      	cmp	r0, #0
   805d2:	d1fa      	bne.n	805ca <usart_serial_getchar+0x7a>
		*data = (uint8_t)(val & 0xFF);
   805d4:	9b01      	ldr	r3, [sp, #4]
   805d6:	702b      	strb	r3, [r5, #0]
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
   805d8:	b003      	add	sp, #12
   805da:	bdf0      	pop	{r4, r5, r6, r7, pc}
   805dc:	400e0800 	.word	0x400e0800
   805e0:	000822c1 	.word	0x000822c1
   805e4:	40098000 	.word	0x40098000
   805e8:	000802c1 	.word	0x000802c1
   805ec:	4009c000 	.word	0x4009c000
   805f0:	400a0000 	.word	0x400a0000
   805f4:	400a4000 	.word	0x400a4000

000805f8 <usart_serial_putchar>:
 *   \retval 1  The character was written.
 *   \retval 0  The function timed out before the USART transmitter became
 * ready to send.
 */
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
   805f8:	b570      	push	{r4, r5, r6, lr}
   805fa:	460c      	mov	r4, r1
#ifdef UART
	if (UART == (Uart*)p_usart) {
   805fc:	4b21      	ldr	r3, [pc, #132]	; (80684 <usart_serial_putchar+0x8c>)
   805fe:	4298      	cmp	r0, r3
   80600:	d107      	bne.n	80612 <usart_serial_putchar+0x1a>
		while (uart_write((Uart*)p_usart, c)!=0);
   80602:	461e      	mov	r6, r3
   80604:	4d20      	ldr	r5, [pc, #128]	; (80688 <usart_serial_putchar+0x90>)
   80606:	4630      	mov	r0, r6
   80608:	4621      	mov	r1, r4
   8060a:	47a8      	blx	r5
   8060c:	2800      	cmp	r0, #0
   8060e:	d1fa      	bne.n	80606 <usart_serial_putchar+0xe>
   80610:	e02b      	b.n	8066a <usart_serial_putchar+0x72>
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   80612:	4b1e      	ldr	r3, [pc, #120]	; (8068c <usart_serial_putchar+0x94>)
   80614:	4298      	cmp	r0, r3
   80616:	d107      	bne.n	80628 <usart_serial_putchar+0x30>
		while (usart_write(p_usart, c)!=0);
   80618:	461e      	mov	r6, r3
   8061a:	4d1d      	ldr	r5, [pc, #116]	; (80690 <usart_serial_putchar+0x98>)
   8061c:	4630      	mov	r0, r6
   8061e:	4621      	mov	r1, r4
   80620:	47a8      	blx	r5
   80622:	2800      	cmp	r0, #0
   80624:	d1fa      	bne.n	8061c <usart_serial_putchar+0x24>
   80626:	e022      	b.n	8066e <usart_serial_putchar+0x76>
		return 1;
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   80628:	4b1a      	ldr	r3, [pc, #104]	; (80694 <usart_serial_putchar+0x9c>)
   8062a:	4298      	cmp	r0, r3
   8062c:	d107      	bne.n	8063e <usart_serial_putchar+0x46>
		while (usart_write(p_usart, c)!=0);
   8062e:	461e      	mov	r6, r3
   80630:	4d17      	ldr	r5, [pc, #92]	; (80690 <usart_serial_putchar+0x98>)
   80632:	4630      	mov	r0, r6
   80634:	4621      	mov	r1, r4
   80636:	47a8      	blx	r5
   80638:	2800      	cmp	r0, #0
   8063a:	d1fa      	bne.n	80632 <usart_serial_putchar+0x3a>
   8063c:	e019      	b.n	80672 <usart_serial_putchar+0x7a>
		return 1;
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   8063e:	4b16      	ldr	r3, [pc, #88]	; (80698 <usart_serial_putchar+0xa0>)
   80640:	4298      	cmp	r0, r3
   80642:	d107      	bne.n	80654 <usart_serial_putchar+0x5c>
		while (usart_write(p_usart, c)!=0);
   80644:	461e      	mov	r6, r3
   80646:	4d12      	ldr	r5, [pc, #72]	; (80690 <usart_serial_putchar+0x98>)
   80648:	4630      	mov	r0, r6
   8064a:	4621      	mov	r1, r4
   8064c:	47a8      	blx	r5
   8064e:	2800      	cmp	r0, #0
   80650:	d1fa      	bne.n	80648 <usart_serial_putchar+0x50>
   80652:	e010      	b.n	80676 <usart_serial_putchar+0x7e>
		return 1;
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   80654:	4b11      	ldr	r3, [pc, #68]	; (8069c <usart_serial_putchar+0xa4>)
   80656:	4298      	cmp	r0, r3
   80658:	d10f      	bne.n	8067a <usart_serial_putchar+0x82>
		while (usart_write(p_usart, c)!=0);
   8065a:	461e      	mov	r6, r3
   8065c:	4d0c      	ldr	r5, [pc, #48]	; (80690 <usart_serial_putchar+0x98>)
   8065e:	4630      	mov	r0, r6
   80660:	4621      	mov	r1, r4
   80662:	47a8      	blx	r5
   80664:	2800      	cmp	r0, #0
   80666:	d1fa      	bne.n	8065e <usart_serial_putchar+0x66>
   80668:	e009      	b.n	8067e <usart_serial_putchar+0x86>
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
#ifdef UART
	if (UART == (Uart*)p_usart) {
		while (uart_write((Uart*)p_usart, c)!=0);
		return 1;
   8066a:	2001      	movs	r0, #1
   8066c:	bd70      	pop	{r4, r5, r6, pc}
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
		while (usart_write(p_usart, c)!=0);
		return 1;
   8066e:	2001      	movs	r0, #1
   80670:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
		while (usart_write(p_usart, c)!=0);
		return 1;
   80672:	2001      	movs	r0, #1
   80674:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
		while (usart_write(p_usart, c)!=0);
		return 1;
   80676:	2001      	movs	r0, #1
   80678:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
	}
# endif
#endif /* ifdef USART */

	return 0;
   8067a:	2000      	movs	r0, #0
   8067c:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
		while (usart_write(p_usart, c)!=0);
		return 1;
   8067e:	2001      	movs	r0, #1
	}
# endif
#endif /* ifdef USART */

	return 0;
}
   80680:	bd70      	pop	{r4, r5, r6, pc}
   80682:	bf00      	nop
   80684:	400e0800 	.word	0x400e0800
   80688:	000822b1 	.word	0x000822b1
   8068c:	40098000 	.word	0x40098000
   80690:	000802ad 	.word	0x000802ad
   80694:	4009c000 	.word	0x4009c000
   80698:	400a0000 	.word	0x400a0000
   8069c:	400a4000 	.word	0x400a4000

000806a0 <configure_console>:
#include "UARTFunctions.h"
#include "uart.h"
#include "conf_uart_serial.h"
#include "global_variables.h"

void configure_console(void){
   806a0:	b530      	push	{r4, r5, lr}
   806a2:	b085      	sub	sp, #20
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
   806a4:	2008      	movs	r0, #8
   806a6:	4d18      	ldr	r5, [pc, #96]	; (80708 <configure_console+0x68>)
   806a8:	47a8      	blx	r5
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
   806aa:	4c18      	ldr	r4, [pc, #96]	; (8070c <configure_console+0x6c>)
   806ac:	4b18      	ldr	r3, [pc, #96]	; (80710 <configure_console+0x70>)
   806ae:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
   806b0:	4a18      	ldr	r2, [pc, #96]	; (80714 <configure_console+0x74>)
   806b2:	4b19      	ldr	r3, [pc, #100]	; (80718 <configure_console+0x78>)
   806b4:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
   806b6:	4a19      	ldr	r2, [pc, #100]	; (8071c <configure_console+0x7c>)
   806b8:	4b19      	ldr	r3, [pc, #100]	; (80720 <configure_console+0x80>)
   806ba:	601a      	str	r2, [r3, #0]
static inline void usart_serial_init(usart_if p_usart,
		usart_serial_options_t *opt)
{
#if ((!SAM4L) && (!SAMG55))
	sam_uart_opt_t uart_settings;
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
   806bc:	4b19      	ldr	r3, [pc, #100]	; (80724 <configure_console+0x84>)
   806be:	9301      	str	r3, [sp, #4]
	uart_settings.ul_baudrate = opt->baudrate;
   806c0:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
   806c4:	9302      	str	r3, [sp, #8]
	uart_settings.ul_mode = opt->paritytype;
   806c6:	f44f 6300 	mov.w	r3, #2048	; 0x800
   806ca:	9303      	str	r3, [sp, #12]
   806cc:	2008      	movs	r0, #8
   806ce:	47a8      	blx	r5
	
#ifdef UART
	if (UART == (Uart*)p_usart) {
		sysclk_enable_peripheral_clock(ID_UART);
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
   806d0:	4620      	mov	r0, r4
   806d2:	a901      	add	r1, sp, #4
   806d4:	4b14      	ldr	r3, [pc, #80]	; (80728 <configure_console+0x88>)
   806d6:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
   806d8:	4d14      	ldr	r5, [pc, #80]	; (8072c <configure_console+0x8c>)
   806da:	682b      	ldr	r3, [r5, #0]
   806dc:	6898      	ldr	r0, [r3, #8]
   806de:	2100      	movs	r1, #0
   806e0:	4c13      	ldr	r4, [pc, #76]	; (80730 <configure_console+0x90>)
   806e2:	47a0      	blx	r4
	setbuf(stdin, NULL);
   806e4:	682b      	ldr	r3, [r5, #0]
   806e6:	6858      	ldr	r0, [r3, #4]
   806e8:	2100      	movs	r1, #0
   806ea:	47a0      	blx	r4
		ioport_port_mask_t mask, ioport_mode_t mode)
{
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
   806ec:	4b11      	ldr	r3, [pc, #68]	; (80734 <configure_console+0x94>)
   806ee:	f44f 7280 	mov.w	r2, #256	; 0x100
   806f2:	665a      	str	r2, [r3, #100]	; 0x64
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
   806f4:	655a      	str	r2, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
   806f6:	625a      	str	r2, [r3, #36]	; 0x24
#else
		base->PIO_IFSCER = mask;
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
   806f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

#if !defined(IOPORT_MODE_MUX_BIT1)
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABSR |= mask;
	} else {
		base->PIO_ABSR &= ~mask;
   806fc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   806fe:	f422 7280 	bic.w	r2, r2, #256	; 0x100
   80702:	671a      	str	r2, [r3, #112]	; 0x70
	// Configure console UART.
	sysclk_enable_peripheral_clock(CONSOLE_UART_ID);
	stdio_serial_init(CONF_UART, &uart_serial_options);
	// configure RX0 pin as pull-up otherwise it won't receive anything (only receive 0)
	ioport_set_pin_mode(PIO_PA8_IDX, IOPORT_MODE_PULLUP);
}
   80704:	b005      	add	sp, #20
   80706:	bd30      	pop	{r4, r5, pc}
   80708:	00082781 	.word	0x00082781
   8070c:	400e0800 	.word	0x400e0800
   80710:	20078c80 	.word	0x20078c80
   80714:	000805f9 	.word	0x000805f9
   80718:	20078c7c 	.word	0x20078c7c
   8071c:	00080551 	.word	0x00080551
   80720:	20078c78 	.word	0x20078c78
   80724:	0501bd00 	.word	0x0501bd00
   80728:	00082271 	.word	0x00082271
   8072c:	20070568 	.word	0x20070568
   80730:	000835cd 	.word	0x000835cd
   80734:	400e0e00 	.word	0x400e0e00

00080738 <getPIDValues>:

/* Function that receives values from Matlab */
void getPIDValues()
{
   80738:	b570      	push	{r4, r5, r6, lr}
   8073a:	b082      	sub	sp, #8
	// divier which is used to decode encoded doubles sent from Matlab
	const uint8_t divider = 10;

	isMatlab = 0; // 1 for matlab, 0 for terminal debugging
   8073c:	2300      	movs	r3, #0
   8073e:	4a6a      	ldr	r2, [pc, #424]	; (808e8 <getPIDValues+0x1b0>)
   80740:	7013      	strb	r3, [r2, #0]
	uint16_t kP_Gain_temp = 0;
   80742:	f8ad 3006 	strh.w	r3, [sp, #6]
	uint16_t kP_Gain_temp2 = 0;
	uint16_t kI_Gain_temp = 0;
   80746:	f8ad 3004 	strh.w	r3, [sp, #4]
	uint16_t kD_Gain_temp = 0;
   8074a:	f8ad 3002 	strh.w	r3, [sp, #2]
	uint16_t setPointCm = 0;
   8074e:	f8ad 3000 	strh.w	r3, [sp]
	while (!uart_is_rx_ready (CONF_UART)){
   80752:	4d66      	ldr	r5, [pc, #408]	; (808ec <getPIDValues+0x1b4>)
   80754:	4c66      	ldr	r4, [pc, #408]	; (808f0 <getPIDValues+0x1b8>)
		vTaskDelay(1);
   80756:	4e67      	ldr	r6, [pc, #412]	; (808f4 <getPIDValues+0x1bc>)
	uint16_t kP_Gain_temp = 0;
	uint16_t kP_Gain_temp2 = 0;
	uint16_t kI_Gain_temp = 0;
	uint16_t kD_Gain_temp = 0;
	uint16_t setPointCm = 0;
	while (!uart_is_rx_ready (CONF_UART)){
   80758:	e001      	b.n	8075e <getPIDValues+0x26>
		vTaskDelay(1);
   8075a:	2001      	movs	r0, #1
   8075c:	47b0      	blx	r6
	uint16_t kP_Gain_temp = 0;
	uint16_t kP_Gain_temp2 = 0;
	uint16_t kI_Gain_temp = 0;
	uint16_t kD_Gain_temp = 0;
	uint16_t setPointCm = 0;
	while (!uart_is_rx_ready (CONF_UART)){
   8075e:	4628      	mov	r0, r5
   80760:	47a0      	blx	r4
   80762:	2800      	cmp	r0, #0
   80764:	d0f9      	beq.n	8075a <getPIDValues+0x22>
		vTaskDelay(1);
	}
	uart_read(CONF_UART, &isMatlab);
   80766:	4c60      	ldr	r4, [pc, #384]	; (808e8 <getPIDValues+0x1b0>)
   80768:	4860      	ldr	r0, [pc, #384]	; (808ec <getPIDValues+0x1b4>)
   8076a:	4621      	mov	r1, r4
   8076c:	4b62      	ldr	r3, [pc, #392]	; (808f8 <getPIDValues+0x1c0>)
   8076e:	4798      	blx	r3
	if(isMatlab == 48){ // Receive 48 because its char, 48 = 0
   80770:	7823      	ldrb	r3, [r4, #0]
   80772:	2b30      	cmp	r3, #48	; 0x30
   80774:	d003      	beq.n	8077e <getPIDValues+0x46>
		printf("kP: %u\n\r", (uint16_t)(kP_Gain_temp));
		printf("kI: %u\n\r", (uint16_t)(kI_Gain_temp));
		printf("kD: %u\n\r", (uint16_t)(kD_Gain_temp));
		printf("SetpointCm: %u\n\r", setPointCm);
		} else {
		while (!uart_is_rx_ready (CONF_UART)){
   80776:	4d5d      	ldr	r5, [pc, #372]	; (808ec <getPIDValues+0x1b4>)
   80778:	4c5d      	ldr	r4, [pc, #372]	; (808f0 <getPIDValues+0x1b8>)
			vTaskDelay(1);
   8077a:	4e5e      	ldr	r6, [pc, #376]	; (808f4 <getPIDValues+0x1bc>)
   8077c:	e025      	b.n	807ca <getPIDValues+0x92>
	while (!uart_is_rx_ready (CONF_UART)){
		vTaskDelay(1);
	}
	uart_read(CONF_UART, &isMatlab);
	if(isMatlab == 48){ // Receive 48 because its char, 48 = 0
		isMatlab = 0; // save 0 to indicate is not Matlab COM
   8077e:	2200      	movs	r2, #0
   80780:	4b59      	ldr	r3, [pc, #356]	; (808e8 <getPIDValues+0x1b0>)
   80782:	701a      	strb	r2, [r3, #0]
		printf("Terminal debugging enabled\n");
   80784:	485d      	ldr	r0, [pc, #372]	; (808fc <getPIDValues+0x1c4>)
   80786:	4c5e      	ldr	r4, [pc, #376]	; (80900 <getPIDValues+0x1c8>)
   80788:	47a0      	blx	r4
		// Set debugging values
		kP_Gain_temp = KP_GAIN_DEBUGGING;
   8078a:	233c      	movs	r3, #60	; 0x3c
   8078c:	f8ad 3006 	strh.w	r3, [sp, #6]
		kI_Gain_temp = KI_GAIN_DEBUGGING;
   80790:	2209      	movs	r2, #9
   80792:	f8ad 2004 	strh.w	r2, [sp, #4]
		kD_Gain_temp = KD_GAIN_DEBUGGING;
   80796:	f8ad 3002 	strh.w	r3, [sp, #2]
		setPointCm = SETPOINT_DEBUGGING;
   8079a:	2314      	movs	r3, #20
   8079c:	f8ad 3000 	strh.w	r3, [sp]
		printf("Preset values:\n");
   807a0:	4858      	ldr	r0, [pc, #352]	; (80904 <getPIDValues+0x1cc>)
   807a2:	47a0      	blx	r4
		printf("kP: %u\n\r", (uint16_t)(kP_Gain_temp));
   807a4:	4858      	ldr	r0, [pc, #352]	; (80908 <getPIDValues+0x1d0>)
   807a6:	f8bd 1006 	ldrh.w	r1, [sp, #6]
   807aa:	47a0      	blx	r4
		printf("kI: %u\n\r", (uint16_t)(kI_Gain_temp));
   807ac:	4857      	ldr	r0, [pc, #348]	; (8090c <getPIDValues+0x1d4>)
   807ae:	f8bd 1004 	ldrh.w	r1, [sp, #4]
   807b2:	47a0      	blx	r4
		printf("kD: %u\n\r", (uint16_t)(kD_Gain_temp));
   807b4:	4856      	ldr	r0, [pc, #344]	; (80910 <getPIDValues+0x1d8>)
   807b6:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   807ba:	47a0      	blx	r4
		printf("SetpointCm: %u\n\r", setPointCm);
   807bc:	4855      	ldr	r0, [pc, #340]	; (80914 <getPIDValues+0x1dc>)
   807be:	f8bd 1000 	ldrh.w	r1, [sp]
   807c2:	47a0      	blx	r4
   807c4:	e035      	b.n	80832 <getPIDValues+0xfa>
		} else {
		while (!uart_is_rx_ready (CONF_UART)){
			vTaskDelay(1);
   807c6:	2001      	movs	r0, #1
   807c8:	47b0      	blx	r6
		printf("kP: %u\n\r", (uint16_t)(kP_Gain_temp));
		printf("kI: %u\n\r", (uint16_t)(kI_Gain_temp));
		printf("kD: %u\n\r", (uint16_t)(kD_Gain_temp));
		printf("SetpointCm: %u\n\r", setPointCm);
		} else {
		while (!uart_is_rx_ready (CONF_UART)){
   807ca:	4628      	mov	r0, r5
   807cc:	47a0      	blx	r4
   807ce:	2800      	cmp	r0, #0
   807d0:	d0f9      	beq.n	807c6 <getPIDValues+0x8e>
			vTaskDelay(1);
		}

		uart_read(CONF_UART, &kP_Gain_temp);
   807d2:	4846      	ldr	r0, [pc, #280]	; (808ec <getPIDValues+0x1b4>)
   807d4:	f10d 0106 	add.w	r1, sp, #6
   807d8:	4b47      	ldr	r3, [pc, #284]	; (808f8 <getPIDValues+0x1c0>)
   807da:	4798      	blx	r3
		while (!uart_is_rx_ready (CONF_UART)){
   807dc:	4d43      	ldr	r5, [pc, #268]	; (808ec <getPIDValues+0x1b4>)
   807de:	4c44      	ldr	r4, [pc, #272]	; (808f0 <getPIDValues+0x1b8>)
			vTaskDelay(1);
   807e0:	4e44      	ldr	r6, [pc, #272]	; (808f4 <getPIDValues+0x1bc>)
		while (!uart_is_rx_ready (CONF_UART)){
			vTaskDelay(1);
		}

		uart_read(CONF_UART, &kP_Gain_temp);
		while (!uart_is_rx_ready (CONF_UART)){
   807e2:	e001      	b.n	807e8 <getPIDValues+0xb0>
			vTaskDelay(1);
   807e4:	2001      	movs	r0, #1
   807e6:	47b0      	blx	r6
		while (!uart_is_rx_ready (CONF_UART)){
			vTaskDelay(1);
		}

		uart_read(CONF_UART, &kP_Gain_temp);
		while (!uart_is_rx_ready (CONF_UART)){
   807e8:	4628      	mov	r0, r5
   807ea:	47a0      	blx	r4
   807ec:	2800      	cmp	r0, #0
   807ee:	d0f9      	beq.n	807e4 <getPIDValues+0xac>
			vTaskDelay(1);
		}
		uart_read(CONF_UART, &kI_Gain_temp);
   807f0:	483e      	ldr	r0, [pc, #248]	; (808ec <getPIDValues+0x1b4>)
   807f2:	a901      	add	r1, sp, #4
   807f4:	4b40      	ldr	r3, [pc, #256]	; (808f8 <getPIDValues+0x1c0>)
   807f6:	4798      	blx	r3
		while (!uart_is_rx_ready (CONF_UART)){
   807f8:	4d3c      	ldr	r5, [pc, #240]	; (808ec <getPIDValues+0x1b4>)
   807fa:	4c3d      	ldr	r4, [pc, #244]	; (808f0 <getPIDValues+0x1b8>)
			vTaskDelay(1);
   807fc:	4e3d      	ldr	r6, [pc, #244]	; (808f4 <getPIDValues+0x1bc>)
		uart_read(CONF_UART, &kP_Gain_temp);
		while (!uart_is_rx_ready (CONF_UART)){
			vTaskDelay(1);
		}
		uart_read(CONF_UART, &kI_Gain_temp);
		while (!uart_is_rx_ready (CONF_UART)){
   807fe:	e001      	b.n	80804 <getPIDValues+0xcc>
			vTaskDelay(1);
   80800:	2001      	movs	r0, #1
   80802:	47b0      	blx	r6
		uart_read(CONF_UART, &kP_Gain_temp);
		while (!uart_is_rx_ready (CONF_UART)){
			vTaskDelay(1);
		}
		uart_read(CONF_UART, &kI_Gain_temp);
		while (!uart_is_rx_ready (CONF_UART)){
   80804:	4628      	mov	r0, r5
   80806:	47a0      	blx	r4
   80808:	2800      	cmp	r0, #0
   8080a:	d0f9      	beq.n	80800 <getPIDValues+0xc8>
			vTaskDelay(1);
		};
		uart_read(CONF_UART, &kD_Gain_temp);
   8080c:	4837      	ldr	r0, [pc, #220]	; (808ec <getPIDValues+0x1b4>)
   8080e:	f10d 0102 	add.w	r1, sp, #2
   80812:	4b39      	ldr	r3, [pc, #228]	; (808f8 <getPIDValues+0x1c0>)
   80814:	4798      	blx	r3
		while (!uart_is_rx_ready (CONF_UART)){
   80816:	4d35      	ldr	r5, [pc, #212]	; (808ec <getPIDValues+0x1b4>)
   80818:	4c35      	ldr	r4, [pc, #212]	; (808f0 <getPIDValues+0x1b8>)
			vTaskDelay(1);
   8081a:	4e36      	ldr	r6, [pc, #216]	; (808f4 <getPIDValues+0x1bc>)
		uart_read(CONF_UART, &kI_Gain_temp);
		while (!uart_is_rx_ready (CONF_UART)){
			vTaskDelay(1);
		};
		uart_read(CONF_UART, &kD_Gain_temp);
		while (!uart_is_rx_ready (CONF_UART)){
   8081c:	e001      	b.n	80822 <getPIDValues+0xea>
			vTaskDelay(1);
   8081e:	2001      	movs	r0, #1
   80820:	47b0      	blx	r6
		uart_read(CONF_UART, &kI_Gain_temp);
		while (!uart_is_rx_ready (CONF_UART)){
			vTaskDelay(1);
		};
		uart_read(CONF_UART, &kD_Gain_temp);
		while (!uart_is_rx_ready (CONF_UART)){
   80822:	4628      	mov	r0, r5
   80824:	47a0      	blx	r4
   80826:	2800      	cmp	r0, #0
   80828:	d0f9      	beq.n	8081e <getPIDValues+0xe6>
			vTaskDelay(1);
		};
		uart_read(CONF_UART, &setPointCm);
   8082a:	4830      	ldr	r0, [pc, #192]	; (808ec <getPIDValues+0x1b4>)
   8082c:	4669      	mov	r1, sp
   8082e:	4b32      	ldr	r3, [pc, #200]	; (808f8 <getPIDValues+0x1c0>)
   80830:	4798      	blx	r3
	}

	//Convert to correct data types
	kP_Gain = (double) ((double) kP_Gain_temp / divider);
   80832:	f8bd 0006 	ldrh.w	r0, [sp, #6]
   80836:	4b38      	ldr	r3, [pc, #224]	; (80918 <getPIDValues+0x1e0>)
   80838:	4798      	blx	r3
   8083a:	2200      	movs	r2, #0
   8083c:	4b37      	ldr	r3, [pc, #220]	; (8091c <getPIDValues+0x1e4>)
   8083e:	4c38      	ldr	r4, [pc, #224]	; (80920 <getPIDValues+0x1e8>)
   80840:	47a0      	blx	r4
   80842:	4b38      	ldr	r3, [pc, #224]	; (80924 <getPIDValues+0x1ec>)
   80844:	e9c3 0100 	strd	r0, r1, [r3]
	kI_Gain = (double) (kI_Gain_temp / divider);
   80848:	f8bd 0004 	ldrh.w	r0, [sp, #4]
   8084c:	4d36      	ldr	r5, [pc, #216]	; (80928 <getPIDValues+0x1f0>)
   8084e:	fb85 2000 	smull	r2, r0, r5, r0
   80852:	4c36      	ldr	r4, [pc, #216]	; (8092c <getPIDValues+0x1f4>)
   80854:	1080      	asrs	r0, r0, #2
   80856:	47a0      	blx	r4
   80858:	4b35      	ldr	r3, [pc, #212]	; (80930 <getPIDValues+0x1f8>)
   8085a:	e9c3 0100 	strd	r0, r1, [r3]
	kD_Gain = (double) (kD_Gain_temp / divider);
   8085e:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   80862:	fb85 2003 	smull	r2, r0, r5, r3
   80866:	1080      	asrs	r0, r0, #2
   80868:	47a0      	blx	r4
   8086a:	4b32      	ldr	r3, [pc, #200]	; (80934 <getPIDValues+0x1fc>)
   8086c:	e9c3 0100 	strd	r0, r1, [r3]

	switch(setPointCm){
   80870:	f8bd 3000 	ldrh.w	r3, [sp]
   80874:	3b0a      	subs	r3, #10
   80876:	2b28      	cmp	r3, #40	; 0x28
   80878:	d82f      	bhi.n	808da <getPIDValues+0x1a2>
   8087a:	e8df f003 	tbb	[pc, r3]
   8087e:	2e15      	.short	0x2e15
   80880:	2e2e2e2e 	.word	0x2e2e2e2e
   80884:	2e2e2e2e 	.word	0x2e2e2e2e
   80888:	2e2e2e1a 	.word	0x2e2e2e1a
   8088c:	2e2e2e2e 	.word	0x2e2e2e2e
   80890:	2e1f2e2e 	.word	0x2e1f2e2e
   80894:	2e2e2e2e 	.word	0x2e2e2e2e
   80898:	2e2e2e2e 	.word	0x2e2e2e2e
   8089c:	2e2e2e24 	.word	0x2e2e2e24
   808a0:	2e2e2e2e 	.word	0x2e2e2e2e
   808a4:	2e2e      	.short	0x2e2e
   808a6:	29          	.byte	0x29
   808a7:	00          	.byte	0x00
		case 10 :
		setPoint = CENTIMETER_10;
   808a8:	f640 52ac 	movw	r2, #3500	; 0xdac
   808ac:	4b22      	ldr	r3, [pc, #136]	; (80938 <getPIDValues+0x200>)
   808ae:	601a      	str	r2, [r3, #0]
		break;
   808b0:	e017      	b.n	808e2 <getPIDValues+0x1aa>

		case 20:
		setPoint = CENTIMETER_20;
   808b2:	f240 62cc 	movw	r2, #1740	; 0x6cc
   808b6:	4b20      	ldr	r3, [pc, #128]	; (80938 <getPIDValues+0x200>)
   808b8:	601a      	str	r2, [r3, #0]
		break;
   808ba:	e012      	b.n	808e2 <getPIDValues+0x1aa>

		case 30 :
		setPoint = CENTIMETER_30;
   808bc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   808c0:	4b1d      	ldr	r3, [pc, #116]	; (80938 <getPIDValues+0x200>)
   808c2:	601a      	str	r2, [r3, #0]
		break;
   808c4:	e00d      	b.n	808e2 <getPIDValues+0x1aa>

		case 40 :
		setPoint = CENTIMETER_40;
   808c6:	f240 3216 	movw	r2, #790	; 0x316
   808ca:	4b1b      	ldr	r3, [pc, #108]	; (80938 <getPIDValues+0x200>)
   808cc:	601a      	str	r2, [r3, #0]
		break;
   808ce:	e008      	b.n	808e2 <getPIDValues+0x1aa>

		case 50 :
		setPoint = CENTIMETER_50;
   808d0:	f240 3202 	movw	r2, #770	; 0x302
   808d4:	4b18      	ldr	r3, [pc, #96]	; (80938 <getPIDValues+0x200>)
   808d6:	601a      	str	r2, [r3, #0]
		break;
   808d8:	e003      	b.n	808e2 <getPIDValues+0x1aa>

		default:
		setPoint = CENTIMETER_DEFAULT;
   808da:	f44f 62c3 	mov.w	r2, #1560	; 0x618
   808de:	4b16      	ldr	r3, [pc, #88]	; (80938 <getPIDValues+0x200>)
   808e0:	601a      	str	r2, [r3, #0]
		break;
		printf("Invalid distance\n");
	}
}
   808e2:	b002      	add	sp, #8
   808e4:	bd70      	pop	{r4, r5, r6, pc}
   808e6:	bf00      	nop
   808e8:	2007012c 	.word	0x2007012c
   808ec:	400e0800 	.word	0x400e0800
   808f0:	000822a9 	.word	0x000822a9
   808f4:	00081871 	.word	0x00081871
   808f8:	000822c1 	.word	0x000822c1
   808fc:	000863cc 	.word	0x000863cc
   80900:	00083425 	.word	0x00083425
   80904:	000863e8 	.word	0x000863e8
   80908:	000863f8 	.word	0x000863f8
   8090c:	00086404 	.word	0x00086404
   80910:	00086410 	.word	0x00086410
   80914:	0008641c 	.word	0x0008641c
   80918:	00082d65 	.word	0x00082d65
   8091c:	40240000 	.word	0x40240000
   80920:	000830a5 	.word	0x000830a5
   80924:	200709e0 	.word	0x200709e0
   80928:	66666667 	.word	0x66666667
   8092c:	00082d85 	.word	0x00082d85
   80930:	200709f0 	.word	0x200709f0
   80934:	200709e8 	.word	0x200709e8
   80938:	200709f8 	.word	0x200709f8

0008093c <sendValues>:

/* Function that sends values to Matlab */
void sendValues(){
   8093c:	b538      	push	{r3, r4, r5, lr}
	if(!isMatlab){
   8093e:	4b0c      	ldr	r3, [pc, #48]	; (80970 <sendValues+0x34>)
   80940:	781b      	ldrb	r3, [r3, #0]
   80942:	b913      	cbnz	r3, 8094a <sendValues+0xe>
		printf("Values:\n");
   80944:	480b      	ldr	r0, [pc, #44]	; (80974 <sendValues+0x38>)
   80946:	4b0c      	ldr	r3, [pc, #48]	; (80978 <sendValues+0x3c>)
   80948:	4798      	blx	r3
	}
	printf("%i\n\r", error);
   8094a:	4d0c      	ldr	r5, [pc, #48]	; (8097c <sendValues+0x40>)
   8094c:	4628      	mov	r0, r5
   8094e:	4b0c      	ldr	r3, [pc, #48]	; (80980 <sendValues+0x44>)
   80950:	6819      	ldr	r1, [r3, #0]
   80952:	4c09      	ldr	r4, [pc, #36]	; (80978 <sendValues+0x3c>)
   80954:	47a0      	blx	r4
	printf("%i\n\r", output_value);
   80956:	4628      	mov	r0, r5
   80958:	4b0a      	ldr	r3, [pc, #40]	; (80984 <sendValues+0x48>)
   8095a:	6819      	ldr	r1, [r3, #0]
   8095c:	47a0      	blx	r4
	printf("%i\n\r", distance);
   8095e:	4628      	mov	r0, r5
   80960:	4b09      	ldr	r3, [pc, #36]	; (80988 <sendValues+0x4c>)
   80962:	6819      	ldr	r1, [r3, #0]
   80964:	47a0      	blx	r4
	printf("%i\n\r", setPoint);
   80966:	4628      	mov	r0, r5
   80968:	4b08      	ldr	r3, [pc, #32]	; (8098c <sendValues+0x50>)
   8096a:	6819      	ldr	r1, [r3, #0]
   8096c:	47a0      	blx	r4
   8096e:	bd38      	pop	{r3, r4, r5, pc}
   80970:	2007012c 	.word	0x2007012c
   80974:	00086430 	.word	0x00086430
   80978:	00083425 	.word	0x00083425
   8097c:	0008643c 	.word	0x0008643c
   80980:	200709d8 	.word	0x200709d8
   80984:	200709cc 	.word	0x200709cc
   80988:	200709d4 	.word	0x200709d4
   8098c:	200709f8 	.word	0x200709f8

00080990 <SerialComTask>:
#include "UARTFunctions.h"
#include "ADCCustom.h"
#include "testFunctions.h"

void SerialComTask (void *pvParameters)
{
   80990:	b5f0      	push	{r4, r5, r6, r7, lr}
   80992:	b083      	sub	sp, #12
	getPIDValues(); // Get Values from Matlab
   80994:	4b10      	ldr	r3, [pc, #64]	; (809d8 <SerialComTask+0x48>)
   80996:	4798      	blx	r3

	xSemaphoreGive(sem); // Tell PID Task to start
   80998:	4b10      	ldr	r3, [pc, #64]	; (809dc <SerialComTask+0x4c>)
   8099a:	6818      	ldr	r0, [r3, #0]
   8099c:	2100      	movs	r1, #0
   8099e:	460a      	mov	r2, r1
   809a0:	460b      	mov	r3, r1
   809a2:	4c0f      	ldr	r4, [pc, #60]	; (809e0 <SerialComTask+0x50>)
   809a4:	47a0      	blx	r4

	for(;;){

		// Wait here for Matlab to send signal its ready to receive values
		while (!uart_is_rx_ready (CONF_UART)){
   809a6:	4c0f      	ldr	r4, [pc, #60]	; (809e4 <SerialComTask+0x54>)
   809a8:	4d0f      	ldr	r5, [pc, #60]	; (809e8 <SerialComTask+0x58>)
		};

		// Clear RX buffer
		while (uart_is_rx_ready (CONF_UART)){
			uint8_t clearBuffer = 0;
			uart_read(CONF_UART, &clearBuffer);
   809aa:	4e10      	ldr	r6, [pc, #64]	; (809ec <SerialComTask+0x5c>)
		};

		sendValues(); // Send values to MATLAB for graphing
   809ac:	4f10      	ldr	r7, [pc, #64]	; (809f0 <SerialComTask+0x60>)
   809ae:	e002      	b.n	809b6 <SerialComTask+0x26>

	for(;;){

		// Wait here for Matlab to send signal its ready to receive values
		while (!uart_is_rx_ready (CONF_UART)){
			vTaskDelay(1);
   809b0:	2001      	movs	r0, #1
   809b2:	4b10      	ldr	r3, [pc, #64]	; (809f4 <SerialComTask+0x64>)
   809b4:	4798      	blx	r3
	xSemaphoreGive(sem); // Tell PID Task to start

	for(;;){

		// Wait here for Matlab to send signal its ready to receive values
		while (!uart_is_rx_ready (CONF_UART)){
   809b6:	4620      	mov	r0, r4
   809b8:	47a8      	blx	r5
   809ba:	2800      	cmp	r0, #0
   809bc:	d0f8      	beq.n	809b0 <SerialComTask+0x20>
   809be:	e005      	b.n	809cc <SerialComTask+0x3c>
			vTaskDelay(1);
		};

		// Clear RX buffer
		while (uart_is_rx_ready (CONF_UART)){
			uint8_t clearBuffer = 0;
   809c0:	a902      	add	r1, sp, #8
   809c2:	2300      	movs	r3, #0
   809c4:	f801 3d01 	strb.w	r3, [r1, #-1]!
			uart_read(CONF_UART, &clearBuffer);
   809c8:	4620      	mov	r0, r4
   809ca:	47b0      	blx	r6
		while (!uart_is_rx_ready (CONF_UART)){
			vTaskDelay(1);
		};

		// Clear RX buffer
		while (uart_is_rx_ready (CONF_UART)){
   809cc:	4620      	mov	r0, r4
   809ce:	47a8      	blx	r5
   809d0:	2800      	cmp	r0, #0
   809d2:	d1f5      	bne.n	809c0 <SerialComTask+0x30>
			uint8_t clearBuffer = 0;
			uart_read(CONF_UART, &clearBuffer);
		};

		sendValues(); // Send values to MATLAB for graphing
   809d4:	47b8      	blx	r7
	}
   809d6:	e7ee      	b.n	809b6 <SerialComTask+0x26>
   809d8:	00080739 	.word	0x00080739
   809dc:	200709c8 	.word	0x200709c8
   809e0:	00080f41 	.word	0x00080f41
   809e4:	400e0800 	.word	0x400e0800
   809e8:	000822a9 	.word	0x000822a9
   809ec:	000822c1 	.word	0x000822c1
   809f0:	0008093d 	.word	0x0008093d
   809f4:	00081871 	.word	0x00081871

000809f8 <vListInitialise>:
void vListInitialise( xList *pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
   809f8:	f100 0308 	add.w	r3, r0, #8
   809fc:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
   809fe:	f64f 72ff 	movw	r2, #65535	; 0xffff
   80a02:	8102      	strh	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
   80a04:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
   80a06:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
   80a08:	2300      	movs	r3, #0
   80a0a:	6003      	str	r3, [r0, #0]
   80a0c:	4770      	bx	lr
   80a0e:	bf00      	nop

00080a10 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
   80a10:	2300      	movs	r3, #0
   80a12:	6103      	str	r3, [r0, #16]
   80a14:	4770      	bx	lr
   80a16:	bf00      	nop

00080a18 <vListInsertEnd>:

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
   80a18:	6843      	ldr	r3, [r0, #4]

	pxNewListItem->pxNext = pxIndex->pxNext;
   80a1a:	685a      	ldr	r2, [r3, #4]
   80a1c:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxPrevious = pxList->pxIndex;
   80a1e:	6842      	ldr	r2, [r0, #4]
   80a20:	608a      	str	r2, [r1, #8]
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
   80a22:	685a      	ldr	r2, [r3, #4]
   80a24:	6091      	str	r1, [r2, #8]
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
   80a26:	6059      	str	r1, [r3, #4]
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
   80a28:	6041      	str	r1, [r0, #4]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   80a2a:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
   80a2c:	6803      	ldr	r3, [r0, #0]
   80a2e:	3301      	adds	r3, #1
   80a30:	6003      	str	r3, [r0, #0]
   80a32:	4770      	bx	lr

00080a34 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
   80a34:	b410      	push	{r4}
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
   80a36:	880c      	ldrh	r4, [r1, #0]
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
   80a38:	f64f 73ff 	movw	r3, #65535	; 0xffff
   80a3c:	429c      	cmp	r4, r3
   80a3e:	d101      	bne.n	80a44 <vListInsert+0x10>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
   80a40:	6903      	ldr	r3, [r0, #16]
   80a42:	e00c      	b.n	80a5e <vListInsert+0x2a>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/

		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
   80a44:	f100 0308 	add.w	r3, r0, #8
   80a48:	68c2      	ldr	r2, [r0, #12]
   80a4a:	8812      	ldrh	r2, [r2, #0]
   80a4c:	b292      	uxth	r2, r2
   80a4e:	4294      	cmp	r4, r2
   80a50:	d305      	bcc.n	80a5e <vListInsert+0x2a>
   80a52:	685b      	ldr	r3, [r3, #4]
   80a54:	685a      	ldr	r2, [r3, #4]
   80a56:	8812      	ldrh	r2, [r2, #0]
   80a58:	b292      	uxth	r2, r2
   80a5a:	4294      	cmp	r4, r2
   80a5c:	d2f9      	bcs.n	80a52 <vListInsert+0x1e>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
   80a5e:	685a      	ldr	r2, [r3, #4]
   80a60:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
   80a62:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
   80a64:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
   80a66:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   80a68:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
   80a6a:	6803      	ldr	r3, [r0, #0]
   80a6c:	3301      	adds	r3, #1
   80a6e:	6003      	str	r3, [r0, #0]
}
   80a70:	f85d 4b04 	ldr.w	r4, [sp], #4
   80a74:	4770      	bx	lr
   80a76:	bf00      	nop

00080a78 <uxListRemove>:

unsigned portBASE_TYPE uxListRemove( xListItem *pxItemToRemove )
{
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
   80a78:	6843      	ldr	r3, [r0, #4]
   80a7a:	6882      	ldr	r2, [r0, #8]
   80a7c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
   80a7e:	6883      	ldr	r3, [r0, #8]
   80a80:	6842      	ldr	r2, [r0, #4]
   80a82:	605a      	str	r2, [r3, #4]

	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
   80a84:	6903      	ldr	r3, [r0, #16]

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
   80a86:	685a      	ldr	r2, [r3, #4]
   80a88:	4282      	cmp	r2, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
   80a8a:	bf04      	itt	eq
   80a8c:	6882      	ldreq	r2, [r0, #8]
   80a8e:	605a      	streq	r2, [r3, #4]
	}

	pxItemToRemove->pvContainer = NULL;
   80a90:	2200      	movs	r2, #0
   80a92:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
   80a94:	681a      	ldr	r2, [r3, #0]
   80a96:	3a01      	subs	r2, #1
   80a98:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
   80a9a:	6818      	ldr	r0, [r3, #0]
}
   80a9c:	4770      	bx	lr
   80a9e:	bf00      	nop

00080aa0 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
   80aa0:	4803      	ldr	r0, [pc, #12]	; (80ab0 <prvPortStartFirstTask+0x10>)
   80aa2:	6800      	ldr	r0, [r0, #0]
   80aa4:	6800      	ldr	r0, [r0, #0]
   80aa6:	f380 8808 	msr	MSP, r0
   80aaa:	b662      	cpsie	i
   80aac:	df00      	svc	0
   80aae:	bf00      	nop
   80ab0:	e000ed08 	.word	0xe000ed08

00080ab4 <pxPortInitialiseStack>:
portSTACK_TYPE *pxPortInitialiseStack( portSTACK_TYPE *pxTopOfStack, pdTASK_CODE pxCode, void *pvParameters )
{
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
   80ab4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   80ab8:	f840 3c04 	str.w	r3, [r0, #-4]
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) pxCode;	/* PC */
   80abc:	f840 1c08 	str.w	r1, [r0, #-8]
	pxTopOfStack--;
	*pxTopOfStack = 0;	/* LR */
   80ac0:	2300      	movs	r3, #0
   80ac2:	f840 3c0c 	str.w	r3, [r0, #-12]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
	*pxTopOfStack = ( portSTACK_TYPE ) pvParameters;	/* R0 */
   80ac6:	f840 2c20 	str.w	r2, [r0, #-32]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */

	return pxTopOfStack;
}
   80aca:	3840      	subs	r0, #64	; 0x40
   80acc:	4770      	bx	lr
   80ace:	bf00      	nop

00080ad0 <SVC_Handler>:
/*-----------------------------------------------------------*/

__attribute__ (( naked )) void SVC_Handler( void )
{
	__asm volatile (
   80ad0:	4b06      	ldr	r3, [pc, #24]	; (80aec <pxCurrentTCBConst2>)
   80ad2:	6819      	ldr	r1, [r3, #0]
   80ad4:	6808      	ldr	r0, [r1, #0]
   80ad6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   80ada:	f380 8809 	msr	PSP, r0
   80ade:	f04f 0000 	mov.w	r0, #0
   80ae2:	f380 8811 	msr	BASEPRI, r0
   80ae6:	f04e 0e0d 	orr.w	lr, lr, #13
   80aea:	4770      	bx	lr

00080aec <pxCurrentTCBConst2>:
   80aec:	20078b28 	.word	0x20078b28

00080af0 <vPortYieldFromISR>:
/*-----------------------------------------------------------*/

void vPortYieldFromISR( void )
{
	/* Set a PendSV to request a context switch. */
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
   80af0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   80af4:	4b01      	ldr	r3, [pc, #4]	; (80afc <vPortYieldFromISR+0xc>)
   80af6:	601a      	str	r2, [r3, #0]
   80af8:	4770      	bx	lr
   80afa:	bf00      	nop
   80afc:	e000ed04 	.word	0xe000ed04

00080b00 <ulPortSetInterruptMask>:
}
/*-----------------------------------------------------------*/

__attribute__(( naked )) unsigned long ulPortSetInterruptMask( void )
{
	__asm volatile														\
   80b00:	f3ef 8011 	mrs	r0, BASEPRI
   80b04:	f04f 01a0 	mov.w	r1, #160	; 0xa0
   80b08:	f381 8811 	msr	BASEPRI, r1
   80b0c:	4770      	bx	lr
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return 0;
}
   80b0e:	2000      	movs	r0, #0

00080b10 <vPortEnterCritical>:
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
   80b10:	b508      	push	{r3, lr}
	portDISABLE_INTERRUPTS();
   80b12:	4b03      	ldr	r3, [pc, #12]	; (80b20 <vPortEnterCritical+0x10>)
   80b14:	4798      	blx	r3
	uxCriticalNesting++;
   80b16:	4b03      	ldr	r3, [pc, #12]	; (80b24 <vPortEnterCritical+0x14>)
   80b18:	681a      	ldr	r2, [r3, #0]
   80b1a:	3201      	adds	r2, #1
   80b1c:	601a      	str	r2, [r3, #0]
   80b1e:	bd08      	pop	{r3, pc}
   80b20:	00080b01 	.word	0x00080b01
   80b24:	20070130 	.word	0x20070130

00080b28 <vPortClearInterruptMask>:
}
/*-----------------------------------------------------------*/

__attribute__(( naked )) void vPortClearInterruptMask( unsigned long ulNewMaskValue )
{
	__asm volatile													\
   80b28:	f380 8811 	msr	BASEPRI, r0
   80b2c:	4770      	bx	lr
   80b2e:	bf00      	nop

00080b30 <vPortExitCritical>:
	uxCriticalNesting++;
}
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
   80b30:	b508      	push	{r3, lr}
	uxCriticalNesting--;
   80b32:	4a04      	ldr	r2, [pc, #16]	; (80b44 <vPortExitCritical+0x14>)
   80b34:	6813      	ldr	r3, [r2, #0]
   80b36:	3b01      	subs	r3, #1
   80b38:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
   80b3a:	b913      	cbnz	r3, 80b42 <vPortExitCritical+0x12>
	{
		portENABLE_INTERRUPTS();
   80b3c:	2000      	movs	r0, #0
   80b3e:	4b02      	ldr	r3, [pc, #8]	; (80b48 <vPortExitCritical+0x18>)
   80b40:	4798      	blx	r3
   80b42:	bd08      	pop	{r3, pc}
   80b44:	20070130 	.word	0x20070130
   80b48:	00080b29 	.word	0x00080b29

00080b4c <PendSV_Handler>:

__attribute__(( naked )) void PendSV_Handler( void )
{
	/* This is a naked function. */

	__asm volatile
   80b4c:	f3ef 8009 	mrs	r0, PSP
   80b50:	4b0c      	ldr	r3, [pc, #48]	; (80b84 <pxCurrentTCBConst>)
   80b52:	681a      	ldr	r2, [r3, #0]
   80b54:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   80b58:	6010      	str	r0, [r2, #0]
   80b5a:	e92d 4008 	stmdb	sp!, {r3, lr}
   80b5e:	f04f 00a0 	mov.w	r0, #160	; 0xa0
   80b62:	f380 8811 	msr	BASEPRI, r0
   80b66:	f000 feeb 	bl	81940 <vTaskSwitchContext>
   80b6a:	f04f 0000 	mov.w	r0, #0
   80b6e:	f380 8811 	msr	BASEPRI, r0
   80b72:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   80b76:	6819      	ldr	r1, [r3, #0]
   80b78:	6808      	ldr	r0, [r1, #0]
   80b7a:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   80b7e:	f380 8809 	msr	PSP, r0
   80b82:	4770      	bx	lr

00080b84 <pxCurrentTCBConst>:
   80b84:	20078b28 	.word	0x20078b28

00080b88 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void SysTick_Handler( void )
{
   80b88:	b508      	push	{r3, lr}
	/* If using preemption, also force a context switch. */
	#if configUSE_PREEMPTION == 1
		portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
   80b8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   80b8e:	4b05      	ldr	r3, [pc, #20]	; (80ba4 <SysTick_Handler+0x1c>)
   80b90:	601a      	str	r2, [r3, #0]
	to generate the tick interrupt. */
	#if configUSE_TICKLESS_IDLE == 1
		portNVIC_SYSTICK_LOAD_REG = ulTimerReloadValueForOneTick;
	#endif

	( void ) portSET_INTERRUPT_MASK_FROM_ISR();
   80b92:	4b05      	ldr	r3, [pc, #20]	; (80ba8 <SysTick_Handler+0x20>)
   80b94:	4798      	blx	r3
	{
		vTaskIncrementTick();
   80b96:	4b05      	ldr	r3, [pc, #20]	; (80bac <SysTick_Handler+0x24>)
   80b98:	4798      	blx	r3
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( 0 );
   80b9a:	2000      	movs	r0, #0
   80b9c:	4b04      	ldr	r3, [pc, #16]	; (80bb0 <SysTick_Handler+0x28>)
   80b9e:	4798      	blx	r3
   80ba0:	bd08      	pop	{r3, pc}
   80ba2:	bf00      	nop
   80ba4:	e000ed04 	.word	0xe000ed04
   80ba8:	00080b01 	.word	0x00080b01
   80bac:	000815a5 	.word	0x000815a5
   80bb0:	00080b29 	.word	0x00080b29

00080bb4 <vPortSetupTimerInterrupt>:
		ulStoppedTimerCompensation = 45UL / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;;
   80bb4:	4a03      	ldr	r2, [pc, #12]	; (80bc4 <vPortSetupTimerInterrupt+0x10>)
   80bb6:	4b04      	ldr	r3, [pc, #16]	; (80bc8 <vPortSetupTimerInterrupt+0x14>)
   80bb8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
   80bba:	2207      	movs	r2, #7
   80bbc:	3b04      	subs	r3, #4
   80bbe:	601a      	str	r2, [r3, #0]
   80bc0:	4770      	bx	lr
   80bc2:	bf00      	nop
   80bc4:	0001481f 	.word	0x0001481f
   80bc8:	e000e014 	.word	0xe000e014

00080bcc <xPortStartScheduler>:

/*
 * See header file for description.
 */
portBASE_TYPE xPortStartScheduler( void )
{
   80bcc:	b510      	push	{r4, lr}
	/* configMAX_SYSCALL_INTERRUPT_PRIORITY must not be set to 0.
	See http://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
   80bce:	4b09      	ldr	r3, [pc, #36]	; (80bf4 <xPortStartScheduler+0x28>)
   80bd0:	681a      	ldr	r2, [r3, #0]
   80bd2:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
   80bd6:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
   80bd8:	681a      	ldr	r2, [r3, #0]
   80bda:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
   80bde:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
   80be0:	4b05      	ldr	r3, [pc, #20]	; (80bf8 <xPortStartScheduler+0x2c>)
   80be2:	4798      	blx	r3

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
   80be4:	2400      	movs	r4, #0
   80be6:	4b05      	ldr	r3, [pc, #20]	; (80bfc <xPortStartScheduler+0x30>)
   80be8:	601c      	str	r4, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
   80bea:	4b05      	ldr	r3, [pc, #20]	; (80c00 <xPortStartScheduler+0x34>)
   80bec:	4798      	blx	r3

	/* Should not get here! */
	return 0;
}
   80bee:	4620      	mov	r0, r4
   80bf0:	bd10      	pop	{r4, pc}
   80bf2:	bf00      	nop
   80bf4:	e000ed20 	.word	0xe000ed20
   80bf8:	00080bb5 	.word	0x00080bb5
   80bfc:	20070130 	.word	0x20070130
   80c00:	00080aa1 	.word	0x00080aa1

00080c04 <prvInsertBlockIntoFreeList>:
	xFreeBytesRemaining -= heapSTRUCT_SIZE;
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( xBlockLink *pxBlockToInsert )
{
   80c04:	b430      	push	{r4, r5}
xBlockLink *pxIterator;
unsigned char *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
   80c06:	4a13      	ldr	r2, [pc, #76]	; (80c54 <prvInsertBlockIntoFreeList+0x50>)
   80c08:	6813      	ldr	r3, [r2, #0]
   80c0a:	4283      	cmp	r3, r0
   80c0c:	d201      	bcs.n	80c12 <prvInsertBlockIntoFreeList+0xe>
   80c0e:	461a      	mov	r2, r3
   80c10:	e7fa      	b.n	80c08 <prvInsertBlockIntoFreeList+0x4>
   80c12:	4611      	mov	r1, r2
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */	
	puc = ( unsigned char * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( unsigned char * ) pxBlockToInsert )
   80c14:	6854      	ldr	r4, [r2, #4]
   80c16:	1915      	adds	r5, r2, r4
   80c18:	4285      	cmp	r5, r0
   80c1a:	d103      	bne.n	80c24 <prvInsertBlockIntoFreeList+0x20>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
   80c1c:	6868      	ldr	r0, [r5, #4]
   80c1e:	4404      	add	r4, r0
   80c20:	6054      	str	r4, [r2, #4]
   80c22:	4610      	mov	r0, r2
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( unsigned char * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( unsigned char * ) pxIterator->pxNextFreeBlock )
   80c24:	6842      	ldr	r2, [r0, #4]
   80c26:	1884      	adds	r4, r0, r2
   80c28:	42a3      	cmp	r3, r4
   80c2a:	d10c      	bne.n	80c46 <prvInsertBlockIntoFreeList+0x42>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
   80c2c:	4c0a      	ldr	r4, [pc, #40]	; (80c58 <prvInsertBlockIntoFreeList+0x54>)
   80c2e:	6824      	ldr	r4, [r4, #0]
   80c30:	429c      	cmp	r4, r3
   80c32:	d006      	beq.n	80c42 <prvInsertBlockIntoFreeList+0x3e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
   80c34:	685b      	ldr	r3, [r3, #4]
   80c36:	441a      	add	r2, r3
   80c38:	6042      	str	r2, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
   80c3a:	680b      	ldr	r3, [r1, #0]
   80c3c:	681b      	ldr	r3, [r3, #0]
   80c3e:	6003      	str	r3, [r0, #0]
   80c40:	e002      	b.n	80c48 <prvInsertBlockIntoFreeList+0x44>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
   80c42:	6003      	str	r3, [r0, #0]
   80c44:	e000      	b.n	80c48 <prvInsertBlockIntoFreeList+0x44>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;		
   80c46:	6003      	str	r3, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
   80c48:	4281      	cmp	r1, r0
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
   80c4a:	bf18      	it	ne
   80c4c:	6008      	strne	r0, [r1, #0]
	}
}
   80c4e:	bc30      	pop	{r4, r5}
   80c50:	4770      	bx	lr
   80c52:	bf00      	nop
   80c54:	20078a04 	.word	0x20078a04
   80c58:	20078a00 	.word	0x20078a00

00080c5c <pvPortMalloc>:
/* STATIC FUNCTIONS ARE DEFINED AS MACROS TO MINIMIZE THE FUNCTION CALL DEPTH. */

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
   80c5c:	b538      	push	{r3, r4, r5, lr}
   80c5e:	4604      	mov	r4, r0
xBlockLink *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;

	vTaskSuspendAll();
   80c60:	4b28      	ldr	r3, [pc, #160]	; (80d04 <pvPortMalloc+0xa8>)
   80c62:	4798      	blx	r3
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
   80c64:	4b28      	ldr	r3, [pc, #160]	; (80d08 <pvPortMalloc+0xac>)
   80c66:	681b      	ldr	r3, [r3, #0]
   80c68:	b99b      	cbnz	r3, 80c92 <pvPortMalloc+0x36>
	/* Ensure the start of the heap is aligned. */
	configASSERT( ( ( ( unsigned long ) xHeap.ucHeap ) & ( ( unsigned long ) portBYTE_ALIGNMENT_MASK ) ) == 0UL );

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) xHeap.ucHeap;
   80c6a:	4a28      	ldr	r2, [pc, #160]	; (80d0c <pvPortMalloc+0xb0>)
   80c6c:	4b28      	ldr	r3, [pc, #160]	; (80d10 <pvPortMalloc+0xb4>)
   80c6e:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
   80c70:	2100      	movs	r1, #0
   80c72:	6051      	str	r1, [r2, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	pucHeapEnd = xHeap.ucHeap + xTotalHeapSize;
	pucHeapEnd -= heapSTRUCT_SIZE;
	pxEnd = ( void * ) pucHeapEnd;
   80c74:	f647 72f0 	movw	r2, #32752	; 0x7ff0
   80c78:	1898      	adds	r0, r3, r2
   80c7a:	4d23      	ldr	r5, [pc, #140]	; (80d08 <pvPortMalloc+0xac>)
   80c7c:	6028      	str	r0, [r5, #0]
	configASSERT( ( ( ( unsigned long ) pxEnd ) & ( ( unsigned long ) portBYTE_ALIGNMENT_MASK ) ) == 0UL );
	pxEnd->xBlockSize = 0;
   80c7e:	f647 75f4 	movw	r5, #32756	; 0x7ff4
   80c82:	5159      	str	r1, [r3, r5]
	pxEnd->pxNextFreeBlock = NULL;
   80c84:	5099      	str	r1, [r3, r2]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) xHeap.ucHeap;
	pxFirstFreeBlock->xBlockSize = xTotalHeapSize - heapSTRUCT_SIZE;
   80c86:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
   80c88:	6018      	str	r0, [r3, #0]

	/* The heap now contains pxEnd. */
	xFreeBytesRemaining -= heapSTRUCT_SIZE;
   80c8a:	4b22      	ldr	r3, [pc, #136]	; (80d14 <pvPortMalloc+0xb8>)
   80c8c:	681a      	ldr	r2, [r3, #0]
   80c8e:	3a10      	subs	r2, #16
   80c90:	601a      	str	r2, [r3, #0]
			prvHeapInit();
		}

		/* The wanted size is increased so it can contain a xBlockLink
		structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
   80c92:	2c00      	cmp	r4, #0
   80c94:	d02d      	beq.n	80cf2 <pvPortMalloc+0x96>
		{
			xWantedSize += heapSTRUCT_SIZE;
   80c96:	f104 0210 	add.w	r2, r4, #16

			/* Ensure that blocks are always aligned to the required number of 
			bytes. */
			if( xWantedSize & portBYTE_ALIGNMENT_MASK )
   80c9a:	f012 0f07 	tst.w	r2, #7
			{
				/* Byte alignment required. */
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
   80c9e:	bf1c      	itt	ne
   80ca0:	f022 0207 	bicne.w	r2, r2, #7
   80ca4:	3208      	addne	r2, #8
			}
		}

		if( ( xWantedSize > 0 ) && ( xWantedSize < xTotalHeapSize ) )
   80ca6:	1e51      	subs	r1, r2, #1
   80ca8:	f647 73fe 	movw	r3, #32766	; 0x7ffe
   80cac:	4299      	cmp	r1, r3
   80cae:	d822      	bhi.n	80cf6 <pvPortMalloc+0x9a>
		{
			/* Traverse the list from the start	(lowest address) block until one
			of adequate size is found. */
			pxPreviousBlock = &xStart;
			pxBlock = xStart.pxNextFreeBlock;
   80cb0:	4916      	ldr	r1, [pc, #88]	; (80d0c <pvPortMalloc+0xb0>)
   80cb2:	680c      	ldr	r4, [r1, #0]
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
   80cb4:	6863      	ldr	r3, [r4, #4]
   80cb6:	429a      	cmp	r2, r3
   80cb8:	d904      	bls.n	80cc4 <pvPortMalloc+0x68>
   80cba:	6823      	ldr	r3, [r4, #0]
   80cbc:	b113      	cbz	r3, 80cc4 <pvPortMalloc+0x68>
   80cbe:	4621      	mov	r1, r4
			{
				pxPreviousBlock = pxBlock;
				pxBlock = pxBlock->pxNextFreeBlock;
   80cc0:	461c      	mov	r4, r3
   80cc2:	e7f7      	b.n	80cb4 <pvPortMalloc+0x58>
			}

			/* If the end marker was reached then a block of adequate size was
			not found. */
			if( pxBlock != pxEnd )
   80cc4:	4b10      	ldr	r3, [pc, #64]	; (80d08 <pvPortMalloc+0xac>)
   80cc6:	681b      	ldr	r3, [r3, #0]
   80cc8:	429c      	cmp	r4, r3
   80cca:	d016      	beq.n	80cfa <pvPortMalloc+0x9e>
			{
				/* Return the memory space - jumping over the xBlockLink structure
				at its start. */
				pvReturn = ( void * ) ( ( ( unsigned char * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
   80ccc:	680d      	ldr	r5, [r1, #0]
   80cce:	3510      	adds	r5, #16

				/* This block is being returned for use so must be taken out of
				the	list of free blocks. */
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
   80cd0:	6823      	ldr	r3, [r4, #0]
   80cd2:	600b      	str	r3, [r1, #0]

				/* If the block is larger than required it can be split into two. */
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
   80cd4:	6863      	ldr	r3, [r4, #4]
   80cd6:	1a9b      	subs	r3, r3, r2
   80cd8:	2b20      	cmp	r3, #32
   80cda:	d904      	bls.n	80ce6 <pvPortMalloc+0x8a>
				{
					/* This block is to be split into two.  Create a new block
					following the number of bytes requested. The void cast is
					used to prevent byte alignment warnings from the compiler. */
					pxNewBlockLink = ( void * ) ( ( ( unsigned char * ) pxBlock ) + xWantedSize );
   80cdc:	18a0      	adds	r0, r4, r2

					/* Calculate the sizes of two blocks split from the single
					block. */
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
   80cde:	6043      	str	r3, [r0, #4]
					pxBlock->xBlockSize = xWantedSize;
   80ce0:	6062      	str	r2, [r4, #4]

					/* Insert the new block into the list of free blocks. */
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
   80ce2:	4b0d      	ldr	r3, [pc, #52]	; (80d18 <pvPortMalloc+0xbc>)
   80ce4:	4798      	blx	r3
				}

				xFreeBytesRemaining -= pxBlock->xBlockSize;
   80ce6:	4b0b      	ldr	r3, [pc, #44]	; (80d14 <pvPortMalloc+0xb8>)
   80ce8:	681a      	ldr	r2, [r3, #0]
   80cea:	6861      	ldr	r1, [r4, #4]
   80cec:	1a52      	subs	r2, r2, r1
   80cee:	601a      	str	r2, [r3, #0]
   80cf0:	e004      	b.n	80cfc <pvPortMalloc+0xa0>
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
xBlockLink *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
   80cf2:	2500      	movs	r5, #0
   80cf4:	e002      	b.n	80cfc <pvPortMalloc+0xa0>
   80cf6:	2500      	movs	r5, #0
   80cf8:	e000      	b.n	80cfc <pvPortMalloc+0xa0>
   80cfa:	2500      	movs	r5, #0

				xFreeBytesRemaining -= pxBlock->xBlockSize;
			}
		}
	}
	xTaskResumeAll();
   80cfc:	4b07      	ldr	r3, [pc, #28]	; (80d1c <pvPortMalloc+0xc0>)
   80cfe:	4798      	blx	r3
		}
	}
	#endif

	return pvReturn;
}
   80d00:	4628      	mov	r0, r5
   80d02:	bd38      	pop	{r3, r4, r5, pc}
   80d04:	00081575 	.word	0x00081575
   80d08:	20078a00 	.word	0x20078a00
   80d0c:	20078a04 	.word	0x20078a04
   80d10:	20070a00 	.word	0x20070a00
   80d14:	20070134 	.word	0x20070134
   80d18:	00080c05 	.word	0x00080c05
   80d1c:	000816d1 	.word	0x000816d1

00080d20 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
   80d20:	b510      	push	{r4, lr}
unsigned char *puc = ( unsigned char * ) pv;
xBlockLink *pxLink;

	if( pv != NULL )
   80d22:	4604      	mov	r4, r0
   80d24:	b168      	cbz	r0, 80d42 <vPortFree+0x22>
		puc -= heapSTRUCT_SIZE;

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;

		vTaskSuspendAll();
   80d26:	4b07      	ldr	r3, [pc, #28]	; (80d44 <vPortFree+0x24>)
   80d28:	4798      	blx	r3
		{
			/* Add this block to the list of free blocks. */
			xFreeBytesRemaining += pxLink->xBlockSize;
   80d2a:	4b07      	ldr	r3, [pc, #28]	; (80d48 <vPortFree+0x28>)
   80d2c:	6819      	ldr	r1, [r3, #0]
   80d2e:	f854 2c0c 	ldr.w	r2, [r4, #-12]
   80d32:	440a      	add	r2, r1
   80d34:	601a      	str	r2, [r3, #0]
			prvInsertBlockIntoFreeList( ( ( xBlockLink * ) pxLink ) );			
   80d36:	f1a4 0010 	sub.w	r0, r4, #16
   80d3a:	4b04      	ldr	r3, [pc, #16]	; (80d4c <vPortFree+0x2c>)
   80d3c:	4798      	blx	r3
		}
		xTaskResumeAll();
   80d3e:	4b04      	ldr	r3, [pc, #16]	; (80d50 <vPortFree+0x30>)
   80d40:	4798      	blx	r3
   80d42:	bd10      	pop	{r4, pc}
   80d44:	00081575 	.word	0x00081575
   80d48:	20070134 	.word	0x20070134
   80d4c:	00080c05 	.word	0x00080c05
   80d50:	000816d1 	.word	0x000816d1

00080d54 <prvCopyDataToQueue>:

#endif
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( xQUEUE *pxQueue, const void *pvItemToQueue, portBASE_TYPE xPosition )
{
   80d54:	b510      	push	{r4, lr}
   80d56:	4604      	mov	r4, r0
	if( pxQueue->uxItemSize == ( unsigned portBASE_TYPE ) 0 )
   80d58:	6c03      	ldr	r3, [r0, #64]	; 0x40
   80d5a:	b93b      	cbnz	r3, 80d6c <prvCopyDataToQueue+0x18>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   80d5c:	6803      	ldr	r3, [r0, #0]
   80d5e:	bb1b      	cbnz	r3, 80da8 <prvCopyDataToQueue+0x54>
			{
				/* The mutex is no longer being held. */
				vTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
   80d60:	6840      	ldr	r0, [r0, #4]
   80d62:	4b13      	ldr	r3, [pc, #76]	; (80db0 <prvCopyDataToQueue+0x5c>)
   80d64:	4798      	blx	r3
				pxQueue->pxMutexHolder = NULL;
   80d66:	2300      	movs	r3, #0
   80d68:	6063      	str	r3, [r4, #4]
   80d6a:	e01d      	b.n	80da8 <prvCopyDataToQueue+0x54>
			}
		}
		#endif
	}
	else if( xPosition == queueSEND_TO_BACK )
   80d6c:	b96a      	cbnz	r2, 80d8a <prvCopyDataToQueue+0x36>
	{
		memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
   80d6e:	6880      	ldr	r0, [r0, #8]
   80d70:	461a      	mov	r2, r3
   80d72:	4b10      	ldr	r3, [pc, #64]	; (80db4 <prvCopyDataToQueue+0x60>)
   80d74:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
   80d76:	68a2      	ldr	r2, [r4, #8]
   80d78:	6c23      	ldr	r3, [r4, #64]	; 0x40
   80d7a:	4413      	add	r3, r2
   80d7c:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail )
   80d7e:	6862      	ldr	r2, [r4, #4]
   80d80:	4293      	cmp	r3, r2
   80d82:	d311      	bcc.n	80da8 <prvCopyDataToQueue+0x54>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
   80d84:	6823      	ldr	r3, [r4, #0]
   80d86:	60a3      	str	r3, [r4, #8]
   80d88:	e00e      	b.n	80da8 <prvCopyDataToQueue+0x54>
		}
	}
	else
	{
		memcpy( ( void * ) pxQueue->pcReadFrom, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
   80d8a:	68c0      	ldr	r0, [r0, #12]
   80d8c:	461a      	mov	r2, r3
   80d8e:	4b09      	ldr	r3, [pc, #36]	; (80db4 <prvCopyDataToQueue+0x60>)
   80d90:	4798      	blx	r3
		pxQueue->pcReadFrom -= pxQueue->uxItemSize;
   80d92:	6c22      	ldr	r2, [r4, #64]	; 0x40
   80d94:	4252      	negs	r2, r2
   80d96:	68e3      	ldr	r3, [r4, #12]
   80d98:	4413      	add	r3, r2
   80d9a:	60e3      	str	r3, [r4, #12]
		if( pxQueue->pcReadFrom < pxQueue->pcHead )
   80d9c:	6821      	ldr	r1, [r4, #0]
   80d9e:	428b      	cmp	r3, r1
   80da0:	d202      	bcs.n	80da8 <prvCopyDataToQueue+0x54>
		{
			pxQueue->pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
   80da2:	6863      	ldr	r3, [r4, #4]
   80da4:	441a      	add	r2, r3
   80da6:	60e2      	str	r2, [r4, #12]
		}
	}

	++( pxQueue->uxMessagesWaiting );
   80da8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   80daa:	3301      	adds	r3, #1
   80dac:	63a3      	str	r3, [r4, #56]	; 0x38
   80dae:	bd10      	pop	{r4, pc}
   80db0:	00081c69 	.word	0x00081c69
   80db4:	0008344d 	.word	0x0008344d

00080db8 <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( xQUEUE * const pxQueue, const void *pvBuffer )
{
   80db8:	b538      	push	{r3, r4, r5, lr}
   80dba:	4603      	mov	r3, r0
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
   80dbc:	6805      	ldr	r5, [r0, #0]
   80dbe:	b15d      	cbz	r5, 80dd8 <prvCopyDataFromQueue+0x20>
	{
		pxQueue->pcReadFrom += pxQueue->uxItemSize;
   80dc0:	6c02      	ldr	r2, [r0, #64]	; 0x40
   80dc2:	68c4      	ldr	r4, [r0, #12]
   80dc4:	4414      	add	r4, r2
   80dc6:	60c4      	str	r4, [r0, #12]
		if( pxQueue->pcReadFrom >= pxQueue->pcTail )
   80dc8:	6840      	ldr	r0, [r0, #4]
   80dca:	4284      	cmp	r4, r0
		{
			pxQueue->pcReadFrom = pxQueue->pcHead;
   80dcc:	bf28      	it	cs
   80dce:	60dd      	strcs	r5, [r3, #12]
		}
		memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->pcReadFrom, ( unsigned ) pxQueue->uxItemSize );
   80dd0:	4608      	mov	r0, r1
   80dd2:	68d9      	ldr	r1, [r3, #12]
   80dd4:	4b01      	ldr	r3, [pc, #4]	; (80ddc <prvCopyDataFromQueue+0x24>)
   80dd6:	4798      	blx	r3
   80dd8:	bd38      	pop	{r3, r4, r5, pc}
   80dda:	bf00      	nop
   80ddc:	0008344d 	.word	0x0008344d

00080de0 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( xQueueHandle pxQueue )
{
   80de0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   80de2:	4604      	mov	r4, r0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
   80de4:	4b1d      	ldr	r3, [pc, #116]	; (80e5c <prvUnlockQueue+0x7c>)
   80de6:	4798      	blx	r3
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
   80de8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   80dea:	2b00      	cmp	r3, #0
   80dec:	dd12      	ble.n	80e14 <prvUnlockQueue+0x34>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   80dee:	6a63      	ldr	r3, [r4, #36]	; 0x24
   80df0:	b183      	cbz	r3, 80e14 <prvUnlockQueue+0x34>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   80df2:	f104 0624 	add.w	r6, r4, #36	; 0x24
   80df6:	4d1a      	ldr	r5, [pc, #104]	; (80e60 <prvUnlockQueue+0x80>)
				{
					/* The task waiting has a higher priority so record that a
					context	switch is required. */
					vTaskMissedYield();
   80df8:	4f1a      	ldr	r7, [pc, #104]	; (80e64 <prvUnlockQueue+0x84>)
   80dfa:	e001      	b.n	80e00 <prvUnlockQueue+0x20>
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   80dfc:	6a63      	ldr	r3, [r4, #36]	; 0x24
   80dfe:	b14b      	cbz	r3, 80e14 <prvUnlockQueue+0x34>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   80e00:	4630      	mov	r0, r6
   80e02:	47a8      	blx	r5
   80e04:	b100      	cbz	r0, 80e08 <prvUnlockQueue+0x28>
				{
					/* The task waiting has a higher priority so record that a
					context	switch is required. */
					vTaskMissedYield();
   80e06:	47b8      	blx	r7
				}

				--( pxQueue->xTxLock );
   80e08:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   80e0a:	3b01      	subs	r3, #1
   80e0c:	64a3      	str	r3, [r4, #72]	; 0x48
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
   80e0e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   80e10:	2b00      	cmp	r3, #0
   80e12:	dcf3      	bgt.n	80dfc <prvUnlockQueue+0x1c>
			{
				break;
			}
		}

		pxQueue->xTxLock = queueUNLOCKED;
   80e14:	f04f 33ff 	mov.w	r3, #4294967295
   80e18:	64a3      	str	r3, [r4, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
   80e1a:	4b13      	ldr	r3, [pc, #76]	; (80e68 <prvUnlockQueue+0x88>)
   80e1c:	4798      	blx	r3

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
   80e1e:	4b0f      	ldr	r3, [pc, #60]	; (80e5c <prvUnlockQueue+0x7c>)
   80e20:	4798      	blx	r3
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
   80e22:	6c63      	ldr	r3, [r4, #68]	; 0x44
   80e24:	2b00      	cmp	r3, #0
   80e26:	dd12      	ble.n	80e4e <prvUnlockQueue+0x6e>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   80e28:	6923      	ldr	r3, [r4, #16]
   80e2a:	b183      	cbz	r3, 80e4e <prvUnlockQueue+0x6e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   80e2c:	f104 0610 	add.w	r6, r4, #16
   80e30:	4d0b      	ldr	r5, [pc, #44]	; (80e60 <prvUnlockQueue+0x80>)
				{
					vTaskMissedYield();
   80e32:	4f0c      	ldr	r7, [pc, #48]	; (80e64 <prvUnlockQueue+0x84>)
   80e34:	e001      	b.n	80e3a <prvUnlockQueue+0x5a>
	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   80e36:	6923      	ldr	r3, [r4, #16]
   80e38:	b14b      	cbz	r3, 80e4e <prvUnlockQueue+0x6e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   80e3a:	4630      	mov	r0, r6
   80e3c:	47a8      	blx	r5
   80e3e:	b100      	cbz	r0, 80e42 <prvUnlockQueue+0x62>
				{
					vTaskMissedYield();
   80e40:	47b8      	blx	r7
				}

				--( pxQueue->xRxLock );
   80e42:	6c63      	ldr	r3, [r4, #68]	; 0x44
   80e44:	3b01      	subs	r3, #1
   80e46:	6463      	str	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
   80e48:	6c63      	ldr	r3, [r4, #68]	; 0x44
   80e4a:	2b00      	cmp	r3, #0
   80e4c:	dcf3      	bgt.n	80e36 <prvUnlockQueue+0x56>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
   80e4e:	f04f 33ff 	mov.w	r3, #4294967295
   80e52:	6463      	str	r3, [r4, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
   80e54:	4b04      	ldr	r3, [pc, #16]	; (80e68 <prvUnlockQueue+0x88>)
   80e56:	4798      	blx	r3
   80e58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   80e5a:	bf00      	nop
   80e5c:	00080b11 	.word	0x00080b11
   80e60:	00081a7d 	.word	0x00081a7d
   80e64:	00081bb5 	.word	0x00081bb5
   80e68:	00080b31 	.word	0x00080b31

00080e6c <xQueueGenericReset>:
/*-----------------------------------------------------------
 * PUBLIC QUEUE MANAGEMENT API documented in queue.h
 *----------------------------------------------------------*/

portBASE_TYPE xQueueGenericReset( xQueueHandle pxQueue, portBASE_TYPE xNewQueue )
{
   80e6c:	b538      	push	{r3, r4, r5, lr}
   80e6e:	460d      	mov	r5, r1
	configASSERT( pxQueue );
   80e70:	4604      	mov	r4, r0
   80e72:	b918      	cbnz	r0, 80e7c <xQueueGenericReset+0x10>
   80e74:	4b16      	ldr	r3, [pc, #88]	; (80ed0 <xQueueGenericReset+0x64>)
   80e76:	4798      	blx	r3
   80e78:	bf00      	nop
   80e7a:	e7fd      	b.n	80e78 <xQueueGenericReset+0xc>

	taskENTER_CRITICAL();
   80e7c:	4b15      	ldr	r3, [pc, #84]	; (80ed4 <xQueueGenericReset+0x68>)
   80e7e:	4798      	blx	r3
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
   80e80:	6823      	ldr	r3, [r4, #0]
   80e82:	6c22      	ldr	r2, [r4, #64]	; 0x40
   80e84:	6be0      	ldr	r0, [r4, #60]	; 0x3c
   80e86:	fb00 f002 	mul.w	r0, r0, r2
   80e8a:	1819      	adds	r1, r3, r0
   80e8c:	6061      	str	r1, [r4, #4]
		pxQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
   80e8e:	2100      	movs	r1, #0
   80e90:	63a1      	str	r1, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
   80e92:	60a3      	str	r3, [r4, #8]
		pxQueue->pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( unsigned portBASE_TYPE ) 1U ) * pxQueue->uxItemSize );
   80e94:	1a82      	subs	r2, r0, r2
   80e96:	4413      	add	r3, r2
   80e98:	60e3      	str	r3, [r4, #12]
		pxQueue->xRxLock = queueUNLOCKED;
   80e9a:	f04f 33ff 	mov.w	r3, #4294967295
   80e9e:	6463      	str	r3, [r4, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
   80ea0:	64a3      	str	r3, [r4, #72]	; 0x48

		if( xNewQueue == pdFALSE )
   80ea2:	b955      	cbnz	r5, 80eba <xQueueGenericReset+0x4e>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to	write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   80ea4:	6923      	ldr	r3, [r4, #16]
   80ea6:	b17b      	cbz	r3, 80ec8 <xQueueGenericReset+0x5c>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
   80ea8:	f104 0010 	add.w	r0, r4, #16
   80eac:	4b0a      	ldr	r3, [pc, #40]	; (80ed8 <xQueueGenericReset+0x6c>)
   80eae:	4798      	blx	r3
   80eb0:	2801      	cmp	r0, #1
   80eb2:	d109      	bne.n	80ec8 <xQueueGenericReset+0x5c>
				{
					portYIELD_WITHIN_API();
   80eb4:	4b09      	ldr	r3, [pc, #36]	; (80edc <xQueueGenericReset+0x70>)
   80eb6:	4798      	blx	r3
   80eb8:	e006      	b.n	80ec8 <xQueueGenericReset+0x5c>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
   80eba:	f104 0010 	add.w	r0, r4, #16
   80ebe:	4d08      	ldr	r5, [pc, #32]	; (80ee0 <xQueueGenericReset+0x74>)
   80ec0:	47a8      	blx	r5
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
   80ec2:	f104 0024 	add.w	r0, r4, #36	; 0x24
   80ec6:	47a8      	blx	r5
		}
	}
	taskEXIT_CRITICAL();
   80ec8:	4b06      	ldr	r3, [pc, #24]	; (80ee4 <xQueueGenericReset+0x78>)
   80eca:	4798      	blx	r3

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
}
   80ecc:	2001      	movs	r0, #1
   80ece:	bd38      	pop	{r3, r4, r5, pc}
   80ed0:	00080b01 	.word	0x00080b01
   80ed4:	00080b11 	.word	0x00080b11
   80ed8:	00081a7d 	.word	0x00081a7d
   80edc:	00080af1 	.word	0x00080af1
   80ee0:	000809f9 	.word	0x000809f9
   80ee4:	00080b31 	.word	0x00080b31

00080ee8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

xQueueHandle xQueueGenericCreate( unsigned portBASE_TYPE uxQueueLength, unsigned portBASE_TYPE uxItemSize, unsigned char ucQueueType )
{
   80ee8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   80eea:	460d      	mov	r5, r1
   80eec:	4617      	mov	r7, r2
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	/* Allocate the new queue structure. */
	if( uxQueueLength > ( unsigned portBASE_TYPE ) 0 )
   80eee:	4606      	mov	r6, r0
   80ef0:	b188      	cbz	r0, 80f16 <xQueueGenericCreate+0x2e>
	{
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
   80ef2:	2050      	movs	r0, #80	; 0x50
   80ef4:	4b0e      	ldr	r3, [pc, #56]	; (80f30 <xQueueGenericCreate+0x48>)
   80ef6:	4798      	blx	r3
		if( pxNewQueue != NULL )
   80ef8:	4604      	mov	r4, r0
   80efa:	b160      	cbz	r0, 80f16 <xQueueGenericCreate+0x2e>
		{
			/* Create the list of pointers to queue items.  The queue is one byte
			longer than asked for to make wrap checking easier/faster. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1;
   80efc:	fb05 f006 	mul.w	r0, r5, r6

			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
   80f00:	3001      	adds	r0, #1
   80f02:	4b0b      	ldr	r3, [pc, #44]	; (80f30 <xQueueGenericCreate+0x48>)
   80f04:	4798      	blx	r3
   80f06:	6020      	str	r0, [r4, #0]
			if( pxNewQueue->pcHead != NULL )
   80f08:	b940      	cbnz	r0, 80f1c <xQueueGenericCreate+0x34>
				xReturn = pxNewQueue;
			}
			else
			{
				traceQUEUE_CREATE_FAILED( ucQueueType );
				vPortFree( pxNewQueue );
   80f0a:	4620      	mov	r0, r4
   80f0c:	4b09      	ldr	r3, [pc, #36]	; (80f34 <xQueueGenericCreate+0x4c>)
   80f0e:	4798      	blx	r3
   80f10:	e001      	b.n	80f16 <xQueueGenericCreate+0x2e>
			}
		}
	}

	configASSERT( xReturn );
   80f12:	bf00      	nop
   80f14:	e7fd      	b.n	80f12 <xQueueGenericCreate+0x2a>
   80f16:	4b08      	ldr	r3, [pc, #32]	; (80f38 <xQueueGenericCreate+0x50>)
   80f18:	4798      	blx	r3
   80f1a:	e7fa      	b.n	80f12 <xQueueGenericCreate+0x2a>
			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
			if( pxNewQueue->pcHead != NULL )
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->uxLength = uxQueueLength;
   80f1c:	63e6      	str	r6, [r4, #60]	; 0x3c
				pxNewQueue->uxItemSize = uxItemSize;
   80f1e:	6425      	str	r5, [r4, #64]	; 0x40
				xQueueGenericReset( pxNewQueue, pdTRUE );
   80f20:	4620      	mov	r0, r4
   80f22:	2101      	movs	r1, #1
   80f24:	4b05      	ldr	r3, [pc, #20]	; (80f3c <xQueueGenericCreate+0x54>)
   80f26:	4798      	blx	r3
				#if ( configUSE_TRACE_FACILITY == 1 )
				{
					pxNewQueue->ucQueueType = ucQueueType;
   80f28:	f884 704d 	strb.w	r7, [r4, #77]	; 0x4d
	}

	configASSERT( xReturn );

	return xReturn;
}
   80f2c:	4620      	mov	r0, r4
   80f2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   80f30:	00080c5d 	.word	0x00080c5d
   80f34:	00080d21 	.word	0x00080d21
   80f38:	00080b01 	.word	0x00080b01
   80f3c:	00080e6d 	.word	0x00080e6d

00080f40 <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSend( xQueueHandle pxQueue, const void * const pvItemToQueue, portTickType xTicksToWait, portBASE_TYPE xCopyPosition )
{
   80f40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   80f44:	b085      	sub	sp, #20
   80f46:	468a      	mov	sl, r1
   80f48:	469b      	mov	fp, r3
   80f4a:	f8ad 2006 	strh.w	r2, [sp, #6]
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
xTimeOutType xTimeOut;

	configASSERT( pxQueue );
   80f4e:	4604      	mov	r4, r0
   80f50:	b918      	cbnz	r0, 80f5a <xQueueGenericSend+0x1a>
   80f52:	4b38      	ldr	r3, [pc, #224]	; (81034 <xQueueGenericSend+0xf4>)
   80f54:	4798      	blx	r3
   80f56:	bf00      	nop
   80f58:	e7fd      	b.n	80f56 <xQueueGenericSend+0x16>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
   80f5a:	b909      	cbnz	r1, 80f60 <xQueueGenericSend+0x20>
   80f5c:	6c03      	ldr	r3, [r0, #64]	; 0x40
   80f5e:	b91b      	cbnz	r3, 80f68 <xQueueGenericSend+0x28>

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSend( xQueueHandle pxQueue, const void * const pvItemToQueue, portTickType xTicksToWait, portBASE_TYPE xCopyPosition )
{
   80f60:	2700      	movs	r7, #0
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
   80f62:	4e35      	ldr	r6, [pc, #212]	; (81038 <xQueueGenericSend+0xf8>)
					vTaskSetTimeOutState( &xTimeOut );
					xEntryTimeSet = pdTRUE;
				}
			}
		}
		taskEXIT_CRITICAL();
   80f64:	4d35      	ldr	r5, [pc, #212]	; (8103c <xQueueGenericSend+0xfc>)
   80f66:	e003      	b.n	80f70 <xQueueGenericSend+0x30>
{
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
xTimeOutType xTimeOut;

	configASSERT( pxQueue );
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
   80f68:	4b32      	ldr	r3, [pc, #200]	; (81034 <xQueueGenericSend+0xf4>)
   80f6a:	4798      	blx	r3
   80f6c:	bf00      	nop
   80f6e:	e7fd      	b.n	80f6c <xQueueGenericSend+0x2c>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
   80f70:	47b0      	blx	r6
		{
			/* Is there room on the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
   80f72:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   80f74:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   80f76:	429a      	cmp	r2, r3
   80f78:	d212      	bcs.n	80fa0 <xQueueGenericSend+0x60>
			{
				traceQUEUE_SEND( pxQueue );
				prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
   80f7a:	4620      	mov	r0, r4
   80f7c:	4651      	mov	r1, sl
   80f7e:	465a      	mov	r2, fp
   80f80:	4b2f      	ldr	r3, [pc, #188]	; (81040 <xQueueGenericSend+0x100>)
   80f82:	4798      	blx	r3

				/* If there was a task waiting for data to arrive on the
				queue then unblock it now. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   80f84:	6a63      	ldr	r3, [r4, #36]	; 0x24
   80f86:	b13b      	cbz	r3, 80f98 <xQueueGenericSend+0x58>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
   80f88:	f104 0024 	add.w	r0, r4, #36	; 0x24
   80f8c:	4b2d      	ldr	r3, [pc, #180]	; (81044 <xQueueGenericSend+0x104>)
   80f8e:	4798      	blx	r3
   80f90:	2801      	cmp	r0, #1
   80f92:	d101      	bne.n	80f98 <xQueueGenericSend+0x58>
					{
						/* The unblocked task has a priority higher than
						our own so yield immediately.  Yes it is ok to do
						this from within the critical section - the kernel
						takes care of that. */
						portYIELD_WITHIN_API();
   80f94:	4b2c      	ldr	r3, [pc, #176]	; (81048 <xQueueGenericSend+0x108>)
   80f96:	4798      	blx	r3
					}
				}

				taskEXIT_CRITICAL();
   80f98:	4b28      	ldr	r3, [pc, #160]	; (8103c <xQueueGenericSend+0xfc>)
   80f9a:	4798      	blx	r3

				/* Return to the original privilege level before exiting the
				function. */
				return pdPASS;
   80f9c:	2001      	movs	r0, #1
   80f9e:	e046      	b.n	8102e <xQueueGenericSend+0xee>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
   80fa0:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   80fa4:	b91b      	cbnz	r3, 80fae <xQueueGenericSend+0x6e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
   80fa6:	4b25      	ldr	r3, [pc, #148]	; (8103c <xQueueGenericSend+0xfc>)
   80fa8:	4798      	blx	r3

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
   80faa:	2000      	movs	r0, #0
   80fac:	e03f      	b.n	8102e <xQueueGenericSend+0xee>
				}
				else if( xEntryTimeSet == pdFALSE )
   80fae:	b91f      	cbnz	r7, 80fb8 <xQueueGenericSend+0x78>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
   80fb0:	a802      	add	r0, sp, #8
   80fb2:	4b26      	ldr	r3, [pc, #152]	; (8104c <xQueueGenericSend+0x10c>)
   80fb4:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
   80fb6:	2701      	movs	r7, #1
				}
			}
		}
		taskEXIT_CRITICAL();
   80fb8:	47a8      	blx	r5

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
   80fba:	4b25      	ldr	r3, [pc, #148]	; (81050 <xQueueGenericSend+0x110>)
   80fbc:	4798      	blx	r3
		prvLockQueue( pxQueue );
   80fbe:	47b0      	blx	r6
   80fc0:	6c63      	ldr	r3, [r4, #68]	; 0x44
   80fc2:	f1b3 3fff 	cmp.w	r3, #4294967295
   80fc6:	bf04      	itt	eq
   80fc8:	2300      	moveq	r3, #0
   80fca:	6463      	streq	r3, [r4, #68]	; 0x44
   80fcc:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   80fce:	f1b3 3fff 	cmp.w	r3, #4294967295
   80fd2:	bf04      	itt	eq
   80fd4:	2300      	moveq	r3, #0
   80fd6:	64a3      	streq	r3, [r4, #72]	; 0x48
   80fd8:	47a8      	blx	r5

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   80fda:	a802      	add	r0, sp, #8
   80fdc:	f10d 0106 	add.w	r1, sp, #6
   80fe0:	4b1c      	ldr	r3, [pc, #112]	; (81054 <xQueueGenericSend+0x114>)
   80fe2:	4798      	blx	r3
   80fe4:	b9e8      	cbnz	r0, 81022 <xQueueGenericSend+0xe2>

static signed portBASE_TYPE prvIsQueueFull( const xQueueHandle pxQueue )
{
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
   80fe6:	47b0      	blx	r6
		xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
   80fe8:	f8d4 9038 	ldr.w	r9, [r4, #56]	; 0x38
   80fec:	f8d4 803c 	ldr.w	r8, [r4, #60]	; 0x3c
	taskEXIT_CRITICAL();
   80ff0:	47a8      	blx	r5
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
   80ff2:	45c1      	cmp	r9, r8
   80ff4:	d10f      	bne.n	81016 <xQueueGenericSend+0xd6>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
   80ff6:	f104 0010 	add.w	r0, r4, #16
   80ffa:	f8bd 1006 	ldrh.w	r1, [sp, #6]
   80ffe:	4b16      	ldr	r3, [pc, #88]	; (81058 <xQueueGenericSend+0x118>)
   81000:	4798      	blx	r3
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
   81002:	4620      	mov	r0, r4
   81004:	4b15      	ldr	r3, [pc, #84]	; (8105c <xQueueGenericSend+0x11c>)
   81006:	4798      	blx	r3
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
   81008:	4b15      	ldr	r3, [pc, #84]	; (81060 <xQueueGenericSend+0x120>)
   8100a:	4798      	blx	r3
   8100c:	2800      	cmp	r0, #0
   8100e:	d1af      	bne.n	80f70 <xQueueGenericSend+0x30>
				{
					portYIELD_WITHIN_API();
   81010:	4b0d      	ldr	r3, [pc, #52]	; (81048 <xQueueGenericSend+0x108>)
   81012:	4798      	blx	r3
   81014:	e7ac      	b.n	80f70 <xQueueGenericSend+0x30>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
   81016:	4620      	mov	r0, r4
   81018:	4b10      	ldr	r3, [pc, #64]	; (8105c <xQueueGenericSend+0x11c>)
   8101a:	4798      	blx	r3
				( void ) xTaskResumeAll();
   8101c:	4b10      	ldr	r3, [pc, #64]	; (81060 <xQueueGenericSend+0x120>)
   8101e:	4798      	blx	r3
   81020:	e7a6      	b.n	80f70 <xQueueGenericSend+0x30>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
   81022:	4620      	mov	r0, r4
   81024:	4b0d      	ldr	r3, [pc, #52]	; (8105c <xQueueGenericSend+0x11c>)
   81026:	4798      	blx	r3
			( void ) xTaskResumeAll();
   81028:	4b0d      	ldr	r3, [pc, #52]	; (81060 <xQueueGenericSend+0x120>)
   8102a:	4798      	blx	r3

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
   8102c:	2000      	movs	r0, #0
		}
	}
}
   8102e:	b005      	add	sp, #20
   81030:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   81034:	00080b01 	.word	0x00080b01
   81038:	00080b11 	.word	0x00080b11
   8103c:	00080b31 	.word	0x00080b31
   81040:	00080d55 	.word	0x00080d55
   81044:	00081a7d 	.word	0x00081a7d
   81048:	00080af1 	.word	0x00080af1
   8104c:	00081b01 	.word	0x00081b01
   81050:	00081575 	.word	0x00081575
   81054:	00081b29 	.word	0x00081b29
   81058:	000819d1 	.word	0x000819d1
   8105c:	00080de1 	.word	0x00080de1
   81060:	000816d1 	.word	0x000816d1

00081064 <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSendFromISR( xQueueHandle pxQueue, const void * const pvItemToQueue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portBASE_TYPE xCopyPosition )
{
   81064:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   81068:	460e      	mov	r6, r1
   8106a:	4615      	mov	r5, r2
   8106c:	4698      	mov	r8, r3
signed portBASE_TYPE xReturn;
unsigned portBASE_TYPE uxSavedInterruptStatus;

	configASSERT( pxQueue );
   8106e:	4604      	mov	r4, r0
   81070:	b918      	cbnz	r0, 8107a <xQueueGenericSendFromISR+0x16>
   81072:	4b1c      	ldr	r3, [pc, #112]	; (810e4 <xQueueGenericSendFromISR+0x80>)
   81074:	4798      	blx	r3
   81076:	bf00      	nop
   81078:	e7fd      	b.n	81076 <xQueueGenericSendFromISR+0x12>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
   8107a:	b929      	cbnz	r1, 81088 <xQueueGenericSendFromISR+0x24>
   8107c:	6c03      	ldr	r3, [r0, #64]	; 0x40
   8107e:	b11b      	cbz	r3, 81088 <xQueueGenericSendFromISR+0x24>
   81080:	4b18      	ldr	r3, [pc, #96]	; (810e4 <xQueueGenericSendFromISR+0x80>)
   81082:	4798      	blx	r3
   81084:	bf00      	nop
   81086:	e7fd      	b.n	81084 <xQueueGenericSendFromISR+0x20>
	/* Similar to xQueueGenericSend, except we don't block if there is no room
	in the queue.  Also we don't directly wake a task that was blocked on a
	queue read, instead we return a flag to say whether a context switch is
	required or not (i.e. has a task with a higher priority than us been woken
	by this	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
   81088:	4b16      	ldr	r3, [pc, #88]	; (810e4 <xQueueGenericSendFromISR+0x80>)
   8108a:	4798      	blx	r3
   8108c:	4607      	mov	r7, r0
	{
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
   8108e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   81090:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   81092:	429a      	cmp	r2, r3
   81094:	d218      	bcs.n	810c8 <xQueueGenericSendFromISR+0x64>
		{
			traceQUEUE_SEND_FROM_ISR( pxQueue );

			prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
   81096:	4620      	mov	r0, r4
   81098:	4631      	mov	r1, r6
   8109a:	4642      	mov	r2, r8
   8109c:	4b12      	ldr	r3, [pc, #72]	; (810e8 <xQueueGenericSendFromISR+0x84>)
   8109e:	4798      	blx	r3

			/* If the queue is locked we do not alter the event list.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
   810a0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   810a2:	f1b3 3fff 	cmp.w	r3, #4294967295
   810a6:	d10a      	bne.n	810be <xQueueGenericSendFromISR+0x5a>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   810a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
   810aa:	b17b      	cbz	r3, 810cc <xQueueGenericSendFromISR+0x68>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   810ac:	f104 0024 	add.w	r0, r4, #36	; 0x24
   810b0:	4b0e      	ldr	r3, [pc, #56]	; (810ec <xQueueGenericSendFromISR+0x88>)
   810b2:	4798      	blx	r3
   810b4:	b160      	cbz	r0, 810d0 <xQueueGenericSendFromISR+0x6c>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						if( pxHigherPriorityTaskWoken != NULL )
   810b6:	b16d      	cbz	r5, 810d4 <xQueueGenericSendFromISR+0x70>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
   810b8:	2401      	movs	r4, #1
   810ba:	602c      	str	r4, [r5, #0]
   810bc:	e00b      	b.n	810d6 <xQueueGenericSendFromISR+0x72>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
   810be:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   810c0:	3301      	adds	r3, #1
   810c2:	64a3      	str	r3, [r4, #72]	; 0x48
			}

			xReturn = pdPASS;
   810c4:	2401      	movs	r4, #1
   810c6:	e006      	b.n	810d6 <xQueueGenericSendFromISR+0x72>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
   810c8:	2400      	movs	r4, #0
   810ca:	e004      	b.n	810d6 <xQueueGenericSendFromISR+0x72>
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
			}

			xReturn = pdPASS;
   810cc:	2401      	movs	r4, #1
   810ce:	e002      	b.n	810d6 <xQueueGenericSendFromISR+0x72>
   810d0:	2401      	movs	r4, #1
   810d2:	e000      	b.n	810d6 <xQueueGenericSendFromISR+0x72>
   810d4:	2401      	movs	r4, #1
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
   810d6:	4638      	mov	r0, r7
   810d8:	4b05      	ldr	r3, [pc, #20]	; (810f0 <xQueueGenericSendFromISR+0x8c>)
   810da:	4798      	blx	r3

	return xReturn;
}
   810dc:	4620      	mov	r0, r4
   810de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   810e2:	bf00      	nop
   810e4:	00080b01 	.word	0x00080b01
   810e8:	00080d55 	.word	0x00080d55
   810ec:	00081a7d 	.word	0x00081a7d
   810f0:	00080b29 	.word	0x00080b29

000810f4 <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericReceive( xQueueHandle pxQueue, void * const pvBuffer, portTickType xTicksToWait, portBASE_TYPE xJustPeeking )
{
   810f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   810f8:	b085      	sub	sp, #20
   810fa:	4689      	mov	r9, r1
   810fc:	469a      	mov	sl, r3
   810fe:	f8ad 2006 	strh.w	r2, [sp, #6]
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
xTimeOutType xTimeOut;
signed char *pcOriginalReadPosition;

	configASSERT( pxQueue );
   81102:	4604      	mov	r4, r0
   81104:	b918      	cbnz	r0, 8110e <xQueueGenericReceive+0x1a>
   81106:	4b46      	ldr	r3, [pc, #280]	; (81220 <xQueueGenericReceive+0x12c>)
   81108:	4798      	blx	r3
   8110a:	bf00      	nop
   8110c:	e7fd      	b.n	8110a <xQueueGenericReceive+0x16>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
   8110e:	b909      	cbnz	r1, 81114 <xQueueGenericReceive+0x20>
   81110:	6c03      	ldr	r3, [r0, #64]	; 0x40
   81112:	b92b      	cbnz	r3, 81120 <xQueueGenericReceive+0x2c>
	return xReturn;
}
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericReceive( xQueueHandle pxQueue, void * const pvBuffer, portTickType xTicksToWait, portBASE_TYPE xJustPeeking )
{
   81114:	2700      	movs	r7, #0
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
   81116:	4e43      	ldr	r6, [pc, #268]	; (81224 <xQueueGenericReceive+0x130>)
				}
				else if( xEntryTimeSet == pdFALSE )
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
   81118:	f8df b138 	ldr.w	fp, [pc, #312]	; 81254 <xQueueGenericReceive+0x160>
					xEntryTimeSet = pdTRUE;
				}
			}
		}
		taskEXIT_CRITICAL();
   8111c:	4d42      	ldr	r5, [pc, #264]	; (81228 <xQueueGenericReceive+0x134>)
   8111e:	e003      	b.n	81128 <xQueueGenericReceive+0x34>
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
xTimeOutType xTimeOut;
signed char *pcOriginalReadPosition;

	configASSERT( pxQueue );
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
   81120:	4b3f      	ldr	r3, [pc, #252]	; (81220 <xQueueGenericReceive+0x12c>)
   81122:	4798      	blx	r3
   81124:	bf00      	nop
   81126:	e7fd      	b.n	81124 <xQueueGenericReceive+0x30>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
   81128:	47b0      	blx	r6
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
   8112a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   8112c:	2b00      	cmp	r3, #0
   8112e:	d028      	beq.n	81182 <xQueueGenericReceive+0x8e>
			{
				/* Remember our read position in case we are just peeking. */
				pcOriginalReadPosition = pxQueue->pcReadFrom;
   81130:	68e5      	ldr	r5, [r4, #12]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
   81132:	4620      	mov	r0, r4
   81134:	4649      	mov	r1, r9
   81136:	4b3d      	ldr	r3, [pc, #244]	; (8122c <xQueueGenericReceive+0x138>)
   81138:	4798      	blx	r3

				if( xJustPeeking == pdFALSE )
   8113a:	f1ba 0f00 	cmp.w	sl, #0
   8113e:	d112      	bne.n	81166 <xQueueGenericReceive+0x72>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* We are actually removing data. */
					--( pxQueue->uxMessagesWaiting );
   81140:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   81142:	3b01      	subs	r3, #1
   81144:	63a3      	str	r3, [r4, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   81146:	6823      	ldr	r3, [r4, #0]
   81148:	b913      	cbnz	r3, 81150 <xQueueGenericReceive+0x5c>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = xTaskGetCurrentTaskHandle();
   8114a:	4b39      	ldr	r3, [pc, #228]	; (81230 <xQueueGenericReceive+0x13c>)
   8114c:	4798      	blx	r3
   8114e:	6060      	str	r0, [r4, #4]
						}
					}
					#endif

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   81150:	6923      	ldr	r3, [r4, #16]
   81152:	b193      	cbz	r3, 8117a <xQueueGenericReceive+0x86>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
   81154:	f104 0010 	add.w	r0, r4, #16
   81158:	4b36      	ldr	r3, [pc, #216]	; (81234 <xQueueGenericReceive+0x140>)
   8115a:	4798      	blx	r3
   8115c:	2801      	cmp	r0, #1
   8115e:	d10c      	bne.n	8117a <xQueueGenericReceive+0x86>
						{
							portYIELD_WITHIN_API();
   81160:	4b35      	ldr	r3, [pc, #212]	; (81238 <xQueueGenericReceive+0x144>)
   81162:	4798      	blx	r3
   81164:	e009      	b.n	8117a <xQueueGenericReceive+0x86>
				{
					traceQUEUE_PEEK( pxQueue );

					/* We are not removing the data, so reset our read
					pointer. */
					pxQueue->pcReadFrom = pcOriginalReadPosition;
   81166:	60e5      	str	r5, [r4, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   81168:	6a63      	ldr	r3, [r4, #36]	; 0x24
   8116a:	b133      	cbz	r3, 8117a <xQueueGenericReceive+0x86>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   8116c:	f104 0024 	add.w	r0, r4, #36	; 0x24
   81170:	4b30      	ldr	r3, [pc, #192]	; (81234 <xQueueGenericReceive+0x140>)
   81172:	4798      	blx	r3
   81174:	b108      	cbz	r0, 8117a <xQueueGenericReceive+0x86>
						{
							/* The task waiting has a higher priority than this task. */
							portYIELD_WITHIN_API();
   81176:	4b30      	ldr	r3, [pc, #192]	; (81238 <xQueueGenericReceive+0x144>)
   81178:	4798      	blx	r3
						}
					}
				}

				taskEXIT_CRITICAL();
   8117a:	4b2b      	ldr	r3, [pc, #172]	; (81228 <xQueueGenericReceive+0x134>)
   8117c:	4798      	blx	r3
				return pdPASS;
   8117e:	2001      	movs	r0, #1
   81180:	e04b      	b.n	8121a <xQueueGenericReceive+0x126>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
   81182:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   81186:	b91b      	cbnz	r3, 81190 <xQueueGenericReceive+0x9c>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
   81188:	4b27      	ldr	r3, [pc, #156]	; (81228 <xQueueGenericReceive+0x134>)
   8118a:	4798      	blx	r3
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
   8118c:	2000      	movs	r0, #0
   8118e:	e044      	b.n	8121a <xQueueGenericReceive+0x126>
				}
				else if( xEntryTimeSet == pdFALSE )
   81190:	b917      	cbnz	r7, 81198 <xQueueGenericReceive+0xa4>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
   81192:	a802      	add	r0, sp, #8
   81194:	47d8      	blx	fp
					xEntryTimeSet = pdTRUE;
   81196:	2701      	movs	r7, #1
				}
			}
		}
		taskEXIT_CRITICAL();
   81198:	47a8      	blx	r5

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
   8119a:	4b28      	ldr	r3, [pc, #160]	; (8123c <xQueueGenericReceive+0x148>)
   8119c:	4798      	blx	r3
		prvLockQueue( pxQueue );
   8119e:	47b0      	blx	r6
   811a0:	6c63      	ldr	r3, [r4, #68]	; 0x44
   811a2:	f1b3 3fff 	cmp.w	r3, #4294967295
   811a6:	bf04      	itt	eq
   811a8:	2300      	moveq	r3, #0
   811aa:	6463      	streq	r3, [r4, #68]	; 0x44
   811ac:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   811ae:	f1b3 3fff 	cmp.w	r3, #4294967295
   811b2:	bf04      	itt	eq
   811b4:	2300      	moveq	r3, #0
   811b6:	64a3      	streq	r3, [r4, #72]	; 0x48
   811b8:	47a8      	blx	r5

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   811ba:	a802      	add	r0, sp, #8
   811bc:	f10d 0106 	add.w	r1, sp, #6
   811c0:	4b1f      	ldr	r3, [pc, #124]	; (81240 <xQueueGenericReceive+0x14c>)
   811c2:	4798      	blx	r3
   811c4:	bb18      	cbnz	r0, 8120e <xQueueGenericReceive+0x11a>

static signed portBASE_TYPE prvIsQueueEmpty( const xQueueHandle pxQueue )
{
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
   811c6:	47b0      	blx	r6
		xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
   811c8:	f8d4 8038 	ldr.w	r8, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
   811cc:	47a8      	blx	r5
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   811ce:	f1b8 0f00 	cmp.w	r8, #0
   811d2:	d116      	bne.n	81202 <xQueueGenericReceive+0x10e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   811d4:	6823      	ldr	r3, [r4, #0]
   811d6:	b923      	cbnz	r3, 811e2 <xQueueGenericReceive+0xee>
					{
						portENTER_CRITICAL();
   811d8:	47b0      	blx	r6
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
   811da:	6860      	ldr	r0, [r4, #4]
   811dc:	4b19      	ldr	r3, [pc, #100]	; (81244 <xQueueGenericReceive+0x150>)
   811de:	4798      	blx	r3
						}
						portEXIT_CRITICAL();
   811e0:	47a8      	blx	r5
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
   811e2:	f104 0024 	add.w	r0, r4, #36	; 0x24
   811e6:	f8bd 1006 	ldrh.w	r1, [sp, #6]
   811ea:	4b17      	ldr	r3, [pc, #92]	; (81248 <xQueueGenericReceive+0x154>)
   811ec:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
   811ee:	4620      	mov	r0, r4
   811f0:	4b16      	ldr	r3, [pc, #88]	; (8124c <xQueueGenericReceive+0x158>)
   811f2:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
   811f4:	4b16      	ldr	r3, [pc, #88]	; (81250 <xQueueGenericReceive+0x15c>)
   811f6:	4798      	blx	r3
   811f8:	2800      	cmp	r0, #0
   811fa:	d195      	bne.n	81128 <xQueueGenericReceive+0x34>
				{
					portYIELD_WITHIN_API();
   811fc:	4b0e      	ldr	r3, [pc, #56]	; (81238 <xQueueGenericReceive+0x144>)
   811fe:	4798      	blx	r3
   81200:	e792      	b.n	81128 <xQueueGenericReceive+0x34>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
   81202:	4620      	mov	r0, r4
   81204:	4b11      	ldr	r3, [pc, #68]	; (8124c <xQueueGenericReceive+0x158>)
   81206:	4798      	blx	r3
				( void ) xTaskResumeAll();
   81208:	4b11      	ldr	r3, [pc, #68]	; (81250 <xQueueGenericReceive+0x15c>)
   8120a:	4798      	blx	r3
   8120c:	e78c      	b.n	81128 <xQueueGenericReceive+0x34>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
   8120e:	4620      	mov	r0, r4
   81210:	4b0e      	ldr	r3, [pc, #56]	; (8124c <xQueueGenericReceive+0x158>)
   81212:	4798      	blx	r3
			( void ) xTaskResumeAll();
   81214:	4b0e      	ldr	r3, [pc, #56]	; (81250 <xQueueGenericReceive+0x15c>)
   81216:	4798      	blx	r3
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
   81218:	2000      	movs	r0, #0
		}
	}
}
   8121a:	b005      	add	sp, #20
   8121c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   81220:	00080b01 	.word	0x00080b01
   81224:	00080b11 	.word	0x00080b11
   81228:	00080b31 	.word	0x00080b31
   8122c:	00080db9 	.word	0x00080db9
   81230:	00081bc1 	.word	0x00081bc1
   81234:	00081a7d 	.word	0x00081a7d
   81238:	00080af1 	.word	0x00080af1
   8123c:	00081575 	.word	0x00081575
   81240:	00081b29 	.word	0x00081b29
   81244:	00081bed 	.word	0x00081bed
   81248:	000819d1 	.word	0x000819d1
   8124c:	00080de1 	.word	0x00080de1
   81250:	000816d1 	.word	0x000816d1
   81254:	00081b01 	.word	0x00081b01

00081258 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if configUSE_TIMERS == 1

	void vQueueWaitForMessageRestricted( xQueueHandle pxQueue, portTickType xTicksToWait )
	{
   81258:	b538      	push	{r3, r4, r5, lr}
   8125a:	4604      	mov	r4, r0
   8125c:	460d      	mov	r5, r1
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
   8125e:	4b0d      	ldr	r3, [pc, #52]	; (81294 <vQueueWaitForMessageRestricted+0x3c>)
   81260:	4798      	blx	r3
   81262:	6c63      	ldr	r3, [r4, #68]	; 0x44
   81264:	f1b3 3fff 	cmp.w	r3, #4294967295
   81268:	bf04      	itt	eq
   8126a:	2300      	moveq	r3, #0
   8126c:	6463      	streq	r3, [r4, #68]	; 0x44
   8126e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   81270:	f1b3 3fff 	cmp.w	r3, #4294967295
   81274:	bf04      	itt	eq
   81276:	2300      	moveq	r3, #0
   81278:	64a3      	streq	r3, [r4, #72]	; 0x48
   8127a:	4b07      	ldr	r3, [pc, #28]	; (81298 <vQueueWaitForMessageRestricted+0x40>)
   8127c:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0U )
   8127e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   81280:	b923      	cbnz	r3, 8128c <vQueueWaitForMessageRestricted+0x34>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
   81282:	f104 0024 	add.w	r0, r4, #36	; 0x24
   81286:	4629      	mov	r1, r5
   81288:	4b04      	ldr	r3, [pc, #16]	; (8129c <vQueueWaitForMessageRestricted+0x44>)
   8128a:	4798      	blx	r3
		}
		prvUnlockQueue( pxQueue );
   8128c:	4620      	mov	r0, r4
   8128e:	4b04      	ldr	r3, [pc, #16]	; (812a0 <vQueueWaitForMessageRestricted+0x48>)
   81290:	4798      	blx	r3
   81292:	bd38      	pop	{r3, r4, r5, pc}
   81294:	00080b11 	.word	0x00080b11
   81298:	00080b31 	.word	0x00080b31
   8129c:	00081a35 	.word	0x00081a35
   812a0:	00080de1 	.word	0x00080de1

000812a4 <prvAddCurrentTaskToDelayedList>:
	#endif
}
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( portTickType xTimeToWake )
{
   812a4:	b510      	push	{r4, lr}
   812a6:	4604      	mov	r4, r0
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
   812a8:	4b0f      	ldr	r3, [pc, #60]	; (812e8 <prvAddCurrentTaskToDelayedList+0x44>)
   812aa:	681b      	ldr	r3, [r3, #0]
   812ac:	8098      	strh	r0, [r3, #4]

	if( xTimeToWake < xTickCount )
   812ae:	4b0f      	ldr	r3, [pc, #60]	; (812ec <prvAddCurrentTaskToDelayedList+0x48>)
   812b0:	881b      	ldrh	r3, [r3, #0]
   812b2:	b29b      	uxth	r3, r3
   812b4:	4298      	cmp	r0, r3
   812b6:	d207      	bcs.n	812c8 <prvAddCurrentTaskToDelayedList+0x24>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
   812b8:	4b0d      	ldr	r3, [pc, #52]	; (812f0 <prvAddCurrentTaskToDelayedList+0x4c>)
   812ba:	6818      	ldr	r0, [r3, #0]
   812bc:	4b0a      	ldr	r3, [pc, #40]	; (812e8 <prvAddCurrentTaskToDelayedList+0x44>)
   812be:	6819      	ldr	r1, [r3, #0]
   812c0:	3104      	adds	r1, #4
   812c2:	4b0c      	ldr	r3, [pc, #48]	; (812f4 <prvAddCurrentTaskToDelayedList+0x50>)
   812c4:	4798      	blx	r3
   812c6:	bd10      	pop	{r4, pc}
	}
	else
	{
		/* The wake time has not overflowed, so we can use the current block list. */
		vListInsert( ( xList * ) pxDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
   812c8:	4b0b      	ldr	r3, [pc, #44]	; (812f8 <prvAddCurrentTaskToDelayedList+0x54>)
   812ca:	6818      	ldr	r0, [r3, #0]
   812cc:	4b06      	ldr	r3, [pc, #24]	; (812e8 <prvAddCurrentTaskToDelayedList+0x44>)
   812ce:	6819      	ldr	r1, [r3, #0]
   812d0:	3104      	adds	r1, #4
   812d2:	4b08      	ldr	r3, [pc, #32]	; (812f4 <prvAddCurrentTaskToDelayedList+0x50>)
   812d4:	4798      	blx	r3

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
   812d6:	4b09      	ldr	r3, [pc, #36]	; (812fc <prvAddCurrentTaskToDelayedList+0x58>)
   812d8:	881b      	ldrh	r3, [r3, #0]
   812da:	b29b      	uxth	r3, r3
   812dc:	429c      	cmp	r4, r3
		{
			xNextTaskUnblockTime = xTimeToWake;
   812de:	bf3c      	itt	cc
   812e0:	4b06      	ldrcc	r3, [pc, #24]	; (812fc <prvAddCurrentTaskToDelayedList+0x58>)
   812e2:	801c      	strhcc	r4, [r3, #0]
   812e4:	bd10      	pop	{r4, pc}
   812e6:	bf00      	nop
   812e8:	20078b28 	.word	0x20078b28
   812ec:	20078b44 	.word	0x20078b44
   812f0:	20078b48 	.word	0x20078b48
   812f4:	00080a35 	.word	0x00080a35
   812f8:	20078a24 	.word	0x20078a24
   812fc:	20070138 	.word	0x20070138

00081300 <xTaskGenericCreate>:
/*-----------------------------------------------------------
 * TASK CREATION API documented in task.h
 *----------------------------------------------------------*/

signed portBASE_TYPE xTaskGenericCreate( pdTASK_CODE pxTaskCode, const signed char * const pcName, unsigned short usStackDepth, void *pvParameters, unsigned portBASE_TYPE uxPriority, xTaskHandle *pxCreatedTask, portSTACK_TYPE *puxStackBuffer, const xMemoryRegion * const xRegions )
{
   81300:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   81304:	460e      	mov	r6, r1
   81306:	4617      	mov	r7, r2
   81308:	469a      	mov	sl, r3
   8130a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   8130c:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
signed portBASE_TYPE xReturn;
tskTCB * pxNewTCB;

	configASSERT( pxTaskCode );
   81310:	4681      	mov	r9, r0
   81312:	b918      	cbnz	r0, 8131c <xTaskGenericCreate+0x1c>
   81314:	4b62      	ldr	r3, [pc, #392]	; (814a0 <xTaskGenericCreate+0x1a0>)
   81316:	4798      	blx	r3
   81318:	bf00      	nop
   8131a:	e7fd      	b.n	81318 <xTaskGenericCreate+0x18>
	configASSERT( ( ( uxPriority & ( ~portPRIVILEGE_BIT ) ) < configMAX_PRIORITIES ) );
   8131c:	2d09      	cmp	r5, #9
   8131e:	d903      	bls.n	81328 <xTaskGenericCreate+0x28>
   81320:	4b5f      	ldr	r3, [pc, #380]	; (814a0 <xTaskGenericCreate+0x1a0>)
   81322:	4798      	blx	r3
   81324:	bf00      	nop
   81326:	e7fd      	b.n	81324 <xTaskGenericCreate+0x24>
{
tskTCB *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( tskTCB * ) pvPortMalloc( sizeof( tskTCB ) );
   81328:	2050      	movs	r0, #80	; 0x50
   8132a:	4b5e      	ldr	r3, [pc, #376]	; (814a4 <xTaskGenericCreate+0x1a4>)
   8132c:	4798      	blx	r3

	if( pxNewTCB != NULL )
   8132e:	4604      	mov	r4, r0
   81330:	2800      	cmp	r0, #0
   81332:	f000 80b1 	beq.w	81498 <xTaskGenericCreate+0x198>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
   81336:	f1b8 0f00 	cmp.w	r8, #0
   8133a:	f040 80a9 	bne.w	81490 <xTaskGenericCreate+0x190>
   8133e:	00b8      	lsls	r0, r7, #2
   81340:	4b58      	ldr	r3, [pc, #352]	; (814a4 <xTaskGenericCreate+0x1a4>)
   81342:	4798      	blx	r3
   81344:	6320      	str	r0, [r4, #48]	; 0x30

		if( pxNewTCB->pxStack == NULL )
   81346:	b918      	cbnz	r0, 81350 <xTaskGenericCreate+0x50>
		{
			/* Could not allocate the stack.  Delete the allocated TCB. */
			vPortFree( pxNewTCB );
   81348:	4620      	mov	r0, r4
   8134a:	4b57      	ldr	r3, [pc, #348]	; (814a8 <xTaskGenericCreate+0x1a8>)
   8134c:	4798      	blx	r3
   8134e:	e0a3      	b.n	81498 <xTaskGenericCreate+0x198>
			pxNewTCB = NULL;
		}
		else
		{
			/* Just to help debugging. */
			memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( portSTACK_TYPE ) );
   81350:	21a5      	movs	r1, #165	; 0xa5
   81352:	00ba      	lsls	r2, r7, #2
   81354:	4b55      	ldr	r3, [pc, #340]	; (814ac <xTaskGenericCreate+0x1ac>)
   81356:	4798      	blx	r3
		stack grows from high memory to low (as per the 80x86) or visa versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( unsigned short ) 1 );
   81358:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
   8135c:	3f01      	subs	r7, #1
   8135e:	6b23      	ldr	r3, [r4, #48]	; 0x30
   81360:	eb03 0387 	add.w	r3, r3, r7, lsl #2
			pxTopOfStack = ( portSTACK_TYPE * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK  ) );
   81364:	f023 0b07 	bic.w	fp, r3, #7
{
	/* Store the function name in the TCB. */
	#if configMAX_TASK_NAME_LEN > 1
	{
		/* Don't bring strncpy into the build unnecessarily. */
		strncpy( ( char * ) pxTCB->pcTaskName, ( const char * ) pcName, ( unsigned short ) configMAX_TASK_NAME_LEN );
   81368:	f104 0034 	add.w	r0, r4, #52	; 0x34
   8136c:	4631      	mov	r1, r6
   8136e:	2210      	movs	r2, #16
   81370:	4b4f      	ldr	r3, [pc, #316]	; (814b0 <xTaskGenericCreate+0x1b0>)
   81372:	4798      	blx	r3
	}
	#endif
	pxTCB->pcTaskName[ ( unsigned short ) configMAX_TASK_NAME_LEN - ( unsigned short ) 1 ] = ( signed char ) '\0';
   81374:	2300      	movs	r3, #0
   81376:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   8137a:	2d09      	cmp	r5, #9
   8137c:	bf34      	ite	cc
   8137e:	462e      	movcc	r6, r5
   81380:	2609      	movcs	r6, #9
	if( uxPriority >= configMAX_PRIORITIES )
	{
		uxPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
	}

	pxTCB->uxPriority = uxPriority;
   81382:	62e6      	str	r6, [r4, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
   81384:	64e6      	str	r6, [r4, #76]	; 0x4c
	}
	#endif

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
   81386:	1d27      	adds	r7, r4, #4
   81388:	4638      	mov	r0, r7
   8138a:	f8df 8170 	ldr.w	r8, [pc, #368]	; 814fc <xTaskGenericCreate+0x1fc>
   8138e:	47c0      	blx	r8
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
   81390:	f104 0018 	add.w	r0, r4, #24
   81394:	47c0      	blx	r8

	/* Set the pxTCB as a link back from the xListItem.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
   81396:	6124      	str	r4, [r4, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
   81398:	f1c6 060a 	rsb	r6, r6, #10
   8139c:	8326      	strh	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
   8139e:	6264      	str	r4, [r4, #36]	; 0x24
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
   813a0:	4658      	mov	r0, fp
   813a2:	4649      	mov	r1, r9
   813a4:	4652      	mov	r2, sl
   813a6:	4b43      	ldr	r3, [pc, #268]	; (814b4 <xTaskGenericCreate+0x1b4>)
   813a8:	4798      	blx	r3
   813aa:	6020      	str	r0, [r4, #0]
		}
		#endif

		/* Check the alignment of the initialised stack. */
		portALIGNMENT_ASSERT_pxCurrentTCB( ( ( ( unsigned long ) pxNewTCB->pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
   813ac:	f010 0f07 	tst.w	r0, #7
   813b0:	d003      	beq.n	813ba <xTaskGenericCreate+0xba>
   813b2:	4b3b      	ldr	r3, [pc, #236]	; (814a0 <xTaskGenericCreate+0x1a0>)
   813b4:	4798      	blx	r3
   813b6:	bf00      	nop
   813b8:	e7fd      	b.n	813b6 <xTaskGenericCreate+0xb6>

		if( ( void * ) pxCreatedTask != NULL )
   813ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   813bc:	b103      	cbz	r3, 813c0 <xTaskGenericCreate+0xc0>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( xTaskHandle ) pxNewTCB;
   813be:	601c      	str	r4, [r3, #0]
		}

		/* We are going to manipulate the task queues to add this task to a
		ready list, so must make sure no interrupts occur. */
		taskENTER_CRITICAL();
   813c0:	4b3d      	ldr	r3, [pc, #244]	; (814b8 <xTaskGenericCreate+0x1b8>)
   813c2:	4798      	blx	r3
		{
			uxCurrentNumberOfTasks++;
   813c4:	4b3d      	ldr	r3, [pc, #244]	; (814bc <xTaskGenericCreate+0x1bc>)
   813c6:	681a      	ldr	r2, [r3, #0]
   813c8:	3201      	adds	r2, #1
   813ca:	601a      	str	r2, [r3, #0]
			if( pxCurrentTCB == NULL )
   813cc:	4b3c      	ldr	r3, [pc, #240]	; (814c0 <xTaskGenericCreate+0x1c0>)
   813ce:	681b      	ldr	r3, [r3, #0]
   813d0:	bb2b      	cbnz	r3, 8141e <xTaskGenericCreate+0x11e>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
   813d2:	4b3b      	ldr	r3, [pc, #236]	; (814c0 <xTaskGenericCreate+0x1c0>)
   813d4:	601c      	str	r4, [r3, #0]

				if( uxCurrentNumberOfTasks == ( unsigned portBASE_TYPE ) 1 )
   813d6:	4b39      	ldr	r3, [pc, #228]	; (814bc <xTaskGenericCreate+0x1bc>)
   813d8:	681b      	ldr	r3, [r3, #0]
   813da:	2b01      	cmp	r3, #1
   813dc:	d129      	bne.n	81432 <xTaskGenericCreate+0x132>
   813de:	4e39      	ldr	r6, [pc, #228]	; (814c4 <xTaskGenericCreate+0x1c4>)
   813e0:	f106 09c8 	add.w	r9, r6, #200	; 0xc8
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
   813e4:	f8df 80e0 	ldr.w	r8, [pc, #224]	; 814c8 <xTaskGenericCreate+0x1c8>
   813e8:	4630      	mov	r0, r6
   813ea:	47c0      	blx	r8
   813ec:	3614      	adds	r6, #20

static void prvInitialiseTaskLists( void )
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
   813ee:	454e      	cmp	r6, r9
   813f0:	d1fa      	bne.n	813e8 <xTaskGenericCreate+0xe8>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( ( xList * ) &xDelayedTaskList1 );
   813f2:	f8df 910c 	ldr.w	r9, [pc, #268]	; 81500 <xTaskGenericCreate+0x200>
   813f6:	4648      	mov	r0, r9
   813f8:	4e33      	ldr	r6, [pc, #204]	; (814c8 <xTaskGenericCreate+0x1c8>)
   813fa:	47b0      	blx	r6
	vListInitialise( ( xList * ) &xDelayedTaskList2 );
   813fc:	f8df 8104 	ldr.w	r8, [pc, #260]	; 81504 <xTaskGenericCreate+0x204>
   81400:	4640      	mov	r0, r8
   81402:	47b0      	blx	r6
	vListInitialise( ( xList * ) &xPendingReadyList );
   81404:	4831      	ldr	r0, [pc, #196]	; (814cc <xTaskGenericCreate+0x1cc>)
   81406:	47b0      	blx	r6

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( ( xList * ) &xTasksWaitingTermination );
   81408:	4831      	ldr	r0, [pc, #196]	; (814d0 <xTaskGenericCreate+0x1d0>)
   8140a:	47b0      	blx	r6
	}
	#endif

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( ( xList * ) &xSuspendedTaskList );
   8140c:	4831      	ldr	r0, [pc, #196]	; (814d4 <xTaskGenericCreate+0x1d4>)
   8140e:	47b0      	blx	r6
	}
	#endif

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
   81410:	4b31      	ldr	r3, [pc, #196]	; (814d8 <xTaskGenericCreate+0x1d8>)
   81412:	f8c3 9000 	str.w	r9, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
   81416:	4b31      	ldr	r3, [pc, #196]	; (814dc <xTaskGenericCreate+0x1dc>)
   81418:	f8c3 8000 	str.w	r8, [r3]
   8141c:	e009      	b.n	81432 <xTaskGenericCreate+0x132>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
   8141e:	4b30      	ldr	r3, [pc, #192]	; (814e0 <xTaskGenericCreate+0x1e0>)
   81420:	681b      	ldr	r3, [r3, #0]
   81422:	b933      	cbnz	r3, 81432 <xTaskGenericCreate+0x132>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
   81424:	4b26      	ldr	r3, [pc, #152]	; (814c0 <xTaskGenericCreate+0x1c0>)
   81426:	681b      	ldr	r3, [r3, #0]
   81428:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   8142a:	429d      	cmp	r5, r3
					{
						pxCurrentTCB = pxNewTCB;
   8142c:	bf24      	itt	cs
   8142e:	4b24      	ldrcs	r3, [pc, #144]	; (814c0 <xTaskGenericCreate+0x1c0>)
   81430:	601c      	strcs	r4, [r3, #0]
				}
			}

			/* Remember the top priority to make context switching faster.  Use
			the priority in pxNewTCB as this has been capped to a valid value. */
			if( pxNewTCB->uxPriority > uxTopUsedPriority )
   81432:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   81434:	4a2b      	ldr	r2, [pc, #172]	; (814e4 <xTaskGenericCreate+0x1e4>)
   81436:	6812      	ldr	r2, [r2, #0]
   81438:	4293      	cmp	r3, r2
			{
				uxTopUsedPriority = pxNewTCB->uxPriority;
   8143a:	bf84      	itt	hi
   8143c:	4a29      	ldrhi	r2, [pc, #164]	; (814e4 <xTaskGenericCreate+0x1e4>)
   8143e:	6013      	strhi	r3, [r2, #0]
			}

			#if ( configUSE_TRACE_FACILITY == 1 )
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
   81440:	4a29      	ldr	r2, [pc, #164]	; (814e8 <xTaskGenericCreate+0x1e8>)
   81442:	6811      	ldr	r1, [r2, #0]
   81444:	6461      	str	r1, [r4, #68]	; 0x44
			}
			#endif
			uxTaskNumber++;
   81446:	3101      	adds	r1, #1
   81448:	6011      	str	r1, [r2, #0]

			prvAddTaskToReadyQueue( pxNewTCB );
   8144a:	4a28      	ldr	r2, [pc, #160]	; (814ec <xTaskGenericCreate+0x1ec>)
   8144c:	6812      	ldr	r2, [r2, #0]
   8144e:	4293      	cmp	r3, r2
   81450:	bf84      	itt	hi
   81452:	4a26      	ldrhi	r2, [pc, #152]	; (814ec <xTaskGenericCreate+0x1ec>)
   81454:	6013      	strhi	r3, [r2, #0]
   81456:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   8145a:	481a      	ldr	r0, [pc, #104]	; (814c4 <xTaskGenericCreate+0x1c4>)
   8145c:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   81460:	4639      	mov	r1, r7
   81462:	4b23      	ldr	r3, [pc, #140]	; (814f0 <xTaskGenericCreate+0x1f0>)
   81464:	4798      	blx	r3

			xReturn = pdPASS;
			portSETUP_TCB( pxNewTCB );
			traceTASK_CREATE( pxNewTCB );
		}
		taskEXIT_CRITICAL();
   81466:	4b23      	ldr	r3, [pc, #140]	; (814f4 <xTaskGenericCreate+0x1f4>)
   81468:	4798      	blx	r3
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
	{
		if( xSchedulerRunning != pdFALSE )
   8146a:	4b1d      	ldr	r3, [pc, #116]	; (814e0 <xTaskGenericCreate+0x1e0>)
   8146c:	681b      	ldr	r3, [r3, #0]
   8146e:	b14b      	cbz	r3, 81484 <xTaskGenericCreate+0x184>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
   81470:	4b13      	ldr	r3, [pc, #76]	; (814c0 <xTaskGenericCreate+0x1c0>)
   81472:	681b      	ldr	r3, [r3, #0]
   81474:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   81476:	429d      	cmp	r5, r3
   81478:	d907      	bls.n	8148a <xTaskGenericCreate+0x18a>
			{
				portYIELD_WITHIN_API();
   8147a:	4b1f      	ldr	r3, [pc, #124]	; (814f8 <xTaskGenericCreate+0x1f8>)
   8147c:	4798      	blx	r3
			#endif
			uxTaskNumber++;

			prvAddTaskToReadyQueue( pxNewTCB );

			xReturn = pdPASS;
   8147e:	2001      	movs	r0, #1
   81480:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   81484:	2001      	movs	r0, #1
   81486:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8148a:	2001      	movs	r0, #1
   8148c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if( pxNewTCB != NULL )
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
   81490:	f8c0 8030 	str.w	r8, [r0, #48]	; 0x30
   81494:	4640      	mov	r0, r8
   81496:	e75b      	b.n	81350 <xTaskGenericCreate+0x50>
		}
		taskEXIT_CRITICAL();
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
   81498:	f04f 30ff 	mov.w	r0, #4294967295
			}
		}
	}

	return xReturn;
}
   8149c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   814a0:	00080b01 	.word	0x00080b01
   814a4:	00080c5d 	.word	0x00080c5d
   814a8:	00080d21 	.word	0x00080d21
   814ac:	00083539 	.word	0x00083539
   814b0:	0008373d 	.word	0x0008373d
   814b4:	00080ab5 	.word	0x00080ab5
   814b8:	00080b11 	.word	0x00080b11
   814bc:	20078b68 	.word	0x20078b68
   814c0:	20078b28 	.word	0x20078b28
   814c4:	20078a5c 	.word	0x20078a5c
   814c8:	000809f9 	.word	0x000809f9
   814cc:	20078b2c 	.word	0x20078b2c
   814d0:	20078a30 	.word	0x20078a30
   814d4:	20078a10 	.word	0x20078a10
   814d8:	20078a24 	.word	0x20078a24
   814dc:	20078b48 	.word	0x20078b48
   814e0:	20078a28 	.word	0x20078a28
   814e4:	20078b6c 	.word	0x20078b6c
   814e8:	20078b4c 	.word	0x20078b4c
   814ec:	20078a58 	.word	0x20078a58
   814f0:	00080a19 	.word	0x00080a19
   814f4:	00080b31 	.word	0x00080b31
   814f8:	00080af1 	.word	0x00080af1
   814fc:	00080a11 	.word	0x00080a11
   81500:	20078b50 	.word	0x20078b50
   81504:	20078a44 	.word	0x20078a44

00081508 <vTaskStartScheduler>:
 * PUBLIC SCHEDULER CONTROL documented in task.h
 *----------------------------------------------------------*/


void vTaskStartScheduler( void )
{
   81508:	b510      	push	{r4, lr}
   8150a:	b084      	sub	sp, #16
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle );
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );
   8150c:	2300      	movs	r3, #0
   8150e:	9300      	str	r3, [sp, #0]
   81510:	9301      	str	r3, [sp, #4]
   81512:	9302      	str	r3, [sp, #8]
   81514:	9303      	str	r3, [sp, #12]
   81516:	480f      	ldr	r0, [pc, #60]	; (81554 <vTaskStartScheduler+0x4c>)
   81518:	490f      	ldr	r1, [pc, #60]	; (81558 <vTaskStartScheduler+0x50>)
   8151a:	f44f 7280 	mov.w	r2, #256	; 0x100
   8151e:	4c0f      	ldr	r4, [pc, #60]	; (8155c <vTaskStartScheduler+0x54>)
   81520:	47a0      	blx	r4
	}
	#endif

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
   81522:	2801      	cmp	r0, #1
   81524:	d10e      	bne.n	81544 <vTaskStartScheduler+0x3c>
		{
			xReturn = xTimerCreateTimerTask();
   81526:	4b0e      	ldr	r3, [pc, #56]	; (81560 <vTaskStartScheduler+0x58>)
   81528:	4798      	blx	r3
		}
	}
	#endif

	if( xReturn == pdPASS )
   8152a:	2801      	cmp	r0, #1
   8152c:	d10a      	bne.n	81544 <vTaskStartScheduler+0x3c>
		so interrupts will automatically get re-enabled when the first task
		starts to run.

		STEPPING THROUGH HERE USING A DEBUGGER CAN CAUSE BIG PROBLEMS IF THE
		DEBUGGER ALLOWS INTERRUPTS TO BE PROCESSED. */
		portDISABLE_INTERRUPTS();
   8152e:	4b0d      	ldr	r3, [pc, #52]	; (81564 <vTaskStartScheduler+0x5c>)
   81530:	4798      	blx	r3

		xSchedulerRunning = pdTRUE;
   81532:	2201      	movs	r2, #1
   81534:	4b0c      	ldr	r3, [pc, #48]	; (81568 <vTaskStartScheduler+0x60>)
   81536:	601a      	str	r2, [r3, #0]
		xTickCount = ( portTickType ) 0U;
   81538:	2200      	movs	r2, #0
   8153a:	4b0c      	ldr	r3, [pc, #48]	; (8156c <vTaskStartScheduler+0x64>)
   8153c:	801a      	strh	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
   8153e:	4b0c      	ldr	r3, [pc, #48]	; (81570 <vTaskStartScheduler+0x68>)
   81540:	4798      	blx	r3
   81542:	e004      	b.n	8154e <vTaskStartScheduler+0x46>
			/* Should only reach here if a task calls xTaskEndScheduler(). */
		}
	}

	/* This line will only be reached if the kernel could not be started. */
	configASSERT( xReturn );
   81544:	b918      	cbnz	r0, 8154e <vTaskStartScheduler+0x46>
   81546:	4b07      	ldr	r3, [pc, #28]	; (81564 <vTaskStartScheduler+0x5c>)
   81548:	4798      	blx	r3
   8154a:	bf00      	nop
   8154c:	e7fd      	b.n	8154a <vTaskStartScheduler+0x42>
}
   8154e:	b004      	add	sp, #16
   81550:	bd10      	pop	{r4, pc}
   81552:	bf00      	nop
   81554:	000818bd 	.word	0x000818bd
   81558:	00086458 	.word	0x00086458
   8155c:	00081301 	.word	0x00081301
   81560:	00081d65 	.word	0x00081d65
   81564:	00080b01 	.word	0x00080b01
   81568:	20078a28 	.word	0x20078a28
   8156c:	20078b44 	.word	0x20078b44
   81570:	00080bcd 	.word	0x00080bcd

00081574 <vTaskSuspendAll>:

void vTaskSuspendAll( void )
{
	/* A critical section is not required as the variable is of type
	portBASE_TYPE. */
	++uxSchedulerSuspended;
   81574:	4b02      	ldr	r3, [pc, #8]	; (81580 <vTaskSuspendAll+0xc>)
   81576:	681a      	ldr	r2, [r3, #0]
   81578:	3201      	adds	r2, #1
   8157a:	601a      	str	r2, [r3, #0]
   8157c:	4770      	bx	lr
   8157e:	bf00      	nop
   81580:	20078b24 	.word	0x20078b24

00081584 <xTaskGetTickCount>:
 *----------------------------------------------------------*/



portTickType xTaskGetTickCount( void )
{
   81584:	b510      	push	{r4, lr}
portTickType xTicks;

	/* Critical section required if running on a 16 bit processor. */
	taskENTER_CRITICAL();
   81586:	4b04      	ldr	r3, [pc, #16]	; (81598 <xTaskGetTickCount+0x14>)
   81588:	4798      	blx	r3
	{
		xTicks = xTickCount;
   8158a:	4b04      	ldr	r3, [pc, #16]	; (8159c <xTaskGetTickCount+0x18>)
   8158c:	881c      	ldrh	r4, [r3, #0]
   8158e:	b2a4      	uxth	r4, r4
	}
	taskEXIT_CRITICAL();
   81590:	4b03      	ldr	r3, [pc, #12]	; (815a0 <xTaskGetTickCount+0x1c>)
   81592:	4798      	blx	r3

	return xTicks;
}
   81594:	4620      	mov	r0, r4
   81596:	bd10      	pop	{r4, pc}
   81598:	00080b11 	.word	0x00080b11
   8159c:	20078b44 	.word	0x20078b44
   815a0:	00080b31 	.word	0x00080b31

000815a4 <vTaskIncrementTick>:
 * SCHEDULER INTERNALS AVAILABLE FOR PORTING PURPOSES
 * documented in task.h
 *----------------------------------------------------------*/

void vTaskIncrementTick( void )
{
   815a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   815a8:	4b3d      	ldr	r3, [pc, #244]	; (816a0 <vTaskIncrementTick+0xfc>)
   815aa:	681b      	ldr	r3, [r3, #0]
   815ac:	2b00      	cmp	r3, #0
   815ae:	d171      	bne.n	81694 <vTaskIncrementTick+0xf0>
	{
		++xTickCount;
   815b0:	4b3c      	ldr	r3, [pc, #240]	; (816a4 <vTaskIncrementTick+0x100>)
   815b2:	881a      	ldrh	r2, [r3, #0]
   815b4:	3201      	adds	r2, #1
   815b6:	b292      	uxth	r2, r2
   815b8:	801a      	strh	r2, [r3, #0]
		if( xTickCount == ( portTickType ) 0U )
   815ba:	881b      	ldrh	r3, [r3, #0]
   815bc:	b29b      	uxth	r3, r3
   815be:	bb03      	cbnz	r3, 81602 <vTaskIncrementTick+0x5e>
			xList *pxTemp;

			/* Tick count has overflowed so we need to swap the delay lists.
			If there are any items in pxDelayedTaskList here then there is
			an error! */
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );
   815c0:	4b39      	ldr	r3, [pc, #228]	; (816a8 <vTaskIncrementTick+0x104>)
   815c2:	681b      	ldr	r3, [r3, #0]
   815c4:	681b      	ldr	r3, [r3, #0]
   815c6:	b11b      	cbz	r3, 815d0 <vTaskIncrementTick+0x2c>
   815c8:	4b38      	ldr	r3, [pc, #224]	; (816ac <vTaskIncrementTick+0x108>)
   815ca:	4798      	blx	r3
   815cc:	bf00      	nop
   815ce:	e7fd      	b.n	815cc <vTaskIncrementTick+0x28>

			pxTemp = pxDelayedTaskList;
   815d0:	4b35      	ldr	r3, [pc, #212]	; (816a8 <vTaskIncrementTick+0x104>)
   815d2:	6819      	ldr	r1, [r3, #0]
			pxDelayedTaskList = pxOverflowDelayedTaskList;
   815d4:	4a36      	ldr	r2, [pc, #216]	; (816b0 <vTaskIncrementTick+0x10c>)
   815d6:	6810      	ldr	r0, [r2, #0]
   815d8:	6018      	str	r0, [r3, #0]
			pxOverflowDelayedTaskList = pxTemp;
   815da:	6011      	str	r1, [r2, #0]
			xNumOfOverflows++;
   815dc:	4a35      	ldr	r2, [pc, #212]	; (816b4 <vTaskIncrementTick+0x110>)
   815de:	6811      	ldr	r1, [r2, #0]
   815e0:	3101      	adds	r1, #1
   815e2:	6011      	str	r1, [r2, #0]

			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   815e4:	681b      	ldr	r3, [r3, #0]
   815e6:	681b      	ldr	r3, [r3, #0]
   815e8:	b923      	cbnz	r3, 815f4 <vTaskIncrementTick+0x50>
				/* The new current delayed list is empty.  Set
				xNextTaskUnblockTime to the maximum possible value so it is
				extremely unlikely that the
				if( xTickCount >= xNextTaskUnblockTime ) test will pass until
				there is an item in the delayed list. */
				xNextTaskUnblockTime = portMAX_DELAY;
   815ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
   815ee:	4b32      	ldr	r3, [pc, #200]	; (816b8 <vTaskIncrementTick+0x114>)
   815f0:	801a      	strh	r2, [r3, #0]
   815f2:	e006      	b.n	81602 <vTaskIncrementTick+0x5e>
			{
				/* The new current delayed list is not empty, get the value of
				the item at the head of the delayed list.  This is the time at
				which the task at the head of the delayed list should be removed
				from the Blocked state. */
				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
   815f4:	4b2c      	ldr	r3, [pc, #176]	; (816a8 <vTaskIncrementTick+0x104>)
   815f6:	681b      	ldr	r3, [r3, #0]
   815f8:	68db      	ldr	r3, [r3, #12]
   815fa:	68db      	ldr	r3, [r3, #12]
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
   815fc:	889a      	ldrh	r2, [r3, #4]
   815fe:	4b2e      	ldr	r3, [pc, #184]	; (816b8 <vTaskIncrementTick+0x114>)
   81600:	801a      	strh	r2, [r3, #0]
			}
		}

		/* See if this tick has made a timeout expire. */
		prvCheckDelayedTasks();
   81602:	4b28      	ldr	r3, [pc, #160]	; (816a4 <vTaskIncrementTick+0x100>)
   81604:	881a      	ldrh	r2, [r3, #0]
   81606:	b292      	uxth	r2, r2
   81608:	4b2b      	ldr	r3, [pc, #172]	; (816b8 <vTaskIncrementTick+0x114>)
   8160a:	881b      	ldrh	r3, [r3, #0]
   8160c:	b29b      	uxth	r3, r3
   8160e:	429a      	cmp	r2, r3
   81610:	d344      	bcc.n	8169c <vTaskIncrementTick+0xf8>
   81612:	4b25      	ldr	r3, [pc, #148]	; (816a8 <vTaskIncrementTick+0x104>)
   81614:	681b      	ldr	r3, [r3, #0]
   81616:	681b      	ldr	r3, [r3, #0]
   81618:	b153      	cbz	r3, 81630 <vTaskIncrementTick+0x8c>
   8161a:	4b23      	ldr	r3, [pc, #140]	; (816a8 <vTaskIncrementTick+0x104>)
   8161c:	681b      	ldr	r3, [r3, #0]
   8161e:	68db      	ldr	r3, [r3, #12]
   81620:	68dc      	ldr	r4, [r3, #12]
   81622:	88a3      	ldrh	r3, [r4, #4]
   81624:	4a1f      	ldr	r2, [pc, #124]	; (816a4 <vTaskIncrementTick+0x100>)
   81626:	8812      	ldrh	r2, [r2, #0]
   81628:	b292      	uxth	r2, r2
   8162a:	4293      	cmp	r3, r2
   8162c:	d914      	bls.n	81658 <vTaskIncrementTick+0xb4>
   8162e:	e00f      	b.n	81650 <vTaskIncrementTick+0xac>
   81630:	f64f 72ff 	movw	r2, #65535	; 0xffff
   81634:	4b20      	ldr	r3, [pc, #128]	; (816b8 <vTaskIncrementTick+0x114>)
   81636:	801a      	strh	r2, [r3, #0]
   81638:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8163c:	4b1a      	ldr	r3, [pc, #104]	; (816a8 <vTaskIncrementTick+0x104>)
   8163e:	681b      	ldr	r3, [r3, #0]
   81640:	68db      	ldr	r3, [r3, #12]
   81642:	68dc      	ldr	r4, [r3, #12]
   81644:	88a3      	ldrh	r3, [r4, #4]
   81646:	4a17      	ldr	r2, [pc, #92]	; (816a4 <vTaskIncrementTick+0x100>)
   81648:	8812      	ldrh	r2, [r2, #0]
   8164a:	b292      	uxth	r2, r2
   8164c:	4293      	cmp	r3, r2
   8164e:	d907      	bls.n	81660 <vTaskIncrementTick+0xbc>
   81650:	4a19      	ldr	r2, [pc, #100]	; (816b8 <vTaskIncrementTick+0x114>)
   81652:	8013      	strh	r3, [r2, #0]
   81654:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   81658:	4e18      	ldr	r6, [pc, #96]	; (816bc <vTaskIncrementTick+0x118>)
   8165a:	4f19      	ldr	r7, [pc, #100]	; (816c0 <vTaskIncrementTick+0x11c>)
   8165c:	f8df 806c 	ldr.w	r8, [pc, #108]	; 816cc <vTaskIncrementTick+0x128>
   81660:	1d25      	adds	r5, r4, #4
   81662:	4628      	mov	r0, r5
   81664:	47b0      	blx	r6
   81666:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   81668:	b113      	cbz	r3, 81670 <vTaskIncrementTick+0xcc>
   8166a:	f104 0018 	add.w	r0, r4, #24
   8166e:	47b0      	blx	r6
   81670:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   81672:	683a      	ldr	r2, [r7, #0]
   81674:	4293      	cmp	r3, r2
   81676:	bf88      	it	hi
   81678:	603b      	strhi	r3, [r7, #0]
   8167a:	eb03 0083 	add.w	r0, r3, r3, lsl #2
   8167e:	eb08 0080 	add.w	r0, r8, r0, lsl #2
   81682:	4629      	mov	r1, r5
   81684:	4b0f      	ldr	r3, [pc, #60]	; (816c4 <vTaskIncrementTick+0x120>)
   81686:	4798      	blx	r3
   81688:	4b07      	ldr	r3, [pc, #28]	; (816a8 <vTaskIncrementTick+0x104>)
   8168a:	681b      	ldr	r3, [r3, #0]
   8168c:	681b      	ldr	r3, [r3, #0]
   8168e:	2b00      	cmp	r3, #0
   81690:	d1d4      	bne.n	8163c <vTaskIncrementTick+0x98>
   81692:	e7cd      	b.n	81630 <vTaskIncrementTick+0x8c>
	}
	else
	{
		++uxMissedTicks;
   81694:	4b0c      	ldr	r3, [pc, #48]	; (816c8 <vTaskIncrementTick+0x124>)
   81696:	681a      	ldr	r2, [r3, #0]
   81698:	3201      	adds	r2, #1
   8169a:	601a      	str	r2, [r3, #0]
   8169c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   816a0:	20078b24 	.word	0x20078b24
   816a4:	20078b44 	.word	0x20078b44
   816a8:	20078a24 	.word	0x20078a24
   816ac:	00080b01 	.word	0x00080b01
   816b0:	20078b48 	.word	0x20078b48
   816b4:	20078b40 	.word	0x20078b40
   816b8:	20070138 	.word	0x20070138
   816bc:	00080a79 	.word	0x00080a79
   816c0:	20078a58 	.word	0x20078a58
   816c4:	00080a19 	.word	0x00080a19
   816c8:	20078a0c 	.word	0x20078a0c
   816cc:	20078a5c 	.word	0x20078a5c

000816d0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE != 0  */
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
   816d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
   816d4:	4b31      	ldr	r3, [pc, #196]	; (8179c <xTaskResumeAll+0xcc>)
   816d6:	681b      	ldr	r3, [r3, #0]
   816d8:	b91b      	cbnz	r3, 816e2 <xTaskResumeAll+0x12>
   816da:	4b31      	ldr	r3, [pc, #196]	; (817a0 <xTaskResumeAll+0xd0>)
   816dc:	4798      	blx	r3
   816de:	bf00      	nop
   816e0:	e7fd      	b.n	816de <xTaskResumeAll+0xe>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
   816e2:	4b30      	ldr	r3, [pc, #192]	; (817a4 <xTaskResumeAll+0xd4>)
   816e4:	4798      	blx	r3
	{
		--uxSchedulerSuspended;
   816e6:	4b2d      	ldr	r3, [pc, #180]	; (8179c <xTaskResumeAll+0xcc>)
   816e8:	681a      	ldr	r2, [r3, #0]
   816ea:	3a01      	subs	r2, #1
   816ec:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   816ee:	681b      	ldr	r3, [r3, #0]
   816f0:	2b00      	cmp	r3, #0
   816f2:	d148      	bne.n	81786 <xTaskResumeAll+0xb6>
		{
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0U )
   816f4:	4b2c      	ldr	r3, [pc, #176]	; (817a8 <xTaskResumeAll+0xd8>)
   816f6:	681b      	ldr	r3, [r3, #0]
   816f8:	2b00      	cmp	r3, #0
   816fa:	d046      	beq.n	8178a <xTaskResumeAll+0xba>
   816fc:	2500      	movs	r5, #0
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
   816fe:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 817d4 <xTaskResumeAll+0x104>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
					uxListRemove( &( pxTCB->xEventListItem ) );
   81702:	4f2a      	ldr	r7, [pc, #168]	; (817ac <xTaskResumeAll+0xdc>)
					uxListRemove( &( pxTCB->xGenericListItem ) );
					prvAddTaskToReadyQueue( pxTCB );
   81704:	4e2a      	ldr	r6, [pc, #168]	; (817b0 <xTaskResumeAll+0xe0>)
   81706:	e01d      	b.n	81744 <xTaskResumeAll+0x74>

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
   81708:	f8d8 300c 	ldr.w	r3, [r8, #12]
   8170c:	68dc      	ldr	r4, [r3, #12]
					uxListRemove( &( pxTCB->xEventListItem ) );
   8170e:	f104 0018 	add.w	r0, r4, #24
   81712:	47b8      	blx	r7
					uxListRemove( &( pxTCB->xGenericListItem ) );
   81714:	f104 0904 	add.w	r9, r4, #4
   81718:	4648      	mov	r0, r9
   8171a:	47b8      	blx	r7
					prvAddTaskToReadyQueue( pxTCB );
   8171c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   8171e:	6832      	ldr	r2, [r6, #0]
   81720:	4293      	cmp	r3, r2
   81722:	bf88      	it	hi
   81724:	6033      	strhi	r3, [r6, #0]
   81726:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   8172a:	4822      	ldr	r0, [pc, #136]	; (817b4 <xTaskResumeAll+0xe4>)
   8172c:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   81730:	4649      	mov	r1, r9
   81732:	4b21      	ldr	r3, [pc, #132]	; (817b8 <xTaskResumeAll+0xe8>)
   81734:	4798      	blx	r3

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
   81736:	4b21      	ldr	r3, [pc, #132]	; (817bc <xTaskResumeAll+0xec>)
   81738:	681b      	ldr	r3, [r3, #0]
   8173a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   8173c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
					{
						xYieldRequired = pdTRUE;
   8173e:	429a      	cmp	r2, r3
   81740:	bf28      	it	cs
   81742:	2501      	movcs	r5, #1
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
   81744:	f8d8 3000 	ldr.w	r3, [r8]
   81748:	2b00      	cmp	r3, #0
   8174a:	d1dd      	bne.n	81708 <xTaskResumeAll+0x38>
				}

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
   8174c:	4b1c      	ldr	r3, [pc, #112]	; (817c0 <xTaskResumeAll+0xf0>)
   8174e:	681b      	ldr	r3, [r3, #0]
   81750:	b163      	cbz	r3, 8176c <xTaskResumeAll+0x9c>
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
   81752:	4b1b      	ldr	r3, [pc, #108]	; (817c0 <xTaskResumeAll+0xf0>)
   81754:	681b      	ldr	r3, [r3, #0]
   81756:	b17b      	cbz	r3, 81778 <xTaskResumeAll+0xa8>
					{
						vTaskIncrementTick();
   81758:	4d1a      	ldr	r5, [pc, #104]	; (817c4 <xTaskResumeAll+0xf4>)
						--uxMissedTicks;
   8175a:	4c19      	ldr	r4, [pc, #100]	; (817c0 <xTaskResumeAll+0xf0>)
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
					{
						vTaskIncrementTick();
   8175c:	47a8      	blx	r5
						--uxMissedTicks;
   8175e:	6823      	ldr	r3, [r4, #0]
   81760:	3b01      	subs	r3, #1
   81762:	6023      	str	r3, [r4, #0]
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
   81764:	6823      	ldr	r3, [r4, #0]
   81766:	2b00      	cmp	r3, #0
   81768:	d1f8      	bne.n	8175c <xTaskResumeAll+0x8c>
   8176a:	e005      	b.n	81778 <xTaskResumeAll+0xa8>
						xYieldRequired = pdTRUE;
					}
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
   8176c:	2d01      	cmp	r5, #1
   8176e:	d003      	beq.n	81778 <xTaskResumeAll+0xa8>
   81770:	4b15      	ldr	r3, [pc, #84]	; (817c8 <xTaskResumeAll+0xf8>)
   81772:	681b      	ldr	r3, [r3, #0]
   81774:	2b01      	cmp	r3, #1
   81776:	d10a      	bne.n	8178e <xTaskResumeAll+0xbe>
				{
					xAlreadyYielded = pdTRUE;
					xMissedYield = pdFALSE;
   81778:	2200      	movs	r2, #0
   8177a:	4b13      	ldr	r3, [pc, #76]	; (817c8 <xTaskResumeAll+0xf8>)
   8177c:	601a      	str	r2, [r3, #0]
					portYIELD_WITHIN_API();
   8177e:	4b13      	ldr	r3, [pc, #76]	; (817cc <xTaskResumeAll+0xfc>)
   81780:	4798      	blx	r3
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
				{
					xAlreadyYielded = pdTRUE;
   81782:	2401      	movs	r4, #1
   81784:	e004      	b.n	81790 <xTaskResumeAll+0xc0>
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;
   81786:	2400      	movs	r4, #0
   81788:	e002      	b.n	81790 <xTaskResumeAll+0xc0>
   8178a:	2400      	movs	r4, #0
   8178c:	e000      	b.n	81790 <xTaskResumeAll+0xc0>
   8178e:	2400      	movs	r4, #0
					portYIELD_WITHIN_API();
				}
			}
		}
	}
	taskEXIT_CRITICAL();
   81790:	4b0f      	ldr	r3, [pc, #60]	; (817d0 <xTaskResumeAll+0x100>)
   81792:	4798      	blx	r3

	return xAlreadyYielded;
}
   81794:	4620      	mov	r0, r4
   81796:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   8179a:	bf00      	nop
   8179c:	20078b24 	.word	0x20078b24
   817a0:	00080b01 	.word	0x00080b01
   817a4:	00080b11 	.word	0x00080b11
   817a8:	20078b68 	.word	0x20078b68
   817ac:	00080a79 	.word	0x00080a79
   817b0:	20078a58 	.word	0x20078a58
   817b4:	20078a5c 	.word	0x20078a5c
   817b8:	00080a19 	.word	0x00080a19
   817bc:	20078b28 	.word	0x20078b28
   817c0:	20078a0c 	.word	0x20078a0c
   817c4:	000815a5 	.word	0x000815a5
   817c8:	20078b64 	.word	0x20078b64
   817cc:	00080af1 	.word	0x00080af1
   817d0:	00080b31 	.word	0x00080b31
   817d4:	20078b2c 	.word	0x20078b2c

000817d8 <vTaskDelayUntil>:
 *----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( portTickType * const pxPreviousWakeTime, portTickType xTimeIncrement )
	{
   817d8:	b538      	push	{r3, r4, r5, lr}
   817da:	460c      	mov	r4, r1
	portTickType xTimeToWake;
	portBASE_TYPE xAlreadyYielded, xShouldDelay = pdFALSE;

		configASSERT( pxPreviousWakeTime );
   817dc:	4605      	mov	r5, r0
   817de:	b918      	cbnz	r0, 817e8 <vTaskDelayUntil+0x10>
   817e0:	4b1b      	ldr	r3, [pc, #108]	; (81850 <vTaskDelayUntil+0x78>)
   817e2:	4798      	blx	r3
   817e4:	bf00      	nop
   817e6:	e7fd      	b.n	817e4 <vTaskDelayUntil+0xc>
		configASSERT( ( xTimeIncrement > 0U ) );
   817e8:	b919      	cbnz	r1, 817f2 <vTaskDelayUntil+0x1a>
   817ea:	4b19      	ldr	r3, [pc, #100]	; (81850 <vTaskDelayUntil+0x78>)
   817ec:	4798      	blx	r3
   817ee:	bf00      	nop
   817f0:	e7fd      	b.n	817ee <vTaskDelayUntil+0x16>

		vTaskSuspendAll();
   817f2:	4b18      	ldr	r3, [pc, #96]	; (81854 <vTaskDelayUntil+0x7c>)
   817f4:	4798      	blx	r3
		{
			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
   817f6:	882b      	ldrh	r3, [r5, #0]
   817f8:	441c      	add	r4, r3
   817fa:	b2a4      	uxth	r4, r4

			if( xTickCount < *pxPreviousWakeTime )
   817fc:	4a16      	ldr	r2, [pc, #88]	; (81858 <vTaskDelayUntil+0x80>)
   817fe:	8812      	ldrh	r2, [r2, #0]
   81800:	b292      	uxth	r2, r2
   81802:	4293      	cmp	r3, r2
   81804:	d908      	bls.n	81818 <vTaskDelayUntil+0x40>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xTickCount ) )
   81806:	42a3      	cmp	r3, r4
   81808:	d91e      	bls.n	81848 <vTaskDelayUntil+0x70>
   8180a:	4b13      	ldr	r3, [pc, #76]	; (81858 <vTaskDelayUntil+0x80>)
   8180c:	881b      	ldrh	r3, [r3, #0]
   8180e:	b29b      	uxth	r3, r3
					xShouldDelay = pdTRUE;
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
   81810:	802c      	strh	r4, [r5, #0]

			if( xShouldDelay != pdFALSE )
   81812:	429c      	cmp	r4, r3
   81814:	d910      	bls.n	81838 <vTaskDelayUntil+0x60>
   81816:	e007      	b.n	81828 <vTaskDelayUntil+0x50>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xTickCount ) )
   81818:	42a3      	cmp	r3, r4
   8181a:	d813      	bhi.n	81844 <vTaskDelayUntil+0x6c>
   8181c:	4b0e      	ldr	r3, [pc, #56]	; (81858 <vTaskDelayUntil+0x80>)
   8181e:	881b      	ldrh	r3, [r3, #0]
   81820:	b29b      	uxth	r3, r3
   81822:	429c      	cmp	r4, r3
   81824:	d80e      	bhi.n	81844 <vTaskDelayUntil+0x6c>
   81826:	e00f      	b.n	81848 <vTaskDelayUntil+0x70>
				traceTASK_DELAY_UNTIL();

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
   81828:	4b0c      	ldr	r3, [pc, #48]	; (8185c <vTaskDelayUntil+0x84>)
   8182a:	6818      	ldr	r0, [r3, #0]
   8182c:	3004      	adds	r0, #4
   8182e:	4b0c      	ldr	r3, [pc, #48]	; (81860 <vTaskDelayUntil+0x88>)
   81830:	4798      	blx	r3
					no need to check, and the port reset macro can be called
					directly. */
					portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
				}

				prvAddCurrentTaskToDelayedList( xTimeToWake );
   81832:	4620      	mov	r0, r4
   81834:	4b0b      	ldr	r3, [pc, #44]	; (81864 <vTaskDelayUntil+0x8c>)
   81836:	4798      	blx	r3
			}
		}
		xAlreadyYielded = xTaskResumeAll();
   81838:	4b0b      	ldr	r3, [pc, #44]	; (81868 <vTaskDelayUntil+0x90>)
   8183a:	4798      	blx	r3

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
   8183c:	b930      	cbnz	r0, 8184c <vTaskDelayUntil+0x74>
		{
			portYIELD_WITHIN_API();
   8183e:	4b0b      	ldr	r3, [pc, #44]	; (8186c <vTaskDelayUntil+0x94>)
   81840:	4798      	blx	r3
   81842:	bd38      	pop	{r3, r4, r5, pc}
					xShouldDelay = pdTRUE;
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
   81844:	802c      	strh	r4, [r5, #0]
   81846:	e7ef      	b.n	81828 <vTaskDelayUntil+0x50>
   81848:	802c      	strh	r4, [r5, #0]
   8184a:	e7f5      	b.n	81838 <vTaskDelayUntil+0x60>
   8184c:	bd38      	pop	{r3, r4, r5, pc}
   8184e:	bf00      	nop
   81850:	00080b01 	.word	0x00080b01
   81854:	00081575 	.word	0x00081575
   81858:	20078b44 	.word	0x20078b44
   8185c:	20078b28 	.word	0x20078b28
   81860:	00080a79 	.word	0x00080a79
   81864:	000812a5 	.word	0x000812a5
   81868:	000816d1 	.word	0x000816d1
   8186c:	00080af1 	.word	0x00080af1

00081870 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( portTickType xTicksToDelay )
	{
   81870:	b510      	push	{r4, lr}
	portTickType xTimeToWake;
	signed portBASE_TYPE xAlreadyYielded = pdFALSE;

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( portTickType ) 0U )
   81872:	4604      	mov	r4, r0
   81874:	b180      	cbz	r0, 81898 <vTaskDelay+0x28>
		{
			vTaskSuspendAll();
   81876:	4b0a      	ldr	r3, [pc, #40]	; (818a0 <vTaskDelay+0x30>)
   81878:	4798      	blx	r3
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
   8187a:	4b0a      	ldr	r3, [pc, #40]	; (818a4 <vTaskDelay+0x34>)
   8187c:	881b      	ldrh	r3, [r3, #0]
   8187e:	441c      	add	r4, r3
   81880:	b2a4      	uxth	r4, r4

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
   81882:	4b09      	ldr	r3, [pc, #36]	; (818a8 <vTaskDelay+0x38>)
   81884:	6818      	ldr	r0, [r3, #0]
   81886:	3004      	adds	r0, #4
   81888:	4b08      	ldr	r3, [pc, #32]	; (818ac <vTaskDelay+0x3c>)
   8188a:	4798      	blx	r3
					/* The current task must be in a ready list, so there is
					no need to check, and the port reset macro can be called
					directly. */
					portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
				}
				prvAddCurrentTaskToDelayedList( xTimeToWake );
   8188c:	4620      	mov	r0, r4
   8188e:	4b08      	ldr	r3, [pc, #32]	; (818b0 <vTaskDelay+0x40>)
   81890:	4798      	blx	r3
			}
			xAlreadyYielded = xTaskResumeAll();
   81892:	4b08      	ldr	r3, [pc, #32]	; (818b4 <vTaskDelay+0x44>)
   81894:	4798      	blx	r3
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
   81896:	b908      	cbnz	r0, 8189c <vTaskDelay+0x2c>
		{
			portYIELD_WITHIN_API();
   81898:	4b07      	ldr	r3, [pc, #28]	; (818b8 <vTaskDelay+0x48>)
   8189a:	4798      	blx	r3
   8189c:	bd10      	pop	{r4, pc}
   8189e:	bf00      	nop
   818a0:	00081575 	.word	0x00081575
   818a4:	20078b44 	.word	0x20078b44
   818a8:	20078b28 	.word	0x20078b28
   818ac:	00080a79 	.word	0x00080a79
   818b0:	000812a5 	.word	0x000812a5
   818b4:	000816d1 	.word	0x000816d1
   818b8:	00080af1 	.word	0x00080af1

000818bc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
   818bc:	b580      	push	{r7, lr}
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
   818be:	4d15      	ldr	r5, [pc, #84]	; (81914 <prvIdleTask+0x58>)

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
   818c0:	4e15      	ldr	r6, [pc, #84]	; (81918 <prvIdleTask+0x5c>)
			{
				taskYIELD();
   818c2:	f8df 8078 	ldr.w	r8, [pc, #120]	; 8193c <prvIdleTask+0x80>
   818c6:	e01c      	b.n	81902 <prvIdleTask+0x46>

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
		{
			vTaskSuspendAll();
   818c8:	4b14      	ldr	r3, [pc, #80]	; (8191c <prvIdleTask+0x60>)
   818ca:	4798      	blx	r3
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
   818cc:	4b14      	ldr	r3, [pc, #80]	; (81920 <prvIdleTask+0x64>)
   818ce:	681c      	ldr	r4, [r3, #0]
			xTaskResumeAll();
   818d0:	4b14      	ldr	r3, [pc, #80]	; (81924 <prvIdleTask+0x68>)
   818d2:	4798      	blx	r3

			if( xListIsEmpty == pdFALSE )
   818d4:	b1ac      	cbz	r4, 81902 <prvIdleTask+0x46>
			{
				tskTCB *pxTCB;

				taskENTER_CRITICAL();
   818d6:	4b14      	ldr	r3, [pc, #80]	; (81928 <prvIdleTask+0x6c>)
   818d8:	4798      	blx	r3
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
   818da:	4b11      	ldr	r3, [pc, #68]	; (81920 <prvIdleTask+0x64>)
   818dc:	68db      	ldr	r3, [r3, #12]
   818de:	68dc      	ldr	r4, [r3, #12]
					uxListRemove( &( pxTCB->xGenericListItem ) );
   818e0:	1d20      	adds	r0, r4, #4
   818e2:	4b12      	ldr	r3, [pc, #72]	; (8192c <prvIdleTask+0x70>)
   818e4:	4798      	blx	r3
					--uxCurrentNumberOfTasks;
   818e6:	4b12      	ldr	r3, [pc, #72]	; (81930 <prvIdleTask+0x74>)
   818e8:	681a      	ldr	r2, [r3, #0]
   818ea:	3a01      	subs	r2, #1
   818ec:	601a      	str	r2, [r3, #0]
					--uxTasksDeleted;
   818ee:	682b      	ldr	r3, [r5, #0]
   818f0:	3b01      	subs	r3, #1
   818f2:	602b      	str	r3, [r5, #0]
				}
				taskEXIT_CRITICAL();
   818f4:	4b0f      	ldr	r3, [pc, #60]	; (81934 <prvIdleTask+0x78>)
   818f6:	4798      	blx	r3
		want to allocate and clean RAM statically. */
		portCLEAN_UP_TCB( pxTCB );

		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
   818f8:	6b20      	ldr	r0, [r4, #48]	; 0x30
   818fa:	4f0f      	ldr	r7, [pc, #60]	; (81938 <prvIdleTask+0x7c>)
   818fc:	47b8      	blx	r7
		vPortFree( pxTCB );
   818fe:	4620      	mov	r0, r4
   81900:	47b8      	blx	r7
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
   81902:	682b      	ldr	r3, [r5, #0]
   81904:	2b00      	cmp	r3, #0
   81906:	d1df      	bne.n	818c8 <prvIdleTask+0xc>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
   81908:	6833      	ldr	r3, [r6, #0]
   8190a:	2b01      	cmp	r3, #1
   8190c:	d9f9      	bls.n	81902 <prvIdleTask+0x46>
			{
				taskYIELD();
   8190e:	47c0      	blx	r8
   81910:	e7f7      	b.n	81902 <prvIdleTask+0x46>
   81912:	bf00      	nop
   81914:	20078a2c 	.word	0x20078a2c
   81918:	20078a5c 	.word	0x20078a5c
   8191c:	00081575 	.word	0x00081575
   81920:	20078a30 	.word	0x20078a30
   81924:	000816d1 	.word	0x000816d1
   81928:	00080b11 	.word	0x00080b11
   8192c:	00080a79 	.word	0x00080a79
   81930:	20078b68 	.word	0x20078b68
   81934:	00080b31 	.word	0x00080b31
   81938:	00080d21 	.word	0x00080d21
   8193c:	00080af1 	.word	0x00080af1

00081940 <vTaskSwitchContext>:

#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
   81940:	b508      	push	{r3, lr}
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
   81942:	4b1d      	ldr	r3, [pc, #116]	; (819b8 <vTaskSwitchContext+0x78>)
   81944:	681b      	ldr	r3, [r3, #0]
   81946:	b95b      	cbnz	r3, 81960 <vTaskSwitchContext+0x20>
		#endif

		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();

		taskSELECT_HIGHEST_PRIORITY_TASK();
   81948:	4b1c      	ldr	r3, [pc, #112]	; (819bc <vTaskSwitchContext+0x7c>)
   8194a:	681b      	ldr	r3, [r3, #0]
   8194c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   81950:	009b      	lsls	r3, r3, #2
   81952:	4a1b      	ldr	r2, [pc, #108]	; (819c0 <vTaskSwitchContext+0x80>)
   81954:	58d3      	ldr	r3, [r2, r3]
   81956:	b9cb      	cbnz	r3, 8198c <vTaskSwitchContext+0x4c>
   81958:	4b18      	ldr	r3, [pc, #96]	; (819bc <vTaskSwitchContext+0x7c>)
   8195a:	681b      	ldr	r3, [r3, #0]
   8195c:	b953      	cbnz	r3, 81974 <vTaskSwitchContext+0x34>
   8195e:	e005      	b.n	8196c <vTaskSwitchContext+0x2c>
{
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
   81960:	2201      	movs	r2, #1
   81962:	4b18      	ldr	r3, [pc, #96]	; (819c4 <vTaskSwitchContext+0x84>)
   81964:	601a      	str	r2, [r3, #0]
   81966:	bd08      	pop	{r3, pc}
		#endif

		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();

		taskSELECT_HIGHEST_PRIORITY_TASK();
   81968:	681a      	ldr	r2, [r3, #0]
   8196a:	b92a      	cbnz	r2, 81978 <vTaskSwitchContext+0x38>
   8196c:	4b16      	ldr	r3, [pc, #88]	; (819c8 <vTaskSwitchContext+0x88>)
   8196e:	4798      	blx	r3
   81970:	bf00      	nop
   81972:	e7fd      	b.n	81970 <vTaskSwitchContext+0x30>
   81974:	4b11      	ldr	r3, [pc, #68]	; (819bc <vTaskSwitchContext+0x7c>)
   81976:	4912      	ldr	r1, [pc, #72]	; (819c0 <vTaskSwitchContext+0x80>)
   81978:	681a      	ldr	r2, [r3, #0]
   8197a:	3a01      	subs	r2, #1
   8197c:	601a      	str	r2, [r3, #0]
   8197e:	681a      	ldr	r2, [r3, #0]
   81980:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   81984:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
   81988:	2a00      	cmp	r2, #0
   8198a:	d0ed      	beq.n	81968 <vTaskSwitchContext+0x28>
   8198c:	4b0b      	ldr	r3, [pc, #44]	; (819bc <vTaskSwitchContext+0x7c>)
   8198e:	681b      	ldr	r3, [r3, #0]
   81990:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   81994:	4a0a      	ldr	r2, [pc, #40]	; (819c0 <vTaskSwitchContext+0x80>)
   81996:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   8199a:	685a      	ldr	r2, [r3, #4]
   8199c:	6852      	ldr	r2, [r2, #4]
   8199e:	605a      	str	r2, [r3, #4]
   819a0:	f103 0108 	add.w	r1, r3, #8
   819a4:	428a      	cmp	r2, r1
   819a6:	bf04      	itt	eq
   819a8:	6852      	ldreq	r2, [r2, #4]
   819aa:	605a      	streq	r2, [r3, #4]
   819ac:	685b      	ldr	r3, [r3, #4]
   819ae:	68da      	ldr	r2, [r3, #12]
   819b0:	4b06      	ldr	r3, [pc, #24]	; (819cc <vTaskSwitchContext+0x8c>)
   819b2:	601a      	str	r2, [r3, #0]
   819b4:	bd08      	pop	{r3, pc}
   819b6:	bf00      	nop
   819b8:	20078b24 	.word	0x20078b24
   819bc:	20078a58 	.word	0x20078a58
   819c0:	20078a5c 	.word	0x20078a5c
   819c4:	20078b64 	.word	0x20078b64
   819c8:	00080b01 	.word	0x00080b01
   819cc:	20078b28 	.word	0x20078b28

000819d0 <vTaskPlaceOnEventList>:
	}
}
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( const xList * const pxEventList, portTickType xTicksToWait )
{
   819d0:	b538      	push	{r3, r4, r5, lr}
   819d2:	460c      	mov	r4, r1
portTickType xTimeToWake;

	configASSERT( pxEventList );
   819d4:	b918      	cbnz	r0, 819de <vTaskPlaceOnEventList+0xe>
   819d6:	4b0f      	ldr	r3, [pc, #60]	; (81a14 <vTaskPlaceOnEventList+0x44>)
   819d8:	4798      	blx	r3
   819da:	bf00      	nop
   819dc:	e7fd      	b.n	819da <vTaskPlaceOnEventList+0xa>
	SCHEDULER SUSPENDED. */

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event. */
	vListInsert( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
   819de:	4d0e      	ldr	r5, [pc, #56]	; (81a18 <vTaskPlaceOnEventList+0x48>)
   819e0:	6829      	ldr	r1, [r5, #0]
   819e2:	3118      	adds	r1, #24
   819e4:	4b0d      	ldr	r3, [pc, #52]	; (81a1c <vTaskPlaceOnEventList+0x4c>)
   819e6:	4798      	blx	r3

	/* We must remove ourselves from the ready list before adding ourselves
	to the blocked list as the same list item is used for both lists.  We have
	exclusive access to the ready lists as the scheduler is locked. */
	if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
   819e8:	6828      	ldr	r0, [r5, #0]
   819ea:	3004      	adds	r0, #4
   819ec:	4b0c      	ldr	r3, [pc, #48]	; (81a20 <vTaskPlaceOnEventList+0x50>)
   819ee:	4798      	blx	r3
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( xTicksToWait == portMAX_DELAY )
   819f0:	f64f 73ff 	movw	r3, #65535	; 0xffff
   819f4:	429c      	cmp	r4, r3
   819f6:	d105      	bne.n	81a04 <vTaskPlaceOnEventList+0x34>
		{
			/* Add ourselves to the suspended task list instead of a delayed task
			list to ensure we are not woken by a timing event.  We will block
			indefinitely. */
			vListInsertEnd( ( xList * ) &xSuspendedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
   819f8:	6829      	ldr	r1, [r5, #0]
   819fa:	480a      	ldr	r0, [pc, #40]	; (81a24 <vTaskPlaceOnEventList+0x54>)
   819fc:	3104      	adds	r1, #4
   819fe:	4b0a      	ldr	r3, [pc, #40]	; (81a28 <vTaskPlaceOnEventList+0x58>)
   81a00:	4798      	blx	r3
   81a02:	bd38      	pop	{r3, r4, r5, pc}
		}
		else
		{
			/* Calculate the time at which the task should be woken if the event does
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
   81a04:	4b09      	ldr	r3, [pc, #36]	; (81a2c <vTaskPlaceOnEventList+0x5c>)
   81a06:	8818      	ldrh	r0, [r3, #0]
   81a08:	4420      	add	r0, r4
			prvAddCurrentTaskToDelayedList( xTimeToWake );
   81a0a:	b280      	uxth	r0, r0
   81a0c:	4b08      	ldr	r3, [pc, #32]	; (81a30 <vTaskPlaceOnEventList+0x60>)
   81a0e:	4798      	blx	r3
   81a10:	bd38      	pop	{r3, r4, r5, pc}
   81a12:	bf00      	nop
   81a14:	00080b01 	.word	0x00080b01
   81a18:	20078b28 	.word	0x20078b28
   81a1c:	00080a35 	.word	0x00080a35
   81a20:	00080a79 	.word	0x00080a79
   81a24:	20078a10 	.word	0x20078a10
   81a28:	00080a19 	.word	0x00080a19
   81a2c:	20078b44 	.word	0x20078b44
   81a30:	000812a5 	.word	0x000812a5

00081a34 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if configUSE_TIMERS == 1

	void vTaskPlaceOnEventListRestricted( const xList * const pxEventList, portTickType xTicksToWait )
	{
   81a34:	b538      	push	{r3, r4, r5, lr}
   81a36:	460d      	mov	r5, r1
	portTickType xTimeToWake;

		configASSERT( pxEventList );
   81a38:	b918      	cbnz	r0, 81a42 <vTaskPlaceOnEventListRestricted+0xe>
   81a3a:	4b0a      	ldr	r3, [pc, #40]	; (81a64 <vTaskPlaceOnEventListRestricted+0x30>)
   81a3c:	4798      	blx	r3
   81a3e:	bf00      	nop
   81a40:	e7fd      	b.n	81a3e <vTaskPlaceOnEventListRestricted+0xa>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
   81a42:	4c09      	ldr	r4, [pc, #36]	; (81a68 <vTaskPlaceOnEventListRestricted+0x34>)
   81a44:	6821      	ldr	r1, [r4, #0]
   81a46:	3118      	adds	r1, #24
   81a48:	4b08      	ldr	r3, [pc, #32]	; (81a6c <vTaskPlaceOnEventListRestricted+0x38>)
   81a4a:	4798      	blx	r3

		/* We must remove this task from the ready list before adding it to the
		blocked list as the same list item is used for both lists.  This
		function is called form a critical section. */
		if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
   81a4c:	6820      	ldr	r0, [r4, #0]
   81a4e:	3004      	adds	r0, #4
   81a50:	4b07      	ldr	r3, [pc, #28]	; (81a70 <vTaskPlaceOnEventListRestricted+0x3c>)
   81a52:	4798      	blx	r3
			portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
		}

		/* Calculate the time at which the task should be woken if the event does
		not occur.  This may overflow but this doesn't matter. */
		xTimeToWake = xTickCount + xTicksToWait;
   81a54:	4b07      	ldr	r3, [pc, #28]	; (81a74 <vTaskPlaceOnEventListRestricted+0x40>)
   81a56:	8818      	ldrh	r0, [r3, #0]
   81a58:	4428      	add	r0, r5
		
		traceTASK_DELAY_UNTIL();
		prvAddCurrentTaskToDelayedList( xTimeToWake );
   81a5a:	b280      	uxth	r0, r0
   81a5c:	4b06      	ldr	r3, [pc, #24]	; (81a78 <vTaskPlaceOnEventListRestricted+0x44>)
   81a5e:	4798      	blx	r3
   81a60:	bd38      	pop	{r3, r4, r5, pc}
   81a62:	bf00      	nop
   81a64:	00080b01 	.word	0x00080b01
   81a68:	20078b28 	.word	0x20078b28
   81a6c:	00080a19 	.word	0x00080a19
   81a70:	00080a79 	.word	0x00080a79
   81a74:	20078b44 	.word	0x20078b44
   81a78:	000812a5 	.word	0x000812a5

00081a7c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xTaskRemoveFromEventList( const xList * const pxEventList )
{
   81a7c:	b538      	push	{r3, r4, r5, lr}
	get called - the lock count on the queue will get modified instead.  This
	means we can always expect exclusive access to the event list here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
   81a7e:	68c3      	ldr	r3, [r0, #12]
   81a80:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
   81a82:	b91c      	cbnz	r4, 81a8c <xTaskRemoveFromEventList+0x10>
   81a84:	4b16      	ldr	r3, [pc, #88]	; (81ae0 <xTaskRemoveFromEventList+0x64>)
   81a86:	4798      	blx	r3
   81a88:	bf00      	nop
   81a8a:	e7fd      	b.n	81a88 <xTaskRemoveFromEventList+0xc>
	uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
   81a8c:	f104 0518 	add.w	r5, r4, #24
   81a90:	4628      	mov	r0, r5
   81a92:	4b14      	ldr	r3, [pc, #80]	; (81ae4 <xTaskRemoveFromEventList+0x68>)
   81a94:	4798      	blx	r3

	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   81a96:	4b14      	ldr	r3, [pc, #80]	; (81ae8 <xTaskRemoveFromEventList+0x6c>)
   81a98:	681b      	ldr	r3, [r3, #0]
   81a9a:	b99b      	cbnz	r3, 81ac4 <xTaskRemoveFromEventList+0x48>
	{
		uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
   81a9c:	1d25      	adds	r5, r4, #4
   81a9e:	4628      	mov	r0, r5
   81aa0:	4b10      	ldr	r3, [pc, #64]	; (81ae4 <xTaskRemoveFromEventList+0x68>)
   81aa2:	4798      	blx	r3
		prvAddTaskToReadyQueue( pxUnblockedTCB );
   81aa4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   81aa6:	4a11      	ldr	r2, [pc, #68]	; (81aec <xTaskRemoveFromEventList+0x70>)
   81aa8:	6812      	ldr	r2, [r2, #0]
   81aaa:	4293      	cmp	r3, r2
   81aac:	bf84      	itt	hi
   81aae:	4a0f      	ldrhi	r2, [pc, #60]	; (81aec <xTaskRemoveFromEventList+0x70>)
   81ab0:	6013      	strhi	r3, [r2, #0]
   81ab2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   81ab6:	480e      	ldr	r0, [pc, #56]	; (81af0 <xTaskRemoveFromEventList+0x74>)
   81ab8:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   81abc:	4629      	mov	r1, r5
   81abe:	4b0d      	ldr	r3, [pc, #52]	; (81af4 <xTaskRemoveFromEventList+0x78>)
   81ac0:	4798      	blx	r3
   81ac2:	e003      	b.n	81acc <xTaskRemoveFromEventList+0x50>
	}
	else
	{
		/* We cannot access the delayed or ready lists, so will hold this
		task pending until the scheduler is resumed. */
		vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
   81ac4:	480c      	ldr	r0, [pc, #48]	; (81af8 <xTaskRemoveFromEventList+0x7c>)
   81ac6:	4629      	mov	r1, r5
   81ac8:	4b0a      	ldr	r3, [pc, #40]	; (81af4 <xTaskRemoveFromEventList+0x78>)
   81aca:	4798      	blx	r3
	}

	if( pxUnblockedTCB->uxPriority >= pxCurrentTCB->uxPriority )
   81acc:	4b0b      	ldr	r3, [pc, #44]	; (81afc <xTaskRemoveFromEventList+0x80>)
   81ace:	681b      	ldr	r3, [r3, #0]
   81ad0:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   81ad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	{
		xReturn = pdFALSE;
	}

	return xReturn;
}
   81ad4:	4298      	cmp	r0, r3
   81ad6:	bf34      	ite	cc
   81ad8:	2000      	movcc	r0, #0
   81ada:	2001      	movcs	r0, #1
   81adc:	bd38      	pop	{r3, r4, r5, pc}
   81ade:	bf00      	nop
   81ae0:	00080b01 	.word	0x00080b01
   81ae4:	00080a79 	.word	0x00080a79
   81ae8:	20078b24 	.word	0x20078b24
   81aec:	20078a58 	.word	0x20078a58
   81af0:	20078a5c 	.word	0x20078a5c
   81af4:	00080a19 	.word	0x00080a19
   81af8:	20078b2c 	.word	0x20078b2c
   81afc:	20078b28 	.word	0x20078b28

00081b00 <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( xTimeOutType * const pxTimeOut )
{
   81b00:	b508      	push	{r3, lr}
	configASSERT( pxTimeOut );
   81b02:	b918      	cbnz	r0, 81b0c <vTaskSetTimeOutState+0xc>
   81b04:	4b05      	ldr	r3, [pc, #20]	; (81b1c <vTaskSetTimeOutState+0x1c>)
   81b06:	4798      	blx	r3
   81b08:	bf00      	nop
   81b0a:	e7fd      	b.n	81b08 <vTaskSetTimeOutState+0x8>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
   81b0c:	4a04      	ldr	r2, [pc, #16]	; (81b20 <vTaskSetTimeOutState+0x20>)
   81b0e:	6812      	ldr	r2, [r2, #0]
   81b10:	6002      	str	r2, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
   81b12:	4a04      	ldr	r2, [pc, #16]	; (81b24 <vTaskSetTimeOutState+0x24>)
   81b14:	8812      	ldrh	r2, [r2, #0]
   81b16:	8082      	strh	r2, [r0, #4]
   81b18:	bd08      	pop	{r3, pc}
   81b1a:	bf00      	nop
   81b1c:	00080b01 	.word	0x00080b01
   81b20:	20078b40 	.word	0x20078b40
   81b24:	20078b44 	.word	0x20078b44

00081b28 <xTaskCheckForTimeOut>:
}
/*-----------------------------------------------------------*/

portBASE_TYPE xTaskCheckForTimeOut( xTimeOutType * const pxTimeOut, portTickType * const pxTicksToWait )
{
   81b28:	b538      	push	{r3, r4, r5, lr}
   81b2a:	460d      	mov	r5, r1
portBASE_TYPE xReturn;

	configASSERT( pxTimeOut );
   81b2c:	4604      	mov	r4, r0
   81b2e:	b918      	cbnz	r0, 81b38 <xTaskCheckForTimeOut+0x10>
   81b30:	4b1a      	ldr	r3, [pc, #104]	; (81b9c <xTaskCheckForTimeOut+0x74>)
   81b32:	4798      	blx	r3
   81b34:	bf00      	nop
   81b36:	e7fd      	b.n	81b34 <xTaskCheckForTimeOut+0xc>
	configASSERT( pxTicksToWait );
   81b38:	b919      	cbnz	r1, 81b42 <xTaskCheckForTimeOut+0x1a>
   81b3a:	4b18      	ldr	r3, [pc, #96]	; (81b9c <xTaskCheckForTimeOut+0x74>)
   81b3c:	4798      	blx	r3
   81b3e:	bf00      	nop
   81b40:	e7fd      	b.n	81b3e <xTaskCheckForTimeOut+0x16>

	taskENTER_CRITICAL();
   81b42:	4b17      	ldr	r3, [pc, #92]	; (81ba0 <xTaskCheckForTimeOut+0x78>)
   81b44:	4798      	blx	r3
	{
		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
   81b46:	882b      	ldrh	r3, [r5, #0]
   81b48:	f64f 72ff 	movw	r2, #65535	; 0xffff
   81b4c:	4293      	cmp	r3, r2
   81b4e:	d01c      	beq.n	81b8a <xTaskCheckForTimeOut+0x62>
				xReturn = pdFALSE;
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( ( portTickType ) xTickCount >= ( portTickType ) pxTimeOut->xTimeOnEntering ) )
   81b50:	4a14      	ldr	r2, [pc, #80]	; (81ba4 <xTaskCheckForTimeOut+0x7c>)
   81b52:	6811      	ldr	r1, [r2, #0]
   81b54:	6822      	ldr	r2, [r4, #0]
   81b56:	428a      	cmp	r2, r1
   81b58:	d005      	beq.n	81b66 <xTaskCheckForTimeOut+0x3e>
   81b5a:	4a13      	ldr	r2, [pc, #76]	; (81ba8 <xTaskCheckForTimeOut+0x80>)
   81b5c:	8812      	ldrh	r2, [r2, #0]
   81b5e:	b292      	uxth	r2, r2
   81b60:	88a1      	ldrh	r1, [r4, #4]
   81b62:	4291      	cmp	r1, r2
   81b64:	d913      	bls.n	81b8e <xTaskCheckForTimeOut+0x66>
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
		}
		else if( ( ( portTickType ) ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering ) ) < ( portTickType ) *pxTicksToWait )
   81b66:	4a10      	ldr	r2, [pc, #64]	; (81ba8 <xTaskCheckForTimeOut+0x80>)
   81b68:	8811      	ldrh	r1, [r2, #0]
   81b6a:	88a2      	ldrh	r2, [r4, #4]
   81b6c:	1a89      	subs	r1, r1, r2
   81b6e:	b289      	uxth	r1, r1
   81b70:	428b      	cmp	r3, r1
   81b72:	d90e      	bls.n	81b92 <xTaskCheckForTimeOut+0x6a>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering );
   81b74:	490c      	ldr	r1, [pc, #48]	; (81ba8 <xTaskCheckForTimeOut+0x80>)
   81b76:	8809      	ldrh	r1, [r1, #0]
   81b78:	b289      	uxth	r1, r1
   81b7a:	1a52      	subs	r2, r2, r1
   81b7c:	4413      	add	r3, r2
   81b7e:	802b      	strh	r3, [r5, #0]
			vTaskSetTimeOutState( pxTimeOut );
   81b80:	4620      	mov	r0, r4
   81b82:	4b0a      	ldr	r3, [pc, #40]	; (81bac <xTaskCheckForTimeOut+0x84>)
   81b84:	4798      	blx	r3
			xReturn = pdFALSE;
   81b86:	2400      	movs	r4, #0
   81b88:	e004      	b.n	81b94 <xTaskCheckForTimeOut+0x6c>
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
			{
				xReturn = pdFALSE;
   81b8a:	2400      	movs	r4, #0
   81b8c:	e002      	b.n	81b94 <xTaskCheckForTimeOut+0x6c>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
   81b8e:	2401      	movs	r4, #1
   81b90:	e000      	b.n	81b94 <xTaskCheckForTimeOut+0x6c>
			vTaskSetTimeOutState( pxTimeOut );
			xReturn = pdFALSE;
		}
		else
		{
			xReturn = pdTRUE;
   81b92:	2401      	movs	r4, #1
		}
	}
	taskEXIT_CRITICAL();
   81b94:	4b06      	ldr	r3, [pc, #24]	; (81bb0 <xTaskCheckForTimeOut+0x88>)
   81b96:	4798      	blx	r3

	return xReturn;
}
   81b98:	4620      	mov	r0, r4
   81b9a:	bd38      	pop	{r3, r4, r5, pc}
   81b9c:	00080b01 	.word	0x00080b01
   81ba0:	00080b11 	.word	0x00080b11
   81ba4:	20078b40 	.word	0x20078b40
   81ba8:	20078b44 	.word	0x20078b44
   81bac:	00081b01 	.word	0x00081b01
   81bb0:	00080b31 	.word	0x00080b31

00081bb4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
	xMissedYield = pdTRUE;
   81bb4:	2201      	movs	r2, #1
   81bb6:	4b01      	ldr	r3, [pc, #4]	; (81bbc <vTaskMissedYield+0x8>)
   81bb8:	601a      	str	r2, [r3, #0]
   81bba:	4770      	bx	lr
   81bbc:	20078b64 	.word	0x20078b64

00081bc0 <xTaskGetCurrentTaskHandle>:
	xTaskHandle xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
   81bc0:	4b01      	ldr	r3, [pc, #4]	; (81bc8 <xTaskGetCurrentTaskHandle+0x8>)
   81bc2:	6818      	ldr	r0, [r3, #0]

		return xReturn;
	}
   81bc4:	4770      	bx	lr
   81bc6:	bf00      	nop
   81bc8:	20078b28 	.word	0x20078b28

00081bcc <xTaskGetSchedulerState>:

	portBASE_TYPE xTaskGetSchedulerState( void )
	{
	portBASE_TYPE xReturn;

		if( xSchedulerRunning == pdFALSE )
   81bcc:	4b05      	ldr	r3, [pc, #20]	; (81be4 <xTaskGetSchedulerState+0x18>)
   81bce:	681b      	ldr	r3, [r3, #0]
   81bd0:	b133      	cbz	r3, 81be0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
		}
		else
		{
			if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   81bd2:	4b05      	ldr	r3, [pc, #20]	; (81be8 <xTaskGetSchedulerState+0x1c>)
   81bd4:	681b      	ldr	r3, [r3, #0]
			{
				xReturn = taskSCHEDULER_RUNNING;
   81bd6:	2b00      	cmp	r3, #0
   81bd8:	bf14      	ite	ne
   81bda:	2002      	movne	r0, #2
   81bdc:	2001      	moveq	r0, #1
   81bde:	4770      	bx	lr
	{
	portBASE_TYPE xReturn;

		if( xSchedulerRunning == pdFALSE )
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
   81be0:	2000      	movs	r0, #0
				xReturn = taskSCHEDULER_SUSPENDED;
			}
		}

		return xReturn;
	}
   81be2:	4770      	bx	lr
   81be4:	20078a28 	.word	0x20078a28
   81be8:	20078b24 	.word	0x20078b24

00081bec <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( xTaskHandle * const pxMutexHolder )
	{
   81bec:	b538      	push	{r3, r4, r5, lr}
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
   81bee:	4604      	mov	r4, r0
   81bf0:	2800      	cmp	r0, #0
   81bf2:	d02e      	beq.n	81c52 <vTaskPriorityInherit+0x66>
		{
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
   81bf4:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   81bf6:	4a17      	ldr	r2, [pc, #92]	; (81c54 <vTaskPriorityInherit+0x68>)
   81bf8:	6812      	ldr	r2, [r2, #0]
   81bfa:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
   81bfc:	4293      	cmp	r3, r2
   81bfe:	d228      	bcs.n	81c52 <vTaskPriorityInherit+0x66>
			{
				/* Adjust the mutex holder state to account for its new priority. */
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxCurrentTCB->uxPriority );
   81c00:	4a14      	ldr	r2, [pc, #80]	; (81c54 <vTaskPriorityInherit+0x68>)
   81c02:	6812      	ldr	r2, [r2, #0]
   81c04:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
   81c06:	f1c2 020a 	rsb	r2, r2, #10
   81c0a:	8302      	strh	r2, [r0, #24]

				/* If the task being modified is in the ready state it will need to
				be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
   81c0c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   81c10:	4a11      	ldr	r2, [pc, #68]	; (81c58 <vTaskPriorityInherit+0x6c>)
   81c12:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   81c16:	6942      	ldr	r2, [r0, #20]
   81c18:	429a      	cmp	r2, r3
   81c1a:	d116      	bne.n	81c4a <vTaskPriorityInherit+0x5e>
				{
					if( uxListRemove( ( xListItem * ) &( pxTCB->xGenericListItem ) ) == 0 )
   81c1c:	1d05      	adds	r5, r0, #4
   81c1e:	4628      	mov	r0, r5
   81c20:	4b0e      	ldr	r3, [pc, #56]	; (81c5c <vTaskPriorityInherit+0x70>)
   81c22:	4798      	blx	r3
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
   81c24:	4b0b      	ldr	r3, [pc, #44]	; (81c54 <vTaskPriorityInherit+0x68>)
   81c26:	681b      	ldr	r3, [r3, #0]
   81c28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   81c2a:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyQueue( pxTCB );
   81c2c:	4a0c      	ldr	r2, [pc, #48]	; (81c60 <vTaskPriorityInherit+0x74>)
   81c2e:	6812      	ldr	r2, [r2, #0]
   81c30:	4293      	cmp	r3, r2
   81c32:	bf84      	itt	hi
   81c34:	4a0a      	ldrhi	r2, [pc, #40]	; (81c60 <vTaskPriorityInherit+0x74>)
   81c36:	6013      	strhi	r3, [r2, #0]
   81c38:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   81c3c:	4806      	ldr	r0, [pc, #24]	; (81c58 <vTaskPriorityInherit+0x6c>)
   81c3e:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   81c42:	4629      	mov	r1, r5
   81c44:	4b07      	ldr	r3, [pc, #28]	; (81c64 <vTaskPriorityInherit+0x78>)
   81c46:	4798      	blx	r3
   81c48:	bd38      	pop	{r3, r4, r5, pc}
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
   81c4a:	4b02      	ldr	r3, [pc, #8]	; (81c54 <vTaskPriorityInherit+0x68>)
   81c4c:	681b      	ldr	r3, [r3, #0]
   81c4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   81c50:	62c3      	str	r3, [r0, #44]	; 0x2c
   81c52:	bd38      	pop	{r3, r4, r5, pc}
   81c54:	20078b28 	.word	0x20078b28
   81c58:	20078a5c 	.word	0x20078a5c
   81c5c:	00080a79 	.word	0x00080a79
   81c60:	20078a58 	.word	0x20078a58
   81c64:	00080a19 	.word	0x00080a19

00081c68 <vTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinherit( xTaskHandle * const pxMutexHolder )
	{
   81c68:	b538      	push	{r3, r4, r5, lr}
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;

		if( pxMutexHolder != NULL )
   81c6a:	4604      	mov	r4, r0
   81c6c:	b1d0      	cbz	r0, 81ca4 <vTaskPriorityDisinherit+0x3c>
		{
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
   81c6e:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
   81c70:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   81c72:	429a      	cmp	r2, r3
   81c74:	d016      	beq.n	81ca4 <vTaskPriorityDisinherit+0x3c>
			{
				/* We must be the running task to be able to give the mutex back.
				Remove ourselves from the ready list we currently appear in. */
				if( uxListRemove( ( xListItem * ) &( pxTCB->xGenericListItem ) ) == 0 )
   81c76:	1d05      	adds	r5, r0, #4
   81c78:	4628      	mov	r0, r5
   81c7a:	4b0b      	ldr	r3, [pc, #44]	; (81ca8 <vTaskPriorityDisinherit+0x40>)
   81c7c:	4798      	blx	r3
				}

				/* Disinherit the priority before adding the task into the new
				ready list. */
				traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
				pxTCB->uxPriority = pxTCB->uxBasePriority;
   81c7e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   81c80:	62e3      	str	r3, [r4, #44]	; 0x2c
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxTCB->uxPriority );
   81c82:	f1c3 020a 	rsb	r2, r3, #10
   81c86:	8322      	strh	r2, [r4, #24]
				prvAddTaskToReadyQueue( pxTCB );
   81c88:	4a08      	ldr	r2, [pc, #32]	; (81cac <vTaskPriorityDisinherit+0x44>)
   81c8a:	6812      	ldr	r2, [r2, #0]
   81c8c:	4293      	cmp	r3, r2
   81c8e:	bf84      	itt	hi
   81c90:	4a06      	ldrhi	r2, [pc, #24]	; (81cac <vTaskPriorityDisinherit+0x44>)
   81c92:	6013      	strhi	r3, [r2, #0]
   81c94:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   81c98:	4805      	ldr	r0, [pc, #20]	; (81cb0 <vTaskPriorityDisinherit+0x48>)
   81c9a:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   81c9e:	4629      	mov	r1, r5
   81ca0:	4b04      	ldr	r3, [pc, #16]	; (81cb4 <vTaskPriorityDisinherit+0x4c>)
   81ca2:	4798      	blx	r3
   81ca4:	bd38      	pop	{r3, r4, r5, pc}
   81ca6:	bf00      	nop
   81ca8:	00080a79 	.word	0x00080a79
   81cac:	20078a58 	.word	0x20078a58
   81cb0:	20078a5c 	.word	0x20078a5c
   81cb4:	00080a19 	.word	0x00080a19

00081cb8 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static portBASE_TYPE prvInsertTimerInActiveList( xTIMER *pxTimer, portTickType xNextExpiryTime, portTickType xTimeNow, portTickType xCommandTime )
{
   81cb8:	b510      	push	{r4, lr}
   81cba:	4604      	mov	r4, r0
portBASE_TYPE xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
   81cbc:	8081      	strh	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   81cbe:	6120      	str	r0, [r4, #16]

	if( xNextExpiryTime <= xTimeNow )
   81cc0:	4291      	cmp	r1, r2
   81cc2:	d80b      	bhi.n	81cdc <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( portTickType ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
   81cc4:	1ad3      	subs	r3, r2, r3
   81cc6:	8b01      	ldrh	r1, [r0, #24]
   81cc8:	b29b      	uxth	r3, r3
   81cca:	4299      	cmp	r1, r3
   81ccc:	d911      	bls.n	81cf2 <prvInsertTimerInActiveList+0x3a>
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
   81cce:	4b0b      	ldr	r3, [pc, #44]	; (81cfc <prvInsertTimerInActiveList+0x44>)
   81cd0:	6818      	ldr	r0, [r3, #0]
   81cd2:	1d21      	adds	r1, r4, #4
   81cd4:	4b0a      	ldr	r3, [pc, #40]	; (81d00 <prvInsertTimerInActiveList+0x48>)
   81cd6:	4798      	blx	r3
}
/*-----------------------------------------------------------*/

static portBASE_TYPE prvInsertTimerInActiveList( xTIMER *pxTimer, portTickType xNextExpiryTime, portTickType xTimeNow, portTickType xCommandTime )
{
portBASE_TYPE xProcessTimerNow = pdFALSE;
   81cd8:	2000      	movs	r0, #0
   81cda:	bd10      	pop	{r4, pc}
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
   81cdc:	429a      	cmp	r2, r3
   81cde:	d201      	bcs.n	81ce4 <prvInsertTimerInActiveList+0x2c>
   81ce0:	4299      	cmp	r1, r3
   81ce2:	d208      	bcs.n	81cf6 <prvInsertTimerInActiveList+0x3e>
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   81ce4:	4b07      	ldr	r3, [pc, #28]	; (81d04 <prvInsertTimerInActiveList+0x4c>)
   81ce6:	6818      	ldr	r0, [r3, #0]
   81ce8:	1d21      	adds	r1, r4, #4
   81cea:	4b05      	ldr	r3, [pc, #20]	; (81d00 <prvInsertTimerInActiveList+0x48>)
   81cec:	4798      	blx	r3
}
/*-----------------------------------------------------------*/

static portBASE_TYPE prvInsertTimerInActiveList( xTIMER *pxTimer, portTickType xNextExpiryTime, portTickType xTimeNow, portTickType xCommandTime )
{
portBASE_TYPE xProcessTimerNow = pdFALSE;
   81cee:	2000      	movs	r0, #0
   81cf0:	bd10      	pop	{r4, pc}
		timer was issued, and the time the command was processed? */
		if( ( ( portTickType ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
   81cf2:	2001      	movs	r0, #1
   81cf4:	bd10      	pop	{r4, pc}
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
   81cf6:	2001      	movs	r0, #1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
   81cf8:	bd10      	pop	{r4, pc}
   81cfa:	bf00      	nop
   81cfc:	20078ba4 	.word	0x20078ba4
   81d00:	00080a35 	.word	0x00080a35
   81d04:	20078b70 	.word	0x20078b70

00081d08 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
   81d08:	b570      	push	{r4, r5, r6, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
   81d0a:	4b0d      	ldr	r3, [pc, #52]	; (81d40 <prvCheckForValidListAndQueue+0x38>)
   81d0c:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
   81d0e:	4b0d      	ldr	r3, [pc, #52]	; (81d44 <prvCheckForValidListAndQueue+0x3c>)
   81d10:	681b      	ldr	r3, [r3, #0]
   81d12:	b98b      	cbnz	r3, 81d38 <prvCheckForValidListAndQueue+0x30>
		{
			vListInitialise( &xActiveTimerList1 );
   81d14:	4d0c      	ldr	r5, [pc, #48]	; (81d48 <prvCheckForValidListAndQueue+0x40>)
   81d16:	4628      	mov	r0, r5
   81d18:	4e0c      	ldr	r6, [pc, #48]	; (81d4c <prvCheckForValidListAndQueue+0x44>)
   81d1a:	47b0      	blx	r6
			vListInitialise( &xActiveTimerList2 );
   81d1c:	4c0c      	ldr	r4, [pc, #48]	; (81d50 <prvCheckForValidListAndQueue+0x48>)
   81d1e:	4620      	mov	r0, r4
   81d20:	47b0      	blx	r6
			pxCurrentTimerList = &xActiveTimerList1;
   81d22:	4b0c      	ldr	r3, [pc, #48]	; (81d54 <prvCheckForValidListAndQueue+0x4c>)
   81d24:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
   81d26:	4b0c      	ldr	r3, [pc, #48]	; (81d58 <prvCheckForValidListAndQueue+0x50>)
   81d28:	601c      	str	r4, [r3, #0]
			xTimerQueue = xQueueCreate( ( unsigned portBASE_TYPE ) configTIMER_QUEUE_LENGTH, sizeof( xTIMER_MESSAGE ) );
   81d2a:	2005      	movs	r0, #5
   81d2c:	210c      	movs	r1, #12
   81d2e:	2200      	movs	r2, #0
   81d30:	4b0a      	ldr	r3, [pc, #40]	; (81d5c <prvCheckForValidListAndQueue+0x54>)
   81d32:	4798      	blx	r3
   81d34:	4b03      	ldr	r3, [pc, #12]	; (81d44 <prvCheckForValidListAndQueue+0x3c>)
   81d36:	6018      	str	r0, [r3, #0]
		}
	}
	taskEXIT_CRITICAL();
   81d38:	4b09      	ldr	r3, [pc, #36]	; (81d60 <prvCheckForValidListAndQueue+0x58>)
   81d3a:	4798      	blx	r3
   81d3c:	bd70      	pop	{r4, r5, r6, pc}
   81d3e:	bf00      	nop
   81d40:	00080b11 	.word	0x00080b11
   81d44:	20078ba0 	.word	0x20078ba0
   81d48:	20078b74 	.word	0x20078b74
   81d4c:	000809f9 	.word	0x000809f9
   81d50:	20078b88 	.word	0x20078b88
   81d54:	20078b70 	.word	0x20078b70
   81d58:	20078ba4 	.word	0x20078ba4
   81d5c:	00080ee9 	.word	0x00080ee9
   81d60:	00080b31 	.word	0x00080b31

00081d64 <xTimerCreateTimerTask>:
static void prvProcessTimerOrBlockTask( portTickType xNextExpireTime, portBASE_TYPE xListWasEmpty ) PRIVILEGED_FUNCTION;

/*-----------------------------------------------------------*/

portBASE_TYPE xTimerCreateTimerTask( void )
{
   81d64:	b510      	push	{r4, lr}
   81d66:	b084      	sub	sp, #16

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
   81d68:	4b0b      	ldr	r3, [pc, #44]	; (81d98 <xTimerCreateTimerTask+0x34>)
   81d6a:	4798      	blx	r3

	if( xTimerQueue != NULL )
   81d6c:	4b0b      	ldr	r3, [pc, #44]	; (81d9c <xTimerCreateTimerTask+0x38>)
   81d6e:	681b      	ldr	r3, [r3, #0]
   81d70:	b163      	cbz	r3, 81d8c <xTimerCreateTimerTask+0x28>
			xReturn = xTaskCreate( prvTimerTask, ( const signed char * ) "Tmr Svc", ( unsigned short ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( unsigned portBASE_TYPE ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, &xTimerTaskHandle );
		}
		#else
		{
			/* Create the timer task without storing its handle. */
			xReturn = xTaskCreate( prvTimerTask, ( const signed char * ) "Tmr Svc", ( unsigned short ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( unsigned portBASE_TYPE ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
   81d72:	2309      	movs	r3, #9
   81d74:	9300      	str	r3, [sp, #0]
   81d76:	2300      	movs	r3, #0
   81d78:	9301      	str	r3, [sp, #4]
   81d7a:	9302      	str	r3, [sp, #8]
   81d7c:	9303      	str	r3, [sp, #12]
   81d7e:	4808      	ldr	r0, [pc, #32]	; (81da0 <xTimerCreateTimerTask+0x3c>)
   81d80:	4908      	ldr	r1, [pc, #32]	; (81da4 <xTimerCreateTimerTask+0x40>)
   81d82:	f44f 7200 	mov.w	r2, #512	; 0x200
   81d86:	4c08      	ldr	r4, [pc, #32]	; (81da8 <xTimerCreateTimerTask+0x44>)
   81d88:	47a0      	blx	r4
		}
		#endif
	}

	configASSERT( xReturn );
   81d8a:	b918      	cbnz	r0, 81d94 <xTimerCreateTimerTask+0x30>
   81d8c:	4b07      	ldr	r3, [pc, #28]	; (81dac <xTimerCreateTimerTask+0x48>)
   81d8e:	4798      	blx	r3
   81d90:	bf00      	nop
   81d92:	e7fd      	b.n	81d90 <xTimerCreateTimerTask+0x2c>
	return xReturn;
}
   81d94:	b004      	add	sp, #16
   81d96:	bd10      	pop	{r4, pc}
   81d98:	00081d09 	.word	0x00081d09
   81d9c:	20078ba0 	.word	0x20078ba0
   81da0:	00081ec5 	.word	0x00081ec5
   81da4:	00086460 	.word	0x00086460
   81da8:	00081301 	.word	0x00081301
   81dac:	00080b01 	.word	0x00080b01

00081db0 <xTimerGenericCommand>:
	return ( xTimerHandle ) pxNewTimer;
}
/*-----------------------------------------------------------*/

portBASE_TYPE xTimerGenericCommand( xTimerHandle xTimer, portBASE_TYPE xCommandID, portTickType xOptionalValue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portTickType xBlockTime )
{
   81db0:	b510      	push	{r4, lr}
   81db2:	b084      	sub	sp, #16
portBASE_TYPE xReturn = pdFAIL;
xTIMER_MESSAGE xMessage;

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
   81db4:	4c10      	ldr	r4, [pc, #64]	; (81df8 <xTimerGenericCommand+0x48>)
   81db6:	6824      	ldr	r4, [r4, #0]
   81db8:	b1d4      	cbz	r4, 81df0 <xTimerGenericCommand+0x40>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
   81dba:	9101      	str	r1, [sp, #4]
		xMessage.xMessageValue = xOptionalValue;
   81dbc:	f8ad 2008 	strh.w	r2, [sp, #8]
		xMessage.pxTimer = ( xTIMER * ) xTimer;
   81dc0:	9003      	str	r0, [sp, #12]

		if( pxHigherPriorityTaskWoken == NULL )
   81dc2:	b973      	cbnz	r3, 81de2 <xTimerGenericCommand+0x32>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
   81dc4:	4b0d      	ldr	r3, [pc, #52]	; (81dfc <xTimerGenericCommand+0x4c>)
   81dc6:	4798      	blx	r3
   81dc8:	2801      	cmp	r0, #1
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xBlockTime );
   81dca:	4b0b      	ldr	r3, [pc, #44]	; (81df8 <xTimerGenericCommand+0x48>)
   81dcc:	6818      	ldr	r0, [r3, #0]
   81dce:	a901      	add	r1, sp, #4
   81dd0:	bf07      	ittee	eq
   81dd2:	f8bd 2018 	ldrheq.w	r2, [sp, #24]
   81dd6:	2300      	moveq	r3, #0
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
   81dd8:	2200      	movne	r2, #0
   81dda:	4613      	movne	r3, r2
   81ddc:	4c08      	ldr	r4, [pc, #32]	; (81e00 <xTimerGenericCommand+0x50>)
   81dde:	47a0      	blx	r4
   81de0:	e007      	b.n	81df2 <xTimerGenericCommand+0x42>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
   81de2:	4620      	mov	r0, r4
   81de4:	a901      	add	r1, sp, #4
   81de6:	461a      	mov	r2, r3
   81de8:	2300      	movs	r3, #0
   81dea:	4c06      	ldr	r4, [pc, #24]	; (81e04 <xTimerGenericCommand+0x54>)
   81dec:	47a0      	blx	r4
   81dee:	e000      	b.n	81df2 <xTimerGenericCommand+0x42>
}
/*-----------------------------------------------------------*/

portBASE_TYPE xTimerGenericCommand( xTimerHandle xTimer, portBASE_TYPE xCommandID, portTickType xOptionalValue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portTickType xBlockTime )
{
portBASE_TYPE xReturn = pdFAIL;
   81df0:	2000      	movs	r0, #0

		traceTIMER_COMMAND_SEND( xTimer, xCommandID, xOptionalValue, xReturn );
	}

	return xReturn;
}
   81df2:	b004      	add	sp, #16
   81df4:	bd10      	pop	{r4, pc}
   81df6:	bf00      	nop
   81df8:	20078ba0 	.word	0x20078ba0
   81dfc:	00081bcd 	.word	0x00081bcd
   81e00:	00080f41 	.word	0x00080f41
   81e04:	00081065 	.word	0x00081065

00081e08 <prvSampleTimeNow>:
	return xNextExpireTime;
}
/*-----------------------------------------------------------*/

static portTickType prvSampleTimeNow( portBASE_TYPE *pxTimerListsWereSwitched )
{
   81e08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   81e0c:	b082      	sub	sp, #8
   81e0e:	4681      	mov	r9, r0
portTickType xTimeNow;
PRIVILEGED_DATA static portTickType xLastTime = ( portTickType ) 0U;

	xTimeNow = xTaskGetTickCount();
   81e10:	4b24      	ldr	r3, [pc, #144]	; (81ea4 <prvSampleTimeNow+0x9c>)
   81e12:	4798      	blx	r3
   81e14:	4680      	mov	r8, r0

	if( xTimeNow < xLastTime )
   81e16:	4b24      	ldr	r3, [pc, #144]	; (81ea8 <prvSampleTimeNow+0xa0>)
   81e18:	881b      	ldrh	r3, [r3, #0]
   81e1a:	4283      	cmp	r3, r0
   81e1c:	d937      	bls.n	81e8e <prvSampleTimeNow+0x86>

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
   81e1e:	4e23      	ldr	r6, [pc, #140]	; (81eac <prvSampleTimeNow+0xa4>)
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );

		/* Remove the timer from the list. */
		pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
		uxListRemove( &( pxTimer->xTimerListItem ) );
   81e20:	4f23      	ldr	r7, [pc, #140]	; (81eb0 <prvSampleTimeNow+0xa8>)
   81e22:	e027      	b.n	81e74 <prvSampleTimeNow+0x6c>
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   81e24:	68da      	ldr	r2, [r3, #12]
   81e26:	f8b2 a000 	ldrh.w	sl, [r2]
   81e2a:	fa1f fa8a 	uxth.w	sl, sl

		/* Remove the timer from the list. */
		pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
   81e2e:	68db      	ldr	r3, [r3, #12]
   81e30:	68dc      	ldr	r4, [r3, #12]
		uxListRemove( &( pxTimer->xTimerListItem ) );
   81e32:	1d25      	adds	r5, r4, #4
   81e34:	4628      	mov	r0, r5
   81e36:	47b8      	blx	r7

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
   81e38:	6a63      	ldr	r3, [r4, #36]	; 0x24
   81e3a:	4620      	mov	r0, r4
   81e3c:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
   81e3e:	69e3      	ldr	r3, [r4, #28]
   81e40:	2b01      	cmp	r3, #1
   81e42:	d117      	bne.n	81e74 <prvSampleTimeNow+0x6c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
   81e44:	8b23      	ldrh	r3, [r4, #24]
   81e46:	4453      	add	r3, sl
   81e48:	b29b      	uxth	r3, r3
			if( xReloadTime > xNextExpireTime )
   81e4a:	4553      	cmp	r3, sl
   81e4c:	d906      	bls.n	81e5c <prvSampleTimeNow+0x54>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
   81e4e:	80a3      	strh	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   81e50:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   81e52:	6830      	ldr	r0, [r6, #0]
   81e54:	4629      	mov	r1, r5
   81e56:	4b17      	ldr	r3, [pc, #92]	; (81eb4 <prvSampleTimeNow+0xac>)
   81e58:	4798      	blx	r3
   81e5a:	e00b      	b.n	81e74 <prvSampleTimeNow+0x6c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xNextExpireTime, NULL, tmrNO_DELAY );
   81e5c:	2300      	movs	r3, #0
   81e5e:	9300      	str	r3, [sp, #0]
   81e60:	4620      	mov	r0, r4
   81e62:	4619      	mov	r1, r3
   81e64:	4652      	mov	r2, sl
   81e66:	4c14      	ldr	r4, [pc, #80]	; (81eb8 <prvSampleTimeNow+0xb0>)
   81e68:	47a0      	blx	r4
				configASSERT( xResult );
   81e6a:	b918      	cbnz	r0, 81e74 <prvSampleTimeNow+0x6c>
   81e6c:	4b13      	ldr	r3, [pc, #76]	; (81ebc <prvSampleTimeNow+0xb4>)
   81e6e:	4798      	blx	r3
   81e70:	bf00      	nop
   81e72:	e7fd      	b.n	81e70 <prvSampleTimeNow+0x68>

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
   81e74:	6833      	ldr	r3, [r6, #0]
   81e76:	681a      	ldr	r2, [r3, #0]
   81e78:	2a00      	cmp	r2, #0
   81e7a:	d1d3      	bne.n	81e24 <prvSampleTimeNow+0x1c>
			}
		}
	}

	pxTemp = pxCurrentTimerList;
	pxCurrentTimerList = pxOverflowTimerList;
   81e7c:	4a10      	ldr	r2, [pc, #64]	; (81ec0 <prvSampleTimeNow+0xb8>)
   81e7e:	6811      	ldr	r1, [r2, #0]
   81e80:	480a      	ldr	r0, [pc, #40]	; (81eac <prvSampleTimeNow+0xa4>)
   81e82:	6001      	str	r1, [r0, #0]
	pxOverflowTimerList = pxTemp;
   81e84:	6013      	str	r3, [r2, #0]
	xTimeNow = xTaskGetTickCount();

	if( xTimeNow < xLastTime )
	{
		prvSwitchTimerLists( xLastTime );
		*pxTimerListsWereSwitched = pdTRUE;
   81e86:	2301      	movs	r3, #1
   81e88:	f8c9 3000 	str.w	r3, [r9]
   81e8c:	e002      	b.n	81e94 <prvSampleTimeNow+0x8c>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
   81e8e:	2300      	movs	r3, #0
   81e90:	f8c9 3000 	str.w	r3, [r9]
	}

	xLastTime = xTimeNow;
   81e94:	4b04      	ldr	r3, [pc, #16]	; (81ea8 <prvSampleTimeNow+0xa0>)
   81e96:	f8a3 8000 	strh.w	r8, [r3]

	return xTimeNow;
}
   81e9a:	4640      	mov	r0, r8
   81e9c:	b002      	add	sp, #8
   81e9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   81ea2:	bf00      	nop
   81ea4:	00081585 	.word	0x00081585
   81ea8:	20078b9c 	.word	0x20078b9c
   81eac:	20078b70 	.word	0x20078b70
   81eb0:	00080a79 	.word	0x00080a79
   81eb4:	00080a35 	.word	0x00080a35
   81eb8:	00081db1 	.word	0x00081db1
   81ebc:	00080b01 	.word	0x00080b01
   81ec0:	20078ba4 	.word	0x20078ba4

00081ec4 <prvTimerTask>:
	pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
}
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
   81ec4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   81ec8:	b087      	sub	sp, #28
				time has not been reached yet.  This task should therefore
				block to wait for the next expire time or a command to be
				received - whichever comes first.  The following line cannot
				be reached unless xNextExpireTime > xTimeNow, except in the
				case when the current timer list is empty. */
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
   81eca:	4d51      	ldr	r5, [pc, #324]	; (82010 <prvTimerTask+0x14c>)
portBASE_TYPE xResult;

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
	uxListRemove( &( pxTimer->xTimerListItem ) );
   81ecc:	f8df 8170 	ldr.w	r8, [pc, #368]	; 82040 <prvTimerTask+0x17c>
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
   81ed0:	4b50      	ldr	r3, [pc, #320]	; (82014 <prvTimerTask+0x150>)
   81ed2:	681b      	ldr	r3, [r3, #0]
   81ed4:	681a      	ldr	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
   81ed6:	2a00      	cmp	r2, #0
   81ed8:	f000 8090 	beq.w	81ffc <prvTimerTask+0x138>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   81edc:	68db      	ldr	r3, [r3, #12]
   81ede:	881e      	ldrh	r6, [r3, #0]
   81ee0:	b2b6      	uxth	r6, r6
static void prvProcessTimerOrBlockTask( portTickType xNextExpireTime, portBASE_TYPE xListWasEmpty )
{
portTickType xTimeNow;
portBASE_TYPE xTimerListsWereSwitched;

	vTaskSuspendAll();
   81ee2:	4b4d      	ldr	r3, [pc, #308]	; (82018 <prvTimerTask+0x154>)
   81ee4:	4798      	blx	r3
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampelTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   81ee6:	a803      	add	r0, sp, #12
   81ee8:	4b4c      	ldr	r3, [pc, #304]	; (8201c <prvTimerTask+0x158>)
   81eea:	4798      	blx	r3
   81eec:	4607      	mov	r7, r0
		if( xTimerListsWereSwitched == pdFALSE )
   81eee:	9b03      	ldr	r3, [sp, #12]
   81ef0:	2b00      	cmp	r3, #0
   81ef2:	d132      	bne.n	81f5a <prvTimerTask+0x96>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
   81ef4:	4286      	cmp	r6, r0
   81ef6:	d825      	bhi.n	81f44 <prvTimerTask+0x80>
			{
				xTaskResumeAll();
   81ef8:	4b49      	ldr	r3, [pc, #292]	; (82020 <prvTimerTask+0x15c>)
   81efa:	4798      	blx	r3
xTIMER *pxTimer;
portBASE_TYPE xResult;

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
   81efc:	4b45      	ldr	r3, [pc, #276]	; (82014 <prvTimerTask+0x150>)
   81efe:	681b      	ldr	r3, [r3, #0]
   81f00:	68db      	ldr	r3, [r3, #12]
   81f02:	68dc      	ldr	r4, [r3, #12]
	uxListRemove( &( pxTimer->xTimerListItem ) );
   81f04:	1d20      	adds	r0, r4, #4
   81f06:	47c0      	blx	r8
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
   81f08:	69e3      	ldr	r3, [r4, #28]
   81f0a:	2b01      	cmp	r3, #1
   81f0c:	d115      	bne.n	81f3a <prvTimerTask+0x76>
		a time relative to anything other than the current time.  It
		will therefore be inserted into the correct list relative to
		the time this task thinks it is now, even if a command to
		switch lists due to a tick count overflow is already waiting in
		the timer queue. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
   81f0e:	8b21      	ldrh	r1, [r4, #24]
   81f10:	4431      	add	r1, r6
   81f12:	4620      	mov	r0, r4
   81f14:	b289      	uxth	r1, r1
   81f16:	463a      	mov	r2, r7
   81f18:	4633      	mov	r3, r6
   81f1a:	4f42      	ldr	r7, [pc, #264]	; (82024 <prvTimerTask+0x160>)
   81f1c:	47b8      	blx	r7
   81f1e:	2801      	cmp	r0, #1
   81f20:	d10b      	bne.n	81f3a <prvTimerTask+0x76>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xNextExpireTime, NULL, tmrNO_DELAY );
   81f22:	2300      	movs	r3, #0
   81f24:	9300      	str	r3, [sp, #0]
   81f26:	4620      	mov	r0, r4
   81f28:	4619      	mov	r1, r3
   81f2a:	4632      	mov	r2, r6
   81f2c:	4e3e      	ldr	r6, [pc, #248]	; (82028 <prvTimerTask+0x164>)
   81f2e:	47b0      	blx	r6
			configASSERT( xResult );
   81f30:	b918      	cbnz	r0, 81f3a <prvTimerTask+0x76>
   81f32:	4b3e      	ldr	r3, [pc, #248]	; (8202c <prvTimerTask+0x168>)
   81f34:	4798      	blx	r3
   81f36:	bf00      	nop
   81f38:	e7fd      	b.n	81f36 <prvTimerTask+0x72>
			( void ) xResult;
		}
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
   81f3a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   81f3c:	4620      	mov	r0, r4
   81f3e:	4798      	blx	r3
   81f40:	e00d      	b.n	81f5e <prvTimerTask+0x9a>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( portTickType ) 0U;
   81f42:	2600      	movs	r6, #0
				time has not been reached yet.  This task should therefore
				block to wait for the next expire time or a command to be
				received - whichever comes first.  The following line cannot
				be reached unless xNextExpireTime > xTimeNow, except in the
				case when the current timer list is empty. */
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
   81f44:	1bf1      	subs	r1, r6, r7
   81f46:	6828      	ldr	r0, [r5, #0]
   81f48:	b289      	uxth	r1, r1
   81f4a:	4b39      	ldr	r3, [pc, #228]	; (82030 <prvTimerTask+0x16c>)
   81f4c:	4798      	blx	r3

				if( xTaskResumeAll() == pdFALSE )
   81f4e:	4b34      	ldr	r3, [pc, #208]	; (82020 <prvTimerTask+0x15c>)
   81f50:	4798      	blx	r3
   81f52:	b920      	cbnz	r0, 81f5e <prvTimerTask+0x9a>
				{
					/* Yield to wait for either a command to arrive, or the block time
					to expire.  If a command arrived between the critical section being
					exited and this yield then the yield will not cause the task
					to block. */
					portYIELD_WITHIN_API();
   81f54:	4b37      	ldr	r3, [pc, #220]	; (82034 <prvTimerTask+0x170>)
   81f56:	4798      	blx	r3
   81f58:	e001      	b.n	81f5e <prvTimerTask+0x9a>
				}
			}
		}
		else
		{
			xTaskResumeAll();
   81f5a:	4b31      	ldr	r3, [pc, #196]	; (82020 <prvTimerTask+0x15c>)
   81f5c:	4798      	blx	r3
portBASE_TYPE xTimerListsWereSwitched, xResult;
portTickType xTimeNow;

	/* In this case the xTimerListsWereSwitched parameter is not used, but it
	must be present in the function call. */
	xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   81f5e:	a802      	add	r0, sp, #8
   81f60:	4b2e      	ldr	r3, [pc, #184]	; (8201c <prvTimerTask+0x158>)
   81f62:	4798      	blx	r3
   81f64:	4607      	mov	r7, r0

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
   81f66:	4e34      	ldr	r6, [pc, #208]	; (82038 <prvTimerTask+0x174>)
				break;

			case tmrCOMMAND_CHANGE_PERIOD :
				pxTimer->xTimerPeriodInTicks = xMessage.xMessageValue;
				configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
				prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
   81f68:	f8df 90b8 	ldr.w	r9, [pc, #184]	; 82024 <prvTimerTask+0x160>
   81f6c:	e03e      	b.n	81fec <prvTimerTask+0x128>
	must be present in the function call. */
	xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
	{
		pxTimer = xMessage.pxTimer;
   81f6e:	9c05      	ldr	r4, [sp, #20]

		/* Is the timer already in a list of active timers?  When the command
		is trmCOMMAND_PROCESS_TIMER_OVERFLOW, the timer will be NULL as the
		command is to the task rather than to an individual timer. */
		if( pxTimer != NULL )
   81f70:	b11c      	cbz	r4, 81f7a <prvTimerTask+0xb6>
		{
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
   81f72:	6961      	ldr	r1, [r4, #20]
   81f74:	b109      	cbz	r1, 81f7a <prvTimerTask+0xb6>
			{
				/* The timer is in a list, remove it. */
				uxListRemove( &( pxTimer->xTimerListItem ) );
   81f76:	1d20      	adds	r0, r4, #4
   81f78:	47c0      	blx	r8
			}
		}

		traceTIMER_COMMAND_RECEIVED( pxTimer, xMessage.xMessageID, xMessage.xMessageValue );

		switch( xMessage.xMessageID )
   81f7a:	9903      	ldr	r1, [sp, #12]
   81f7c:	2902      	cmp	r1, #2
   81f7e:	d023      	beq.n	81fc8 <prvTimerTask+0x104>
   81f80:	2903      	cmp	r1, #3
   81f82:	d030      	beq.n	81fe6 <prvTimerTask+0x122>
   81f84:	2900      	cmp	r1, #0
   81f86:	d131      	bne.n	81fec <prvTimerTask+0x128>
		{
			case tmrCOMMAND_START :
				/* Start or restart a timer. */
				if( prvInsertTimerInActiveList( pxTimer,  xMessage.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.xMessageValue ) == pdTRUE )
   81f88:	f8bd 3010 	ldrh.w	r3, [sp, #16]
   81f8c:	8b21      	ldrh	r1, [r4, #24]
   81f8e:	4419      	add	r1, r3
   81f90:	4620      	mov	r0, r4
   81f92:	b289      	uxth	r1, r1
   81f94:	463a      	mov	r2, r7
   81f96:	47c8      	blx	r9
   81f98:	2801      	cmp	r0, #1
   81f9a:	d127      	bne.n	81fec <prvTimerTask+0x128>
				{
					/* The timer expired before it was added to the active timer
					list.  Process it now. */
					pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
   81f9c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   81f9e:	4620      	mov	r0, r4
   81fa0:	4798      	blx	r3

					if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
   81fa2:	69e3      	ldr	r3, [r4, #28]
   81fa4:	2b01      	cmp	r3, #1
   81fa6:	d121      	bne.n	81fec <prvTimerTask+0x128>
					{
						xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xMessage.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
   81fa8:	8b22      	ldrh	r2, [r4, #24]
   81faa:	f8bd 3010 	ldrh.w	r3, [sp, #16]
   81fae:	441a      	add	r2, r3
   81fb0:	2300      	movs	r3, #0
   81fb2:	9300      	str	r3, [sp, #0]
   81fb4:	4620      	mov	r0, r4
   81fb6:	4619      	mov	r1, r3
   81fb8:	b292      	uxth	r2, r2
   81fba:	4c1b      	ldr	r4, [pc, #108]	; (82028 <prvTimerTask+0x164>)
   81fbc:	47a0      	blx	r4
						configASSERT( xResult );
   81fbe:	b9a8      	cbnz	r0, 81fec <prvTimerTask+0x128>
   81fc0:	4b1a      	ldr	r3, [pc, #104]	; (8202c <prvTimerTask+0x168>)
   81fc2:	4798      	blx	r3
   81fc4:	bf00      	nop
   81fc6:	e7fd      	b.n	81fc4 <prvTimerTask+0x100>
				/* The timer has already been removed from the active list.
				There is nothing to do here. */
				break;

			case tmrCOMMAND_CHANGE_PERIOD :
				pxTimer->xTimerPeriodInTicks = xMessage.xMessageValue;
   81fc8:	f8bd 3010 	ldrh.w	r3, [sp, #16]
   81fcc:	8323      	strh	r3, [r4, #24]
				configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
   81fce:	b91b      	cbnz	r3, 81fd8 <prvTimerTask+0x114>
   81fd0:	4b16      	ldr	r3, [pc, #88]	; (8202c <prvTimerTask+0x168>)
   81fd2:	4798      	blx	r3
   81fd4:	bf00      	nop
   81fd6:	e7fd      	b.n	81fd4 <prvTimerTask+0x110>
				prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
   81fd8:	18f9      	adds	r1, r7, r3
   81fda:	4620      	mov	r0, r4
   81fdc:	b289      	uxth	r1, r1
   81fde:	463a      	mov	r2, r7
   81fe0:	463b      	mov	r3, r7
   81fe2:	47c8      	blx	r9
   81fe4:	e002      	b.n	81fec <prvTimerTask+0x128>
				break;

			case tmrCOMMAND_DELETE :
				/* The timer has already been removed from the active list,
				just free up the memory. */
				vPortFree( pxTimer );
   81fe6:	4620      	mov	r0, r4
   81fe8:	4b14      	ldr	r3, [pc, #80]	; (8203c <prvTimerTask+0x178>)
   81fea:	4798      	blx	r3

	/* In this case the xTimerListsWereSwitched parameter is not used, but it
	must be present in the function call. */
	xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
   81fec:	6828      	ldr	r0, [r5, #0]
   81fee:	a903      	add	r1, sp, #12
   81ff0:	2200      	movs	r2, #0
   81ff2:	4613      	mov	r3, r2
   81ff4:	47b0      	blx	r6
   81ff6:	2800      	cmp	r0, #0
   81ff8:	d1b9      	bne.n	81f6e <prvTimerTask+0xaa>
   81ffa:	e769      	b.n	81ed0 <prvTimerTask+0xc>
static void prvProcessTimerOrBlockTask( portTickType xNextExpireTime, portBASE_TYPE xListWasEmpty )
{
portTickType xTimeNow;
portBASE_TYPE xTimerListsWereSwitched;

	vTaskSuspendAll();
   81ffc:	4b06      	ldr	r3, [pc, #24]	; (82018 <prvTimerTask+0x154>)
   81ffe:	4798      	blx	r3
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampelTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   82000:	a803      	add	r0, sp, #12
   82002:	4b06      	ldr	r3, [pc, #24]	; (8201c <prvTimerTask+0x158>)
   82004:	4798      	blx	r3
   82006:	4607      	mov	r7, r0
		if( xTimerListsWereSwitched == pdFALSE )
   82008:	9b03      	ldr	r3, [sp, #12]
   8200a:	2b00      	cmp	r3, #0
   8200c:	d099      	beq.n	81f42 <prvTimerTask+0x7e>
   8200e:	e7a4      	b.n	81f5a <prvTimerTask+0x96>
   82010:	20078ba0 	.word	0x20078ba0
   82014:	20078b70 	.word	0x20078b70
   82018:	00081575 	.word	0x00081575
   8201c:	00081e09 	.word	0x00081e09
   82020:	000816d1 	.word	0x000816d1
   82024:	00081cb9 	.word	0x00081cb9
   82028:	00081db1 	.word	0x00081db1
   8202c:	00080b01 	.word	0x00080b01
   82030:	00081259 	.word	0x00081259
   82034:	00080af1 	.word	0x00080af1
   82038:	000810f5 	.word	0x000810f5
   8203c:	00080d21 	.word	0x00080d21
   82040:	00080a79 	.word	0x00080a79

00082044 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len);

int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
   82044:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   82048:	460e      	mov	r6, r1
   8204a:	4615      	mov	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
   8204c:	3801      	subs	r0, #1
   8204e:	2802      	cmp	r0, #2
   82050:	d80f      	bhi.n	82072 <_write+0x2e>
		return -1;
	}

	for (; len != 0; --len) {
   82052:	b192      	cbz	r2, 8207a <_write+0x36>
   82054:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
   82056:	f8df 803c 	ldr.w	r8, [pc, #60]	; 82094 <_write+0x50>
   8205a:	4f0d      	ldr	r7, [pc, #52]	; (82090 <_write+0x4c>)
   8205c:	f8d8 0000 	ldr.w	r0, [r8]
   82060:	5d31      	ldrb	r1, [r6, r4]
   82062:	683b      	ldr	r3, [r7, #0]
   82064:	4798      	blx	r3
   82066:	2800      	cmp	r0, #0
   82068:	db0a      	blt.n	82080 <_write+0x3c>
			return -1;
		}
		++nChars;
   8206a:	3401      	adds	r4, #1

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
   8206c:	42a5      	cmp	r5, r4
   8206e:	d1f5      	bne.n	8205c <_write+0x18>
   82070:	e00a      	b.n	82088 <_write+0x44>
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
   82072:	f04f 30ff 	mov.w	r0, #4294967295
   82076:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}

	for (; len != 0; --len) {
   8207a:	2000      	movs	r0, #0
   8207c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
   82080:	f04f 30ff 	mov.w	r0, #4294967295
   82084:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		}
		++nChars;
   82088:	4620      	mov	r0, r4
	}
	return nChars;
}
   8208a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8208e:	bf00      	nop
   82090:	20078c7c 	.word	0x20078c7c
   82094:	20078c80 	.word	0x20078c80

00082098 <pwm_clocks_generate>:
 *
 * \retval Return the value to be set in the PWM Clock Register (PWM Mode Register for
 * SAM3N/SAM4N/SAM4C/SAM4CP/SAM4CM) or PWM_INVALID_ARGUMENT if the configuration cannot be met.
 */
static uint32_t pwm_clocks_generate(uint32_t ul_frequency, uint32_t ul_mck)
{
   82098:	b4f0      	push	{r4, r5, r6, r7}
   8209a:	b08c      	sub	sp, #48	; 0x30
   8209c:	4607      	mov	r7, r0
   8209e:	460e      	mov	r6, r1
	uint32_t ul_divisors[PWM_CLOCK_PRE_MAX] =
   820a0:	ac01      	add	r4, sp, #4
   820a2:	4d12      	ldr	r5, [pc, #72]	; (820ec <pwm_clocks_generate+0x54>)
   820a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   820a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   820a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   820aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   820ac:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   820b0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
   820b4:	466a      	mov	r2, sp
			{1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024 };
	uint32_t ul_pre = 0;
   820b6:	2300      	movs	r3, #0
	uint32_t ul_div;

	/* Find prescaler and divisor values */
	do {
		ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
   820b8:	f852 4f04 	ldr.w	r4, [r2, #4]!
   820bc:	fbb6 f4f4 	udiv	r4, r6, r4
   820c0:	fbb4 f4f7 	udiv	r4, r4, r7
		if (ul_div <= PWM_CLOCK_DIV_MAX) {
   820c4:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
   820c8:	d903      	bls.n	820d2 <pwm_clocks_generate+0x3a>
			break;
		}
		ul_pre++;
   820ca:	3301      	adds	r3, #1
	} while (ul_pre < PWM_CLOCK_PRE_MAX);
   820cc:	2b0b      	cmp	r3, #11
   820ce:	d1f3      	bne.n	820b8 <pwm_clocks_generate+0x20>
   820d0:	e004      	b.n	820dc <pwm_clocks_generate+0x44>

	/* Return result */
	if (ul_pre < PWM_CLOCK_PRE_MAX) {
   820d2:	2b0a      	cmp	r3, #10
   820d4:	d805      	bhi.n	820e2 <pwm_clocks_generate+0x4a>
		return ul_div | (ul_pre << 8);
   820d6:	ea44 2003 	orr.w	r0, r4, r3, lsl #8
   820da:	e004      	b.n	820e6 <pwm_clocks_generate+0x4e>
	} else {
		return PWM_INVALID_ARGUMENT;
   820dc:	f64f 70ff 	movw	r0, #65535	; 0xffff
   820e0:	e001      	b.n	820e6 <pwm_clocks_generate+0x4e>
   820e2:	f64f 70ff 	movw	r0, #65535	; 0xffff
	}
}
   820e6:	b00c      	add	sp, #48	; 0x30
   820e8:	bcf0      	pop	{r4, r5, r6, r7}
   820ea:	4770      	bx	lr
   820ec:	00086468 	.word	0x00086468

000820f0 <pwm_init>:
 * \param clock_config PWM clock configuration.
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_init(Pwm *p_pwm, pwm_clock_t *clock_config)
{
   820f0:	b570      	push	{r4, r5, r6, lr}
   820f2:	4606      	mov	r6, r0
   820f4:	460c      	mov	r4, r1
	uint32_t clock = 0;
	uint32_t result;

	/* Clock A */
	if (clock_config->ul_clka != 0) {
   820f6:	6808      	ldr	r0, [r1, #0]
   820f8:	b140      	cbz	r0, 8210c <pwm_init+0x1c>
		result = pwm_clocks_generate(clock_config->ul_clka, clock_config->ul_mck);
   820fa:	6889      	ldr	r1, [r1, #8]
   820fc:	4b0b      	ldr	r3, [pc, #44]	; (8212c <pwm_init+0x3c>)
   820fe:	4798      	blx	r3
   82100:	4605      	mov	r5, r0
		if (result == PWM_INVALID_ARGUMENT) {
   82102:	f64f 73ff 	movw	r3, #65535	; 0xffff
   82106:	4298      	cmp	r0, r3
   82108:	d101      	bne.n	8210e <pwm_init+0x1e>
   8210a:	e00e      	b.n	8212a <pwm_init+0x3a>
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_init(Pwm *p_pwm, pwm_clock_t *clock_config)
{
	uint32_t clock = 0;
   8210c:	2500      	movs	r5, #0

		clock = result;
	}

	/* Clock B */
	if (clock_config->ul_clkb != 0) {
   8210e:	6860      	ldr	r0, [r4, #4]
   82110:	b140      	cbz	r0, 82124 <pwm_init+0x34>
		result = pwm_clocks_generate(clock_config->ul_clkb, clock_config->ul_mck);
   82112:	68a1      	ldr	r1, [r4, #8]
   82114:	4b05      	ldr	r3, [pc, #20]	; (8212c <pwm_init+0x3c>)
   82116:	4798      	blx	r3

		if (result == PWM_INVALID_ARGUMENT) {
   82118:	f64f 73ff 	movw	r3, #65535	; 0xffff
   8211c:	4298      	cmp	r0, r3
   8211e:	d004      	beq.n	8212a <pwm_init+0x3a>
			return result;
		}

		clock |= (result << 16);
   82120:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
	}
#if (SAM3N || SAM4N || SAM4C || SAM4CP || SAM4CM)
	p_pwm->PWM_MR = clock;
#else
	p_pwm->PWM_CLK = clock;
   82124:	6035      	str	r5, [r6, #0]
#endif
	return 0;
   82126:	2000      	movs	r0, #0
   82128:	bd70      	pop	{r4, r5, r6, pc}
}
   8212a:	bd70      	pop	{r4, r5, r6, pc}
   8212c:	00082099 	.word	0x00082099

00082130 <pwm_channel_init>:
 * \param p_channel Configurations of the specified PWM channel.
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_channel_init(Pwm *p_pwm, pwm_channel_t *p_channel)
{
   82130:	b470      	push	{r4, r5, r6}
	uint32_t tmp_reg = 0;
	uint32_t ch_num = p_channel->channel;
   82132:	680b      	ldr	r3, [r1, #0]

	/* Channel Mode/Clock Register */
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
			(p_channel->polarity << 9) |
   82134:	8a8c      	ldrh	r4, [r1, #20]
{
	uint32_t tmp_reg = 0;
	uint32_t ch_num = p_channel->channel;

	/* Channel Mode/Clock Register */
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
   82136:	684a      	ldr	r2, [r1, #4]
   82138:	f002 020f 	and.w	r2, r2, #15
   8213c:	4314      	orrs	r4, r2
			(p_channel->polarity << 9) |
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E || SAMV70 || SAMV71 || SAME70 || SAMS70)
			(p_channel->counter_event) |
			(p_channel->b_deadtime_generator << 16) |
			(p_channel->b_pwmh_output_inverted << 17) |
			(p_channel->b_pwml_output_inverted << 18) |
   8213e:	890d      	ldrh	r5, [r1, #8]
	uint32_t tmp_reg = 0;
	uint32_t ch_num = p_channel->channel;

	/* Channel Mode/Clock Register */
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
			(p_channel->polarity << 9) |
   82140:	432c      	orrs	r4, r5
   82142:	7a8a      	ldrb	r2, [r1, #10]
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E || SAMV70 || SAMV71 || SAME70 || SAMS70)
			(p_channel->counter_event) |
   82144:	ea44 2442 	orr.w	r4, r4, r2, lsl #9
			(p_channel->b_deadtime_generator << 16) |
   82148:	7d8a      	ldrb	r2, [r1, #22]
   8214a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
			(p_channel->b_pwmh_output_inverted << 17) |
   8214e:	7dca      	ldrb	r2, [r1, #23]
   82150:	ea44 4442 	orr.w	r4, r4, r2, lsl #17
			(p_channel->b_pwml_output_inverted << 18) |
   82154:	7e0a      	ldrb	r2, [r1, #24]
{
	uint32_t tmp_reg = 0;
	uint32_t ch_num = p_channel->channel;

	/* Channel Mode/Clock Register */
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
   82156:	ea44 4482 	orr.w	r4, r4, r2, lsl #18
   8215a:	eb00 1243 	add.w	r2, r0, r3, lsl #5
			(p_channel->b_deadtime_generator << 16) |
			(p_channel->b_pwmh_output_inverted << 17) |
			(p_channel->b_pwml_output_inverted << 18) |
#endif
			(p_channel->alignment);
	p_pwm->PWM_CH_NUM[ch_num].PWM_CMR = tmp_reg;
   8215e:	f8c2 4200 	str.w	r4, [r2, #512]	; 0x200

	/* Channel Duty Cycle Register */
	p_pwm->PWM_CH_NUM[ch_num].PWM_CDTY = p_channel->ul_duty;
   82162:	68cc      	ldr	r4, [r1, #12]
   82164:	f8c2 4204 	str.w	r4, [r2, #516]	; 0x204

	/* Channel Period Register */
	p_pwm->PWM_CH_NUM[ch_num].PWM_CPRD = p_channel->ul_period;
   82168:	690c      	ldr	r4, [r1, #16]
   8216a:	f8c2 420c 	str.w	r4, [r2, #524]	; 0x20c
	
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E || SAMV70 || SAMV71 || SAME70 || SAMS70)
	/* Channel Dead Time Register */
	if (p_channel->b_deadtime_generator) {
   8216e:	7d8a      	ldrb	r2, [r1, #22]
   82170:	b13a      	cbz	r2, 82182 <pwm_channel_init+0x52>
		p_pwm->PWM_CH_NUM[ch_num].PWM_DT =
				PWM_DT_DTL(p_channel->
   82172:	8b8c      	ldrh	r4, [r1, #28]
				us_deadtime_pwml) | PWM_DT_DTH(p_channel->
   82174:	8b4a      	ldrh	r2, [r1, #26]
   82176:	ea42 4404 	orr.w	r4, r2, r4, lsl #16
	p_pwm->PWM_CH_NUM[ch_num].PWM_CPRD = p_channel->ul_period;
	
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E || SAMV70 || SAMV71 || SAME70 || SAMS70)
	/* Channel Dead Time Register */
	if (p_channel->b_deadtime_generator) {
		p_pwm->PWM_CH_NUM[ch_num].PWM_DT =
   8217a:	eb00 1243 	add.w	r2, r0, r3, lsl #5
   8217e:	f8c2 4218 	str.w	r4, [r2, #536]	; 0x218
				us_deadtime_pwml) | PWM_DT_DTH(p_channel->
				us_deadtime_pwmh);
	}

	/* Output Selection Register */
	tmp_reg  = p_pwm->PWM_OS & (~((PWM_OS_OSH0 | PWM_OS_OSL0) << ch_num));
   82182:	6c85      	ldr	r5, [r0, #72]	; 0x48
   82184:	f04f 1201 	mov.w	r2, #65537	; 0x10001
   82188:	409a      	lsls	r2, r3
   8218a:	43d2      	mvns	r2, r2
   8218c:	4015      	ands	r5, r2
	tmp_reg |= ((p_channel->output_selection.b_override_pwmh) << ch_num) |
			(((p_channel->output_selection.b_override_pwml) << ch_num)
   8218e:	7fce      	ldrb	r6, [r1, #31]
   82190:	409e      	lsls	r6, r3
				us_deadtime_pwmh);
	}

	/* Output Selection Register */
	tmp_reg  = p_pwm->PWM_OS & (~((PWM_OS_OSH0 | PWM_OS_OSL0) << ch_num));
	tmp_reg |= ((p_channel->output_selection.b_override_pwmh) << ch_num) |
   82192:	7f8c      	ldrb	r4, [r1, #30]
   82194:	409c      	lsls	r4, r3
   82196:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
   8219a:	432c      	orrs	r4, r5
			(((p_channel->output_selection.b_override_pwml) << ch_num)
					<< 16);
	p_pwm->PWM_OS = tmp_reg;
   8219c:	6484      	str	r4, [r0, #72]	; 0x48

	/* Output Override Value Register */
	tmp_reg  = p_pwm->PWM_OOV & (~((PWM_OOV_OOVH0 | PWM_OOV_OOVL0) << ch_num));
   8219e:	6c44      	ldr	r4, [r0, #68]	; 0x44
   821a0:	4022      	ands	r2, r4
	tmp_reg |= ((p_channel->output_selection.override_level_pwmh) << ch_num) |
			(((p_channel->output_selection.override_level_pwml) << ch_num)
   821a2:	f891 5021 	ldrb.w	r5, [r1, #33]	; 0x21
   821a6:	409d      	lsls	r5, r3
					<< 16);
	p_pwm->PWM_OS = tmp_reg;

	/* Output Override Value Register */
	tmp_reg  = p_pwm->PWM_OOV & (~((PWM_OOV_OOVH0 | PWM_OOV_OOVL0) << ch_num));
	tmp_reg |= ((p_channel->output_selection.override_level_pwmh) << ch_num) |
   821a8:	f891 4020 	ldrb.w	r4, [r1, #32]
   821ac:	409c      	lsls	r4, r3
   821ae:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
   821b2:	4322      	orrs	r2, r4
			(((p_channel->output_selection.override_level_pwml) << ch_num)
					<< 16);
	p_pwm->PWM_OOV = tmp_reg;
   821b4:	6442      	str	r2, [r0, #68]	; 0x44

	/* Sync Channels Mode Register */
	uint32_t channel = (1 << ch_num);
   821b6:	2201      	movs	r2, #1
   821b8:	409a      	lsls	r2, r3
	if (p_channel->b_sync_ch) {
   821ba:	f891 4022 	ldrb.w	r4, [r1, #34]	; 0x22
   821be:	b11c      	cbz	r4, 821c8 <pwm_channel_init+0x98>
		p_pwm->PWM_SCM |= channel;
   821c0:	6a04      	ldr	r4, [r0, #32]
   821c2:	4314      	orrs	r4, r2
   821c4:	6204      	str	r4, [r0, #32]
   821c6:	e003      	b.n	821d0 <pwm_channel_init+0xa0>
	} else {
		p_pwm->PWM_SCM &= ~((uint32_t) channel);
   821c8:	6a04      	ldr	r4, [r0, #32]
   821ca:	ea24 0402 	bic.w	r4, r4, r2
   821ce:	6204      	str	r4, [r0, #32]
		} else {
			p_pwm->PWM_FPV1 &= (~((0x01 << ch_num) << 16));
		}
	}
#else
	if (p_channel->ul_fault_output_pwmh == PWM_HIGH) {
   821d0:	f891 4024 	ldrb.w	r4, [r1, #36]	; 0x24
   821d4:	2c01      	cmp	r4, #1
		p_pwm->PWM_FPV |= (0x01 << ch_num);
   821d6:	6e84      	ldr	r4, [r0, #104]	; 0x68
   821d8:	bf0c      	ite	eq
   821da:	4314      	orreq	r4, r2
	} else {
		p_pwm->PWM_FPV &= (~(0x01 << ch_num));
   821dc:	4394      	bicne	r4, r2
   821de:	6684      	str	r4, [r0, #104]	; 0x68
	}
	if (p_channel->ul_fault_output_pwml == PWM_HIGH) {
   821e0:	f891 4025 	ldrb.w	r4, [r1, #37]	; 0x25
   821e4:	2c01      	cmp	r4, #1
		p_pwm->PWM_FPV |= ((0x01 << ch_num) << 16);
   821e6:	6e84      	ldr	r4, [r0, #104]	; 0x68
   821e8:	bf0c      	ite	eq
   821ea:	ea44 4202 	orreq.w	r2, r4, r2, lsl #16
	} else {
		p_pwm->PWM_FPV &= (~((0x01 << ch_num) << 16));
   821ee:	ea24 4202 	bicne.w	r2, r4, r2, lsl #16
   821f2:	6682      	str	r2, [r0, #104]	; 0x68
	}
#endif
	/* Fault Protection Enable Register */
	uint32_t fault_enable_reg = 0;
#if (SAM3XA)
	if (ch_num < 4) {
   821f4:	2b03      	cmp	r3, #3
   821f6:	d80c      	bhi.n	82212 <pwm_channel_init+0xe2>
		ch_num *= 8;
		fault_enable_reg = p_pwm->PWM_FPE1;
   821f8:	6ec4      	ldr	r4, [r0, #108]	; 0x6c
#endif
	/* Fault Protection Enable Register */
	uint32_t fault_enable_reg = 0;
#if (SAM3XA)
	if (ch_num < 4) {
		ch_num *= 8;
   821fa:	00db      	lsls	r3, r3, #3
		fault_enable_reg = p_pwm->PWM_FPE1;
		fault_enable_reg &= ~(0xFF << ch_num);
   821fc:	22ff      	movs	r2, #255	; 0xff
   821fe:	409a      	lsls	r2, r3
   82200:	ea24 0202 	bic.w	r2, r4, r2
		fault_enable_reg |= ((p_channel->fault_id) << ch_num);
   82204:	f891 1023 	ldrb.w	r1, [r1, #35]	; 0x23
   82208:	fa01 f303 	lsl.w	r3, r1, r3
   8220c:	4313      	orrs	r3, r2
		p_pwm->PWM_FPE1 = fault_enable_reg;
   8220e:	66c3      	str	r3, [r0, #108]	; 0x6c
   82210:	e00c      	b.n	8222c <pwm_channel_init+0xfc>
	} else {
		ch_num -= 4;
   82212:	3b04      	subs	r3, #4
		ch_num *= 8;
		fault_enable_reg = p_pwm->PWM_FPE2;
   82214:	6f04      	ldr	r4, [r0, #112]	; 0x70
		fault_enable_reg &= ~(0xFF << ch_num);
		fault_enable_reg |= ((p_channel->fault_id) << ch_num);
		p_pwm->PWM_FPE1 = fault_enable_reg;
	} else {
		ch_num -= 4;
		ch_num *= 8;
   82216:	00db      	lsls	r3, r3, #3
		fault_enable_reg = p_pwm->PWM_FPE2;
		fault_enable_reg &= ~(0xFF << ch_num);
   82218:	22ff      	movs	r2, #255	; 0xff
   8221a:	409a      	lsls	r2, r3
   8221c:	ea24 0202 	bic.w	r2, r4, r2
		fault_enable_reg |= ((p_channel->fault_id) << ch_num);
   82220:	f891 1023 	ldrb.w	r1, [r1, #35]	; 0x23
   82224:	fa01 f303 	lsl.w	r3, r1, r3
   82228:	4313      	orrs	r3, r2
		p_pwm->PWM_FPE2 = fault_enable_reg;
   8222a:	6703      	str	r3, [r0, #112]	; 0x70
	p_pwm->PWM_CH_NUM[ch_num].PWM_CMR &= (~PWM_CMR_PPM);
	p_pwm->PWM_CH_NUM[ch_num].PWM_CMR |= (p_channel->ul_ppm_mode & PWM_CMR_PPM);
#endif

	return 0;
}
   8222c:	2000      	movs	r0, #0
   8222e:	bc70      	pop	{r4, r5, r6}
   82230:	4770      	bx	lr
   82232:	bf00      	nop

00082234 <pwm_channel_update_duty>:
 *
 * \retval 0 if changing succeeds, otherwise fails.
 */
uint32_t pwm_channel_update_duty(Pwm *p_pwm, pwm_channel_t *p_channel,
		uint32_t ul_duty)
{
   82234:	b410      	push	{r4}
	uint32_t ch_num = p_channel->channel;
   82236:	680c      	ldr	r4, [r1, #0]

		/** Check parameter */
	if (p_channel->ul_period < ul_duty) {
   82238:	690b      	ldr	r3, [r1, #16]
   8223a:	4293      	cmp	r3, r2
   8223c:	d306      	bcc.n	8224c <pwm_channel_update_duty+0x18>
		return PWM_INVALID_ARGUMENT;
	} else {
		/* Save new duty cycle value */
		p_channel->ul_duty = ul_duty;
   8223e:	60ca      	str	r2, [r1, #12]
		mode &= ~PWM_CMR_CPD;
		p_pwm->PWM_CH_NUM[ch_num].PWM_CMR = mode;

		p_pwm->PWM_CH_NUM[ch_num].PWM_CUPD = ul_duty;
#else
		p_pwm->PWM_CH_NUM[ch_num].PWM_CDTYUPD = ul_duty;
   82240:	eb00 1044 	add.w	r0, r0, r4, lsl #5
   82244:	f8c0 2208 	str.w	r2, [r0, #520]	; 0x208
#endif
	}

	return 0;
   82248:	2000      	movs	r0, #0
   8224a:	e001      	b.n	82250 <pwm_channel_update_duty+0x1c>
{
	uint32_t ch_num = p_channel->channel;

		/** Check parameter */
	if (p_channel->ul_period < ul_duty) {
		return PWM_INVALID_ARGUMENT;
   8224c:	f64f 70ff 	movw	r0, #65535	; 0xffff
		p_pwm->PWM_CH_NUM[ch_num].PWM_CDTYUPD = ul_duty;
#endif
	}

	return 0;
}
   82250:	f85d 4b04 	ldr.w	r4, [sp], #4
   82254:	4770      	bx	lr
   82256:	bf00      	nop

00082258 <pwm_channel_enable>:
 * \param p_pwm Pointer to a PWM instance.
 * \param ul_channel PWM channel number to enable.
 */
void pwm_channel_enable(Pwm *p_pwm, uint32_t ul_channel)
{
	p_pwm->PWM_ENA = (1 << ul_channel);
   82258:	2301      	movs	r3, #1
   8225a:	fa03 f101 	lsl.w	r1, r3, r1
   8225e:	6041      	str	r1, [r0, #4]
   82260:	4770      	bx	lr
   82262:	bf00      	nop

00082264 <pwm_channel_disable>:
 * \param p_pwm Pointer to a PWM instance.
 * \param ul_channel PWM channel number to disable.
 */
void pwm_channel_disable(Pwm *p_pwm, uint32_t ul_channel)
{
	p_pwm->PWM_DIS = (1 << ul_channel);
   82264:	2301      	movs	r3, #1
   82266:	fa03 f101 	lsl.w	r1, r3, r1
   8226a:	6081      	str	r1, [r0, #8]
   8226c:	4770      	bx	lr
   8226e:	bf00      	nop

00082270 <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
   82270:	b410      	push	{r4}
	uint32_t cd = 0;

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
   82272:	23ac      	movs	r3, #172	; 0xac
   82274:	6003      	str	r3, [r0, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
   82276:	680a      	ldr	r2, [r1, #0]
   82278:	684b      	ldr	r3, [r1, #4]
   8227a:	fbb2 f3f3 	udiv	r3, r2, r3
   8227e:	091b      	lsrs	r3, r3, #4
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
   82280:	1e5c      	subs	r4, r3, #1
   82282:	f64f 72fe 	movw	r2, #65534	; 0xfffe
   82286:	4294      	cmp	r4, r2
   82288:	d80a      	bhi.n	822a0 <uart_init+0x30>
		return 1;

	p_uart->UART_BRGR = cd;
   8228a:	6203      	str	r3, [r0, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
   8228c:	688b      	ldr	r3, [r1, #8]
   8228e:	6043      	str	r3, [r0, #4]

#if (!SAMV71 && !SAMV70 && !SAME70 && !SAMS70)
	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
   82290:	f240 2302 	movw	r3, #514	; 0x202
   82294:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
#endif

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
   82298:	2350      	movs	r3, #80	; 0x50
   8229a:	6003      	str	r3, [r0, #0]

	return 0;
   8229c:	2000      	movs	r0, #0
   8229e:	e000      	b.n	822a2 <uart_init+0x32>

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
		return 1;
   822a0:	2001      	movs	r0, #1

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;

	return 0;
}
   822a2:	f85d 4b04 	ldr.w	r4, [sp], #4
   822a6:	4770      	bx	lr

000822a8 <uart_is_rx_ready>:
 * \retval 1 One data has been received.
 * \retval 0 No data has been received.
 */
uint32_t uart_is_rx_ready(Uart *p_uart)
{
	return (p_uart->UART_SR & UART_SR_RXRDY) > 0;
   822a8:	6940      	ldr	r0, [r0, #20]
}
   822aa:	f000 0001 	and.w	r0, r0, #1
   822ae:	4770      	bx	lr

000822b0 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
   822b0:	6943      	ldr	r3, [r0, #20]
   822b2:	f013 0f02 	tst.w	r3, #2
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
   822b6:	bf1a      	itte	ne
   822b8:	61c1      	strne	r1, [r0, #28]
	return 0;
   822ba:	2000      	movne	r0, #0
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
		return 1;
   822bc:	2001      	moveq	r0, #1

	/* Send character */
	p_uart->UART_THR = uc_data;
	return 0;
}
   822be:	4770      	bx	lr

000822c0 <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
   822c0:	6943      	ldr	r3, [r0, #20]
   822c2:	f013 0f01 	tst.w	r3, #1
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
   822c6:	bf1d      	ittte	ne
   822c8:	6983      	ldrne	r3, [r0, #24]
   822ca:	700b      	strbne	r3, [r1, #0]
	return 0;
   822cc:	2000      	movne	r0, #0
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
		return 1;
   822ce:	2001      	moveq	r0, #1

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
	return 0;
}
   822d0:	4770      	bx	lr
   822d2:	bf00      	nop

000822d4 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
   822d4:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
   822d6:	480e      	ldr	r0, [pc, #56]	; (82310 <sysclk_init+0x3c>)
   822d8:	4b0e      	ldr	r3, [pc, #56]	; (82314 <sysclk_init+0x40>)
   822da:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
   822dc:	2000      	movs	r0, #0
   822de:	213e      	movs	r1, #62	; 0x3e
   822e0:	4b0d      	ldr	r3, [pc, #52]	; (82318 <sysclk_init+0x44>)
   822e2:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
   822e4:	4c0d      	ldr	r4, [pc, #52]	; (8231c <sysclk_init+0x48>)
   822e6:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
   822e8:	2800      	cmp	r0, #0
   822ea:	d0fc      	beq.n	822e6 <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
   822ec:	4b0c      	ldr	r3, [pc, #48]	; (82320 <sysclk_init+0x4c>)
   822ee:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   822f0:	4a0c      	ldr	r2, [pc, #48]	; (82324 <sysclk_init+0x50>)
   822f2:	4b0d      	ldr	r3, [pc, #52]	; (82328 <sysclk_init+0x54>)
   822f4:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
   822f6:	4c0d      	ldr	r4, [pc, #52]	; (8232c <sysclk_init+0x58>)
   822f8:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   822fa:	2800      	cmp	r0, #0
   822fc:	d0fc      	beq.n	822f8 <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   822fe:	2010      	movs	r0, #16
   82300:	4b0b      	ldr	r3, [pc, #44]	; (82330 <sysclk_init+0x5c>)
   82302:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   82304:	4b0b      	ldr	r3, [pc, #44]	; (82334 <sysclk_init+0x60>)
   82306:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   82308:	4801      	ldr	r0, [pc, #4]	; (82310 <sysclk_init+0x3c>)
   8230a:	4b02      	ldr	r3, [pc, #8]	; (82314 <sysclk_init+0x40>)
   8230c:	4798      	blx	r3
   8230e:	bd10      	pop	{r4, pc}
   82310:	0501bd00 	.word	0x0501bd00
   82314:	200700a5 	.word	0x200700a5
   82318:	000826fd 	.word	0x000826fd
   8231c:	00082751 	.word	0x00082751
   82320:	00082761 	.word	0x00082761
   82324:	200d3f01 	.word	0x200d3f01
   82328:	400e0600 	.word	0x400e0600
   8232c:	00082771 	.word	0x00082771
   82330:	00082699 	.word	0x00082699
   82334:	0008288d 	.word	0x0008288d

00082338 <board_init>:
#include "conf_board.h"
#include "gpio.h"
#include "ioport.h"

void board_init(void)
{
   82338:	b510      	push	{r4, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   8233a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   8233e:	4b1e      	ldr	r3, [pc, #120]	; (823b8 <board_init+0x80>)
   82340:	605a      	str	r2, [r3, #4]
   82342:	200b      	movs	r0, #11
   82344:	4c1d      	ldr	r4, [pc, #116]	; (823bc <board_init+0x84>)
   82346:	47a0      	blx	r4
   82348:	200c      	movs	r0, #12
   8234a:	47a0      	blx	r4
   8234c:	200d      	movs	r0, #13
   8234e:	47a0      	blx	r4
   82350:	200e      	movs	r0, #14
   82352:	47a0      	blx	r4
	 * In new designs IOPORT is used instead.
	 * Here IOPORT must be initialized for others to use before setting up IO.
	 */
	ioport_init();
	/* Configure LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
   82354:	203b      	movs	r0, #59	; 0x3b
   82356:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   8235a:	4c19      	ldr	r4, [pc, #100]	; (823c0 <board_init+0x88>)
   8235c:	47a0      	blx	r4
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
   8235e:	2055      	movs	r0, #85	; 0x55
   82360:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   82364:	47a0      	blx	r4
	gpio_configure_pin(LED2_GPIO, LED2_FLAGS);
   82366:	2056      	movs	r0, #86	; 0x56
   82368:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   8236c:	47a0      	blx	r4

	/* Configure Push Button pins */
	gpio_configure_pin(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS);
   8236e:	2068      	movs	r0, #104	; 0x68
   82370:	4914      	ldr	r1, [pc, #80]	; (823c4 <board_init+0x8c>)
   82372:	47a0      	blx	r4
	gpio_configure_pin(GPIO_PUSH_BUTTON_2, GPIO_PUSH_BUTTON_2_FLAGS);
   82374:	205c      	movs	r0, #92	; 0x5c
   82376:	4914      	ldr	r1, [pc, #80]	; (823c8 <board_init+0x90>)
   82378:	47a0      	blx	r4

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART_PIO, PINS_UART, PINS_UART_FLAGS);
   8237a:	4814      	ldr	r0, [pc, #80]	; (823cc <board_init+0x94>)
   8237c:	f44f 7140 	mov.w	r1, #768	; 0x300
   82380:	4a13      	ldr	r2, [pc, #76]	; (823d0 <board_init+0x98>)
   82382:	4b14      	ldr	r3, [pc, #80]	; (823d4 <board_init+0x9c>)
   82384:	4798      	blx	r3
#endif

	/* Configure ADC example pins */
#ifdef CONF_BOARD_ADC
	/* TC TIOA configuration */
	gpio_configure_pin(PIN_TC0_TIOA0,PIN_TC0_TIOA0_FLAGS);
   82386:	2039      	movs	r0, #57	; 0x39
   82388:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   8238c:	47a0      	blx	r4

	/* ADC Trigger configuration */
	gpio_configure_pin(PINS_ADC_TRIG, PINS_ADC_TRIG_FLAG);
   8238e:	200b      	movs	r0, #11
   82390:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   82394:	47a0      	blx	r4

	/* PWMH0 configuration */
	gpio_configure_pin(PIN_PWMC_PWMH0_TRIG, PIN_PWMC_PWMH0_TRIG_FLAG);
   82396:	202c      	movs	r0, #44	; 0x2c
   82398:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   8239c:	47a0      	blx	r4
	gpio_configure_pin(PIN_PWM_LED1_GPIO, PIN_PWM_LED1_FLAGS);
#endif

#ifdef CONF_BOARD_PWM_LED2
	/* Configure PWM LED2 pin */
	gpio_configure_pin(PIN_PWM_LED2_GPIO, PIN_PWM_LED2_FLAGS);
   8239e:	2057      	movs	r0, #87	; 0x57
   823a0:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   823a4:	47a0      	blx	r4
	gpio_configure_pin(PIN_USART0_TXD_IDX, PIN_USART0_TXD_FLAGS);
#endif

#ifdef CONF_BOARD_USB_PORT
	/* Configure USB_ID (UOTGID) pin */
	gpio_configure_pin(USB_ID_GPIO, USB_ID_FLAGS);
   823a6:	202b      	movs	r0, #43	; 0x2b
   823a8:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   823ac:	47a0      	blx	r4
	/* Configure USB_VBOF (UOTGVBOF) pin */
	gpio_configure_pin(USB_VBOF_GPIO, USB_VBOF_FLAGS);
   823ae:	202a      	movs	r0, #42	; 0x2a
   823b0:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   823b4:	47a0      	blx	r4
   823b6:	bd10      	pop	{r4, pc}
   823b8:	400e1a50 	.word	0x400e1a50
   823bc:	00082781 	.word	0x00082781
   823c0:	0008247d 	.word	0x0008247d
   823c4:	28000079 	.word	0x28000079
   823c8:	28000001 	.word	0x28000001
   823cc:	400e0e00 	.word	0x400e0e00
   823d0:	08000001 	.word	0x08000001
   823d4:	00082551 	.word	0x00082551

000823d8 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
   823d8:	6442      	str	r2, [r0, #68]	; 0x44
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
	}
#elif (SAM3XA|| SAM3U)
	switch (ul_type) {
   823da:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
   823de:	d016      	beq.n	8240e <pio_set_peripheral+0x36>
   823e0:	d804      	bhi.n	823ec <pio_set_peripheral+0x14>
   823e2:	b1c1      	cbz	r1, 82416 <pio_set_peripheral+0x3e>
   823e4:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
   823e8:	d00a      	beq.n	82400 <pio_set_peripheral+0x28>
   823ea:	e013      	b.n	82414 <pio_set_peripheral+0x3c>
   823ec:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
   823f0:	d011      	beq.n	82416 <pio_set_peripheral+0x3e>
   823f2:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
   823f6:	d00e      	beq.n	82416 <pio_set_peripheral+0x3e>
   823f8:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
   823fc:	d10a      	bne.n	82414 <pio_set_peripheral+0x3c>
   823fe:	4770      	bx	lr
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABSR;
   82400:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   82402:	6f01      	ldr	r1, [r0, #112]	; 0x70
   82404:	400b      	ands	r3, r1
   82406:	ea23 0302 	bic.w	r3, r3, r2
   8240a:	6703      	str	r3, [r0, #112]	; 0x70
		break;
   8240c:	e002      	b.n	82414 <pio_set_peripheral+0x3c>

	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABSR;
   8240e:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   82410:	4313      	orrs	r3, r2
   82412:	6703      	str	r3, [r0, #112]	; 0x70
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
   82414:	6042      	str	r2, [r0, #4]
   82416:	4770      	bx	lr

00082418 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   82418:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   8241a:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
   8241e:	bf14      	ite	ne
   82420:	6641      	strne	r1, [r0, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   82422:	6601      	streq	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   82424:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
   82428:	bf14      	ite	ne
   8242a:	6201      	strne	r1, [r0, #32]
	} else {
		p_pio->PIO_IFDR = ul_mask;
   8242c:	6241      	streq	r1, [r0, #36]	; 0x24
			p_pio->PIO_IFSCER = ul_mask;
		}
	}
#elif (SAM3XA|| SAM3U)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
   8242e:	f012 0f02 	tst.w	r2, #2
   82432:	d002      	beq.n	8243a <pio_set_input+0x22>
		p_pio->PIO_SCIFSR = ul_mask;
   82434:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
   82438:	e004      	b.n	82444 <pio_set_input+0x2c>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
   8243a:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_DIFSR = ul_mask;
   8243e:	bf18      	it	ne
   82440:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
   82444:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
   82446:	6001      	str	r1, [r0, #0]
   82448:	4770      	bx	lr
   8244a:	bf00      	nop

0008244c <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
   8244c:	b410      	push	{r4}
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   8244e:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   82450:	9c01      	ldr	r4, [sp, #4]
   82452:	b10c      	cbz	r4, 82458 <pio_set_output+0xc>
		p_pio->PIO_PUER = ul_mask;
   82454:	6641      	str	r1, [r0, #100]	; 0x64
   82456:	e000      	b.n	8245a <pio_set_output+0xe>
	} else {
		p_pio->PIO_PUDR = ul_mask;
   82458:	6601      	str	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
   8245a:	b10b      	cbz	r3, 82460 <pio_set_output+0x14>
		p_pio->PIO_MDER = ul_mask;
   8245c:	6501      	str	r1, [r0, #80]	; 0x50
   8245e:	e000      	b.n	82462 <pio_set_output+0x16>
	} else {
		p_pio->PIO_MDDR = ul_mask;
   82460:	6541      	str	r1, [r0, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
   82462:	b10a      	cbz	r2, 82468 <pio_set_output+0x1c>
		p_pio->PIO_SODR = ul_mask;
   82464:	6301      	str	r1, [r0, #48]	; 0x30
   82466:	e000      	b.n	8246a <pio_set_output+0x1e>
	} else {
		p_pio->PIO_CODR = ul_mask;
   82468:	6341      	str	r1, [r0, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
   8246a:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
   8246c:	6001      	str	r1, [r0, #0]
}
   8246e:	f85d 4b04 	ldr.w	r4, [sp], #4
   82472:	4770      	bx	lr

00082474 <pio_get_interrupt_status>:
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
   82474:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
   82476:	4770      	bx	lr

00082478 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
   82478:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
   8247a:	4770      	bx	lr

0008247c <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
   8247c:	b570      	push	{r4, r5, r6, lr}
   8247e:	b082      	sub	sp, #8
   82480:	460d      	mov	r5, r1
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   82482:	0944      	lsrs	r4, r0, #5
   82484:	f504 1400 	add.w	r4, r4, #2097152	; 0x200000
   82488:	f204 7407 	addw	r4, r4, #1799	; 0x707
   8248c:	0266      	lsls	r6, r4, #9
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
	Pio *p_pio = pio_get_pin_group(ul_pin);

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   8248e:	f001 44f0 	and.w	r4, r1, #2013265920	; 0x78000000
   82492:	f1b4 5f20 	cmp.w	r4, #671088640	; 0x28000000
   82496:	d030      	beq.n	824fa <pio_configure_pin+0x7e>
   82498:	d806      	bhi.n	824a8 <pio_configure_pin+0x2c>
   8249a:	f1b4 6f00 	cmp.w	r4, #134217728	; 0x8000000
   8249e:	d00a      	beq.n	824b6 <pio_configure_pin+0x3a>
   824a0:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
   824a4:	d018      	beq.n	824d8 <pio_configure_pin+0x5c>
   824a6:	e049      	b.n	8253c <pio_configure_pin+0xc0>
   824a8:	f1b4 5f40 	cmp.w	r4, #805306368	; 0x30000000
   824ac:	d030      	beq.n	82510 <pio_configure_pin+0x94>
   824ae:	f1b4 5f60 	cmp.w	r4, #939524096	; 0x38000000
   824b2:	d02d      	beq.n	82510 <pio_configure_pin+0x94>
   824b4:	e042      	b.n	8253c <pio_configure_pin+0xc0>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
   824b6:	f000 001f 	and.w	r0, r0, #31
   824ba:	2401      	movs	r4, #1
   824bc:	4084      	lsls	r4, r0
   824be:	4630      	mov	r0, r6
   824c0:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   824c4:	4622      	mov	r2, r4
   824c6:	4b1f      	ldr	r3, [pc, #124]	; (82544 <pio_configure_pin+0xc8>)
   824c8:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   824ca:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   824ce:	bf14      	ite	ne
   824d0:	6674      	strne	r4, [r6, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   824d2:	6634      	streq	r4, [r6, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   824d4:	2001      	movs	r0, #1
   824d6:	e032      	b.n	8253e <pio_configure_pin+0xc2>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
   824d8:	f000 001f 	and.w	r0, r0, #31
   824dc:	2401      	movs	r4, #1
   824de:	4084      	lsls	r4, r0
   824e0:	4630      	mov	r0, r6
   824e2:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   824e6:	4622      	mov	r2, r4
   824e8:	4b16      	ldr	r3, [pc, #88]	; (82544 <pio_configure_pin+0xc8>)
   824ea:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   824ec:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   824f0:	bf14      	ite	ne
   824f2:	6674      	strne	r4, [r6, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   824f4:	6634      	streq	r4, [r6, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   824f6:	2001      	movs	r0, #1
   824f8:	e021      	b.n	8253e <pio_configure_pin+0xc2>
				(ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
   824fa:	f000 011f 	and.w	r1, r0, #31
   824fe:	2401      	movs	r4, #1
   82500:	4630      	mov	r0, r6
   82502:	fa04 f101 	lsl.w	r1, r4, r1
   82506:	462a      	mov	r2, r5
   82508:	4b0f      	ldr	r3, [pc, #60]	; (82548 <pio_configure_pin+0xcc>)
   8250a:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   8250c:	4620      	mov	r0, r4
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;
   8250e:	e016      	b.n	8253e <pio_configure_pin+0xc2>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   82510:	f000 011f 	and.w	r1, r0, #31
   82514:	2401      	movs	r4, #1
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   82516:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   8251a:	ea05 0304 	and.w	r3, r5, r4
   8251e:	9300      	str	r3, [sp, #0]
   82520:	4630      	mov	r0, r6
   82522:	fa04 f101 	lsl.w	r1, r4, r1
   82526:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   8252a:	bf14      	ite	ne
   8252c:	2200      	movne	r2, #0
   8252e:	2201      	moveq	r2, #1
   82530:	f3c5 0380 	ubfx	r3, r5, #2, #1
   82534:	4d05      	ldr	r5, [pc, #20]	; (8254c <pio_configure_pin+0xd0>)
   82536:	47a8      	blx	r5

	default:
		return 0;
	}

	return 1;
   82538:	4620      	mov	r0, r4
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   8253a:	e000      	b.n	8253e <pio_configure_pin+0xc2>

	default:
		return 0;
   8253c:	2000      	movs	r0, #0
	}

	return 1;
}
   8253e:	b002      	add	sp, #8
   82540:	bd70      	pop	{r4, r5, r6, pc}
   82542:	bf00      	nop
   82544:	000823d9 	.word	0x000823d9
   82548:	00082419 	.word	0x00082419
   8254c:	0008244d 	.word	0x0008244d

00082550 <pio_configure_pin_group>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin_group(Pio *p_pio,
		uint32_t ul_mask, const uint32_t ul_flags)
{
   82550:	b5f0      	push	{r4, r5, r6, r7, lr}
   82552:	b083      	sub	sp, #12
   82554:	4607      	mov	r7, r0
   82556:	460e      	mov	r6, r1
   82558:	4615      	mov	r5, r2
	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   8255a:	f002 44f0 	and.w	r4, r2, #2013265920	; 0x78000000
   8255e:	f1b4 5f20 	cmp.w	r4, #671088640	; 0x28000000
   82562:	d026      	beq.n	825b2 <pio_configure_pin_group+0x62>
   82564:	d806      	bhi.n	82574 <pio_configure_pin_group+0x24>
   82566:	f1b4 6f00 	cmp.w	r4, #134217728	; 0x8000000
   8256a:	d00a      	beq.n	82582 <pio_configure_pin_group+0x32>
   8256c:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
   82570:	d013      	beq.n	8259a <pio_configure_pin_group+0x4a>
   82572:	e034      	b.n	825de <pio_configure_pin_group+0x8e>
   82574:	f1b4 5f40 	cmp.w	r4, #805306368	; 0x30000000
   82578:	d01f      	beq.n	825ba <pio_configure_pin_group+0x6a>
   8257a:	f1b4 5f60 	cmp.w	r4, #939524096	; 0x38000000
   8257e:	d01c      	beq.n	825ba <pio_configure_pin_group+0x6a>
   82580:	e02d      	b.n	825de <pio_configure_pin_group+0x8e>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
   82582:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   82586:	4632      	mov	r2, r6
   82588:	4b16      	ldr	r3, [pc, #88]	; (825e4 <pio_configure_pin_group+0x94>)
   8258a:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   8258c:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   82590:	bf14      	ite	ne
   82592:	667e      	strne	r6, [r7, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   82594:	663e      	streq	r6, [r7, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   82596:	2001      	movs	r0, #1
   82598:	e022      	b.n	825e0 <pio_configure_pin_group+0x90>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
   8259a:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   8259e:	4632      	mov	r2, r6
   825a0:	4b10      	ldr	r3, [pc, #64]	; (825e4 <pio_configure_pin_group+0x94>)
   825a2:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   825a4:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   825a8:	bf14      	ite	ne
   825aa:	667e      	strne	r6, [r7, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   825ac:	663e      	streq	r6, [r7, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   825ae:	2001      	movs	r0, #1
   825b0:	e016      	b.n	825e0 <pio_configure_pin_group+0x90>
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
   825b2:	4b0d      	ldr	r3, [pc, #52]	; (825e8 <pio_configure_pin_group+0x98>)
   825b4:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   825b6:	2001      	movs	r0, #1
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;
   825b8:	e012      	b.n	825e0 <pio_configure_pin_group+0x90>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   825ba:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
   825be:	f005 0301 	and.w	r3, r5, #1
   825c2:	9300      	str	r3, [sp, #0]
   825c4:	4638      	mov	r0, r7
   825c6:	4631      	mov	r1, r6
   825c8:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   825cc:	bf14      	ite	ne
   825ce:	2200      	movne	r2, #0
   825d0:	2201      	moveq	r2, #1
   825d2:	f3c5 0380 	ubfx	r3, r5, #2, #1
   825d6:	4c05      	ldr	r4, [pc, #20]	; (825ec <pio_configure_pin_group+0x9c>)
   825d8:	47a0      	blx	r4

	default:
		return 0;
	}

	return 1;
   825da:	2001      	movs	r0, #1
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   825dc:	e000      	b.n	825e0 <pio_configure_pin_group+0x90>

	default:
		return 0;
   825de:	2000      	movs	r0, #0
	}

	return 1;
}
   825e0:	b003      	add	sp, #12
   825e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   825e4:	000823d9 	.word	0x000823d9
   825e8:	00082419 	.word	0x00082419
   825ec:	0008244d 	.word	0x0008244d

000825f0 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   825f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   825f4:	4604      	mov	r4, r0
   825f6:	460e      	mov	r6, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   825f8:	4b10      	ldr	r3, [pc, #64]	; (8263c <pio_handler_process+0x4c>)
   825fa:	4798      	blx	r3
   825fc:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
   825fe:	4620      	mov	r0, r4
   82600:	4b0f      	ldr	r3, [pc, #60]	; (82640 <pio_handler_process+0x50>)
   82602:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
   82604:	4005      	ands	r5, r0
   82606:	d017      	beq.n	82638 <pio_handler_process+0x48>
   82608:	4f0e      	ldr	r7, [pc, #56]	; (82644 <pio_handler_process+0x54>)
   8260a:	f107 040c 	add.w	r4, r7, #12
   8260e:	376c      	adds	r7, #108	; 0x6c
		/* Find triggering source */
		i = 0;
		while (status != 0) {
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
   82610:	f854 3c0c 	ldr.w	r3, [r4, #-12]
   82614:	42b3      	cmp	r3, r6
   82616:	d10a      	bne.n	8262e <pio_handler_process+0x3e>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   82618:	f854 1c08 	ldr.w	r1, [r4, #-8]
   8261c:	4229      	tst	r1, r5
   8261e:	d006      	beq.n	8262e <pio_handler_process+0x3e>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   82620:	6823      	ldr	r3, [r4, #0]
   82622:	4630      	mov	r0, r6
   82624:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
   82626:	f854 3c08 	ldr.w	r3, [r4, #-8]
   8262a:	ea25 0503 	bic.w	r5, r5, r3
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
   8262e:	42bc      	cmp	r4, r7
   82630:	d002      	beq.n	82638 <pio_handler_process+0x48>
   82632:	3410      	adds	r4, #16

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
   82634:	2d00      	cmp	r5, #0
   82636:	d1eb      	bne.n	82610 <pio_handler_process+0x20>
   82638:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8263c:	00082475 	.word	0x00082475
   82640:	00082479 	.word	0x00082479
   82644:	20078ba8 	.word	0x20078ba8

00082648 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   82648:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
   8264a:	4802      	ldr	r0, [pc, #8]	; (82654 <PIOA_Handler+0xc>)
   8264c:	210b      	movs	r1, #11
   8264e:	4b02      	ldr	r3, [pc, #8]	; (82658 <PIOA_Handler+0x10>)
   82650:	4798      	blx	r3
   82652:	bd08      	pop	{r3, pc}
   82654:	400e0e00 	.word	0x400e0e00
   82658:	000825f1 	.word	0x000825f1

0008265c <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   8265c:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
   8265e:	4802      	ldr	r0, [pc, #8]	; (82668 <PIOB_Handler+0xc>)
   82660:	210c      	movs	r1, #12
   82662:	4b02      	ldr	r3, [pc, #8]	; (8266c <PIOB_Handler+0x10>)
   82664:	4798      	blx	r3
   82666:	bd08      	pop	{r3, pc}
   82668:	400e1000 	.word	0x400e1000
   8266c:	000825f1 	.word	0x000825f1

00082670 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
   82670:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
   82672:	4802      	ldr	r0, [pc, #8]	; (8267c <PIOC_Handler+0xc>)
   82674:	210d      	movs	r1, #13
   82676:	4b02      	ldr	r3, [pc, #8]	; (82680 <PIOC_Handler+0x10>)
   82678:	4798      	blx	r3
   8267a:	bd08      	pop	{r3, pc}
   8267c:	400e1200 	.word	0x400e1200
   82680:	000825f1 	.word	0x000825f1

00082684 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
   82684:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
   82686:	4802      	ldr	r0, [pc, #8]	; (82690 <PIOD_Handler+0xc>)
   82688:	210e      	movs	r1, #14
   8268a:	4b02      	ldr	r3, [pc, #8]	; (82694 <PIOD_Handler+0x10>)
   8268c:	4798      	blx	r3
   8268e:	bd08      	pop	{r3, pc}
   82690:	400e1400 	.word	0x400e1400
   82694:	000825f1 	.word	0x000825f1

00082698 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   82698:	4b17      	ldr	r3, [pc, #92]	; (826f8 <pmc_switch_mck_to_pllack+0x60>)
   8269a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   8269c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   826a0:	4310      	orrs	r0, r2
   826a2:	6318      	str	r0, [r3, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   826a4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   826a6:	f013 0f08 	tst.w	r3, #8
   826aa:	d109      	bne.n	826c0 <pmc_switch_mck_to_pllack+0x28>
   826ac:	f44f 6300 	mov.w	r3, #2048	; 0x800
   826b0:	4911      	ldr	r1, [pc, #68]	; (826f8 <pmc_switch_mck_to_pllack+0x60>)
   826b2:	e001      	b.n	826b8 <pmc_switch_mck_to_pllack+0x20>
			--ul_timeout) {
		if (ul_timeout == 0) {
   826b4:	3b01      	subs	r3, #1
   826b6:	d019      	beq.n	826ec <pmc_switch_mck_to_pllack+0x54>
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   826b8:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   826ba:	f012 0f08 	tst.w	r2, #8
   826be:	d0f9      	beq.n	826b4 <pmc_switch_mck_to_pllack+0x1c>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   826c0:	4b0d      	ldr	r3, [pc, #52]	; (826f8 <pmc_switch_mck_to_pllack+0x60>)
   826c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   826c4:	f022 0203 	bic.w	r2, r2, #3
   826c8:	f042 0202 	orr.w	r2, r2, #2
   826cc:	631a      	str	r2, [r3, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   826ce:	6e98      	ldr	r0, [r3, #104]	; 0x68
   826d0:	f010 0008 	ands.w	r0, r0, #8
   826d4:	d10c      	bne.n	826f0 <pmc_switch_mck_to_pllack+0x58>
   826d6:	f44f 6300 	mov.w	r3, #2048	; 0x800
   826da:	4907      	ldr	r1, [pc, #28]	; (826f8 <pmc_switch_mck_to_pllack+0x60>)
   826dc:	e001      	b.n	826e2 <pmc_switch_mck_to_pllack+0x4a>
			--ul_timeout) {
		if (ul_timeout == 0) {
   826de:	3b01      	subs	r3, #1
   826e0:	d008      	beq.n	826f4 <pmc_switch_mck_to_pllack+0x5c>
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   826e2:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   826e4:	f012 0f08 	tst.w	r2, #8
   826e8:	d0f9      	beq.n	826de <pmc_switch_mck_to_pllack+0x46>
   826ea:	4770      	bx	lr

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
   826ec:	2001      	movs	r0, #1
   826ee:	4770      	bx	lr
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
   826f0:	2000      	movs	r0, #0
   826f2:	4770      	bx	lr
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
   826f4:	2001      	movs	r0, #1
		}
	}

	return 0;
}
   826f6:	4770      	bx	lr
   826f8:	400e0600 	.word	0x400e0600

000826fc <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
   826fc:	b138      	cbz	r0, 8270e <pmc_switch_mainck_to_xtal+0x12>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   826fe:	4911      	ldr	r1, [pc, #68]	; (82744 <pmc_switch_mainck_to_xtal+0x48>)
   82700:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
   82702:	4a11      	ldr	r2, [pc, #68]	; (82748 <pmc_switch_mainck_to_xtal+0x4c>)
   82704:	401a      	ands	r2, r3
   82706:	4b11      	ldr	r3, [pc, #68]	; (8274c <pmc_switch_mainck_to_xtal+0x50>)
   82708:	4313      	orrs	r3, r2
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   8270a:	620b      	str	r3, [r1, #32]
   8270c:	4770      	bx	lr
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   8270e:	4a0d      	ldr	r2, [pc, #52]	; (82744 <pmc_switch_mainck_to_xtal+0x48>)
   82710:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   82712:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   82716:	f023 0303 	bic.w	r3, r3, #3
   8271a:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   8271e:	f043 0301 	orr.w	r3, r3, #1
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
   82722:	0209      	lsls	r1, r1, #8
   82724:	b289      	uxth	r1, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   82726:	430b      	orrs	r3, r1
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   82728:	6213      	str	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   8272a:	6e93      	ldr	r3, [r2, #104]	; 0x68
   8272c:	f013 0f01 	tst.w	r3, #1
   82730:	d0fb      	beq.n	8272a <pmc_switch_mainck_to_xtal+0x2e>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
   82732:	4a04      	ldr	r2, [pc, #16]	; (82744 <pmc_switch_mainck_to_xtal+0x48>)
   82734:	6a13      	ldr	r3, [r2, #32]
   82736:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
   8273a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   8273e:	6213      	str	r3, [r2, #32]
   82740:	4770      	bx	lr
   82742:	bf00      	nop
   82744:	400e0600 	.word	0x400e0600
   82748:	fec8fffc 	.word	0xfec8fffc
   8274c:	01370002 	.word	0x01370002

00082750 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   82750:	4b02      	ldr	r3, [pc, #8]	; (8275c <pmc_osc_is_ready_mainck+0xc>)
   82752:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   82754:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
   82758:	4770      	bx	lr
   8275a:	bf00      	nop
   8275c:	400e0600 	.word	0x400e0600

00082760 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   82760:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   82764:	4b01      	ldr	r3, [pc, #4]	; (8276c <pmc_disable_pllack+0xc>)
   82766:	629a      	str	r2, [r3, #40]	; 0x28
   82768:	4770      	bx	lr
   8276a:	bf00      	nop
   8276c:	400e0600 	.word	0x400e0600

00082770 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   82770:	4b02      	ldr	r3, [pc, #8]	; (8277c <pmc_is_locked_pllack+0xc>)
   82772:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   82774:	f000 0002 	and.w	r0, r0, #2
   82778:	4770      	bx	lr
   8277a:	bf00      	nop
   8277c:	400e0600 	.word	0x400e0600

00082780 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
   82780:	282c      	cmp	r0, #44	; 0x2c
   82782:	d820      	bhi.n	827c6 <pmc_enable_periph_clk+0x46>
		return 1;
	}

	if (ul_id < 32) {
   82784:	281f      	cmp	r0, #31
   82786:	d80d      	bhi.n	827a4 <pmc_enable_periph_clk+0x24>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   82788:	4b12      	ldr	r3, [pc, #72]	; (827d4 <pmc_enable_periph_clk+0x54>)
   8278a:	699a      	ldr	r2, [r3, #24]
   8278c:	2301      	movs	r3, #1
   8278e:	4083      	lsls	r3, r0
   82790:	401a      	ands	r2, r3
   82792:	4293      	cmp	r3, r2
   82794:	d019      	beq.n	827ca <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER0 = 1 << ul_id;
   82796:	2301      	movs	r3, #1
   82798:	fa03 f000 	lsl.w	r0, r3, r0
   8279c:	4b0d      	ldr	r3, [pc, #52]	; (827d4 <pmc_enable_periph_clk+0x54>)
   8279e:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   827a0:	2000      	movs	r0, #0
   827a2:	4770      	bx	lr
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   827a4:	4b0b      	ldr	r3, [pc, #44]	; (827d4 <pmc_enable_periph_clk+0x54>)
   827a6:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
   827aa:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   827ac:	2301      	movs	r3, #1
   827ae:	4083      	lsls	r3, r0
   827b0:	401a      	ands	r2, r3
   827b2:	4293      	cmp	r3, r2
   827b4:	d00b      	beq.n	827ce <pmc_enable_periph_clk+0x4e>
			PMC->PMC_PCER1 = 1 << ul_id;
   827b6:	2301      	movs	r3, #1
   827b8:	fa03 f000 	lsl.w	r0, r3, r0
   827bc:	4b05      	ldr	r3, [pc, #20]	; (827d4 <pmc_enable_periph_clk+0x54>)
   827be:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
		}
#endif
	}

	return 0;
   827c2:	2000      	movs	r0, #0
   827c4:	4770      	bx	lr
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
		return 1;
   827c6:	2001      	movs	r0, #1
   827c8:	4770      	bx	lr
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   827ca:	2000      	movs	r0, #0
   827cc:	4770      	bx	lr
   827ce:	2000      	movs	r0, #0
}
   827d0:	4770      	bx	lr
   827d2:	bf00      	nop
   827d4:	400e0600 	.word	0x400e0600

000827d8 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   827d8:	e7fe      	b.n	827d8 <Dummy_Handler>
   827da:	bf00      	nop

000827dc <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   827dc:	b510      	push	{r4, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
   827de:	4b1e      	ldr	r3, [pc, #120]	; (82858 <Reset_Handler+0x7c>)
   827e0:	4a1e      	ldr	r2, [pc, #120]	; (8285c <Reset_Handler+0x80>)
   827e2:	429a      	cmp	r2, r3
   827e4:	d003      	beq.n	827ee <Reset_Handler+0x12>
		for (; pDest < &_erelocate;) {
   827e6:	4b1e      	ldr	r3, [pc, #120]	; (82860 <Reset_Handler+0x84>)
   827e8:	4a1b      	ldr	r2, [pc, #108]	; (82858 <Reset_Handler+0x7c>)
   827ea:	429a      	cmp	r2, r3
   827ec:	d304      	bcc.n	827f8 <Reset_Handler+0x1c>
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   827ee:	4b1d      	ldr	r3, [pc, #116]	; (82864 <Reset_Handler+0x88>)
   827f0:	4a1d      	ldr	r2, [pc, #116]	; (82868 <Reset_Handler+0x8c>)
   827f2:	429a      	cmp	r2, r3
   827f4:	d30f      	bcc.n	82816 <Reset_Handler+0x3a>
   827f6:	e01a      	b.n	8282e <Reset_Handler+0x52>
   827f8:	4b1c      	ldr	r3, [pc, #112]	; (8286c <Reset_Handler+0x90>)
   827fa:	4c1d      	ldr	r4, [pc, #116]	; (82870 <Reset_Handler+0x94>)
   827fc:	1ae4      	subs	r4, r4, r3
   827fe:	f024 0403 	bic.w	r4, r4, #3
   82802:	3404      	adds	r4, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   82804:	2300      	movs	r3, #0
			*pDest++ = *pSrc++;
   82806:	4814      	ldr	r0, [pc, #80]	; (82858 <Reset_Handler+0x7c>)
   82808:	4914      	ldr	r1, [pc, #80]	; (8285c <Reset_Handler+0x80>)
   8280a:	585a      	ldr	r2, [r3, r1]
   8280c:	501a      	str	r2, [r3, r0]
   8280e:	3304      	adds	r3, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   82810:	42a3      	cmp	r3, r4
   82812:	d1fa      	bne.n	8280a <Reset_Handler+0x2e>
   82814:	e7eb      	b.n	827ee <Reset_Handler+0x12>
   82816:	4b17      	ldr	r3, [pc, #92]	; (82874 <Reset_Handler+0x98>)
   82818:	4917      	ldr	r1, [pc, #92]	; (82878 <Reset_Handler+0x9c>)
   8281a:	1ac9      	subs	r1, r1, r3
   8281c:	f021 0103 	bic.w	r1, r1, #3
   82820:	1d1a      	adds	r2, r3, #4
   82822:	4411      	add	r1, r2
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
		*pDest++ = 0;
   82824:	2200      	movs	r2, #0
   82826:	f843 2f04 	str.w	r2, [r3, #4]!
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   8282a:	428b      	cmp	r3, r1
   8282c:	d1fb      	bne.n	82826 <Reset_Handler+0x4a>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   8282e:	4a13      	ldr	r2, [pc, #76]	; (8287c <Reset_Handler+0xa0>)
   82830:	f022 4360 	bic.w	r3, r2, #3758096384	; 0xe0000000
   82834:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   82838:	4911      	ldr	r1, [pc, #68]	; (82880 <Reset_Handler+0xa4>)
   8283a:	608b      	str	r3, [r1, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < NFC_RAM_ADDR)) {
   8283c:	f102 4260 	add.w	r2, r2, #3758096384	; 0xe0000000
   82840:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
   82844:	d203      	bcs.n	8284e <Reset_Handler+0x72>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   82846:	688a      	ldr	r2, [r1, #8]
   82848:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
   8284c:	608a      	str	r2, [r1, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   8284e:	4b0d      	ldr	r3, [pc, #52]	; (82884 <Reset_Handler+0xa8>)
   82850:	4798      	blx	r3

	/* Branch to main function */
	main();
   82852:	4b0d      	ldr	r3, [pc, #52]	; (82888 <Reset_Handler+0xac>)
   82854:	4798      	blx	r3
   82856:	e7fe      	b.n	82856 <Reset_Handler+0x7a>
   82858:	20070000 	.word	0x20070000
   8285c:	00086598 	.word	0x00086598
   82860:	200709a4 	.word	0x200709a4
   82864:	20078c88 	.word	0x20078c88
   82868:	200709a8 	.word	0x200709a8
   8286c:	20070004 	.word	0x20070004
   82870:	200709a7 	.word	0x200709a7
   82874:	200709a4 	.word	0x200709a4
   82878:	20078c83 	.word	0x20078c83
   8287c:	00080000 	.word	0x00080000
   82880:	e000ed00 	.word	0xe000ed00
   82884:	000833d5 	.word	0x000833d5
   82888:	000829f9 	.word	0x000829f9

0008288c <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate(void)
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   8288c:	4b3e      	ldr	r3, [pc, #248]	; (82988 <SystemCoreClockUpdate+0xfc>)
   8288e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   82890:	f003 0303 	and.w	r3, r3, #3
   82894:	2b03      	cmp	r3, #3
   82896:	d85f      	bhi.n	82958 <SystemCoreClockUpdate+0xcc>
   82898:	e8df f003 	tbb	[pc, r3]
   8289c:	2b2b0e02 	.word	0x2b2b0e02
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   828a0:	4b3a      	ldr	r3, [pc, #232]	; (8298c <SystemCoreClockUpdate+0x100>)
   828a2:	695b      	ldr	r3, [r3, #20]
   828a4:	f013 0f80 	tst.w	r3, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   828a8:	bf14      	ite	ne
   828aa:	f44f 4200 	movne.w	r2, #32768	; 0x8000
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   828ae:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
   828b2:	4b37      	ldr	r3, [pc, #220]	; (82990 <SystemCoreClockUpdate+0x104>)
   828b4:	601a      	str	r2, [r3, #0]
   828b6:	e04f      	b.n	82958 <SystemCoreClockUpdate+0xcc>
		}
		break;
	case PMC_MCKR_CSS_MAIN_CLK:	/* Main clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   828b8:	4b33      	ldr	r3, [pc, #204]	; (82988 <SystemCoreClockUpdate+0xfc>)
   828ba:	6a1b      	ldr	r3, [r3, #32]
   828bc:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   828c0:	d003      	beq.n	828ca <SystemCoreClockUpdate+0x3e>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   828c2:	4a34      	ldr	r2, [pc, #208]	; (82994 <SystemCoreClockUpdate+0x108>)
   828c4:	4b32      	ldr	r3, [pc, #200]	; (82990 <SystemCoreClockUpdate+0x104>)
   828c6:	601a      	str	r2, [r3, #0]
   828c8:	e046      	b.n	82958 <SystemCoreClockUpdate+0xcc>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   828ca:	4a33      	ldr	r2, [pc, #204]	; (82998 <SystemCoreClockUpdate+0x10c>)
   828cc:	4b30      	ldr	r3, [pc, #192]	; (82990 <SystemCoreClockUpdate+0x104>)
   828ce:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   828d0:	4b2d      	ldr	r3, [pc, #180]	; (82988 <SystemCoreClockUpdate+0xfc>)
   828d2:	6a1b      	ldr	r3, [r3, #32]
   828d4:	f003 0370 	and.w	r3, r3, #112	; 0x70
   828d8:	2b10      	cmp	r3, #16
   828da:	d002      	beq.n	828e2 <SystemCoreClockUpdate+0x56>
   828dc:	2b20      	cmp	r3, #32
   828de:	d004      	beq.n	828ea <SystemCoreClockUpdate+0x5e>
   828e0:	e03a      	b.n	82958 <SystemCoreClockUpdate+0xcc>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   828e2:	4a2e      	ldr	r2, [pc, #184]	; (8299c <SystemCoreClockUpdate+0x110>)
   828e4:	4b2a      	ldr	r3, [pc, #168]	; (82990 <SystemCoreClockUpdate+0x104>)
   828e6:	601a      	str	r2, [r3, #0]
				break;
   828e8:	e036      	b.n	82958 <SystemCoreClockUpdate+0xcc>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   828ea:	4a2a      	ldr	r2, [pc, #168]	; (82994 <SystemCoreClockUpdate+0x108>)
   828ec:	4b28      	ldr	r3, [pc, #160]	; (82990 <SystemCoreClockUpdate+0x104>)
   828ee:	601a      	str	r2, [r3, #0]
				break;
   828f0:	e032      	b.n	82958 <SystemCoreClockUpdate+0xcc>
			}
		}
		break;
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_UPLL_CLK:	/* UPLL clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   828f2:	4b25      	ldr	r3, [pc, #148]	; (82988 <SystemCoreClockUpdate+0xfc>)
   828f4:	6a1b      	ldr	r3, [r3, #32]
   828f6:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   828fa:	d003      	beq.n	82904 <SystemCoreClockUpdate+0x78>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   828fc:	4a25      	ldr	r2, [pc, #148]	; (82994 <SystemCoreClockUpdate+0x108>)
   828fe:	4b24      	ldr	r3, [pc, #144]	; (82990 <SystemCoreClockUpdate+0x104>)
   82900:	601a      	str	r2, [r3, #0]
   82902:	e012      	b.n	8292a <SystemCoreClockUpdate+0x9e>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   82904:	4a24      	ldr	r2, [pc, #144]	; (82998 <SystemCoreClockUpdate+0x10c>)
   82906:	4b22      	ldr	r3, [pc, #136]	; (82990 <SystemCoreClockUpdate+0x104>)
   82908:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   8290a:	4b1f      	ldr	r3, [pc, #124]	; (82988 <SystemCoreClockUpdate+0xfc>)
   8290c:	6a1b      	ldr	r3, [r3, #32]
   8290e:	f003 0370 	and.w	r3, r3, #112	; 0x70
   82912:	2b10      	cmp	r3, #16
   82914:	d002      	beq.n	8291c <SystemCoreClockUpdate+0x90>
   82916:	2b20      	cmp	r3, #32
   82918:	d004      	beq.n	82924 <SystemCoreClockUpdate+0x98>
   8291a:	e006      	b.n	8292a <SystemCoreClockUpdate+0x9e>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   8291c:	4a1f      	ldr	r2, [pc, #124]	; (8299c <SystemCoreClockUpdate+0x110>)
   8291e:	4b1c      	ldr	r3, [pc, #112]	; (82990 <SystemCoreClockUpdate+0x104>)
   82920:	601a      	str	r2, [r3, #0]
				break;
   82922:	e002      	b.n	8292a <SystemCoreClockUpdate+0x9e>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   82924:	4a1b      	ldr	r2, [pc, #108]	; (82994 <SystemCoreClockUpdate+0x108>)
   82926:	4b1a      	ldr	r3, [pc, #104]	; (82990 <SystemCoreClockUpdate+0x104>)
   82928:	601a      	str	r2, [r3, #0]
				break;
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   8292a:	4b17      	ldr	r3, [pc, #92]	; (82988 <SystemCoreClockUpdate+0xfc>)
   8292c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   8292e:	f003 0303 	and.w	r3, r3, #3
   82932:	2b02      	cmp	r3, #2
   82934:	d10d      	bne.n	82952 <SystemCoreClockUpdate+0xc6>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   82936:	4b14      	ldr	r3, [pc, #80]	; (82988 <SystemCoreClockUpdate+0xfc>)
   82938:	6a98      	ldr	r0, [r3, #40]	; 0x28
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   8293a:	6a99      	ldr	r1, [r3, #40]	; 0x28
   8293c:	4b14      	ldr	r3, [pc, #80]	; (82990 <SystemCoreClockUpdate+0x104>)
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   8293e:	f3c0 400a 	ubfx	r0, r0, #16, #11
   82942:	681a      	ldr	r2, [r3, #0]
   82944:	fb00 2202 	mla	r2, r0, r2, r2
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   82948:	b2c9      	uxtb	r1, r1
   8294a:	fbb2 f2f1 	udiv	r2, r2, r1
   8294e:	601a      	str	r2, [r3, #0]
   82950:	e002      	b.n	82958 <SystemCoreClockUpdate+0xcc>
				                             CKGR_PLLAR_DIVA_Pos));
		} else {
			SystemCoreClock = SYS_UTMIPLL / 2U;
   82952:	4a13      	ldr	r2, [pc, #76]	; (829a0 <SystemCoreClockUpdate+0x114>)
   82954:	4b0e      	ldr	r3, [pc, #56]	; (82990 <SystemCoreClockUpdate+0x104>)
   82956:	601a      	str	r2, [r3, #0]
		}
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   82958:	4b0b      	ldr	r3, [pc, #44]	; (82988 <SystemCoreClockUpdate+0xfc>)
   8295a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   8295c:	f003 0370 	and.w	r3, r3, #112	; 0x70
   82960:	2b70      	cmp	r3, #112	; 0x70
   82962:	d107      	bne.n	82974 <SystemCoreClockUpdate+0xe8>
		SystemCoreClock /= 3U;
   82964:	4b0a      	ldr	r3, [pc, #40]	; (82990 <SystemCoreClockUpdate+0x104>)
   82966:	681a      	ldr	r2, [r3, #0]
   82968:	490e      	ldr	r1, [pc, #56]	; (829a4 <SystemCoreClockUpdate+0x118>)
   8296a:	fba1 0202 	umull	r0, r2, r1, r2
   8296e:	0852      	lsrs	r2, r2, #1
   82970:	601a      	str	r2, [r3, #0]
   82972:	4770      	bx	lr
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   82974:	4b04      	ldr	r3, [pc, #16]	; (82988 <SystemCoreClockUpdate+0xfc>)
   82976:	6b19      	ldr	r1, [r3, #48]	; 0x30
   82978:	4b05      	ldr	r3, [pc, #20]	; (82990 <SystemCoreClockUpdate+0x104>)
   8297a:	f3c1 1102 	ubfx	r1, r1, #4, #3
   8297e:	681a      	ldr	r2, [r3, #0]
   82980:	40ca      	lsrs	r2, r1
   82982:	601a      	str	r2, [r3, #0]
   82984:	4770      	bx	lr
   82986:	bf00      	nop
   82988:	400e0600 	.word	0x400e0600
   8298c:	400e1a10 	.word	0x400e1a10
   82990:	2007013c 	.word	0x2007013c
   82994:	00b71b00 	.word	0x00b71b00
   82998:	003d0900 	.word	0x003d0900
   8299c:	007a1200 	.word	0x007a1200
   829a0:	0e4e1c00 	.word	0x0e4e1c00
   829a4:	aaaaaaab 	.word	0xaaaaaaab

000829a8 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
   829a8:	4b09      	ldr	r3, [pc, #36]	; (829d0 <_sbrk+0x28>)
   829aa:	681b      	ldr	r3, [r3, #0]
   829ac:	b913      	cbnz	r3, 829b4 <_sbrk+0xc>
		heap = (unsigned char *)&_end;
   829ae:	4a09      	ldr	r2, [pc, #36]	; (829d4 <_sbrk+0x2c>)
   829b0:	4b07      	ldr	r3, [pc, #28]	; (829d0 <_sbrk+0x28>)
   829b2:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
   829b4:	4b06      	ldr	r3, [pc, #24]	; (829d0 <_sbrk+0x28>)
   829b6:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
   829b8:	181a      	adds	r2, r3, r0
   829ba:	4907      	ldr	r1, [pc, #28]	; (829d8 <_sbrk+0x30>)
   829bc:	4291      	cmp	r1, r2
   829be:	db04      	blt.n	829ca <_sbrk+0x22>
		return (caddr_t) -1;	
	}

	heap += incr;
   829c0:	4610      	mov	r0, r2
   829c2:	4a03      	ldr	r2, [pc, #12]	; (829d0 <_sbrk+0x28>)
   829c4:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
   829c6:	4618      	mov	r0, r3
   829c8:	4770      	bx	lr
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;

	if (((int)prev_heap + incr) > ramend) {
		return (caddr_t) -1;	
   829ca:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap += incr;

	return (caddr_t) prev_heap;
}
   829ce:	4770      	bx	lr
   829d0:	20078c18 	.word	0x20078c18
   829d4:	2007ac88 	.word	0x2007ac88
   829d8:	20087ffc 	.word	0x20087ffc

000829dc <_close>:
}

extern int _close(int file)
{
	return -1;
}
   829dc:	f04f 30ff 	mov.w	r0, #4294967295
   829e0:	4770      	bx	lr
   829e2:	bf00      	nop

000829e4 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
   829e4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
   829e8:	604b      	str	r3, [r1, #4]

	return 0;
}
   829ea:	2000      	movs	r0, #0
   829ec:	4770      	bx	lr
   829ee:	bf00      	nop

000829f0 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
   829f0:	2001      	movs	r0, #1
   829f2:	4770      	bx	lr

000829f4 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
   829f4:	2000      	movs	r0, #0
   829f6:	4770      	bx	lr

000829f8 <main>:
#include "UARTFunctions.h"
#include "UARTTask.h"
#include "PIDTask.h"

int main (void)
{
   829f8:	b510      	push	{r4, lr}
   829fa:	b084      	sub	sp, #16
	// Board init
	sysclk_init();
   829fc:	4b24      	ldr	r3, [pc, #144]	; (82a90 <main+0x98>)
   829fe:	4798      	blx	r3
	board_init();
   82a00:	4b24      	ldr	r3, [pc, #144]	; (82a94 <main+0x9c>)
   82a02:	4798      	blx	r3
   82a04:	200b      	movs	r0, #11
   82a06:	4c24      	ldr	r4, [pc, #144]	; (82a98 <main+0xa0>)
   82a08:	47a0      	blx	r4
   82a0a:	200c      	movs	r0, #12
   82a0c:	47a0      	blx	r4
   82a0e:	200d      	movs	r0, #13
   82a10:	47a0      	blx	r4
   82a12:	200e      	movs	r0, #14
   82a14:	47a0      	blx	r4
	ioport_init();

	delay_init();
	configure_console(); // Initialize UART
   82a16:	4b21      	ldr	r3, [pc, #132]	; (82a9c <main+0xa4>)
   82a18:	4798      	blx	r3

	PWMSetup();
   82a1a:	4b21      	ldr	r3, [pc, #132]	; (82aa0 <main+0xa8>)
   82a1c:	4798      	blx	r3
	shieldInit();
   82a1e:	4b21      	ldr	r3, [pc, #132]	; (82aa4 <main+0xac>)
   82a20:	4798      	blx	r3
	ADCSetup();
   82a22:	4b21      	ldr	r3, [pc, #132]	; (82aa8 <main+0xb0>)
   82a24:	4798      	blx	r3
	//testFans(); // Loops fan speed
	//testFilter(); // Loops FIR-filtered sensor values
	//testADC(); // Loops sensor values
	
	//initialize binary semaphore
	vSemaphoreCreateBinary(sem);
   82a26:	2001      	movs	r0, #1
   82a28:	2100      	movs	r1, #0
   82a2a:	2203      	movs	r2, #3
   82a2c:	4b1f      	ldr	r3, [pc, #124]	; (82aac <main+0xb4>)
   82a2e:	4798      	blx	r3
   82a30:	4b1f      	ldr	r3, [pc, #124]	; (82ab0 <main+0xb8>)
   82a32:	6018      	str	r0, [r3, #0]
   82a34:	b120      	cbz	r0, 82a40 <main+0x48>
   82a36:	2100      	movs	r1, #0
   82a38:	460a      	mov	r2, r1
   82a3a:	460b      	mov	r3, r1
   82a3c:	4c1d      	ldr	r4, [pc, #116]	; (82ab4 <main+0xbc>)
   82a3e:	47a0      	blx	r4
		// The semaphore can now be used.
	}
	
	/* Creating the PID regulation task */
	//	printf("Created PIDRegulationTask\n\r");
	if (xTaskCreate(PIDRegulationTask, (const signed char * const) "PIDRegulation",
   82a40:	2302      	movs	r3, #2
   82a42:	9300      	str	r3, [sp, #0]
   82a44:	2300      	movs	r3, #0
   82a46:	9301      	str	r3, [sp, #4]
   82a48:	9302      	str	r3, [sp, #8]
   82a4a:	9303      	str	r3, [sp, #12]
   82a4c:	481a      	ldr	r0, [pc, #104]	; (82ab8 <main+0xc0>)
   82a4e:	491b      	ldr	r1, [pc, #108]	; (82abc <main+0xc4>)
   82a50:	f44f 7200 	mov.w	r2, #512	; 0x200
   82a54:	4c1a      	ldr	r4, [pc, #104]	; (82ac0 <main+0xc8>)
   82a56:	47a0      	blx	r4
   82a58:	2801      	cmp	r0, #1
   82a5a:	d002      	beq.n	82a62 <main+0x6a>
	TASK_PIDRegulation_STACK_SIZE, NULL, TASK_PIDRegulation_STACK_PRIORITY, NULL) != pdPASS)
	{
		printf("Failed to create PIDRegulationTask\r\n");
   82a5c:	4819      	ldr	r0, [pc, #100]	; (82ac4 <main+0xcc>)
   82a5e:	4b1a      	ldr	r3, [pc, #104]	; (82ac8 <main+0xd0>)
   82a60:	4798      	blx	r3
	}
	
	/* Creating the serial communication task */
	//	printf("Created SerialComTask\n\r");
	if (xTaskCreate(SerialComTask, (const signed char * const) "SerialComTask",
   82a62:	2301      	movs	r3, #1
   82a64:	9300      	str	r3, [sp, #0]
   82a66:	2300      	movs	r3, #0
   82a68:	9301      	str	r3, [sp, #4]
   82a6a:	9302      	str	r3, [sp, #8]
   82a6c:	9303      	str	r3, [sp, #12]
   82a6e:	4817      	ldr	r0, [pc, #92]	; (82acc <main+0xd4>)
   82a70:	4917      	ldr	r1, [pc, #92]	; (82ad0 <main+0xd8>)
   82a72:	f44f 7200 	mov.w	r2, #512	; 0x200
   82a76:	4c12      	ldr	r4, [pc, #72]	; (82ac0 <main+0xc8>)
   82a78:	47a0      	blx	r4
   82a7a:	2801      	cmp	r0, #1
   82a7c:	d002      	beq.n	82a84 <main+0x8c>
	TASK_SerialComTask_STACK_SIZE, NULL, TASK_SerialComTask_STACK_PRIORITY, NULL) != pdPASS)
	{
		printf("Failed to create SerialComTask\r\n");
   82a7e:	4815      	ldr	r0, [pc, #84]	; (82ad4 <main+0xdc>)
   82a80:	4b11      	ldr	r3, [pc, #68]	; (82ac8 <main+0xd0>)
   82a82:	4798      	blx	r3
	}
	
	///* Start the FreeRTOS scheduler running all tasks indefinitely*/
	vTaskStartScheduler();
   82a84:	4b14      	ldr	r3, [pc, #80]	; (82ad8 <main+0xe0>)
   82a86:	4798      	blx	r3
	printf("Insufficient RAM\r\n");
   82a88:	4814      	ldr	r0, [pc, #80]	; (82adc <main+0xe4>)
   82a8a:	4b0f      	ldr	r3, [pc, #60]	; (82ac8 <main+0xd0>)
   82a8c:	4798      	blx	r3
   82a8e:	e7fe      	b.n	82a8e <main+0x96>
   82a90:	000822d5 	.word	0x000822d5
   82a94:	00082339 	.word	0x00082339
   82a98:	00082781 	.word	0x00082781
   82a9c:	000806a1 	.word	0x000806a1
   82aa0:	0008049d 	.word	0x0008049d
   82aa4:	0008052d 	.word	0x0008052d
   82aa8:	00080149 	.word	0x00080149
   82aac:	00080ee9 	.word	0x00080ee9
   82ab0:	200709c8 	.word	0x200709c8
   82ab4:	00080f41 	.word	0x00080f41
   82ab8:	00080451 	.word	0x00080451
   82abc:	00086494 	.word	0x00086494
   82ac0:	00081301 	.word	0x00081301
   82ac4:	000864a4 	.word	0x000864a4
   82ac8:	00083425 	.word	0x00083425
   82acc:	00080991 	.word	0x00080991
   82ad0:	000864cc 	.word	0x000864cc
   82ad4:	000864dc 	.word	0x000864dc
   82ad8:	00081509 	.word	0x00081509
   82adc:	00086500 	.word	0x00086500

00082ae0 <__aeabi_drsub>:
   82ae0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   82ae4:	e002      	b.n	82aec <__adddf3>
   82ae6:	bf00      	nop

00082ae8 <__aeabi_dsub>:
   82ae8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00082aec <__adddf3>:
   82aec:	b530      	push	{r4, r5, lr}
   82aee:	ea4f 0441 	mov.w	r4, r1, lsl #1
   82af2:	ea4f 0543 	mov.w	r5, r3, lsl #1
   82af6:	ea94 0f05 	teq	r4, r5
   82afa:	bf08      	it	eq
   82afc:	ea90 0f02 	teqeq	r0, r2
   82b00:	bf1f      	itttt	ne
   82b02:	ea54 0c00 	orrsne.w	ip, r4, r0
   82b06:	ea55 0c02 	orrsne.w	ip, r5, r2
   82b0a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   82b0e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   82b12:	f000 80e2 	beq.w	82cda <__adddf3+0x1ee>
   82b16:	ea4f 5454 	mov.w	r4, r4, lsr #21
   82b1a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   82b1e:	bfb8      	it	lt
   82b20:	426d      	neglt	r5, r5
   82b22:	dd0c      	ble.n	82b3e <__adddf3+0x52>
   82b24:	442c      	add	r4, r5
   82b26:	ea80 0202 	eor.w	r2, r0, r2
   82b2a:	ea81 0303 	eor.w	r3, r1, r3
   82b2e:	ea82 0000 	eor.w	r0, r2, r0
   82b32:	ea83 0101 	eor.w	r1, r3, r1
   82b36:	ea80 0202 	eor.w	r2, r0, r2
   82b3a:	ea81 0303 	eor.w	r3, r1, r3
   82b3e:	2d36      	cmp	r5, #54	; 0x36
   82b40:	bf88      	it	hi
   82b42:	bd30      	pophi	{r4, r5, pc}
   82b44:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   82b48:	ea4f 3101 	mov.w	r1, r1, lsl #12
   82b4c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   82b50:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   82b54:	d002      	beq.n	82b5c <__adddf3+0x70>
   82b56:	4240      	negs	r0, r0
   82b58:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   82b5c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   82b60:	ea4f 3303 	mov.w	r3, r3, lsl #12
   82b64:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   82b68:	d002      	beq.n	82b70 <__adddf3+0x84>
   82b6a:	4252      	negs	r2, r2
   82b6c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   82b70:	ea94 0f05 	teq	r4, r5
   82b74:	f000 80a7 	beq.w	82cc6 <__adddf3+0x1da>
   82b78:	f1a4 0401 	sub.w	r4, r4, #1
   82b7c:	f1d5 0e20 	rsbs	lr, r5, #32
   82b80:	db0d      	blt.n	82b9e <__adddf3+0xb2>
   82b82:	fa02 fc0e 	lsl.w	ip, r2, lr
   82b86:	fa22 f205 	lsr.w	r2, r2, r5
   82b8a:	1880      	adds	r0, r0, r2
   82b8c:	f141 0100 	adc.w	r1, r1, #0
   82b90:	fa03 f20e 	lsl.w	r2, r3, lr
   82b94:	1880      	adds	r0, r0, r2
   82b96:	fa43 f305 	asr.w	r3, r3, r5
   82b9a:	4159      	adcs	r1, r3
   82b9c:	e00e      	b.n	82bbc <__adddf3+0xd0>
   82b9e:	f1a5 0520 	sub.w	r5, r5, #32
   82ba2:	f10e 0e20 	add.w	lr, lr, #32
   82ba6:	2a01      	cmp	r2, #1
   82ba8:	fa03 fc0e 	lsl.w	ip, r3, lr
   82bac:	bf28      	it	cs
   82bae:	f04c 0c02 	orrcs.w	ip, ip, #2
   82bb2:	fa43 f305 	asr.w	r3, r3, r5
   82bb6:	18c0      	adds	r0, r0, r3
   82bb8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   82bbc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   82bc0:	d507      	bpl.n	82bd2 <__adddf3+0xe6>
   82bc2:	f04f 0e00 	mov.w	lr, #0
   82bc6:	f1dc 0c00 	rsbs	ip, ip, #0
   82bca:	eb7e 0000 	sbcs.w	r0, lr, r0
   82bce:	eb6e 0101 	sbc.w	r1, lr, r1
   82bd2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   82bd6:	d31b      	bcc.n	82c10 <__adddf3+0x124>
   82bd8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   82bdc:	d30c      	bcc.n	82bf8 <__adddf3+0x10c>
   82bde:	0849      	lsrs	r1, r1, #1
   82be0:	ea5f 0030 	movs.w	r0, r0, rrx
   82be4:	ea4f 0c3c 	mov.w	ip, ip, rrx
   82be8:	f104 0401 	add.w	r4, r4, #1
   82bec:	ea4f 5244 	mov.w	r2, r4, lsl #21
   82bf0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   82bf4:	f080 809a 	bcs.w	82d2c <__adddf3+0x240>
   82bf8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   82bfc:	bf08      	it	eq
   82bfe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   82c02:	f150 0000 	adcs.w	r0, r0, #0
   82c06:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   82c0a:	ea41 0105 	orr.w	r1, r1, r5
   82c0e:	bd30      	pop	{r4, r5, pc}
   82c10:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   82c14:	4140      	adcs	r0, r0
   82c16:	eb41 0101 	adc.w	r1, r1, r1
   82c1a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   82c1e:	f1a4 0401 	sub.w	r4, r4, #1
   82c22:	d1e9      	bne.n	82bf8 <__adddf3+0x10c>
   82c24:	f091 0f00 	teq	r1, #0
   82c28:	bf04      	itt	eq
   82c2a:	4601      	moveq	r1, r0
   82c2c:	2000      	moveq	r0, #0
   82c2e:	fab1 f381 	clz	r3, r1
   82c32:	bf08      	it	eq
   82c34:	3320      	addeq	r3, #32
   82c36:	f1a3 030b 	sub.w	r3, r3, #11
   82c3a:	f1b3 0220 	subs.w	r2, r3, #32
   82c3e:	da0c      	bge.n	82c5a <__adddf3+0x16e>
   82c40:	320c      	adds	r2, #12
   82c42:	dd08      	ble.n	82c56 <__adddf3+0x16a>
   82c44:	f102 0c14 	add.w	ip, r2, #20
   82c48:	f1c2 020c 	rsb	r2, r2, #12
   82c4c:	fa01 f00c 	lsl.w	r0, r1, ip
   82c50:	fa21 f102 	lsr.w	r1, r1, r2
   82c54:	e00c      	b.n	82c70 <__adddf3+0x184>
   82c56:	f102 0214 	add.w	r2, r2, #20
   82c5a:	bfd8      	it	le
   82c5c:	f1c2 0c20 	rsble	ip, r2, #32
   82c60:	fa01 f102 	lsl.w	r1, r1, r2
   82c64:	fa20 fc0c 	lsr.w	ip, r0, ip
   82c68:	bfdc      	itt	le
   82c6a:	ea41 010c 	orrle.w	r1, r1, ip
   82c6e:	4090      	lslle	r0, r2
   82c70:	1ae4      	subs	r4, r4, r3
   82c72:	bfa2      	ittt	ge
   82c74:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   82c78:	4329      	orrge	r1, r5
   82c7a:	bd30      	popge	{r4, r5, pc}
   82c7c:	ea6f 0404 	mvn.w	r4, r4
   82c80:	3c1f      	subs	r4, #31
   82c82:	da1c      	bge.n	82cbe <__adddf3+0x1d2>
   82c84:	340c      	adds	r4, #12
   82c86:	dc0e      	bgt.n	82ca6 <__adddf3+0x1ba>
   82c88:	f104 0414 	add.w	r4, r4, #20
   82c8c:	f1c4 0220 	rsb	r2, r4, #32
   82c90:	fa20 f004 	lsr.w	r0, r0, r4
   82c94:	fa01 f302 	lsl.w	r3, r1, r2
   82c98:	ea40 0003 	orr.w	r0, r0, r3
   82c9c:	fa21 f304 	lsr.w	r3, r1, r4
   82ca0:	ea45 0103 	orr.w	r1, r5, r3
   82ca4:	bd30      	pop	{r4, r5, pc}
   82ca6:	f1c4 040c 	rsb	r4, r4, #12
   82caa:	f1c4 0220 	rsb	r2, r4, #32
   82cae:	fa20 f002 	lsr.w	r0, r0, r2
   82cb2:	fa01 f304 	lsl.w	r3, r1, r4
   82cb6:	ea40 0003 	orr.w	r0, r0, r3
   82cba:	4629      	mov	r1, r5
   82cbc:	bd30      	pop	{r4, r5, pc}
   82cbe:	fa21 f004 	lsr.w	r0, r1, r4
   82cc2:	4629      	mov	r1, r5
   82cc4:	bd30      	pop	{r4, r5, pc}
   82cc6:	f094 0f00 	teq	r4, #0
   82cca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   82cce:	bf06      	itte	eq
   82cd0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   82cd4:	3401      	addeq	r4, #1
   82cd6:	3d01      	subne	r5, #1
   82cd8:	e74e      	b.n	82b78 <__adddf3+0x8c>
   82cda:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   82cde:	bf18      	it	ne
   82ce0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   82ce4:	d029      	beq.n	82d3a <__adddf3+0x24e>
   82ce6:	ea94 0f05 	teq	r4, r5
   82cea:	bf08      	it	eq
   82cec:	ea90 0f02 	teqeq	r0, r2
   82cf0:	d005      	beq.n	82cfe <__adddf3+0x212>
   82cf2:	ea54 0c00 	orrs.w	ip, r4, r0
   82cf6:	bf04      	itt	eq
   82cf8:	4619      	moveq	r1, r3
   82cfa:	4610      	moveq	r0, r2
   82cfc:	bd30      	pop	{r4, r5, pc}
   82cfe:	ea91 0f03 	teq	r1, r3
   82d02:	bf1e      	ittt	ne
   82d04:	2100      	movne	r1, #0
   82d06:	2000      	movne	r0, #0
   82d08:	bd30      	popne	{r4, r5, pc}
   82d0a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   82d0e:	d105      	bne.n	82d1c <__adddf3+0x230>
   82d10:	0040      	lsls	r0, r0, #1
   82d12:	4149      	adcs	r1, r1
   82d14:	bf28      	it	cs
   82d16:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   82d1a:	bd30      	pop	{r4, r5, pc}
   82d1c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   82d20:	bf3c      	itt	cc
   82d22:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   82d26:	bd30      	popcc	{r4, r5, pc}
   82d28:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   82d2c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   82d30:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   82d34:	f04f 0000 	mov.w	r0, #0
   82d38:	bd30      	pop	{r4, r5, pc}
   82d3a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   82d3e:	bf1a      	itte	ne
   82d40:	4619      	movne	r1, r3
   82d42:	4610      	movne	r0, r2
   82d44:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   82d48:	bf1c      	itt	ne
   82d4a:	460b      	movne	r3, r1
   82d4c:	4602      	movne	r2, r0
   82d4e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   82d52:	bf06      	itte	eq
   82d54:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   82d58:	ea91 0f03 	teqeq	r1, r3
   82d5c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   82d60:	bd30      	pop	{r4, r5, pc}
   82d62:	bf00      	nop

00082d64 <__aeabi_ui2d>:
   82d64:	f090 0f00 	teq	r0, #0
   82d68:	bf04      	itt	eq
   82d6a:	2100      	moveq	r1, #0
   82d6c:	4770      	bxeq	lr
   82d6e:	b530      	push	{r4, r5, lr}
   82d70:	f44f 6480 	mov.w	r4, #1024	; 0x400
   82d74:	f104 0432 	add.w	r4, r4, #50	; 0x32
   82d78:	f04f 0500 	mov.w	r5, #0
   82d7c:	f04f 0100 	mov.w	r1, #0
   82d80:	e750      	b.n	82c24 <__adddf3+0x138>
   82d82:	bf00      	nop

00082d84 <__aeabi_i2d>:
   82d84:	f090 0f00 	teq	r0, #0
   82d88:	bf04      	itt	eq
   82d8a:	2100      	moveq	r1, #0
   82d8c:	4770      	bxeq	lr
   82d8e:	b530      	push	{r4, r5, lr}
   82d90:	f44f 6480 	mov.w	r4, #1024	; 0x400
   82d94:	f104 0432 	add.w	r4, r4, #50	; 0x32
   82d98:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   82d9c:	bf48      	it	mi
   82d9e:	4240      	negmi	r0, r0
   82da0:	f04f 0100 	mov.w	r1, #0
   82da4:	e73e      	b.n	82c24 <__adddf3+0x138>
   82da6:	bf00      	nop

00082da8 <__aeabi_f2d>:
   82da8:	0042      	lsls	r2, r0, #1
   82daa:	ea4f 01e2 	mov.w	r1, r2, asr #3
   82dae:	ea4f 0131 	mov.w	r1, r1, rrx
   82db2:	ea4f 7002 	mov.w	r0, r2, lsl #28
   82db6:	bf1f      	itttt	ne
   82db8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   82dbc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   82dc0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   82dc4:	4770      	bxne	lr
   82dc6:	f092 0f00 	teq	r2, #0
   82dca:	bf14      	ite	ne
   82dcc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   82dd0:	4770      	bxeq	lr
   82dd2:	b530      	push	{r4, r5, lr}
   82dd4:	f44f 7460 	mov.w	r4, #896	; 0x380
   82dd8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   82ddc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   82de0:	e720      	b.n	82c24 <__adddf3+0x138>
   82de2:	bf00      	nop

00082de4 <__aeabi_ul2d>:
   82de4:	ea50 0201 	orrs.w	r2, r0, r1
   82de8:	bf08      	it	eq
   82dea:	4770      	bxeq	lr
   82dec:	b530      	push	{r4, r5, lr}
   82dee:	f04f 0500 	mov.w	r5, #0
   82df2:	e00a      	b.n	82e0a <__aeabi_l2d+0x16>

00082df4 <__aeabi_l2d>:
   82df4:	ea50 0201 	orrs.w	r2, r0, r1
   82df8:	bf08      	it	eq
   82dfa:	4770      	bxeq	lr
   82dfc:	b530      	push	{r4, r5, lr}
   82dfe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   82e02:	d502      	bpl.n	82e0a <__aeabi_l2d+0x16>
   82e04:	4240      	negs	r0, r0
   82e06:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   82e0a:	f44f 6480 	mov.w	r4, #1024	; 0x400
   82e0e:	f104 0432 	add.w	r4, r4, #50	; 0x32
   82e12:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   82e16:	f43f aedc 	beq.w	82bd2 <__adddf3+0xe6>
   82e1a:	f04f 0203 	mov.w	r2, #3
   82e1e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   82e22:	bf18      	it	ne
   82e24:	3203      	addne	r2, #3
   82e26:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   82e2a:	bf18      	it	ne
   82e2c:	3203      	addne	r2, #3
   82e2e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   82e32:	f1c2 0320 	rsb	r3, r2, #32
   82e36:	fa00 fc03 	lsl.w	ip, r0, r3
   82e3a:	fa20 f002 	lsr.w	r0, r0, r2
   82e3e:	fa01 fe03 	lsl.w	lr, r1, r3
   82e42:	ea40 000e 	orr.w	r0, r0, lr
   82e46:	fa21 f102 	lsr.w	r1, r1, r2
   82e4a:	4414      	add	r4, r2
   82e4c:	e6c1      	b.n	82bd2 <__adddf3+0xe6>
   82e4e:	bf00      	nop

00082e50 <__aeabi_dmul>:
   82e50:	b570      	push	{r4, r5, r6, lr}
   82e52:	f04f 0cff 	mov.w	ip, #255	; 0xff
   82e56:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   82e5a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   82e5e:	bf1d      	ittte	ne
   82e60:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   82e64:	ea94 0f0c 	teqne	r4, ip
   82e68:	ea95 0f0c 	teqne	r5, ip
   82e6c:	f000 f8de 	bleq	8302c <__aeabi_dmul+0x1dc>
   82e70:	442c      	add	r4, r5
   82e72:	ea81 0603 	eor.w	r6, r1, r3
   82e76:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   82e7a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   82e7e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   82e82:	bf18      	it	ne
   82e84:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   82e88:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   82e8c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   82e90:	d038      	beq.n	82f04 <__aeabi_dmul+0xb4>
   82e92:	fba0 ce02 	umull	ip, lr, r0, r2
   82e96:	f04f 0500 	mov.w	r5, #0
   82e9a:	fbe1 e502 	umlal	lr, r5, r1, r2
   82e9e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   82ea2:	fbe0 e503 	umlal	lr, r5, r0, r3
   82ea6:	f04f 0600 	mov.w	r6, #0
   82eaa:	fbe1 5603 	umlal	r5, r6, r1, r3
   82eae:	f09c 0f00 	teq	ip, #0
   82eb2:	bf18      	it	ne
   82eb4:	f04e 0e01 	orrne.w	lr, lr, #1
   82eb8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   82ebc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   82ec0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   82ec4:	d204      	bcs.n	82ed0 <__aeabi_dmul+0x80>
   82ec6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   82eca:	416d      	adcs	r5, r5
   82ecc:	eb46 0606 	adc.w	r6, r6, r6
   82ed0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   82ed4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   82ed8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   82edc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   82ee0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   82ee4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   82ee8:	bf88      	it	hi
   82eea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   82eee:	d81e      	bhi.n	82f2e <__aeabi_dmul+0xde>
   82ef0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   82ef4:	bf08      	it	eq
   82ef6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   82efa:	f150 0000 	adcs.w	r0, r0, #0
   82efe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   82f02:	bd70      	pop	{r4, r5, r6, pc}
   82f04:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   82f08:	ea46 0101 	orr.w	r1, r6, r1
   82f0c:	ea40 0002 	orr.w	r0, r0, r2
   82f10:	ea81 0103 	eor.w	r1, r1, r3
   82f14:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   82f18:	bfc2      	ittt	gt
   82f1a:	ebd4 050c 	rsbsgt	r5, r4, ip
   82f1e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   82f22:	bd70      	popgt	{r4, r5, r6, pc}
   82f24:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   82f28:	f04f 0e00 	mov.w	lr, #0
   82f2c:	3c01      	subs	r4, #1
   82f2e:	f300 80ab 	bgt.w	83088 <__aeabi_dmul+0x238>
   82f32:	f114 0f36 	cmn.w	r4, #54	; 0x36
   82f36:	bfde      	ittt	le
   82f38:	2000      	movle	r0, #0
   82f3a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   82f3e:	bd70      	pople	{r4, r5, r6, pc}
   82f40:	f1c4 0400 	rsb	r4, r4, #0
   82f44:	3c20      	subs	r4, #32
   82f46:	da35      	bge.n	82fb4 <__aeabi_dmul+0x164>
   82f48:	340c      	adds	r4, #12
   82f4a:	dc1b      	bgt.n	82f84 <__aeabi_dmul+0x134>
   82f4c:	f104 0414 	add.w	r4, r4, #20
   82f50:	f1c4 0520 	rsb	r5, r4, #32
   82f54:	fa00 f305 	lsl.w	r3, r0, r5
   82f58:	fa20 f004 	lsr.w	r0, r0, r4
   82f5c:	fa01 f205 	lsl.w	r2, r1, r5
   82f60:	ea40 0002 	orr.w	r0, r0, r2
   82f64:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   82f68:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   82f6c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   82f70:	fa21 f604 	lsr.w	r6, r1, r4
   82f74:	eb42 0106 	adc.w	r1, r2, r6
   82f78:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   82f7c:	bf08      	it	eq
   82f7e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   82f82:	bd70      	pop	{r4, r5, r6, pc}
   82f84:	f1c4 040c 	rsb	r4, r4, #12
   82f88:	f1c4 0520 	rsb	r5, r4, #32
   82f8c:	fa00 f304 	lsl.w	r3, r0, r4
   82f90:	fa20 f005 	lsr.w	r0, r0, r5
   82f94:	fa01 f204 	lsl.w	r2, r1, r4
   82f98:	ea40 0002 	orr.w	r0, r0, r2
   82f9c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   82fa0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   82fa4:	f141 0100 	adc.w	r1, r1, #0
   82fa8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   82fac:	bf08      	it	eq
   82fae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   82fb2:	bd70      	pop	{r4, r5, r6, pc}
   82fb4:	f1c4 0520 	rsb	r5, r4, #32
   82fb8:	fa00 f205 	lsl.w	r2, r0, r5
   82fbc:	ea4e 0e02 	orr.w	lr, lr, r2
   82fc0:	fa20 f304 	lsr.w	r3, r0, r4
   82fc4:	fa01 f205 	lsl.w	r2, r1, r5
   82fc8:	ea43 0302 	orr.w	r3, r3, r2
   82fcc:	fa21 f004 	lsr.w	r0, r1, r4
   82fd0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   82fd4:	fa21 f204 	lsr.w	r2, r1, r4
   82fd8:	ea20 0002 	bic.w	r0, r0, r2
   82fdc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   82fe0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   82fe4:	bf08      	it	eq
   82fe6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   82fea:	bd70      	pop	{r4, r5, r6, pc}
   82fec:	f094 0f00 	teq	r4, #0
   82ff0:	d10f      	bne.n	83012 <__aeabi_dmul+0x1c2>
   82ff2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   82ff6:	0040      	lsls	r0, r0, #1
   82ff8:	eb41 0101 	adc.w	r1, r1, r1
   82ffc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   83000:	bf08      	it	eq
   83002:	3c01      	subeq	r4, #1
   83004:	d0f7      	beq.n	82ff6 <__aeabi_dmul+0x1a6>
   83006:	ea41 0106 	orr.w	r1, r1, r6
   8300a:	f095 0f00 	teq	r5, #0
   8300e:	bf18      	it	ne
   83010:	4770      	bxne	lr
   83012:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   83016:	0052      	lsls	r2, r2, #1
   83018:	eb43 0303 	adc.w	r3, r3, r3
   8301c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   83020:	bf08      	it	eq
   83022:	3d01      	subeq	r5, #1
   83024:	d0f7      	beq.n	83016 <__aeabi_dmul+0x1c6>
   83026:	ea43 0306 	orr.w	r3, r3, r6
   8302a:	4770      	bx	lr
   8302c:	ea94 0f0c 	teq	r4, ip
   83030:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   83034:	bf18      	it	ne
   83036:	ea95 0f0c 	teqne	r5, ip
   8303a:	d00c      	beq.n	83056 <__aeabi_dmul+0x206>
   8303c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   83040:	bf18      	it	ne
   83042:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   83046:	d1d1      	bne.n	82fec <__aeabi_dmul+0x19c>
   83048:	ea81 0103 	eor.w	r1, r1, r3
   8304c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   83050:	f04f 0000 	mov.w	r0, #0
   83054:	bd70      	pop	{r4, r5, r6, pc}
   83056:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   8305a:	bf06      	itte	eq
   8305c:	4610      	moveq	r0, r2
   8305e:	4619      	moveq	r1, r3
   83060:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   83064:	d019      	beq.n	8309a <__aeabi_dmul+0x24a>
   83066:	ea94 0f0c 	teq	r4, ip
   8306a:	d102      	bne.n	83072 <__aeabi_dmul+0x222>
   8306c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   83070:	d113      	bne.n	8309a <__aeabi_dmul+0x24a>
   83072:	ea95 0f0c 	teq	r5, ip
   83076:	d105      	bne.n	83084 <__aeabi_dmul+0x234>
   83078:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   8307c:	bf1c      	itt	ne
   8307e:	4610      	movne	r0, r2
   83080:	4619      	movne	r1, r3
   83082:	d10a      	bne.n	8309a <__aeabi_dmul+0x24a>
   83084:	ea81 0103 	eor.w	r1, r1, r3
   83088:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   8308c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   83090:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   83094:	f04f 0000 	mov.w	r0, #0
   83098:	bd70      	pop	{r4, r5, r6, pc}
   8309a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   8309e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   830a2:	bd70      	pop	{r4, r5, r6, pc}

000830a4 <__aeabi_ddiv>:
   830a4:	b570      	push	{r4, r5, r6, lr}
   830a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
   830aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   830ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   830b2:	bf1d      	ittte	ne
   830b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   830b8:	ea94 0f0c 	teqne	r4, ip
   830bc:	ea95 0f0c 	teqne	r5, ip
   830c0:	f000 f8a7 	bleq	83212 <__aeabi_ddiv+0x16e>
   830c4:	eba4 0405 	sub.w	r4, r4, r5
   830c8:	ea81 0e03 	eor.w	lr, r1, r3
   830cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   830d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
   830d4:	f000 8088 	beq.w	831e8 <__aeabi_ddiv+0x144>
   830d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
   830dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   830e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   830e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   830e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
   830ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   830f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   830f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
   830f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   830fc:	429d      	cmp	r5, r3
   830fe:	bf08      	it	eq
   83100:	4296      	cmpeq	r6, r2
   83102:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   83106:	f504 7440 	add.w	r4, r4, #768	; 0x300
   8310a:	d202      	bcs.n	83112 <__aeabi_ddiv+0x6e>
   8310c:	085b      	lsrs	r3, r3, #1
   8310e:	ea4f 0232 	mov.w	r2, r2, rrx
   83112:	1ab6      	subs	r6, r6, r2
   83114:	eb65 0503 	sbc.w	r5, r5, r3
   83118:	085b      	lsrs	r3, r3, #1
   8311a:	ea4f 0232 	mov.w	r2, r2, rrx
   8311e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   83122:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   83126:	ebb6 0e02 	subs.w	lr, r6, r2
   8312a:	eb75 0e03 	sbcs.w	lr, r5, r3
   8312e:	bf22      	ittt	cs
   83130:	1ab6      	subcs	r6, r6, r2
   83132:	4675      	movcs	r5, lr
   83134:	ea40 000c 	orrcs.w	r0, r0, ip
   83138:	085b      	lsrs	r3, r3, #1
   8313a:	ea4f 0232 	mov.w	r2, r2, rrx
   8313e:	ebb6 0e02 	subs.w	lr, r6, r2
   83142:	eb75 0e03 	sbcs.w	lr, r5, r3
   83146:	bf22      	ittt	cs
   83148:	1ab6      	subcs	r6, r6, r2
   8314a:	4675      	movcs	r5, lr
   8314c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   83150:	085b      	lsrs	r3, r3, #1
   83152:	ea4f 0232 	mov.w	r2, r2, rrx
   83156:	ebb6 0e02 	subs.w	lr, r6, r2
   8315a:	eb75 0e03 	sbcs.w	lr, r5, r3
   8315e:	bf22      	ittt	cs
   83160:	1ab6      	subcs	r6, r6, r2
   83162:	4675      	movcs	r5, lr
   83164:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   83168:	085b      	lsrs	r3, r3, #1
   8316a:	ea4f 0232 	mov.w	r2, r2, rrx
   8316e:	ebb6 0e02 	subs.w	lr, r6, r2
   83172:	eb75 0e03 	sbcs.w	lr, r5, r3
   83176:	bf22      	ittt	cs
   83178:	1ab6      	subcs	r6, r6, r2
   8317a:	4675      	movcs	r5, lr
   8317c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   83180:	ea55 0e06 	orrs.w	lr, r5, r6
   83184:	d018      	beq.n	831b8 <__aeabi_ddiv+0x114>
   83186:	ea4f 1505 	mov.w	r5, r5, lsl #4
   8318a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   8318e:	ea4f 1606 	mov.w	r6, r6, lsl #4
   83192:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   83196:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   8319a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   8319e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   831a2:	d1c0      	bne.n	83126 <__aeabi_ddiv+0x82>
   831a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   831a8:	d10b      	bne.n	831c2 <__aeabi_ddiv+0x11e>
   831aa:	ea41 0100 	orr.w	r1, r1, r0
   831ae:	f04f 0000 	mov.w	r0, #0
   831b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   831b6:	e7b6      	b.n	83126 <__aeabi_ddiv+0x82>
   831b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   831bc:	bf04      	itt	eq
   831be:	4301      	orreq	r1, r0
   831c0:	2000      	moveq	r0, #0
   831c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   831c6:	bf88      	it	hi
   831c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   831cc:	f63f aeaf 	bhi.w	82f2e <__aeabi_dmul+0xde>
   831d0:	ebb5 0c03 	subs.w	ip, r5, r3
   831d4:	bf04      	itt	eq
   831d6:	ebb6 0c02 	subseq.w	ip, r6, r2
   831da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   831de:	f150 0000 	adcs.w	r0, r0, #0
   831e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   831e6:	bd70      	pop	{r4, r5, r6, pc}
   831e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   831ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   831f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   831f4:	bfc2      	ittt	gt
   831f6:	ebd4 050c 	rsbsgt	r5, r4, ip
   831fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   831fe:	bd70      	popgt	{r4, r5, r6, pc}
   83200:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   83204:	f04f 0e00 	mov.w	lr, #0
   83208:	3c01      	subs	r4, #1
   8320a:	e690      	b.n	82f2e <__aeabi_dmul+0xde>
   8320c:	ea45 0e06 	orr.w	lr, r5, r6
   83210:	e68d      	b.n	82f2e <__aeabi_dmul+0xde>
   83212:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   83216:	ea94 0f0c 	teq	r4, ip
   8321a:	bf08      	it	eq
   8321c:	ea95 0f0c 	teqeq	r5, ip
   83220:	f43f af3b 	beq.w	8309a <__aeabi_dmul+0x24a>
   83224:	ea94 0f0c 	teq	r4, ip
   83228:	d10a      	bne.n	83240 <__aeabi_ddiv+0x19c>
   8322a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   8322e:	f47f af34 	bne.w	8309a <__aeabi_dmul+0x24a>
   83232:	ea95 0f0c 	teq	r5, ip
   83236:	f47f af25 	bne.w	83084 <__aeabi_dmul+0x234>
   8323a:	4610      	mov	r0, r2
   8323c:	4619      	mov	r1, r3
   8323e:	e72c      	b.n	8309a <__aeabi_dmul+0x24a>
   83240:	ea95 0f0c 	teq	r5, ip
   83244:	d106      	bne.n	83254 <__aeabi_ddiv+0x1b0>
   83246:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   8324a:	f43f aefd 	beq.w	83048 <__aeabi_dmul+0x1f8>
   8324e:	4610      	mov	r0, r2
   83250:	4619      	mov	r1, r3
   83252:	e722      	b.n	8309a <__aeabi_dmul+0x24a>
   83254:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   83258:	bf18      	it	ne
   8325a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   8325e:	f47f aec5 	bne.w	82fec <__aeabi_dmul+0x19c>
   83262:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   83266:	f47f af0d 	bne.w	83084 <__aeabi_dmul+0x234>
   8326a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   8326e:	f47f aeeb 	bne.w	83048 <__aeabi_dmul+0x1f8>
   83272:	e712      	b.n	8309a <__aeabi_dmul+0x24a>

00083274 <__gedf2>:
   83274:	f04f 3cff 	mov.w	ip, #4294967295
   83278:	e006      	b.n	83288 <__cmpdf2+0x4>
   8327a:	bf00      	nop

0008327c <__ledf2>:
   8327c:	f04f 0c01 	mov.w	ip, #1
   83280:	e002      	b.n	83288 <__cmpdf2+0x4>
   83282:	bf00      	nop

00083284 <__cmpdf2>:
   83284:	f04f 0c01 	mov.w	ip, #1
   83288:	f84d cd04 	str.w	ip, [sp, #-4]!
   8328c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   83290:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   83294:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   83298:	bf18      	it	ne
   8329a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   8329e:	d01b      	beq.n	832d8 <__cmpdf2+0x54>
   832a0:	b001      	add	sp, #4
   832a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   832a6:	bf0c      	ite	eq
   832a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   832ac:	ea91 0f03 	teqne	r1, r3
   832b0:	bf02      	ittt	eq
   832b2:	ea90 0f02 	teqeq	r0, r2
   832b6:	2000      	moveq	r0, #0
   832b8:	4770      	bxeq	lr
   832ba:	f110 0f00 	cmn.w	r0, #0
   832be:	ea91 0f03 	teq	r1, r3
   832c2:	bf58      	it	pl
   832c4:	4299      	cmppl	r1, r3
   832c6:	bf08      	it	eq
   832c8:	4290      	cmpeq	r0, r2
   832ca:	bf2c      	ite	cs
   832cc:	17d8      	asrcs	r0, r3, #31
   832ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   832d2:	f040 0001 	orr.w	r0, r0, #1
   832d6:	4770      	bx	lr
   832d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   832dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   832e0:	d102      	bne.n	832e8 <__cmpdf2+0x64>
   832e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   832e6:	d107      	bne.n	832f8 <__cmpdf2+0x74>
   832e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   832ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   832f0:	d1d6      	bne.n	832a0 <__cmpdf2+0x1c>
   832f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   832f6:	d0d3      	beq.n	832a0 <__cmpdf2+0x1c>
   832f8:	f85d 0b04 	ldr.w	r0, [sp], #4
   832fc:	4770      	bx	lr
   832fe:	bf00      	nop

00083300 <__aeabi_cdrcmple>:
   83300:	4684      	mov	ip, r0
   83302:	4610      	mov	r0, r2
   83304:	4662      	mov	r2, ip
   83306:	468c      	mov	ip, r1
   83308:	4619      	mov	r1, r3
   8330a:	4663      	mov	r3, ip
   8330c:	e000      	b.n	83310 <__aeabi_cdcmpeq>
   8330e:	bf00      	nop

00083310 <__aeabi_cdcmpeq>:
   83310:	b501      	push	{r0, lr}
   83312:	f7ff ffb7 	bl	83284 <__cmpdf2>
   83316:	2800      	cmp	r0, #0
   83318:	bf48      	it	mi
   8331a:	f110 0f00 	cmnmi.w	r0, #0
   8331e:	bd01      	pop	{r0, pc}

00083320 <__aeabi_dcmpeq>:
   83320:	f84d ed08 	str.w	lr, [sp, #-8]!
   83324:	f7ff fff4 	bl	83310 <__aeabi_cdcmpeq>
   83328:	bf0c      	ite	eq
   8332a:	2001      	moveq	r0, #1
   8332c:	2000      	movne	r0, #0
   8332e:	f85d fb08 	ldr.w	pc, [sp], #8
   83332:	bf00      	nop

00083334 <__aeabi_dcmplt>:
   83334:	f84d ed08 	str.w	lr, [sp, #-8]!
   83338:	f7ff ffea 	bl	83310 <__aeabi_cdcmpeq>
   8333c:	bf34      	ite	cc
   8333e:	2001      	movcc	r0, #1
   83340:	2000      	movcs	r0, #0
   83342:	f85d fb08 	ldr.w	pc, [sp], #8
   83346:	bf00      	nop

00083348 <__aeabi_dcmple>:
   83348:	f84d ed08 	str.w	lr, [sp, #-8]!
   8334c:	f7ff ffe0 	bl	83310 <__aeabi_cdcmpeq>
   83350:	bf94      	ite	ls
   83352:	2001      	movls	r0, #1
   83354:	2000      	movhi	r0, #0
   83356:	f85d fb08 	ldr.w	pc, [sp], #8
   8335a:	bf00      	nop

0008335c <__aeabi_dcmpge>:
   8335c:	f84d ed08 	str.w	lr, [sp, #-8]!
   83360:	f7ff ffce 	bl	83300 <__aeabi_cdrcmple>
   83364:	bf94      	ite	ls
   83366:	2001      	movls	r0, #1
   83368:	2000      	movhi	r0, #0
   8336a:	f85d fb08 	ldr.w	pc, [sp], #8
   8336e:	bf00      	nop

00083370 <__aeabi_dcmpgt>:
   83370:	f84d ed08 	str.w	lr, [sp, #-8]!
   83374:	f7ff ffc4 	bl	83300 <__aeabi_cdrcmple>
   83378:	bf34      	ite	cc
   8337a:	2001      	movcc	r0, #1
   8337c:	2000      	movcs	r0, #0
   8337e:	f85d fb08 	ldr.w	pc, [sp], #8
   83382:	bf00      	nop

00083384 <__aeabi_d2iz>:
   83384:	ea4f 0241 	mov.w	r2, r1, lsl #1
   83388:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   8338c:	d215      	bcs.n	833ba <__aeabi_d2iz+0x36>
   8338e:	d511      	bpl.n	833b4 <__aeabi_d2iz+0x30>
   83390:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   83394:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   83398:	d912      	bls.n	833c0 <__aeabi_d2iz+0x3c>
   8339a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   8339e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   833a2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   833a6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   833aa:	fa23 f002 	lsr.w	r0, r3, r2
   833ae:	bf18      	it	ne
   833b0:	4240      	negne	r0, r0
   833b2:	4770      	bx	lr
   833b4:	f04f 0000 	mov.w	r0, #0
   833b8:	4770      	bx	lr
   833ba:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   833be:	d105      	bne.n	833cc <__aeabi_d2iz+0x48>
   833c0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   833c4:	bf08      	it	eq
   833c6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   833ca:	4770      	bx	lr
   833cc:	f04f 0000 	mov.w	r0, #0
   833d0:	4770      	bx	lr
   833d2:	bf00      	nop

000833d4 <__libc_init_array>:
   833d4:	b570      	push	{r4, r5, r6, lr}
   833d6:	4e0f      	ldr	r6, [pc, #60]	; (83414 <__libc_init_array+0x40>)
   833d8:	4d0f      	ldr	r5, [pc, #60]	; (83418 <__libc_init_array+0x44>)
   833da:	1b76      	subs	r6, r6, r5
   833dc:	10b6      	asrs	r6, r6, #2
   833de:	d007      	beq.n	833f0 <__libc_init_array+0x1c>
   833e0:	3d04      	subs	r5, #4
   833e2:	2400      	movs	r4, #0
   833e4:	3401      	adds	r4, #1
   833e6:	f855 3f04 	ldr.w	r3, [r5, #4]!
   833ea:	4798      	blx	r3
   833ec:	42a6      	cmp	r6, r4
   833ee:	d1f9      	bne.n	833e4 <__libc_init_array+0x10>
   833f0:	4e0a      	ldr	r6, [pc, #40]	; (8341c <__libc_init_array+0x48>)
   833f2:	4d0b      	ldr	r5, [pc, #44]	; (83420 <__libc_init_array+0x4c>)
   833f4:	f003 f8ba 	bl	8656c <_init>
   833f8:	1b76      	subs	r6, r6, r5
   833fa:	10b6      	asrs	r6, r6, #2
   833fc:	d008      	beq.n	83410 <__libc_init_array+0x3c>
   833fe:	3d04      	subs	r5, #4
   83400:	2400      	movs	r4, #0
   83402:	3401      	adds	r4, #1
   83404:	f855 3f04 	ldr.w	r3, [r5, #4]!
   83408:	4798      	blx	r3
   8340a:	42a6      	cmp	r6, r4
   8340c:	d1f9      	bne.n	83402 <__libc_init_array+0x2e>
   8340e:	bd70      	pop	{r4, r5, r6, pc}
   83410:	bd70      	pop	{r4, r5, r6, pc}
   83412:	bf00      	nop
   83414:	00086578 	.word	0x00086578
   83418:	00086578 	.word	0x00086578
   8341c:	00086580 	.word	0x00086580
   83420:	00086578 	.word	0x00086578

00083424 <iprintf>:
   83424:	b40f      	push	{r0, r1, r2, r3}
   83426:	b510      	push	{r4, lr}
   83428:	4b07      	ldr	r3, [pc, #28]	; (83448 <iprintf+0x24>)
   8342a:	b082      	sub	sp, #8
   8342c:	ac04      	add	r4, sp, #16
   8342e:	f854 2b04 	ldr.w	r2, [r4], #4
   83432:	6818      	ldr	r0, [r3, #0]
   83434:	4623      	mov	r3, r4
   83436:	6881      	ldr	r1, [r0, #8]
   83438:	9401      	str	r4, [sp, #4]
   8343a:	f000 f9ed 	bl	83818 <_vfiprintf_r>
   8343e:	b002      	add	sp, #8
   83440:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   83444:	b004      	add	sp, #16
   83446:	4770      	bx	lr
   83448:	20070568 	.word	0x20070568

0008344c <memcpy>:
   8344c:	4684      	mov	ip, r0
   8344e:	ea41 0300 	orr.w	r3, r1, r0
   83452:	f013 0303 	ands.w	r3, r3, #3
   83456:	d149      	bne.n	834ec <memcpy+0xa0>
   83458:	3a40      	subs	r2, #64	; 0x40
   8345a:	d323      	bcc.n	834a4 <memcpy+0x58>
   8345c:	680b      	ldr	r3, [r1, #0]
   8345e:	6003      	str	r3, [r0, #0]
   83460:	684b      	ldr	r3, [r1, #4]
   83462:	6043      	str	r3, [r0, #4]
   83464:	688b      	ldr	r3, [r1, #8]
   83466:	6083      	str	r3, [r0, #8]
   83468:	68cb      	ldr	r3, [r1, #12]
   8346a:	60c3      	str	r3, [r0, #12]
   8346c:	690b      	ldr	r3, [r1, #16]
   8346e:	6103      	str	r3, [r0, #16]
   83470:	694b      	ldr	r3, [r1, #20]
   83472:	6143      	str	r3, [r0, #20]
   83474:	698b      	ldr	r3, [r1, #24]
   83476:	6183      	str	r3, [r0, #24]
   83478:	69cb      	ldr	r3, [r1, #28]
   8347a:	61c3      	str	r3, [r0, #28]
   8347c:	6a0b      	ldr	r3, [r1, #32]
   8347e:	6203      	str	r3, [r0, #32]
   83480:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   83482:	6243      	str	r3, [r0, #36]	; 0x24
   83484:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   83486:	6283      	str	r3, [r0, #40]	; 0x28
   83488:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   8348a:	62c3      	str	r3, [r0, #44]	; 0x2c
   8348c:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   8348e:	6303      	str	r3, [r0, #48]	; 0x30
   83490:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   83492:	6343      	str	r3, [r0, #52]	; 0x34
   83494:	6b8b      	ldr	r3, [r1, #56]	; 0x38
   83496:	6383      	str	r3, [r0, #56]	; 0x38
   83498:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   8349a:	63c3      	str	r3, [r0, #60]	; 0x3c
   8349c:	3040      	adds	r0, #64	; 0x40
   8349e:	3140      	adds	r1, #64	; 0x40
   834a0:	3a40      	subs	r2, #64	; 0x40
   834a2:	d2db      	bcs.n	8345c <memcpy+0x10>
   834a4:	3230      	adds	r2, #48	; 0x30
   834a6:	d30b      	bcc.n	834c0 <memcpy+0x74>
   834a8:	680b      	ldr	r3, [r1, #0]
   834aa:	6003      	str	r3, [r0, #0]
   834ac:	684b      	ldr	r3, [r1, #4]
   834ae:	6043      	str	r3, [r0, #4]
   834b0:	688b      	ldr	r3, [r1, #8]
   834b2:	6083      	str	r3, [r0, #8]
   834b4:	68cb      	ldr	r3, [r1, #12]
   834b6:	60c3      	str	r3, [r0, #12]
   834b8:	3010      	adds	r0, #16
   834ba:	3110      	adds	r1, #16
   834bc:	3a10      	subs	r2, #16
   834be:	d2f3      	bcs.n	834a8 <memcpy+0x5c>
   834c0:	320c      	adds	r2, #12
   834c2:	d305      	bcc.n	834d0 <memcpy+0x84>
   834c4:	f851 3b04 	ldr.w	r3, [r1], #4
   834c8:	f840 3b04 	str.w	r3, [r0], #4
   834cc:	3a04      	subs	r2, #4
   834ce:	d2f9      	bcs.n	834c4 <memcpy+0x78>
   834d0:	3204      	adds	r2, #4
   834d2:	d008      	beq.n	834e6 <memcpy+0x9a>
   834d4:	07d2      	lsls	r2, r2, #31
   834d6:	bf1c      	itt	ne
   834d8:	f811 3b01 	ldrbne.w	r3, [r1], #1
   834dc:	f800 3b01 	strbne.w	r3, [r0], #1
   834e0:	d301      	bcc.n	834e6 <memcpy+0x9a>
   834e2:	880b      	ldrh	r3, [r1, #0]
   834e4:	8003      	strh	r3, [r0, #0]
   834e6:	4660      	mov	r0, ip
   834e8:	4770      	bx	lr
   834ea:	bf00      	nop
   834ec:	2a08      	cmp	r2, #8
   834ee:	d313      	bcc.n	83518 <memcpy+0xcc>
   834f0:	078b      	lsls	r3, r1, #30
   834f2:	d0b1      	beq.n	83458 <memcpy+0xc>
   834f4:	f010 0303 	ands.w	r3, r0, #3
   834f8:	d0ae      	beq.n	83458 <memcpy+0xc>
   834fa:	f1c3 0304 	rsb	r3, r3, #4
   834fe:	1ad2      	subs	r2, r2, r3
   83500:	07db      	lsls	r3, r3, #31
   83502:	bf1c      	itt	ne
   83504:	f811 3b01 	ldrbne.w	r3, [r1], #1
   83508:	f800 3b01 	strbne.w	r3, [r0], #1
   8350c:	d3a4      	bcc.n	83458 <memcpy+0xc>
   8350e:	f831 3b02 	ldrh.w	r3, [r1], #2
   83512:	f820 3b02 	strh.w	r3, [r0], #2
   83516:	e79f      	b.n	83458 <memcpy+0xc>
   83518:	3a04      	subs	r2, #4
   8351a:	d3d9      	bcc.n	834d0 <memcpy+0x84>
   8351c:	3a01      	subs	r2, #1
   8351e:	f811 3b01 	ldrb.w	r3, [r1], #1
   83522:	f800 3b01 	strb.w	r3, [r0], #1
   83526:	d2f9      	bcs.n	8351c <memcpy+0xd0>
   83528:	780b      	ldrb	r3, [r1, #0]
   8352a:	7003      	strb	r3, [r0, #0]
   8352c:	784b      	ldrb	r3, [r1, #1]
   8352e:	7043      	strb	r3, [r0, #1]
   83530:	788b      	ldrb	r3, [r1, #2]
   83532:	7083      	strb	r3, [r0, #2]
   83534:	4660      	mov	r0, ip
   83536:	4770      	bx	lr

00083538 <memset>:
   83538:	b4f0      	push	{r4, r5, r6, r7}
   8353a:	0784      	lsls	r4, r0, #30
   8353c:	d043      	beq.n	835c6 <memset+0x8e>
   8353e:	1e54      	subs	r4, r2, #1
   83540:	2a00      	cmp	r2, #0
   83542:	d03e      	beq.n	835c2 <memset+0x8a>
   83544:	b2cd      	uxtb	r5, r1
   83546:	4603      	mov	r3, r0
   83548:	e003      	b.n	83552 <memset+0x1a>
   8354a:	1e62      	subs	r2, r4, #1
   8354c:	2c00      	cmp	r4, #0
   8354e:	d038      	beq.n	835c2 <memset+0x8a>
   83550:	4614      	mov	r4, r2
   83552:	f803 5b01 	strb.w	r5, [r3], #1
   83556:	079a      	lsls	r2, r3, #30
   83558:	d1f7      	bne.n	8354a <memset+0x12>
   8355a:	2c03      	cmp	r4, #3
   8355c:	d92a      	bls.n	835b4 <memset+0x7c>
   8355e:	b2cd      	uxtb	r5, r1
   83560:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   83564:	2c0f      	cmp	r4, #15
   83566:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   8356a:	d915      	bls.n	83598 <memset+0x60>
   8356c:	f1a4 0710 	sub.w	r7, r4, #16
   83570:	093f      	lsrs	r7, r7, #4
   83572:	f103 0610 	add.w	r6, r3, #16
   83576:	eb06 1607 	add.w	r6, r6, r7, lsl #4
   8357a:	461a      	mov	r2, r3
   8357c:	6015      	str	r5, [r2, #0]
   8357e:	6055      	str	r5, [r2, #4]
   83580:	6095      	str	r5, [r2, #8]
   83582:	60d5      	str	r5, [r2, #12]
   83584:	3210      	adds	r2, #16
   83586:	42b2      	cmp	r2, r6
   83588:	d1f8      	bne.n	8357c <memset+0x44>
   8358a:	f004 040f 	and.w	r4, r4, #15
   8358e:	3701      	adds	r7, #1
   83590:	2c03      	cmp	r4, #3
   83592:	eb03 1307 	add.w	r3, r3, r7, lsl #4
   83596:	d90d      	bls.n	835b4 <memset+0x7c>
   83598:	461e      	mov	r6, r3
   8359a:	4622      	mov	r2, r4
   8359c:	3a04      	subs	r2, #4
   8359e:	2a03      	cmp	r2, #3
   835a0:	f846 5b04 	str.w	r5, [r6], #4
   835a4:	d8fa      	bhi.n	8359c <memset+0x64>
   835a6:	1f22      	subs	r2, r4, #4
   835a8:	f022 0203 	bic.w	r2, r2, #3
   835ac:	3204      	adds	r2, #4
   835ae:	4413      	add	r3, r2
   835b0:	f004 0403 	and.w	r4, r4, #3
   835b4:	b12c      	cbz	r4, 835c2 <memset+0x8a>
   835b6:	b2c9      	uxtb	r1, r1
   835b8:	441c      	add	r4, r3
   835ba:	f803 1b01 	strb.w	r1, [r3], #1
   835be:	42a3      	cmp	r3, r4
   835c0:	d1fb      	bne.n	835ba <memset+0x82>
   835c2:	bcf0      	pop	{r4, r5, r6, r7}
   835c4:	4770      	bx	lr
   835c6:	4614      	mov	r4, r2
   835c8:	4603      	mov	r3, r0
   835ca:	e7c6      	b.n	8355a <memset+0x22>

000835cc <setbuf>:
   835cc:	2900      	cmp	r1, #0
   835ce:	bf0c      	ite	eq
   835d0:	2202      	moveq	r2, #2
   835d2:	2200      	movne	r2, #0
   835d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
   835d8:	f000 b800 	b.w	835dc <setvbuf>

000835dc <setvbuf>:
   835dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   835e0:	4d3c      	ldr	r5, [pc, #240]	; (836d4 <setvbuf+0xf8>)
   835e2:	4604      	mov	r4, r0
   835e4:	682d      	ldr	r5, [r5, #0]
   835e6:	4688      	mov	r8, r1
   835e8:	4616      	mov	r6, r2
   835ea:	461f      	mov	r7, r3
   835ec:	b115      	cbz	r5, 835f4 <setvbuf+0x18>
   835ee:	6bab      	ldr	r3, [r5, #56]	; 0x38
   835f0:	2b00      	cmp	r3, #0
   835f2:	d04f      	beq.n	83694 <setvbuf+0xb8>
   835f4:	2e02      	cmp	r6, #2
   835f6:	d830      	bhi.n	8365a <setvbuf+0x7e>
   835f8:	2f00      	cmp	r7, #0
   835fa:	db2e      	blt.n	8365a <setvbuf+0x7e>
   835fc:	4628      	mov	r0, r5
   835fe:	4621      	mov	r1, r4
   83600:	f001 f888 	bl	84714 <_fflush_r>
   83604:	89a3      	ldrh	r3, [r4, #12]
   83606:	2200      	movs	r2, #0
   83608:	6062      	str	r2, [r4, #4]
   8360a:	61a2      	str	r2, [r4, #24]
   8360c:	061a      	lsls	r2, r3, #24
   8360e:	d428      	bmi.n	83662 <setvbuf+0x86>
   83610:	f023 0383 	bic.w	r3, r3, #131	; 0x83
   83614:	b29b      	uxth	r3, r3
   83616:	2e02      	cmp	r6, #2
   83618:	81a3      	strh	r3, [r4, #12]
   8361a:	d02d      	beq.n	83678 <setvbuf+0x9c>
   8361c:	f1b8 0f00 	cmp.w	r8, #0
   83620:	d03c      	beq.n	8369c <setvbuf+0xc0>
   83622:	2e01      	cmp	r6, #1
   83624:	d013      	beq.n	8364e <setvbuf+0x72>
   83626:	b29b      	uxth	r3, r3
   83628:	f003 0008 	and.w	r0, r3, #8
   8362c:	4a2a      	ldr	r2, [pc, #168]	; (836d8 <setvbuf+0xfc>)
   8362e:	b280      	uxth	r0, r0
   83630:	63ea      	str	r2, [r5, #60]	; 0x3c
   83632:	f8c4 8000 	str.w	r8, [r4]
   83636:	f8c4 8010 	str.w	r8, [r4, #16]
   8363a:	6167      	str	r7, [r4, #20]
   8363c:	b178      	cbz	r0, 8365e <setvbuf+0x82>
   8363e:	f013 0f03 	tst.w	r3, #3
   83642:	bf18      	it	ne
   83644:	2700      	movne	r7, #0
   83646:	60a7      	str	r7, [r4, #8]
   83648:	2000      	movs	r0, #0
   8364a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8364e:	f043 0301 	orr.w	r3, r3, #1
   83652:	427a      	negs	r2, r7
   83654:	81a3      	strh	r3, [r4, #12]
   83656:	61a2      	str	r2, [r4, #24]
   83658:	e7e5      	b.n	83626 <setvbuf+0x4a>
   8365a:	f04f 30ff 	mov.w	r0, #4294967295
   8365e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   83662:	4628      	mov	r0, r5
   83664:	6921      	ldr	r1, [r4, #16]
   83666:	f001 f9b5 	bl	849d4 <_free_r>
   8366a:	89a3      	ldrh	r3, [r4, #12]
   8366c:	2e02      	cmp	r6, #2
   8366e:	f023 0383 	bic.w	r3, r3, #131	; 0x83
   83672:	b29b      	uxth	r3, r3
   83674:	81a3      	strh	r3, [r4, #12]
   83676:	d1d1      	bne.n	8361c <setvbuf+0x40>
   83678:	2000      	movs	r0, #0
   8367a:	f104 0243 	add.w	r2, r4, #67	; 0x43
   8367e:	f043 0302 	orr.w	r3, r3, #2
   83682:	2500      	movs	r5, #0
   83684:	2101      	movs	r1, #1
   83686:	81a3      	strh	r3, [r4, #12]
   83688:	60a5      	str	r5, [r4, #8]
   8368a:	6022      	str	r2, [r4, #0]
   8368c:	6122      	str	r2, [r4, #16]
   8368e:	6161      	str	r1, [r4, #20]
   83690:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   83694:	4628      	mov	r0, r5
   83696:	f001 f859 	bl	8474c <__sinit>
   8369a:	e7ab      	b.n	835f4 <setvbuf+0x18>
   8369c:	2f00      	cmp	r7, #0
   8369e:	bf08      	it	eq
   836a0:	f44f 6780 	moveq.w	r7, #1024	; 0x400
   836a4:	4638      	mov	r0, r7
   836a6:	f001 fc8b 	bl	84fc0 <malloc>
   836aa:	4680      	mov	r8, r0
   836ac:	b128      	cbz	r0, 836ba <setvbuf+0xde>
   836ae:	89a3      	ldrh	r3, [r4, #12]
   836b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   836b4:	b29b      	uxth	r3, r3
   836b6:	81a3      	strh	r3, [r4, #12]
   836b8:	e7b3      	b.n	83622 <setvbuf+0x46>
   836ba:	f44f 6080 	mov.w	r0, #1024	; 0x400
   836be:	f001 fc7f 	bl	84fc0 <malloc>
   836c2:	4680      	mov	r8, r0
   836c4:	b918      	cbnz	r0, 836ce <setvbuf+0xf2>
   836c6:	89a3      	ldrh	r3, [r4, #12]
   836c8:	f04f 30ff 	mov.w	r0, #4294967295
   836cc:	e7d5      	b.n	8367a <setvbuf+0x9e>
   836ce:	f44f 6780 	mov.w	r7, #1024	; 0x400
   836d2:	e7ec      	b.n	836ae <setvbuf+0xd2>
   836d4:	20070568 	.word	0x20070568
   836d8:	00084741 	.word	0x00084741

000836dc <strlen>:
   836dc:	f020 0103 	bic.w	r1, r0, #3
   836e0:	f010 0003 	ands.w	r0, r0, #3
   836e4:	f1c0 0000 	rsb	r0, r0, #0
   836e8:	f851 3b04 	ldr.w	r3, [r1], #4
   836ec:	f100 0c04 	add.w	ip, r0, #4
   836f0:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
   836f4:	f06f 0200 	mvn.w	r2, #0
   836f8:	bf1c      	itt	ne
   836fa:	fa22 f20c 	lsrne.w	r2, r2, ip
   836fe:	4313      	orrne	r3, r2
   83700:	f04f 0c01 	mov.w	ip, #1
   83704:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
   83708:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
   8370c:	eba3 020c 	sub.w	r2, r3, ip
   83710:	ea22 0203 	bic.w	r2, r2, r3
   83714:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
   83718:	bf04      	itt	eq
   8371a:	f851 3b04 	ldreq.w	r3, [r1], #4
   8371e:	3004      	addeq	r0, #4
   83720:	d0f4      	beq.n	8370c <strlen+0x30>
   83722:	f013 0fff 	tst.w	r3, #255	; 0xff
   83726:	bf1f      	itttt	ne
   83728:	3001      	addne	r0, #1
   8372a:	f413 4f7f 	tstne.w	r3, #65280	; 0xff00
   8372e:	3001      	addne	r0, #1
   83730:	f413 0f7f 	tstne.w	r3, #16711680	; 0xff0000
   83734:	bf18      	it	ne
   83736:	3001      	addne	r0, #1
   83738:	4770      	bx	lr
   8373a:	bf00      	nop

0008373c <strncpy>:
   8373c:	ea40 0301 	orr.w	r3, r0, r1
   83740:	079b      	lsls	r3, r3, #30
   83742:	b470      	push	{r4, r5, r6}
   83744:	d12a      	bne.n	8379c <strncpy+0x60>
   83746:	2a03      	cmp	r2, #3
   83748:	d928      	bls.n	8379c <strncpy+0x60>
   8374a:	460c      	mov	r4, r1
   8374c:	4603      	mov	r3, r0
   8374e:	4621      	mov	r1, r4
   83750:	f854 5b04 	ldr.w	r5, [r4], #4
   83754:	f1a5 3601 	sub.w	r6, r5, #16843009	; 0x1010101
   83758:	ea26 0605 	bic.w	r6, r6, r5
   8375c:	f016 3f80 	tst.w	r6, #2155905152	; 0x80808080
   83760:	d105      	bne.n	8376e <strncpy+0x32>
   83762:	3a04      	subs	r2, #4
   83764:	2a03      	cmp	r2, #3
   83766:	f843 5b04 	str.w	r5, [r3], #4
   8376a:	4621      	mov	r1, r4
   8376c:	d8ef      	bhi.n	8374e <strncpy+0x12>
   8376e:	b19a      	cbz	r2, 83798 <strncpy+0x5c>
   83770:	780c      	ldrb	r4, [r1, #0]
   83772:	3a01      	subs	r2, #1
   83774:	701c      	strb	r4, [r3, #0]
   83776:	3301      	adds	r3, #1
   83778:	b13c      	cbz	r4, 8378a <strncpy+0x4e>
   8377a:	b16a      	cbz	r2, 83798 <strncpy+0x5c>
   8377c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   83780:	3a01      	subs	r2, #1
   83782:	f803 4b01 	strb.w	r4, [r3], #1
   83786:	2c00      	cmp	r4, #0
   83788:	d1f7      	bne.n	8377a <strncpy+0x3e>
   8378a:	b12a      	cbz	r2, 83798 <strncpy+0x5c>
   8378c:	441a      	add	r2, r3
   8378e:	2100      	movs	r1, #0
   83790:	f803 1b01 	strb.w	r1, [r3], #1
   83794:	4293      	cmp	r3, r2
   83796:	d1fb      	bne.n	83790 <strncpy+0x54>
   83798:	bc70      	pop	{r4, r5, r6}
   8379a:	4770      	bx	lr
   8379c:	4603      	mov	r3, r0
   8379e:	e7e6      	b.n	8376e <strncpy+0x32>

000837a0 <__sprint_r.part.0>:
   837a0:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   837a2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   837a6:	049c      	lsls	r4, r3, #18
   837a8:	460e      	mov	r6, r1
   837aa:	4680      	mov	r8, r0
   837ac:	4691      	mov	r9, r2
   837ae:	d52a      	bpl.n	83806 <__sprint_r.part.0+0x66>
   837b0:	6893      	ldr	r3, [r2, #8]
   837b2:	6812      	ldr	r2, [r2, #0]
   837b4:	f102 0a08 	add.w	sl, r2, #8
   837b8:	b31b      	cbz	r3, 83802 <__sprint_r.part.0+0x62>
   837ba:	e91a 00a0 	ldmdb	sl, {r5, r7}
   837be:	08bf      	lsrs	r7, r7, #2
   837c0:	d017      	beq.n	837f2 <__sprint_r.part.0+0x52>
   837c2:	3d04      	subs	r5, #4
   837c4:	2400      	movs	r4, #0
   837c6:	e001      	b.n	837cc <__sprint_r.part.0+0x2c>
   837c8:	42a7      	cmp	r7, r4
   837ca:	d010      	beq.n	837ee <__sprint_r.part.0+0x4e>
   837cc:	4640      	mov	r0, r8
   837ce:	f855 1f04 	ldr.w	r1, [r5, #4]!
   837d2:	4632      	mov	r2, r6
   837d4:	f001 f850 	bl	84878 <_fputwc_r>
   837d8:	1c43      	adds	r3, r0, #1
   837da:	f104 0401 	add.w	r4, r4, #1
   837de:	d1f3      	bne.n	837c8 <__sprint_r.part.0+0x28>
   837e0:	2300      	movs	r3, #0
   837e2:	f8c9 3008 	str.w	r3, [r9, #8]
   837e6:	f8c9 3004 	str.w	r3, [r9, #4]
   837ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   837ee:	f8d9 3008 	ldr.w	r3, [r9, #8]
   837f2:	eba3 0387 	sub.w	r3, r3, r7, lsl #2
   837f6:	f8c9 3008 	str.w	r3, [r9, #8]
   837fa:	f10a 0a08 	add.w	sl, sl, #8
   837fe:	2b00      	cmp	r3, #0
   83800:	d1db      	bne.n	837ba <__sprint_r.part.0+0x1a>
   83802:	2000      	movs	r0, #0
   83804:	e7ec      	b.n	837e0 <__sprint_r.part.0+0x40>
   83806:	f001 f9b1 	bl	84b6c <__sfvwrite_r>
   8380a:	2300      	movs	r3, #0
   8380c:	f8c9 3008 	str.w	r3, [r9, #8]
   83810:	f8c9 3004 	str.w	r3, [r9, #4]
   83814:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00083818 <_vfiprintf_r>:
   83818:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8381c:	b0b1      	sub	sp, #196	; 0xc4
   8381e:	461c      	mov	r4, r3
   83820:	9102      	str	r1, [sp, #8]
   83822:	4690      	mov	r8, r2
   83824:	9308      	str	r3, [sp, #32]
   83826:	9006      	str	r0, [sp, #24]
   83828:	b118      	cbz	r0, 83832 <_vfiprintf_r+0x1a>
   8382a:	6b83      	ldr	r3, [r0, #56]	; 0x38
   8382c:	2b00      	cmp	r3, #0
   8382e:	f000 80e8 	beq.w	83a02 <_vfiprintf_r+0x1ea>
   83832:	9d02      	ldr	r5, [sp, #8]
   83834:	89ab      	ldrh	r3, [r5, #12]
   83836:	b29a      	uxth	r2, r3
   83838:	0490      	lsls	r0, r2, #18
   8383a:	d407      	bmi.n	8384c <_vfiprintf_r+0x34>
   8383c:	6e6a      	ldr	r2, [r5, #100]	; 0x64
   8383e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   83842:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
   83846:	81ab      	strh	r3, [r5, #12]
   83848:	b29a      	uxth	r2, r3
   8384a:	6669      	str	r1, [r5, #100]	; 0x64
   8384c:	0711      	lsls	r1, r2, #28
   8384e:	f140 80b7 	bpl.w	839c0 <_vfiprintf_r+0x1a8>
   83852:	f8dd b008 	ldr.w	fp, [sp, #8]
   83856:	f8db 3010 	ldr.w	r3, [fp, #16]
   8385a:	2b00      	cmp	r3, #0
   8385c:	f000 80b0 	beq.w	839c0 <_vfiprintf_r+0x1a8>
   83860:	f002 021a 	and.w	r2, r2, #26
   83864:	2a0a      	cmp	r2, #10
   83866:	f000 80b7 	beq.w	839d8 <_vfiprintf_r+0x1c0>
   8386a:	2300      	movs	r3, #0
   8386c:	f10d 0980 	add.w	r9, sp, #128	; 0x80
   83870:	930a      	str	r3, [sp, #40]	; 0x28
   83872:	9315      	str	r3, [sp, #84]	; 0x54
   83874:	9314      	str	r3, [sp, #80]	; 0x50
   83876:	9309      	str	r3, [sp, #36]	; 0x24
   83878:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
   8387c:	464e      	mov	r6, r9
   8387e:	f898 3000 	ldrb.w	r3, [r8]
   83882:	2b00      	cmp	r3, #0
   83884:	f000 84c8 	beq.w	84218 <_vfiprintf_r+0xa00>
   83888:	2b25      	cmp	r3, #37	; 0x25
   8388a:	f000 84c5 	beq.w	84218 <_vfiprintf_r+0xa00>
   8388e:	f108 0201 	add.w	r2, r8, #1
   83892:	e001      	b.n	83898 <_vfiprintf_r+0x80>
   83894:	2b25      	cmp	r3, #37	; 0x25
   83896:	d004      	beq.n	838a2 <_vfiprintf_r+0x8a>
   83898:	7813      	ldrb	r3, [r2, #0]
   8389a:	4614      	mov	r4, r2
   8389c:	3201      	adds	r2, #1
   8389e:	2b00      	cmp	r3, #0
   838a0:	d1f8      	bne.n	83894 <_vfiprintf_r+0x7c>
   838a2:	ebc8 0504 	rsb	r5, r8, r4
   838a6:	b195      	cbz	r5, 838ce <_vfiprintf_r+0xb6>
   838a8:	9b14      	ldr	r3, [sp, #80]	; 0x50
   838aa:	9a15      	ldr	r2, [sp, #84]	; 0x54
   838ac:	3301      	adds	r3, #1
   838ae:	442a      	add	r2, r5
   838b0:	2b07      	cmp	r3, #7
   838b2:	f8c6 8000 	str.w	r8, [r6]
   838b6:	6075      	str	r5, [r6, #4]
   838b8:	9215      	str	r2, [sp, #84]	; 0x54
   838ba:	9314      	str	r3, [sp, #80]	; 0x50
   838bc:	dd7b      	ble.n	839b6 <_vfiprintf_r+0x19e>
   838be:	2a00      	cmp	r2, #0
   838c0:	f040 84d5 	bne.w	8426e <_vfiprintf_r+0xa56>
   838c4:	9809      	ldr	r0, [sp, #36]	; 0x24
   838c6:	9214      	str	r2, [sp, #80]	; 0x50
   838c8:	4428      	add	r0, r5
   838ca:	464e      	mov	r6, r9
   838cc:	9009      	str	r0, [sp, #36]	; 0x24
   838ce:	7823      	ldrb	r3, [r4, #0]
   838d0:	2b00      	cmp	r3, #0
   838d2:	f000 83ed 	beq.w	840b0 <_vfiprintf_r+0x898>
   838d6:	2100      	movs	r1, #0
   838d8:	f04f 0200 	mov.w	r2, #0
   838dc:	f04f 3cff 	mov.w	ip, #4294967295
   838e0:	7863      	ldrb	r3, [r4, #1]
   838e2:	f88d 2047 	strb.w	r2, [sp, #71]	; 0x47
   838e6:	9104      	str	r1, [sp, #16]
   838e8:	468a      	mov	sl, r1
   838ea:	f104 0801 	add.w	r8, r4, #1
   838ee:	4608      	mov	r0, r1
   838f0:	4665      	mov	r5, ip
   838f2:	f108 0801 	add.w	r8, r8, #1
   838f6:	f1a3 0220 	sub.w	r2, r3, #32
   838fa:	2a58      	cmp	r2, #88	; 0x58
   838fc:	f200 82d9 	bhi.w	83eb2 <_vfiprintf_r+0x69a>
   83900:	e8df f012 	tbh	[pc, r2, lsl #1]
   83904:	02d702cb 	.word	0x02d702cb
   83908:	02d202d7 	.word	0x02d202d7
   8390c:	02d702d7 	.word	0x02d702d7
   83910:	02d702d7 	.word	0x02d702d7
   83914:	02d702d7 	.word	0x02d702d7
   83918:	028f0282 	.word	0x028f0282
   8391c:	008402d7 	.word	0x008402d7
   83920:	02d70293 	.word	0x02d70293
   83924:	0196012b 	.word	0x0196012b
   83928:	01960196 	.word	0x01960196
   8392c:	01960196 	.word	0x01960196
   83930:	01960196 	.word	0x01960196
   83934:	01960196 	.word	0x01960196
   83938:	02d702d7 	.word	0x02d702d7
   8393c:	02d702d7 	.word	0x02d702d7
   83940:	02d702d7 	.word	0x02d702d7
   83944:	02d702d7 	.word	0x02d702d7
   83948:	02d702d7 	.word	0x02d702d7
   8394c:	02d70130 	.word	0x02d70130
   83950:	02d702d7 	.word	0x02d702d7
   83954:	02d702d7 	.word	0x02d702d7
   83958:	02d702d7 	.word	0x02d702d7
   8395c:	02d702d7 	.word	0x02d702d7
   83960:	017b02d7 	.word	0x017b02d7
   83964:	02d702d7 	.word	0x02d702d7
   83968:	02d702d7 	.word	0x02d702d7
   8396c:	01a402d7 	.word	0x01a402d7
   83970:	02d702d7 	.word	0x02d702d7
   83974:	02d701bf 	.word	0x02d701bf
   83978:	02d702d7 	.word	0x02d702d7
   8397c:	02d702d7 	.word	0x02d702d7
   83980:	02d702d7 	.word	0x02d702d7
   83984:	02d702d7 	.word	0x02d702d7
   83988:	01e402d7 	.word	0x01e402d7
   8398c:	02d701fa 	.word	0x02d701fa
   83990:	02d702d7 	.word	0x02d702d7
   83994:	01fa0216 	.word	0x01fa0216
   83998:	02d702d7 	.word	0x02d702d7
   8399c:	02d7021b 	.word	0x02d7021b
   839a0:	00890228 	.word	0x00890228
   839a4:	027d0266 	.word	0x027d0266
   839a8:	023a02d7 	.word	0x023a02d7
   839ac:	011902d7 	.word	0x011902d7
   839b0:	02d702d7 	.word	0x02d702d7
   839b4:	02af      	.short	0x02af
   839b6:	3608      	adds	r6, #8
   839b8:	9809      	ldr	r0, [sp, #36]	; 0x24
   839ba:	4428      	add	r0, r5
   839bc:	9009      	str	r0, [sp, #36]	; 0x24
   839be:	e786      	b.n	838ce <_vfiprintf_r+0xb6>
   839c0:	9806      	ldr	r0, [sp, #24]
   839c2:	9902      	ldr	r1, [sp, #8]
   839c4:	f000 fd90 	bl	844e8 <__swsetup_r>
   839c8:	b9b0      	cbnz	r0, 839f8 <_vfiprintf_r+0x1e0>
   839ca:	9d02      	ldr	r5, [sp, #8]
   839cc:	89aa      	ldrh	r2, [r5, #12]
   839ce:	f002 021a 	and.w	r2, r2, #26
   839d2:	2a0a      	cmp	r2, #10
   839d4:	f47f af49 	bne.w	8386a <_vfiprintf_r+0x52>
   839d8:	f8dd b008 	ldr.w	fp, [sp, #8]
   839dc:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
   839e0:	2b00      	cmp	r3, #0
   839e2:	f6ff af42 	blt.w	8386a <_vfiprintf_r+0x52>
   839e6:	9806      	ldr	r0, [sp, #24]
   839e8:	4659      	mov	r1, fp
   839ea:	4642      	mov	r2, r8
   839ec:	4623      	mov	r3, r4
   839ee:	f000 fd3d 	bl	8446c <__sbprintf>
   839f2:	b031      	add	sp, #196	; 0xc4
   839f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   839f8:	f04f 30ff 	mov.w	r0, #4294967295
   839fc:	b031      	add	sp, #196	; 0xc4
   839fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83a02:	f000 fea3 	bl	8474c <__sinit>
   83a06:	e714      	b.n	83832 <_vfiprintf_r+0x1a>
   83a08:	4240      	negs	r0, r0
   83a0a:	9308      	str	r3, [sp, #32]
   83a0c:	f04a 0a04 	orr.w	sl, sl, #4
   83a10:	f898 3000 	ldrb.w	r3, [r8]
   83a14:	e76d      	b.n	838f2 <_vfiprintf_r+0xda>
   83a16:	f01a 0320 	ands.w	r3, sl, #32
   83a1a:	9004      	str	r0, [sp, #16]
   83a1c:	46ac      	mov	ip, r5
   83a1e:	f000 80f4 	beq.w	83c0a <_vfiprintf_r+0x3f2>
   83a22:	f8dd b020 	ldr.w	fp, [sp, #32]
   83a26:	f10b 0307 	add.w	r3, fp, #7
   83a2a:	f023 0307 	bic.w	r3, r3, #7
   83a2e:	f103 0408 	add.w	r4, r3, #8
   83a32:	9408      	str	r4, [sp, #32]
   83a34:	e9d3 4500 	ldrd	r4, r5, [r3]
   83a38:	2300      	movs	r3, #0
   83a3a:	f04f 0000 	mov.w	r0, #0
   83a3e:	2100      	movs	r1, #0
   83a40:	f88d 0047 	strb.w	r0, [sp, #71]	; 0x47
   83a44:	f8cd c014 	str.w	ip, [sp, #20]
   83a48:	9107      	str	r1, [sp, #28]
   83a4a:	f1bc 0f00 	cmp.w	ip, #0
   83a4e:	bfa8      	it	ge
   83a50:	f02a 0a80 	bicge.w	sl, sl, #128	; 0x80
   83a54:	ea54 0205 	orrs.w	r2, r4, r5
   83a58:	f040 80ad 	bne.w	83bb6 <_vfiprintf_r+0x39e>
   83a5c:	f1bc 0f00 	cmp.w	ip, #0
   83a60:	f040 80a9 	bne.w	83bb6 <_vfiprintf_r+0x39e>
   83a64:	2b00      	cmp	r3, #0
   83a66:	f040 83c0 	bne.w	841ea <_vfiprintf_r+0x9d2>
   83a6a:	f01a 0f01 	tst.w	sl, #1
   83a6e:	f000 83bc 	beq.w	841ea <_vfiprintf_r+0x9d2>
   83a72:	2330      	movs	r3, #48	; 0x30
   83a74:	af30      	add	r7, sp, #192	; 0xc0
   83a76:	f807 3d41 	strb.w	r3, [r7, #-65]!
   83a7a:	ebc7 0409 	rsb	r4, r7, r9
   83a7e:	9405      	str	r4, [sp, #20]
   83a80:	f8dd b014 	ldr.w	fp, [sp, #20]
   83a84:	9c07      	ldr	r4, [sp, #28]
   83a86:	45e3      	cmp	fp, ip
   83a88:	bfb8      	it	lt
   83a8a:	46e3      	movlt	fp, ip
   83a8c:	f8cd b00c 	str.w	fp, [sp, #12]
   83a90:	b11c      	cbz	r4, 83a9a <_vfiprintf_r+0x282>
   83a92:	f10b 0b01 	add.w	fp, fp, #1
   83a96:	f8cd b00c 	str.w	fp, [sp, #12]
   83a9a:	f01a 0502 	ands.w	r5, sl, #2
   83a9e:	9507      	str	r5, [sp, #28]
   83aa0:	d005      	beq.n	83aae <_vfiprintf_r+0x296>
   83aa2:	f8dd b00c 	ldr.w	fp, [sp, #12]
   83aa6:	f10b 0b02 	add.w	fp, fp, #2
   83aaa:	f8cd b00c 	str.w	fp, [sp, #12]
   83aae:	f01a 0384 	ands.w	r3, sl, #132	; 0x84
   83ab2:	930b      	str	r3, [sp, #44]	; 0x2c
   83ab4:	f040 821b 	bne.w	83eee <_vfiprintf_r+0x6d6>
   83ab8:	9d04      	ldr	r5, [sp, #16]
   83aba:	f8dd b00c 	ldr.w	fp, [sp, #12]
   83abe:	ebcb 0405 	rsb	r4, fp, r5
   83ac2:	2c00      	cmp	r4, #0
   83ac4:	f340 8213 	ble.w	83eee <_vfiprintf_r+0x6d6>
   83ac8:	2c10      	cmp	r4, #16
   83aca:	f340 8489 	ble.w	843e0 <_vfiprintf_r+0xbc8>
   83ace:	4dbe      	ldr	r5, [pc, #760]	; (83dc8 <_vfiprintf_r+0x5b0>)
   83ad0:	9a15      	ldr	r2, [sp, #84]	; 0x54
   83ad2:	462b      	mov	r3, r5
   83ad4:	9814      	ldr	r0, [sp, #80]	; 0x50
   83ad6:	4625      	mov	r5, r4
   83ad8:	f04f 0b10 	mov.w	fp, #16
   83adc:	4664      	mov	r4, ip
   83ade:	46b4      	mov	ip, r6
   83ae0:	461e      	mov	r6, r3
   83ae2:	e006      	b.n	83af2 <_vfiprintf_r+0x2da>
   83ae4:	1c83      	adds	r3, r0, #2
   83ae6:	f10c 0c08 	add.w	ip, ip, #8
   83aea:	4608      	mov	r0, r1
   83aec:	3d10      	subs	r5, #16
   83aee:	2d10      	cmp	r5, #16
   83af0:	dd11      	ble.n	83b16 <_vfiprintf_r+0x2fe>
   83af2:	1c41      	adds	r1, r0, #1
   83af4:	3210      	adds	r2, #16
   83af6:	2907      	cmp	r1, #7
   83af8:	9215      	str	r2, [sp, #84]	; 0x54
   83afa:	e88c 0840 	stmia.w	ip, {r6, fp}
   83afe:	9114      	str	r1, [sp, #80]	; 0x50
   83b00:	ddf0      	ble.n	83ae4 <_vfiprintf_r+0x2cc>
   83b02:	2a00      	cmp	r2, #0
   83b04:	f040 81e6 	bne.w	83ed4 <_vfiprintf_r+0x6bc>
   83b08:	3d10      	subs	r5, #16
   83b0a:	2d10      	cmp	r5, #16
   83b0c:	f04f 0301 	mov.w	r3, #1
   83b10:	4610      	mov	r0, r2
   83b12:	46cc      	mov	ip, r9
   83b14:	dced      	bgt.n	83af2 <_vfiprintf_r+0x2da>
   83b16:	4631      	mov	r1, r6
   83b18:	4666      	mov	r6, ip
   83b1a:	46a4      	mov	ip, r4
   83b1c:	462c      	mov	r4, r5
   83b1e:	460d      	mov	r5, r1
   83b20:	4422      	add	r2, r4
   83b22:	2b07      	cmp	r3, #7
   83b24:	9215      	str	r2, [sp, #84]	; 0x54
   83b26:	6035      	str	r5, [r6, #0]
   83b28:	6074      	str	r4, [r6, #4]
   83b2a:	9314      	str	r3, [sp, #80]	; 0x50
   83b2c:	f300 836d 	bgt.w	8420a <_vfiprintf_r+0x9f2>
   83b30:	3608      	adds	r6, #8
   83b32:	1c59      	adds	r1, r3, #1
   83b34:	e1de      	b.n	83ef4 <_vfiprintf_r+0x6dc>
   83b36:	f01a 0f20 	tst.w	sl, #32
   83b3a:	9004      	str	r0, [sp, #16]
   83b3c:	46ac      	mov	ip, r5
   83b3e:	f000 808d 	beq.w	83c5c <_vfiprintf_r+0x444>
   83b42:	9d08      	ldr	r5, [sp, #32]
   83b44:	1deb      	adds	r3, r5, #7
   83b46:	f023 0307 	bic.w	r3, r3, #7
   83b4a:	f103 0b08 	add.w	fp, r3, #8
   83b4e:	e9d3 4500 	ldrd	r4, r5, [r3]
   83b52:	f8cd b020 	str.w	fp, [sp, #32]
   83b56:	2301      	movs	r3, #1
   83b58:	e76f      	b.n	83a3a <_vfiprintf_r+0x222>
   83b5a:	f04a 0a80 	orr.w	sl, sl, #128	; 0x80
   83b5e:	f898 3000 	ldrb.w	r3, [r8]
   83b62:	e6c6      	b.n	838f2 <_vfiprintf_r+0xda>
   83b64:	f04a 0a10 	orr.w	sl, sl, #16
   83b68:	f01a 0f20 	tst.w	sl, #32
   83b6c:	9004      	str	r0, [sp, #16]
   83b6e:	46ac      	mov	ip, r5
   83b70:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   83b74:	f000 80c8 	beq.w	83d08 <_vfiprintf_r+0x4f0>
   83b78:	9c08      	ldr	r4, [sp, #32]
   83b7a:	1de1      	adds	r1, r4, #7
   83b7c:	f021 0107 	bic.w	r1, r1, #7
   83b80:	e9d1 2300 	ldrd	r2, r3, [r1]
   83b84:	3108      	adds	r1, #8
   83b86:	9108      	str	r1, [sp, #32]
   83b88:	4614      	mov	r4, r2
   83b8a:	461d      	mov	r5, r3
   83b8c:	2a00      	cmp	r2, #0
   83b8e:	f173 0b00 	sbcs.w	fp, r3, #0
   83b92:	f2c0 83ce 	blt.w	84332 <_vfiprintf_r+0xb1a>
   83b96:	f1bc 0f00 	cmp.w	ip, #0
   83b9a:	f89d 0047 	ldrb.w	r0, [sp, #71]	; 0x47
   83b9e:	bfa8      	it	ge
   83ba0:	f02a 0a80 	bicge.w	sl, sl, #128	; 0x80
   83ba4:	ea54 0205 	orrs.w	r2, r4, r5
   83ba8:	9007      	str	r0, [sp, #28]
   83baa:	f8cd c014 	str.w	ip, [sp, #20]
   83bae:	f04f 0301 	mov.w	r3, #1
   83bb2:	f43f af53 	beq.w	83a5c <_vfiprintf_r+0x244>
   83bb6:	2b01      	cmp	r3, #1
   83bb8:	f000 8319 	beq.w	841ee <_vfiprintf_r+0x9d6>
   83bbc:	2b02      	cmp	r3, #2
   83bbe:	f10d 037f 	add.w	r3, sp, #127	; 0x7f
   83bc2:	f040 824c 	bne.w	8405e <_vfiprintf_r+0x846>
   83bc6:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
   83bca:	4619      	mov	r1, r3
   83bcc:	f004 000f 	and.w	r0, r4, #15
   83bd0:	0922      	lsrs	r2, r4, #4
   83bd2:	f81b 0000 	ldrb.w	r0, [fp, r0]
   83bd6:	ea42 7205 	orr.w	r2, r2, r5, lsl #28
   83bda:	092b      	lsrs	r3, r5, #4
   83bdc:	7008      	strb	r0, [r1, #0]
   83bde:	ea52 0003 	orrs.w	r0, r2, r3
   83be2:	460f      	mov	r7, r1
   83be4:	4614      	mov	r4, r2
   83be6:	461d      	mov	r5, r3
   83be8:	f101 31ff 	add.w	r1, r1, #4294967295
   83bec:	d1ee      	bne.n	83bcc <_vfiprintf_r+0x3b4>
   83bee:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
   83bf2:	ebc7 0309 	rsb	r3, r7, r9
   83bf6:	9305      	str	r3, [sp, #20]
   83bf8:	e742      	b.n	83a80 <_vfiprintf_r+0x268>
   83bfa:	f04a 0a10 	orr.w	sl, sl, #16
   83bfe:	f01a 0320 	ands.w	r3, sl, #32
   83c02:	9004      	str	r0, [sp, #16]
   83c04:	46ac      	mov	ip, r5
   83c06:	f47f af0c 	bne.w	83a22 <_vfiprintf_r+0x20a>
   83c0a:	f01a 0210 	ands.w	r2, sl, #16
   83c0e:	f040 8311 	bne.w	84234 <_vfiprintf_r+0xa1c>
   83c12:	f01a 0340 	ands.w	r3, sl, #64	; 0x40
   83c16:	f000 830d 	beq.w	84234 <_vfiprintf_r+0xa1c>
   83c1a:	f8dd b020 	ldr.w	fp, [sp, #32]
   83c1e:	4613      	mov	r3, r2
   83c20:	f8bb 4000 	ldrh.w	r4, [fp]
   83c24:	f10b 0b04 	add.w	fp, fp, #4
   83c28:	2500      	movs	r5, #0
   83c2a:	f8cd b020 	str.w	fp, [sp, #32]
   83c2e:	e704      	b.n	83a3a <_vfiprintf_r+0x222>
   83c30:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   83c34:	2000      	movs	r0, #0
   83c36:	f818 3b01 	ldrb.w	r3, [r8], #1
   83c3a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   83c3e:	eb02 0040 	add.w	r0, r2, r0, lsl #1
   83c42:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   83c46:	2a09      	cmp	r2, #9
   83c48:	d9f5      	bls.n	83c36 <_vfiprintf_r+0x41e>
   83c4a:	e654      	b.n	838f6 <_vfiprintf_r+0xde>
   83c4c:	f04a 0a10 	orr.w	sl, sl, #16
   83c50:	f01a 0f20 	tst.w	sl, #32
   83c54:	9004      	str	r0, [sp, #16]
   83c56:	46ac      	mov	ip, r5
   83c58:	f47f af73 	bne.w	83b42 <_vfiprintf_r+0x32a>
   83c5c:	f01a 0f10 	tst.w	sl, #16
   83c60:	f040 82ef 	bne.w	84242 <_vfiprintf_r+0xa2a>
   83c64:	f01a 0f40 	tst.w	sl, #64	; 0x40
   83c68:	f000 82eb 	beq.w	84242 <_vfiprintf_r+0xa2a>
   83c6c:	f8dd b020 	ldr.w	fp, [sp, #32]
   83c70:	2500      	movs	r5, #0
   83c72:	f8bb 4000 	ldrh.w	r4, [fp]
   83c76:	f10b 0b04 	add.w	fp, fp, #4
   83c7a:	2301      	movs	r3, #1
   83c7c:	f8cd b020 	str.w	fp, [sp, #32]
   83c80:	e6db      	b.n	83a3a <_vfiprintf_r+0x222>
   83c82:	46ac      	mov	ip, r5
   83c84:	4d51      	ldr	r5, [pc, #324]	; (83dcc <_vfiprintf_r+0x5b4>)
   83c86:	f01a 0f20 	tst.w	sl, #32
   83c8a:	9004      	str	r0, [sp, #16]
   83c8c:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   83c90:	950a      	str	r5, [sp, #40]	; 0x28
   83c92:	f000 80f0 	beq.w	83e76 <_vfiprintf_r+0x65e>
   83c96:	9d08      	ldr	r5, [sp, #32]
   83c98:	1dea      	adds	r2, r5, #7
   83c9a:	f022 0207 	bic.w	r2, r2, #7
   83c9e:	f102 0b08 	add.w	fp, r2, #8
   83ca2:	f8cd b020 	str.w	fp, [sp, #32]
   83ca6:	e9d2 4500 	ldrd	r4, r5, [r2]
   83caa:	f01a 0f01 	tst.w	sl, #1
   83cae:	f000 82aa 	beq.w	84206 <_vfiprintf_r+0x9ee>
   83cb2:	ea54 0b05 	orrs.w	fp, r4, r5
   83cb6:	f000 82a6 	beq.w	84206 <_vfiprintf_r+0x9ee>
   83cba:	2230      	movs	r2, #48	; 0x30
   83cbc:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
   83cc0:	f04a 0a02 	orr.w	sl, sl, #2
   83cc4:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
   83cc8:	2302      	movs	r3, #2
   83cca:	e6b6      	b.n	83a3a <_vfiprintf_r+0x222>
   83ccc:	9b08      	ldr	r3, [sp, #32]
   83cce:	f8dd b020 	ldr.w	fp, [sp, #32]
   83cd2:	681b      	ldr	r3, [r3, #0]
   83cd4:	2401      	movs	r4, #1
   83cd6:	f04f 0500 	mov.w	r5, #0
   83cda:	f10b 0b04 	add.w	fp, fp, #4
   83cde:	9004      	str	r0, [sp, #16]
   83ce0:	9403      	str	r4, [sp, #12]
   83ce2:	f88d 5047 	strb.w	r5, [sp, #71]	; 0x47
   83ce6:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
   83cea:	f8cd b020 	str.w	fp, [sp, #32]
   83cee:	9405      	str	r4, [sp, #20]
   83cf0:	af16      	add	r7, sp, #88	; 0x58
   83cf2:	f04f 0c00 	mov.w	ip, #0
   83cf6:	e6d0      	b.n	83a9a <_vfiprintf_r+0x282>
   83cf8:	f01a 0f20 	tst.w	sl, #32
   83cfc:	9004      	str	r0, [sp, #16]
   83cfe:	46ac      	mov	ip, r5
   83d00:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   83d04:	f47f af38 	bne.w	83b78 <_vfiprintf_r+0x360>
   83d08:	f01a 0f10 	tst.w	sl, #16
   83d0c:	f040 82a7 	bne.w	8425e <_vfiprintf_r+0xa46>
   83d10:	f01a 0f40 	tst.w	sl, #64	; 0x40
   83d14:	f000 82a3 	beq.w	8425e <_vfiprintf_r+0xa46>
   83d18:	f8dd b020 	ldr.w	fp, [sp, #32]
   83d1c:	f9bb 4000 	ldrsh.w	r4, [fp]
   83d20:	f10b 0b04 	add.w	fp, fp, #4
   83d24:	17e5      	asrs	r5, r4, #31
   83d26:	4622      	mov	r2, r4
   83d28:	462b      	mov	r3, r5
   83d2a:	f8cd b020 	str.w	fp, [sp, #32]
   83d2e:	e72d      	b.n	83b8c <_vfiprintf_r+0x374>
   83d30:	f04a 0a40 	orr.w	sl, sl, #64	; 0x40
   83d34:	f898 3000 	ldrb.w	r3, [r8]
   83d38:	e5db      	b.n	838f2 <_vfiprintf_r+0xda>
   83d3a:	f898 3000 	ldrb.w	r3, [r8]
   83d3e:	4642      	mov	r2, r8
   83d40:	2b6c      	cmp	r3, #108	; 0x6c
   83d42:	bf03      	ittte	eq
   83d44:	f108 0801 	addeq.w	r8, r8, #1
   83d48:	f04a 0a20 	orreq.w	sl, sl, #32
   83d4c:	7853      	ldrbeq	r3, [r2, #1]
   83d4e:	f04a 0a10 	orrne.w	sl, sl, #16
   83d52:	e5ce      	b.n	838f2 <_vfiprintf_r+0xda>
   83d54:	f01a 0f20 	tst.w	sl, #32
   83d58:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   83d5c:	f000 82f7 	beq.w	8434e <_vfiprintf_r+0xb36>
   83d60:	9c08      	ldr	r4, [sp, #32]
   83d62:	6821      	ldr	r1, [r4, #0]
   83d64:	9c09      	ldr	r4, [sp, #36]	; 0x24
   83d66:	17e5      	asrs	r5, r4, #31
   83d68:	462b      	mov	r3, r5
   83d6a:	9d08      	ldr	r5, [sp, #32]
   83d6c:	4622      	mov	r2, r4
   83d6e:	3504      	adds	r5, #4
   83d70:	9508      	str	r5, [sp, #32]
   83d72:	e9c1 2300 	strd	r2, r3, [r1]
   83d76:	e582      	b.n	8387e <_vfiprintf_r+0x66>
   83d78:	9c08      	ldr	r4, [sp, #32]
   83d7a:	46ac      	mov	ip, r5
   83d7c:	6827      	ldr	r7, [r4, #0]
   83d7e:	f04f 0500 	mov.w	r5, #0
   83d82:	9004      	str	r0, [sp, #16]
   83d84:	f88d 5047 	strb.w	r5, [sp, #71]	; 0x47
   83d88:	3404      	adds	r4, #4
   83d8a:	2f00      	cmp	r7, #0
   83d8c:	f000 8332 	beq.w	843f4 <_vfiprintf_r+0xbdc>
   83d90:	f1bc 0f00 	cmp.w	ip, #0
   83d94:	4638      	mov	r0, r7
   83d96:	f2c0 8307 	blt.w	843a8 <_vfiprintf_r+0xb90>
   83d9a:	4662      	mov	r2, ip
   83d9c:	2100      	movs	r1, #0
   83d9e:	f8cd c004 	str.w	ip, [sp, #4]
   83da2:	f001 fbb1 	bl	85508 <memchr>
   83da6:	f8dd c004 	ldr.w	ip, [sp, #4]
   83daa:	2800      	cmp	r0, #0
   83dac:	f000 833a 	beq.w	84424 <_vfiprintf_r+0xc0c>
   83db0:	1bc0      	subs	r0, r0, r7
   83db2:	f89d 5047 	ldrb.w	r5, [sp, #71]	; 0x47
   83db6:	4560      	cmp	r0, ip
   83db8:	bfa8      	it	ge
   83dba:	4660      	movge	r0, ip
   83dbc:	9005      	str	r0, [sp, #20]
   83dbe:	9408      	str	r4, [sp, #32]
   83dc0:	9507      	str	r5, [sp, #28]
   83dc2:	f04f 0c00 	mov.w	ip, #0
   83dc6:	e65b      	b.n	83a80 <_vfiprintf_r+0x268>
   83dc8:	0008655c 	.word	0x0008655c
   83dcc:	0008651c 	.word	0x0008651c
   83dd0:	9b08      	ldr	r3, [sp, #32]
   83dd2:	f8dd b020 	ldr.w	fp, [sp, #32]
   83dd6:	9004      	str	r0, [sp, #16]
   83dd8:	48b2      	ldr	r0, [pc, #712]	; (840a4 <_vfiprintf_r+0x88c>)
   83dda:	681c      	ldr	r4, [r3, #0]
   83ddc:	2230      	movs	r2, #48	; 0x30
   83dde:	2378      	movs	r3, #120	; 0x78
   83de0:	f10b 0b04 	add.w	fp, fp, #4
   83de4:	46ac      	mov	ip, r5
   83de6:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
   83dea:	f04a 0a02 	orr.w	sl, sl, #2
   83dee:	f8cd b020 	str.w	fp, [sp, #32]
   83df2:	2500      	movs	r5, #0
   83df4:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
   83df8:	900a      	str	r0, [sp, #40]	; 0x28
   83dfa:	2302      	movs	r3, #2
   83dfc:	e61d      	b.n	83a3a <_vfiprintf_r+0x222>
   83dfe:	f04a 0a20 	orr.w	sl, sl, #32
   83e02:	f898 3000 	ldrb.w	r3, [r8]
   83e06:	e574      	b.n	838f2 <_vfiprintf_r+0xda>
   83e08:	f8dd b020 	ldr.w	fp, [sp, #32]
   83e0c:	f8db 0000 	ldr.w	r0, [fp]
   83e10:	f10b 0304 	add.w	r3, fp, #4
   83e14:	2800      	cmp	r0, #0
   83e16:	f6ff adf7 	blt.w	83a08 <_vfiprintf_r+0x1f0>
   83e1a:	9308      	str	r3, [sp, #32]
   83e1c:	f898 3000 	ldrb.w	r3, [r8]
   83e20:	e567      	b.n	838f2 <_vfiprintf_r+0xda>
   83e22:	f898 3000 	ldrb.w	r3, [r8]
   83e26:	212b      	movs	r1, #43	; 0x2b
   83e28:	e563      	b.n	838f2 <_vfiprintf_r+0xda>
   83e2a:	f898 3000 	ldrb.w	r3, [r8]
   83e2e:	f108 0401 	add.w	r4, r8, #1
   83e32:	2b2a      	cmp	r3, #42	; 0x2a
   83e34:	f000 8305 	beq.w	84442 <_vfiprintf_r+0xc2a>
   83e38:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   83e3c:	2a09      	cmp	r2, #9
   83e3e:	bf98      	it	ls
   83e40:	2500      	movls	r5, #0
   83e42:	f200 82fa 	bhi.w	8443a <_vfiprintf_r+0xc22>
   83e46:	f814 3b01 	ldrb.w	r3, [r4], #1
   83e4a:	eb05 0585 	add.w	r5, r5, r5, lsl #2
   83e4e:	eb02 0545 	add.w	r5, r2, r5, lsl #1
   83e52:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   83e56:	2a09      	cmp	r2, #9
   83e58:	d9f5      	bls.n	83e46 <_vfiprintf_r+0x62e>
   83e5a:	ea45 75e5 	orr.w	r5, r5, r5, asr #31
   83e5e:	46a0      	mov	r8, r4
   83e60:	e549      	b.n	838f6 <_vfiprintf_r+0xde>
   83e62:	4c90      	ldr	r4, [pc, #576]	; (840a4 <_vfiprintf_r+0x88c>)
   83e64:	f01a 0f20 	tst.w	sl, #32
   83e68:	9004      	str	r0, [sp, #16]
   83e6a:	46ac      	mov	ip, r5
   83e6c:	940a      	str	r4, [sp, #40]	; 0x28
   83e6e:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   83e72:	f47f af10 	bne.w	83c96 <_vfiprintf_r+0x47e>
   83e76:	f01a 0f10 	tst.w	sl, #16
   83e7a:	f040 81ea 	bne.w	84252 <_vfiprintf_r+0xa3a>
   83e7e:	f01a 0f40 	tst.w	sl, #64	; 0x40
   83e82:	f000 81e6 	beq.w	84252 <_vfiprintf_r+0xa3a>
   83e86:	f8dd b020 	ldr.w	fp, [sp, #32]
   83e8a:	2500      	movs	r5, #0
   83e8c:	f8bb 4000 	ldrh.w	r4, [fp]
   83e90:	f10b 0b04 	add.w	fp, fp, #4
   83e94:	f8cd b020 	str.w	fp, [sp, #32]
   83e98:	e707      	b.n	83caa <_vfiprintf_r+0x492>
   83e9a:	f898 3000 	ldrb.w	r3, [r8]
   83e9e:	2900      	cmp	r1, #0
   83ea0:	f47f ad27 	bne.w	838f2 <_vfiprintf_r+0xda>
   83ea4:	2120      	movs	r1, #32
   83ea6:	e524      	b.n	838f2 <_vfiprintf_r+0xda>
   83ea8:	f04a 0a01 	orr.w	sl, sl, #1
   83eac:	f898 3000 	ldrb.w	r3, [r8]
   83eb0:	e51f      	b.n	838f2 <_vfiprintf_r+0xda>
   83eb2:	9004      	str	r0, [sp, #16]
   83eb4:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   83eb8:	2b00      	cmp	r3, #0
   83eba:	f000 80f9 	beq.w	840b0 <_vfiprintf_r+0x898>
   83ebe:	2501      	movs	r5, #1
   83ec0:	f04f 0b00 	mov.w	fp, #0
   83ec4:	9503      	str	r5, [sp, #12]
   83ec6:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
   83eca:	f88d b047 	strb.w	fp, [sp, #71]	; 0x47
   83ece:	9505      	str	r5, [sp, #20]
   83ed0:	af16      	add	r7, sp, #88	; 0x58
   83ed2:	e70e      	b.n	83cf2 <_vfiprintf_r+0x4da>
   83ed4:	9806      	ldr	r0, [sp, #24]
   83ed6:	9902      	ldr	r1, [sp, #8]
   83ed8:	aa13      	add	r2, sp, #76	; 0x4c
   83eda:	f7ff fc61 	bl	837a0 <__sprint_r.part.0>
   83ede:	2800      	cmp	r0, #0
   83ee0:	f040 80ed 	bne.w	840be <_vfiprintf_r+0x8a6>
   83ee4:	9814      	ldr	r0, [sp, #80]	; 0x50
   83ee6:	9a15      	ldr	r2, [sp, #84]	; 0x54
   83ee8:	1c43      	adds	r3, r0, #1
   83eea:	46cc      	mov	ip, r9
   83eec:	e5fe      	b.n	83aec <_vfiprintf_r+0x2d4>
   83eee:	9b14      	ldr	r3, [sp, #80]	; 0x50
   83ef0:	9a15      	ldr	r2, [sp, #84]	; 0x54
   83ef2:	1c59      	adds	r1, r3, #1
   83ef4:	f89d 0047 	ldrb.w	r0, [sp, #71]	; 0x47
   83ef8:	b168      	cbz	r0, 83f16 <_vfiprintf_r+0x6fe>
   83efa:	3201      	adds	r2, #1
   83efc:	f10d 0047 	add.w	r0, sp, #71	; 0x47
   83f00:	2301      	movs	r3, #1
   83f02:	2907      	cmp	r1, #7
   83f04:	9215      	str	r2, [sp, #84]	; 0x54
   83f06:	9114      	str	r1, [sp, #80]	; 0x50
   83f08:	e886 0009 	stmia.w	r6, {r0, r3}
   83f0c:	f300 8160 	bgt.w	841d0 <_vfiprintf_r+0x9b8>
   83f10:	460b      	mov	r3, r1
   83f12:	3608      	adds	r6, #8
   83f14:	3101      	adds	r1, #1
   83f16:	9c07      	ldr	r4, [sp, #28]
   83f18:	b164      	cbz	r4, 83f34 <_vfiprintf_r+0x71c>
   83f1a:	3202      	adds	r2, #2
   83f1c:	a812      	add	r0, sp, #72	; 0x48
   83f1e:	2302      	movs	r3, #2
   83f20:	2907      	cmp	r1, #7
   83f22:	9215      	str	r2, [sp, #84]	; 0x54
   83f24:	9114      	str	r1, [sp, #80]	; 0x50
   83f26:	e886 0009 	stmia.w	r6, {r0, r3}
   83f2a:	f300 8157 	bgt.w	841dc <_vfiprintf_r+0x9c4>
   83f2e:	460b      	mov	r3, r1
   83f30:	3608      	adds	r6, #8
   83f32:	3101      	adds	r1, #1
   83f34:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   83f36:	2d80      	cmp	r5, #128	; 0x80
   83f38:	f000 8101 	beq.w	8413e <_vfiprintf_r+0x926>
   83f3c:	9d05      	ldr	r5, [sp, #20]
   83f3e:	ebc5 040c 	rsb	r4, r5, ip
   83f42:	2c00      	cmp	r4, #0
   83f44:	dd2f      	ble.n	83fa6 <_vfiprintf_r+0x78e>
   83f46:	2c10      	cmp	r4, #16
   83f48:	4d57      	ldr	r5, [pc, #348]	; (840a8 <_vfiprintf_r+0x890>)
   83f4a:	dd22      	ble.n	83f92 <_vfiprintf_r+0x77a>
   83f4c:	4630      	mov	r0, r6
   83f4e:	f04f 0b10 	mov.w	fp, #16
   83f52:	462e      	mov	r6, r5
   83f54:	4625      	mov	r5, r4
   83f56:	9c06      	ldr	r4, [sp, #24]
   83f58:	e006      	b.n	83f68 <_vfiprintf_r+0x750>
   83f5a:	f103 0c02 	add.w	ip, r3, #2
   83f5e:	3008      	adds	r0, #8
   83f60:	460b      	mov	r3, r1
   83f62:	3d10      	subs	r5, #16
   83f64:	2d10      	cmp	r5, #16
   83f66:	dd10      	ble.n	83f8a <_vfiprintf_r+0x772>
   83f68:	1c59      	adds	r1, r3, #1
   83f6a:	3210      	adds	r2, #16
   83f6c:	2907      	cmp	r1, #7
   83f6e:	9215      	str	r2, [sp, #84]	; 0x54
   83f70:	e880 0840 	stmia.w	r0, {r6, fp}
   83f74:	9114      	str	r1, [sp, #80]	; 0x50
   83f76:	ddf0      	ble.n	83f5a <_vfiprintf_r+0x742>
   83f78:	2a00      	cmp	r2, #0
   83f7a:	d163      	bne.n	84044 <_vfiprintf_r+0x82c>
   83f7c:	3d10      	subs	r5, #16
   83f7e:	2d10      	cmp	r5, #16
   83f80:	f04f 0c01 	mov.w	ip, #1
   83f84:	4613      	mov	r3, r2
   83f86:	4648      	mov	r0, r9
   83f88:	dcee      	bgt.n	83f68 <_vfiprintf_r+0x750>
   83f8a:	462c      	mov	r4, r5
   83f8c:	4661      	mov	r1, ip
   83f8e:	4635      	mov	r5, r6
   83f90:	4606      	mov	r6, r0
   83f92:	4422      	add	r2, r4
   83f94:	2907      	cmp	r1, #7
   83f96:	9215      	str	r2, [sp, #84]	; 0x54
   83f98:	6035      	str	r5, [r6, #0]
   83f9a:	6074      	str	r4, [r6, #4]
   83f9c:	9114      	str	r1, [sp, #80]	; 0x50
   83f9e:	f300 80c1 	bgt.w	84124 <_vfiprintf_r+0x90c>
   83fa2:	3608      	adds	r6, #8
   83fa4:	3101      	adds	r1, #1
   83fa6:	9d05      	ldr	r5, [sp, #20]
   83fa8:	2907      	cmp	r1, #7
   83faa:	442a      	add	r2, r5
   83fac:	9215      	str	r2, [sp, #84]	; 0x54
   83fae:	6037      	str	r7, [r6, #0]
   83fb0:	6075      	str	r5, [r6, #4]
   83fb2:	9114      	str	r1, [sp, #80]	; 0x50
   83fb4:	f340 80c1 	ble.w	8413a <_vfiprintf_r+0x922>
   83fb8:	2a00      	cmp	r2, #0
   83fba:	f040 8130 	bne.w	8421e <_vfiprintf_r+0xa06>
   83fbe:	9214      	str	r2, [sp, #80]	; 0x50
   83fc0:	464e      	mov	r6, r9
   83fc2:	f01a 0f04 	tst.w	sl, #4
   83fc6:	f000 808b 	beq.w	840e0 <_vfiprintf_r+0x8c8>
   83fca:	9d04      	ldr	r5, [sp, #16]
   83fcc:	f8dd b00c 	ldr.w	fp, [sp, #12]
   83fd0:	ebcb 0405 	rsb	r4, fp, r5
   83fd4:	2c00      	cmp	r4, #0
   83fd6:	f340 8083 	ble.w	840e0 <_vfiprintf_r+0x8c8>
   83fda:	2c10      	cmp	r4, #16
   83fdc:	f340 821e 	ble.w	8441c <_vfiprintf_r+0xc04>
   83fe0:	9914      	ldr	r1, [sp, #80]	; 0x50
   83fe2:	4d32      	ldr	r5, [pc, #200]	; (840ac <_vfiprintf_r+0x894>)
   83fe4:	2710      	movs	r7, #16
   83fe6:	f8dd a018 	ldr.w	sl, [sp, #24]
   83fea:	f8dd b008 	ldr.w	fp, [sp, #8]
   83fee:	e005      	b.n	83ffc <_vfiprintf_r+0x7e4>
   83ff0:	1c88      	adds	r0, r1, #2
   83ff2:	3608      	adds	r6, #8
   83ff4:	4619      	mov	r1, r3
   83ff6:	3c10      	subs	r4, #16
   83ff8:	2c10      	cmp	r4, #16
   83ffa:	dd10      	ble.n	8401e <_vfiprintf_r+0x806>
   83ffc:	1c4b      	adds	r3, r1, #1
   83ffe:	3210      	adds	r2, #16
   84000:	2b07      	cmp	r3, #7
   84002:	9215      	str	r2, [sp, #84]	; 0x54
   84004:	e886 00a0 	stmia.w	r6, {r5, r7}
   84008:	9314      	str	r3, [sp, #80]	; 0x50
   8400a:	ddf1      	ble.n	83ff0 <_vfiprintf_r+0x7d8>
   8400c:	2a00      	cmp	r2, #0
   8400e:	d17d      	bne.n	8410c <_vfiprintf_r+0x8f4>
   84010:	3c10      	subs	r4, #16
   84012:	2c10      	cmp	r4, #16
   84014:	f04f 0001 	mov.w	r0, #1
   84018:	4611      	mov	r1, r2
   8401a:	464e      	mov	r6, r9
   8401c:	dcee      	bgt.n	83ffc <_vfiprintf_r+0x7e4>
   8401e:	4422      	add	r2, r4
   84020:	2807      	cmp	r0, #7
   84022:	9215      	str	r2, [sp, #84]	; 0x54
   84024:	6035      	str	r5, [r6, #0]
   84026:	6074      	str	r4, [r6, #4]
   84028:	9014      	str	r0, [sp, #80]	; 0x50
   8402a:	dd59      	ble.n	840e0 <_vfiprintf_r+0x8c8>
   8402c:	2a00      	cmp	r2, #0
   8402e:	d14f      	bne.n	840d0 <_vfiprintf_r+0x8b8>
   84030:	9c09      	ldr	r4, [sp, #36]	; 0x24
   84032:	f8dd b00c 	ldr.w	fp, [sp, #12]
   84036:	9d04      	ldr	r5, [sp, #16]
   84038:	45ab      	cmp	fp, r5
   8403a:	bfac      	ite	ge
   8403c:	445c      	addge	r4, fp
   8403e:	1964      	addlt	r4, r4, r5
   84040:	9409      	str	r4, [sp, #36]	; 0x24
   84042:	e05e      	b.n	84102 <_vfiprintf_r+0x8ea>
   84044:	4620      	mov	r0, r4
   84046:	9902      	ldr	r1, [sp, #8]
   84048:	aa13      	add	r2, sp, #76	; 0x4c
   8404a:	f7ff fba9 	bl	837a0 <__sprint_r.part.0>
   8404e:	2800      	cmp	r0, #0
   84050:	d135      	bne.n	840be <_vfiprintf_r+0x8a6>
   84052:	9b14      	ldr	r3, [sp, #80]	; 0x50
   84054:	9a15      	ldr	r2, [sp, #84]	; 0x54
   84056:	f103 0c01 	add.w	ip, r3, #1
   8405a:	4648      	mov	r0, r9
   8405c:	e781      	b.n	83f62 <_vfiprintf_r+0x74a>
   8405e:	08e0      	lsrs	r0, r4, #3
   84060:	ea40 7045 	orr.w	r0, r0, r5, lsl #29
   84064:	f004 0207 	and.w	r2, r4, #7
   84068:	08e9      	lsrs	r1, r5, #3
   8406a:	3230      	adds	r2, #48	; 0x30
   8406c:	ea50 0b01 	orrs.w	fp, r0, r1
   84070:	461f      	mov	r7, r3
   84072:	701a      	strb	r2, [r3, #0]
   84074:	4604      	mov	r4, r0
   84076:	460d      	mov	r5, r1
   84078:	f103 33ff 	add.w	r3, r3, #4294967295
   8407c:	d1ef      	bne.n	8405e <_vfiprintf_r+0x846>
   8407e:	f01a 0f01 	tst.w	sl, #1
   84082:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
   84086:	4639      	mov	r1, r7
   84088:	f000 80b9 	beq.w	841fe <_vfiprintf_r+0x9e6>
   8408c:	2a30      	cmp	r2, #48	; 0x30
   8408e:	f43f acf4 	beq.w	83a7a <_vfiprintf_r+0x262>
   84092:	461f      	mov	r7, r3
   84094:	ebc7 0509 	rsb	r5, r7, r9
   84098:	2330      	movs	r3, #48	; 0x30
   8409a:	9505      	str	r5, [sp, #20]
   8409c:	f801 3c01 	strb.w	r3, [r1, #-1]
   840a0:	e4ee      	b.n	83a80 <_vfiprintf_r+0x268>
   840a2:	bf00      	nop
   840a4:	00086530 	.word	0x00086530
   840a8:	0008654c 	.word	0x0008654c
   840ac:	0008655c 	.word	0x0008655c
   840b0:	9b15      	ldr	r3, [sp, #84]	; 0x54
   840b2:	b123      	cbz	r3, 840be <_vfiprintf_r+0x8a6>
   840b4:	9806      	ldr	r0, [sp, #24]
   840b6:	9902      	ldr	r1, [sp, #8]
   840b8:	aa13      	add	r2, sp, #76	; 0x4c
   840ba:	f7ff fb71 	bl	837a0 <__sprint_r.part.0>
   840be:	9c02      	ldr	r4, [sp, #8]
   840c0:	89a3      	ldrh	r3, [r4, #12]
   840c2:	065b      	lsls	r3, r3, #25
   840c4:	f53f ac98 	bmi.w	839f8 <_vfiprintf_r+0x1e0>
   840c8:	9809      	ldr	r0, [sp, #36]	; 0x24
   840ca:	b031      	add	sp, #196	; 0xc4
   840cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   840d0:	9806      	ldr	r0, [sp, #24]
   840d2:	9902      	ldr	r1, [sp, #8]
   840d4:	aa13      	add	r2, sp, #76	; 0x4c
   840d6:	f7ff fb63 	bl	837a0 <__sprint_r.part.0>
   840da:	2800      	cmp	r0, #0
   840dc:	d1ef      	bne.n	840be <_vfiprintf_r+0x8a6>
   840de:	9a15      	ldr	r2, [sp, #84]	; 0x54
   840e0:	9c09      	ldr	r4, [sp, #36]	; 0x24
   840e2:	f8dd b00c 	ldr.w	fp, [sp, #12]
   840e6:	9d04      	ldr	r5, [sp, #16]
   840e8:	45ab      	cmp	fp, r5
   840ea:	bfac      	ite	ge
   840ec:	445c      	addge	r4, fp
   840ee:	1964      	addlt	r4, r4, r5
   840f0:	9409      	str	r4, [sp, #36]	; 0x24
   840f2:	b132      	cbz	r2, 84102 <_vfiprintf_r+0x8ea>
   840f4:	9806      	ldr	r0, [sp, #24]
   840f6:	9902      	ldr	r1, [sp, #8]
   840f8:	aa13      	add	r2, sp, #76	; 0x4c
   840fa:	f7ff fb51 	bl	837a0 <__sprint_r.part.0>
   840fe:	2800      	cmp	r0, #0
   84100:	d1dd      	bne.n	840be <_vfiprintf_r+0x8a6>
   84102:	2000      	movs	r0, #0
   84104:	9014      	str	r0, [sp, #80]	; 0x50
   84106:	464e      	mov	r6, r9
   84108:	f7ff bbb9 	b.w	8387e <_vfiprintf_r+0x66>
   8410c:	4650      	mov	r0, sl
   8410e:	4659      	mov	r1, fp
   84110:	aa13      	add	r2, sp, #76	; 0x4c
   84112:	f7ff fb45 	bl	837a0 <__sprint_r.part.0>
   84116:	2800      	cmp	r0, #0
   84118:	d1d1      	bne.n	840be <_vfiprintf_r+0x8a6>
   8411a:	9914      	ldr	r1, [sp, #80]	; 0x50
   8411c:	9a15      	ldr	r2, [sp, #84]	; 0x54
   8411e:	1c48      	adds	r0, r1, #1
   84120:	464e      	mov	r6, r9
   84122:	e768      	b.n	83ff6 <_vfiprintf_r+0x7de>
   84124:	2a00      	cmp	r2, #0
   84126:	f040 80f7 	bne.w	84318 <_vfiprintf_r+0xb00>
   8412a:	9c05      	ldr	r4, [sp, #20]
   8412c:	2301      	movs	r3, #1
   8412e:	9720      	str	r7, [sp, #128]	; 0x80
   84130:	9421      	str	r4, [sp, #132]	; 0x84
   84132:	9415      	str	r4, [sp, #84]	; 0x54
   84134:	4622      	mov	r2, r4
   84136:	9314      	str	r3, [sp, #80]	; 0x50
   84138:	464e      	mov	r6, r9
   8413a:	3608      	adds	r6, #8
   8413c:	e741      	b.n	83fc2 <_vfiprintf_r+0x7aa>
   8413e:	9d04      	ldr	r5, [sp, #16]
   84140:	f8dd b00c 	ldr.w	fp, [sp, #12]
   84144:	ebcb 0405 	rsb	r4, fp, r5
   84148:	2c00      	cmp	r4, #0
   8414a:	f77f aef7 	ble.w	83f3c <_vfiprintf_r+0x724>
   8414e:	2c10      	cmp	r4, #16
   84150:	4da6      	ldr	r5, [pc, #664]	; (843ec <_vfiprintf_r+0xbd4>)
   84152:	f340 8170 	ble.w	84436 <_vfiprintf_r+0xc1e>
   84156:	4629      	mov	r1, r5
   84158:	f04f 0b10 	mov.w	fp, #16
   8415c:	4625      	mov	r5, r4
   8415e:	4664      	mov	r4, ip
   84160:	46b4      	mov	ip, r6
   84162:	460e      	mov	r6, r1
   84164:	e006      	b.n	84174 <_vfiprintf_r+0x95c>
   84166:	1c98      	adds	r0, r3, #2
   84168:	f10c 0c08 	add.w	ip, ip, #8
   8416c:	460b      	mov	r3, r1
   8416e:	3d10      	subs	r5, #16
   84170:	2d10      	cmp	r5, #16
   84172:	dd0f      	ble.n	84194 <_vfiprintf_r+0x97c>
   84174:	1c59      	adds	r1, r3, #1
   84176:	3210      	adds	r2, #16
   84178:	2907      	cmp	r1, #7
   8417a:	9215      	str	r2, [sp, #84]	; 0x54
   8417c:	e88c 0840 	stmia.w	ip, {r6, fp}
   84180:	9114      	str	r1, [sp, #80]	; 0x50
   84182:	ddf0      	ble.n	84166 <_vfiprintf_r+0x94e>
   84184:	b9ba      	cbnz	r2, 841b6 <_vfiprintf_r+0x99e>
   84186:	3d10      	subs	r5, #16
   84188:	2d10      	cmp	r5, #16
   8418a:	f04f 0001 	mov.w	r0, #1
   8418e:	4613      	mov	r3, r2
   84190:	46cc      	mov	ip, r9
   84192:	dcef      	bgt.n	84174 <_vfiprintf_r+0x95c>
   84194:	4633      	mov	r3, r6
   84196:	4666      	mov	r6, ip
   84198:	46a4      	mov	ip, r4
   8419a:	462c      	mov	r4, r5
   8419c:	461d      	mov	r5, r3
   8419e:	4422      	add	r2, r4
   841a0:	2807      	cmp	r0, #7
   841a2:	9215      	str	r2, [sp, #84]	; 0x54
   841a4:	6035      	str	r5, [r6, #0]
   841a6:	6074      	str	r4, [r6, #4]
   841a8:	9014      	str	r0, [sp, #80]	; 0x50
   841aa:	f300 80af 	bgt.w	8430c <_vfiprintf_r+0xaf4>
   841ae:	3608      	adds	r6, #8
   841b0:	1c41      	adds	r1, r0, #1
   841b2:	4603      	mov	r3, r0
   841b4:	e6c2      	b.n	83f3c <_vfiprintf_r+0x724>
   841b6:	9806      	ldr	r0, [sp, #24]
   841b8:	9902      	ldr	r1, [sp, #8]
   841ba:	aa13      	add	r2, sp, #76	; 0x4c
   841bc:	f7ff faf0 	bl	837a0 <__sprint_r.part.0>
   841c0:	2800      	cmp	r0, #0
   841c2:	f47f af7c 	bne.w	840be <_vfiprintf_r+0x8a6>
   841c6:	9b14      	ldr	r3, [sp, #80]	; 0x50
   841c8:	9a15      	ldr	r2, [sp, #84]	; 0x54
   841ca:	1c58      	adds	r0, r3, #1
   841cc:	46cc      	mov	ip, r9
   841ce:	e7ce      	b.n	8416e <_vfiprintf_r+0x956>
   841d0:	2a00      	cmp	r2, #0
   841d2:	d179      	bne.n	842c8 <_vfiprintf_r+0xab0>
   841d4:	4619      	mov	r1, r3
   841d6:	464e      	mov	r6, r9
   841d8:	4613      	mov	r3, r2
   841da:	e69c      	b.n	83f16 <_vfiprintf_r+0x6fe>
   841dc:	2a00      	cmp	r2, #0
   841de:	f040 8084 	bne.w	842ea <_vfiprintf_r+0xad2>
   841e2:	2101      	movs	r1, #1
   841e4:	4613      	mov	r3, r2
   841e6:	464e      	mov	r6, r9
   841e8:	e6a4      	b.n	83f34 <_vfiprintf_r+0x71c>
   841ea:	464f      	mov	r7, r9
   841ec:	e448      	b.n	83a80 <_vfiprintf_r+0x268>
   841ee:	2d00      	cmp	r5, #0
   841f0:	bf08      	it	eq
   841f2:	2c0a      	cmpeq	r4, #10
   841f4:	d246      	bcs.n	84284 <_vfiprintf_r+0xa6c>
   841f6:	3430      	adds	r4, #48	; 0x30
   841f8:	af30      	add	r7, sp, #192	; 0xc0
   841fa:	f807 4d41 	strb.w	r4, [r7, #-65]!
   841fe:	ebc7 0309 	rsb	r3, r7, r9
   84202:	9305      	str	r3, [sp, #20]
   84204:	e43c      	b.n	83a80 <_vfiprintf_r+0x268>
   84206:	2302      	movs	r3, #2
   84208:	e417      	b.n	83a3a <_vfiprintf_r+0x222>
   8420a:	2a00      	cmp	r2, #0
   8420c:	f040 80af 	bne.w	8436e <_vfiprintf_r+0xb56>
   84210:	4613      	mov	r3, r2
   84212:	2101      	movs	r1, #1
   84214:	464e      	mov	r6, r9
   84216:	e66d      	b.n	83ef4 <_vfiprintf_r+0x6dc>
   84218:	4644      	mov	r4, r8
   8421a:	f7ff bb58 	b.w	838ce <_vfiprintf_r+0xb6>
   8421e:	9806      	ldr	r0, [sp, #24]
   84220:	9902      	ldr	r1, [sp, #8]
   84222:	aa13      	add	r2, sp, #76	; 0x4c
   84224:	f7ff fabc 	bl	837a0 <__sprint_r.part.0>
   84228:	2800      	cmp	r0, #0
   8422a:	f47f af48 	bne.w	840be <_vfiprintf_r+0x8a6>
   8422e:	9a15      	ldr	r2, [sp, #84]	; 0x54
   84230:	464e      	mov	r6, r9
   84232:	e6c6      	b.n	83fc2 <_vfiprintf_r+0x7aa>
   84234:	9d08      	ldr	r5, [sp, #32]
   84236:	682c      	ldr	r4, [r5, #0]
   84238:	3504      	adds	r5, #4
   8423a:	9508      	str	r5, [sp, #32]
   8423c:	2500      	movs	r5, #0
   8423e:	f7ff bbfc 	b.w	83a3a <_vfiprintf_r+0x222>
   84242:	9d08      	ldr	r5, [sp, #32]
   84244:	2301      	movs	r3, #1
   84246:	682c      	ldr	r4, [r5, #0]
   84248:	3504      	adds	r5, #4
   8424a:	9508      	str	r5, [sp, #32]
   8424c:	2500      	movs	r5, #0
   8424e:	f7ff bbf4 	b.w	83a3a <_vfiprintf_r+0x222>
   84252:	9d08      	ldr	r5, [sp, #32]
   84254:	682c      	ldr	r4, [r5, #0]
   84256:	3504      	adds	r5, #4
   84258:	9508      	str	r5, [sp, #32]
   8425a:	2500      	movs	r5, #0
   8425c:	e525      	b.n	83caa <_vfiprintf_r+0x492>
   8425e:	9d08      	ldr	r5, [sp, #32]
   84260:	682c      	ldr	r4, [r5, #0]
   84262:	3504      	adds	r5, #4
   84264:	9508      	str	r5, [sp, #32]
   84266:	17e5      	asrs	r5, r4, #31
   84268:	4622      	mov	r2, r4
   8426a:	462b      	mov	r3, r5
   8426c:	e48e      	b.n	83b8c <_vfiprintf_r+0x374>
   8426e:	9806      	ldr	r0, [sp, #24]
   84270:	9902      	ldr	r1, [sp, #8]
   84272:	aa13      	add	r2, sp, #76	; 0x4c
   84274:	f7ff fa94 	bl	837a0 <__sprint_r.part.0>
   84278:	2800      	cmp	r0, #0
   8427a:	f47f af20 	bne.w	840be <_vfiprintf_r+0x8a6>
   8427e:	464e      	mov	r6, r9
   84280:	f7ff bb9a 	b.w	839b8 <_vfiprintf_r+0x1a0>
   84284:	f10d 0b7f 	add.w	fp, sp, #127	; 0x7f
   84288:	9603      	str	r6, [sp, #12]
   8428a:	465e      	mov	r6, fp
   8428c:	46e3      	mov	fp, ip
   8428e:	4620      	mov	r0, r4
   84290:	4629      	mov	r1, r5
   84292:	220a      	movs	r2, #10
   84294:	2300      	movs	r3, #0
   84296:	f001 fdb9 	bl	85e0c <__aeabi_uldivmod>
   8429a:	3230      	adds	r2, #48	; 0x30
   8429c:	7032      	strb	r2, [r6, #0]
   8429e:	4620      	mov	r0, r4
   842a0:	4629      	mov	r1, r5
   842a2:	220a      	movs	r2, #10
   842a4:	2300      	movs	r3, #0
   842a6:	f001 fdb1 	bl	85e0c <__aeabi_uldivmod>
   842aa:	4604      	mov	r4, r0
   842ac:	460d      	mov	r5, r1
   842ae:	ea54 0005 	orrs.w	r0, r4, r5
   842b2:	4637      	mov	r7, r6
   842b4:	f106 36ff 	add.w	r6, r6, #4294967295
   842b8:	d1e9      	bne.n	8428e <_vfiprintf_r+0xa76>
   842ba:	ebc7 0309 	rsb	r3, r7, r9
   842be:	46dc      	mov	ip, fp
   842c0:	9e03      	ldr	r6, [sp, #12]
   842c2:	9305      	str	r3, [sp, #20]
   842c4:	f7ff bbdc 	b.w	83a80 <_vfiprintf_r+0x268>
   842c8:	9806      	ldr	r0, [sp, #24]
   842ca:	9902      	ldr	r1, [sp, #8]
   842cc:	aa13      	add	r2, sp, #76	; 0x4c
   842ce:	f8cd c004 	str.w	ip, [sp, #4]
   842d2:	f7ff fa65 	bl	837a0 <__sprint_r.part.0>
   842d6:	f8dd c004 	ldr.w	ip, [sp, #4]
   842da:	2800      	cmp	r0, #0
   842dc:	f47f aeef 	bne.w	840be <_vfiprintf_r+0x8a6>
   842e0:	9b14      	ldr	r3, [sp, #80]	; 0x50
   842e2:	9a15      	ldr	r2, [sp, #84]	; 0x54
   842e4:	1c59      	adds	r1, r3, #1
   842e6:	464e      	mov	r6, r9
   842e8:	e615      	b.n	83f16 <_vfiprintf_r+0x6fe>
   842ea:	9806      	ldr	r0, [sp, #24]
   842ec:	9902      	ldr	r1, [sp, #8]
   842ee:	aa13      	add	r2, sp, #76	; 0x4c
   842f0:	f8cd c004 	str.w	ip, [sp, #4]
   842f4:	f7ff fa54 	bl	837a0 <__sprint_r.part.0>
   842f8:	f8dd c004 	ldr.w	ip, [sp, #4]
   842fc:	2800      	cmp	r0, #0
   842fe:	f47f aede 	bne.w	840be <_vfiprintf_r+0x8a6>
   84302:	9b14      	ldr	r3, [sp, #80]	; 0x50
   84304:	9a15      	ldr	r2, [sp, #84]	; 0x54
   84306:	1c59      	adds	r1, r3, #1
   84308:	464e      	mov	r6, r9
   8430a:	e613      	b.n	83f34 <_vfiprintf_r+0x71c>
   8430c:	2a00      	cmp	r2, #0
   8430e:	d156      	bne.n	843be <_vfiprintf_r+0xba6>
   84310:	2101      	movs	r1, #1
   84312:	4613      	mov	r3, r2
   84314:	464e      	mov	r6, r9
   84316:	e611      	b.n	83f3c <_vfiprintf_r+0x724>
   84318:	9806      	ldr	r0, [sp, #24]
   8431a:	9902      	ldr	r1, [sp, #8]
   8431c:	aa13      	add	r2, sp, #76	; 0x4c
   8431e:	f7ff fa3f 	bl	837a0 <__sprint_r.part.0>
   84322:	2800      	cmp	r0, #0
   84324:	f47f aecb 	bne.w	840be <_vfiprintf_r+0x8a6>
   84328:	9914      	ldr	r1, [sp, #80]	; 0x50
   8432a:	9a15      	ldr	r2, [sp, #84]	; 0x54
   8432c:	3101      	adds	r1, #1
   8432e:	464e      	mov	r6, r9
   84330:	e639      	b.n	83fa6 <_vfiprintf_r+0x78e>
   84332:	f04f 0b2d 	mov.w	fp, #45	; 0x2d
   84336:	4264      	negs	r4, r4
   84338:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
   8433c:	f88d b047 	strb.w	fp, [sp, #71]	; 0x47
   84340:	f8cd b01c 	str.w	fp, [sp, #28]
   84344:	f8cd c014 	str.w	ip, [sp, #20]
   84348:	2301      	movs	r3, #1
   8434a:	f7ff bb7e 	b.w	83a4a <_vfiprintf_r+0x232>
   8434e:	f01a 0f10 	tst.w	sl, #16
   84352:	d11d      	bne.n	84390 <_vfiprintf_r+0xb78>
   84354:	f01a 0f40 	tst.w	sl, #64	; 0x40
   84358:	d058      	beq.n	8440c <_vfiprintf_r+0xbf4>
   8435a:	9d08      	ldr	r5, [sp, #32]
   8435c:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
   84360:	682b      	ldr	r3, [r5, #0]
   84362:	3504      	adds	r5, #4
   84364:	9508      	str	r5, [sp, #32]
   84366:	f8a3 b000 	strh.w	fp, [r3]
   8436a:	f7ff ba88 	b.w	8387e <_vfiprintf_r+0x66>
   8436e:	9806      	ldr	r0, [sp, #24]
   84370:	9902      	ldr	r1, [sp, #8]
   84372:	aa13      	add	r2, sp, #76	; 0x4c
   84374:	f8cd c004 	str.w	ip, [sp, #4]
   84378:	f7ff fa12 	bl	837a0 <__sprint_r.part.0>
   8437c:	f8dd c004 	ldr.w	ip, [sp, #4]
   84380:	2800      	cmp	r0, #0
   84382:	f47f ae9c 	bne.w	840be <_vfiprintf_r+0x8a6>
   84386:	9b14      	ldr	r3, [sp, #80]	; 0x50
   84388:	9a15      	ldr	r2, [sp, #84]	; 0x54
   8438a:	1c59      	adds	r1, r3, #1
   8438c:	464e      	mov	r6, r9
   8438e:	e5b1      	b.n	83ef4 <_vfiprintf_r+0x6dc>
   84390:	f8dd b020 	ldr.w	fp, [sp, #32]
   84394:	9c09      	ldr	r4, [sp, #36]	; 0x24
   84396:	f8db 3000 	ldr.w	r3, [fp]
   8439a:	f10b 0b04 	add.w	fp, fp, #4
   8439e:	f8cd b020 	str.w	fp, [sp, #32]
   843a2:	601c      	str	r4, [r3, #0]
   843a4:	f7ff ba6b 	b.w	8387e <_vfiprintf_r+0x66>
   843a8:	9408      	str	r4, [sp, #32]
   843aa:	f7ff f997 	bl	836dc <strlen>
   843ae:	f89d 4047 	ldrb.w	r4, [sp, #71]	; 0x47
   843b2:	9005      	str	r0, [sp, #20]
   843b4:	9407      	str	r4, [sp, #28]
   843b6:	f04f 0c00 	mov.w	ip, #0
   843ba:	f7ff bb61 	b.w	83a80 <_vfiprintf_r+0x268>
   843be:	9806      	ldr	r0, [sp, #24]
   843c0:	9902      	ldr	r1, [sp, #8]
   843c2:	aa13      	add	r2, sp, #76	; 0x4c
   843c4:	f8cd c004 	str.w	ip, [sp, #4]
   843c8:	f7ff f9ea 	bl	837a0 <__sprint_r.part.0>
   843cc:	f8dd c004 	ldr.w	ip, [sp, #4]
   843d0:	2800      	cmp	r0, #0
   843d2:	f47f ae74 	bne.w	840be <_vfiprintf_r+0x8a6>
   843d6:	9b14      	ldr	r3, [sp, #80]	; 0x50
   843d8:	9a15      	ldr	r2, [sp, #84]	; 0x54
   843da:	1c59      	adds	r1, r3, #1
   843dc:	464e      	mov	r6, r9
   843de:	e5ad      	b.n	83f3c <_vfiprintf_r+0x724>
   843e0:	9b14      	ldr	r3, [sp, #80]	; 0x50
   843e2:	9a15      	ldr	r2, [sp, #84]	; 0x54
   843e4:	3301      	adds	r3, #1
   843e6:	4d02      	ldr	r5, [pc, #8]	; (843f0 <_vfiprintf_r+0xbd8>)
   843e8:	f7ff bb9a 	b.w	83b20 <_vfiprintf_r+0x308>
   843ec:	0008654c 	.word	0x0008654c
   843f0:	0008655c 	.word	0x0008655c
   843f4:	f1bc 0f06 	cmp.w	ip, #6
   843f8:	bf34      	ite	cc
   843fa:	4663      	movcc	r3, ip
   843fc:	2306      	movcs	r3, #6
   843fe:	9408      	str	r4, [sp, #32]
   84400:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
   84404:	9305      	str	r3, [sp, #20]
   84406:	9403      	str	r4, [sp, #12]
   84408:	4f16      	ldr	r7, [pc, #88]	; (84464 <_vfiprintf_r+0xc4c>)
   8440a:	e472      	b.n	83cf2 <_vfiprintf_r+0x4da>
   8440c:	9c08      	ldr	r4, [sp, #32]
   8440e:	9d09      	ldr	r5, [sp, #36]	; 0x24
   84410:	6823      	ldr	r3, [r4, #0]
   84412:	3404      	adds	r4, #4
   84414:	9408      	str	r4, [sp, #32]
   84416:	601d      	str	r5, [r3, #0]
   84418:	f7ff ba31 	b.w	8387e <_vfiprintf_r+0x66>
   8441c:	9814      	ldr	r0, [sp, #80]	; 0x50
   8441e:	4d12      	ldr	r5, [pc, #72]	; (84468 <_vfiprintf_r+0xc50>)
   84420:	3001      	adds	r0, #1
   84422:	e5fc      	b.n	8401e <_vfiprintf_r+0x806>
   84424:	f89d 5047 	ldrb.w	r5, [sp, #71]	; 0x47
   84428:	f8cd c014 	str.w	ip, [sp, #20]
   8442c:	9507      	str	r5, [sp, #28]
   8442e:	9408      	str	r4, [sp, #32]
   84430:	4684      	mov	ip, r0
   84432:	f7ff bb25 	b.w	83a80 <_vfiprintf_r+0x268>
   84436:	4608      	mov	r0, r1
   84438:	e6b1      	b.n	8419e <_vfiprintf_r+0x986>
   8443a:	46a0      	mov	r8, r4
   8443c:	2500      	movs	r5, #0
   8443e:	f7ff ba5a 	b.w	838f6 <_vfiprintf_r+0xde>
   84442:	f8dd b020 	ldr.w	fp, [sp, #32]
   84446:	f898 3001 	ldrb.w	r3, [r8, #1]
   8444a:	f8db 5000 	ldr.w	r5, [fp]
   8444e:	f10b 0204 	add.w	r2, fp, #4
   84452:	2d00      	cmp	r5, #0
   84454:	9208      	str	r2, [sp, #32]
   84456:	46a0      	mov	r8, r4
   84458:	f6bf aa4b 	bge.w	838f2 <_vfiprintf_r+0xda>
   8445c:	f04f 35ff 	mov.w	r5, #4294967295
   84460:	f7ff ba47 	b.w	838f2 <_vfiprintf_r+0xda>
   84464:	00086544 	.word	0x00086544
   84468:	0008655c 	.word	0x0008655c

0008446c <__sbprintf>:
   8446c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   84470:	6e4f      	ldr	r7, [r1, #100]	; 0x64
   84472:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
   84476:	4688      	mov	r8, r1
   84478:	9719      	str	r7, [sp, #100]	; 0x64
   8447a:	f8d8 701c 	ldr.w	r7, [r8, #28]
   8447e:	f8b1 a00c 	ldrh.w	sl, [r1, #12]
   84482:	f8b1 900e 	ldrh.w	r9, [r1, #14]
   84486:	9707      	str	r7, [sp, #28]
   84488:	f8d8 7024 	ldr.w	r7, [r8, #36]	; 0x24
   8448c:	ac1a      	add	r4, sp, #104	; 0x68
   8448e:	f44f 6580 	mov.w	r5, #1024	; 0x400
   84492:	f02a 0a02 	bic.w	sl, sl, #2
   84496:	2600      	movs	r6, #0
   84498:	4669      	mov	r1, sp
   8449a:	9400      	str	r4, [sp, #0]
   8449c:	9404      	str	r4, [sp, #16]
   8449e:	9502      	str	r5, [sp, #8]
   844a0:	9505      	str	r5, [sp, #20]
   844a2:	f8ad a00c 	strh.w	sl, [sp, #12]
   844a6:	f8ad 900e 	strh.w	r9, [sp, #14]
   844aa:	9709      	str	r7, [sp, #36]	; 0x24
   844ac:	9606      	str	r6, [sp, #24]
   844ae:	4605      	mov	r5, r0
   844b0:	f7ff f9b2 	bl	83818 <_vfiprintf_r>
   844b4:	1e04      	subs	r4, r0, #0
   844b6:	db07      	blt.n	844c8 <__sbprintf+0x5c>
   844b8:	4628      	mov	r0, r5
   844ba:	4669      	mov	r1, sp
   844bc:	f000 f92a 	bl	84714 <_fflush_r>
   844c0:	42b0      	cmp	r0, r6
   844c2:	bf18      	it	ne
   844c4:	f04f 34ff 	movne.w	r4, #4294967295
   844c8:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   844cc:	065b      	lsls	r3, r3, #25
   844ce:	d505      	bpl.n	844dc <__sbprintf+0x70>
   844d0:	f8b8 300c 	ldrh.w	r3, [r8, #12]
   844d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   844d8:	f8a8 300c 	strh.w	r3, [r8, #12]
   844dc:	4620      	mov	r0, r4
   844de:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
   844e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   844e6:	bf00      	nop

000844e8 <__swsetup_r>:
   844e8:	4b2f      	ldr	r3, [pc, #188]	; (845a8 <__swsetup_r+0xc0>)
   844ea:	b570      	push	{r4, r5, r6, lr}
   844ec:	4606      	mov	r6, r0
   844ee:	6818      	ldr	r0, [r3, #0]
   844f0:	460c      	mov	r4, r1
   844f2:	b110      	cbz	r0, 844fa <__swsetup_r+0x12>
   844f4:	6b82      	ldr	r2, [r0, #56]	; 0x38
   844f6:	2a00      	cmp	r2, #0
   844f8:	d036      	beq.n	84568 <__swsetup_r+0x80>
   844fa:	89a5      	ldrh	r5, [r4, #12]
   844fc:	b2ab      	uxth	r3, r5
   844fe:	0719      	lsls	r1, r3, #28
   84500:	d50c      	bpl.n	8451c <__swsetup_r+0x34>
   84502:	6922      	ldr	r2, [r4, #16]
   84504:	b1aa      	cbz	r2, 84532 <__swsetup_r+0x4a>
   84506:	f013 0101 	ands.w	r1, r3, #1
   8450a:	d01e      	beq.n	8454a <__swsetup_r+0x62>
   8450c:	6963      	ldr	r3, [r4, #20]
   8450e:	2100      	movs	r1, #0
   84510:	425b      	negs	r3, r3
   84512:	61a3      	str	r3, [r4, #24]
   84514:	60a1      	str	r1, [r4, #8]
   84516:	b1f2      	cbz	r2, 84556 <__swsetup_r+0x6e>
   84518:	2000      	movs	r0, #0
   8451a:	bd70      	pop	{r4, r5, r6, pc}
   8451c:	06da      	lsls	r2, r3, #27
   8451e:	d53a      	bpl.n	84596 <__swsetup_r+0xae>
   84520:	075b      	lsls	r3, r3, #29
   84522:	d424      	bmi.n	8456e <__swsetup_r+0x86>
   84524:	6922      	ldr	r2, [r4, #16]
   84526:	f045 0308 	orr.w	r3, r5, #8
   8452a:	81a3      	strh	r3, [r4, #12]
   8452c:	b29b      	uxth	r3, r3
   8452e:	2a00      	cmp	r2, #0
   84530:	d1e9      	bne.n	84506 <__swsetup_r+0x1e>
   84532:	f403 7120 	and.w	r1, r3, #640	; 0x280
   84536:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   8453a:	d0e4      	beq.n	84506 <__swsetup_r+0x1e>
   8453c:	4630      	mov	r0, r6
   8453e:	4621      	mov	r1, r4
   84540:	f000 fcce 	bl	84ee0 <__smakebuf_r>
   84544:	89a3      	ldrh	r3, [r4, #12]
   84546:	6922      	ldr	r2, [r4, #16]
   84548:	e7dd      	b.n	84506 <__swsetup_r+0x1e>
   8454a:	0798      	lsls	r0, r3, #30
   8454c:	bf58      	it	pl
   8454e:	6961      	ldrpl	r1, [r4, #20]
   84550:	60a1      	str	r1, [r4, #8]
   84552:	2a00      	cmp	r2, #0
   84554:	d1e0      	bne.n	84518 <__swsetup_r+0x30>
   84556:	89a3      	ldrh	r3, [r4, #12]
   84558:	061a      	lsls	r2, r3, #24
   8455a:	d5dd      	bpl.n	84518 <__swsetup_r+0x30>
   8455c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   84560:	81a3      	strh	r3, [r4, #12]
   84562:	f04f 30ff 	mov.w	r0, #4294967295
   84566:	bd70      	pop	{r4, r5, r6, pc}
   84568:	f000 f8f0 	bl	8474c <__sinit>
   8456c:	e7c5      	b.n	844fa <__swsetup_r+0x12>
   8456e:	6b21      	ldr	r1, [r4, #48]	; 0x30
   84570:	b149      	cbz	r1, 84586 <__swsetup_r+0x9e>
   84572:	f104 0340 	add.w	r3, r4, #64	; 0x40
   84576:	4299      	cmp	r1, r3
   84578:	d003      	beq.n	84582 <__swsetup_r+0x9a>
   8457a:	4630      	mov	r0, r6
   8457c:	f000 fa2a 	bl	849d4 <_free_r>
   84580:	89a5      	ldrh	r5, [r4, #12]
   84582:	2300      	movs	r3, #0
   84584:	6323      	str	r3, [r4, #48]	; 0x30
   84586:	6922      	ldr	r2, [r4, #16]
   84588:	f025 0524 	bic.w	r5, r5, #36	; 0x24
   8458c:	2100      	movs	r1, #0
   8458e:	b2ad      	uxth	r5, r5
   84590:	6022      	str	r2, [r4, #0]
   84592:	6061      	str	r1, [r4, #4]
   84594:	e7c7      	b.n	84526 <__swsetup_r+0x3e>
   84596:	f045 0540 	orr.w	r5, r5, #64	; 0x40
   8459a:	2309      	movs	r3, #9
   8459c:	6033      	str	r3, [r6, #0]
   8459e:	f04f 30ff 	mov.w	r0, #4294967295
   845a2:	81a5      	strh	r5, [r4, #12]
   845a4:	bd70      	pop	{r4, r5, r6, pc}
   845a6:	bf00      	nop
   845a8:	20070568 	.word	0x20070568

000845ac <register_fini>:
   845ac:	4b02      	ldr	r3, [pc, #8]	; (845b8 <register_fini+0xc>)
   845ae:	b113      	cbz	r3, 845b6 <register_fini+0xa>
   845b0:	4802      	ldr	r0, [pc, #8]	; (845bc <register_fini+0x10>)
   845b2:	f000 b805 	b.w	845c0 <atexit>
   845b6:	4770      	bx	lr
   845b8:	00000000 	.word	0x00000000
   845bc:	00084849 	.word	0x00084849

000845c0 <atexit>:
   845c0:	4601      	mov	r1, r0
   845c2:	2000      	movs	r0, #0
   845c4:	4602      	mov	r2, r0
   845c6:	4603      	mov	r3, r0
   845c8:	f001 bb24 	b.w	85c14 <__register_exitproc>

000845cc <__sflush_r>:
   845cc:	898b      	ldrh	r3, [r1, #12]
   845ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   845d2:	b29a      	uxth	r2, r3
   845d4:	460d      	mov	r5, r1
   845d6:	0711      	lsls	r1, r2, #28
   845d8:	4680      	mov	r8, r0
   845da:	d43c      	bmi.n	84656 <__sflush_r+0x8a>
   845dc:	686a      	ldr	r2, [r5, #4]
   845de:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   845e2:	2a00      	cmp	r2, #0
   845e4:	81ab      	strh	r3, [r5, #12]
   845e6:	dd59      	ble.n	8469c <__sflush_r+0xd0>
   845e8:	6aac      	ldr	r4, [r5, #40]	; 0x28
   845ea:	2c00      	cmp	r4, #0
   845ec:	d04b      	beq.n	84686 <__sflush_r+0xba>
   845ee:	b29b      	uxth	r3, r3
   845f0:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
   845f4:	2100      	movs	r1, #0
   845f6:	b292      	uxth	r2, r2
   845f8:	f8d8 6000 	ldr.w	r6, [r8]
   845fc:	f8c8 1000 	str.w	r1, [r8]
   84600:	2a00      	cmp	r2, #0
   84602:	d04f      	beq.n	846a4 <__sflush_r+0xd8>
   84604:	6d2a      	ldr	r2, [r5, #80]	; 0x50
   84606:	075f      	lsls	r7, r3, #29
   84608:	d505      	bpl.n	84616 <__sflush_r+0x4a>
   8460a:	6869      	ldr	r1, [r5, #4]
   8460c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   8460e:	1a52      	subs	r2, r2, r1
   84610:	b10b      	cbz	r3, 84616 <__sflush_r+0x4a>
   84612:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   84614:	1ad2      	subs	r2, r2, r3
   84616:	4640      	mov	r0, r8
   84618:	69e9      	ldr	r1, [r5, #28]
   8461a:	2300      	movs	r3, #0
   8461c:	47a0      	blx	r4
   8461e:	1c44      	adds	r4, r0, #1
   84620:	d04a      	beq.n	846b8 <__sflush_r+0xec>
   84622:	89ab      	ldrh	r3, [r5, #12]
   84624:	692a      	ldr	r2, [r5, #16]
   84626:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   8462a:	b29b      	uxth	r3, r3
   8462c:	2100      	movs	r1, #0
   8462e:	602a      	str	r2, [r5, #0]
   84630:	04da      	lsls	r2, r3, #19
   84632:	81ab      	strh	r3, [r5, #12]
   84634:	6069      	str	r1, [r5, #4]
   84636:	d44c      	bmi.n	846d2 <__sflush_r+0x106>
   84638:	6b29      	ldr	r1, [r5, #48]	; 0x30
   8463a:	f8c8 6000 	str.w	r6, [r8]
   8463e:	b311      	cbz	r1, 84686 <__sflush_r+0xba>
   84640:	f105 0340 	add.w	r3, r5, #64	; 0x40
   84644:	4299      	cmp	r1, r3
   84646:	d002      	beq.n	8464e <__sflush_r+0x82>
   84648:	4640      	mov	r0, r8
   8464a:	f000 f9c3 	bl	849d4 <_free_r>
   8464e:	2000      	movs	r0, #0
   84650:	6328      	str	r0, [r5, #48]	; 0x30
   84652:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   84656:	692e      	ldr	r6, [r5, #16]
   84658:	b1ae      	cbz	r6, 84686 <__sflush_r+0xba>
   8465a:	0791      	lsls	r1, r2, #30
   8465c:	682c      	ldr	r4, [r5, #0]
   8465e:	bf0c      	ite	eq
   84660:	696b      	ldreq	r3, [r5, #20]
   84662:	2300      	movne	r3, #0
   84664:	602e      	str	r6, [r5, #0]
   84666:	1ba4      	subs	r4, r4, r6
   84668:	60ab      	str	r3, [r5, #8]
   8466a:	e00a      	b.n	84682 <__sflush_r+0xb6>
   8466c:	4632      	mov	r2, r6
   8466e:	4623      	mov	r3, r4
   84670:	6a6f      	ldr	r7, [r5, #36]	; 0x24
   84672:	4640      	mov	r0, r8
   84674:	69e9      	ldr	r1, [r5, #28]
   84676:	47b8      	blx	r7
   84678:	2800      	cmp	r0, #0
   8467a:	ebc0 0404 	rsb	r4, r0, r4
   8467e:	4406      	add	r6, r0
   84680:	dd04      	ble.n	8468c <__sflush_r+0xc0>
   84682:	2c00      	cmp	r4, #0
   84684:	dcf2      	bgt.n	8466c <__sflush_r+0xa0>
   84686:	2000      	movs	r0, #0
   84688:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8468c:	89ab      	ldrh	r3, [r5, #12]
   8468e:	f04f 30ff 	mov.w	r0, #4294967295
   84692:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   84696:	81ab      	strh	r3, [r5, #12]
   84698:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8469c:	6bea      	ldr	r2, [r5, #60]	; 0x3c
   8469e:	2a00      	cmp	r2, #0
   846a0:	dca2      	bgt.n	845e8 <__sflush_r+0x1c>
   846a2:	e7f0      	b.n	84686 <__sflush_r+0xba>
   846a4:	2301      	movs	r3, #1
   846a6:	4640      	mov	r0, r8
   846a8:	69e9      	ldr	r1, [r5, #28]
   846aa:	47a0      	blx	r4
   846ac:	1c43      	adds	r3, r0, #1
   846ae:	4602      	mov	r2, r0
   846b0:	d01e      	beq.n	846f0 <__sflush_r+0x124>
   846b2:	89ab      	ldrh	r3, [r5, #12]
   846b4:	6aac      	ldr	r4, [r5, #40]	; 0x28
   846b6:	e7a6      	b.n	84606 <__sflush_r+0x3a>
   846b8:	f8d8 3000 	ldr.w	r3, [r8]
   846bc:	b95b      	cbnz	r3, 846d6 <__sflush_r+0x10a>
   846be:	89aa      	ldrh	r2, [r5, #12]
   846c0:	6929      	ldr	r1, [r5, #16]
   846c2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
   846c6:	b292      	uxth	r2, r2
   846c8:	606b      	str	r3, [r5, #4]
   846ca:	04d3      	lsls	r3, r2, #19
   846cc:	81aa      	strh	r2, [r5, #12]
   846ce:	6029      	str	r1, [r5, #0]
   846d0:	d5b2      	bpl.n	84638 <__sflush_r+0x6c>
   846d2:	6528      	str	r0, [r5, #80]	; 0x50
   846d4:	e7b0      	b.n	84638 <__sflush_r+0x6c>
   846d6:	2b1d      	cmp	r3, #29
   846d8:	d001      	beq.n	846de <__sflush_r+0x112>
   846da:	2b16      	cmp	r3, #22
   846dc:	d113      	bne.n	84706 <__sflush_r+0x13a>
   846de:	89a9      	ldrh	r1, [r5, #12]
   846e0:	692b      	ldr	r3, [r5, #16]
   846e2:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
   846e6:	2200      	movs	r2, #0
   846e8:	81a9      	strh	r1, [r5, #12]
   846ea:	602b      	str	r3, [r5, #0]
   846ec:	606a      	str	r2, [r5, #4]
   846ee:	e7a3      	b.n	84638 <__sflush_r+0x6c>
   846f0:	f8d8 3000 	ldr.w	r3, [r8]
   846f4:	2b00      	cmp	r3, #0
   846f6:	d0dc      	beq.n	846b2 <__sflush_r+0xe6>
   846f8:	2b1d      	cmp	r3, #29
   846fa:	d001      	beq.n	84700 <__sflush_r+0x134>
   846fc:	2b16      	cmp	r3, #22
   846fe:	d1c5      	bne.n	8468c <__sflush_r+0xc0>
   84700:	f8c8 6000 	str.w	r6, [r8]
   84704:	e7bf      	b.n	84686 <__sflush_r+0xba>
   84706:	89ab      	ldrh	r3, [r5, #12]
   84708:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8470c:	81ab      	strh	r3, [r5, #12]
   8470e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   84712:	bf00      	nop

00084714 <_fflush_r>:
   84714:	b510      	push	{r4, lr}
   84716:	4604      	mov	r4, r0
   84718:	b082      	sub	sp, #8
   8471a:	b108      	cbz	r0, 84720 <_fflush_r+0xc>
   8471c:	6b83      	ldr	r3, [r0, #56]	; 0x38
   8471e:	b153      	cbz	r3, 84736 <_fflush_r+0x22>
   84720:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
   84724:	b908      	cbnz	r0, 8472a <_fflush_r+0x16>
   84726:	b002      	add	sp, #8
   84728:	bd10      	pop	{r4, pc}
   8472a:	4620      	mov	r0, r4
   8472c:	b002      	add	sp, #8
   8472e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   84732:	f7ff bf4b 	b.w	845cc <__sflush_r>
   84736:	9101      	str	r1, [sp, #4]
   84738:	f000 f808 	bl	8474c <__sinit>
   8473c:	9901      	ldr	r1, [sp, #4]
   8473e:	e7ef      	b.n	84720 <_fflush_r+0xc>

00084740 <_cleanup_r>:
   84740:	4901      	ldr	r1, [pc, #4]	; (84748 <_cleanup_r+0x8>)
   84742:	f000 bb9f 	b.w	84e84 <_fwalk>
   84746:	bf00      	nop
   84748:	00085d61 	.word	0x00085d61

0008474c <__sinit>:
   8474c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   84750:	6b84      	ldr	r4, [r0, #56]	; 0x38
   84752:	b083      	sub	sp, #12
   84754:	4607      	mov	r7, r0
   84756:	2c00      	cmp	r4, #0
   84758:	d165      	bne.n	84826 <__sinit+0xda>
   8475a:	687d      	ldr	r5, [r7, #4]
   8475c:	4833      	ldr	r0, [pc, #204]	; (8482c <__sinit+0xe0>)
   8475e:	2304      	movs	r3, #4
   84760:	2103      	movs	r1, #3
   84762:	f507 723b 	add.w	r2, r7, #748	; 0x2ec
   84766:	63f8      	str	r0, [r7, #60]	; 0x3c
   84768:	f8c7 12e4 	str.w	r1, [r7, #740]	; 0x2e4
   8476c:	f8c7 22e8 	str.w	r2, [r7, #744]	; 0x2e8
   84770:	f8c7 42e0 	str.w	r4, [r7, #736]	; 0x2e0
   84774:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   84778:	81ab      	strh	r3, [r5, #12]
   8477a:	602c      	str	r4, [r5, #0]
   8477c:	606c      	str	r4, [r5, #4]
   8477e:	60ac      	str	r4, [r5, #8]
   84780:	666c      	str	r4, [r5, #100]	; 0x64
   84782:	81ec      	strh	r4, [r5, #14]
   84784:	612c      	str	r4, [r5, #16]
   84786:	616c      	str	r4, [r5, #20]
   84788:	61ac      	str	r4, [r5, #24]
   8478a:	4621      	mov	r1, r4
   8478c:	2208      	movs	r2, #8
   8478e:	f7fe fed3 	bl	83538 <memset>
   84792:	f8df b09c 	ldr.w	fp, [pc, #156]	; 84830 <__sinit+0xe4>
   84796:	68be      	ldr	r6, [r7, #8]
   84798:	f8df a098 	ldr.w	sl, [pc, #152]	; 84834 <__sinit+0xe8>
   8479c:	f8df 9098 	ldr.w	r9, [pc, #152]	; 84838 <__sinit+0xec>
   847a0:	f8df 8098 	ldr.w	r8, [pc, #152]	; 8483c <__sinit+0xf0>
   847a4:	2301      	movs	r3, #1
   847a6:	2209      	movs	r2, #9
   847a8:	61ed      	str	r5, [r5, #28]
   847aa:	f8c5 b020 	str.w	fp, [r5, #32]
   847ae:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
   847b2:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
   847b6:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
   847ba:	4621      	mov	r1, r4
   847bc:	81f3      	strh	r3, [r6, #14]
   847be:	81b2      	strh	r2, [r6, #12]
   847c0:	6034      	str	r4, [r6, #0]
   847c2:	6074      	str	r4, [r6, #4]
   847c4:	60b4      	str	r4, [r6, #8]
   847c6:	6674      	str	r4, [r6, #100]	; 0x64
   847c8:	6134      	str	r4, [r6, #16]
   847ca:	6174      	str	r4, [r6, #20]
   847cc:	61b4      	str	r4, [r6, #24]
   847ce:	2208      	movs	r2, #8
   847d0:	f106 005c 	add.w	r0, r6, #92	; 0x5c
   847d4:	9301      	str	r3, [sp, #4]
   847d6:	f7fe feaf 	bl	83538 <memset>
   847da:	68fd      	ldr	r5, [r7, #12]
   847dc:	2012      	movs	r0, #18
   847de:	2202      	movs	r2, #2
   847e0:	61f6      	str	r6, [r6, #28]
   847e2:	f8c6 b020 	str.w	fp, [r6, #32]
   847e6:	f8c6 a024 	str.w	sl, [r6, #36]	; 0x24
   847ea:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
   847ee:	f8c6 802c 	str.w	r8, [r6, #44]	; 0x2c
   847f2:	4621      	mov	r1, r4
   847f4:	81a8      	strh	r0, [r5, #12]
   847f6:	81ea      	strh	r2, [r5, #14]
   847f8:	602c      	str	r4, [r5, #0]
   847fa:	606c      	str	r4, [r5, #4]
   847fc:	60ac      	str	r4, [r5, #8]
   847fe:	666c      	str	r4, [r5, #100]	; 0x64
   84800:	612c      	str	r4, [r5, #16]
   84802:	616c      	str	r4, [r5, #20]
   84804:	61ac      	str	r4, [r5, #24]
   84806:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   8480a:	2208      	movs	r2, #8
   8480c:	f7fe fe94 	bl	83538 <memset>
   84810:	9b01      	ldr	r3, [sp, #4]
   84812:	61ed      	str	r5, [r5, #28]
   84814:	f8c5 b020 	str.w	fp, [r5, #32]
   84818:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
   8481c:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
   84820:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
   84824:	63bb      	str	r3, [r7, #56]	; 0x38
   84826:	b003      	add	sp, #12
   84828:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8482c:	00084741 	.word	0x00084741
   84830:	00085a55 	.word	0x00085a55
   84834:	00085a79 	.word	0x00085a79
   84838:	00085ab1 	.word	0x00085ab1
   8483c:	00085ad1 	.word	0x00085ad1

00084840 <__sfp_lock_acquire>:
   84840:	4770      	bx	lr
   84842:	bf00      	nop

00084844 <__sfp_lock_release>:
   84844:	4770      	bx	lr
   84846:	bf00      	nop

00084848 <__libc_fini_array>:
   84848:	b538      	push	{r3, r4, r5, lr}
   8484a:	4d09      	ldr	r5, [pc, #36]	; (84870 <__libc_fini_array+0x28>)
   8484c:	4c09      	ldr	r4, [pc, #36]	; (84874 <__libc_fini_array+0x2c>)
   8484e:	1b64      	subs	r4, r4, r5
   84850:	10a4      	asrs	r4, r4, #2
   84852:	bf18      	it	ne
   84854:	eb05 0584 	addne.w	r5, r5, r4, lsl #2
   84858:	d005      	beq.n	84866 <__libc_fini_array+0x1e>
   8485a:	3c01      	subs	r4, #1
   8485c:	f855 3d04 	ldr.w	r3, [r5, #-4]!
   84860:	4798      	blx	r3
   84862:	2c00      	cmp	r4, #0
   84864:	d1f9      	bne.n	8485a <__libc_fini_array+0x12>
   84866:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   8486a:	f001 be89 	b.w	86580 <_fini>
   8486e:	bf00      	nop
   84870:	0008658c 	.word	0x0008658c
   84874:	00086590 	.word	0x00086590

00084878 <_fputwc_r>:
   84878:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8487c:	8993      	ldrh	r3, [r2, #12]
   8487e:	460f      	mov	r7, r1
   84880:	0499      	lsls	r1, r3, #18
   84882:	b082      	sub	sp, #8
   84884:	4614      	mov	r4, r2
   84886:	4680      	mov	r8, r0
   84888:	d406      	bmi.n	84898 <_fputwc_r+0x20>
   8488a:	6e52      	ldr	r2, [r2, #100]	; 0x64
   8488c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   84890:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   84894:	81a3      	strh	r3, [r4, #12]
   84896:	6662      	str	r2, [r4, #100]	; 0x64
   84898:	f000 fb1c 	bl	84ed4 <__locale_mb_cur_max>
   8489c:	2801      	cmp	r0, #1
   8489e:	d03e      	beq.n	8491e <_fputwc_r+0xa6>
   848a0:	463a      	mov	r2, r7
   848a2:	4640      	mov	r0, r8
   848a4:	a901      	add	r1, sp, #4
   848a6:	f104 035c 	add.w	r3, r4, #92	; 0x5c
   848aa:	f001 f969 	bl	85b80 <_wcrtomb_r>
   848ae:	1c42      	adds	r2, r0, #1
   848b0:	4606      	mov	r6, r0
   848b2:	d02d      	beq.n	84910 <_fputwc_r+0x98>
   848b4:	2800      	cmp	r0, #0
   848b6:	d03a      	beq.n	8492e <_fputwc_r+0xb6>
   848b8:	f89d 1004 	ldrb.w	r1, [sp, #4]
   848bc:	2500      	movs	r5, #0
   848be:	e009      	b.n	848d4 <_fputwc_r+0x5c>
   848c0:	6823      	ldr	r3, [r4, #0]
   848c2:	7019      	strb	r1, [r3, #0]
   848c4:	6823      	ldr	r3, [r4, #0]
   848c6:	3301      	adds	r3, #1
   848c8:	6023      	str	r3, [r4, #0]
   848ca:	3501      	adds	r5, #1
   848cc:	42b5      	cmp	r5, r6
   848ce:	d22e      	bcs.n	8492e <_fputwc_r+0xb6>
   848d0:	ab01      	add	r3, sp, #4
   848d2:	5ce9      	ldrb	r1, [r5, r3]
   848d4:	68a3      	ldr	r3, [r4, #8]
   848d6:	3b01      	subs	r3, #1
   848d8:	2b00      	cmp	r3, #0
   848da:	60a3      	str	r3, [r4, #8]
   848dc:	daf0      	bge.n	848c0 <_fputwc_r+0x48>
   848de:	69a2      	ldr	r2, [r4, #24]
   848e0:	4293      	cmp	r3, r2
   848e2:	db06      	blt.n	848f2 <_fputwc_r+0x7a>
   848e4:	6823      	ldr	r3, [r4, #0]
   848e6:	7019      	strb	r1, [r3, #0]
   848e8:	6823      	ldr	r3, [r4, #0]
   848ea:	7819      	ldrb	r1, [r3, #0]
   848ec:	3301      	adds	r3, #1
   848ee:	290a      	cmp	r1, #10
   848f0:	d1ea      	bne.n	848c8 <_fputwc_r+0x50>
   848f2:	4640      	mov	r0, r8
   848f4:	4622      	mov	r2, r4
   848f6:	f001 f8ef 	bl	85ad8 <__swbuf_r>
   848fa:	f1b0 33ff 	subs.w	r3, r0, #4294967295
   848fe:	4258      	negs	r0, r3
   84900:	4158      	adcs	r0, r3
   84902:	2800      	cmp	r0, #0
   84904:	d0e1      	beq.n	848ca <_fputwc_r+0x52>
   84906:	f04f 30ff 	mov.w	r0, #4294967295
   8490a:	b002      	add	sp, #8
   8490c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   84910:	89a3      	ldrh	r3, [r4, #12]
   84912:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   84916:	81a3      	strh	r3, [r4, #12]
   84918:	b002      	add	sp, #8
   8491a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8491e:	1e7b      	subs	r3, r7, #1
   84920:	2bfe      	cmp	r3, #254	; 0xfe
   84922:	d8bd      	bhi.n	848a0 <_fputwc_r+0x28>
   84924:	b2f9      	uxtb	r1, r7
   84926:	4606      	mov	r6, r0
   84928:	f88d 1004 	strb.w	r1, [sp, #4]
   8492c:	e7c6      	b.n	848bc <_fputwc_r+0x44>
   8492e:	4638      	mov	r0, r7
   84930:	b002      	add	sp, #8
   84932:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   84936:	bf00      	nop

00084938 <_malloc_trim_r>:
   84938:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8493a:	4d23      	ldr	r5, [pc, #140]	; (849c8 <_malloc_trim_r+0x90>)
   8493c:	460f      	mov	r7, r1
   8493e:	4604      	mov	r4, r0
   84940:	f000 fe92 	bl	85668 <__malloc_lock>
   84944:	68ab      	ldr	r3, [r5, #8]
   84946:	685e      	ldr	r6, [r3, #4]
   84948:	f026 0603 	bic.w	r6, r6, #3
   8494c:	1bf1      	subs	r1, r6, r7
   8494e:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
   84952:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
   84956:	f021 010f 	bic.w	r1, r1, #15
   8495a:	f5a1 5780 	sub.w	r7, r1, #4096	; 0x1000
   8495e:	f5b7 5f80 	cmp.w	r7, #4096	; 0x1000
   84962:	db07      	blt.n	84974 <_malloc_trim_r+0x3c>
   84964:	4620      	mov	r0, r4
   84966:	2100      	movs	r1, #0
   84968:	f001 f862 	bl	85a30 <_sbrk_r>
   8496c:	68ab      	ldr	r3, [r5, #8]
   8496e:	4433      	add	r3, r6
   84970:	4298      	cmp	r0, r3
   84972:	d004      	beq.n	8497e <_malloc_trim_r+0x46>
   84974:	4620      	mov	r0, r4
   84976:	f000 fe79 	bl	8566c <__malloc_unlock>
   8497a:	2000      	movs	r0, #0
   8497c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8497e:	4620      	mov	r0, r4
   84980:	4279      	negs	r1, r7
   84982:	f001 f855 	bl	85a30 <_sbrk_r>
   84986:	3001      	adds	r0, #1
   84988:	d00d      	beq.n	849a6 <_malloc_trim_r+0x6e>
   8498a:	4b10      	ldr	r3, [pc, #64]	; (849cc <_malloc_trim_r+0x94>)
   8498c:	68aa      	ldr	r2, [r5, #8]
   8498e:	6819      	ldr	r1, [r3, #0]
   84990:	1bf6      	subs	r6, r6, r7
   84992:	f046 0601 	orr.w	r6, r6, #1
   84996:	4620      	mov	r0, r4
   84998:	1bc9      	subs	r1, r1, r7
   8499a:	6056      	str	r6, [r2, #4]
   8499c:	6019      	str	r1, [r3, #0]
   8499e:	f000 fe65 	bl	8566c <__malloc_unlock>
   849a2:	2001      	movs	r0, #1
   849a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   849a6:	4620      	mov	r0, r4
   849a8:	2100      	movs	r1, #0
   849aa:	f001 f841 	bl	85a30 <_sbrk_r>
   849ae:	68ab      	ldr	r3, [r5, #8]
   849b0:	1ac2      	subs	r2, r0, r3
   849b2:	2a0f      	cmp	r2, #15
   849b4:	ddde      	ble.n	84974 <_malloc_trim_r+0x3c>
   849b6:	4d06      	ldr	r5, [pc, #24]	; (849d0 <_malloc_trim_r+0x98>)
   849b8:	4904      	ldr	r1, [pc, #16]	; (849cc <_malloc_trim_r+0x94>)
   849ba:	682d      	ldr	r5, [r5, #0]
   849bc:	f042 0201 	orr.w	r2, r2, #1
   849c0:	1b40      	subs	r0, r0, r5
   849c2:	605a      	str	r2, [r3, #4]
   849c4:	6008      	str	r0, [r1, #0]
   849c6:	e7d5      	b.n	84974 <_malloc_trim_r+0x3c>
   849c8:	20070590 	.word	0x20070590
   849cc:	20078c28 	.word	0x20078c28
   849d0:	2007099c 	.word	0x2007099c

000849d4 <_free_r>:
   849d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   849d8:	460d      	mov	r5, r1
   849da:	4606      	mov	r6, r0
   849dc:	2900      	cmp	r1, #0
   849de:	d055      	beq.n	84a8c <_free_r+0xb8>
   849e0:	f000 fe42 	bl	85668 <__malloc_lock>
   849e4:	f855 1c04 	ldr.w	r1, [r5, #-4]
   849e8:	f8df c170 	ldr.w	ip, [pc, #368]	; 84b5c <_free_r+0x188>
   849ec:	f1a5 0408 	sub.w	r4, r5, #8
   849f0:	f021 0301 	bic.w	r3, r1, #1
   849f4:	18e2      	adds	r2, r4, r3
   849f6:	f8dc 0008 	ldr.w	r0, [ip, #8]
   849fa:	6857      	ldr	r7, [r2, #4]
   849fc:	4290      	cmp	r0, r2
   849fe:	f027 0703 	bic.w	r7, r7, #3
   84a02:	d068      	beq.n	84ad6 <_free_r+0x102>
   84a04:	f011 0101 	ands.w	r1, r1, #1
   84a08:	6057      	str	r7, [r2, #4]
   84a0a:	d032      	beq.n	84a72 <_free_r+0x9e>
   84a0c:	2100      	movs	r1, #0
   84a0e:	19d0      	adds	r0, r2, r7
   84a10:	6840      	ldr	r0, [r0, #4]
   84a12:	07c0      	lsls	r0, r0, #31
   84a14:	d406      	bmi.n	84a24 <_free_r+0x50>
   84a16:	443b      	add	r3, r7
   84a18:	6890      	ldr	r0, [r2, #8]
   84a1a:	2900      	cmp	r1, #0
   84a1c:	d04d      	beq.n	84aba <_free_r+0xe6>
   84a1e:	68d2      	ldr	r2, [r2, #12]
   84a20:	60c2      	str	r2, [r0, #12]
   84a22:	6090      	str	r0, [r2, #8]
   84a24:	f043 0201 	orr.w	r2, r3, #1
   84a28:	6062      	str	r2, [r4, #4]
   84a2a:	50e3      	str	r3, [r4, r3]
   84a2c:	b9e1      	cbnz	r1, 84a68 <_free_r+0x94>
   84a2e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   84a32:	d32d      	bcc.n	84a90 <_free_r+0xbc>
   84a34:	0a5a      	lsrs	r2, r3, #9
   84a36:	2a04      	cmp	r2, #4
   84a38:	d869      	bhi.n	84b0e <_free_r+0x13a>
   84a3a:	0998      	lsrs	r0, r3, #6
   84a3c:	3038      	adds	r0, #56	; 0x38
   84a3e:	0041      	lsls	r1, r0, #1
   84a40:	eb0c 0c81 	add.w	ip, ip, r1, lsl #2
   84a44:	f8dc 2008 	ldr.w	r2, [ip, #8]
   84a48:	4944      	ldr	r1, [pc, #272]	; (84b5c <_free_r+0x188>)
   84a4a:	4562      	cmp	r2, ip
   84a4c:	d065      	beq.n	84b1a <_free_r+0x146>
   84a4e:	6851      	ldr	r1, [r2, #4]
   84a50:	f021 0103 	bic.w	r1, r1, #3
   84a54:	428b      	cmp	r3, r1
   84a56:	d202      	bcs.n	84a5e <_free_r+0x8a>
   84a58:	6892      	ldr	r2, [r2, #8]
   84a5a:	4594      	cmp	ip, r2
   84a5c:	d1f7      	bne.n	84a4e <_free_r+0x7a>
   84a5e:	68d3      	ldr	r3, [r2, #12]
   84a60:	60e3      	str	r3, [r4, #12]
   84a62:	60a2      	str	r2, [r4, #8]
   84a64:	609c      	str	r4, [r3, #8]
   84a66:	60d4      	str	r4, [r2, #12]
   84a68:	4630      	mov	r0, r6
   84a6a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   84a6e:	f000 bdfd 	b.w	8566c <__malloc_unlock>
   84a72:	f855 5c08 	ldr.w	r5, [r5, #-8]
   84a76:	f10c 0808 	add.w	r8, ip, #8
   84a7a:	1b64      	subs	r4, r4, r5
   84a7c:	68a0      	ldr	r0, [r4, #8]
   84a7e:	442b      	add	r3, r5
   84a80:	4540      	cmp	r0, r8
   84a82:	d042      	beq.n	84b0a <_free_r+0x136>
   84a84:	68e5      	ldr	r5, [r4, #12]
   84a86:	60c5      	str	r5, [r0, #12]
   84a88:	60a8      	str	r0, [r5, #8]
   84a8a:	e7c0      	b.n	84a0e <_free_r+0x3a>
   84a8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   84a90:	08db      	lsrs	r3, r3, #3
   84a92:	109a      	asrs	r2, r3, #2
   84a94:	2001      	movs	r0, #1
   84a96:	4090      	lsls	r0, r2
   84a98:	f8dc 1004 	ldr.w	r1, [ip, #4]
   84a9c:	eb0c 03c3 	add.w	r3, ip, r3, lsl #3
   84aa0:	689a      	ldr	r2, [r3, #8]
   84aa2:	4301      	orrs	r1, r0
   84aa4:	60a2      	str	r2, [r4, #8]
   84aa6:	60e3      	str	r3, [r4, #12]
   84aa8:	f8cc 1004 	str.w	r1, [ip, #4]
   84aac:	4630      	mov	r0, r6
   84aae:	609c      	str	r4, [r3, #8]
   84ab0:	60d4      	str	r4, [r2, #12]
   84ab2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   84ab6:	f000 bdd9 	b.w	8566c <__malloc_unlock>
   84aba:	4d29      	ldr	r5, [pc, #164]	; (84b60 <_free_r+0x18c>)
   84abc:	42a8      	cmp	r0, r5
   84abe:	d1ae      	bne.n	84a1e <_free_r+0x4a>
   84ac0:	f043 0201 	orr.w	r2, r3, #1
   84ac4:	f8cc 4014 	str.w	r4, [ip, #20]
   84ac8:	f8cc 4010 	str.w	r4, [ip, #16]
   84acc:	60e0      	str	r0, [r4, #12]
   84ace:	60a0      	str	r0, [r4, #8]
   84ad0:	6062      	str	r2, [r4, #4]
   84ad2:	50e3      	str	r3, [r4, r3]
   84ad4:	e7c8      	b.n	84a68 <_free_r+0x94>
   84ad6:	441f      	add	r7, r3
   84ad8:	07cb      	lsls	r3, r1, #31
   84ada:	d407      	bmi.n	84aec <_free_r+0x118>
   84adc:	f855 1c08 	ldr.w	r1, [r5, #-8]
   84ae0:	1a64      	subs	r4, r4, r1
   84ae2:	68e3      	ldr	r3, [r4, #12]
   84ae4:	68a2      	ldr	r2, [r4, #8]
   84ae6:	440f      	add	r7, r1
   84ae8:	60d3      	str	r3, [r2, #12]
   84aea:	609a      	str	r2, [r3, #8]
   84aec:	4b1d      	ldr	r3, [pc, #116]	; (84b64 <_free_r+0x190>)
   84aee:	f047 0201 	orr.w	r2, r7, #1
   84af2:	681b      	ldr	r3, [r3, #0]
   84af4:	6062      	str	r2, [r4, #4]
   84af6:	429f      	cmp	r7, r3
   84af8:	f8cc 4008 	str.w	r4, [ip, #8]
   84afc:	d3b4      	bcc.n	84a68 <_free_r+0x94>
   84afe:	4b1a      	ldr	r3, [pc, #104]	; (84b68 <_free_r+0x194>)
   84b00:	4630      	mov	r0, r6
   84b02:	6819      	ldr	r1, [r3, #0]
   84b04:	f7ff ff18 	bl	84938 <_malloc_trim_r>
   84b08:	e7ae      	b.n	84a68 <_free_r+0x94>
   84b0a:	2101      	movs	r1, #1
   84b0c:	e77f      	b.n	84a0e <_free_r+0x3a>
   84b0e:	2a14      	cmp	r2, #20
   84b10:	d80b      	bhi.n	84b2a <_free_r+0x156>
   84b12:	f102 005b 	add.w	r0, r2, #91	; 0x5b
   84b16:	0041      	lsls	r1, r0, #1
   84b18:	e792      	b.n	84a40 <_free_r+0x6c>
   84b1a:	1080      	asrs	r0, r0, #2
   84b1c:	2501      	movs	r5, #1
   84b1e:	4085      	lsls	r5, r0
   84b20:	6848      	ldr	r0, [r1, #4]
   84b22:	4613      	mov	r3, r2
   84b24:	4328      	orrs	r0, r5
   84b26:	6048      	str	r0, [r1, #4]
   84b28:	e79a      	b.n	84a60 <_free_r+0x8c>
   84b2a:	2a54      	cmp	r2, #84	; 0x54
   84b2c:	d803      	bhi.n	84b36 <_free_r+0x162>
   84b2e:	0b18      	lsrs	r0, r3, #12
   84b30:	306e      	adds	r0, #110	; 0x6e
   84b32:	0041      	lsls	r1, r0, #1
   84b34:	e784      	b.n	84a40 <_free_r+0x6c>
   84b36:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   84b3a:	d803      	bhi.n	84b44 <_free_r+0x170>
   84b3c:	0bd8      	lsrs	r0, r3, #15
   84b3e:	3077      	adds	r0, #119	; 0x77
   84b40:	0041      	lsls	r1, r0, #1
   84b42:	e77d      	b.n	84a40 <_free_r+0x6c>
   84b44:	f240 5154 	movw	r1, #1364	; 0x554
   84b48:	428a      	cmp	r2, r1
   84b4a:	d803      	bhi.n	84b54 <_free_r+0x180>
   84b4c:	0c98      	lsrs	r0, r3, #18
   84b4e:	307c      	adds	r0, #124	; 0x7c
   84b50:	0041      	lsls	r1, r0, #1
   84b52:	e775      	b.n	84a40 <_free_r+0x6c>
   84b54:	21fc      	movs	r1, #252	; 0xfc
   84b56:	207e      	movs	r0, #126	; 0x7e
   84b58:	e772      	b.n	84a40 <_free_r+0x6c>
   84b5a:	bf00      	nop
   84b5c:	20070590 	.word	0x20070590
   84b60:	20070598 	.word	0x20070598
   84b64:	20070998 	.word	0x20070998
   84b68:	20078c24 	.word	0x20078c24

00084b6c <__sfvwrite_r>:
   84b6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   84b70:	6893      	ldr	r3, [r2, #8]
   84b72:	b083      	sub	sp, #12
   84b74:	4616      	mov	r6, r2
   84b76:	4681      	mov	r9, r0
   84b78:	460c      	mov	r4, r1
   84b7a:	b32b      	cbz	r3, 84bc8 <__sfvwrite_r+0x5c>
   84b7c:	898b      	ldrh	r3, [r1, #12]
   84b7e:	0719      	lsls	r1, r3, #28
   84b80:	d526      	bpl.n	84bd0 <__sfvwrite_r+0x64>
   84b82:	6922      	ldr	r2, [r4, #16]
   84b84:	b322      	cbz	r2, 84bd0 <__sfvwrite_r+0x64>
   84b86:	f003 0202 	and.w	r2, r3, #2
   84b8a:	b292      	uxth	r2, r2
   84b8c:	6835      	ldr	r5, [r6, #0]
   84b8e:	2a00      	cmp	r2, #0
   84b90:	d02c      	beq.n	84bec <__sfvwrite_r+0x80>
   84b92:	f04f 0a00 	mov.w	sl, #0
   84b96:	f8df b2e8 	ldr.w	fp, [pc, #744]	; 84e80 <__sfvwrite_r+0x314>
   84b9a:	46d0      	mov	r8, sl
   84b9c:	45d8      	cmp	r8, fp
   84b9e:	bf34      	ite	cc
   84ba0:	4643      	movcc	r3, r8
   84ba2:	465b      	movcs	r3, fp
   84ba4:	4652      	mov	r2, sl
   84ba6:	4648      	mov	r0, r9
   84ba8:	f1b8 0f00 	cmp.w	r8, #0
   84bac:	d04f      	beq.n	84c4e <__sfvwrite_r+0xe2>
   84bae:	69e1      	ldr	r1, [r4, #28]
   84bb0:	6a67      	ldr	r7, [r4, #36]	; 0x24
   84bb2:	47b8      	blx	r7
   84bb4:	2800      	cmp	r0, #0
   84bb6:	dd56      	ble.n	84c66 <__sfvwrite_r+0xfa>
   84bb8:	68b3      	ldr	r3, [r6, #8]
   84bba:	4482      	add	sl, r0
   84bbc:	1a1b      	subs	r3, r3, r0
   84bbe:	ebc0 0808 	rsb	r8, r0, r8
   84bc2:	60b3      	str	r3, [r6, #8]
   84bc4:	2b00      	cmp	r3, #0
   84bc6:	d1e9      	bne.n	84b9c <__sfvwrite_r+0x30>
   84bc8:	2000      	movs	r0, #0
   84bca:	b003      	add	sp, #12
   84bcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   84bd0:	4648      	mov	r0, r9
   84bd2:	4621      	mov	r1, r4
   84bd4:	f7ff fc88 	bl	844e8 <__swsetup_r>
   84bd8:	2800      	cmp	r0, #0
   84bda:	f040 8148 	bne.w	84e6e <__sfvwrite_r+0x302>
   84bde:	89a3      	ldrh	r3, [r4, #12]
   84be0:	6835      	ldr	r5, [r6, #0]
   84be2:	f003 0202 	and.w	r2, r3, #2
   84be6:	b292      	uxth	r2, r2
   84be8:	2a00      	cmp	r2, #0
   84bea:	d1d2      	bne.n	84b92 <__sfvwrite_r+0x26>
   84bec:	f013 0a01 	ands.w	sl, r3, #1
   84bf0:	d142      	bne.n	84c78 <__sfvwrite_r+0x10c>
   84bf2:	46d0      	mov	r8, sl
   84bf4:	f1b8 0f00 	cmp.w	r8, #0
   84bf8:	d023      	beq.n	84c42 <__sfvwrite_r+0xd6>
   84bfa:	059a      	lsls	r2, r3, #22
   84bfc:	68a7      	ldr	r7, [r4, #8]
   84bfe:	d576      	bpl.n	84cee <__sfvwrite_r+0x182>
   84c00:	45b8      	cmp	r8, r7
   84c02:	f0c0 80a4 	bcc.w	84d4e <__sfvwrite_r+0x1e2>
   84c06:	f413 6f90 	tst.w	r3, #1152	; 0x480
   84c0a:	f040 80b2 	bne.w	84d72 <__sfvwrite_r+0x206>
   84c0e:	6820      	ldr	r0, [r4, #0]
   84c10:	46bb      	mov	fp, r7
   84c12:	4651      	mov	r1, sl
   84c14:	465a      	mov	r2, fp
   84c16:	f000 fcc1 	bl	8559c <memmove>
   84c1a:	68a2      	ldr	r2, [r4, #8]
   84c1c:	6821      	ldr	r1, [r4, #0]
   84c1e:	1bd2      	subs	r2, r2, r7
   84c20:	eb01 030b 	add.w	r3, r1, fp
   84c24:	60a2      	str	r2, [r4, #8]
   84c26:	6023      	str	r3, [r4, #0]
   84c28:	4642      	mov	r2, r8
   84c2a:	68b3      	ldr	r3, [r6, #8]
   84c2c:	4492      	add	sl, r2
   84c2e:	1a9b      	subs	r3, r3, r2
   84c30:	ebc2 0808 	rsb	r8, r2, r8
   84c34:	60b3      	str	r3, [r6, #8]
   84c36:	2b00      	cmp	r3, #0
   84c38:	d0c6      	beq.n	84bc8 <__sfvwrite_r+0x5c>
   84c3a:	89a3      	ldrh	r3, [r4, #12]
   84c3c:	f1b8 0f00 	cmp.w	r8, #0
   84c40:	d1db      	bne.n	84bfa <__sfvwrite_r+0x8e>
   84c42:	f8d5 a000 	ldr.w	sl, [r5]
   84c46:	f8d5 8004 	ldr.w	r8, [r5, #4]
   84c4a:	3508      	adds	r5, #8
   84c4c:	e7d2      	b.n	84bf4 <__sfvwrite_r+0x88>
   84c4e:	f8d5 a000 	ldr.w	sl, [r5]
   84c52:	f8d5 8004 	ldr.w	r8, [r5, #4]
   84c56:	3508      	adds	r5, #8
   84c58:	e7a0      	b.n	84b9c <__sfvwrite_r+0x30>
   84c5a:	4648      	mov	r0, r9
   84c5c:	4621      	mov	r1, r4
   84c5e:	f7ff fd59 	bl	84714 <_fflush_r>
   84c62:	2800      	cmp	r0, #0
   84c64:	d059      	beq.n	84d1a <__sfvwrite_r+0x1ae>
   84c66:	89a3      	ldrh	r3, [r4, #12]
   84c68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   84c6c:	f04f 30ff 	mov.w	r0, #4294967295
   84c70:	81a3      	strh	r3, [r4, #12]
   84c72:	b003      	add	sp, #12
   84c74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   84c78:	4692      	mov	sl, r2
   84c7a:	9201      	str	r2, [sp, #4]
   84c7c:	4693      	mov	fp, r2
   84c7e:	4690      	mov	r8, r2
   84c80:	f1b8 0f00 	cmp.w	r8, #0
   84c84:	d02b      	beq.n	84cde <__sfvwrite_r+0x172>
   84c86:	9f01      	ldr	r7, [sp, #4]
   84c88:	2f00      	cmp	r7, #0
   84c8a:	d064      	beq.n	84d56 <__sfvwrite_r+0x1ea>
   84c8c:	6820      	ldr	r0, [r4, #0]
   84c8e:	6921      	ldr	r1, [r4, #16]
   84c90:	45c2      	cmp	sl, r8
   84c92:	bf34      	ite	cc
   84c94:	4653      	movcc	r3, sl
   84c96:	4643      	movcs	r3, r8
   84c98:	4288      	cmp	r0, r1
   84c9a:	461f      	mov	r7, r3
   84c9c:	f8d4 c008 	ldr.w	ip, [r4, #8]
   84ca0:	6962      	ldr	r2, [r4, #20]
   84ca2:	d903      	bls.n	84cac <__sfvwrite_r+0x140>
   84ca4:	4494      	add	ip, r2
   84ca6:	4563      	cmp	r3, ip
   84ca8:	f300 80ae 	bgt.w	84e08 <__sfvwrite_r+0x29c>
   84cac:	4293      	cmp	r3, r2
   84cae:	db36      	blt.n	84d1e <__sfvwrite_r+0x1b2>
   84cb0:	4613      	mov	r3, r2
   84cb2:	6a67      	ldr	r7, [r4, #36]	; 0x24
   84cb4:	4648      	mov	r0, r9
   84cb6:	69e1      	ldr	r1, [r4, #28]
   84cb8:	465a      	mov	r2, fp
   84cba:	47b8      	blx	r7
   84cbc:	1e07      	subs	r7, r0, #0
   84cbe:	ddd2      	ble.n	84c66 <__sfvwrite_r+0xfa>
   84cc0:	ebba 0a07 	subs.w	sl, sl, r7
   84cc4:	d03a      	beq.n	84d3c <__sfvwrite_r+0x1d0>
   84cc6:	68b3      	ldr	r3, [r6, #8]
   84cc8:	44bb      	add	fp, r7
   84cca:	1bdb      	subs	r3, r3, r7
   84ccc:	ebc7 0808 	rsb	r8, r7, r8
   84cd0:	60b3      	str	r3, [r6, #8]
   84cd2:	2b00      	cmp	r3, #0
   84cd4:	f43f af78 	beq.w	84bc8 <__sfvwrite_r+0x5c>
   84cd8:	f1b8 0f00 	cmp.w	r8, #0
   84cdc:	d1d3      	bne.n	84c86 <__sfvwrite_r+0x11a>
   84cde:	2700      	movs	r7, #0
   84ce0:	f8d5 b000 	ldr.w	fp, [r5]
   84ce4:	f8d5 8004 	ldr.w	r8, [r5, #4]
   84ce8:	9701      	str	r7, [sp, #4]
   84cea:	3508      	adds	r5, #8
   84cec:	e7c8      	b.n	84c80 <__sfvwrite_r+0x114>
   84cee:	6820      	ldr	r0, [r4, #0]
   84cf0:	6923      	ldr	r3, [r4, #16]
   84cf2:	4298      	cmp	r0, r3
   84cf4:	d802      	bhi.n	84cfc <__sfvwrite_r+0x190>
   84cf6:	6963      	ldr	r3, [r4, #20]
   84cf8:	4598      	cmp	r8, r3
   84cfa:	d272      	bcs.n	84de2 <__sfvwrite_r+0x276>
   84cfc:	45b8      	cmp	r8, r7
   84cfe:	bf38      	it	cc
   84d00:	4647      	movcc	r7, r8
   84d02:	463a      	mov	r2, r7
   84d04:	4651      	mov	r1, sl
   84d06:	f000 fc49 	bl	8559c <memmove>
   84d0a:	68a3      	ldr	r3, [r4, #8]
   84d0c:	6822      	ldr	r2, [r4, #0]
   84d0e:	1bdb      	subs	r3, r3, r7
   84d10:	443a      	add	r2, r7
   84d12:	60a3      	str	r3, [r4, #8]
   84d14:	6022      	str	r2, [r4, #0]
   84d16:	2b00      	cmp	r3, #0
   84d18:	d09f      	beq.n	84c5a <__sfvwrite_r+0xee>
   84d1a:	463a      	mov	r2, r7
   84d1c:	e785      	b.n	84c2a <__sfvwrite_r+0xbe>
   84d1e:	461a      	mov	r2, r3
   84d20:	4659      	mov	r1, fp
   84d22:	9300      	str	r3, [sp, #0]
   84d24:	f000 fc3a 	bl	8559c <memmove>
   84d28:	9b00      	ldr	r3, [sp, #0]
   84d2a:	68a1      	ldr	r1, [r4, #8]
   84d2c:	6822      	ldr	r2, [r4, #0]
   84d2e:	1ac9      	subs	r1, r1, r3
   84d30:	ebba 0a07 	subs.w	sl, sl, r7
   84d34:	4413      	add	r3, r2
   84d36:	60a1      	str	r1, [r4, #8]
   84d38:	6023      	str	r3, [r4, #0]
   84d3a:	d1c4      	bne.n	84cc6 <__sfvwrite_r+0x15a>
   84d3c:	4648      	mov	r0, r9
   84d3e:	4621      	mov	r1, r4
   84d40:	f7ff fce8 	bl	84714 <_fflush_r>
   84d44:	2800      	cmp	r0, #0
   84d46:	d18e      	bne.n	84c66 <__sfvwrite_r+0xfa>
   84d48:	f8cd a004 	str.w	sl, [sp, #4]
   84d4c:	e7bb      	b.n	84cc6 <__sfvwrite_r+0x15a>
   84d4e:	6820      	ldr	r0, [r4, #0]
   84d50:	4647      	mov	r7, r8
   84d52:	46c3      	mov	fp, r8
   84d54:	e75d      	b.n	84c12 <__sfvwrite_r+0xa6>
   84d56:	4658      	mov	r0, fp
   84d58:	210a      	movs	r1, #10
   84d5a:	4642      	mov	r2, r8
   84d5c:	f000 fbd4 	bl	85508 <memchr>
   84d60:	2800      	cmp	r0, #0
   84d62:	d07f      	beq.n	84e64 <__sfvwrite_r+0x2f8>
   84d64:	f100 0a01 	add.w	sl, r0, #1
   84d68:	2701      	movs	r7, #1
   84d6a:	ebcb 0a0a 	rsb	sl, fp, sl
   84d6e:	9701      	str	r7, [sp, #4]
   84d70:	e78c      	b.n	84c8c <__sfvwrite_r+0x120>
   84d72:	6822      	ldr	r2, [r4, #0]
   84d74:	6921      	ldr	r1, [r4, #16]
   84d76:	6967      	ldr	r7, [r4, #20]
   84d78:	ebc1 0c02 	rsb	ip, r1, r2
   84d7c:	eb07 0747 	add.w	r7, r7, r7, lsl #1
   84d80:	f10c 0201 	add.w	r2, ip, #1
   84d84:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
   84d88:	4442      	add	r2, r8
   84d8a:	107f      	asrs	r7, r7, #1
   84d8c:	4297      	cmp	r7, r2
   84d8e:	bf34      	ite	cc
   84d90:	4617      	movcc	r7, r2
   84d92:	463a      	movcs	r2, r7
   84d94:	055b      	lsls	r3, r3, #21
   84d96:	d54f      	bpl.n	84e38 <__sfvwrite_r+0x2cc>
   84d98:	4611      	mov	r1, r2
   84d9a:	4648      	mov	r0, r9
   84d9c:	f8cd c000 	str.w	ip, [sp]
   84da0:	f000 f916 	bl	84fd0 <_malloc_r>
   84da4:	f8dd c000 	ldr.w	ip, [sp]
   84da8:	4683      	mov	fp, r0
   84daa:	2800      	cmp	r0, #0
   84dac:	d062      	beq.n	84e74 <__sfvwrite_r+0x308>
   84dae:	4662      	mov	r2, ip
   84db0:	6921      	ldr	r1, [r4, #16]
   84db2:	f8cd c000 	str.w	ip, [sp]
   84db6:	f7fe fb49 	bl	8344c <memcpy>
   84dba:	89a2      	ldrh	r2, [r4, #12]
   84dbc:	f8dd c000 	ldr.w	ip, [sp]
   84dc0:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   84dc4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   84dc8:	81a2      	strh	r2, [r4, #12]
   84dca:	eb0b 000c 	add.w	r0, fp, ip
   84dce:	ebcc 0207 	rsb	r2, ip, r7
   84dd2:	f8c4 b010 	str.w	fp, [r4, #16]
   84dd6:	6167      	str	r7, [r4, #20]
   84dd8:	6020      	str	r0, [r4, #0]
   84dda:	60a2      	str	r2, [r4, #8]
   84ddc:	4647      	mov	r7, r8
   84dde:	46c3      	mov	fp, r8
   84de0:	e717      	b.n	84c12 <__sfvwrite_r+0xa6>
   84de2:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   84de6:	4590      	cmp	r8, r2
   84de8:	bf38      	it	cc
   84dea:	4642      	movcc	r2, r8
   84dec:	fb92 f2f3 	sdiv	r2, r2, r3
   84df0:	fb02 f303 	mul.w	r3, r2, r3
   84df4:	6a67      	ldr	r7, [r4, #36]	; 0x24
   84df6:	4648      	mov	r0, r9
   84df8:	69e1      	ldr	r1, [r4, #28]
   84dfa:	4652      	mov	r2, sl
   84dfc:	47b8      	blx	r7
   84dfe:	2800      	cmp	r0, #0
   84e00:	f77f af31 	ble.w	84c66 <__sfvwrite_r+0xfa>
   84e04:	4602      	mov	r2, r0
   84e06:	e710      	b.n	84c2a <__sfvwrite_r+0xbe>
   84e08:	4662      	mov	r2, ip
   84e0a:	4659      	mov	r1, fp
   84e0c:	f8cd c000 	str.w	ip, [sp]
   84e10:	f000 fbc4 	bl	8559c <memmove>
   84e14:	f8dd c000 	ldr.w	ip, [sp]
   84e18:	6823      	ldr	r3, [r4, #0]
   84e1a:	4648      	mov	r0, r9
   84e1c:	4463      	add	r3, ip
   84e1e:	6023      	str	r3, [r4, #0]
   84e20:	4621      	mov	r1, r4
   84e22:	f8cd c000 	str.w	ip, [sp]
   84e26:	f7ff fc75 	bl	84714 <_fflush_r>
   84e2a:	f8dd c000 	ldr.w	ip, [sp]
   84e2e:	2800      	cmp	r0, #0
   84e30:	f47f af19 	bne.w	84c66 <__sfvwrite_r+0xfa>
   84e34:	4667      	mov	r7, ip
   84e36:	e743      	b.n	84cc0 <__sfvwrite_r+0x154>
   84e38:	4648      	mov	r0, r9
   84e3a:	f8cd c000 	str.w	ip, [sp]
   84e3e:	f000 fc17 	bl	85670 <_realloc_r>
   84e42:	f8dd c000 	ldr.w	ip, [sp]
   84e46:	4683      	mov	fp, r0
   84e48:	2800      	cmp	r0, #0
   84e4a:	d1be      	bne.n	84dca <__sfvwrite_r+0x25e>
   84e4c:	4648      	mov	r0, r9
   84e4e:	6921      	ldr	r1, [r4, #16]
   84e50:	f7ff fdc0 	bl	849d4 <_free_r>
   84e54:	89a3      	ldrh	r3, [r4, #12]
   84e56:	220c      	movs	r2, #12
   84e58:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   84e5c:	b29b      	uxth	r3, r3
   84e5e:	f8c9 2000 	str.w	r2, [r9]
   84e62:	e701      	b.n	84c68 <__sfvwrite_r+0xfc>
   84e64:	2701      	movs	r7, #1
   84e66:	f108 0a01 	add.w	sl, r8, #1
   84e6a:	9701      	str	r7, [sp, #4]
   84e6c:	e70e      	b.n	84c8c <__sfvwrite_r+0x120>
   84e6e:	f04f 30ff 	mov.w	r0, #4294967295
   84e72:	e6aa      	b.n	84bca <__sfvwrite_r+0x5e>
   84e74:	230c      	movs	r3, #12
   84e76:	f8c9 3000 	str.w	r3, [r9]
   84e7a:	89a3      	ldrh	r3, [r4, #12]
   84e7c:	e6f4      	b.n	84c68 <__sfvwrite_r+0xfc>
   84e7e:	bf00      	nop
   84e80:	7ffffc00 	.word	0x7ffffc00

00084e84 <_fwalk>:
   84e84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   84e88:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
   84e8c:	4688      	mov	r8, r1
   84e8e:	d019      	beq.n	84ec4 <_fwalk+0x40>
   84e90:	2600      	movs	r6, #0
   84e92:	687d      	ldr	r5, [r7, #4]
   84e94:	68bc      	ldr	r4, [r7, #8]
   84e96:	3d01      	subs	r5, #1
   84e98:	d40e      	bmi.n	84eb8 <_fwalk+0x34>
   84e9a:	89a3      	ldrh	r3, [r4, #12]
   84e9c:	3d01      	subs	r5, #1
   84e9e:	2b01      	cmp	r3, #1
   84ea0:	d906      	bls.n	84eb0 <_fwalk+0x2c>
   84ea2:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
   84ea6:	4620      	mov	r0, r4
   84ea8:	3301      	adds	r3, #1
   84eaa:	d001      	beq.n	84eb0 <_fwalk+0x2c>
   84eac:	47c0      	blx	r8
   84eae:	4306      	orrs	r6, r0
   84eb0:	1c6b      	adds	r3, r5, #1
   84eb2:	f104 0468 	add.w	r4, r4, #104	; 0x68
   84eb6:	d1f0      	bne.n	84e9a <_fwalk+0x16>
   84eb8:	683f      	ldr	r7, [r7, #0]
   84eba:	2f00      	cmp	r7, #0
   84ebc:	d1e9      	bne.n	84e92 <_fwalk+0xe>
   84ebe:	4630      	mov	r0, r6
   84ec0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   84ec4:	463e      	mov	r6, r7
   84ec6:	4630      	mov	r0, r6
   84ec8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00084ecc <__locale_charset>:
   84ecc:	4800      	ldr	r0, [pc, #0]	; (84ed0 <__locale_charset+0x4>)
   84ece:	4770      	bx	lr
   84ed0:	2007056c 	.word	0x2007056c

00084ed4 <__locale_mb_cur_max>:
   84ed4:	4b01      	ldr	r3, [pc, #4]	; (84edc <__locale_mb_cur_max+0x8>)
   84ed6:	6818      	ldr	r0, [r3, #0]
   84ed8:	4770      	bx	lr
   84eda:	bf00      	nop
   84edc:	2007058c 	.word	0x2007058c

00084ee0 <__smakebuf_r>:
   84ee0:	b5f0      	push	{r4, r5, r6, r7, lr}
   84ee2:	898b      	ldrh	r3, [r1, #12]
   84ee4:	b091      	sub	sp, #68	; 0x44
   84ee6:	b29a      	uxth	r2, r3
   84ee8:	0796      	lsls	r6, r2, #30
   84eea:	460c      	mov	r4, r1
   84eec:	4605      	mov	r5, r0
   84eee:	d437      	bmi.n	84f60 <__smakebuf_r+0x80>
   84ef0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   84ef4:	2900      	cmp	r1, #0
   84ef6:	db17      	blt.n	84f28 <__smakebuf_r+0x48>
   84ef8:	aa01      	add	r2, sp, #4
   84efa:	f000 ff39 	bl	85d70 <_fstat_r>
   84efe:	2800      	cmp	r0, #0
   84f00:	db10      	blt.n	84f24 <__smakebuf_r+0x44>
   84f02:	9b02      	ldr	r3, [sp, #8]
   84f04:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
   84f08:	f5b3 5100 	subs.w	r1, r3, #8192	; 0x2000
   84f0c:	424f      	negs	r7, r1
   84f0e:	414f      	adcs	r7, r1
   84f10:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   84f14:	d02c      	beq.n	84f70 <__smakebuf_r+0x90>
   84f16:	89a3      	ldrh	r3, [r4, #12]
   84f18:	f44f 6680 	mov.w	r6, #1024	; 0x400
   84f1c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   84f20:	81a3      	strh	r3, [r4, #12]
   84f22:	e00b      	b.n	84f3c <__smakebuf_r+0x5c>
   84f24:	89a3      	ldrh	r3, [r4, #12]
   84f26:	b29a      	uxth	r2, r3
   84f28:	f012 0f80 	tst.w	r2, #128	; 0x80
   84f2c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   84f30:	81a3      	strh	r3, [r4, #12]
   84f32:	bf14      	ite	ne
   84f34:	2640      	movne	r6, #64	; 0x40
   84f36:	f44f 6680 	moveq.w	r6, #1024	; 0x400
   84f3a:	2700      	movs	r7, #0
   84f3c:	4628      	mov	r0, r5
   84f3e:	4631      	mov	r1, r6
   84f40:	f000 f846 	bl	84fd0 <_malloc_r>
   84f44:	89a3      	ldrh	r3, [r4, #12]
   84f46:	2800      	cmp	r0, #0
   84f48:	d029      	beq.n	84f9e <__smakebuf_r+0xbe>
   84f4a:	4a1b      	ldr	r2, [pc, #108]	; (84fb8 <__smakebuf_r+0xd8>)
   84f4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   84f50:	63ea      	str	r2, [r5, #60]	; 0x3c
   84f52:	81a3      	strh	r3, [r4, #12]
   84f54:	6020      	str	r0, [r4, #0]
   84f56:	6120      	str	r0, [r4, #16]
   84f58:	6166      	str	r6, [r4, #20]
   84f5a:	b9a7      	cbnz	r7, 84f86 <__smakebuf_r+0xa6>
   84f5c:	b011      	add	sp, #68	; 0x44
   84f5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   84f60:	f101 0343 	add.w	r3, r1, #67	; 0x43
   84f64:	2201      	movs	r2, #1
   84f66:	600b      	str	r3, [r1, #0]
   84f68:	610b      	str	r3, [r1, #16]
   84f6a:	614a      	str	r2, [r1, #20]
   84f6c:	b011      	add	sp, #68	; 0x44
   84f6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   84f70:	4a12      	ldr	r2, [pc, #72]	; (84fbc <__smakebuf_r+0xdc>)
   84f72:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   84f74:	4293      	cmp	r3, r2
   84f76:	d1ce      	bne.n	84f16 <__smakebuf_r+0x36>
   84f78:	89a3      	ldrh	r3, [r4, #12]
   84f7a:	f44f 6680 	mov.w	r6, #1024	; 0x400
   84f7e:	4333      	orrs	r3, r6
   84f80:	81a3      	strh	r3, [r4, #12]
   84f82:	64e6      	str	r6, [r4, #76]	; 0x4c
   84f84:	e7da      	b.n	84f3c <__smakebuf_r+0x5c>
   84f86:	4628      	mov	r0, r5
   84f88:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   84f8c:	f000 ff04 	bl	85d98 <_isatty_r>
   84f90:	2800      	cmp	r0, #0
   84f92:	d0e3      	beq.n	84f5c <__smakebuf_r+0x7c>
   84f94:	89a3      	ldrh	r3, [r4, #12]
   84f96:	f043 0301 	orr.w	r3, r3, #1
   84f9a:	81a3      	strh	r3, [r4, #12]
   84f9c:	e7de      	b.n	84f5c <__smakebuf_r+0x7c>
   84f9e:	059a      	lsls	r2, r3, #22
   84fa0:	d4dc      	bmi.n	84f5c <__smakebuf_r+0x7c>
   84fa2:	f104 0243 	add.w	r2, r4, #67	; 0x43
   84fa6:	f043 0302 	orr.w	r3, r3, #2
   84faa:	2101      	movs	r1, #1
   84fac:	81a3      	strh	r3, [r4, #12]
   84fae:	6022      	str	r2, [r4, #0]
   84fb0:	6122      	str	r2, [r4, #16]
   84fb2:	6161      	str	r1, [r4, #20]
   84fb4:	e7d2      	b.n	84f5c <__smakebuf_r+0x7c>
   84fb6:	bf00      	nop
   84fb8:	00084741 	.word	0x00084741
   84fbc:	00085ab1 	.word	0x00085ab1

00084fc0 <malloc>:
   84fc0:	4b02      	ldr	r3, [pc, #8]	; (84fcc <malloc+0xc>)
   84fc2:	4601      	mov	r1, r0
   84fc4:	6818      	ldr	r0, [r3, #0]
   84fc6:	f000 b803 	b.w	84fd0 <_malloc_r>
   84fca:	bf00      	nop
   84fcc:	20070568 	.word	0x20070568

00084fd0 <_malloc_r>:
   84fd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   84fd4:	f101 050b 	add.w	r5, r1, #11
   84fd8:	2d16      	cmp	r5, #22
   84fda:	b083      	sub	sp, #12
   84fdc:	4606      	mov	r6, r0
   84fde:	d927      	bls.n	85030 <_malloc_r+0x60>
   84fe0:	f035 0507 	bics.w	r5, r5, #7
   84fe4:	d427      	bmi.n	85036 <_malloc_r+0x66>
   84fe6:	42a9      	cmp	r1, r5
   84fe8:	d825      	bhi.n	85036 <_malloc_r+0x66>
   84fea:	4630      	mov	r0, r6
   84fec:	f000 fb3c 	bl	85668 <__malloc_lock>
   84ff0:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
   84ff4:	d226      	bcs.n	85044 <_malloc_r+0x74>
   84ff6:	4fc1      	ldr	r7, [pc, #772]	; (852fc <_malloc_r+0x32c>)
   84ff8:	ea4f 0cd5 	mov.w	ip, r5, lsr #3
   84ffc:	eb07 03cc 	add.w	r3, r7, ip, lsl #3
   85000:	68dc      	ldr	r4, [r3, #12]
   85002:	429c      	cmp	r4, r3
   85004:	f000 81d2 	beq.w	853ac <_malloc_r+0x3dc>
   85008:	6863      	ldr	r3, [r4, #4]
   8500a:	68e2      	ldr	r2, [r4, #12]
   8500c:	f023 0303 	bic.w	r3, r3, #3
   85010:	4423      	add	r3, r4
   85012:	6858      	ldr	r0, [r3, #4]
   85014:	68a1      	ldr	r1, [r4, #8]
   85016:	f040 0501 	orr.w	r5, r0, #1
   8501a:	60ca      	str	r2, [r1, #12]
   8501c:	4630      	mov	r0, r6
   8501e:	6091      	str	r1, [r2, #8]
   85020:	605d      	str	r5, [r3, #4]
   85022:	f000 fb23 	bl	8566c <__malloc_unlock>
   85026:	3408      	adds	r4, #8
   85028:	4620      	mov	r0, r4
   8502a:	b003      	add	sp, #12
   8502c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   85030:	2510      	movs	r5, #16
   85032:	42a9      	cmp	r1, r5
   85034:	d9d9      	bls.n	84fea <_malloc_r+0x1a>
   85036:	2400      	movs	r4, #0
   85038:	230c      	movs	r3, #12
   8503a:	4620      	mov	r0, r4
   8503c:	6033      	str	r3, [r6, #0]
   8503e:	b003      	add	sp, #12
   85040:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   85044:	ea5f 2c55 	movs.w	ip, r5, lsr #9
   85048:	f000 8089 	beq.w	8515e <_malloc_r+0x18e>
   8504c:	f1bc 0f04 	cmp.w	ip, #4
   85050:	f200 8160 	bhi.w	85314 <_malloc_r+0x344>
   85054:	ea4f 1c95 	mov.w	ip, r5, lsr #6
   85058:	f10c 0c38 	add.w	ip, ip, #56	; 0x38
   8505c:	ea4f 014c 	mov.w	r1, ip, lsl #1
   85060:	4fa6      	ldr	r7, [pc, #664]	; (852fc <_malloc_r+0x32c>)
   85062:	eb07 0181 	add.w	r1, r7, r1, lsl #2
   85066:	68cc      	ldr	r4, [r1, #12]
   85068:	42a1      	cmp	r1, r4
   8506a:	d105      	bne.n	85078 <_malloc_r+0xa8>
   8506c:	e00c      	b.n	85088 <_malloc_r+0xb8>
   8506e:	2b00      	cmp	r3, #0
   85070:	da79      	bge.n	85166 <_malloc_r+0x196>
   85072:	68e4      	ldr	r4, [r4, #12]
   85074:	42a1      	cmp	r1, r4
   85076:	d007      	beq.n	85088 <_malloc_r+0xb8>
   85078:	6862      	ldr	r2, [r4, #4]
   8507a:	f022 0203 	bic.w	r2, r2, #3
   8507e:	1b53      	subs	r3, r2, r5
   85080:	2b0f      	cmp	r3, #15
   85082:	ddf4      	ble.n	8506e <_malloc_r+0x9e>
   85084:	f10c 3cff 	add.w	ip, ip, #4294967295
   85088:	f10c 0c01 	add.w	ip, ip, #1
   8508c:	4b9b      	ldr	r3, [pc, #620]	; (852fc <_malloc_r+0x32c>)
   8508e:	693c      	ldr	r4, [r7, #16]
   85090:	f103 0e08 	add.w	lr, r3, #8
   85094:	4574      	cmp	r4, lr
   85096:	f000 817e 	beq.w	85396 <_malloc_r+0x3c6>
   8509a:	6861      	ldr	r1, [r4, #4]
   8509c:	f021 0103 	bic.w	r1, r1, #3
   850a0:	1b4a      	subs	r2, r1, r5
   850a2:	2a0f      	cmp	r2, #15
   850a4:	f300 8164 	bgt.w	85370 <_malloc_r+0x3a0>
   850a8:	2a00      	cmp	r2, #0
   850aa:	f8c3 e014 	str.w	lr, [r3, #20]
   850ae:	f8c3 e010 	str.w	lr, [r3, #16]
   850b2:	da69      	bge.n	85188 <_malloc_r+0x1b8>
   850b4:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   850b8:	f080 813a 	bcs.w	85330 <_malloc_r+0x360>
   850bc:	08c9      	lsrs	r1, r1, #3
   850be:	108a      	asrs	r2, r1, #2
   850c0:	f04f 0801 	mov.w	r8, #1
   850c4:	fa08 f802 	lsl.w	r8, r8, r2
   850c8:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
   850cc:	685a      	ldr	r2, [r3, #4]
   850ce:	6888      	ldr	r0, [r1, #8]
   850d0:	ea48 0202 	orr.w	r2, r8, r2
   850d4:	60a0      	str	r0, [r4, #8]
   850d6:	60e1      	str	r1, [r4, #12]
   850d8:	605a      	str	r2, [r3, #4]
   850da:	608c      	str	r4, [r1, #8]
   850dc:	60c4      	str	r4, [r0, #12]
   850de:	ea4f 03ac 	mov.w	r3, ip, asr #2
   850e2:	2001      	movs	r0, #1
   850e4:	4098      	lsls	r0, r3
   850e6:	4290      	cmp	r0, r2
   850e8:	d85b      	bhi.n	851a2 <_malloc_r+0x1d2>
   850ea:	4202      	tst	r2, r0
   850ec:	d106      	bne.n	850fc <_malloc_r+0x12c>
   850ee:	f02c 0c03 	bic.w	ip, ip, #3
   850f2:	0040      	lsls	r0, r0, #1
   850f4:	4202      	tst	r2, r0
   850f6:	f10c 0c04 	add.w	ip, ip, #4
   850fa:	d0fa      	beq.n	850f2 <_malloc_r+0x122>
   850fc:	eb07 08cc 	add.w	r8, r7, ip, lsl #3
   85100:	4644      	mov	r4, r8
   85102:	46e1      	mov	r9, ip
   85104:	68e3      	ldr	r3, [r4, #12]
   85106:	429c      	cmp	r4, r3
   85108:	d107      	bne.n	8511a <_malloc_r+0x14a>
   8510a:	e146      	b.n	8539a <_malloc_r+0x3ca>
   8510c:	2a00      	cmp	r2, #0
   8510e:	f280 8157 	bge.w	853c0 <_malloc_r+0x3f0>
   85112:	68db      	ldr	r3, [r3, #12]
   85114:	429c      	cmp	r4, r3
   85116:	f000 8140 	beq.w	8539a <_malloc_r+0x3ca>
   8511a:	6859      	ldr	r1, [r3, #4]
   8511c:	f021 0103 	bic.w	r1, r1, #3
   85120:	1b4a      	subs	r2, r1, r5
   85122:	2a0f      	cmp	r2, #15
   85124:	ddf2      	ble.n	8510c <_malloc_r+0x13c>
   85126:	461c      	mov	r4, r3
   85128:	f854 cf08 	ldr.w	ip, [r4, #8]!
   8512c:	68d9      	ldr	r1, [r3, #12]
   8512e:	f045 0901 	orr.w	r9, r5, #1
   85132:	f042 0801 	orr.w	r8, r2, #1
   85136:	441d      	add	r5, r3
   85138:	f8c3 9004 	str.w	r9, [r3, #4]
   8513c:	4630      	mov	r0, r6
   8513e:	f8cc 100c 	str.w	r1, [ip, #12]
   85142:	f8c1 c008 	str.w	ip, [r1, #8]
   85146:	617d      	str	r5, [r7, #20]
   85148:	613d      	str	r5, [r7, #16]
   8514a:	f8c5 e00c 	str.w	lr, [r5, #12]
   8514e:	f8c5 e008 	str.w	lr, [r5, #8]
   85152:	f8c5 8004 	str.w	r8, [r5, #4]
   85156:	50aa      	str	r2, [r5, r2]
   85158:	f000 fa88 	bl	8566c <__malloc_unlock>
   8515c:	e764      	b.n	85028 <_malloc_r+0x58>
   8515e:	217e      	movs	r1, #126	; 0x7e
   85160:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
   85164:	e77c      	b.n	85060 <_malloc_r+0x90>
   85166:	4422      	add	r2, r4
   85168:	6850      	ldr	r0, [r2, #4]
   8516a:	68e3      	ldr	r3, [r4, #12]
   8516c:	68a1      	ldr	r1, [r4, #8]
   8516e:	f040 0501 	orr.w	r5, r0, #1
   85172:	60cb      	str	r3, [r1, #12]
   85174:	4630      	mov	r0, r6
   85176:	6099      	str	r1, [r3, #8]
   85178:	6055      	str	r5, [r2, #4]
   8517a:	f000 fa77 	bl	8566c <__malloc_unlock>
   8517e:	3408      	adds	r4, #8
   85180:	4620      	mov	r0, r4
   85182:	b003      	add	sp, #12
   85184:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   85188:	4421      	add	r1, r4
   8518a:	684b      	ldr	r3, [r1, #4]
   8518c:	4630      	mov	r0, r6
   8518e:	f043 0301 	orr.w	r3, r3, #1
   85192:	604b      	str	r3, [r1, #4]
   85194:	f000 fa6a 	bl	8566c <__malloc_unlock>
   85198:	3408      	adds	r4, #8
   8519a:	4620      	mov	r0, r4
   8519c:	b003      	add	sp, #12
   8519e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   851a2:	68bc      	ldr	r4, [r7, #8]
   851a4:	6863      	ldr	r3, [r4, #4]
   851a6:	f023 0903 	bic.w	r9, r3, #3
   851aa:	45a9      	cmp	r9, r5
   851ac:	d304      	bcc.n	851b8 <_malloc_r+0x1e8>
   851ae:	ebc5 0309 	rsb	r3, r5, r9
   851b2:	2b0f      	cmp	r3, #15
   851b4:	f300 8091 	bgt.w	852da <_malloc_r+0x30a>
   851b8:	4b51      	ldr	r3, [pc, #324]	; (85300 <_malloc_r+0x330>)
   851ba:	4a52      	ldr	r2, [pc, #328]	; (85304 <_malloc_r+0x334>)
   851bc:	6819      	ldr	r1, [r3, #0]
   851be:	6813      	ldr	r3, [r2, #0]
   851c0:	eb05 0a01 	add.w	sl, r5, r1
   851c4:	3301      	adds	r3, #1
   851c6:	eb04 0b09 	add.w	fp, r4, r9
   851ca:	f000 8161 	beq.w	85490 <_malloc_r+0x4c0>
   851ce:	f50a 5a80 	add.w	sl, sl, #4096	; 0x1000
   851d2:	f10a 0a0f 	add.w	sl, sl, #15
   851d6:	f42a 6a7f 	bic.w	sl, sl, #4080	; 0xff0
   851da:	f02a 0a0f 	bic.w	sl, sl, #15
   851de:	4630      	mov	r0, r6
   851e0:	4651      	mov	r1, sl
   851e2:	9201      	str	r2, [sp, #4]
   851e4:	f000 fc24 	bl	85a30 <_sbrk_r>
   851e8:	f1b0 3fff 	cmp.w	r0, #4294967295
   851ec:	4680      	mov	r8, r0
   851ee:	9a01      	ldr	r2, [sp, #4]
   851f0:	f000 8101 	beq.w	853f6 <_malloc_r+0x426>
   851f4:	4583      	cmp	fp, r0
   851f6:	f200 80fb 	bhi.w	853f0 <_malloc_r+0x420>
   851fa:	f8df c114 	ldr.w	ip, [pc, #276]	; 85310 <_malloc_r+0x340>
   851fe:	45c3      	cmp	fp, r8
   85200:	f8dc 3000 	ldr.w	r3, [ip]
   85204:	4453      	add	r3, sl
   85206:	f8cc 3000 	str.w	r3, [ip]
   8520a:	f000 814a 	beq.w	854a2 <_malloc_r+0x4d2>
   8520e:	6812      	ldr	r2, [r2, #0]
   85210:	493c      	ldr	r1, [pc, #240]	; (85304 <_malloc_r+0x334>)
   85212:	3201      	adds	r2, #1
   85214:	bf1b      	ittet	ne
   85216:	ebcb 0b08 	rsbne	fp, fp, r8
   8521a:	445b      	addne	r3, fp
   8521c:	f8c1 8000 	streq.w	r8, [r1]
   85220:	f8cc 3000 	strne.w	r3, [ip]
   85224:	f018 0307 	ands.w	r3, r8, #7
   85228:	f000 8114 	beq.w	85454 <_malloc_r+0x484>
   8522c:	f1c3 0208 	rsb	r2, r3, #8
   85230:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
   85234:	4490      	add	r8, r2
   85236:	3308      	adds	r3, #8
   85238:	44c2      	add	sl, r8
   8523a:	f3ca 0a0b 	ubfx	sl, sl, #0, #12
   8523e:	ebca 0a03 	rsb	sl, sl, r3
   85242:	4651      	mov	r1, sl
   85244:	4630      	mov	r0, r6
   85246:	f8cd c004 	str.w	ip, [sp, #4]
   8524a:	f000 fbf1 	bl	85a30 <_sbrk_r>
   8524e:	1c43      	adds	r3, r0, #1
   85250:	f8dd c004 	ldr.w	ip, [sp, #4]
   85254:	f000 8135 	beq.w	854c2 <_malloc_r+0x4f2>
   85258:	ebc8 0200 	rsb	r2, r8, r0
   8525c:	4452      	add	r2, sl
   8525e:	f042 0201 	orr.w	r2, r2, #1
   85262:	f8dc 3000 	ldr.w	r3, [ip]
   85266:	42bc      	cmp	r4, r7
   85268:	4453      	add	r3, sl
   8526a:	f8c7 8008 	str.w	r8, [r7, #8]
   8526e:	f8cc 3000 	str.w	r3, [ip]
   85272:	f8c8 2004 	str.w	r2, [r8, #4]
   85276:	f8df a098 	ldr.w	sl, [pc, #152]	; 85310 <_malloc_r+0x340>
   8527a:	d015      	beq.n	852a8 <_malloc_r+0x2d8>
   8527c:	f1b9 0f0f 	cmp.w	r9, #15
   85280:	f240 80eb 	bls.w	8545a <_malloc_r+0x48a>
   85284:	6861      	ldr	r1, [r4, #4]
   85286:	f1a9 020c 	sub.w	r2, r9, #12
   8528a:	f022 0207 	bic.w	r2, r2, #7
   8528e:	f001 0101 	and.w	r1, r1, #1
   85292:	ea42 0e01 	orr.w	lr, r2, r1
   85296:	2005      	movs	r0, #5
   85298:	18a1      	adds	r1, r4, r2
   8529a:	2a0f      	cmp	r2, #15
   8529c:	f8c4 e004 	str.w	lr, [r4, #4]
   852a0:	6048      	str	r0, [r1, #4]
   852a2:	6088      	str	r0, [r1, #8]
   852a4:	f200 8111 	bhi.w	854ca <_malloc_r+0x4fa>
   852a8:	4a17      	ldr	r2, [pc, #92]	; (85308 <_malloc_r+0x338>)
   852aa:	68bc      	ldr	r4, [r7, #8]
   852ac:	6811      	ldr	r1, [r2, #0]
   852ae:	428b      	cmp	r3, r1
   852b0:	bf88      	it	hi
   852b2:	6013      	strhi	r3, [r2, #0]
   852b4:	4a15      	ldr	r2, [pc, #84]	; (8530c <_malloc_r+0x33c>)
   852b6:	6811      	ldr	r1, [r2, #0]
   852b8:	428b      	cmp	r3, r1
   852ba:	bf88      	it	hi
   852bc:	6013      	strhi	r3, [r2, #0]
   852be:	6862      	ldr	r2, [r4, #4]
   852c0:	f022 0203 	bic.w	r2, r2, #3
   852c4:	4295      	cmp	r5, r2
   852c6:	ebc5 0302 	rsb	r3, r5, r2
   852ca:	d801      	bhi.n	852d0 <_malloc_r+0x300>
   852cc:	2b0f      	cmp	r3, #15
   852ce:	dc04      	bgt.n	852da <_malloc_r+0x30a>
   852d0:	4630      	mov	r0, r6
   852d2:	f000 f9cb 	bl	8566c <__malloc_unlock>
   852d6:	2400      	movs	r4, #0
   852d8:	e6a6      	b.n	85028 <_malloc_r+0x58>
   852da:	f045 0201 	orr.w	r2, r5, #1
   852de:	f043 0301 	orr.w	r3, r3, #1
   852e2:	4425      	add	r5, r4
   852e4:	6062      	str	r2, [r4, #4]
   852e6:	4630      	mov	r0, r6
   852e8:	60bd      	str	r5, [r7, #8]
   852ea:	606b      	str	r3, [r5, #4]
   852ec:	f000 f9be 	bl	8566c <__malloc_unlock>
   852f0:	3408      	adds	r4, #8
   852f2:	4620      	mov	r0, r4
   852f4:	b003      	add	sp, #12
   852f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   852fa:	bf00      	nop
   852fc:	20070590 	.word	0x20070590
   85300:	20078c24 	.word	0x20078c24
   85304:	2007099c 	.word	0x2007099c
   85308:	20078c20 	.word	0x20078c20
   8530c:	20078c1c 	.word	0x20078c1c
   85310:	20078c28 	.word	0x20078c28
   85314:	f1bc 0f14 	cmp.w	ip, #20
   85318:	d961      	bls.n	853de <_malloc_r+0x40e>
   8531a:	f1bc 0f54 	cmp.w	ip, #84	; 0x54
   8531e:	f200 808f 	bhi.w	85440 <_malloc_r+0x470>
   85322:	ea4f 3c15 	mov.w	ip, r5, lsr #12
   85326:	f10c 0c6e 	add.w	ip, ip, #110	; 0x6e
   8532a:	ea4f 014c 	mov.w	r1, ip, lsl #1
   8532e:	e697      	b.n	85060 <_malloc_r+0x90>
   85330:	0a4b      	lsrs	r3, r1, #9
   85332:	2b04      	cmp	r3, #4
   85334:	d958      	bls.n	853e8 <_malloc_r+0x418>
   85336:	2b14      	cmp	r3, #20
   85338:	f200 80ad 	bhi.w	85496 <_malloc_r+0x4c6>
   8533c:	f103 025b 	add.w	r2, r3, #91	; 0x5b
   85340:	0050      	lsls	r0, r2, #1
   85342:	eb07 0080 	add.w	r0, r7, r0, lsl #2
   85346:	6883      	ldr	r3, [r0, #8]
   85348:	f8df 81b8 	ldr.w	r8, [pc, #440]	; 85504 <_malloc_r+0x534>
   8534c:	4283      	cmp	r3, r0
   8534e:	f000 808a 	beq.w	85466 <_malloc_r+0x496>
   85352:	685a      	ldr	r2, [r3, #4]
   85354:	f022 0203 	bic.w	r2, r2, #3
   85358:	4291      	cmp	r1, r2
   8535a:	d202      	bcs.n	85362 <_malloc_r+0x392>
   8535c:	689b      	ldr	r3, [r3, #8]
   8535e:	4298      	cmp	r0, r3
   85360:	d1f7      	bne.n	85352 <_malloc_r+0x382>
   85362:	68d9      	ldr	r1, [r3, #12]
   85364:	687a      	ldr	r2, [r7, #4]
   85366:	60e1      	str	r1, [r4, #12]
   85368:	60a3      	str	r3, [r4, #8]
   8536a:	608c      	str	r4, [r1, #8]
   8536c:	60dc      	str	r4, [r3, #12]
   8536e:	e6b6      	b.n	850de <_malloc_r+0x10e>
   85370:	f045 0701 	orr.w	r7, r5, #1
   85374:	f042 0101 	orr.w	r1, r2, #1
   85378:	4425      	add	r5, r4
   8537a:	6067      	str	r7, [r4, #4]
   8537c:	4630      	mov	r0, r6
   8537e:	615d      	str	r5, [r3, #20]
   85380:	611d      	str	r5, [r3, #16]
   85382:	f8c5 e00c 	str.w	lr, [r5, #12]
   85386:	f8c5 e008 	str.w	lr, [r5, #8]
   8538a:	6069      	str	r1, [r5, #4]
   8538c:	50aa      	str	r2, [r5, r2]
   8538e:	3408      	adds	r4, #8
   85390:	f000 f96c 	bl	8566c <__malloc_unlock>
   85394:	e648      	b.n	85028 <_malloc_r+0x58>
   85396:	685a      	ldr	r2, [r3, #4]
   85398:	e6a1      	b.n	850de <_malloc_r+0x10e>
   8539a:	f109 0901 	add.w	r9, r9, #1
   8539e:	f019 0f03 	tst.w	r9, #3
   853a2:	f104 0408 	add.w	r4, r4, #8
   853a6:	f47f aead 	bne.w	85104 <_malloc_r+0x134>
   853aa:	e02d      	b.n	85408 <_malloc_r+0x438>
   853ac:	f104 0308 	add.w	r3, r4, #8
   853b0:	6964      	ldr	r4, [r4, #20]
   853b2:	42a3      	cmp	r3, r4
   853b4:	bf08      	it	eq
   853b6:	f10c 0c02 	addeq.w	ip, ip, #2
   853ba:	f43f ae67 	beq.w	8508c <_malloc_r+0xbc>
   853be:	e623      	b.n	85008 <_malloc_r+0x38>
   853c0:	4419      	add	r1, r3
   853c2:	6848      	ldr	r0, [r1, #4]
   853c4:	461c      	mov	r4, r3
   853c6:	f854 2f08 	ldr.w	r2, [r4, #8]!
   853ca:	68db      	ldr	r3, [r3, #12]
   853cc:	f040 0501 	orr.w	r5, r0, #1
   853d0:	604d      	str	r5, [r1, #4]
   853d2:	4630      	mov	r0, r6
   853d4:	60d3      	str	r3, [r2, #12]
   853d6:	609a      	str	r2, [r3, #8]
   853d8:	f000 f948 	bl	8566c <__malloc_unlock>
   853dc:	e624      	b.n	85028 <_malloc_r+0x58>
   853de:	f10c 0c5b 	add.w	ip, ip, #91	; 0x5b
   853e2:	ea4f 014c 	mov.w	r1, ip, lsl #1
   853e6:	e63b      	b.n	85060 <_malloc_r+0x90>
   853e8:	098a      	lsrs	r2, r1, #6
   853ea:	3238      	adds	r2, #56	; 0x38
   853ec:	0050      	lsls	r0, r2, #1
   853ee:	e7a8      	b.n	85342 <_malloc_r+0x372>
   853f0:	42bc      	cmp	r4, r7
   853f2:	f43f af02 	beq.w	851fa <_malloc_r+0x22a>
   853f6:	68bc      	ldr	r4, [r7, #8]
   853f8:	6862      	ldr	r2, [r4, #4]
   853fa:	f022 0203 	bic.w	r2, r2, #3
   853fe:	e761      	b.n	852c4 <_malloc_r+0x2f4>
   85400:	f8d8 8000 	ldr.w	r8, [r8]
   85404:	4598      	cmp	r8, r3
   85406:	d17a      	bne.n	854fe <_malloc_r+0x52e>
   85408:	f01c 0f03 	tst.w	ip, #3
   8540c:	f1a8 0308 	sub.w	r3, r8, #8
   85410:	f10c 3cff 	add.w	ip, ip, #4294967295
   85414:	d1f4      	bne.n	85400 <_malloc_r+0x430>
   85416:	687b      	ldr	r3, [r7, #4]
   85418:	ea23 0300 	bic.w	r3, r3, r0
   8541c:	607b      	str	r3, [r7, #4]
   8541e:	0040      	lsls	r0, r0, #1
   85420:	4298      	cmp	r0, r3
   85422:	f63f aebe 	bhi.w	851a2 <_malloc_r+0x1d2>
   85426:	2800      	cmp	r0, #0
   85428:	f43f aebb 	beq.w	851a2 <_malloc_r+0x1d2>
   8542c:	4203      	tst	r3, r0
   8542e:	46cc      	mov	ip, r9
   85430:	f47f ae64 	bne.w	850fc <_malloc_r+0x12c>
   85434:	0040      	lsls	r0, r0, #1
   85436:	4203      	tst	r3, r0
   85438:	f10c 0c04 	add.w	ip, ip, #4
   8543c:	d0fa      	beq.n	85434 <_malloc_r+0x464>
   8543e:	e65d      	b.n	850fc <_malloc_r+0x12c>
   85440:	f5bc 7faa 	cmp.w	ip, #340	; 0x154
   85444:	d819      	bhi.n	8547a <_malloc_r+0x4aa>
   85446:	ea4f 3cd5 	mov.w	ip, r5, lsr #15
   8544a:	f10c 0c77 	add.w	ip, ip, #119	; 0x77
   8544e:	ea4f 014c 	mov.w	r1, ip, lsl #1
   85452:	e605      	b.n	85060 <_malloc_r+0x90>
   85454:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   85458:	e6ee      	b.n	85238 <_malloc_r+0x268>
   8545a:	2301      	movs	r3, #1
   8545c:	f8c8 3004 	str.w	r3, [r8, #4]
   85460:	4644      	mov	r4, r8
   85462:	2200      	movs	r2, #0
   85464:	e72e      	b.n	852c4 <_malloc_r+0x2f4>
   85466:	1092      	asrs	r2, r2, #2
   85468:	2001      	movs	r0, #1
   8546a:	4090      	lsls	r0, r2
   8546c:	f8d8 2004 	ldr.w	r2, [r8, #4]
   85470:	4619      	mov	r1, r3
   85472:	4302      	orrs	r2, r0
   85474:	f8c8 2004 	str.w	r2, [r8, #4]
   85478:	e775      	b.n	85366 <_malloc_r+0x396>
   8547a:	f240 5354 	movw	r3, #1364	; 0x554
   8547e:	459c      	cmp	ip, r3
   85480:	d81b      	bhi.n	854ba <_malloc_r+0x4ea>
   85482:	ea4f 4c95 	mov.w	ip, r5, lsr #18
   85486:	f10c 0c7c 	add.w	ip, ip, #124	; 0x7c
   8548a:	ea4f 014c 	mov.w	r1, ip, lsl #1
   8548e:	e5e7      	b.n	85060 <_malloc_r+0x90>
   85490:	f10a 0a10 	add.w	sl, sl, #16
   85494:	e6a3      	b.n	851de <_malloc_r+0x20e>
   85496:	2b54      	cmp	r3, #84	; 0x54
   85498:	d81f      	bhi.n	854da <_malloc_r+0x50a>
   8549a:	0b0a      	lsrs	r2, r1, #12
   8549c:	326e      	adds	r2, #110	; 0x6e
   8549e:	0050      	lsls	r0, r2, #1
   854a0:	e74f      	b.n	85342 <_malloc_r+0x372>
   854a2:	f3cb 010b 	ubfx	r1, fp, #0, #12
   854a6:	2900      	cmp	r1, #0
   854a8:	f47f aeb1 	bne.w	8520e <_malloc_r+0x23e>
   854ac:	eb0a 0109 	add.w	r1, sl, r9
   854b0:	68ba      	ldr	r2, [r7, #8]
   854b2:	f041 0101 	orr.w	r1, r1, #1
   854b6:	6051      	str	r1, [r2, #4]
   854b8:	e6f6      	b.n	852a8 <_malloc_r+0x2d8>
   854ba:	21fc      	movs	r1, #252	; 0xfc
   854bc:	f04f 0c7e 	mov.w	ip, #126	; 0x7e
   854c0:	e5ce      	b.n	85060 <_malloc_r+0x90>
   854c2:	2201      	movs	r2, #1
   854c4:	f04f 0a00 	mov.w	sl, #0
   854c8:	e6cb      	b.n	85262 <_malloc_r+0x292>
   854ca:	f104 0108 	add.w	r1, r4, #8
   854ce:	4630      	mov	r0, r6
   854d0:	f7ff fa80 	bl	849d4 <_free_r>
   854d4:	f8da 3000 	ldr.w	r3, [sl]
   854d8:	e6e6      	b.n	852a8 <_malloc_r+0x2d8>
   854da:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   854de:	d803      	bhi.n	854e8 <_malloc_r+0x518>
   854e0:	0bca      	lsrs	r2, r1, #15
   854e2:	3277      	adds	r2, #119	; 0x77
   854e4:	0050      	lsls	r0, r2, #1
   854e6:	e72c      	b.n	85342 <_malloc_r+0x372>
   854e8:	f240 5254 	movw	r2, #1364	; 0x554
   854ec:	4293      	cmp	r3, r2
   854ee:	d803      	bhi.n	854f8 <_malloc_r+0x528>
   854f0:	0c8a      	lsrs	r2, r1, #18
   854f2:	327c      	adds	r2, #124	; 0x7c
   854f4:	0050      	lsls	r0, r2, #1
   854f6:	e724      	b.n	85342 <_malloc_r+0x372>
   854f8:	20fc      	movs	r0, #252	; 0xfc
   854fa:	227e      	movs	r2, #126	; 0x7e
   854fc:	e721      	b.n	85342 <_malloc_r+0x372>
   854fe:	687b      	ldr	r3, [r7, #4]
   85500:	e78d      	b.n	8541e <_malloc_r+0x44e>
   85502:	bf00      	nop
   85504:	20070590 	.word	0x20070590

00085508 <memchr>:
   85508:	0783      	lsls	r3, r0, #30
   8550a:	b470      	push	{r4, r5, r6}
   8550c:	b2c9      	uxtb	r1, r1
   8550e:	d040      	beq.n	85592 <memchr+0x8a>
   85510:	1e54      	subs	r4, r2, #1
   85512:	b32a      	cbz	r2, 85560 <memchr+0x58>
   85514:	7803      	ldrb	r3, [r0, #0]
   85516:	428b      	cmp	r3, r1
   85518:	d023      	beq.n	85562 <memchr+0x5a>
   8551a:	1c43      	adds	r3, r0, #1
   8551c:	e004      	b.n	85528 <memchr+0x20>
   8551e:	b1fc      	cbz	r4, 85560 <memchr+0x58>
   85520:	7805      	ldrb	r5, [r0, #0]
   85522:	4614      	mov	r4, r2
   85524:	428d      	cmp	r5, r1
   85526:	d01c      	beq.n	85562 <memchr+0x5a>
   85528:	f013 0f03 	tst.w	r3, #3
   8552c:	4618      	mov	r0, r3
   8552e:	f104 32ff 	add.w	r2, r4, #4294967295
   85532:	f103 0301 	add.w	r3, r3, #1
   85536:	d1f2      	bne.n	8551e <memchr+0x16>
   85538:	2c03      	cmp	r4, #3
   8553a:	d814      	bhi.n	85566 <memchr+0x5e>
   8553c:	1e65      	subs	r5, r4, #1
   8553e:	b354      	cbz	r4, 85596 <memchr+0x8e>
   85540:	7803      	ldrb	r3, [r0, #0]
   85542:	428b      	cmp	r3, r1
   85544:	d00d      	beq.n	85562 <memchr+0x5a>
   85546:	1c42      	adds	r2, r0, #1
   85548:	2300      	movs	r3, #0
   8554a:	e002      	b.n	85552 <memchr+0x4a>
   8554c:	7804      	ldrb	r4, [r0, #0]
   8554e:	428c      	cmp	r4, r1
   85550:	d007      	beq.n	85562 <memchr+0x5a>
   85552:	42ab      	cmp	r3, r5
   85554:	4610      	mov	r0, r2
   85556:	f103 0301 	add.w	r3, r3, #1
   8555a:	f102 0201 	add.w	r2, r2, #1
   8555e:	d1f5      	bne.n	8554c <memchr+0x44>
   85560:	2000      	movs	r0, #0
   85562:	bc70      	pop	{r4, r5, r6}
   85564:	4770      	bx	lr
   85566:	ea41 2601 	orr.w	r6, r1, r1, lsl #8
   8556a:	4603      	mov	r3, r0
   8556c:	ea46 4606 	orr.w	r6, r6, r6, lsl #16
   85570:	681a      	ldr	r2, [r3, #0]
   85572:	4618      	mov	r0, r3
   85574:	4072      	eors	r2, r6
   85576:	f1a2 3501 	sub.w	r5, r2, #16843009	; 0x1010101
   8557a:	ea25 0202 	bic.w	r2, r5, r2
   8557e:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   85582:	f103 0304 	add.w	r3, r3, #4
   85586:	d1d9      	bne.n	8553c <memchr+0x34>
   85588:	3c04      	subs	r4, #4
   8558a:	2c03      	cmp	r4, #3
   8558c:	4618      	mov	r0, r3
   8558e:	d8ef      	bhi.n	85570 <memchr+0x68>
   85590:	e7d4      	b.n	8553c <memchr+0x34>
   85592:	4614      	mov	r4, r2
   85594:	e7d0      	b.n	85538 <memchr+0x30>
   85596:	4620      	mov	r0, r4
   85598:	e7e3      	b.n	85562 <memchr+0x5a>
   8559a:	bf00      	nop

0008559c <memmove>:
   8559c:	4288      	cmp	r0, r1
   8559e:	b4f0      	push	{r4, r5, r6, r7}
   855a0:	d910      	bls.n	855c4 <memmove+0x28>
   855a2:	188c      	adds	r4, r1, r2
   855a4:	42a0      	cmp	r0, r4
   855a6:	d20d      	bcs.n	855c4 <memmove+0x28>
   855a8:	1885      	adds	r5, r0, r2
   855aa:	1e53      	subs	r3, r2, #1
   855ac:	b142      	cbz	r2, 855c0 <memmove+0x24>
   855ae:	4621      	mov	r1, r4
   855b0:	462a      	mov	r2, r5
   855b2:	f811 4d01 	ldrb.w	r4, [r1, #-1]!
   855b6:	3b01      	subs	r3, #1
   855b8:	f802 4d01 	strb.w	r4, [r2, #-1]!
   855bc:	1c5c      	adds	r4, r3, #1
   855be:	d1f8      	bne.n	855b2 <memmove+0x16>
   855c0:	bcf0      	pop	{r4, r5, r6, r7}
   855c2:	4770      	bx	lr
   855c4:	2a0f      	cmp	r2, #15
   855c6:	d944      	bls.n	85652 <memmove+0xb6>
   855c8:	ea40 0301 	orr.w	r3, r0, r1
   855cc:	079b      	lsls	r3, r3, #30
   855ce:	d144      	bne.n	8565a <memmove+0xbe>
   855d0:	f1a2 0710 	sub.w	r7, r2, #16
   855d4:	093f      	lsrs	r7, r7, #4
   855d6:	eb00 1607 	add.w	r6, r0, r7, lsl #4
   855da:	3610      	adds	r6, #16
   855dc:	460c      	mov	r4, r1
   855de:	4603      	mov	r3, r0
   855e0:	6825      	ldr	r5, [r4, #0]
   855e2:	3310      	adds	r3, #16
   855e4:	f843 5c10 	str.w	r5, [r3, #-16]
   855e8:	6865      	ldr	r5, [r4, #4]
   855ea:	3410      	adds	r4, #16
   855ec:	f843 5c0c 	str.w	r5, [r3, #-12]
   855f0:	f854 5c08 	ldr.w	r5, [r4, #-8]
   855f4:	f843 5c08 	str.w	r5, [r3, #-8]
   855f8:	f854 5c04 	ldr.w	r5, [r4, #-4]
   855fc:	f843 5c04 	str.w	r5, [r3, #-4]
   85600:	42b3      	cmp	r3, r6
   85602:	d1ed      	bne.n	855e0 <memmove+0x44>
   85604:	1c7b      	adds	r3, r7, #1
   85606:	f002 0c0f 	and.w	ip, r2, #15
   8560a:	011b      	lsls	r3, r3, #4
   8560c:	f1bc 0f03 	cmp.w	ip, #3
   85610:	4419      	add	r1, r3
   85612:	4403      	add	r3, r0
   85614:	d923      	bls.n	8565e <memmove+0xc2>
   85616:	460e      	mov	r6, r1
   85618:	461d      	mov	r5, r3
   8561a:	4664      	mov	r4, ip
   8561c:	f856 7b04 	ldr.w	r7, [r6], #4
   85620:	3c04      	subs	r4, #4
   85622:	2c03      	cmp	r4, #3
   85624:	f845 7b04 	str.w	r7, [r5], #4
   85628:	d8f8      	bhi.n	8561c <memmove+0x80>
   8562a:	f1ac 0404 	sub.w	r4, ip, #4
   8562e:	f024 0403 	bic.w	r4, r4, #3
   85632:	3404      	adds	r4, #4
   85634:	f002 0203 	and.w	r2, r2, #3
   85638:	4423      	add	r3, r4
   8563a:	4421      	add	r1, r4
   8563c:	2a00      	cmp	r2, #0
   8563e:	d0bf      	beq.n	855c0 <memmove+0x24>
   85640:	441a      	add	r2, r3
   85642:	f811 4b01 	ldrb.w	r4, [r1], #1
   85646:	f803 4b01 	strb.w	r4, [r3], #1
   8564a:	4293      	cmp	r3, r2
   8564c:	d1f9      	bne.n	85642 <memmove+0xa6>
   8564e:	bcf0      	pop	{r4, r5, r6, r7}
   85650:	4770      	bx	lr
   85652:	4603      	mov	r3, r0
   85654:	2a00      	cmp	r2, #0
   85656:	d1f3      	bne.n	85640 <memmove+0xa4>
   85658:	e7b2      	b.n	855c0 <memmove+0x24>
   8565a:	4603      	mov	r3, r0
   8565c:	e7f0      	b.n	85640 <memmove+0xa4>
   8565e:	4662      	mov	r2, ip
   85660:	2a00      	cmp	r2, #0
   85662:	d1ed      	bne.n	85640 <memmove+0xa4>
   85664:	e7ac      	b.n	855c0 <memmove+0x24>
   85666:	bf00      	nop

00085668 <__malloc_lock>:
   85668:	4770      	bx	lr
   8566a:	bf00      	nop

0008566c <__malloc_unlock>:
   8566c:	4770      	bx	lr
   8566e:	bf00      	nop

00085670 <_realloc_r>:
   85670:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   85674:	460c      	mov	r4, r1
   85676:	b083      	sub	sp, #12
   85678:	4690      	mov	r8, r2
   8567a:	4681      	mov	r9, r0
   8567c:	2900      	cmp	r1, #0
   8567e:	f000 80ba 	beq.w	857f6 <_realloc_r+0x186>
   85682:	f7ff fff1 	bl	85668 <__malloc_lock>
   85686:	f108 060b 	add.w	r6, r8, #11
   8568a:	f854 3c04 	ldr.w	r3, [r4, #-4]
   8568e:	2e16      	cmp	r6, #22
   85690:	f023 0503 	bic.w	r5, r3, #3
   85694:	f1a4 0708 	sub.w	r7, r4, #8
   85698:	d84b      	bhi.n	85732 <_realloc_r+0xc2>
   8569a:	2110      	movs	r1, #16
   8569c:	460e      	mov	r6, r1
   8569e:	45b0      	cmp	r8, r6
   856a0:	d84c      	bhi.n	8573c <_realloc_r+0xcc>
   856a2:	428d      	cmp	r5, r1
   856a4:	da51      	bge.n	8574a <_realloc_r+0xda>
   856a6:	f8df b384 	ldr.w	fp, [pc, #900]	; 85a2c <_realloc_r+0x3bc>
   856aa:	1978      	adds	r0, r7, r5
   856ac:	f8db e008 	ldr.w	lr, [fp, #8]
   856b0:	4586      	cmp	lr, r0
   856b2:	f000 80a6 	beq.w	85802 <_realloc_r+0x192>
   856b6:	6842      	ldr	r2, [r0, #4]
   856b8:	f022 0c01 	bic.w	ip, r2, #1
   856bc:	4484      	add	ip, r0
   856be:	f8dc c004 	ldr.w	ip, [ip, #4]
   856c2:	f01c 0f01 	tst.w	ip, #1
   856c6:	d054      	beq.n	85772 <_realloc_r+0x102>
   856c8:	2200      	movs	r2, #0
   856ca:	4610      	mov	r0, r2
   856cc:	07db      	lsls	r3, r3, #31
   856ce:	d46f      	bmi.n	857b0 <_realloc_r+0x140>
   856d0:	f854 3c08 	ldr.w	r3, [r4, #-8]
   856d4:	ebc3 0a07 	rsb	sl, r3, r7
   856d8:	f8da 3004 	ldr.w	r3, [sl, #4]
   856dc:	f023 0303 	bic.w	r3, r3, #3
   856e0:	442b      	add	r3, r5
   856e2:	2800      	cmp	r0, #0
   856e4:	d062      	beq.n	857ac <_realloc_r+0x13c>
   856e6:	4570      	cmp	r0, lr
   856e8:	f000 80e9 	beq.w	858be <_realloc_r+0x24e>
   856ec:	eb02 0e03 	add.w	lr, r2, r3
   856f0:	458e      	cmp	lr, r1
   856f2:	db5b      	blt.n	857ac <_realloc_r+0x13c>
   856f4:	68c3      	ldr	r3, [r0, #12]
   856f6:	6882      	ldr	r2, [r0, #8]
   856f8:	46d0      	mov	r8, sl
   856fa:	60d3      	str	r3, [r2, #12]
   856fc:	609a      	str	r2, [r3, #8]
   856fe:	f858 1f08 	ldr.w	r1, [r8, #8]!
   85702:	f8da 300c 	ldr.w	r3, [sl, #12]
   85706:	1f2a      	subs	r2, r5, #4
   85708:	2a24      	cmp	r2, #36	; 0x24
   8570a:	60cb      	str	r3, [r1, #12]
   8570c:	6099      	str	r1, [r3, #8]
   8570e:	f200 8123 	bhi.w	85958 <_realloc_r+0x2e8>
   85712:	2a13      	cmp	r2, #19
   85714:	f240 80b0 	bls.w	85878 <_realloc_r+0x208>
   85718:	6823      	ldr	r3, [r4, #0]
   8571a:	2a1b      	cmp	r2, #27
   8571c:	f8ca 3008 	str.w	r3, [sl, #8]
   85720:	6863      	ldr	r3, [r4, #4]
   85722:	f8ca 300c 	str.w	r3, [sl, #12]
   85726:	f200 812b 	bhi.w	85980 <_realloc_r+0x310>
   8572a:	3408      	adds	r4, #8
   8572c:	f10a 0310 	add.w	r3, sl, #16
   85730:	e0a3      	b.n	8587a <_realloc_r+0x20a>
   85732:	f026 0607 	bic.w	r6, r6, #7
   85736:	2e00      	cmp	r6, #0
   85738:	4631      	mov	r1, r6
   8573a:	dab0      	bge.n	8569e <_realloc_r+0x2e>
   8573c:	230c      	movs	r3, #12
   8573e:	2000      	movs	r0, #0
   85740:	f8c9 3000 	str.w	r3, [r9]
   85744:	b003      	add	sp, #12
   85746:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8574a:	46a0      	mov	r8, r4
   8574c:	1baa      	subs	r2, r5, r6
   8574e:	2a0f      	cmp	r2, #15
   85750:	f003 0301 	and.w	r3, r3, #1
   85754:	d81a      	bhi.n	8578c <_realloc_r+0x11c>
   85756:	432b      	orrs	r3, r5
   85758:	607b      	str	r3, [r7, #4]
   8575a:	443d      	add	r5, r7
   8575c:	686b      	ldr	r3, [r5, #4]
   8575e:	f043 0301 	orr.w	r3, r3, #1
   85762:	606b      	str	r3, [r5, #4]
   85764:	4648      	mov	r0, r9
   85766:	f7ff ff81 	bl	8566c <__malloc_unlock>
   8576a:	4640      	mov	r0, r8
   8576c:	b003      	add	sp, #12
   8576e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   85772:	f022 0203 	bic.w	r2, r2, #3
   85776:	eb02 0c05 	add.w	ip, r2, r5
   8577a:	458c      	cmp	ip, r1
   8577c:	dba6      	blt.n	856cc <_realloc_r+0x5c>
   8577e:	68c2      	ldr	r2, [r0, #12]
   85780:	6881      	ldr	r1, [r0, #8]
   85782:	46a0      	mov	r8, r4
   85784:	60ca      	str	r2, [r1, #12]
   85786:	4665      	mov	r5, ip
   85788:	6091      	str	r1, [r2, #8]
   8578a:	e7df      	b.n	8574c <_realloc_r+0xdc>
   8578c:	19b9      	adds	r1, r7, r6
   8578e:	4333      	orrs	r3, r6
   85790:	f042 0001 	orr.w	r0, r2, #1
   85794:	607b      	str	r3, [r7, #4]
   85796:	440a      	add	r2, r1
   85798:	6048      	str	r0, [r1, #4]
   8579a:	6853      	ldr	r3, [r2, #4]
   8579c:	3108      	adds	r1, #8
   8579e:	f043 0301 	orr.w	r3, r3, #1
   857a2:	6053      	str	r3, [r2, #4]
   857a4:	4648      	mov	r0, r9
   857a6:	f7ff f915 	bl	849d4 <_free_r>
   857aa:	e7db      	b.n	85764 <_realloc_r+0xf4>
   857ac:	428b      	cmp	r3, r1
   857ae:	da33      	bge.n	85818 <_realloc_r+0x1a8>
   857b0:	4641      	mov	r1, r8
   857b2:	4648      	mov	r0, r9
   857b4:	f7ff fc0c 	bl	84fd0 <_malloc_r>
   857b8:	4680      	mov	r8, r0
   857ba:	2800      	cmp	r0, #0
   857bc:	d0d2      	beq.n	85764 <_realloc_r+0xf4>
   857be:	f854 3c04 	ldr.w	r3, [r4, #-4]
   857c2:	f1a0 0108 	sub.w	r1, r0, #8
   857c6:	f023 0201 	bic.w	r2, r3, #1
   857ca:	443a      	add	r2, r7
   857cc:	4291      	cmp	r1, r2
   857ce:	f000 80bc 	beq.w	8594a <_realloc_r+0x2da>
   857d2:	1f2a      	subs	r2, r5, #4
   857d4:	2a24      	cmp	r2, #36	; 0x24
   857d6:	d86e      	bhi.n	858b6 <_realloc_r+0x246>
   857d8:	2a13      	cmp	r2, #19
   857da:	d842      	bhi.n	85862 <_realloc_r+0x1f2>
   857dc:	4603      	mov	r3, r0
   857de:	4622      	mov	r2, r4
   857e0:	6811      	ldr	r1, [r2, #0]
   857e2:	6019      	str	r1, [r3, #0]
   857e4:	6851      	ldr	r1, [r2, #4]
   857e6:	6059      	str	r1, [r3, #4]
   857e8:	6892      	ldr	r2, [r2, #8]
   857ea:	609a      	str	r2, [r3, #8]
   857ec:	4621      	mov	r1, r4
   857ee:	4648      	mov	r0, r9
   857f0:	f7ff f8f0 	bl	849d4 <_free_r>
   857f4:	e7b6      	b.n	85764 <_realloc_r+0xf4>
   857f6:	4611      	mov	r1, r2
   857f8:	b003      	add	sp, #12
   857fa:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   857fe:	f7ff bbe7 	b.w	84fd0 <_malloc_r>
   85802:	f8de 2004 	ldr.w	r2, [lr, #4]
   85806:	f106 0c10 	add.w	ip, r6, #16
   8580a:	f022 0203 	bic.w	r2, r2, #3
   8580e:	1950      	adds	r0, r2, r5
   85810:	4560      	cmp	r0, ip
   85812:	da3d      	bge.n	85890 <_realloc_r+0x220>
   85814:	4670      	mov	r0, lr
   85816:	e759      	b.n	856cc <_realloc_r+0x5c>
   85818:	46d0      	mov	r8, sl
   8581a:	f858 0f08 	ldr.w	r0, [r8, #8]!
   8581e:	f8da 100c 	ldr.w	r1, [sl, #12]
   85822:	1f2a      	subs	r2, r5, #4
   85824:	2a24      	cmp	r2, #36	; 0x24
   85826:	60c1      	str	r1, [r0, #12]
   85828:	6088      	str	r0, [r1, #8]
   8582a:	f200 80a0 	bhi.w	8596e <_realloc_r+0x2fe>
   8582e:	2a13      	cmp	r2, #19
   85830:	f240 809b 	bls.w	8596a <_realloc_r+0x2fa>
   85834:	6821      	ldr	r1, [r4, #0]
   85836:	2a1b      	cmp	r2, #27
   85838:	f8ca 1008 	str.w	r1, [sl, #8]
   8583c:	6861      	ldr	r1, [r4, #4]
   8583e:	f8ca 100c 	str.w	r1, [sl, #12]
   85842:	f200 80b2 	bhi.w	859aa <_realloc_r+0x33a>
   85846:	3408      	adds	r4, #8
   85848:	f10a 0210 	add.w	r2, sl, #16
   8584c:	6821      	ldr	r1, [r4, #0]
   8584e:	461d      	mov	r5, r3
   85850:	6011      	str	r1, [r2, #0]
   85852:	6861      	ldr	r1, [r4, #4]
   85854:	4657      	mov	r7, sl
   85856:	6051      	str	r1, [r2, #4]
   85858:	68a3      	ldr	r3, [r4, #8]
   8585a:	6093      	str	r3, [r2, #8]
   8585c:	f8da 3004 	ldr.w	r3, [sl, #4]
   85860:	e774      	b.n	8574c <_realloc_r+0xdc>
   85862:	6823      	ldr	r3, [r4, #0]
   85864:	2a1b      	cmp	r2, #27
   85866:	6003      	str	r3, [r0, #0]
   85868:	6863      	ldr	r3, [r4, #4]
   8586a:	6043      	str	r3, [r0, #4]
   8586c:	d862      	bhi.n	85934 <_realloc_r+0x2c4>
   8586e:	f100 0308 	add.w	r3, r0, #8
   85872:	f104 0208 	add.w	r2, r4, #8
   85876:	e7b3      	b.n	857e0 <_realloc_r+0x170>
   85878:	4643      	mov	r3, r8
   8587a:	6822      	ldr	r2, [r4, #0]
   8587c:	4675      	mov	r5, lr
   8587e:	601a      	str	r2, [r3, #0]
   85880:	6862      	ldr	r2, [r4, #4]
   85882:	4657      	mov	r7, sl
   85884:	605a      	str	r2, [r3, #4]
   85886:	68a2      	ldr	r2, [r4, #8]
   85888:	609a      	str	r2, [r3, #8]
   8588a:	f8da 3004 	ldr.w	r3, [sl, #4]
   8588e:	e75d      	b.n	8574c <_realloc_r+0xdc>
   85890:	1b83      	subs	r3, r0, r6
   85892:	4437      	add	r7, r6
   85894:	f043 0301 	orr.w	r3, r3, #1
   85898:	f8cb 7008 	str.w	r7, [fp, #8]
   8589c:	607b      	str	r3, [r7, #4]
   8589e:	f854 3c04 	ldr.w	r3, [r4, #-4]
   858a2:	4648      	mov	r0, r9
   858a4:	f003 0301 	and.w	r3, r3, #1
   858a8:	431e      	orrs	r6, r3
   858aa:	f844 6c04 	str.w	r6, [r4, #-4]
   858ae:	f7ff fedd 	bl	8566c <__malloc_unlock>
   858b2:	4620      	mov	r0, r4
   858b4:	e75a      	b.n	8576c <_realloc_r+0xfc>
   858b6:	4621      	mov	r1, r4
   858b8:	f7ff fe70 	bl	8559c <memmove>
   858bc:	e796      	b.n	857ec <_realloc_r+0x17c>
   858be:	eb02 0c03 	add.w	ip, r2, r3
   858c2:	f106 0210 	add.w	r2, r6, #16
   858c6:	4594      	cmp	ip, r2
   858c8:	f6ff af70 	blt.w	857ac <_realloc_r+0x13c>
   858cc:	4657      	mov	r7, sl
   858ce:	f857 1f08 	ldr.w	r1, [r7, #8]!
   858d2:	f8da 300c 	ldr.w	r3, [sl, #12]
   858d6:	1f2a      	subs	r2, r5, #4
   858d8:	2a24      	cmp	r2, #36	; 0x24
   858da:	60cb      	str	r3, [r1, #12]
   858dc:	6099      	str	r1, [r3, #8]
   858de:	f200 8086 	bhi.w	859ee <_realloc_r+0x37e>
   858e2:	2a13      	cmp	r2, #19
   858e4:	d977      	bls.n	859d6 <_realloc_r+0x366>
   858e6:	6823      	ldr	r3, [r4, #0]
   858e8:	2a1b      	cmp	r2, #27
   858ea:	f8ca 3008 	str.w	r3, [sl, #8]
   858ee:	6863      	ldr	r3, [r4, #4]
   858f0:	f8ca 300c 	str.w	r3, [sl, #12]
   858f4:	f200 8084 	bhi.w	85a00 <_realloc_r+0x390>
   858f8:	3408      	adds	r4, #8
   858fa:	f10a 0310 	add.w	r3, sl, #16
   858fe:	6822      	ldr	r2, [r4, #0]
   85900:	601a      	str	r2, [r3, #0]
   85902:	6862      	ldr	r2, [r4, #4]
   85904:	605a      	str	r2, [r3, #4]
   85906:	68a2      	ldr	r2, [r4, #8]
   85908:	609a      	str	r2, [r3, #8]
   8590a:	ebc6 020c 	rsb	r2, r6, ip
   8590e:	eb0a 0306 	add.w	r3, sl, r6
   85912:	f042 0201 	orr.w	r2, r2, #1
   85916:	f8cb 3008 	str.w	r3, [fp, #8]
   8591a:	605a      	str	r2, [r3, #4]
   8591c:	f8da 3004 	ldr.w	r3, [sl, #4]
   85920:	4648      	mov	r0, r9
   85922:	f003 0301 	and.w	r3, r3, #1
   85926:	431e      	orrs	r6, r3
   85928:	f8ca 6004 	str.w	r6, [sl, #4]
   8592c:	f7ff fe9e 	bl	8566c <__malloc_unlock>
   85930:	4638      	mov	r0, r7
   85932:	e71b      	b.n	8576c <_realloc_r+0xfc>
   85934:	68a3      	ldr	r3, [r4, #8]
   85936:	2a24      	cmp	r2, #36	; 0x24
   85938:	6083      	str	r3, [r0, #8]
   8593a:	68e3      	ldr	r3, [r4, #12]
   8593c:	60c3      	str	r3, [r0, #12]
   8593e:	d02b      	beq.n	85998 <_realloc_r+0x328>
   85940:	f100 0310 	add.w	r3, r0, #16
   85944:	f104 0210 	add.w	r2, r4, #16
   85948:	e74a      	b.n	857e0 <_realloc_r+0x170>
   8594a:	f850 2c04 	ldr.w	r2, [r0, #-4]
   8594e:	46a0      	mov	r8, r4
   85950:	f022 0203 	bic.w	r2, r2, #3
   85954:	4415      	add	r5, r2
   85956:	e6f9      	b.n	8574c <_realloc_r+0xdc>
   85958:	4621      	mov	r1, r4
   8595a:	4640      	mov	r0, r8
   8595c:	4675      	mov	r5, lr
   8595e:	4657      	mov	r7, sl
   85960:	f7ff fe1c 	bl	8559c <memmove>
   85964:	f8da 3004 	ldr.w	r3, [sl, #4]
   85968:	e6f0      	b.n	8574c <_realloc_r+0xdc>
   8596a:	4642      	mov	r2, r8
   8596c:	e76e      	b.n	8584c <_realloc_r+0x1dc>
   8596e:	4621      	mov	r1, r4
   85970:	4640      	mov	r0, r8
   85972:	461d      	mov	r5, r3
   85974:	4657      	mov	r7, sl
   85976:	f7ff fe11 	bl	8559c <memmove>
   8597a:	f8da 3004 	ldr.w	r3, [sl, #4]
   8597e:	e6e5      	b.n	8574c <_realloc_r+0xdc>
   85980:	68a3      	ldr	r3, [r4, #8]
   85982:	2a24      	cmp	r2, #36	; 0x24
   85984:	f8ca 3010 	str.w	r3, [sl, #16]
   85988:	68e3      	ldr	r3, [r4, #12]
   8598a:	f8ca 3014 	str.w	r3, [sl, #20]
   8598e:	d018      	beq.n	859c2 <_realloc_r+0x352>
   85990:	3410      	adds	r4, #16
   85992:	f10a 0318 	add.w	r3, sl, #24
   85996:	e770      	b.n	8587a <_realloc_r+0x20a>
   85998:	6922      	ldr	r2, [r4, #16]
   8599a:	f100 0318 	add.w	r3, r0, #24
   8599e:	6102      	str	r2, [r0, #16]
   859a0:	6961      	ldr	r1, [r4, #20]
   859a2:	f104 0218 	add.w	r2, r4, #24
   859a6:	6141      	str	r1, [r0, #20]
   859a8:	e71a      	b.n	857e0 <_realloc_r+0x170>
   859aa:	68a1      	ldr	r1, [r4, #8]
   859ac:	2a24      	cmp	r2, #36	; 0x24
   859ae:	f8ca 1010 	str.w	r1, [sl, #16]
   859b2:	68e1      	ldr	r1, [r4, #12]
   859b4:	f8ca 1014 	str.w	r1, [sl, #20]
   859b8:	d00f      	beq.n	859da <_realloc_r+0x36a>
   859ba:	3410      	adds	r4, #16
   859bc:	f10a 0218 	add.w	r2, sl, #24
   859c0:	e744      	b.n	8584c <_realloc_r+0x1dc>
   859c2:	6922      	ldr	r2, [r4, #16]
   859c4:	f10a 0320 	add.w	r3, sl, #32
   859c8:	f8ca 2018 	str.w	r2, [sl, #24]
   859cc:	6962      	ldr	r2, [r4, #20]
   859ce:	3418      	adds	r4, #24
   859d0:	f8ca 201c 	str.w	r2, [sl, #28]
   859d4:	e751      	b.n	8587a <_realloc_r+0x20a>
   859d6:	463b      	mov	r3, r7
   859d8:	e791      	b.n	858fe <_realloc_r+0x28e>
   859da:	6921      	ldr	r1, [r4, #16]
   859dc:	f10a 0220 	add.w	r2, sl, #32
   859e0:	f8ca 1018 	str.w	r1, [sl, #24]
   859e4:	6961      	ldr	r1, [r4, #20]
   859e6:	3418      	adds	r4, #24
   859e8:	f8ca 101c 	str.w	r1, [sl, #28]
   859ec:	e72e      	b.n	8584c <_realloc_r+0x1dc>
   859ee:	4621      	mov	r1, r4
   859f0:	4638      	mov	r0, r7
   859f2:	f8cd c004 	str.w	ip, [sp, #4]
   859f6:	f7ff fdd1 	bl	8559c <memmove>
   859fa:	f8dd c004 	ldr.w	ip, [sp, #4]
   859fe:	e784      	b.n	8590a <_realloc_r+0x29a>
   85a00:	68a3      	ldr	r3, [r4, #8]
   85a02:	2a24      	cmp	r2, #36	; 0x24
   85a04:	f8ca 3010 	str.w	r3, [sl, #16]
   85a08:	68e3      	ldr	r3, [r4, #12]
   85a0a:	f8ca 3014 	str.w	r3, [sl, #20]
   85a0e:	d003      	beq.n	85a18 <_realloc_r+0x3a8>
   85a10:	3410      	adds	r4, #16
   85a12:	f10a 0318 	add.w	r3, sl, #24
   85a16:	e772      	b.n	858fe <_realloc_r+0x28e>
   85a18:	6922      	ldr	r2, [r4, #16]
   85a1a:	f10a 0320 	add.w	r3, sl, #32
   85a1e:	f8ca 2018 	str.w	r2, [sl, #24]
   85a22:	6962      	ldr	r2, [r4, #20]
   85a24:	3418      	adds	r4, #24
   85a26:	f8ca 201c 	str.w	r2, [sl, #28]
   85a2a:	e768      	b.n	858fe <_realloc_r+0x28e>
   85a2c:	20070590 	.word	0x20070590

00085a30 <_sbrk_r>:
   85a30:	b538      	push	{r3, r4, r5, lr}
   85a32:	4c07      	ldr	r4, [pc, #28]	; (85a50 <_sbrk_r+0x20>)
   85a34:	2300      	movs	r3, #0
   85a36:	4605      	mov	r5, r0
   85a38:	4608      	mov	r0, r1
   85a3a:	6023      	str	r3, [r4, #0]
   85a3c:	f7fc ffb4 	bl	829a8 <_sbrk>
   85a40:	1c43      	adds	r3, r0, #1
   85a42:	d000      	beq.n	85a46 <_sbrk_r+0x16>
   85a44:	bd38      	pop	{r3, r4, r5, pc}
   85a46:	6823      	ldr	r3, [r4, #0]
   85a48:	2b00      	cmp	r3, #0
   85a4a:	d0fb      	beq.n	85a44 <_sbrk_r+0x14>
   85a4c:	602b      	str	r3, [r5, #0]
   85a4e:	bd38      	pop	{r3, r4, r5, pc}
   85a50:	20078c84 	.word	0x20078c84

00085a54 <__sread>:
   85a54:	b510      	push	{r4, lr}
   85a56:	460c      	mov	r4, r1
   85a58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   85a5c:	f000 f9c2 	bl	85de4 <_read_r>
   85a60:	2800      	cmp	r0, #0
   85a62:	db03      	blt.n	85a6c <__sread+0x18>
   85a64:	6d23      	ldr	r3, [r4, #80]	; 0x50
   85a66:	4403      	add	r3, r0
   85a68:	6523      	str	r3, [r4, #80]	; 0x50
   85a6a:	bd10      	pop	{r4, pc}
   85a6c:	89a3      	ldrh	r3, [r4, #12]
   85a6e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   85a72:	81a3      	strh	r3, [r4, #12]
   85a74:	bd10      	pop	{r4, pc}
   85a76:	bf00      	nop

00085a78 <__swrite>:
   85a78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   85a7c:	460c      	mov	r4, r1
   85a7e:	8989      	ldrh	r1, [r1, #12]
   85a80:	461d      	mov	r5, r3
   85a82:	05cb      	lsls	r3, r1, #23
   85a84:	4616      	mov	r6, r2
   85a86:	4607      	mov	r7, r0
   85a88:	d506      	bpl.n	85a98 <__swrite+0x20>
   85a8a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   85a8e:	2200      	movs	r2, #0
   85a90:	2302      	movs	r3, #2
   85a92:	f000 f993 	bl	85dbc <_lseek_r>
   85a96:	89a1      	ldrh	r1, [r4, #12]
   85a98:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
   85a9c:	81a1      	strh	r1, [r4, #12]
   85a9e:	4638      	mov	r0, r7
   85aa0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   85aa4:	4632      	mov	r2, r6
   85aa6:	462b      	mov	r3, r5
   85aa8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   85aac:	f000 b89e 	b.w	85bec <_write_r>

00085ab0 <__sseek>:
   85ab0:	b510      	push	{r4, lr}
   85ab2:	460c      	mov	r4, r1
   85ab4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   85ab8:	f000 f980 	bl	85dbc <_lseek_r>
   85abc:	89a3      	ldrh	r3, [r4, #12]
   85abe:	1c42      	adds	r2, r0, #1
   85ac0:	bf0e      	itee	eq
   85ac2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   85ac6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   85aca:	6520      	strne	r0, [r4, #80]	; 0x50
   85acc:	81a3      	strh	r3, [r4, #12]
   85ace:	bd10      	pop	{r4, pc}

00085ad0 <__sclose>:
   85ad0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   85ad4:	f000 b8f2 	b.w	85cbc <_close_r>

00085ad8 <__swbuf_r>:
   85ad8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   85ada:	460d      	mov	r5, r1
   85adc:	4614      	mov	r4, r2
   85ade:	4607      	mov	r7, r0
   85ae0:	b110      	cbz	r0, 85ae8 <__swbuf_r+0x10>
   85ae2:	6b83      	ldr	r3, [r0, #56]	; 0x38
   85ae4:	2b00      	cmp	r3, #0
   85ae6:	d048      	beq.n	85b7a <__swbuf_r+0xa2>
   85ae8:	89a2      	ldrh	r2, [r4, #12]
   85aea:	69a0      	ldr	r0, [r4, #24]
   85aec:	b293      	uxth	r3, r2
   85aee:	60a0      	str	r0, [r4, #8]
   85af0:	0718      	lsls	r0, r3, #28
   85af2:	d538      	bpl.n	85b66 <__swbuf_r+0x8e>
   85af4:	6926      	ldr	r6, [r4, #16]
   85af6:	2e00      	cmp	r6, #0
   85af8:	d035      	beq.n	85b66 <__swbuf_r+0x8e>
   85afa:	0499      	lsls	r1, r3, #18
   85afc:	b2ed      	uxtb	r5, r5
   85afe:	d515      	bpl.n	85b2c <__swbuf_r+0x54>
   85b00:	6823      	ldr	r3, [r4, #0]
   85b02:	6962      	ldr	r2, [r4, #20]
   85b04:	1b9e      	subs	r6, r3, r6
   85b06:	4296      	cmp	r6, r2
   85b08:	da1c      	bge.n	85b44 <__swbuf_r+0x6c>
   85b0a:	3601      	adds	r6, #1
   85b0c:	68a2      	ldr	r2, [r4, #8]
   85b0e:	1c59      	adds	r1, r3, #1
   85b10:	3a01      	subs	r2, #1
   85b12:	60a2      	str	r2, [r4, #8]
   85b14:	6021      	str	r1, [r4, #0]
   85b16:	701d      	strb	r5, [r3, #0]
   85b18:	6963      	ldr	r3, [r4, #20]
   85b1a:	42b3      	cmp	r3, r6
   85b1c:	d01a      	beq.n	85b54 <__swbuf_r+0x7c>
   85b1e:	89a3      	ldrh	r3, [r4, #12]
   85b20:	07db      	lsls	r3, r3, #31
   85b22:	d501      	bpl.n	85b28 <__swbuf_r+0x50>
   85b24:	2d0a      	cmp	r5, #10
   85b26:	d015      	beq.n	85b54 <__swbuf_r+0x7c>
   85b28:	4628      	mov	r0, r5
   85b2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   85b2c:	6e63      	ldr	r3, [r4, #100]	; 0x64
   85b2e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   85b32:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   85b36:	6663      	str	r3, [r4, #100]	; 0x64
   85b38:	6823      	ldr	r3, [r4, #0]
   85b3a:	81a2      	strh	r2, [r4, #12]
   85b3c:	6962      	ldr	r2, [r4, #20]
   85b3e:	1b9e      	subs	r6, r3, r6
   85b40:	4296      	cmp	r6, r2
   85b42:	dbe2      	blt.n	85b0a <__swbuf_r+0x32>
   85b44:	4638      	mov	r0, r7
   85b46:	4621      	mov	r1, r4
   85b48:	f7fe fde4 	bl	84714 <_fflush_r>
   85b4c:	b940      	cbnz	r0, 85b60 <__swbuf_r+0x88>
   85b4e:	6823      	ldr	r3, [r4, #0]
   85b50:	2601      	movs	r6, #1
   85b52:	e7db      	b.n	85b0c <__swbuf_r+0x34>
   85b54:	4638      	mov	r0, r7
   85b56:	4621      	mov	r1, r4
   85b58:	f7fe fddc 	bl	84714 <_fflush_r>
   85b5c:	2800      	cmp	r0, #0
   85b5e:	d0e3      	beq.n	85b28 <__swbuf_r+0x50>
   85b60:	f04f 30ff 	mov.w	r0, #4294967295
   85b64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   85b66:	4638      	mov	r0, r7
   85b68:	4621      	mov	r1, r4
   85b6a:	f7fe fcbd 	bl	844e8 <__swsetup_r>
   85b6e:	2800      	cmp	r0, #0
   85b70:	d1f6      	bne.n	85b60 <__swbuf_r+0x88>
   85b72:	89a2      	ldrh	r2, [r4, #12]
   85b74:	6926      	ldr	r6, [r4, #16]
   85b76:	b293      	uxth	r3, r2
   85b78:	e7bf      	b.n	85afa <__swbuf_r+0x22>
   85b7a:	f7fe fde7 	bl	8474c <__sinit>
   85b7e:	e7b3      	b.n	85ae8 <__swbuf_r+0x10>

00085b80 <_wcrtomb_r>:
   85b80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   85b84:	461e      	mov	r6, r3
   85b86:	b086      	sub	sp, #24
   85b88:	460c      	mov	r4, r1
   85b8a:	4605      	mov	r5, r0
   85b8c:	4617      	mov	r7, r2
   85b8e:	4b0f      	ldr	r3, [pc, #60]	; (85bcc <_wcrtomb_r+0x4c>)
   85b90:	b191      	cbz	r1, 85bb8 <_wcrtomb_r+0x38>
   85b92:	f8d3 8000 	ldr.w	r8, [r3]
   85b96:	f7ff f999 	bl	84ecc <__locale_charset>
   85b9a:	9600      	str	r6, [sp, #0]
   85b9c:	4603      	mov	r3, r0
   85b9e:	4621      	mov	r1, r4
   85ba0:	463a      	mov	r2, r7
   85ba2:	4628      	mov	r0, r5
   85ba4:	47c0      	blx	r8
   85ba6:	1c43      	adds	r3, r0, #1
   85ba8:	d103      	bne.n	85bb2 <_wcrtomb_r+0x32>
   85baa:	2200      	movs	r2, #0
   85bac:	238a      	movs	r3, #138	; 0x8a
   85bae:	6032      	str	r2, [r6, #0]
   85bb0:	602b      	str	r3, [r5, #0]
   85bb2:	b006      	add	sp, #24
   85bb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   85bb8:	681f      	ldr	r7, [r3, #0]
   85bba:	f7ff f987 	bl	84ecc <__locale_charset>
   85bbe:	9600      	str	r6, [sp, #0]
   85bc0:	4603      	mov	r3, r0
   85bc2:	4622      	mov	r2, r4
   85bc4:	4628      	mov	r0, r5
   85bc6:	a903      	add	r1, sp, #12
   85bc8:	47b8      	blx	r7
   85bca:	e7ec      	b.n	85ba6 <_wcrtomb_r+0x26>
   85bcc:	200709a0 	.word	0x200709a0

00085bd0 <__ascii_wctomb>:
   85bd0:	b121      	cbz	r1, 85bdc <__ascii_wctomb+0xc>
   85bd2:	2aff      	cmp	r2, #255	; 0xff
   85bd4:	d804      	bhi.n	85be0 <__ascii_wctomb+0x10>
   85bd6:	700a      	strb	r2, [r1, #0]
   85bd8:	2001      	movs	r0, #1
   85bda:	4770      	bx	lr
   85bdc:	4608      	mov	r0, r1
   85bde:	4770      	bx	lr
   85be0:	238a      	movs	r3, #138	; 0x8a
   85be2:	6003      	str	r3, [r0, #0]
   85be4:	f04f 30ff 	mov.w	r0, #4294967295
   85be8:	4770      	bx	lr
   85bea:	bf00      	nop

00085bec <_write_r>:
   85bec:	b570      	push	{r4, r5, r6, lr}
   85bee:	4c08      	ldr	r4, [pc, #32]	; (85c10 <_write_r+0x24>)
   85bf0:	4606      	mov	r6, r0
   85bf2:	2500      	movs	r5, #0
   85bf4:	4608      	mov	r0, r1
   85bf6:	4611      	mov	r1, r2
   85bf8:	461a      	mov	r2, r3
   85bfa:	6025      	str	r5, [r4, #0]
   85bfc:	f7fc fa22 	bl	82044 <_write>
   85c00:	1c43      	adds	r3, r0, #1
   85c02:	d000      	beq.n	85c06 <_write_r+0x1a>
   85c04:	bd70      	pop	{r4, r5, r6, pc}
   85c06:	6823      	ldr	r3, [r4, #0]
   85c08:	2b00      	cmp	r3, #0
   85c0a:	d0fb      	beq.n	85c04 <_write_r+0x18>
   85c0c:	6033      	str	r3, [r6, #0]
   85c0e:	bd70      	pop	{r4, r5, r6, pc}
   85c10:	20078c84 	.word	0x20078c84

00085c14 <__register_exitproc>:
   85c14:	b5f0      	push	{r4, r5, r6, r7, lr}
   85c16:	4c27      	ldr	r4, [pc, #156]	; (85cb4 <__register_exitproc+0xa0>)
   85c18:	b085      	sub	sp, #20
   85c1a:	6826      	ldr	r6, [r4, #0]
   85c1c:	4607      	mov	r7, r0
   85c1e:	f8d6 4148 	ldr.w	r4, [r6, #328]	; 0x148
   85c22:	2c00      	cmp	r4, #0
   85c24:	d040      	beq.n	85ca8 <__register_exitproc+0x94>
   85c26:	6865      	ldr	r5, [r4, #4]
   85c28:	2d1f      	cmp	r5, #31
   85c2a:	dd1e      	ble.n	85c6a <__register_exitproc+0x56>
   85c2c:	4822      	ldr	r0, [pc, #136]	; (85cb8 <__register_exitproc+0xa4>)
   85c2e:	b918      	cbnz	r0, 85c38 <__register_exitproc+0x24>
   85c30:	f04f 30ff 	mov.w	r0, #4294967295
   85c34:	b005      	add	sp, #20
   85c36:	bdf0      	pop	{r4, r5, r6, r7, pc}
   85c38:	f44f 70c8 	mov.w	r0, #400	; 0x190
   85c3c:	9103      	str	r1, [sp, #12]
   85c3e:	9202      	str	r2, [sp, #8]
   85c40:	9301      	str	r3, [sp, #4]
   85c42:	f7ff f9bd 	bl	84fc0 <malloc>
   85c46:	9903      	ldr	r1, [sp, #12]
   85c48:	4604      	mov	r4, r0
   85c4a:	9a02      	ldr	r2, [sp, #8]
   85c4c:	9b01      	ldr	r3, [sp, #4]
   85c4e:	2800      	cmp	r0, #0
   85c50:	d0ee      	beq.n	85c30 <__register_exitproc+0x1c>
   85c52:	f8d6 5148 	ldr.w	r5, [r6, #328]	; 0x148
   85c56:	2000      	movs	r0, #0
   85c58:	6025      	str	r5, [r4, #0]
   85c5a:	6060      	str	r0, [r4, #4]
   85c5c:	4605      	mov	r5, r0
   85c5e:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
   85c62:	f8c4 0188 	str.w	r0, [r4, #392]	; 0x188
   85c66:	f8c4 018c 	str.w	r0, [r4, #396]	; 0x18c
   85c6a:	b93f      	cbnz	r7, 85c7c <__register_exitproc+0x68>
   85c6c:	1c6b      	adds	r3, r5, #1
   85c6e:	2000      	movs	r0, #0
   85c70:	3502      	adds	r5, #2
   85c72:	6063      	str	r3, [r4, #4]
   85c74:	f844 1025 	str.w	r1, [r4, r5, lsl #2]
   85c78:	b005      	add	sp, #20
   85c7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   85c7c:	2601      	movs	r6, #1
   85c7e:	40ae      	lsls	r6, r5
   85c80:	eb04 0085 	add.w	r0, r4, r5, lsl #2
   85c84:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
   85c88:	f8d4 2188 	ldr.w	r2, [r4, #392]	; 0x188
   85c8c:	2f02      	cmp	r7, #2
   85c8e:	ea42 0206 	orr.w	r2, r2, r6
   85c92:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
   85c96:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
   85c9a:	d1e7      	bne.n	85c6c <__register_exitproc+0x58>
   85c9c:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
   85ca0:	431e      	orrs	r6, r3
   85ca2:	f8c4 618c 	str.w	r6, [r4, #396]	; 0x18c
   85ca6:	e7e1      	b.n	85c6c <__register_exitproc+0x58>
   85ca8:	f506 74a6 	add.w	r4, r6, #332	; 0x14c
   85cac:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
   85cb0:	e7b9      	b.n	85c26 <__register_exitproc+0x12>
   85cb2:	bf00      	nop
   85cb4:	00086518 	.word	0x00086518
   85cb8:	00084fc1 	.word	0x00084fc1

00085cbc <_close_r>:
   85cbc:	b538      	push	{r3, r4, r5, lr}
   85cbe:	4c07      	ldr	r4, [pc, #28]	; (85cdc <_close_r+0x20>)
   85cc0:	2300      	movs	r3, #0
   85cc2:	4605      	mov	r5, r0
   85cc4:	4608      	mov	r0, r1
   85cc6:	6023      	str	r3, [r4, #0]
   85cc8:	f7fc fe88 	bl	829dc <_close>
   85ccc:	1c43      	adds	r3, r0, #1
   85cce:	d000      	beq.n	85cd2 <_close_r+0x16>
   85cd0:	bd38      	pop	{r3, r4, r5, pc}
   85cd2:	6823      	ldr	r3, [r4, #0]
   85cd4:	2b00      	cmp	r3, #0
   85cd6:	d0fb      	beq.n	85cd0 <_close_r+0x14>
   85cd8:	602b      	str	r3, [r5, #0]
   85cda:	bd38      	pop	{r3, r4, r5, pc}
   85cdc:	20078c84 	.word	0x20078c84

00085ce0 <_fclose_r>:
   85ce0:	b570      	push	{r4, r5, r6, lr}
   85ce2:	460c      	mov	r4, r1
   85ce4:	4605      	mov	r5, r0
   85ce6:	b131      	cbz	r1, 85cf6 <_fclose_r+0x16>
   85ce8:	b110      	cbz	r0, 85cf0 <_fclose_r+0x10>
   85cea:	6b83      	ldr	r3, [r0, #56]	; 0x38
   85cec:	2b00      	cmp	r3, #0
   85cee:	d02f      	beq.n	85d50 <_fclose_r+0x70>
   85cf0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   85cf4:	b90b      	cbnz	r3, 85cfa <_fclose_r+0x1a>
   85cf6:	2000      	movs	r0, #0
   85cf8:	bd70      	pop	{r4, r5, r6, pc}
   85cfa:	4628      	mov	r0, r5
   85cfc:	4621      	mov	r1, r4
   85cfe:	f7fe fd09 	bl	84714 <_fflush_r>
   85d02:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   85d04:	4606      	mov	r6, r0
   85d06:	b133      	cbz	r3, 85d16 <_fclose_r+0x36>
   85d08:	4628      	mov	r0, r5
   85d0a:	69e1      	ldr	r1, [r4, #28]
   85d0c:	4798      	blx	r3
   85d0e:	2800      	cmp	r0, #0
   85d10:	bfb8      	it	lt
   85d12:	f04f 36ff 	movlt.w	r6, #4294967295
   85d16:	89a3      	ldrh	r3, [r4, #12]
   85d18:	061b      	lsls	r3, r3, #24
   85d1a:	d41c      	bmi.n	85d56 <_fclose_r+0x76>
   85d1c:	6b21      	ldr	r1, [r4, #48]	; 0x30
   85d1e:	b141      	cbz	r1, 85d32 <_fclose_r+0x52>
   85d20:	f104 0340 	add.w	r3, r4, #64	; 0x40
   85d24:	4299      	cmp	r1, r3
   85d26:	d002      	beq.n	85d2e <_fclose_r+0x4e>
   85d28:	4628      	mov	r0, r5
   85d2a:	f7fe fe53 	bl	849d4 <_free_r>
   85d2e:	2300      	movs	r3, #0
   85d30:	6323      	str	r3, [r4, #48]	; 0x30
   85d32:	6c61      	ldr	r1, [r4, #68]	; 0x44
   85d34:	b121      	cbz	r1, 85d40 <_fclose_r+0x60>
   85d36:	4628      	mov	r0, r5
   85d38:	f7fe fe4c 	bl	849d4 <_free_r>
   85d3c:	2300      	movs	r3, #0
   85d3e:	6463      	str	r3, [r4, #68]	; 0x44
   85d40:	f7fe fd7e 	bl	84840 <__sfp_lock_acquire>
   85d44:	2300      	movs	r3, #0
   85d46:	81a3      	strh	r3, [r4, #12]
   85d48:	f7fe fd7c 	bl	84844 <__sfp_lock_release>
   85d4c:	4630      	mov	r0, r6
   85d4e:	bd70      	pop	{r4, r5, r6, pc}
   85d50:	f7fe fcfc 	bl	8474c <__sinit>
   85d54:	e7cc      	b.n	85cf0 <_fclose_r+0x10>
   85d56:	4628      	mov	r0, r5
   85d58:	6921      	ldr	r1, [r4, #16]
   85d5a:	f7fe fe3b 	bl	849d4 <_free_r>
   85d5e:	e7dd      	b.n	85d1c <_fclose_r+0x3c>

00085d60 <fclose>:
   85d60:	4b02      	ldr	r3, [pc, #8]	; (85d6c <fclose+0xc>)
   85d62:	4601      	mov	r1, r0
   85d64:	6818      	ldr	r0, [r3, #0]
   85d66:	f7ff bfbb 	b.w	85ce0 <_fclose_r>
   85d6a:	bf00      	nop
   85d6c:	20070568 	.word	0x20070568

00085d70 <_fstat_r>:
   85d70:	b538      	push	{r3, r4, r5, lr}
   85d72:	4c08      	ldr	r4, [pc, #32]	; (85d94 <_fstat_r+0x24>)
   85d74:	2300      	movs	r3, #0
   85d76:	4605      	mov	r5, r0
   85d78:	4608      	mov	r0, r1
   85d7a:	4611      	mov	r1, r2
   85d7c:	6023      	str	r3, [r4, #0]
   85d7e:	f7fc fe31 	bl	829e4 <_fstat>
   85d82:	1c43      	adds	r3, r0, #1
   85d84:	d000      	beq.n	85d88 <_fstat_r+0x18>
   85d86:	bd38      	pop	{r3, r4, r5, pc}
   85d88:	6823      	ldr	r3, [r4, #0]
   85d8a:	2b00      	cmp	r3, #0
   85d8c:	d0fb      	beq.n	85d86 <_fstat_r+0x16>
   85d8e:	602b      	str	r3, [r5, #0]
   85d90:	bd38      	pop	{r3, r4, r5, pc}
   85d92:	bf00      	nop
   85d94:	20078c84 	.word	0x20078c84

00085d98 <_isatty_r>:
   85d98:	b538      	push	{r3, r4, r5, lr}
   85d9a:	4c07      	ldr	r4, [pc, #28]	; (85db8 <_isatty_r+0x20>)
   85d9c:	2300      	movs	r3, #0
   85d9e:	4605      	mov	r5, r0
   85da0:	4608      	mov	r0, r1
   85da2:	6023      	str	r3, [r4, #0]
   85da4:	f7fc fe24 	bl	829f0 <_isatty>
   85da8:	1c43      	adds	r3, r0, #1
   85daa:	d000      	beq.n	85dae <_isatty_r+0x16>
   85dac:	bd38      	pop	{r3, r4, r5, pc}
   85dae:	6823      	ldr	r3, [r4, #0]
   85db0:	2b00      	cmp	r3, #0
   85db2:	d0fb      	beq.n	85dac <_isatty_r+0x14>
   85db4:	602b      	str	r3, [r5, #0]
   85db6:	bd38      	pop	{r3, r4, r5, pc}
   85db8:	20078c84 	.word	0x20078c84

00085dbc <_lseek_r>:
   85dbc:	b570      	push	{r4, r5, r6, lr}
   85dbe:	4c08      	ldr	r4, [pc, #32]	; (85de0 <_lseek_r+0x24>)
   85dc0:	4606      	mov	r6, r0
   85dc2:	2500      	movs	r5, #0
   85dc4:	4608      	mov	r0, r1
   85dc6:	4611      	mov	r1, r2
   85dc8:	461a      	mov	r2, r3
   85dca:	6025      	str	r5, [r4, #0]
   85dcc:	f7fc fe12 	bl	829f4 <_lseek>
   85dd0:	1c43      	adds	r3, r0, #1
   85dd2:	d000      	beq.n	85dd6 <_lseek_r+0x1a>
   85dd4:	bd70      	pop	{r4, r5, r6, pc}
   85dd6:	6823      	ldr	r3, [r4, #0]
   85dd8:	2b00      	cmp	r3, #0
   85dda:	d0fb      	beq.n	85dd4 <_lseek_r+0x18>
   85ddc:	6033      	str	r3, [r6, #0]
   85dde:	bd70      	pop	{r4, r5, r6, pc}
   85de0:	20078c84 	.word	0x20078c84

00085de4 <_read_r>:
   85de4:	b570      	push	{r4, r5, r6, lr}
   85de6:	4c08      	ldr	r4, [pc, #32]	; (85e08 <_read_r+0x24>)
   85de8:	4606      	mov	r6, r0
   85dea:	2500      	movs	r5, #0
   85dec:	4608      	mov	r0, r1
   85dee:	4611      	mov	r1, r2
   85df0:	461a      	mov	r2, r3
   85df2:	6025      	str	r5, [r4, #0]
   85df4:	f7fa f9f2 	bl	801dc <_read>
   85df8:	1c43      	adds	r3, r0, #1
   85dfa:	d000      	beq.n	85dfe <_read_r+0x1a>
   85dfc:	bd70      	pop	{r4, r5, r6, pc}
   85dfe:	6823      	ldr	r3, [r4, #0]
   85e00:	2b00      	cmp	r3, #0
   85e02:	d0fb      	beq.n	85dfc <_read_r+0x18>
   85e04:	6033      	str	r3, [r6, #0]
   85e06:	bd70      	pop	{r4, r5, r6, pc}
   85e08:	20078c84 	.word	0x20078c84

00085e0c <__aeabi_uldivmod>:
   85e0c:	b94b      	cbnz	r3, 85e22 <__aeabi_uldivmod+0x16>
   85e0e:	b942      	cbnz	r2, 85e22 <__aeabi_uldivmod+0x16>
   85e10:	2900      	cmp	r1, #0
   85e12:	bf08      	it	eq
   85e14:	2800      	cmpeq	r0, #0
   85e16:	d002      	beq.n	85e1e <__aeabi_uldivmod+0x12>
   85e18:	f04f 31ff 	mov.w	r1, #4294967295
   85e1c:	4608      	mov	r0, r1
   85e1e:	f000 b83b 	b.w	85e98 <__aeabi_idiv0>
   85e22:	b082      	sub	sp, #8
   85e24:	46ec      	mov	ip, sp
   85e26:	e92d 5000 	stmdb	sp!, {ip, lr}
   85e2a:	f000 f81d 	bl	85e68 <__gnu_uldivmod_helper>
   85e2e:	f8dd e004 	ldr.w	lr, [sp, #4]
   85e32:	b002      	add	sp, #8
   85e34:	bc0c      	pop	{r2, r3}
   85e36:	4770      	bx	lr

00085e38 <__gnu_ldivmod_helper>:
   85e38:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
   85e3c:	9e08      	ldr	r6, [sp, #32]
   85e3e:	4614      	mov	r4, r2
   85e40:	461d      	mov	r5, r3
   85e42:	4680      	mov	r8, r0
   85e44:	4689      	mov	r9, r1
   85e46:	f000 f829 	bl	85e9c <__divdi3>
   85e4a:	fb04 f301 	mul.w	r3, r4, r1
   85e4e:	fba4 ab00 	umull	sl, fp, r4, r0
   85e52:	fb00 3205 	mla	r2, r0, r5, r3
   85e56:	4493      	add	fp, r2
   85e58:	ebb8 080a 	subs.w	r8, r8, sl
   85e5c:	eb69 090b 	sbc.w	r9, r9, fp
   85e60:	e9c6 8900 	strd	r8, r9, [r6]
   85e64:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}

00085e68 <__gnu_uldivmod_helper>:
   85e68:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
   85e6c:	9e08      	ldr	r6, [sp, #32]
   85e6e:	4614      	mov	r4, r2
   85e70:	461d      	mov	r5, r3
   85e72:	4680      	mov	r8, r0
   85e74:	4689      	mov	r9, r1
   85e76:	f000 f961 	bl	8613c <__udivdi3>
   85e7a:	fb00 f505 	mul.w	r5, r0, r5
   85e7e:	fba0 ab04 	umull	sl, fp, r0, r4
   85e82:	fb04 5401 	mla	r4, r4, r1, r5
   85e86:	44a3      	add	fp, r4
   85e88:	ebb8 080a 	subs.w	r8, r8, sl
   85e8c:	eb69 090b 	sbc.w	r9, r9, fp
   85e90:	e9c6 8900 	strd	r8, r9, [r6]
   85e94:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}

00085e98 <__aeabi_idiv0>:
   85e98:	4770      	bx	lr
   85e9a:	bf00      	nop

00085e9c <__divdi3>:
   85e9c:	2900      	cmp	r1, #0
   85e9e:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   85ea2:	f2c0 80a1 	blt.w	85fe8 <__divdi3+0x14c>
   85ea6:	2400      	movs	r4, #0
   85ea8:	2b00      	cmp	r3, #0
   85eaa:	f2c0 8098 	blt.w	85fde <__divdi3+0x142>
   85eae:	4615      	mov	r5, r2
   85eb0:	4606      	mov	r6, r0
   85eb2:	460f      	mov	r7, r1
   85eb4:	2b00      	cmp	r3, #0
   85eb6:	d13f      	bne.n	85f38 <__divdi3+0x9c>
   85eb8:	428a      	cmp	r2, r1
   85eba:	d958      	bls.n	85f6e <__divdi3+0xd2>
   85ebc:	fab2 f382 	clz	r3, r2
   85ec0:	b14b      	cbz	r3, 85ed6 <__divdi3+0x3a>
   85ec2:	f1c3 0220 	rsb	r2, r3, #32
   85ec6:	fa01 f703 	lsl.w	r7, r1, r3
   85eca:	fa20 f202 	lsr.w	r2, r0, r2
   85ece:	409d      	lsls	r5, r3
   85ed0:	fa00 f603 	lsl.w	r6, r0, r3
   85ed4:	4317      	orrs	r7, r2
   85ed6:	0c29      	lsrs	r1, r5, #16
   85ed8:	fbb7 f2f1 	udiv	r2, r7, r1
   85edc:	fb01 7712 	mls	r7, r1, r2, r7
   85ee0:	b2a8      	uxth	r0, r5
   85ee2:	fb00 f302 	mul.w	r3, r0, r2
   85ee6:	ea4f 4c16 	mov.w	ip, r6, lsr #16
   85eea:	ea4c 4707 	orr.w	r7, ip, r7, lsl #16
   85eee:	42bb      	cmp	r3, r7
   85ef0:	d909      	bls.n	85f06 <__divdi3+0x6a>
   85ef2:	197f      	adds	r7, r7, r5
   85ef4:	f102 3cff 	add.w	ip, r2, #4294967295
   85ef8:	f080 8105 	bcs.w	86106 <__divdi3+0x26a>
   85efc:	42bb      	cmp	r3, r7
   85efe:	f240 8102 	bls.w	86106 <__divdi3+0x26a>
   85f02:	3a02      	subs	r2, #2
   85f04:	442f      	add	r7, r5
   85f06:	1aff      	subs	r7, r7, r3
   85f08:	fbb7 f3f1 	udiv	r3, r7, r1
   85f0c:	fb01 7113 	mls	r1, r1, r3, r7
   85f10:	fb00 f003 	mul.w	r0, r0, r3
   85f14:	b2b6      	uxth	r6, r6
   85f16:	ea46 4101 	orr.w	r1, r6, r1, lsl #16
   85f1a:	4288      	cmp	r0, r1
   85f1c:	d908      	bls.n	85f30 <__divdi3+0x94>
   85f1e:	1949      	adds	r1, r1, r5
   85f20:	f103 37ff 	add.w	r7, r3, #4294967295
   85f24:	f080 80f1 	bcs.w	8610a <__divdi3+0x26e>
   85f28:	4288      	cmp	r0, r1
   85f2a:	f240 80ee 	bls.w	8610a <__divdi3+0x26e>
   85f2e:	3b02      	subs	r3, #2
   85f30:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   85f34:	2300      	movs	r3, #0
   85f36:	e003      	b.n	85f40 <__divdi3+0xa4>
   85f38:	428b      	cmp	r3, r1
   85f3a:	d90a      	bls.n	85f52 <__divdi3+0xb6>
   85f3c:	2300      	movs	r3, #0
   85f3e:	461a      	mov	r2, r3
   85f40:	4610      	mov	r0, r2
   85f42:	4619      	mov	r1, r3
   85f44:	b114      	cbz	r4, 85f4c <__divdi3+0xb0>
   85f46:	4240      	negs	r0, r0
   85f48:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   85f4c:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   85f50:	4770      	bx	lr
   85f52:	fab3 f883 	clz	r8, r3
   85f56:	f1b8 0f00 	cmp.w	r8, #0
   85f5a:	f040 8088 	bne.w	8606e <__divdi3+0x1d2>
   85f5e:	428b      	cmp	r3, r1
   85f60:	d302      	bcc.n	85f68 <__divdi3+0xcc>
   85f62:	4282      	cmp	r2, r0
   85f64:	f200 80e2 	bhi.w	8612c <__divdi3+0x290>
   85f68:	2300      	movs	r3, #0
   85f6a:	2201      	movs	r2, #1
   85f6c:	e7e8      	b.n	85f40 <__divdi3+0xa4>
   85f6e:	b912      	cbnz	r2, 85f76 <__divdi3+0xda>
   85f70:	2301      	movs	r3, #1
   85f72:	fbb3 f5f2 	udiv	r5, r3, r2
   85f76:	fab5 f285 	clz	r2, r5
   85f7a:	2a00      	cmp	r2, #0
   85f7c:	d13a      	bne.n	85ff4 <__divdi3+0x158>
   85f7e:	1b7f      	subs	r7, r7, r5
   85f80:	0c28      	lsrs	r0, r5, #16
   85f82:	fa1f fc85 	uxth.w	ip, r5
   85f86:	2301      	movs	r3, #1
   85f88:	fbb7 f1f0 	udiv	r1, r7, r0
   85f8c:	fb00 7711 	mls	r7, r0, r1, r7
   85f90:	fb0c f201 	mul.w	r2, ip, r1
   85f94:	ea4f 4816 	mov.w	r8, r6, lsr #16
   85f98:	ea48 4707 	orr.w	r7, r8, r7, lsl #16
   85f9c:	42ba      	cmp	r2, r7
   85f9e:	d907      	bls.n	85fb0 <__divdi3+0x114>
   85fa0:	197f      	adds	r7, r7, r5
   85fa2:	f101 38ff 	add.w	r8, r1, #4294967295
   85fa6:	d202      	bcs.n	85fae <__divdi3+0x112>
   85fa8:	42ba      	cmp	r2, r7
   85faa:	f200 80c4 	bhi.w	86136 <__divdi3+0x29a>
   85fae:	4641      	mov	r1, r8
   85fb0:	1abf      	subs	r7, r7, r2
   85fb2:	fbb7 f2f0 	udiv	r2, r7, r0
   85fb6:	fb00 7012 	mls	r0, r0, r2, r7
   85fba:	fb0c fc02 	mul.w	ip, ip, r2
   85fbe:	b2b6      	uxth	r6, r6
   85fc0:	ea46 4000 	orr.w	r0, r6, r0, lsl #16
   85fc4:	4584      	cmp	ip, r0
   85fc6:	d907      	bls.n	85fd8 <__divdi3+0x13c>
   85fc8:	1940      	adds	r0, r0, r5
   85fca:	f102 37ff 	add.w	r7, r2, #4294967295
   85fce:	d202      	bcs.n	85fd6 <__divdi3+0x13a>
   85fd0:	4584      	cmp	ip, r0
   85fd2:	f200 80ae 	bhi.w	86132 <__divdi3+0x296>
   85fd6:	463a      	mov	r2, r7
   85fd8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
   85fdc:	e7b0      	b.n	85f40 <__divdi3+0xa4>
   85fde:	43e4      	mvns	r4, r4
   85fe0:	4252      	negs	r2, r2
   85fe2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   85fe6:	e762      	b.n	85eae <__divdi3+0x12>
   85fe8:	4240      	negs	r0, r0
   85fea:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   85fee:	f04f 34ff 	mov.w	r4, #4294967295
   85ff2:	e759      	b.n	85ea8 <__divdi3+0xc>
   85ff4:	4095      	lsls	r5, r2
   85ff6:	f1c2 0920 	rsb	r9, r2, #32
   85ffa:	fa27 f109 	lsr.w	r1, r7, r9
   85ffe:	fa26 f909 	lsr.w	r9, r6, r9
   86002:	4097      	lsls	r7, r2
   86004:	0c28      	lsrs	r0, r5, #16
   86006:	fbb1 f8f0 	udiv	r8, r1, r0
   8600a:	fb00 1118 	mls	r1, r0, r8, r1
   8600e:	fa1f fc85 	uxth.w	ip, r5
   86012:	fb0c f308 	mul.w	r3, ip, r8
   86016:	ea49 0907 	orr.w	r9, r9, r7
   8601a:	ea4f 4719 	mov.w	r7, r9, lsr #16
   8601e:	ea47 4101 	orr.w	r1, r7, r1, lsl #16
   86022:	428b      	cmp	r3, r1
   86024:	fa06 f602 	lsl.w	r6, r6, r2
   86028:	d908      	bls.n	8603c <__divdi3+0x1a0>
   8602a:	1949      	adds	r1, r1, r5
   8602c:	f108 32ff 	add.w	r2, r8, #4294967295
   86030:	d27a      	bcs.n	86128 <__divdi3+0x28c>
   86032:	428b      	cmp	r3, r1
   86034:	d978      	bls.n	86128 <__divdi3+0x28c>
   86036:	f1a8 0802 	sub.w	r8, r8, #2
   8603a:	4429      	add	r1, r5
   8603c:	1ac9      	subs	r1, r1, r3
   8603e:	fbb1 f3f0 	udiv	r3, r1, r0
   86042:	fb00 1713 	mls	r7, r0, r3, r1
   86046:	fb0c f203 	mul.w	r2, ip, r3
   8604a:	fa1f f989 	uxth.w	r9, r9
   8604e:	ea49 4707 	orr.w	r7, r9, r7, lsl #16
   86052:	42ba      	cmp	r2, r7
   86054:	d907      	bls.n	86066 <__divdi3+0x1ca>
   86056:	197f      	adds	r7, r7, r5
   86058:	f103 31ff 	add.w	r1, r3, #4294967295
   8605c:	d260      	bcs.n	86120 <__divdi3+0x284>
   8605e:	42ba      	cmp	r2, r7
   86060:	d95e      	bls.n	86120 <__divdi3+0x284>
   86062:	3b02      	subs	r3, #2
   86064:	442f      	add	r7, r5
   86066:	1abf      	subs	r7, r7, r2
   86068:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
   8606c:	e78c      	b.n	85f88 <__divdi3+0xec>
   8606e:	f1c8 0220 	rsb	r2, r8, #32
   86072:	fa25 f102 	lsr.w	r1, r5, r2
   86076:	fa03 fc08 	lsl.w	ip, r3, r8
   8607a:	fa27 f302 	lsr.w	r3, r7, r2
   8607e:	fa20 f202 	lsr.w	r2, r0, r2
   86082:	fa07 f708 	lsl.w	r7, r7, r8
   86086:	ea41 0c0c 	orr.w	ip, r1, ip
   8608a:	ea4f 491c 	mov.w	r9, ip, lsr #16
   8608e:	fbb3 f1f9 	udiv	r1, r3, r9
   86092:	fb09 3311 	mls	r3, r9, r1, r3
   86096:	fa1f fa8c 	uxth.w	sl, ip
   8609a:	fb0a fb01 	mul.w	fp, sl, r1
   8609e:	4317      	orrs	r7, r2
   860a0:	0c3a      	lsrs	r2, r7, #16
   860a2:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
   860a6:	459b      	cmp	fp, r3
   860a8:	fa05 f008 	lsl.w	r0, r5, r8
   860ac:	d908      	bls.n	860c0 <__divdi3+0x224>
   860ae:	eb13 030c 	adds.w	r3, r3, ip
   860b2:	f101 32ff 	add.w	r2, r1, #4294967295
   860b6:	d235      	bcs.n	86124 <__divdi3+0x288>
   860b8:	459b      	cmp	fp, r3
   860ba:	d933      	bls.n	86124 <__divdi3+0x288>
   860bc:	3902      	subs	r1, #2
   860be:	4463      	add	r3, ip
   860c0:	ebcb 0303 	rsb	r3, fp, r3
   860c4:	fbb3 f2f9 	udiv	r2, r3, r9
   860c8:	fb09 3312 	mls	r3, r9, r2, r3
   860cc:	fb0a fa02 	mul.w	sl, sl, r2
   860d0:	b2bf      	uxth	r7, r7
   860d2:	ea47 4703 	orr.w	r7, r7, r3, lsl #16
   860d6:	45ba      	cmp	sl, r7
   860d8:	d908      	bls.n	860ec <__divdi3+0x250>
   860da:	eb17 070c 	adds.w	r7, r7, ip
   860de:	f102 33ff 	add.w	r3, r2, #4294967295
   860e2:	d21b      	bcs.n	8611c <__divdi3+0x280>
   860e4:	45ba      	cmp	sl, r7
   860e6:	d919      	bls.n	8611c <__divdi3+0x280>
   860e8:	3a02      	subs	r2, #2
   860ea:	4467      	add	r7, ip
   860ec:	ea42 4501 	orr.w	r5, r2, r1, lsl #16
   860f0:	fba5 0100 	umull	r0, r1, r5, r0
   860f4:	ebca 0707 	rsb	r7, sl, r7
   860f8:	428f      	cmp	r7, r1
   860fa:	f04f 0300 	mov.w	r3, #0
   860fe:	d30a      	bcc.n	86116 <__divdi3+0x27a>
   86100:	d005      	beq.n	8610e <__divdi3+0x272>
   86102:	462a      	mov	r2, r5
   86104:	e71c      	b.n	85f40 <__divdi3+0xa4>
   86106:	4662      	mov	r2, ip
   86108:	e6fd      	b.n	85f06 <__divdi3+0x6a>
   8610a:	463b      	mov	r3, r7
   8610c:	e710      	b.n	85f30 <__divdi3+0x94>
   8610e:	fa06 f608 	lsl.w	r6, r6, r8
   86112:	4286      	cmp	r6, r0
   86114:	d2f5      	bcs.n	86102 <__divdi3+0x266>
   86116:	1e6a      	subs	r2, r5, #1
   86118:	2300      	movs	r3, #0
   8611a:	e711      	b.n	85f40 <__divdi3+0xa4>
   8611c:	461a      	mov	r2, r3
   8611e:	e7e5      	b.n	860ec <__divdi3+0x250>
   86120:	460b      	mov	r3, r1
   86122:	e7a0      	b.n	86066 <__divdi3+0x1ca>
   86124:	4611      	mov	r1, r2
   86126:	e7cb      	b.n	860c0 <__divdi3+0x224>
   86128:	4690      	mov	r8, r2
   8612a:	e787      	b.n	8603c <__divdi3+0x1a0>
   8612c:	4643      	mov	r3, r8
   8612e:	4642      	mov	r2, r8
   86130:	e706      	b.n	85f40 <__divdi3+0xa4>
   86132:	3a02      	subs	r2, #2
   86134:	e750      	b.n	85fd8 <__divdi3+0x13c>
   86136:	3902      	subs	r1, #2
   86138:	442f      	add	r7, r5
   8613a:	e739      	b.n	85fb0 <__divdi3+0x114>

0008613c <__udivdi3>:
   8613c:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   86140:	4614      	mov	r4, r2
   86142:	4605      	mov	r5, r0
   86144:	460e      	mov	r6, r1
   86146:	2b00      	cmp	r3, #0
   86148:	d143      	bne.n	861d2 <__udivdi3+0x96>
   8614a:	428a      	cmp	r2, r1
   8614c:	d953      	bls.n	861f6 <__udivdi3+0xba>
   8614e:	fab2 f782 	clz	r7, r2
   86152:	b157      	cbz	r7, 8616a <__udivdi3+0x2e>
   86154:	f1c7 0620 	rsb	r6, r7, #32
   86158:	fa20 f606 	lsr.w	r6, r0, r6
   8615c:	fa01 f307 	lsl.w	r3, r1, r7
   86160:	fa02 f407 	lsl.w	r4, r2, r7
   86164:	fa00 f507 	lsl.w	r5, r0, r7
   86168:	431e      	orrs	r6, r3
   8616a:	0c21      	lsrs	r1, r4, #16
   8616c:	fbb6 f2f1 	udiv	r2, r6, r1
   86170:	fb01 6612 	mls	r6, r1, r2, r6
   86174:	b2a0      	uxth	r0, r4
   86176:	fb00 f302 	mul.w	r3, r0, r2
   8617a:	0c2f      	lsrs	r7, r5, #16
   8617c:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
   86180:	42b3      	cmp	r3, r6
   86182:	d909      	bls.n	86198 <__udivdi3+0x5c>
   86184:	1936      	adds	r6, r6, r4
   86186:	f102 37ff 	add.w	r7, r2, #4294967295
   8618a:	f080 80fd 	bcs.w	86388 <__udivdi3+0x24c>
   8618e:	42b3      	cmp	r3, r6
   86190:	f240 80fa 	bls.w	86388 <__udivdi3+0x24c>
   86194:	3a02      	subs	r2, #2
   86196:	4426      	add	r6, r4
   86198:	1af6      	subs	r6, r6, r3
   8619a:	fbb6 f3f1 	udiv	r3, r6, r1
   8619e:	fb01 6113 	mls	r1, r1, r3, r6
   861a2:	fb00 f003 	mul.w	r0, r0, r3
   861a6:	b2ad      	uxth	r5, r5
   861a8:	ea45 4101 	orr.w	r1, r5, r1, lsl #16
   861ac:	4288      	cmp	r0, r1
   861ae:	d908      	bls.n	861c2 <__udivdi3+0x86>
   861b0:	1909      	adds	r1, r1, r4
   861b2:	f103 36ff 	add.w	r6, r3, #4294967295
   861b6:	f080 80e9 	bcs.w	8638c <__udivdi3+0x250>
   861ba:	4288      	cmp	r0, r1
   861bc:	f240 80e6 	bls.w	8638c <__udivdi3+0x250>
   861c0:	3b02      	subs	r3, #2
   861c2:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   861c6:	2300      	movs	r3, #0
   861c8:	4610      	mov	r0, r2
   861ca:	4619      	mov	r1, r3
   861cc:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   861d0:	4770      	bx	lr
   861d2:	428b      	cmp	r3, r1
   861d4:	d84c      	bhi.n	86270 <__udivdi3+0x134>
   861d6:	fab3 f683 	clz	r6, r3
   861da:	2e00      	cmp	r6, #0
   861dc:	d14f      	bne.n	8627e <__udivdi3+0x142>
   861de:	428b      	cmp	r3, r1
   861e0:	d302      	bcc.n	861e8 <__udivdi3+0xac>
   861e2:	4282      	cmp	r2, r0
   861e4:	f200 80dd 	bhi.w	863a2 <__udivdi3+0x266>
   861e8:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   861ec:	2300      	movs	r3, #0
   861ee:	2201      	movs	r2, #1
   861f0:	4610      	mov	r0, r2
   861f2:	4619      	mov	r1, r3
   861f4:	4770      	bx	lr
   861f6:	b912      	cbnz	r2, 861fe <__udivdi3+0xc2>
   861f8:	2401      	movs	r4, #1
   861fa:	fbb4 f4f2 	udiv	r4, r4, r2
   861fe:	fab4 f284 	clz	r2, r4
   86202:	2a00      	cmp	r2, #0
   86204:	f040 8082 	bne.w	8630c <__udivdi3+0x1d0>
   86208:	1b09      	subs	r1, r1, r4
   8620a:	0c26      	lsrs	r6, r4, #16
   8620c:	b2a7      	uxth	r7, r4
   8620e:	2301      	movs	r3, #1
   86210:	fbb1 f0f6 	udiv	r0, r1, r6
   86214:	fb06 1110 	mls	r1, r6, r0, r1
   86218:	fb07 f200 	mul.w	r2, r7, r0
   8621c:	ea4f 4c15 	mov.w	ip, r5, lsr #16
   86220:	ea4c 4101 	orr.w	r1, ip, r1, lsl #16
   86224:	428a      	cmp	r2, r1
   86226:	d907      	bls.n	86238 <__udivdi3+0xfc>
   86228:	1909      	adds	r1, r1, r4
   8622a:	f100 3cff 	add.w	ip, r0, #4294967295
   8622e:	d202      	bcs.n	86236 <__udivdi3+0xfa>
   86230:	428a      	cmp	r2, r1
   86232:	f200 80c8 	bhi.w	863c6 <__udivdi3+0x28a>
   86236:	4660      	mov	r0, ip
   86238:	1a89      	subs	r1, r1, r2
   8623a:	fbb1 f2f6 	udiv	r2, r1, r6
   8623e:	fb06 1112 	mls	r1, r6, r2, r1
   86242:	fb07 f702 	mul.w	r7, r7, r2
   86246:	b2ad      	uxth	r5, r5
   86248:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
   8624c:	42af      	cmp	r7, r5
   8624e:	d908      	bls.n	86262 <__udivdi3+0x126>
   86250:	192c      	adds	r4, r5, r4
   86252:	f102 31ff 	add.w	r1, r2, #4294967295
   86256:	f080 809b 	bcs.w	86390 <__udivdi3+0x254>
   8625a:	42a7      	cmp	r7, r4
   8625c:	f240 8098 	bls.w	86390 <__udivdi3+0x254>
   86260:	3a02      	subs	r2, #2
   86262:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
   86266:	4610      	mov	r0, r2
   86268:	4619      	mov	r1, r3
   8626a:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   8626e:	4770      	bx	lr
   86270:	2300      	movs	r3, #0
   86272:	461a      	mov	r2, r3
   86274:	4610      	mov	r0, r2
   86276:	4619      	mov	r1, r3
   86278:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   8627c:	4770      	bx	lr
   8627e:	f1c6 0520 	rsb	r5, r6, #32
   86282:	fa22 f705 	lsr.w	r7, r2, r5
   86286:	fa03 f406 	lsl.w	r4, r3, r6
   8628a:	fa21 f305 	lsr.w	r3, r1, r5
   8628e:	fa01 fb06 	lsl.w	fp, r1, r6
   86292:	fa20 f505 	lsr.w	r5, r0, r5
   86296:	433c      	orrs	r4, r7
   86298:	ea4f 4814 	mov.w	r8, r4, lsr #16
   8629c:	fbb3 fcf8 	udiv	ip, r3, r8
   862a0:	fb08 331c 	mls	r3, r8, ip, r3
   862a4:	fa1f f984 	uxth.w	r9, r4
   862a8:	fb09 fa0c 	mul.w	sl, r9, ip
   862ac:	ea45 0b0b 	orr.w	fp, r5, fp
   862b0:	ea4f 451b 	mov.w	r5, fp, lsr #16
   862b4:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
   862b8:	459a      	cmp	sl, r3
   862ba:	fa02 f206 	lsl.w	r2, r2, r6
   862be:	d904      	bls.n	862ca <__udivdi3+0x18e>
   862c0:	191b      	adds	r3, r3, r4
   862c2:	f10c 35ff 	add.w	r5, ip, #4294967295
   862c6:	d36f      	bcc.n	863a8 <__udivdi3+0x26c>
   862c8:	46ac      	mov	ip, r5
   862ca:	ebca 0303 	rsb	r3, sl, r3
   862ce:	fbb3 f5f8 	udiv	r5, r3, r8
   862d2:	fb08 3315 	mls	r3, r8, r5, r3
   862d6:	fb09 f905 	mul.w	r9, r9, r5
   862da:	fa1f fb8b 	uxth.w	fp, fp
   862de:	ea4b 4703 	orr.w	r7, fp, r3, lsl #16
   862e2:	45b9      	cmp	r9, r7
   862e4:	d904      	bls.n	862f0 <__udivdi3+0x1b4>
   862e6:	193f      	adds	r7, r7, r4
   862e8:	f105 33ff 	add.w	r3, r5, #4294967295
   862ec:	d362      	bcc.n	863b4 <__udivdi3+0x278>
   862ee:	461d      	mov	r5, r3
   862f0:	ea45 4c0c 	orr.w	ip, r5, ip, lsl #16
   862f4:	fbac 2302 	umull	r2, r3, ip, r2
   862f8:	ebc9 0707 	rsb	r7, r9, r7
   862fc:	429f      	cmp	r7, r3
   862fe:	f04f 0500 	mov.w	r5, #0
   86302:	d34a      	bcc.n	8639a <__udivdi3+0x25e>
   86304:	d046      	beq.n	86394 <__udivdi3+0x258>
   86306:	4662      	mov	r2, ip
   86308:	462b      	mov	r3, r5
   8630a:	e75d      	b.n	861c8 <__udivdi3+0x8c>
   8630c:	4094      	lsls	r4, r2
   8630e:	f1c2 0920 	rsb	r9, r2, #32
   86312:	fa21 fc09 	lsr.w	ip, r1, r9
   86316:	4091      	lsls	r1, r2
   86318:	fa20 f909 	lsr.w	r9, r0, r9
   8631c:	0c26      	lsrs	r6, r4, #16
   8631e:	fbbc f8f6 	udiv	r8, ip, r6
   86322:	fb06 cc18 	mls	ip, r6, r8, ip
   86326:	b2a7      	uxth	r7, r4
   86328:	fb07 f308 	mul.w	r3, r7, r8
   8632c:	ea49 0901 	orr.w	r9, r9, r1
   86330:	ea4f 4119 	mov.w	r1, r9, lsr #16
   86334:	ea41 4c0c 	orr.w	ip, r1, ip, lsl #16
   86338:	4563      	cmp	r3, ip
   8633a:	fa00 f502 	lsl.w	r5, r0, r2
   8633e:	d909      	bls.n	86354 <__udivdi3+0x218>
   86340:	eb1c 0c04 	adds.w	ip, ip, r4
   86344:	f108 32ff 	add.w	r2, r8, #4294967295
   86348:	d23b      	bcs.n	863c2 <__udivdi3+0x286>
   8634a:	4563      	cmp	r3, ip
   8634c:	d939      	bls.n	863c2 <__udivdi3+0x286>
   8634e:	f1a8 0802 	sub.w	r8, r8, #2
   86352:	44a4      	add	ip, r4
   86354:	ebc3 0c0c 	rsb	ip, r3, ip
   86358:	fbbc f3f6 	udiv	r3, ip, r6
   8635c:	fb06 c113 	mls	r1, r6, r3, ip
   86360:	fb07 f203 	mul.w	r2, r7, r3
   86364:	fa1f f989 	uxth.w	r9, r9
   86368:	ea49 4101 	orr.w	r1, r9, r1, lsl #16
   8636c:	428a      	cmp	r2, r1
   8636e:	d907      	bls.n	86380 <__udivdi3+0x244>
   86370:	1909      	adds	r1, r1, r4
   86372:	f103 30ff 	add.w	r0, r3, #4294967295
   86376:	d222      	bcs.n	863be <__udivdi3+0x282>
   86378:	428a      	cmp	r2, r1
   8637a:	d920      	bls.n	863be <__udivdi3+0x282>
   8637c:	3b02      	subs	r3, #2
   8637e:	4421      	add	r1, r4
   86380:	1a89      	subs	r1, r1, r2
   86382:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
   86386:	e743      	b.n	86210 <__udivdi3+0xd4>
   86388:	463a      	mov	r2, r7
   8638a:	e705      	b.n	86198 <__udivdi3+0x5c>
   8638c:	4633      	mov	r3, r6
   8638e:	e718      	b.n	861c2 <__udivdi3+0x86>
   86390:	460a      	mov	r2, r1
   86392:	e766      	b.n	86262 <__udivdi3+0x126>
   86394:	40b0      	lsls	r0, r6
   86396:	4290      	cmp	r0, r2
   86398:	d2b5      	bcs.n	86306 <__udivdi3+0x1ca>
   8639a:	f10c 32ff 	add.w	r2, ip, #4294967295
   8639e:	2300      	movs	r3, #0
   863a0:	e712      	b.n	861c8 <__udivdi3+0x8c>
   863a2:	4633      	mov	r3, r6
   863a4:	4632      	mov	r2, r6
   863a6:	e70f      	b.n	861c8 <__udivdi3+0x8c>
   863a8:	459a      	cmp	sl, r3
   863aa:	d98d      	bls.n	862c8 <__udivdi3+0x18c>
   863ac:	f1ac 0c02 	sub.w	ip, ip, #2
   863b0:	4423      	add	r3, r4
   863b2:	e78a      	b.n	862ca <__udivdi3+0x18e>
   863b4:	45b9      	cmp	r9, r7
   863b6:	d99a      	bls.n	862ee <__udivdi3+0x1b2>
   863b8:	3d02      	subs	r5, #2
   863ba:	4427      	add	r7, r4
   863bc:	e798      	b.n	862f0 <__udivdi3+0x1b4>
   863be:	4603      	mov	r3, r0
   863c0:	e7de      	b.n	86380 <__udivdi3+0x244>
   863c2:	4690      	mov	r8, r2
   863c4:	e7c6      	b.n	86354 <__udivdi3+0x218>
   863c6:	3802      	subs	r0, #2
   863c8:	4421      	add	r1, r4
   863ca:	e735      	b.n	86238 <__udivdi3+0xfc>
   863cc:	6d726554 	.word	0x6d726554
   863d0:	6c616e69 	.word	0x6c616e69
   863d4:	62656420 	.word	0x62656420
   863d8:	69676775 	.word	0x69676775
   863dc:	6520676e 	.word	0x6520676e
   863e0:	6c62616e 	.word	0x6c62616e
   863e4:	000a6465 	.word	0x000a6465
   863e8:	73657250 	.word	0x73657250
   863ec:	76207465 	.word	0x76207465
   863f0:	65756c61 	.word	0x65756c61
   863f4:	000a3a73 	.word	0x000a3a73
   863f8:	203a506b 	.word	0x203a506b
   863fc:	0d0a7525 	.word	0x0d0a7525
   86400:	00000000 	.word	0x00000000
   86404:	203a496b 	.word	0x203a496b
   86408:	0d0a7525 	.word	0x0d0a7525
   8640c:	00000000 	.word	0x00000000
   86410:	203a446b 	.word	0x203a446b
   86414:	0d0a7525 	.word	0x0d0a7525
   86418:	00000000 	.word	0x00000000
   8641c:	70746553 	.word	0x70746553
   86420:	746e696f 	.word	0x746e696f
   86424:	203a6d43 	.word	0x203a6d43
   86428:	0d0a7525 	.word	0x0d0a7525
   8642c:	00000000 	.word	0x00000000
   86430:	756c6156 	.word	0x756c6156
   86434:	0a3a7365 	.word	0x0a3a7365
   86438:	00000000 	.word	0x00000000
   8643c:	0d0a6925 	.word	0x0d0a6925
   86440:	00000000 	.word	0x00000000
   86444:	09097325 	.word	0x09097325
   86448:	25096325 	.word	0x25096325
   8644c:	75250975 	.word	0x75250975
   86450:	0d752509 	.word	0x0d752509
   86454:	0000000a 	.word	0x0000000a
   86458:	454c4449 	.word	0x454c4449
   8645c:	00000000 	.word	0x00000000
   86460:	20726d54 	.word	0x20726d54
   86464:	00637653 	.word	0x00637653
   86468:	00000001 	.word	0x00000001
   8646c:	00000002 	.word	0x00000002
   86470:	00000004 	.word	0x00000004
   86474:	00000008 	.word	0x00000008
   86478:	00000010 	.word	0x00000010
   8647c:	00000020 	.word	0x00000020
   86480:	00000040 	.word	0x00000040
   86484:	00000080 	.word	0x00000080
   86488:	00000100 	.word	0x00000100
   8648c:	00000200 	.word	0x00000200
   86490:	00000400 	.word	0x00000400
   86494:	52444950 	.word	0x52444950
   86498:	6c756765 	.word	0x6c756765
   8649c:	6f697461 	.word	0x6f697461
   864a0:	0000006e 	.word	0x0000006e
   864a4:	6c696146 	.word	0x6c696146
   864a8:	74206465 	.word	0x74206465
   864ac:	7263206f 	.word	0x7263206f
   864b0:	65746165 	.word	0x65746165
   864b4:	44495020 	.word	0x44495020
   864b8:	75676552 	.word	0x75676552
   864bc:	6974616c 	.word	0x6974616c
   864c0:	61546e6f 	.word	0x61546e6f
   864c4:	0a0d6b73 	.word	0x0a0d6b73
   864c8:	00000000 	.word	0x00000000
   864cc:	69726553 	.word	0x69726553
   864d0:	6f436c61 	.word	0x6f436c61
   864d4:	7361546d 	.word	0x7361546d
   864d8:	0000006b 	.word	0x0000006b
   864dc:	6c696146 	.word	0x6c696146
   864e0:	74206465 	.word	0x74206465
   864e4:	7263206f 	.word	0x7263206f
   864e8:	65746165 	.word	0x65746165
   864ec:	72655320 	.word	0x72655320
   864f0:	436c6169 	.word	0x436c6169
   864f4:	61546d6f 	.word	0x61546d6f
   864f8:	0a0d6b73 	.word	0x0a0d6b73
   864fc:	00000000 	.word	0x00000000
   86500:	75736e49 	.word	0x75736e49
   86504:	63696666 	.word	0x63696666
   86508:	746e6569 	.word	0x746e6569
   8650c:	4d415220 	.word	0x4d415220
   86510:	00000a0d 	.word	0x00000a0d
   86514:	00000043 	.word	0x00000043

00086518 <_global_impure_ptr>:
   86518:	20070140 33323130 37363534 42413938     @.. 0123456789AB
   86528:	46454443 00000000 33323130 37363534     CDEF....01234567
   86538:	62613938 66656463 00000000 6c756e28     89abcdef....(nul
   86548:	0000296c                                l)..

0008654c <zeroes.6721>:
   8654c:	30303030 30303030 30303030 30303030     0000000000000000

0008655c <blanks.6720>:
   8655c:	20202020 20202020 20202020 20202020                     

0008656c <_init>:
   8656c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8656e:	bf00      	nop
   86570:	bcf8      	pop	{r3, r4, r5, r6, r7}
   86572:	bc08      	pop	{r3}
   86574:	469e      	mov	lr, r3
   86576:	4770      	bx	lr

00086578 <__init_array_start>:
   86578:	000845ad 	.word	0x000845ad

0008657c <__frame_dummy_init_array_entry>:
   8657c:	00080119                                ....

00086580 <_fini>:
   86580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   86582:	bf00      	nop
   86584:	bcf8      	pop	{r3, r4, r5, r6, r7}
   86586:	bc08      	pop	{r3}
   86588:	469e      	mov	lr, r3
   8658a:	4770      	bx	lr

0008658c <__fini_array_start>:
   8658c:	000800f5 	.word	0x000800f5

Disassembly of section .relocate:

20070000 <SystemInit>:
__no_inline
RAMFUNC
void SystemInit(void)
{
	/* Set FWS according to SYS_BOARD_MCKR configuration */
	EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
20070000:	f44f 6380 	mov.w	r3, #1024	; 0x400
20070004:	4a20      	ldr	r2, [pc, #128]	; (20070088 <SystemInit+0x88>)
20070006:	6013      	str	r3, [r2, #0]
	EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
20070008:	f502 7200 	add.w	r2, r2, #512	; 0x200
2007000c:	6013      	str	r3, [r2, #0]

	/* Initialize main oscillator */
	if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
2007000e:	4b1f      	ldr	r3, [pc, #124]	; (2007008c <SystemInit+0x8c>)
20070010:	6a1b      	ldr	r3, [r3, #32]
20070012:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
20070016:	d107      	bne.n	20070028 <SystemInit+0x28>
		PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070018:	4a1d      	ldr	r2, [pc, #116]	; (20070090 <SystemInit+0x90>)
2007001a:	4b1c      	ldr	r3, [pc, #112]	; (2007008c <SystemInit+0x8c>)
2007001c:	621a      	str	r2, [r3, #32]
			                     CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN;
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS)) {
2007001e:	461a      	mov	r2, r3
20070020:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070022:	f013 0f01 	tst.w	r3, #1
20070026:	d0fb      	beq.n	20070020 <SystemInit+0x20>
		}
	}

	/* Switch to 3-20MHz Xtal oscillator */
	PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070028:	4a1a      	ldr	r2, [pc, #104]	; (20070094 <SystemInit+0x94>)
2007002a:	4b18      	ldr	r3, [pc, #96]	; (2007008c <SystemInit+0x8c>)
2007002c:	621a      	str	r2, [r3, #32]
	                           CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCSEL;

	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS)) {
2007002e:	461a      	mov	r2, r3
20070030:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070032:	f413 3f80 	tst.w	r3, #65536	; 0x10000
20070036:	d0fb      	beq.n	20070030 <SystemInit+0x30>
	}
 	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | 
20070038:	4b14      	ldr	r3, [pc, #80]	; (2007008c <SystemInit+0x8c>)
2007003a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
2007003c:	f022 0203 	bic.w	r2, r2, #3
20070040:	f042 0201 	orr.w	r2, r2, #1
20070044:	631a      	str	r2, [r3, #48]	; 0x30
		                     PMC_MCKR_CSS_MAIN_CLK;
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070046:	461a      	mov	r2, r3
20070048:	6e93      	ldr	r3, [r2, #104]	; 0x68
2007004a:	f013 0f08 	tst.w	r3, #8
2007004e:	d0fb      	beq.n	20070048 <SystemInit+0x48>
	}

	/* Initialize PLLA */
	PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
20070050:	4a11      	ldr	r2, [pc, #68]	; (20070098 <SystemInit+0x98>)
20070052:	4b0e      	ldr	r3, [pc, #56]	; (2007008c <SystemInit+0x8c>)
20070054:	629a      	str	r2, [r3, #40]	; 0x28
	while (!(PMC->PMC_SR & PMC_SR_LOCKA)) {
20070056:	461a      	mov	r2, r3
20070058:	6e93      	ldr	r3, [r2, #104]	; 0x68
2007005a:	f013 0f02 	tst.w	r3, #2
2007005e:	d0fb      	beq.n	20070058 <SystemInit+0x58>
	}

	/* Switch to main clock */
	PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
20070060:	2211      	movs	r2, #17
20070062:	4b0a      	ldr	r3, [pc, #40]	; (2007008c <SystemInit+0x8c>)
20070064:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070066:	461a      	mov	r2, r3
20070068:	6e93      	ldr	r3, [r2, #104]	; 0x68
2007006a:	f013 0f08 	tst.w	r3, #8
2007006e:	d0fb      	beq.n	20070068 <SystemInit+0x68>
	}

	/* Switch to PLLA */
	PMC->PMC_MCKR = SYS_BOARD_MCKR;
20070070:	2212      	movs	r2, #18
20070072:	4b06      	ldr	r3, [pc, #24]	; (2007008c <SystemInit+0x8c>)
20070074:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070076:	461a      	mov	r2, r3
20070078:	6e93      	ldr	r3, [r2, #104]	; 0x68
2007007a:	f013 0f08 	tst.w	r3, #8
2007007e:	d0fb      	beq.n	20070078 <SystemInit+0x78>
	}

	SystemCoreClock = CHIP_FREQ_CPU_MAX;
20070080:	4a06      	ldr	r2, [pc, #24]	; (2007009c <SystemInit+0x9c>)
20070082:	4b07      	ldr	r3, [pc, #28]	; (200700a0 <SystemInit+0xa0>)
20070084:	601a      	str	r2, [r3, #0]
20070086:	4770      	bx	lr
20070088:	400e0a00 	.word	0x400e0a00
2007008c:	400e0600 	.word	0x400e0600
20070090:	00370809 	.word	0x00370809
20070094:	01370809 	.word	0x01370809
20070098:	200d3f01 	.word	0x200d3f01
2007009c:	0501bd00 	.word	0x0501bd00
200700a0:	2007013c 	.word	0x2007013c

200700a4 <system_init_flash>:
__no_inline
RAMFUNC
void system_init_flash(uint32_t ul_clk)
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
200700a4:	4b1b      	ldr	r3, [pc, #108]	; (20070114 <system_init_flash+0x70>)
200700a6:	4298      	cmp	r0, r3
200700a8:	d806      	bhi.n	200700b8 <system_init_flash+0x14>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
200700aa:	2300      	movs	r3, #0
200700ac:	4a1a      	ldr	r2, [pc, #104]	; (20070118 <system_init_flash+0x74>)
200700ae:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
200700b0:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700b4:	6013      	str	r3, [r2, #0]
200700b6:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
200700b8:	4b18      	ldr	r3, [pc, #96]	; (2007011c <system_init_flash+0x78>)
200700ba:	4298      	cmp	r0, r3
200700bc:	d807      	bhi.n	200700ce <system_init_flash+0x2a>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
200700be:	f44f 7380 	mov.w	r3, #256	; 0x100
200700c2:	4a15      	ldr	r2, [pc, #84]	; (20070118 <system_init_flash+0x74>)
200700c4:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
200700c6:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700ca:	6013      	str	r3, [r2, #0]
200700cc:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
200700ce:	4b14      	ldr	r3, [pc, #80]	; (20070120 <system_init_flash+0x7c>)
200700d0:	4298      	cmp	r0, r3
200700d2:	d807      	bhi.n	200700e4 <system_init_flash+0x40>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
200700d4:	f44f 7300 	mov.w	r3, #512	; 0x200
200700d8:	4a0f      	ldr	r2, [pc, #60]	; (20070118 <system_init_flash+0x74>)
200700da:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
200700dc:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700e0:	6013      	str	r3, [r2, #0]
200700e2:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
200700e4:	4b0f      	ldr	r3, [pc, #60]	; (20070124 <system_init_flash+0x80>)
200700e6:	4298      	cmp	r0, r3
200700e8:	d807      	bhi.n	200700fa <system_init_flash+0x56>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
200700ea:	f44f 7340 	mov.w	r3, #768	; 0x300
200700ee:	4a0a      	ldr	r2, [pc, #40]	; (20070118 <system_init_flash+0x74>)
200700f0:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
200700f2:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700f6:	6013      	str	r3, [r2, #0]
200700f8:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_4) {
200700fa:	4b0b      	ldr	r3, [pc, #44]	; (20070128 <system_init_flash+0x84>)
200700fc:	4298      	cmp	r0, r3
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
200700fe:	bf94      	ite	ls
20070100:	f44f 6380 	movls.w	r3, #1024	; 0x400
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
20070104:	f44f 63a0 	movhi.w	r3, #1280	; 0x500
20070108:	4a03      	ldr	r2, [pc, #12]	; (20070118 <system_init_flash+0x74>)
2007010a:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
2007010c:	f502 7200 	add.w	r2, r2, #512	; 0x200
20070110:	6013      	str	r3, [r2, #0]
20070112:	4770      	bx	lr
20070114:	0121eabf 	.word	0x0121eabf
20070118:	400e0a00 	.word	0x400e0a00
2007011c:	02faf07f 	.word	0x02faf07f
20070120:	03d08fff 	.word	0x03d08fff
20070124:	04c4b3ff 	.word	0x04c4b3ff
20070128:	055d4a7f 	.word	0x055d4a7f

2007012c <isMatlab>:
2007012c:	00000001                                ....

20070130 <uxCriticalNesting>:
20070130:	aaaaaaaa                                ....

20070134 <xFreeBytesRemaining>:
20070134:	00008000                                ....

20070138 <xNextTaskUnblockTime>:
20070138:	0000ffff                                ....

2007013c <SystemCoreClock>:
2007013c:	003d0900                                ..=.

20070140 <impure_data>:
20070140:	00000000 2007042c 20070494 200704fc     ....,.. ... ... 
	...
20070174:	00086514 00000000 00000000 00000000     .e..............
	...
200701e8:	00000001 00000000 abcd330e e66d1234     .........3..4.m.
200701f8:	0005deec 0000000b 00000000 00000000     ................
	...

20070568 <_impure_ptr>:
20070568:	20070140                                @.. 

2007056c <lc_ctype_charset>:
2007056c:	49435341 00000049 00000000 00000000     ASCII...........
	...

2007058c <__mb_cur_max>:
2007058c:	00000001                                ....

20070590 <__malloc_av_>:
	...
20070598:	20070590 20070590 20070598 20070598     ... ... ... ... 
200705a8:	200705a0 200705a0 200705a8 200705a8     ... ... ... ... 
200705b8:	200705b0 200705b0 200705b8 200705b8     ... ... ... ... 
200705c8:	200705c0 200705c0 200705c8 200705c8     ... ... ... ... 
200705d8:	200705d0 200705d0 200705d8 200705d8     ... ... ... ... 
200705e8:	200705e0 200705e0 200705e8 200705e8     ... ... ... ... 
200705f8:	200705f0 200705f0 200705f8 200705f8     ... ... ... ... 
20070608:	20070600 20070600 20070608 20070608     ... ... ... ... 
20070618:	20070610 20070610 20070618 20070618     ... ... ... ... 
20070628:	20070620 20070620 20070628 20070628      ..  .. (.. (.. 
20070638:	20070630 20070630 20070638 20070638     0.. 0.. 8.. 8.. 
20070648:	20070640 20070640 20070648 20070648     @.. @.. H.. H.. 
20070658:	20070650 20070650 20070658 20070658     P.. P.. X.. X.. 
20070668:	20070660 20070660 20070668 20070668     `.. `.. h.. h.. 
20070678:	20070670 20070670 20070678 20070678     p.. p.. x.. x.. 
20070688:	20070680 20070680 20070688 20070688     ... ... ... ... 
20070698:	20070690 20070690 20070698 20070698     ... ... ... ... 
200706a8:	200706a0 200706a0 200706a8 200706a8     ... ... ... ... 
200706b8:	200706b0 200706b0 200706b8 200706b8     ... ... ... ... 
200706c8:	200706c0 200706c0 200706c8 200706c8     ... ... ... ... 
200706d8:	200706d0 200706d0 200706d8 200706d8     ... ... ... ... 
200706e8:	200706e0 200706e0 200706e8 200706e8     ... ... ... ... 
200706f8:	200706f0 200706f0 200706f8 200706f8     ... ... ... ... 
20070708:	20070700 20070700 20070708 20070708     ... ... ... ... 
20070718:	20070710 20070710 20070718 20070718     ... ... ... ... 
20070728:	20070720 20070720 20070728 20070728      ..  .. (.. (.. 
20070738:	20070730 20070730 20070738 20070738     0.. 0.. 8.. 8.. 
20070748:	20070740 20070740 20070748 20070748     @.. @.. H.. H.. 
20070758:	20070750 20070750 20070758 20070758     P.. P.. X.. X.. 
20070768:	20070760 20070760 20070768 20070768     `.. `.. h.. h.. 
20070778:	20070770 20070770 20070778 20070778     p.. p.. x.. x.. 
20070788:	20070780 20070780 20070788 20070788     ... ... ... ... 
20070798:	20070790 20070790 20070798 20070798     ... ... ... ... 
200707a8:	200707a0 200707a0 200707a8 200707a8     ... ... ... ... 
200707b8:	200707b0 200707b0 200707b8 200707b8     ... ... ... ... 
200707c8:	200707c0 200707c0 200707c8 200707c8     ... ... ... ... 
200707d8:	200707d0 200707d0 200707d8 200707d8     ... ... ... ... 
200707e8:	200707e0 200707e0 200707e8 200707e8     ... ... ... ... 
200707f8:	200707f0 200707f0 200707f8 200707f8     ... ... ... ... 
20070808:	20070800 20070800 20070808 20070808     ... ... ... ... 
20070818:	20070810 20070810 20070818 20070818     ... ... ... ... 
20070828:	20070820 20070820 20070828 20070828      ..  .. (.. (.. 
20070838:	20070830 20070830 20070838 20070838     0.. 0.. 8.. 8.. 
20070848:	20070840 20070840 20070848 20070848     @.. @.. H.. H.. 
20070858:	20070850 20070850 20070858 20070858     P.. P.. X.. X.. 
20070868:	20070860 20070860 20070868 20070868     `.. `.. h.. h.. 
20070878:	20070870 20070870 20070878 20070878     p.. p.. x.. x.. 
20070888:	20070880 20070880 20070888 20070888     ... ... ... ... 
20070898:	20070890 20070890 20070898 20070898     ... ... ... ... 
200708a8:	200708a0 200708a0 200708a8 200708a8     ... ... ... ... 
200708b8:	200708b0 200708b0 200708b8 200708b8     ... ... ... ... 
200708c8:	200708c0 200708c0 200708c8 200708c8     ... ... ... ... 
200708d8:	200708d0 200708d0 200708d8 200708d8     ... ... ... ... 
200708e8:	200708e0 200708e0 200708e8 200708e8     ... ... ... ... 
200708f8:	200708f0 200708f0 200708f8 200708f8     ... ... ... ... 
20070908:	20070900 20070900 20070908 20070908     ... ... ... ... 
20070918:	20070910 20070910 20070918 20070918     ... ... ... ... 
20070928:	20070920 20070920 20070928 20070928      ..  .. (.. (.. 
20070938:	20070930 20070930 20070938 20070938     0.. 0.. 8.. 8.. 
20070948:	20070940 20070940 20070948 20070948     @.. @.. H.. H.. 
20070958:	20070950 20070950 20070958 20070958     P.. P.. X.. X.. 
20070968:	20070960 20070960 20070968 20070968     `.. `.. h.. h.. 
20070978:	20070970 20070970 20070978 20070978     p.. p.. x.. x.. 
20070988:	20070980 20070980 20070988 20070988     ... ... ... ... 

20070998 <__malloc_trim_threshold>:
20070998:	00020000                                ....

2007099c <__malloc_sbrk_base>:
2007099c:	ffffffff                                ....

200709a0 <__wctomb>:
200709a0:	00085bd1                                .[..
