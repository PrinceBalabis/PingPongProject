
ExUppgift2014.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00006a04  00080000  00080000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00086a04  00086a04  00016a04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000009bc  20070000  00086a0c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          000082ec  200709c0  000873d0  000209c0  2**3
                  ALLOC
  4 .stack        00002004  20078cac  0008f6bc  000209c0  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  000209bc  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  000209e5  2**0
                  CONTENTS, READONLY
  7 .debug_info   00016a5d  00000000  00000000  00020a3e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00003bf5  00000000  00000000  0003749b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00008a4f  00000000  00000000  0003b090  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00001000  00000000  00000000  00043adf  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000ec8  00000000  00000000  00044adf  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0001d1d2  00000000  00000000  000459a7  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0001717f  00000000  00000000  00062b79  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0006bd64  00000000  00000000  00079cf8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00003034  00000000  00000000  000e5a5c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <_sfixed>:
   80000:	2007acb0 	.word	0x2007acb0
   80004:	00080885 	.word	0x00080885
   80008:	00080881 	.word	0x00080881
   8000c:	00080881 	.word	0x00080881
   80010:	00080881 	.word	0x00080881
   80014:	00080881 	.word	0x00080881
   80018:	00080881 	.word	0x00080881
	...
   8002c:	00081311 	.word	0x00081311
   80030:	00080881 	.word	0x00080881
   80034:	00000000 	.word	0x00000000
   80038:	0008138d 	.word	0x0008138d
   8003c:	000813c9 	.word	0x000813c9
   80040:	00080881 	.word	0x00080881
   80044:	00080881 	.word	0x00080881
   80048:	00080881 	.word	0x00080881
   8004c:	00080881 	.word	0x00080881
   80050:	00080881 	.word	0x00080881
   80054:	00080881 	.word	0x00080881
   80058:	00080881 	.word	0x00080881
   8005c:	00080881 	.word	0x00080881
   80060:	00080881 	.word	0x00080881
   80064:	00080881 	.word	0x00080881
   80068:	00000000 	.word	0x00000000
   8006c:	000806c5 	.word	0x000806c5
   80070:	000806d9 	.word	0x000806d9
   80074:	000806ed 	.word	0x000806ed
   80078:	00080701 	.word	0x00080701
	...
   80084:	00080881 	.word	0x00080881
   80088:	00080881 	.word	0x00080881
   8008c:	00080881 	.word	0x00080881
   80090:	00080881 	.word	0x00080881
   80094:	00080881 	.word	0x00080881
   80098:	00080881 	.word	0x00080881
   8009c:	00080881 	.word	0x00080881
   800a0:	00080881 	.word	0x00080881
   800a4:	00000000 	.word	0x00000000
   800a8:	00080881 	.word	0x00080881
   800ac:	00080881 	.word	0x00080881
   800b0:	00080881 	.word	0x00080881
   800b4:	00080881 	.word	0x00080881
   800b8:	00080881 	.word	0x00080881
   800bc:	00080881 	.word	0x00080881
   800c0:	00080881 	.word	0x00080881
   800c4:	00080881 	.word	0x00080881
   800c8:	00080881 	.word	0x00080881
   800cc:	00080881 	.word	0x00080881
   800d0:	00080881 	.word	0x00080881
   800d4:	00080881 	.word	0x00080881
   800d8:	00080881 	.word	0x00080881
   800dc:	00080881 	.word	0x00080881
   800e0:	00080881 	.word	0x00080881
   800e4:	00080881 	.word	0x00080881
   800e8:	00080881 	.word	0x00080881
   800ec:	00080881 	.word	0x00080881
   800f0:	00080881 	.word	0x00080881

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	200709c0 	.word	0x200709c0
   80110:	00000000 	.word	0x00000000
   80114:	00086a0c 	.word	0x00086a0c

00080118 <frame_dummy>:
   80118:	4b08      	ldr	r3, [pc, #32]	; (8013c <frame_dummy+0x24>)
   8011a:	b510      	push	{r4, lr}
   8011c:	b11b      	cbz	r3, 80126 <frame_dummy+0xe>
   8011e:	4908      	ldr	r1, [pc, #32]	; (80140 <frame_dummy+0x28>)
   80120:	4808      	ldr	r0, [pc, #32]	; (80144 <frame_dummy+0x2c>)
   80122:	f3af 8000 	nop.w
   80126:	4808      	ldr	r0, [pc, #32]	; (80148 <frame_dummy+0x30>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b903      	cbnz	r3, 8012e <frame_dummy+0x16>
   8012c:	bd10      	pop	{r4, pc}
   8012e:	4b07      	ldr	r3, [pc, #28]	; (8014c <frame_dummy+0x34>)
   80130:	2b00      	cmp	r3, #0
   80132:	d0fb      	beq.n	8012c <frame_dummy+0x14>
   80134:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   80138:	4718      	bx	r3
   8013a:	bf00      	nop
   8013c:	00000000 	.word	0x00000000
   80140:	200709c4 	.word	0x200709c4
   80144:	00086a0c 	.word	0x00086a0c
   80148:	00086a0c 	.word	0x00086a0c
   8014c:	00000000 	.word	0x00000000

00080150 <ADCSetup>:
#include "global_variables.h"
#include "PWMCustom.h"

/* Setup Function for ADC */
void ADCSetup()
{
   80150:	b538      	push	{r3, r4, r5, lr}
	pmc_enable_periph_clk(ID_ADC);
   80152:	2025      	movs	r0, #37	; 0x25
   80154:	4b0e      	ldr	r3, [pc, #56]	; (80190 <ADCSetup+0x40>)
   80156:	4798      	blx	r3
	adc_init(ADC, sysclk_get_main_hz(), 20000000, 0);		// Configure for maximum frequency @ 20 MHz
   80158:	4c0e      	ldr	r4, [pc, #56]	; (80194 <ADCSetup+0x44>)
   8015a:	2300      	movs	r3, #0
   8015c:	4a0e      	ldr	r2, [pc, #56]	; (80198 <ADCSetup+0x48>)
   8015e:	490f      	ldr	r1, [pc, #60]	; (8019c <ADCSetup+0x4c>)
   80160:	4620      	mov	r0, r4
   80162:	4d0f      	ldr	r5, [pc, #60]	; (801a0 <ADCSetup+0x50>)
   80164:	47a8      	blx	r5
	adc_configure_timing(ADC, 0, 0, 0);
   80166:	2300      	movs	r3, #0
   80168:	461a      	mov	r2, r3
   8016a:	4619      	mov	r1, r3
   8016c:	4620      	mov	r0, r4
   8016e:	4d0d      	ldr	r5, [pc, #52]	; (801a4 <ADCSetup+0x54>)
   80170:	47a8      	blx	r5
	adc_set_resolution(ADC, ADC_MR_LOWRES);			// 0-1024
   80172:	2110      	movs	r1, #16
   80174:	4620      	mov	r0, r4
   80176:	4b0c      	ldr	r3, [pc, #48]	; (801a8 <ADCSetup+0x58>)
   80178:	4798      	blx	r3
	adc_configure_trigger(ADC, ADC_TRIG_SW, 0);				// trig just by software
   8017a:	2200      	movs	r2, #0
   8017c:	4611      	mov	r1, r2
   8017e:	4620      	mov	r0, r4
   80180:	4b0a      	ldr	r3, [pc, #40]	; (801ac <ADCSetup+0x5c>)
   80182:	4798      	blx	r3
	adc_enable_channel(ADC, ADC_CHANNEL_10);				// PB17 - AD8 for Arduino Due
   80184:	210a      	movs	r1, #10
   80186:	4620      	mov	r0, r4
   80188:	4b09      	ldr	r3, [pc, #36]	; (801b0 <ADCSetup+0x60>)
   8018a:	4798      	blx	r3
   8018c:	bd38      	pop	{r3, r4, r5, pc}
   8018e:	bf00      	nop
   80190:	00080801 	.word	0x00080801
   80194:	400c0000 	.word	0x400c0000
   80198:	01312d00 	.word	0x01312d00
   8019c:	0a037a00 	.word	0x0a037a00
   801a0:	000803d1 	.word	0x000803d1
   801a4:	00080425 	.word	0x00080425
   801a8:	00080405 	.word	0x00080405
   801ac:	00080415 	.word	0x00080415
   801b0:	00080449 	.word	0x00080449

000801b4 <ADCReadSensor>:
}

/* Read ADC value*/
int ADCReadSensor()
{
   801b4:	b538      	push	{r3, r4, r5, lr}
	adc_start(ADC);
   801b6:	4807      	ldr	r0, [pc, #28]	; (801d4 <ADCReadSensor+0x20>)
   801b8:	4b07      	ldr	r3, [pc, #28]	; (801d8 <ADCReadSensor+0x24>)
   801ba:	4798      	blx	r3
	while((adc_get_status(ADC) & 0x1<<24)==0);  // Wait until DRDY(Data Ready) is HIGH
   801bc:	4d05      	ldr	r5, [pc, #20]	; (801d4 <ADCReadSensor+0x20>)
   801be:	4c07      	ldr	r4, [pc, #28]	; (801dc <ADCReadSensor+0x28>)
   801c0:	4628      	mov	r0, r5
   801c2:	47a0      	blx	r4
   801c4:	f010 7f80 	tst.w	r0, #16777216	; 0x1000000
   801c8:	d0fa      	beq.n	801c0 <ADCReadSensor+0xc>
	return adc_get_latest_value(ADC);
   801ca:	4802      	ldr	r0, [pc, #8]	; (801d4 <ADCReadSensor+0x20>)
   801cc:	4b04      	ldr	r3, [pc, #16]	; (801e0 <ADCReadSensor+0x2c>)
   801ce:	4798      	blx	r3
}
   801d0:	bd38      	pop	{r3, r4, r5, pc}
   801d2:	bf00      	nop
   801d4:	400c0000 	.word	0x400c0000
   801d8:	00080441 	.word	0x00080441
   801dc:	00080459 	.word	0x00080459
   801e0:	00080455 	.word	0x00080455

000801e4 <ADCLinearValues>:

/* Linear ADC Value*/
int ADCLinearValues()
{
   801e4:	b510      	push	{r4, lr}
	for(int i = 0; i<4; i++){ // Remove the oldest value
		adc_filter_values[i] = adc_filter_values[i+1];
   801e6:	4c27      	ldr	r4, [pc, #156]	; (80284 <ADCLinearValues+0xa0>)
   801e8:	6863      	ldr	r3, [r4, #4]
   801ea:	6023      	str	r3, [r4, #0]
   801ec:	68a3      	ldr	r3, [r4, #8]
   801ee:	6063      	str	r3, [r4, #4]
   801f0:	68e3      	ldr	r3, [r4, #12]
   801f2:	60a3      	str	r3, [r4, #8]
   801f4:	6923      	ldr	r3, [r4, #16]
   801f6:	60e3      	str	r3, [r4, #12]
	}
	adc_filter_values[4] = ADCReadSensor(); // Save the latest ADC value at the back of the array.
   801f8:	4b23      	ldr	r3, [pc, #140]	; (80288 <ADCLinearValues+0xa4>)
   801fa:	4798      	blx	r3
   801fc:	6120      	str	r0, [r4, #16]
   801fe:	4622      	mov	r2, r4
   80200:	3414      	adds	r4, #20
	uint32_t adc_filter_values_total = 0;
   80202:	2300      	movs	r3, #0
	for(int i = 0; i<5; i++) {// Add up all the values
		adc_filter_values_total += adc_filter_values[i];
   80204:	f852 1b04 	ldr.w	r1, [r2], #4
   80208:	440b      	add	r3, r1
	for(int i = 0; i<4; i++){ // Remove the oldest value
		adc_filter_values[i] = adc_filter_values[i+1];
	}
	adc_filter_values[4] = ADCReadSensor(); // Save the latest ADC value at the back of the array.
	uint32_t adc_filter_values_total = 0;
	for(int i = 0; i<5; i++) {// Add up all the values
   8020a:	42a2      	cmp	r2, r4
   8020c:	d1fa      	bne.n	80204 <ADCLinearValues+0x20>
		adc_filter_values_total += adc_filter_values[i];
	}
	int tempADCValue = adc_filter_values_total / 5; // Get the average
   8020e:	4a1f      	ldr	r2, [pc, #124]	; (8028c <ADCLinearValues+0xa8>)
   80210:	fba2 2303 	umull	r2, r3, r2, r3
   80214:	089b      	lsrs	r3, r3, #2
	
	if (tempADCValue <= 290)
   80216:	f5b3 7f91 	cmp.w	r3, #290	; 0x122
   8021a:	dd20      	ble.n	8025e <ADCLinearValues+0x7a>
	{
		return 50;
	} else if(tempADCValue > 290 && tempADCValue <= 310)
   8021c:	f2a3 1223 	subw	r2, r3, #291	; 0x123
   80220:	2a13      	cmp	r2, #19
   80222:	d91e      	bls.n	80262 <ADCLinearValues+0x7e>
	{
		return 45;
	}else if(tempADCValue > 310 && tempADCValue <= 340)
   80224:	f2a3 1237 	subw	r2, r3, #311	; 0x137
   80228:	2a1d      	cmp	r2, #29
   8022a:	d91c      	bls.n	80266 <ADCLinearValues+0x82>
	{
		return 40;
	}else if(tempADCValue > 340 && tempADCValue <= 360)
   8022c:	f2a3 1255 	subw	r2, r3, #341	; 0x155
   80230:	2a13      	cmp	r2, #19
   80232:	d91a      	bls.n	8026a <ADCLinearValues+0x86>
	{
		return 35;
	}else if(tempADCValue > 360 && tempADCValue <= 405)
   80234:	f2a3 1269 	subw	r2, r3, #361	; 0x169
   80238:	2a2c      	cmp	r2, #44	; 0x2c
   8023a:	d918      	bls.n	8026e <ADCLinearValues+0x8a>
	{
		return 30;
	}else if(tempADCValue > 405 && tempADCValue <= 470)
   8023c:	f5a3 72cb 	sub.w	r2, r3, #406	; 0x196
   80240:	2a40      	cmp	r2, #64	; 0x40
   80242:	d916      	bls.n	80272 <ADCLinearValues+0x8e>
	{
		return 25;
	}else if(tempADCValue > 470 && tempADCValue <= 525)
   80244:	f2a3 12d7 	subw	r2, r3, #471	; 0x1d7
   80248:	2a36      	cmp	r2, #54	; 0x36
   8024a:	d914      	bls.n	80276 <ADCLinearValues+0x92>
	{
		return 20;
	}else if(tempADCValue > 525 && tempADCValue <= 650)
   8024c:	f2a3 220e 	subw	r2, r3, #526	; 0x20e
   80250:	2a7c      	cmp	r2, #124	; 0x7c
   80252:	d912      	bls.n	8027a <ADCLinearValues+0x96>
	{
		return 15;
	}else if(tempADCValue > 650)
   80254:	f240 228a 	movw	r2, #650	; 0x28a
   80258:	4293      	cmp	r3, r2
   8025a:	dc10      	bgt.n	8027e <ADCLinearValues+0x9a>
	{
		return 10;
	}
   8025c:	bd10      	pop	{r4, pc}
	}
	int tempADCValue = adc_filter_values_total / 5; // Get the average
	
	if (tempADCValue <= 290)
	{
		return 50;
   8025e:	2032      	movs	r0, #50	; 0x32
   80260:	bd10      	pop	{r4, pc}
	} else if(tempADCValue > 290 && tempADCValue <= 310)
	{
		return 45;
   80262:	202d      	movs	r0, #45	; 0x2d
   80264:	bd10      	pop	{r4, pc}
	}else if(tempADCValue > 310 && tempADCValue <= 340)
	{
		return 40;
   80266:	2028      	movs	r0, #40	; 0x28
   80268:	bd10      	pop	{r4, pc}
	}else if(tempADCValue > 340 && tempADCValue <= 360)
	{
		return 35;
   8026a:	2023      	movs	r0, #35	; 0x23
   8026c:	bd10      	pop	{r4, pc}
	}else if(tempADCValue > 360 && tempADCValue <= 405)
	{
		return 30;
   8026e:	201e      	movs	r0, #30
   80270:	bd10      	pop	{r4, pc}
	}else if(tempADCValue > 405 && tempADCValue <= 470)
	{
		return 25;
   80272:	2019      	movs	r0, #25
   80274:	bd10      	pop	{r4, pc}
	}else if(tempADCValue > 470 && tempADCValue <= 525)
	{
		return 20;
   80276:	2014      	movs	r0, #20
   80278:	bd10      	pop	{r4, pc}
	}else if(tempADCValue > 525 && tempADCValue <= 650)
	{
		return 15;
   8027a:	200f      	movs	r0, #15
   8027c:	bd10      	pop	{r4, pc}
	}else if(tempADCValue > 650)
	{
		return 10;
   8027e:	200a      	movs	r0, #10
	}
   80280:	bd10      	pop	{r4, pc}
   80282:	bf00      	nop
   80284:	20070130 	.word	0x20070130
   80288:	000801b5 	.word	0x000801b5
   8028c:	cccccccd 	.word	0xcccccccd

00080290 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
   80290:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
   80292:	480e      	ldr	r0, [pc, #56]	; (802cc <sysclk_init+0x3c>)
   80294:	4b0e      	ldr	r3, [pc, #56]	; (802d0 <sysclk_init+0x40>)
   80296:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
   80298:	213e      	movs	r1, #62	; 0x3e
   8029a:	2000      	movs	r0, #0
   8029c:	4b0d      	ldr	r3, [pc, #52]	; (802d4 <sysclk_init+0x44>)
   8029e:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
   802a0:	4c0d      	ldr	r4, [pc, #52]	; (802d8 <sysclk_init+0x48>)
   802a2:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
   802a4:	2800      	cmp	r0, #0
   802a6:	d0fc      	beq.n	802a2 <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
   802a8:	4b0c      	ldr	r3, [pc, #48]	; (802dc <sysclk_init+0x4c>)
   802aa:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   802ac:	4a0c      	ldr	r2, [pc, #48]	; (802e0 <sysclk_init+0x50>)
   802ae:	4b0d      	ldr	r3, [pc, #52]	; (802e4 <sysclk_init+0x54>)
   802b0:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
   802b2:	4c0d      	ldr	r4, [pc, #52]	; (802e8 <sysclk_init+0x58>)
   802b4:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   802b6:	2800      	cmp	r0, #0
   802b8:	d0fc      	beq.n	802b4 <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   802ba:	2010      	movs	r0, #16
   802bc:	4b0b      	ldr	r3, [pc, #44]	; (802ec <sysclk_init+0x5c>)
   802be:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   802c0:	4b0b      	ldr	r3, [pc, #44]	; (802f0 <sysclk_init+0x60>)
   802c2:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   802c4:	4801      	ldr	r0, [pc, #4]	; (802cc <sysclk_init+0x3c>)
   802c6:	4b02      	ldr	r3, [pc, #8]	; (802d0 <sysclk_init+0x40>)
   802c8:	4798      	blx	r3
   802ca:	bd10      	pop	{r4, pc}
   802cc:	0501bd00 	.word	0x0501bd00
   802d0:	200700a5 	.word	0x200700a5
   802d4:	0008077d 	.word	0x0008077d
   802d8:	000807d1 	.word	0x000807d1
   802dc:	000807e1 	.word	0x000807e1
   802e0:	200d3f01 	.word	0x200d3f01
   802e4:	400e0600 	.word	0x400e0600
   802e8:	000807f1 	.word	0x000807f1
   802ec:	00080715 	.word	0x00080715
   802f0:	00080931 	.word	0x00080931

000802f4 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
   802f4:	b990      	cbnz	r0, 8031c <_read+0x28>
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
   802f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   802fa:	460c      	mov	r4, r1
   802fc:	4690      	mov	r8, r2

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
   802fe:	2a00      	cmp	r2, #0
   80300:	dd0f      	ble.n	80322 <_read+0x2e>
   80302:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
   80304:	4e08      	ldr	r6, [pc, #32]	; (80328 <_read+0x34>)
   80306:	4d09      	ldr	r5, [pc, #36]	; (8032c <_read+0x38>)
   80308:	6830      	ldr	r0, [r6, #0]
   8030a:	4621      	mov	r1, r4
   8030c:	682b      	ldr	r3, [r5, #0]
   8030e:	4798      	blx	r3
		ptr++;
   80310:	3401      	adds	r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
   80312:	42a7      	cmp	r7, r4
   80314:	d1f8      	bne.n	80308 <_read+0x14>
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
   80316:	4640      	mov	r0, r8
   80318:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
   8031c:	f04f 30ff 	mov.w	r0, #4294967295
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
}
   80320:	4770      	bx	lr

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
   80322:	2000      	movs	r0, #0
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
}
   80324:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80328:	20078ca4 	.word	0x20078ca4
   8032c:	20078c9c 	.word	0x20078c9c

00080330 <board_init>:
#include "conf_board.h"
#include "gpio.h"
#include "ioport.h"

void board_init(void)
{
   80330:	b510      	push	{r4, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   80332:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   80336:	4b1e      	ldr	r3, [pc, #120]	; (803b0 <board_init+0x80>)
   80338:	605a      	str	r2, [r3, #4]
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
   8033a:	200b      	movs	r0, #11
   8033c:	4c1d      	ldr	r4, [pc, #116]	; (803b4 <board_init+0x84>)
   8033e:	47a0      	blx	r4
   80340:	200c      	movs	r0, #12
   80342:	47a0      	blx	r4
   80344:	200d      	movs	r0, #13
   80346:	47a0      	blx	r4
   80348:	200e      	movs	r0, #14
   8034a:	47a0      	blx	r4
	 * In new designs IOPORT is used instead.
	 * Here IOPORT must be initialized for others to use before setting up IO.
	 */
	ioport_init();
	/* Configure LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
   8034c:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   80350:	203b      	movs	r0, #59	; 0x3b
   80352:	4c19      	ldr	r4, [pc, #100]	; (803b8 <board_init+0x88>)
   80354:	47a0      	blx	r4
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
   80356:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   8035a:	2055      	movs	r0, #85	; 0x55
   8035c:	47a0      	blx	r4
	gpio_configure_pin(LED2_GPIO, LED2_FLAGS);
   8035e:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   80362:	2056      	movs	r0, #86	; 0x56
   80364:	47a0      	blx	r4

	/* Configure Push Button pins */
	gpio_configure_pin(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS);
   80366:	4915      	ldr	r1, [pc, #84]	; (803bc <board_init+0x8c>)
   80368:	2068      	movs	r0, #104	; 0x68
   8036a:	47a0      	blx	r4
	gpio_configure_pin(GPIO_PUSH_BUTTON_2, GPIO_PUSH_BUTTON_2_FLAGS);
   8036c:	4914      	ldr	r1, [pc, #80]	; (803c0 <board_init+0x90>)
   8036e:	205c      	movs	r0, #92	; 0x5c
   80370:	47a0      	blx	r4

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART_PIO, PINS_UART, PINS_UART_FLAGS);
   80372:	4a14      	ldr	r2, [pc, #80]	; (803c4 <board_init+0x94>)
   80374:	f44f 7140 	mov.w	r1, #768	; 0x300
   80378:	4813      	ldr	r0, [pc, #76]	; (803c8 <board_init+0x98>)
   8037a:	4b14      	ldr	r3, [pc, #80]	; (803cc <board_init+0x9c>)
   8037c:	4798      	blx	r3
#endif

	/* Configure ADC example pins */
#ifdef CONF_BOARD_ADC
	/* TC TIOA configuration */
	gpio_configure_pin(PIN_TC0_TIOA0,PIN_TC0_TIOA0_FLAGS);
   8037e:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   80382:	2039      	movs	r0, #57	; 0x39
   80384:	47a0      	blx	r4

	/* ADC Trigger configuration */
	gpio_configure_pin(PINS_ADC_TRIG, PINS_ADC_TRIG_FLAG);
   80386:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   8038a:	200b      	movs	r0, #11
   8038c:	47a0      	blx	r4

	/* PWMH0 configuration */
	gpio_configure_pin(PIN_PWMC_PWMH0_TRIG, PIN_PWMC_PWMH0_TRIG_FLAG);
   8038e:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   80392:	202c      	movs	r0, #44	; 0x2c
   80394:	47a0      	blx	r4
	gpio_configure_pin(PIN_PWM_LED1_GPIO, PIN_PWM_LED1_FLAGS);
#endif

#ifdef CONF_BOARD_PWM_LED2
	/* Configure PWM LED2 pin */
	gpio_configure_pin(PIN_PWM_LED2_GPIO, PIN_PWM_LED2_FLAGS);
   80396:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   8039a:	2057      	movs	r0, #87	; 0x57
   8039c:	47a0      	blx	r4
	gpio_configure_pin(PIN_USART0_TXD_IDX, PIN_USART0_TXD_FLAGS);
#endif

#ifdef CONF_BOARD_USB_PORT
	/* Configure USB_ID (UOTGID) pin */
	gpio_configure_pin(USB_ID_GPIO, USB_ID_FLAGS);
   8039e:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   803a2:	202b      	movs	r0, #43	; 0x2b
   803a4:	47a0      	blx	r4
	/* Configure USB_VBOF (UOTGVBOF) pin */
	gpio_configure_pin(USB_VBOF_GPIO, USB_VBOF_FLAGS);
   803a6:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   803aa:	202a      	movs	r0, #42	; 0x2a
   803ac:	47a0      	blx	r4
   803ae:	bd10      	pop	{r4, pc}
   803b0:	400e1a50 	.word	0x400e1a50
   803b4:	00080801 	.word	0x00080801
   803b8:	00080501 	.word	0x00080501
   803bc:	28000079 	.word	0x28000079
   803c0:	28000001 	.word	0x28000001
   803c4:	08000001 	.word	0x08000001
   803c8:	400e0e00 	.word	0x400e0e00
   803cc:	000805d5 	.word	0x000805d5

000803d0 <adc_init>:
 *
 * \return 0 on success.
 */
uint32_t adc_init(Adc *p_adc, const uint32_t ul_mck,
		const uint32_t ul_adc_clock, const enum adc_startup_time startup)
{
   803d0:	b430      	push	{r4, r5}
	uint32_t ul_prescal;

	/*  Reset the controller. */
	p_adc->ADC_CR = ADC_CR_SWRST;
   803d2:	2401      	movs	r4, #1
   803d4:	6004      	str	r4, [r0, #0]

	/* Reset Mode Register. */
	p_adc->ADC_MR = 0;
   803d6:	2500      	movs	r5, #0
   803d8:	6045      	str	r5, [r0, #4]

	/* Reset PDC transfer. */
	p_adc->ADC_PTCR = (ADC_PTCR_RXTDIS | ADC_PTCR_TXTDIS);
   803da:	f240 2402 	movw	r4, #514	; 0x202
   803de:	f8c0 4120 	str.w	r4, [r0, #288]	; 0x120
	p_adc->ADC_RCR = 0;
   803e2:	f8c0 5104 	str.w	r5, [r0, #260]	; 0x104
	p_adc->ADC_RNCR = 0;
   803e6:	f8c0 5114 	str.w	r5, [r0, #276]	; 0x114

	ul_prescal = ul_mck / (2 * ul_adc_clock) - 1;
	p_adc->ADC_MR |= ADC_MR_PRESCAL(ul_prescal) | startup;
   803ea:	6844      	ldr	r4, [r0, #4]
   803ec:	0052      	lsls	r2, r2, #1
   803ee:	fbb1 f1f2 	udiv	r1, r1, r2
   803f2:	1e4a      	subs	r2, r1, #1
   803f4:	0212      	lsls	r2, r2, #8
   803f6:	b292      	uxth	r2, r2
   803f8:	4323      	orrs	r3, r4
   803fa:	431a      	orrs	r2, r3
   803fc:	6042      	str	r2, [r0, #4]
	return 0;
}
   803fe:	4628      	mov	r0, r5
   80400:	bc30      	pop	{r4, r5}
   80402:	4770      	bx	lr

00080404 <adc_set_resolution>:
		p_adc->ADC_MR &= ~ADC_MR_LOWRES;
		p_adc->ADC_EMR |= resolution;
		break;
	}
#else
	p_adc->ADC_MR &= ~ADC_MR_LOWRES;
   80404:	6843      	ldr	r3, [r0, #4]
   80406:	f023 0310 	bic.w	r3, r3, #16
   8040a:	6043      	str	r3, [r0, #4]
	p_adc->ADC_MR |= resolution;
   8040c:	6843      	ldr	r3, [r0, #4]
   8040e:	4319      	orrs	r1, r3
   80410:	6041      	str	r1, [r0, #4]
   80412:	4770      	bx	lr

00080414 <adc_configure_trigger>:
 *
 */
void adc_configure_trigger(Adc *p_adc, const enum adc_trigger_t trigger,
		uint8_t uc_freerun)
{
	p_adc->ADC_MR |= trigger | ((uc_freerun << 7) & ADC_MR_FREERUN);
   80414:	6843      	ldr	r3, [r0, #4]
   80416:	01d2      	lsls	r2, r2, #7
   80418:	b2d2      	uxtb	r2, r2
   8041a:	4319      	orrs	r1, r3
   8041c:	4311      	orrs	r1, r2
   8041e:	6041      	str	r1, [r0, #4]
   80420:	4770      	bx	lr
   80422:	bf00      	nop

00080424 <adc_configure_timing>:
 * \param uc_settling Analog settling time = (uc_settling + 1) / ADC clock.
 * \param uc_transfer Data transfer time = (uc_transfer * 2 + 3) / ADC clock.
 */
void adc_configure_timing(Adc *p_adc, const uint8_t uc_tracking,
		const enum adc_settling_time_t settling,const uint8_t uc_transfer)
{
   80424:	b410      	push	{r4}
	p_adc->ADC_MR |= ADC_MR_TRANSFER(uc_transfer)
   80426:	6844      	ldr	r4, [r0, #4]
   80428:	0609      	lsls	r1, r1, #24
   8042a:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
   8042e:	4322      	orrs	r2, r4
   80430:	430a      	orrs	r2, r1
   80432:	071b      	lsls	r3, r3, #28
   80434:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
   80438:	4313      	orrs	r3, r2
   8043a:	6043      	str	r3, [r0, #4]
			| settling | ADC_MR_TRACKTIM(uc_tracking);
}
   8043c:	bc10      	pop	{r4}
   8043e:	4770      	bx	lr

00080440 <adc_start>:
 * \param p_adc Pointer to an ADC instance.
 */

void adc_start(Adc *p_adc)
{
	p_adc->ADC_CR = ADC_CR_START;
   80440:	2302      	movs	r3, #2
   80442:	6003      	str	r3, [r0, #0]
   80444:	4770      	bx	lr
   80446:	bf00      	nop

00080448 <adc_enable_channel>:
 * \param p_adc Pointer to an ADC instance.
 * \param adc_ch ADC channel number.
 */
void adc_enable_channel(Adc *p_adc, const enum adc_channel_num_t adc_ch)
{
	p_adc->ADC_CHER = 1 << adc_ch;
   80448:	2301      	movs	r3, #1
   8044a:	fa03 f101 	lsl.w	r1, r3, r1
   8044e:	6101      	str	r1, [r0, #16]
   80450:	4770      	bx	lr
   80452:	bf00      	nop

00080454 <adc_get_latest_value>:
 *
 * \return ADC latest value.
 */
uint32_t adc_get_latest_value(const Adc *p_adc)
{
	return p_adc->ADC_LCDR;
   80454:	6a00      	ldr	r0, [r0, #32]
}
   80456:	4770      	bx	lr

00080458 <adc_get_status>:
 *
 * \return ADC status structure.
 */
uint32_t adc_get_status(const Adc *p_adc)
{
	return p_adc->ADC_ISR;
   80458:	6b00      	ldr	r0, [r0, #48]	; 0x30
}
   8045a:	4770      	bx	lr

0008045c <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
   8045c:	6442      	str	r2, [r0, #68]	; 0x44
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
	}
#elif (SAM3XA|| SAM3U)
	switch (ul_type) {
   8045e:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
   80462:	d016      	beq.n	80492 <pio_set_peripheral+0x36>
   80464:	d804      	bhi.n	80470 <pio_set_peripheral+0x14>
   80466:	b1c1      	cbz	r1, 8049a <pio_set_peripheral+0x3e>
   80468:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
   8046c:	d00a      	beq.n	80484 <pio_set_peripheral+0x28>
   8046e:	e013      	b.n	80498 <pio_set_peripheral+0x3c>
   80470:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
   80474:	d011      	beq.n	8049a <pio_set_peripheral+0x3e>
   80476:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
   8047a:	d00e      	beq.n	8049a <pio_set_peripheral+0x3e>
   8047c:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
   80480:	d10a      	bne.n	80498 <pio_set_peripheral+0x3c>
   80482:	4770      	bx	lr
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABSR;
   80484:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   80486:	6f03      	ldr	r3, [r0, #112]	; 0x70
   80488:	400b      	ands	r3, r1
   8048a:	ea23 0302 	bic.w	r3, r3, r2
   8048e:	6703      	str	r3, [r0, #112]	; 0x70
		break;
   80490:	e002      	b.n	80498 <pio_set_peripheral+0x3c>

	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABSR;
   80492:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   80494:	4313      	orrs	r3, r2
   80496:	6703      	str	r3, [r0, #112]	; 0x70
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
   80498:	6042      	str	r2, [r0, #4]
   8049a:	4770      	bx	lr

0008049c <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   8049c:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   8049e:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
   804a2:	bf14      	ite	ne
   804a4:	6641      	strne	r1, [r0, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   804a6:	6601      	streq	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   804a8:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
   804ac:	bf14      	ite	ne
   804ae:	6201      	strne	r1, [r0, #32]
	} else {
		p_pio->PIO_IFDR = ul_mask;
   804b0:	6241      	streq	r1, [r0, #36]	; 0x24
			p_pio->PIO_IFSCER = ul_mask;
		}
	}
#elif (SAM3XA|| SAM3U)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
   804b2:	f012 0f02 	tst.w	r2, #2
   804b6:	d002      	beq.n	804be <pio_set_input+0x22>
		p_pio->PIO_SCIFSR = ul_mask;
   804b8:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
   804bc:	e004      	b.n	804c8 <pio_set_input+0x2c>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
   804be:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_DIFSR = ul_mask;
   804c2:	bf18      	it	ne
   804c4:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
   804c8:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
   804ca:	6001      	str	r1, [r0, #0]
   804cc:	4770      	bx	lr
   804ce:	bf00      	nop

000804d0 <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
   804d0:	b410      	push	{r4}
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   804d2:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   804d4:	9c01      	ldr	r4, [sp, #4]
   804d6:	b10c      	cbz	r4, 804dc <pio_set_output+0xc>
		p_pio->PIO_PUER = ul_mask;
   804d8:	6641      	str	r1, [r0, #100]	; 0x64
   804da:	e000      	b.n	804de <pio_set_output+0xe>
	} else {
		p_pio->PIO_PUDR = ul_mask;
   804dc:	6601      	str	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
   804de:	b10b      	cbz	r3, 804e4 <pio_set_output+0x14>
		p_pio->PIO_MDER = ul_mask;
   804e0:	6501      	str	r1, [r0, #80]	; 0x50
   804e2:	e000      	b.n	804e6 <pio_set_output+0x16>
	} else {
		p_pio->PIO_MDDR = ul_mask;
   804e4:	6541      	str	r1, [r0, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
   804e6:	b10a      	cbz	r2, 804ec <pio_set_output+0x1c>
		p_pio->PIO_SODR = ul_mask;
   804e8:	6301      	str	r1, [r0, #48]	; 0x30
   804ea:	e000      	b.n	804ee <pio_set_output+0x1e>
	} else {
		p_pio->PIO_CODR = ul_mask;
   804ec:	6341      	str	r1, [r0, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
   804ee:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
   804f0:	6001      	str	r1, [r0, #0]
}
   804f2:	bc10      	pop	{r4}
   804f4:	4770      	bx	lr
   804f6:	bf00      	nop

000804f8 <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
   804f8:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
   804fa:	4770      	bx	lr

000804fc <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
   804fc:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
   804fe:	4770      	bx	lr

00080500 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
   80500:	b570      	push	{r4, r5, r6, lr}
   80502:	b082      	sub	sp, #8
   80504:	460d      	mov	r5, r1
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   80506:	0943      	lsrs	r3, r0, #5
   80508:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   8050c:	f203 7307 	addw	r3, r3, #1799	; 0x707
   80510:	025c      	lsls	r4, r3, #9
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
	Pio *p_pio = pio_get_pin_group(ul_pin);

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   80512:	f001 43f0 	and.w	r3, r1, #2013265920	; 0x78000000
   80516:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   8051a:	d030      	beq.n	8057e <pio_configure_pin+0x7e>
   8051c:	d806      	bhi.n	8052c <pio_configure_pin+0x2c>
   8051e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   80522:	d00a      	beq.n	8053a <pio_configure_pin+0x3a>
   80524:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   80528:	d018      	beq.n	8055c <pio_configure_pin+0x5c>
   8052a:	e049      	b.n	805c0 <pio_configure_pin+0xc0>
   8052c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   80530:	d030      	beq.n	80594 <pio_configure_pin+0x94>
   80532:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   80536:	d02d      	beq.n	80594 <pio_configure_pin+0x94>
   80538:	e042      	b.n	805c0 <pio_configure_pin+0xc0>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
   8053a:	f000 001f 	and.w	r0, r0, #31
   8053e:	2601      	movs	r6, #1
   80540:	4086      	lsls	r6, r0
   80542:	4632      	mov	r2, r6
   80544:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80548:	4620      	mov	r0, r4
   8054a:	4b1f      	ldr	r3, [pc, #124]	; (805c8 <pio_configure_pin+0xc8>)
   8054c:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   8054e:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   80552:	bf14      	ite	ne
   80554:	6666      	strne	r6, [r4, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   80556:	6626      	streq	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   80558:	2001      	movs	r0, #1
   8055a:	e032      	b.n	805c2 <pio_configure_pin+0xc2>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
   8055c:	f000 001f 	and.w	r0, r0, #31
   80560:	2601      	movs	r6, #1
   80562:	4086      	lsls	r6, r0
   80564:	4632      	mov	r2, r6
   80566:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   8056a:	4620      	mov	r0, r4
   8056c:	4b16      	ldr	r3, [pc, #88]	; (805c8 <pio_configure_pin+0xc8>)
   8056e:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   80570:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   80574:	bf14      	ite	ne
   80576:	6666      	strne	r6, [r4, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   80578:	6626      	streq	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   8057a:	2001      	movs	r0, #1
   8057c:	e021      	b.n	805c2 <pio_configure_pin+0xc2>
				(ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
   8057e:	f000 011f 	and.w	r1, r0, #31
   80582:	2601      	movs	r6, #1
   80584:	462a      	mov	r2, r5
   80586:	fa06 f101 	lsl.w	r1, r6, r1
   8058a:	4620      	mov	r0, r4
   8058c:	4b0f      	ldr	r3, [pc, #60]	; (805cc <pio_configure_pin+0xcc>)
   8058e:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   80590:	4630      	mov	r0, r6
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;
   80592:	e016      	b.n	805c2 <pio_configure_pin+0xc2>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   80594:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
   80598:	f000 011f 	and.w	r1, r0, #31
   8059c:	2601      	movs	r6, #1
   8059e:	ea05 0306 	and.w	r3, r5, r6
   805a2:	9300      	str	r3, [sp, #0]
   805a4:	f3c5 0380 	ubfx	r3, r5, #2, #1
   805a8:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   805ac:	bf14      	ite	ne
   805ae:	2200      	movne	r2, #0
   805b0:	2201      	moveq	r2, #1
   805b2:	fa06 f101 	lsl.w	r1, r6, r1
   805b6:	4620      	mov	r0, r4
   805b8:	4c05      	ldr	r4, [pc, #20]	; (805d0 <pio_configure_pin+0xd0>)
   805ba:	47a0      	blx	r4

	default:
		return 0;
	}

	return 1;
   805bc:	4630      	mov	r0, r6
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   805be:	e000      	b.n	805c2 <pio_configure_pin+0xc2>

	default:
		return 0;
   805c0:	2000      	movs	r0, #0
	}

	return 1;
}
   805c2:	b002      	add	sp, #8
   805c4:	bd70      	pop	{r4, r5, r6, pc}
   805c6:	bf00      	nop
   805c8:	0008045d 	.word	0x0008045d
   805cc:	0008049d 	.word	0x0008049d
   805d0:	000804d1 	.word	0x000804d1

000805d4 <pio_configure_pin_group>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin_group(Pio *p_pio,
		uint32_t ul_mask, const uint32_t ul_flags)
{
   805d4:	b570      	push	{r4, r5, r6, lr}
   805d6:	b082      	sub	sp, #8
   805d8:	4605      	mov	r5, r0
   805da:	460e      	mov	r6, r1
   805dc:	4614      	mov	r4, r2
	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   805de:	f002 43f0 	and.w	r3, r2, #2013265920	; 0x78000000
   805e2:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   805e6:	d026      	beq.n	80636 <pio_configure_pin_group+0x62>
   805e8:	d806      	bhi.n	805f8 <pio_configure_pin_group+0x24>
   805ea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   805ee:	d00a      	beq.n	80606 <pio_configure_pin_group+0x32>
   805f0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   805f4:	d013      	beq.n	8061e <pio_configure_pin_group+0x4a>
   805f6:	e034      	b.n	80662 <pio_configure_pin_group+0x8e>
   805f8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   805fc:	d01f      	beq.n	8063e <pio_configure_pin_group+0x6a>
   805fe:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   80602:	d01c      	beq.n	8063e <pio_configure_pin_group+0x6a>
   80604:	e02d      	b.n	80662 <pio_configure_pin_group+0x8e>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
   80606:	460a      	mov	r2, r1
   80608:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   8060c:	4b16      	ldr	r3, [pc, #88]	; (80668 <pio_configure_pin_group+0x94>)
   8060e:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   80610:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
   80614:	bf14      	ite	ne
   80616:	666e      	strne	r6, [r5, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   80618:	662e      	streq	r6, [r5, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   8061a:	2001      	movs	r0, #1
   8061c:	e022      	b.n	80664 <pio_configure_pin_group+0x90>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
   8061e:	460a      	mov	r2, r1
   80620:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   80624:	4b10      	ldr	r3, [pc, #64]	; (80668 <pio_configure_pin_group+0x94>)
   80626:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   80628:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
   8062c:	bf14      	ite	ne
   8062e:	666e      	strne	r6, [r5, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   80630:	662e      	streq	r6, [r5, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   80632:	2001      	movs	r0, #1
   80634:	e016      	b.n	80664 <pio_configure_pin_group+0x90>
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
   80636:	4b0d      	ldr	r3, [pc, #52]	; (8066c <pio_configure_pin_group+0x98>)
   80638:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   8063a:	2001      	movs	r0, #1
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;
   8063c:	e012      	b.n	80664 <pio_configure_pin_group+0x90>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
   8063e:	f004 5260 	and.w	r2, r4, #939524096	; 0x38000000
   80642:	f004 0301 	and.w	r3, r4, #1
   80646:	9300      	str	r3, [sp, #0]
   80648:	f3c4 0380 	ubfx	r3, r4, #2, #1
   8064c:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   80650:	bf14      	ite	ne
   80652:	2200      	movne	r2, #0
   80654:	2201      	moveq	r2, #1
   80656:	4631      	mov	r1, r6
   80658:	4628      	mov	r0, r5
   8065a:	4c05      	ldr	r4, [pc, #20]	; (80670 <pio_configure_pin_group+0x9c>)
   8065c:	47a0      	blx	r4

	default:
		return 0;
	}

	return 1;
   8065e:	2001      	movs	r0, #1
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   80660:	e000      	b.n	80664 <pio_configure_pin_group+0x90>

	default:
		return 0;
   80662:	2000      	movs	r0, #0
	}

	return 1;
}
   80664:	b002      	add	sp, #8
   80666:	bd70      	pop	{r4, r5, r6, pc}
   80668:	0008045d 	.word	0x0008045d
   8066c:	0008049d 	.word	0x0008049d
   80670:	000804d1 	.word	0x000804d1

00080674 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   80674:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   80678:	4604      	mov	r4, r0
   8067a:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   8067c:	4b0e      	ldr	r3, [pc, #56]	; (806b8 <pio_handler_process+0x44>)
   8067e:	4798      	blx	r3
   80680:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
   80682:	4620      	mov	r0, r4
   80684:	4b0d      	ldr	r3, [pc, #52]	; (806bc <pio_handler_process+0x48>)
   80686:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
   80688:	4005      	ands	r5, r0
   8068a:	d013      	beq.n	806b4 <pio_handler_process+0x40>
   8068c:	4c0c      	ldr	r4, [pc, #48]	; (806c0 <pio_handler_process+0x4c>)
   8068e:	f104 0660 	add.w	r6, r4, #96	; 0x60
		/* Find triggering source */
		i = 0;
		while (status != 0) {
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
   80692:	6823      	ldr	r3, [r4, #0]
   80694:	4543      	cmp	r3, r8
   80696:	d108      	bne.n	806aa <pio_handler_process+0x36>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   80698:	6861      	ldr	r1, [r4, #4]
   8069a:	4229      	tst	r1, r5
   8069c:	d005      	beq.n	806aa <pio_handler_process+0x36>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   8069e:	68e3      	ldr	r3, [r4, #12]
   806a0:	4640      	mov	r0, r8
   806a2:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
   806a4:	6863      	ldr	r3, [r4, #4]
   806a6:	ea25 0503 	bic.w	r5, r5, r3
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
   806aa:	42b4      	cmp	r4, r6
   806ac:	d002      	beq.n	806b4 <pio_handler_process+0x40>
   806ae:	3410      	adds	r4, #16

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
   806b0:	2d00      	cmp	r5, #0
   806b2:	d1ee      	bne.n	80692 <pio_handler_process+0x1e>
   806b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   806b8:	000804f9 	.word	0x000804f9
   806bc:	000804fd 	.word	0x000804fd
   806c0:	200709dc 	.word	0x200709dc

000806c4 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   806c4:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
   806c6:	210b      	movs	r1, #11
   806c8:	4801      	ldr	r0, [pc, #4]	; (806d0 <PIOA_Handler+0xc>)
   806ca:	4b02      	ldr	r3, [pc, #8]	; (806d4 <PIOA_Handler+0x10>)
   806cc:	4798      	blx	r3
   806ce:	bd08      	pop	{r3, pc}
   806d0:	400e0e00 	.word	0x400e0e00
   806d4:	00080675 	.word	0x00080675

000806d8 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   806d8:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
   806da:	210c      	movs	r1, #12
   806dc:	4801      	ldr	r0, [pc, #4]	; (806e4 <PIOB_Handler+0xc>)
   806de:	4b02      	ldr	r3, [pc, #8]	; (806e8 <PIOB_Handler+0x10>)
   806e0:	4798      	blx	r3
   806e2:	bd08      	pop	{r3, pc}
   806e4:	400e1000 	.word	0x400e1000
   806e8:	00080675 	.word	0x00080675

000806ec <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
   806ec:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
   806ee:	210d      	movs	r1, #13
   806f0:	4801      	ldr	r0, [pc, #4]	; (806f8 <PIOC_Handler+0xc>)
   806f2:	4b02      	ldr	r3, [pc, #8]	; (806fc <PIOC_Handler+0x10>)
   806f4:	4798      	blx	r3
   806f6:	bd08      	pop	{r3, pc}
   806f8:	400e1200 	.word	0x400e1200
   806fc:	00080675 	.word	0x00080675

00080700 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
   80700:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
   80702:	210e      	movs	r1, #14
   80704:	4801      	ldr	r0, [pc, #4]	; (8070c <PIOD_Handler+0xc>)
   80706:	4b02      	ldr	r3, [pc, #8]	; (80710 <PIOD_Handler+0x10>)
   80708:	4798      	blx	r3
   8070a:	bd08      	pop	{r3, pc}
   8070c:	400e1400 	.word	0x400e1400
   80710:	00080675 	.word	0x00080675

00080714 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   80714:	4a18      	ldr	r2, [pc, #96]	; (80778 <pmc_switch_mck_to_pllack+0x64>)
   80716:	6b13      	ldr	r3, [r2, #48]	; 0x30
   80718:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   8071c:	4318      	orrs	r0, r3
   8071e:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   80720:	6e93      	ldr	r3, [r2, #104]	; 0x68
   80722:	f013 0f08 	tst.w	r3, #8
   80726:	d003      	beq.n	80730 <pmc_switch_mck_to_pllack+0x1c>
   80728:	e009      	b.n	8073e <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
   8072a:	3b01      	subs	r3, #1
   8072c:	d103      	bne.n	80736 <pmc_switch_mck_to_pllack+0x22>
   8072e:	e01e      	b.n	8076e <pmc_switch_mck_to_pllack+0x5a>
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   80730:	f44f 6300 	mov.w	r3, #2048	; 0x800
   80734:	4910      	ldr	r1, [pc, #64]	; (80778 <pmc_switch_mck_to_pllack+0x64>)
   80736:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   80738:	f012 0f08 	tst.w	r2, #8
   8073c:	d0f5      	beq.n	8072a <pmc_switch_mck_to_pllack+0x16>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   8073e:	4a0e      	ldr	r2, [pc, #56]	; (80778 <pmc_switch_mck_to_pllack+0x64>)
   80740:	6b13      	ldr	r3, [r2, #48]	; 0x30
   80742:	f023 0303 	bic.w	r3, r3, #3
   80746:	f043 0302 	orr.w	r3, r3, #2
   8074a:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   8074c:	6e90      	ldr	r0, [r2, #104]	; 0x68
   8074e:	f010 0008 	ands.w	r0, r0, #8
   80752:	d004      	beq.n	8075e <pmc_switch_mck_to_pllack+0x4a>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
   80754:	2000      	movs	r0, #0
   80756:	4770      	bx	lr
	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
   80758:	3b01      	subs	r3, #1
   8075a:	d103      	bne.n	80764 <pmc_switch_mck_to_pllack+0x50>
   8075c:	e009      	b.n	80772 <pmc_switch_mck_to_pllack+0x5e>
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   8075e:	f44f 6300 	mov.w	r3, #2048	; 0x800
   80762:	4905      	ldr	r1, [pc, #20]	; (80778 <pmc_switch_mck_to_pllack+0x64>)
   80764:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   80766:	f012 0f08 	tst.w	r2, #8
   8076a:	d0f5      	beq.n	80758 <pmc_switch_mck_to_pllack+0x44>
   8076c:	4770      	bx	lr

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
   8076e:	2001      	movs	r0, #1
   80770:	4770      	bx	lr
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
   80772:	2001      	movs	r0, #1
		}
	}

	return 0;
}
   80774:	4770      	bx	lr
   80776:	bf00      	nop
   80778:	400e0600 	.word	0x400e0600

0008077c <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
   8077c:	b138      	cbz	r0, 8078e <pmc_switch_mainck_to_xtal+0x12>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   8077e:	4911      	ldr	r1, [pc, #68]	; (807c4 <pmc_switch_mainck_to_xtal+0x48>)
   80780:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
   80782:	4a11      	ldr	r2, [pc, #68]	; (807c8 <pmc_switch_mainck_to_xtal+0x4c>)
   80784:	401a      	ands	r2, r3
   80786:	4b11      	ldr	r3, [pc, #68]	; (807cc <pmc_switch_mainck_to_xtal+0x50>)
   80788:	4313      	orrs	r3, r2
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   8078a:	620b      	str	r3, [r1, #32]
   8078c:	4770      	bx	lr
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   8078e:	480d      	ldr	r0, [pc, #52]	; (807c4 <pmc_switch_mainck_to_xtal+0x48>)
   80790:	6a02      	ldr	r2, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   80792:	0209      	lsls	r1, r1, #8
   80794:	b289      	uxth	r1, r1
   80796:	f422 135c 	bic.w	r3, r2, #3604480	; 0x370000
   8079a:	f023 0303 	bic.w	r3, r3, #3
   8079e:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   807a2:	f043 0301 	orr.w	r3, r3, #1
   807a6:	430b      	orrs	r3, r1
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   807a8:	6203      	str	r3, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   807aa:	4602      	mov	r2, r0
   807ac:	6e93      	ldr	r3, [r2, #104]	; 0x68
   807ae:	f013 0f01 	tst.w	r3, #1
   807b2:	d0fb      	beq.n	807ac <pmc_switch_mainck_to_xtal+0x30>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
   807b4:	4a03      	ldr	r2, [pc, #12]	; (807c4 <pmc_switch_mainck_to_xtal+0x48>)
   807b6:	6a13      	ldr	r3, [r2, #32]
   807b8:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
   807bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   807c0:	6213      	str	r3, [r2, #32]
   807c2:	4770      	bx	lr
   807c4:	400e0600 	.word	0x400e0600
   807c8:	fec8fffc 	.word	0xfec8fffc
   807cc:	01370002 	.word	0x01370002

000807d0 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   807d0:	4b02      	ldr	r3, [pc, #8]	; (807dc <pmc_osc_is_ready_mainck+0xc>)
   807d2:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   807d4:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
   807d8:	4770      	bx	lr
   807da:	bf00      	nop
   807dc:	400e0600 	.word	0x400e0600

000807e0 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   807e0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   807e4:	4b01      	ldr	r3, [pc, #4]	; (807ec <pmc_disable_pllack+0xc>)
   807e6:	629a      	str	r2, [r3, #40]	; 0x28
   807e8:	4770      	bx	lr
   807ea:	bf00      	nop
   807ec:	400e0600 	.word	0x400e0600

000807f0 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   807f0:	4b02      	ldr	r3, [pc, #8]	; (807fc <pmc_is_locked_pllack+0xc>)
   807f2:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   807f4:	f000 0002 	and.w	r0, r0, #2
   807f8:	4770      	bx	lr
   807fa:	bf00      	nop
   807fc:	400e0600 	.word	0x400e0600

00080800 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
   80800:	282c      	cmp	r0, #44	; 0x2c
   80802:	d81e      	bhi.n	80842 <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
   80804:	281f      	cmp	r0, #31
   80806:	d80c      	bhi.n	80822 <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   80808:	4b11      	ldr	r3, [pc, #68]	; (80850 <pmc_enable_periph_clk+0x50>)
   8080a:	699a      	ldr	r2, [r3, #24]
   8080c:	2301      	movs	r3, #1
   8080e:	4083      	lsls	r3, r0
   80810:	4393      	bics	r3, r2
   80812:	d018      	beq.n	80846 <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
   80814:	2301      	movs	r3, #1
   80816:	fa03 f000 	lsl.w	r0, r3, r0
   8081a:	4b0d      	ldr	r3, [pc, #52]	; (80850 <pmc_enable_periph_clk+0x50>)
   8081c:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   8081e:	2000      	movs	r0, #0
   80820:	4770      	bx	lr
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
   80822:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   80824:	4b0a      	ldr	r3, [pc, #40]	; (80850 <pmc_enable_periph_clk+0x50>)
   80826:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
   8082a:	2301      	movs	r3, #1
   8082c:	4083      	lsls	r3, r0
   8082e:	4393      	bics	r3, r2
   80830:	d00b      	beq.n	8084a <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
   80832:	2301      	movs	r3, #1
   80834:	fa03 f000 	lsl.w	r0, r3, r0
   80838:	4b05      	ldr	r3, [pc, #20]	; (80850 <pmc_enable_periph_clk+0x50>)
   8083a:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
		}
#endif
	}

	return 0;
   8083e:	2000      	movs	r0, #0
   80840:	4770      	bx	lr
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
		return 1;
   80842:	2001      	movs	r0, #1
   80844:	4770      	bx	lr
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   80846:	2000      	movs	r0, #0
   80848:	4770      	bx	lr
   8084a:	2000      	movs	r0, #0
}
   8084c:	4770      	bx	lr
   8084e:	bf00      	nop
   80850:	400e0600 	.word	0x400e0600

00080854 <usart_write>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
   80854:	6943      	ldr	r3, [r0, #20]
   80856:	f013 0f02 	tst.w	r3, #2
		return 1;
	}

	p_usart->US_THR = US_THR_TXCHR(c);
   8085a:	bf1d      	ittte	ne
   8085c:	f3c1 0108 	ubfxne	r1, r1, #0, #9
   80860:	61c1      	strne	r1, [r0, #28]
	return 0;
   80862:	2000      	movne	r0, #0
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
		return 1;
   80864:	2001      	moveq	r0, #1
	}

	p_usart->US_THR = US_THR_TXCHR(c);
	return 0;
}
   80866:	4770      	bx	lr

00080868 <usart_read>:
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
   80868:	6943      	ldr	r3, [r0, #20]
   8086a:	f013 0f01 	tst.w	r3, #1
   8086e:	d005      	beq.n	8087c <usart_read+0x14>
		return 1;
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
   80870:	6983      	ldr	r3, [r0, #24]
   80872:	f3c3 0308 	ubfx	r3, r3, #0, #9
   80876:	600b      	str	r3, [r1, #0]

	return 0;
   80878:	2000      	movs	r0, #0
   8087a:	4770      	bx	lr
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
		return 1;
   8087c:	2001      	movs	r0, #1

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;

	return 0;
}
   8087e:	4770      	bx	lr

00080880 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   80880:	e7fe      	b.n	80880 <Dummy_Handler>
   80882:	bf00      	nop

00080884 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   80884:	b508      	push	{r3, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
   80886:	4b1e      	ldr	r3, [pc, #120]	; (80900 <Reset_Handler+0x7c>)
   80888:	4a1e      	ldr	r2, [pc, #120]	; (80904 <Reset_Handler+0x80>)
   8088a:	429a      	cmp	r2, r3
   8088c:	d003      	beq.n	80896 <Reset_Handler+0x12>
		for (; pDest < &_erelocate;) {
   8088e:	4b1e      	ldr	r3, [pc, #120]	; (80908 <Reset_Handler+0x84>)
   80890:	4a1b      	ldr	r2, [pc, #108]	; (80900 <Reset_Handler+0x7c>)
   80892:	429a      	cmp	r2, r3
   80894:	d304      	bcc.n	808a0 <Reset_Handler+0x1c>
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   80896:	4b1d      	ldr	r3, [pc, #116]	; (8090c <Reset_Handler+0x88>)
   80898:	4a1d      	ldr	r2, [pc, #116]	; (80910 <Reset_Handler+0x8c>)
   8089a:	429a      	cmp	r2, r3
   8089c:	d30f      	bcc.n	808be <Reset_Handler+0x3a>
   8089e:	e01a      	b.n	808d6 <Reset_Handler+0x52>
   808a0:	4917      	ldr	r1, [pc, #92]	; (80900 <Reset_Handler+0x7c>)
   808a2:	4b1c      	ldr	r3, [pc, #112]	; (80914 <Reset_Handler+0x90>)
   808a4:	1a5b      	subs	r3, r3, r1
   808a6:	f023 0303 	bic.w	r3, r3, #3
   808aa:	3304      	adds	r3, #4
   808ac:	4a15      	ldr	r2, [pc, #84]	; (80904 <Reset_Handler+0x80>)
   808ae:	4413      	add	r3, r2
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
			*pDest++ = *pSrc++;
   808b0:	f852 0b04 	ldr.w	r0, [r2], #4
   808b4:	f841 0b04 	str.w	r0, [r1], #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   808b8:	429a      	cmp	r2, r3
   808ba:	d1f9      	bne.n	808b0 <Reset_Handler+0x2c>
   808bc:	e7eb      	b.n	80896 <Reset_Handler+0x12>
   808be:	4b16      	ldr	r3, [pc, #88]	; (80918 <Reset_Handler+0x94>)
   808c0:	4a16      	ldr	r2, [pc, #88]	; (8091c <Reset_Handler+0x98>)
   808c2:	1ad2      	subs	r2, r2, r3
   808c4:	f022 0203 	bic.w	r2, r2, #3
   808c8:	441a      	add	r2, r3
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   808ca:	3b04      	subs	r3, #4
		*pDest++ = 0;
   808cc:	2100      	movs	r1, #0
   808ce:	f843 1b04 	str.w	r1, [r3], #4
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   808d2:	4293      	cmp	r3, r2
   808d4:	d1fb      	bne.n	808ce <Reset_Handler+0x4a>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   808d6:	4b12      	ldr	r3, [pc, #72]	; (80920 <Reset_Handler+0x9c>)
   808d8:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
   808dc:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   808e0:	4910      	ldr	r1, [pc, #64]	; (80924 <Reset_Handler+0xa0>)
   808e2:	608a      	str	r2, [r1, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < NFC_RAM_ADDR)) {
   808e4:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   808e8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   808ec:	d203      	bcs.n	808f6 <Reset_Handler+0x72>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   808ee:	688b      	ldr	r3, [r1, #8]
   808f0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   808f4:	608b      	str	r3, [r1, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   808f6:	4b0c      	ldr	r3, [pc, #48]	; (80928 <Reset_Handler+0xa4>)
   808f8:	4798      	blx	r3

	/* Branch to main function */
	main();
   808fa:	4b0c      	ldr	r3, [pc, #48]	; (8092c <Reset_Handler+0xa8>)
   808fc:	4798      	blx	r3
   808fe:	e7fe      	b.n	808fe <Reset_Handler+0x7a>
   80900:	20070000 	.word	0x20070000
   80904:	00086a0c 	.word	0x00086a0c
   80908:	200709bc 	.word	0x200709bc
   8090c:	20078cac 	.word	0x20078cac
   80910:	200709c0 	.word	0x200709c0
   80914:	200709bb 	.word	0x200709bb
   80918:	200709c4 	.word	0x200709c4
   8091c:	20078caf 	.word	0x20078caf
   80920:	00080000 	.word	0x00080000
   80924:	e000ed00 	.word	0xe000ed00
   80928:	000838ad 	.word	0x000838ad
   8092c:	00082b29 	.word	0x00082b29

00080930 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate(void)
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   80930:	4b3e      	ldr	r3, [pc, #248]	; (80a2c <SystemCoreClockUpdate+0xfc>)
   80932:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   80934:	f003 0303 	and.w	r3, r3, #3
   80938:	2b03      	cmp	r3, #3
   8093a:	d85f      	bhi.n	809fc <SystemCoreClockUpdate+0xcc>
   8093c:	e8df f003 	tbb	[pc, r3]
   80940:	2b2b0e02 	.word	0x2b2b0e02
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   80944:	4b3a      	ldr	r3, [pc, #232]	; (80a30 <SystemCoreClockUpdate+0x100>)
   80946:	695b      	ldr	r3, [r3, #20]
   80948:	f013 0f80 	tst.w	r3, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   8094c:	bf14      	ite	ne
   8094e:	f44f 4200 	movne.w	r2, #32768	; 0x8000
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   80952:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
   80956:	4b37      	ldr	r3, [pc, #220]	; (80a34 <SystemCoreClockUpdate+0x104>)
   80958:	601a      	str	r2, [r3, #0]
   8095a:	e04f      	b.n	809fc <SystemCoreClockUpdate+0xcc>
		}
		break;
	case PMC_MCKR_CSS_MAIN_CLK:	/* Main clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   8095c:	4b33      	ldr	r3, [pc, #204]	; (80a2c <SystemCoreClockUpdate+0xfc>)
   8095e:	6a1b      	ldr	r3, [r3, #32]
   80960:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   80964:	d003      	beq.n	8096e <SystemCoreClockUpdate+0x3e>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   80966:	4a34      	ldr	r2, [pc, #208]	; (80a38 <SystemCoreClockUpdate+0x108>)
   80968:	4b32      	ldr	r3, [pc, #200]	; (80a34 <SystemCoreClockUpdate+0x104>)
   8096a:	601a      	str	r2, [r3, #0]
   8096c:	e046      	b.n	809fc <SystemCoreClockUpdate+0xcc>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   8096e:	4a33      	ldr	r2, [pc, #204]	; (80a3c <SystemCoreClockUpdate+0x10c>)
   80970:	4b30      	ldr	r3, [pc, #192]	; (80a34 <SystemCoreClockUpdate+0x104>)
   80972:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   80974:	4b2d      	ldr	r3, [pc, #180]	; (80a2c <SystemCoreClockUpdate+0xfc>)
   80976:	6a1b      	ldr	r3, [r3, #32]
   80978:	f003 0370 	and.w	r3, r3, #112	; 0x70
   8097c:	2b10      	cmp	r3, #16
   8097e:	d002      	beq.n	80986 <SystemCoreClockUpdate+0x56>
   80980:	2b20      	cmp	r3, #32
   80982:	d004      	beq.n	8098e <SystemCoreClockUpdate+0x5e>
   80984:	e03a      	b.n	809fc <SystemCoreClockUpdate+0xcc>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   80986:	4a2e      	ldr	r2, [pc, #184]	; (80a40 <SystemCoreClockUpdate+0x110>)
   80988:	4b2a      	ldr	r3, [pc, #168]	; (80a34 <SystemCoreClockUpdate+0x104>)
   8098a:	601a      	str	r2, [r3, #0]
				break;
   8098c:	e036      	b.n	809fc <SystemCoreClockUpdate+0xcc>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   8098e:	4a2a      	ldr	r2, [pc, #168]	; (80a38 <SystemCoreClockUpdate+0x108>)
   80990:	4b28      	ldr	r3, [pc, #160]	; (80a34 <SystemCoreClockUpdate+0x104>)
   80992:	601a      	str	r2, [r3, #0]
				break;
   80994:	e032      	b.n	809fc <SystemCoreClockUpdate+0xcc>
			}
		}
		break;
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_UPLL_CLK:	/* UPLL clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   80996:	4b25      	ldr	r3, [pc, #148]	; (80a2c <SystemCoreClockUpdate+0xfc>)
   80998:	6a1b      	ldr	r3, [r3, #32]
   8099a:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   8099e:	d003      	beq.n	809a8 <SystemCoreClockUpdate+0x78>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   809a0:	4a25      	ldr	r2, [pc, #148]	; (80a38 <SystemCoreClockUpdate+0x108>)
   809a2:	4b24      	ldr	r3, [pc, #144]	; (80a34 <SystemCoreClockUpdate+0x104>)
   809a4:	601a      	str	r2, [r3, #0]
   809a6:	e012      	b.n	809ce <SystemCoreClockUpdate+0x9e>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   809a8:	4a24      	ldr	r2, [pc, #144]	; (80a3c <SystemCoreClockUpdate+0x10c>)
   809aa:	4b22      	ldr	r3, [pc, #136]	; (80a34 <SystemCoreClockUpdate+0x104>)
   809ac:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   809ae:	4b1f      	ldr	r3, [pc, #124]	; (80a2c <SystemCoreClockUpdate+0xfc>)
   809b0:	6a1b      	ldr	r3, [r3, #32]
   809b2:	f003 0370 	and.w	r3, r3, #112	; 0x70
   809b6:	2b10      	cmp	r3, #16
   809b8:	d002      	beq.n	809c0 <SystemCoreClockUpdate+0x90>
   809ba:	2b20      	cmp	r3, #32
   809bc:	d004      	beq.n	809c8 <SystemCoreClockUpdate+0x98>
   809be:	e006      	b.n	809ce <SystemCoreClockUpdate+0x9e>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   809c0:	4a1f      	ldr	r2, [pc, #124]	; (80a40 <SystemCoreClockUpdate+0x110>)
   809c2:	4b1c      	ldr	r3, [pc, #112]	; (80a34 <SystemCoreClockUpdate+0x104>)
   809c4:	601a      	str	r2, [r3, #0]
				break;
   809c6:	e002      	b.n	809ce <SystemCoreClockUpdate+0x9e>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   809c8:	4a1b      	ldr	r2, [pc, #108]	; (80a38 <SystemCoreClockUpdate+0x108>)
   809ca:	4b1a      	ldr	r3, [pc, #104]	; (80a34 <SystemCoreClockUpdate+0x104>)
   809cc:	601a      	str	r2, [r3, #0]
				break;
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   809ce:	4b17      	ldr	r3, [pc, #92]	; (80a2c <SystemCoreClockUpdate+0xfc>)
   809d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   809d2:	f003 0303 	and.w	r3, r3, #3
   809d6:	2b02      	cmp	r3, #2
   809d8:	d10d      	bne.n	809f6 <SystemCoreClockUpdate+0xc6>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   809da:	4a14      	ldr	r2, [pc, #80]	; (80a2c <SystemCoreClockUpdate+0xfc>)
   809dc:	6a93      	ldr	r3, [r2, #40]	; 0x28
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   809de:	6a92      	ldr	r2, [r2, #40]	; 0x28
   809e0:	4814      	ldr	r0, [pc, #80]	; (80a34 <SystemCoreClockUpdate+0x104>)
   809e2:	f3c3 410a 	ubfx	r1, r3, #16, #11
   809e6:	6803      	ldr	r3, [r0, #0]
   809e8:	fb01 3303 	mla	r3, r1, r3, r3
   809ec:	b2d2      	uxtb	r2, r2
   809ee:	fbb3 f3f2 	udiv	r3, r3, r2
   809f2:	6003      	str	r3, [r0, #0]
   809f4:	e002      	b.n	809fc <SystemCoreClockUpdate+0xcc>
				                             CKGR_PLLAR_DIVA_Pos));
		} else {
			SystemCoreClock = SYS_UTMIPLL / 2U;
   809f6:	4a13      	ldr	r2, [pc, #76]	; (80a44 <SystemCoreClockUpdate+0x114>)
   809f8:	4b0e      	ldr	r3, [pc, #56]	; (80a34 <SystemCoreClockUpdate+0x104>)
   809fa:	601a      	str	r2, [r3, #0]
		}
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   809fc:	4b0b      	ldr	r3, [pc, #44]	; (80a2c <SystemCoreClockUpdate+0xfc>)
   809fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   80a00:	f003 0370 	and.w	r3, r3, #112	; 0x70
   80a04:	2b70      	cmp	r3, #112	; 0x70
   80a06:	d107      	bne.n	80a18 <SystemCoreClockUpdate+0xe8>
		SystemCoreClock /= 3U;
   80a08:	4a0a      	ldr	r2, [pc, #40]	; (80a34 <SystemCoreClockUpdate+0x104>)
   80a0a:	6813      	ldr	r3, [r2, #0]
   80a0c:	490e      	ldr	r1, [pc, #56]	; (80a48 <SystemCoreClockUpdate+0x118>)
   80a0e:	fba1 1303 	umull	r1, r3, r1, r3
   80a12:	085b      	lsrs	r3, r3, #1
   80a14:	6013      	str	r3, [r2, #0]
   80a16:	4770      	bx	lr
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   80a18:	4b04      	ldr	r3, [pc, #16]	; (80a2c <SystemCoreClockUpdate+0xfc>)
   80a1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   80a1c:	4905      	ldr	r1, [pc, #20]	; (80a34 <SystemCoreClockUpdate+0x104>)
   80a1e:	f3c3 1202 	ubfx	r2, r3, #4, #3
   80a22:	680b      	ldr	r3, [r1, #0]
   80a24:	40d3      	lsrs	r3, r2
   80a26:	600b      	str	r3, [r1, #0]
   80a28:	4770      	bx	lr
   80a2a:	bf00      	nop
   80a2c:	400e0600 	.word	0x400e0600
   80a30:	400e1a10 	.word	0x400e1a10
   80a34:	2007012c 	.word	0x2007012c
   80a38:	00b71b00 	.word	0x00b71b00
   80a3c:	003d0900 	.word	0x003d0900
   80a40:	007a1200 	.word	0x007a1200
   80a44:	0e4e1c00 	.word	0x0e4e1c00
   80a48:	aaaaaaab 	.word	0xaaaaaaab

00080a4c <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
   80a4c:	4b09      	ldr	r3, [pc, #36]	; (80a74 <_sbrk+0x28>)
   80a4e:	681b      	ldr	r3, [r3, #0]
   80a50:	b913      	cbnz	r3, 80a58 <_sbrk+0xc>
		heap = (unsigned char *)&_end;
   80a52:	4a09      	ldr	r2, [pc, #36]	; (80a78 <_sbrk+0x2c>)
   80a54:	4b07      	ldr	r3, [pc, #28]	; (80a74 <_sbrk+0x28>)
   80a56:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
   80a58:	4b06      	ldr	r3, [pc, #24]	; (80a74 <_sbrk+0x28>)
   80a5a:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
   80a5c:	181a      	adds	r2, r3, r0
   80a5e:	4907      	ldr	r1, [pc, #28]	; (80a7c <_sbrk+0x30>)
   80a60:	4291      	cmp	r1, r2
   80a62:	db04      	blt.n	80a6e <_sbrk+0x22>
		return (caddr_t) -1;	
	}

	heap += incr;
   80a64:	4610      	mov	r0, r2
   80a66:	4a03      	ldr	r2, [pc, #12]	; (80a74 <_sbrk+0x28>)
   80a68:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
   80a6a:	4618      	mov	r0, r3
   80a6c:	4770      	bx	lr
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;

	if (((int)prev_heap + incr) > ramend) {
		return (caddr_t) -1;	
   80a6e:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap += incr;

	return (caddr_t) prev_heap;
}
   80a72:	4770      	bx	lr
   80a74:	20070a4c 	.word	0x20070a4c
   80a78:	2007acb0 	.word	0x2007acb0
   80a7c:	20087ffc 	.word	0x20087ffc

00080a80 <_close>:
}

extern int _close(int file)
{
	return -1;
}
   80a80:	f04f 30ff 	mov.w	r0, #4294967295
   80a84:	4770      	bx	lr
   80a86:	bf00      	nop

00080a88 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
   80a88:	f44f 5300 	mov.w	r3, #8192	; 0x2000
   80a8c:	604b      	str	r3, [r1, #4]

	return 0;
}
   80a8e:	2000      	movs	r0, #0
   80a90:	4770      	bx	lr
   80a92:	bf00      	nop

00080a94 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
   80a94:	2001      	movs	r0, #1
   80a96:	4770      	bx	lr

00080a98 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
   80a98:	2000      	movs	r0, #0
   80a9a:	4770      	bx	lr
   80a9c:	0000      	movs	r0, r0
	...

00080aa0 <PIDRegulate>:
#include "ADCCustom.h"
#include "global_variables.h"
#include "UARTFunctions.h"

/* PID Function */
void PIDRegulate(void){
   80aa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   80aa4:	b083      	sub	sp, #12
	distance = ADCLinearValues();
   80aa6:	4b6a      	ldr	r3, [pc, #424]	; (80c50 <PIDRegulate+0x1b0>)
   80aa8:	4798      	blx	r3
   80aaa:	4b6a      	ldr	r3, [pc, #424]	; (80c54 <PIDRegulate+0x1b4>)
   80aac:	6018      	str	r0, [r3, #0]
	
	//uncomment for linear calibration
	//distance = ADCReadSensor();
	
	// P-regulation and invert error
	error = -1*(setPoint - distance);
   80aae:	4b6a      	ldr	r3, [pc, #424]	; (80c58 <PIDRegulate+0x1b8>)
   80ab0:	681e      	ldr	r6, [r3, #0]
   80ab2:	1b86      	subs	r6, r0, r6
   80ab4:	4b69      	ldr	r3, [pc, #420]	; (80c5c <PIDRegulate+0x1bc>)
   80ab6:	601e      	str	r6, [r3, #0]
	
	// I-regulation
	I_Output += error*DT_SECONDS;
   80ab8:	4630      	mov	r0, r6
   80aba:	4b69      	ldr	r3, [pc, #420]	; (80c60 <PIDRegulate+0x1c0>)
   80abc:	4798      	blx	r3
   80abe:	e9cd 0100 	strd	r0, r1, [sp]
   80ac2:	4b68      	ldr	r3, [pc, #416]	; (80c64 <PIDRegulate+0x1c4>)
   80ac4:	6818      	ldr	r0, [r3, #0]
   80ac6:	4b68      	ldr	r3, [pc, #416]	; (80c68 <PIDRegulate+0x1c8>)
   80ac8:	4798      	blx	r3
   80aca:	4680      	mov	r8, r0
   80acc:	4689      	mov	r9, r1
   80ace:	a35e      	add	r3, pc, #376	; (adr r3, 80c48 <PIDRegulate+0x1a8>)
   80ad0:	e9d3 2300 	ldrd	r2, r3, [r3]
   80ad4:	e9dd 0100 	ldrd	r0, r1, [sp]
   80ad8:	4f64      	ldr	r7, [pc, #400]	; (80c6c <PIDRegulate+0x1cc>)
   80ada:	47b8      	blx	r7
   80adc:	4602      	mov	r2, r0
   80ade:	460b      	mov	r3, r1
   80ae0:	4640      	mov	r0, r8
   80ae2:	4649      	mov	r1, r9
   80ae4:	4f62      	ldr	r7, [pc, #392]	; (80c70 <PIDRegulate+0x1d0>)
   80ae6:	47b8      	blx	r7
   80ae8:	4b62      	ldr	r3, [pc, #392]	; (80c74 <PIDRegulate+0x1d4>)
   80aea:	4798      	blx	r3
   80aec:	4607      	mov	r7, r0
	if(I_Output > 20){ // Remove windup induced lag
   80aee:	4962      	ldr	r1, [pc, #392]	; (80c78 <PIDRegulate+0x1d8>)
   80af0:	4b62      	ldr	r3, [pc, #392]	; (80c7c <PIDRegulate+0x1dc>)
   80af2:	4798      	blx	r3
   80af4:	b118      	cbz	r0, 80afe <PIDRegulate+0x5e>
		I_Output = 20;
   80af6:	4a60      	ldr	r2, [pc, #384]	; (80c78 <PIDRegulate+0x1d8>)
   80af8:	4b5a      	ldr	r3, [pc, #360]	; (80c64 <PIDRegulate+0x1c4>)
   80afa:	601a      	str	r2, [r3, #0]
   80afc:	e00a      	b.n	80b14 <PIDRegulate+0x74>
		} else if(I_Output < -20){
   80afe:	4960      	ldr	r1, [pc, #384]	; (80c80 <PIDRegulate+0x1e0>)
   80b00:	4638      	mov	r0, r7
   80b02:	4b60      	ldr	r3, [pc, #384]	; (80c84 <PIDRegulate+0x1e4>)
   80b04:	4798      	blx	r3
   80b06:	b910      	cbnz	r0, 80b0e <PIDRegulate+0x6e>
	
	// P-regulation and invert error
	error = -1*(setPoint - distance);
	
	// I-regulation
	I_Output += error*DT_SECONDS;
   80b08:	4b56      	ldr	r3, [pc, #344]	; (80c64 <PIDRegulate+0x1c4>)
   80b0a:	601f      	str	r7, [r3, #0]
   80b0c:	e002      	b.n	80b14 <PIDRegulate+0x74>
	if(I_Output > 20){ // Remove windup induced lag
		I_Output = 20;
		} else if(I_Output < -20){
		I_Output = -20;
   80b0e:	4a5c      	ldr	r2, [pc, #368]	; (80c80 <PIDRegulate+0x1e0>)
   80b10:	4b54      	ldr	r3, [pc, #336]	; (80c64 <PIDRegulate+0x1c4>)
   80b12:	601a      	str	r2, [r3, #0]
	}
	
	// D-regulation
	D_Output = (float)(error-error_old);
   80b14:	4f5c      	ldr	r7, [pc, #368]	; (80c88 <PIDRegulate+0x1e8>)
   80b16:	6838      	ldr	r0, [r7, #0]
   80b18:	1a30      	subs	r0, r6, r0
   80b1a:	4b5c      	ldr	r3, [pc, #368]	; (80c8c <PIDRegulate+0x1ec>)
   80b1c:	4798      	blx	r3
   80b1e:	4682      	mov	sl, r0
   80b20:	4b5b      	ldr	r3, [pc, #364]	; (80c90 <PIDRegulate+0x1f0>)
   80b22:	6018      	str	r0, [r3, #0]
	error_old = error;
   80b24:	603e      	str	r6, [r7, #0]
	
	// Add up P, I and D outputs
	if(kI_Gain != 0 && kD_Gain != 0){ // PID
   80b26:	4b5b      	ldr	r3, [pc, #364]	; (80c94 <PIDRegulate+0x1f4>)
   80b28:	e9d3 6700 	ldrd	r6, r7, [r3]
   80b2c:	2200      	movs	r2, #0
   80b2e:	2300      	movs	r3, #0
   80b30:	4630      	mov	r0, r6
   80b32:	4639      	mov	r1, r7
   80b34:	4c58      	ldr	r4, [pc, #352]	; (80c98 <PIDRegulate+0x1f8>)
   80b36:	47a0      	blx	r4
   80b38:	2800      	cmp	r0, #0
   80b3a:	d141      	bne.n	80bc0 <PIDRegulate+0x120>
   80b3c:	4b57      	ldr	r3, [pc, #348]	; (80c9c <PIDRegulate+0x1fc>)
   80b3e:	e9d3 8900 	ldrd	r8, r9, [r3]
   80b42:	2200      	movs	r2, #0
   80b44:	2300      	movs	r3, #0
   80b46:	4640      	mov	r0, r8
   80b48:	4649      	mov	r1, r9
   80b4a:	47a0      	blx	r4
   80b4c:	bb10      	cbnz	r0, 80b94 <PIDRegulate+0xf4>
		output_value = kP_Gain * (error +  (I_Output/kI_Gain) + (kD_Gain*D_Output));
   80b4e:	f8df b118 	ldr.w	fp, [pc, #280]	; 80c68 <PIDRegulate+0x1c8>
   80b52:	4b44      	ldr	r3, [pc, #272]	; (80c64 <PIDRegulate+0x1c4>)
   80b54:	6818      	ldr	r0, [r3, #0]
   80b56:	47d8      	blx	fp
   80b58:	4632      	mov	r2, r6
   80b5a:	463b      	mov	r3, r7
   80b5c:	4e50      	ldr	r6, [pc, #320]	; (80ca0 <PIDRegulate+0x200>)
   80b5e:	47b0      	blx	r6
   80b60:	4e43      	ldr	r6, [pc, #268]	; (80c70 <PIDRegulate+0x1d0>)
   80b62:	e9dd 2300 	ldrd	r2, r3, [sp]
   80b66:	47b0      	blx	r6
   80b68:	4604      	mov	r4, r0
   80b6a:	460d      	mov	r5, r1
   80b6c:	4650      	mov	r0, sl
   80b6e:	47d8      	blx	fp
   80b70:	4f3e      	ldr	r7, [pc, #248]	; (80c6c <PIDRegulate+0x1cc>)
   80b72:	4642      	mov	r2, r8
   80b74:	464b      	mov	r3, r9
   80b76:	47b8      	blx	r7
   80b78:	4602      	mov	r2, r0
   80b7a:	460b      	mov	r3, r1
   80b7c:	4620      	mov	r0, r4
   80b7e:	4629      	mov	r1, r5
   80b80:	47b0      	blx	r6
   80b82:	4b48      	ldr	r3, [pc, #288]	; (80ca4 <PIDRegulate+0x204>)
   80b84:	e9d3 2300 	ldrd	r2, r3, [r3]
   80b88:	47b8      	blx	r7
   80b8a:	4b47      	ldr	r3, [pc, #284]	; (80ca8 <PIDRegulate+0x208>)
   80b8c:	4798      	blx	r3
   80b8e:	4b47      	ldr	r3, [pc, #284]	; (80cac <PIDRegulate+0x20c>)
   80b90:	6018      	str	r0, [r3, #0]
   80b92:	e040      	b.n	80c16 <PIDRegulate+0x176>
		} else if(kI_Gain != 0 && kD_Gain == 0){ // PI
		output_value = kP_Gain * (error +  (I_Output/kI_Gain));
   80b94:	4b33      	ldr	r3, [pc, #204]	; (80c64 <PIDRegulate+0x1c4>)
   80b96:	6818      	ldr	r0, [r3, #0]
   80b98:	4b33      	ldr	r3, [pc, #204]	; (80c68 <PIDRegulate+0x1c8>)
   80b9a:	4798      	blx	r3
   80b9c:	4632      	mov	r2, r6
   80b9e:	463b      	mov	r3, r7
   80ba0:	4e3f      	ldr	r6, [pc, #252]	; (80ca0 <PIDRegulate+0x200>)
   80ba2:	47b0      	blx	r6
   80ba4:	e9dd 2300 	ldrd	r2, r3, [sp]
   80ba8:	4c31      	ldr	r4, [pc, #196]	; (80c70 <PIDRegulate+0x1d0>)
   80baa:	47a0      	blx	r4
   80bac:	4b3d      	ldr	r3, [pc, #244]	; (80ca4 <PIDRegulate+0x204>)
   80bae:	e9d3 2300 	ldrd	r2, r3, [r3]
   80bb2:	4c2e      	ldr	r4, [pc, #184]	; (80c6c <PIDRegulate+0x1cc>)
   80bb4:	47a0      	blx	r4
   80bb6:	4b3c      	ldr	r3, [pc, #240]	; (80ca8 <PIDRegulate+0x208>)
   80bb8:	4798      	blx	r3
   80bba:	4b3c      	ldr	r3, [pc, #240]	; (80cac <PIDRegulate+0x20c>)
   80bbc:	6018      	str	r0, [r3, #0]
   80bbe:	e02a      	b.n	80c16 <PIDRegulate+0x176>
		} else if(kI_Gain == 0 && kD_Gain != 0){ // PD
   80bc0:	4b36      	ldr	r3, [pc, #216]	; (80c9c <PIDRegulate+0x1fc>)
   80bc2:	e9d3 6700 	ldrd	r6, r7, [r3]
   80bc6:	2200      	movs	r2, #0
   80bc8:	2300      	movs	r3, #0
   80bca:	4630      	mov	r0, r6
   80bcc:	4639      	mov	r1, r7
   80bce:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 80c98 <PIDRegulate+0x1f8>
   80bd2:	47c0      	blx	r8
   80bd4:	b9a0      	cbnz	r0, 80c00 <PIDRegulate+0x160>
		output_value = kP_Gain * (error + (kD_Gain*D_Output));
   80bd6:	4650      	mov	r0, sl
   80bd8:	4b23      	ldr	r3, [pc, #140]	; (80c68 <PIDRegulate+0x1c8>)
   80bda:	4798      	blx	r3
   80bdc:	f8df 808c 	ldr.w	r8, [pc, #140]	; 80c6c <PIDRegulate+0x1cc>
   80be0:	4632      	mov	r2, r6
   80be2:	463b      	mov	r3, r7
   80be4:	47c0      	blx	r8
   80be6:	e9dd 2300 	ldrd	r2, r3, [sp]
   80bea:	4c21      	ldr	r4, [pc, #132]	; (80c70 <PIDRegulate+0x1d0>)
   80bec:	47a0      	blx	r4
   80bee:	4b2d      	ldr	r3, [pc, #180]	; (80ca4 <PIDRegulate+0x204>)
   80bf0:	e9d3 2300 	ldrd	r2, r3, [r3]
   80bf4:	47c0      	blx	r8
   80bf6:	4b2c      	ldr	r3, [pc, #176]	; (80ca8 <PIDRegulate+0x208>)
   80bf8:	4798      	blx	r3
   80bfa:	4b2c      	ldr	r3, [pc, #176]	; (80cac <PIDRegulate+0x20c>)
   80bfc:	6018      	str	r0, [r3, #0]
   80bfe:	e00a      	b.n	80c16 <PIDRegulate+0x176>
		} else if(kI_Gain == 0 && kD_Gain == 0){ //P
		output_value = kP_Gain * error;
   80c00:	4b28      	ldr	r3, [pc, #160]	; (80ca4 <PIDRegulate+0x204>)
   80c02:	e9d3 2300 	ldrd	r2, r3, [r3]
   80c06:	e9dd 0100 	ldrd	r0, r1, [sp]
   80c0a:	4c18      	ldr	r4, [pc, #96]	; (80c6c <PIDRegulate+0x1cc>)
   80c0c:	47a0      	blx	r4
   80c0e:	4b26      	ldr	r3, [pc, #152]	; (80ca8 <PIDRegulate+0x208>)
   80c10:	4798      	blx	r3
   80c12:	4b26      	ldr	r3, [pc, #152]	; (80cac <PIDRegulate+0x20c>)
   80c14:	6018      	str	r0, [r3, #0]
	//output_value = (kP_Gain*error)+I_Output+D_Output;
	//output_value = (kP_Gain*error); // P regulator
	
	//Apply output from PID to pwm control
	//pwm_val = pwm_val+(float)(output_value*PWM_CHANGE_GAIN);
	pwm_val = pwm_val+output_value;
   80c16:	4b26      	ldr	r3, [pc, #152]	; (80cb0 <PIDRegulate+0x210>)
   80c18:	681b      	ldr	r3, [r3, #0]
   80c1a:	4a24      	ldr	r2, [pc, #144]	; (80cac <PIDRegulate+0x20c>)
   80c1c:	6812      	ldr	r2, [r2, #0]
	//pwm_val = output_value;

	// Protection vs overflow/underflow
	if (pwm_val < PID_PWM_MIN)
   80c1e:	189b      	adds	r3, r3, r2
   80c20:	d503      	bpl.n	80c2a <PIDRegulate+0x18a>
	{
		pwm_val = PID_PWM_MIN;
   80c22:	2200      	movs	r2, #0
   80c24:	4b22      	ldr	r3, [pc, #136]	; (80cb0 <PIDRegulate+0x210>)
   80c26:	601a      	str	r2, [r3, #0]
   80c28:	e007      	b.n	80c3a <PIDRegulate+0x19a>
	}
	else if (pwm_val > PID_PWM_MAX)
   80c2a:	2b64      	cmp	r3, #100	; 0x64
   80c2c:	dc02      	bgt.n	80c34 <PIDRegulate+0x194>
	//output_value = (kP_Gain*error)+I_Output+D_Output;
	//output_value = (kP_Gain*error); // P regulator
	
	//Apply output from PID to pwm control
	//pwm_val = pwm_val+(float)(output_value*PWM_CHANGE_GAIN);
	pwm_val = pwm_val+output_value;
   80c2e:	4a20      	ldr	r2, [pc, #128]	; (80cb0 <PIDRegulate+0x210>)
   80c30:	6013      	str	r3, [r2, #0]
   80c32:	e002      	b.n	80c3a <PIDRegulate+0x19a>
	{
		pwm_val = PID_PWM_MIN;
	}
	else if (pwm_val > PID_PWM_MAX)
	{
		pwm_val = PID_PWM_MAX;
   80c34:	2264      	movs	r2, #100	; 0x64
   80c36:	4b1e      	ldr	r3, [pc, #120]	; (80cb0 <PIDRegulate+0x210>)
   80c38:	601a      	str	r2, [r3, #0]
	}
	
	// Write PID value to PWM
	PWMDutyCycle(pwm_val);
   80c3a:	4b1d      	ldr	r3, [pc, #116]	; (80cb0 <PIDRegulate+0x210>)
   80c3c:	6818      	ldr	r0, [r3, #0]
   80c3e:	4b1d      	ldr	r3, [pc, #116]	; (80cb4 <PIDRegulate+0x214>)
   80c40:	4798      	blx	r3
	
}
   80c42:	b003      	add	sp, #12
   80c44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   80c48:	9999999a 	.word	0x9999999a
   80c4c:	3fb99999 	.word	0x3fb99999
   80c50:	000801e5 	.word	0x000801e5
   80c54:	20070a5c 	.word	0x20070a5c
   80c58:	20070a88 	.word	0x20070a88
   80c5c:	20070a60 	.word	0x20070a60
   80c60:	00082eb5 	.word	0x00082eb5
   80c64:	20070a54 	.word	0x20070a54
   80c68:	00082ed9 	.word	0x00082ed9
   80c6c:	00082f81 	.word	0x00082f81
   80c70:	00082c1d 	.word	0x00082c1d
   80c74:	00083505 	.word	0x00083505
   80c78:	41a00000 	.word	0x41a00000
   80c7c:	00083899 	.word	0x00083899
   80c80:	c1a00000 	.word	0xc1a00000
   80c84:	0008385d 	.word	0x0008385d
   80c88:	20070a50 	.word	0x20070a50
   80c8c:	00083719 	.word	0x00083719
   80c90:	20070a80 	.word	0x20070a80
   80c94:	20070a90 	.word	0x20070a90
   80c98:	00083451 	.word	0x00083451
   80c9c:	20070a78 	.word	0x20070a78
   80ca0:	000831d5 	.word	0x000831d5
   80ca4:	20070a68 	.word	0x20070a68
   80ca8:	000834b5 	.word	0x000834b5
   80cac:	20070a84 	.word	0x20070a84
   80cb0:	20070a58 	.word	0x20070a58
   80cb4:	00080dad 	.word	0x00080dad

00080cb8 <PIDRegulationTask>:
#include "global_variables.h"
#include "PIDRegulation.h"
#include "testFunctions.h"

void PIDRegulationTask (void *pvParameters)
{
   80cb8:	b570      	push	{r4, r5, r6, lr}
   80cba:	b082      	sub	sp, #8
	//	printf("PID Task initialized and PAUSED\n\r");

	// Pause here untill Matlab sent values
	xSemaphoreTake(sem, portMAX_DELAY);
   80cbc:	4d16      	ldr	r5, [pc, #88]	; (80d18 <PIDRegulationTask+0x60>)
   80cbe:	2300      	movs	r3, #0
   80cc0:	f64f 72ff 	movw	r2, #65535	; 0xffff
   80cc4:	4619      	mov	r1, r3
   80cc6:	6828      	ldr	r0, [r5, #0]
   80cc8:	4c14      	ldr	r4, [pc, #80]	; (80d1c <PIDRegulationTask+0x64>)
   80cca:	47a0      	blx	r4
	xSemaphoreTake(sem, portMAX_DELAY);
   80ccc:	2300      	movs	r3, #0
   80cce:	f64f 72ff 	movw	r2, #65535	; 0xffff
   80cd2:	4619      	mov	r1, r3
   80cd4:	6828      	ldr	r0, [r5, #0]
   80cd6:	47a0      	blx	r4

	portTickType xLastWakeTime = xTaskGetTickCount();
   80cd8:	4b11      	ldr	r3, [pc, #68]	; (80d20 <PIDRegulationTask+0x68>)
   80cda:	4798      	blx	r3
   80cdc:	ac02      	add	r4, sp, #8
   80cde:	f824 0d02 	strh.w	r0, [r4, #-2]!
	const portTickType xFrequency =  DTIME_MS; // Run between 50-100ms

	vTaskDelay(1000);
   80ce2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   80ce6:	4b0f      	ldr	r3, [pc, #60]	; (80d24 <PIDRegulationTask+0x6c>)
   80ce8:	4798      	blx	r3

	//set constants
	kD_Gain = kD_Gain/DT_SECONDS;
   80cea:	4d0f      	ldr	r5, [pc, #60]	; (80d28 <PIDRegulationTask+0x70>)
   80cec:	a308      	add	r3, pc, #32	; (adr r3, 80d10 <PIDRegulationTask+0x58>)
   80cee:	e9d3 2300 	ldrd	r2, r3, [r3]
   80cf2:	e9d5 0100 	ldrd	r0, r1, [r5]
   80cf6:	4e0d      	ldr	r6, [pc, #52]	; (80d2c <PIDRegulationTask+0x74>)
   80cf8:	47b0      	blx	r6
   80cfa:	e9c5 0100 	strd	r0, r1, [r5]


	for(;;){
		vTaskDelayUntil(&xLastWakeTime,xFrequency);	// Samplingstid
   80cfe:	4e0c      	ldr	r6, [pc, #48]	; (80d30 <PIDRegulationTask+0x78>)
		PIDRegulate(); // Run PID
   80d00:	4d0c      	ldr	r5, [pc, #48]	; (80d34 <PIDRegulationTask+0x7c>)
	//set constants
	kD_Gain = kD_Gain/DT_SECONDS;


	for(;;){
		vTaskDelayUntil(&xLastWakeTime,xFrequency);	// Samplingstid
   80d02:	2164      	movs	r1, #100	; 0x64
   80d04:	4620      	mov	r0, r4
   80d06:	47b0      	blx	r6
		PIDRegulate(); // Run PID
   80d08:	47a8      	blx	r5
   80d0a:	e7fa      	b.n	80d02 <PIDRegulationTask+0x4a>
   80d0c:	f3af 8000 	nop.w
   80d10:	9999999a 	.word	0x9999999a
   80d14:	3fb99999 	.word	0x3fb99999
   80d18:	20070a70 	.word	0x20070a70
   80d1c:	00081941 	.word	0x00081941
   80d20:	00081dcd 	.word	0x00081dcd
   80d24:	000820b5 	.word	0x000820b5
   80d28:	20070a78 	.word	0x20070a78
   80d2c:	000831d5 	.word	0x000831d5
   80d30:	0008201d 	.word	0x0008201d
   80d34:	00080aa1 	.word	0x00080aa1

00080d38 <PWMSetup>:
#include <asf.h>
#include "PWMCustom.h"
#include "global_variables.h"

void PWMSetup()
{
   80d38:	b530      	push	{r4, r5, lr}
   80d3a:	b085      	sub	sp, #20
	pmc_enable_periph_clk(ID_PWM);
   80d3c:	2024      	movs	r0, #36	; 0x24
   80d3e:	4b12      	ldr	r3, [pc, #72]	; (80d88 <PWMSetup+0x50>)
   80d40:	4798      	blx	r3
	pwm_channel_disable(PWM, PWM_CHANNEL_6);
   80d42:	4c12      	ldr	r4, [pc, #72]	; (80d8c <PWMSetup+0x54>)
   80d44:	2106      	movs	r1, #6
   80d46:	4620      	mov	r0, r4
   80d48:	4b11      	ldr	r3, [pc, #68]	; (80d90 <PWMSetup+0x58>)
   80d4a:	4798      	blx	r3
	pwm_clock_t pwm_clock ={
   80d4c:	4b11      	ldr	r3, [pc, #68]	; (80d94 <PWMSetup+0x5c>)
   80d4e:	9301      	str	r3, [sp, #4]
   80d50:	2500      	movs	r5, #0
   80d52:	9502      	str	r5, [sp, #8]
   80d54:	4b10      	ldr	r3, [pc, #64]	; (80d98 <PWMSetup+0x60>)
   80d56:	9303      	str	r3, [sp, #12]
		.ul_clka = 10000*100,
		.ul_clkb = 0,
		.ul_mck = sysclk_get_cpu_hz()
	};
	pwm_init(PWM, &pwm_clock);
   80d58:	a901      	add	r1, sp, #4
   80d5a:	4620      	mov	r0, r4
   80d5c:	4b0f      	ldr	r3, [pc, #60]	; (80d9c <PWMSetup+0x64>)
   80d5e:	4798      	blx	r3

	pwm_channel.alignment = PWM_ALIGN_LEFT;
   80d60:	490f      	ldr	r1, [pc, #60]	; (80da0 <PWMSetup+0x68>)
   80d62:	810d      	strh	r5, [r1, #8]
	pwm_channel.polarity = PWM_LOW;
   80d64:	728d      	strb	r5, [r1, #10]
	pwm_channel.ul_prescaler = PWM_CMR_CPRE_CLKA;
   80d66:	230b      	movs	r3, #11
   80d68:	604b      	str	r3, [r1, #4]
	pwm_channel.ul_duty = 0;
   80d6a:	60cd      	str	r5, [r1, #12]
	pwm_channel.ul_period = 100;
   80d6c:	2364      	movs	r3, #100	; 0x64
   80d6e:	610b      	str	r3, [r1, #16]
	pwm_channel.channel = PWM_CHANNEL_6;
   80d70:	2506      	movs	r5, #6
   80d72:	600d      	str	r5, [r1, #0]
	pwm_channel_init(PWM, &pwm_channel);
   80d74:	4620      	mov	r0, r4
   80d76:	4b0b      	ldr	r3, [pc, #44]	; (80da4 <PWMSetup+0x6c>)
   80d78:	4798      	blx	r3
	pwm_channel_enable(PWM, PWM_CHANNEL_6);
   80d7a:	4629      	mov	r1, r5
   80d7c:	4620      	mov	r0, r4
   80d7e:	4b0a      	ldr	r3, [pc, #40]	; (80da8 <PWMSetup+0x70>)
   80d80:	4798      	blx	r3
}
   80d82:	b005      	add	sp, #20
   80d84:	bd30      	pop	{r4, r5, pc}
   80d86:	bf00      	nop
   80d88:	00080801 	.word	0x00080801
   80d8c:	40094000 	.word	0x40094000
   80d90:	00082ab9 	.word	0x00082ab9
   80d94:	000f4240 	.word	0x000f4240
   80d98:	0501bd00 	.word	0x0501bd00
   80d9c:	0008293d 	.word	0x0008293d
   80da0:	20078c74 	.word	0x20078c74
   80da4:	00082989 	.word	0x00082989
   80da8:	00082aad 	.word	0x00082aad

00080dac <PWMDutyCycle>:

void PWMDutyCycle(int value){
   80dac:	b508      	push	{r3, lr}
	pwm_channel_update_duty(PWM, &pwm_channel, value);
   80dae:	4602      	mov	r2, r0
   80db0:	4902      	ldr	r1, [pc, #8]	; (80dbc <PWMDutyCycle+0x10>)
   80db2:	4803      	ldr	r0, [pc, #12]	; (80dc0 <PWMDutyCycle+0x14>)
   80db4:	4b03      	ldr	r3, [pc, #12]	; (80dc4 <PWMDutyCycle+0x18>)
   80db6:	4798      	blx	r3
   80db8:	bd08      	pop	{r3, pc}
   80dba:	bf00      	nop
   80dbc:	20078c74 	.word	0x20078c74
   80dc0:	40094000 	.word	0x40094000
   80dc4:	00082a91 	.word	0x00082a91

00080dc8 <shieldInit>:
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   80dc8:	4b07      	ldr	r3, [pc, #28]	; (80de8 <shieldInit+0x20>)
   80dca:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   80dce:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   80dd0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   80dd4:	635a      	str	r2, [r3, #52]	; 0x34
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   80dd6:	f503 7300 	add.w	r3, r3, #512	; 0x200
   80dda:	f44f 7280 	mov.w	r2, #256	; 0x100
   80dde:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   80de0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   80de4:	631a      	str	r2, [r3, #48]	; 0x30
   80de6:	4770      	bx	lr
   80de8:	400e1200 	.word	0x400e1200

00080dec <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
   80dec:	b5f0      	push	{r4, r5, r6, r7, lr}
   80dee:	b083      	sub	sp, #12
   80df0:	4604      	mov	r4, r0
   80df2:	460d      	mov	r5, r1
	uint32_t val = 0;
   80df4:	2300      	movs	r3, #0
   80df6:	9301      	str	r3, [sp, #4]

	/* Avoid Cppcheck Warning */
	UNUSED(val);

#ifdef UART
	if (UART == (Uart*)p_usart) {
   80df8:	4b1f      	ldr	r3, [pc, #124]	; (80e78 <usart_serial_getchar+0x8c>)
   80dfa:	4298      	cmp	r0, r3
   80dfc:	d107      	bne.n	80e0e <usart_serial_getchar+0x22>
		while (uart_read((Uart*)p_usart, data));
   80dfe:	461f      	mov	r7, r3
   80e00:	4e1e      	ldr	r6, [pc, #120]	; (80e7c <usart_serial_getchar+0x90>)
   80e02:	4629      	mov	r1, r5
   80e04:	4638      	mov	r0, r7
   80e06:	47b0      	blx	r6
   80e08:	2800      	cmp	r0, #0
   80e0a:	d1fa      	bne.n	80e02 <usart_serial_getchar+0x16>
   80e0c:	e019      	b.n	80e42 <usart_serial_getchar+0x56>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   80e0e:	4b1c      	ldr	r3, [pc, #112]	; (80e80 <usart_serial_getchar+0x94>)
   80e10:	4298      	cmp	r0, r3
   80e12:	d109      	bne.n	80e28 <usart_serial_getchar+0x3c>
		while (usart_read(p_usart, &val));
   80e14:	461f      	mov	r7, r3
   80e16:	4e1b      	ldr	r6, [pc, #108]	; (80e84 <usart_serial_getchar+0x98>)
   80e18:	a901      	add	r1, sp, #4
   80e1a:	4638      	mov	r0, r7
   80e1c:	47b0      	blx	r6
   80e1e:	2800      	cmp	r0, #0
   80e20:	d1fa      	bne.n	80e18 <usart_serial_getchar+0x2c>
		*data = (uint8_t)(val & 0xFF);
   80e22:	9b01      	ldr	r3, [sp, #4]
   80e24:	702b      	strb	r3, [r5, #0]
   80e26:	e019      	b.n	80e5c <usart_serial_getchar+0x70>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   80e28:	4b17      	ldr	r3, [pc, #92]	; (80e88 <usart_serial_getchar+0x9c>)
   80e2a:	4298      	cmp	r0, r3
   80e2c:	d109      	bne.n	80e42 <usart_serial_getchar+0x56>
		while (usart_read(p_usart, &val));
   80e2e:	461e      	mov	r6, r3
   80e30:	4c14      	ldr	r4, [pc, #80]	; (80e84 <usart_serial_getchar+0x98>)
   80e32:	a901      	add	r1, sp, #4
   80e34:	4630      	mov	r0, r6
   80e36:	47a0      	blx	r4
   80e38:	2800      	cmp	r0, #0
   80e3a:	d1fa      	bne.n	80e32 <usart_serial_getchar+0x46>
		*data = (uint8_t)(val & 0xFF);
   80e3c:	9b01      	ldr	r3, [sp, #4]
   80e3e:	702b      	strb	r3, [r5, #0]
   80e40:	e018      	b.n	80e74 <usart_serial_getchar+0x88>
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   80e42:	4b12      	ldr	r3, [pc, #72]	; (80e8c <usart_serial_getchar+0xa0>)
   80e44:	429c      	cmp	r4, r3
   80e46:	d109      	bne.n	80e5c <usart_serial_getchar+0x70>
		while (usart_read(p_usart, &val));
   80e48:	461e      	mov	r6, r3
   80e4a:	4c0e      	ldr	r4, [pc, #56]	; (80e84 <usart_serial_getchar+0x98>)
   80e4c:	a901      	add	r1, sp, #4
   80e4e:	4630      	mov	r0, r6
   80e50:	47a0      	blx	r4
   80e52:	2800      	cmp	r0, #0
   80e54:	d1fa      	bne.n	80e4c <usart_serial_getchar+0x60>
		*data = (uint8_t)(val & 0xFF);
   80e56:	9b01      	ldr	r3, [sp, #4]
   80e58:	702b      	strb	r3, [r5, #0]
   80e5a:	e00b      	b.n	80e74 <usart_serial_getchar+0x88>
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   80e5c:	4b0c      	ldr	r3, [pc, #48]	; (80e90 <usart_serial_getchar+0xa4>)
   80e5e:	429c      	cmp	r4, r3
   80e60:	d108      	bne.n	80e74 <usart_serial_getchar+0x88>
		while (usart_read(p_usart, &val));
   80e62:	461e      	mov	r6, r3
   80e64:	4c07      	ldr	r4, [pc, #28]	; (80e84 <usart_serial_getchar+0x98>)
   80e66:	a901      	add	r1, sp, #4
   80e68:	4630      	mov	r0, r6
   80e6a:	47a0      	blx	r4
   80e6c:	2800      	cmp	r0, #0
   80e6e:	d1fa      	bne.n	80e66 <usart_serial_getchar+0x7a>
		*data = (uint8_t)(val & 0xFF);
   80e70:	9b01      	ldr	r3, [sp, #4]
   80e72:	702b      	strb	r3, [r5, #0]
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
   80e74:	b003      	add	sp, #12
   80e76:	bdf0      	pop	{r4, r5, r6, r7, pc}
   80e78:	400e0800 	.word	0x400e0800
   80e7c:	00082b15 	.word	0x00082b15
   80e80:	40098000 	.word	0x40098000
   80e84:	00080869 	.word	0x00080869
   80e88:	4009c000 	.word	0x4009c000
   80e8c:	400a0000 	.word	0x400a0000
   80e90:	400a4000 	.word	0x400a4000

00080e94 <usart_serial_putchar>:
 *   \retval 1  The character was written.
 *   \retval 0  The function timed out before the USART transmitter became
 * ready to send.
 */
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
   80e94:	b570      	push	{r4, r5, r6, lr}
   80e96:	460c      	mov	r4, r1
#ifdef UART
	if (UART == (Uart*)p_usart) {
   80e98:	4b1e      	ldr	r3, [pc, #120]	; (80f14 <usart_serial_putchar+0x80>)
   80e9a:	4298      	cmp	r0, r3
   80e9c:	d108      	bne.n	80eb0 <usart_serial_putchar+0x1c>
		while (uart_write((Uart*)p_usart, c)!=0);
   80e9e:	461e      	mov	r6, r3
   80ea0:	4d1d      	ldr	r5, [pc, #116]	; (80f18 <usart_serial_putchar+0x84>)
   80ea2:	4621      	mov	r1, r4
   80ea4:	4630      	mov	r0, r6
   80ea6:	47a8      	blx	r5
   80ea8:	2800      	cmp	r0, #0
   80eaa:	d1fa      	bne.n	80ea2 <usart_serial_putchar+0xe>
		return 1;
   80eac:	2001      	movs	r0, #1
   80eae:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   80eb0:	4b1a      	ldr	r3, [pc, #104]	; (80f1c <usart_serial_putchar+0x88>)
   80eb2:	4298      	cmp	r0, r3
   80eb4:	d108      	bne.n	80ec8 <usart_serial_putchar+0x34>
		while (usart_write(p_usart, c)!=0);
   80eb6:	461e      	mov	r6, r3
   80eb8:	4d19      	ldr	r5, [pc, #100]	; (80f20 <usart_serial_putchar+0x8c>)
   80eba:	4621      	mov	r1, r4
   80ebc:	4630      	mov	r0, r6
   80ebe:	47a8      	blx	r5
   80ec0:	2800      	cmp	r0, #0
   80ec2:	d1fa      	bne.n	80eba <usart_serial_putchar+0x26>
		return 1;
   80ec4:	2001      	movs	r0, #1
   80ec6:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   80ec8:	4b16      	ldr	r3, [pc, #88]	; (80f24 <usart_serial_putchar+0x90>)
   80eca:	4298      	cmp	r0, r3
   80ecc:	d108      	bne.n	80ee0 <usart_serial_putchar+0x4c>
		while (usart_write(p_usart, c)!=0);
   80ece:	461e      	mov	r6, r3
   80ed0:	4d13      	ldr	r5, [pc, #76]	; (80f20 <usart_serial_putchar+0x8c>)
   80ed2:	4621      	mov	r1, r4
   80ed4:	4630      	mov	r0, r6
   80ed6:	47a8      	blx	r5
   80ed8:	2800      	cmp	r0, #0
   80eda:	d1fa      	bne.n	80ed2 <usart_serial_putchar+0x3e>
		return 1;
   80edc:	2001      	movs	r0, #1
   80ede:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   80ee0:	4b11      	ldr	r3, [pc, #68]	; (80f28 <usart_serial_putchar+0x94>)
   80ee2:	4298      	cmp	r0, r3
   80ee4:	d108      	bne.n	80ef8 <usart_serial_putchar+0x64>
		while (usart_write(p_usart, c)!=0);
   80ee6:	461e      	mov	r6, r3
   80ee8:	4d0d      	ldr	r5, [pc, #52]	; (80f20 <usart_serial_putchar+0x8c>)
   80eea:	4621      	mov	r1, r4
   80eec:	4630      	mov	r0, r6
   80eee:	47a8      	blx	r5
   80ef0:	2800      	cmp	r0, #0
   80ef2:	d1fa      	bne.n	80eea <usart_serial_putchar+0x56>
		return 1;
   80ef4:	2001      	movs	r0, #1
   80ef6:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   80ef8:	4b0c      	ldr	r3, [pc, #48]	; (80f2c <usart_serial_putchar+0x98>)
   80efa:	4298      	cmp	r0, r3
   80efc:	d108      	bne.n	80f10 <usart_serial_putchar+0x7c>
		while (usart_write(p_usart, c)!=0);
   80efe:	461e      	mov	r6, r3
   80f00:	4d07      	ldr	r5, [pc, #28]	; (80f20 <usart_serial_putchar+0x8c>)
   80f02:	4621      	mov	r1, r4
   80f04:	4630      	mov	r0, r6
   80f06:	47a8      	blx	r5
   80f08:	2800      	cmp	r0, #0
   80f0a:	d1fa      	bne.n	80f02 <usart_serial_putchar+0x6e>
		return 1;
   80f0c:	2001      	movs	r0, #1
   80f0e:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
	}
# endif
#endif /* ifdef USART */

	return 0;
   80f10:	2000      	movs	r0, #0
}
   80f12:	bd70      	pop	{r4, r5, r6, pc}
   80f14:	400e0800 	.word	0x400e0800
   80f18:	00082b05 	.word	0x00082b05
   80f1c:	40098000 	.word	0x40098000
   80f20:	00080855 	.word	0x00080855
   80f24:	4009c000 	.word	0x4009c000
   80f28:	400a0000 	.word	0x400a0000
   80f2c:	400a4000 	.word	0x400a4000

00080f30 <configure_console>:
#include "UARTFunctions.h"
#include "uart.h"
#include "conf_uart_serial.h"
#include "global_variables.h"

void configure_console(void){
   80f30:	b530      	push	{r4, r5, lr}
   80f32:	b085      	sub	sp, #20
   80f34:	2008      	movs	r0, #8
   80f36:	4d18      	ldr	r5, [pc, #96]	; (80f98 <configure_console+0x68>)
   80f38:	47a8      	blx	r5
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
   80f3a:	4c18      	ldr	r4, [pc, #96]	; (80f9c <configure_console+0x6c>)
   80f3c:	4b18      	ldr	r3, [pc, #96]	; (80fa0 <configure_console+0x70>)
   80f3e:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
   80f40:	4a18      	ldr	r2, [pc, #96]	; (80fa4 <configure_console+0x74>)
   80f42:	4b19      	ldr	r3, [pc, #100]	; (80fa8 <configure_console+0x78>)
   80f44:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
   80f46:	4a19      	ldr	r2, [pc, #100]	; (80fac <configure_console+0x7c>)
   80f48:	4b19      	ldr	r3, [pc, #100]	; (80fb0 <configure_console+0x80>)
   80f4a:	601a      	str	r2, [r3, #0]
static inline void usart_serial_init(usart_if p_usart,
		usart_serial_options_t *opt)
{
#if ((!SAM4L) && (!SAMG55))
	sam_uart_opt_t uart_settings;
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
   80f4c:	4b19      	ldr	r3, [pc, #100]	; (80fb4 <configure_console+0x84>)
   80f4e:	9301      	str	r3, [sp, #4]
	uart_settings.ul_baudrate = opt->baudrate;
   80f50:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
   80f54:	9302      	str	r3, [sp, #8]
	uart_settings.ul_mode = opt->paritytype;
   80f56:	f44f 6300 	mov.w	r3, #2048	; 0x800
   80f5a:	9303      	str	r3, [sp, #12]
   80f5c:	2008      	movs	r0, #8
   80f5e:	47a8      	blx	r5
	
#ifdef UART
	if (UART == (Uart*)p_usart) {
		sysclk_enable_peripheral_clock(ID_UART);
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
   80f60:	a901      	add	r1, sp, #4
   80f62:	4620      	mov	r0, r4
   80f64:	4b14      	ldr	r3, [pc, #80]	; (80fb8 <configure_console+0x88>)
   80f66:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
   80f68:	4d14      	ldr	r5, [pc, #80]	; (80fbc <configure_console+0x8c>)
   80f6a:	682b      	ldr	r3, [r5, #0]
   80f6c:	2100      	movs	r1, #0
   80f6e:	6898      	ldr	r0, [r3, #8]
   80f70:	4c13      	ldr	r4, [pc, #76]	; (80fc0 <configure_console+0x90>)
   80f72:	47a0      	blx	r4
	setbuf(stdin, NULL);
   80f74:	682b      	ldr	r3, [r5, #0]
   80f76:	2100      	movs	r1, #0
   80f78:	6858      	ldr	r0, [r3, #4]
   80f7a:	47a0      	blx	r4
		ioport_port_mask_t mask, ioport_mode_t mode)
{
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
   80f7c:	4b11      	ldr	r3, [pc, #68]	; (80fc4 <configure_console+0x94>)
   80f7e:	f44f 7280 	mov.w	r2, #256	; 0x100
   80f82:	665a      	str	r2, [r3, #100]	; 0x64
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
   80f84:	655a      	str	r2, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
   80f86:	625a      	str	r2, [r3, #36]	; 0x24
#else
		base->PIO_IFSCER = mask;
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
   80f88:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

#if !defined(IOPORT_MODE_MUX_BIT1)
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABSR |= mask;
	} else {
		base->PIO_ABSR &= ~mask;
   80f8c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   80f8e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
   80f92:	671a      	str	r2, [r3, #112]	; 0x70
	// Configure console UART.
	sysclk_enable_peripheral_clock(CONSOLE_UART_ID);
	stdio_serial_init(CONF_UART, &uart_serial_options);
	// configure RX0 pin as pull-up otherwise it won't receive anything (only receive 0)
	ioport_set_pin_mode(PIO_PA8_IDX, IOPORT_MODE_PULLUP);
}
   80f94:	b005      	add	sp, #20
   80f96:	bd30      	pop	{r4, r5, pc}
   80f98:	00080801 	.word	0x00080801
   80f9c:	400e0800 	.word	0x400e0800
   80fa0:	20078ca4 	.word	0x20078ca4
   80fa4:	00080e95 	.word	0x00080e95
   80fa8:	20078ca0 	.word	0x20078ca0
   80fac:	00080ded 	.word	0x00080ded
   80fb0:	20078c9c 	.word	0x20078c9c
   80fb4:	0501bd00 	.word	0x0501bd00
   80fb8:	00082ac5 	.word	0x00082ac5
   80fbc:	20070580 	.word	0x20070580
   80fc0:	00083aad 	.word	0x00083aad
   80fc4:	400e0e00 	.word	0x400e0e00

00080fc8 <getPIDValues>:

/* Function that receives values from Matlab */
void getPIDValues()
{
   80fc8:	b570      	push	{r4, r5, r6, lr}
   80fca:	b082      	sub	sp, #8
	// divier which is used to decode encoded doubles sent from Matlab
	const uint8_t divider = 100;

	isMatlab = 0; // 1 for matlab, 0 for terminal debugging
   80fcc:	2300      	movs	r3, #0
   80fce:	4a57      	ldr	r2, [pc, #348]	; (8112c <getPIDValues+0x164>)
   80fd0:	7013      	strb	r3, [r2, #0]
	uint16_t kP_Gain_temp = 0;
   80fd2:	f8ad 3006 	strh.w	r3, [sp, #6]
	uint16_t kI_Gain_temp = 0;
   80fd6:	f8ad 3004 	strh.w	r3, [sp, #4]
	uint16_t kD_Gain_temp = 0;
   80fda:	f8ad 3002 	strh.w	r3, [sp, #2]
	while (!uart_is_rx_ready (CONF_UART)){
   80fde:	4d54      	ldr	r5, [pc, #336]	; (81130 <getPIDValues+0x168>)
   80fe0:	4c54      	ldr	r4, [pc, #336]	; (81134 <getPIDValues+0x16c>)
		vTaskDelay(1);
   80fe2:	4e55      	ldr	r6, [pc, #340]	; (81138 <getPIDValues+0x170>)

	isMatlab = 0; // 1 for matlab, 0 for terminal debugging
	uint16_t kP_Gain_temp = 0;
	uint16_t kI_Gain_temp = 0;
	uint16_t kD_Gain_temp = 0;
	while (!uart_is_rx_ready (CONF_UART)){
   80fe4:	e001      	b.n	80fea <getPIDValues+0x22>
		vTaskDelay(1);
   80fe6:	2001      	movs	r0, #1
   80fe8:	47b0      	blx	r6

	isMatlab = 0; // 1 for matlab, 0 for terminal debugging
	uint16_t kP_Gain_temp = 0;
	uint16_t kI_Gain_temp = 0;
	uint16_t kD_Gain_temp = 0;
	while (!uart_is_rx_ready (CONF_UART)){
   80fea:	4628      	mov	r0, r5
   80fec:	47a0      	blx	r4
   80fee:	2800      	cmp	r0, #0
   80ff0:	d0f9      	beq.n	80fe6 <getPIDValues+0x1e>
		vTaskDelay(1);
	}
	uart_read(CONF_UART, &isMatlab);
   80ff2:	4c4e      	ldr	r4, [pc, #312]	; (8112c <getPIDValues+0x164>)
   80ff4:	4621      	mov	r1, r4
   80ff6:	484e      	ldr	r0, [pc, #312]	; (81130 <getPIDValues+0x168>)
   80ff8:	4b50      	ldr	r3, [pc, #320]	; (8113c <getPIDValues+0x174>)
   80ffa:	4798      	blx	r3
	if(isMatlab == 48){ // Receive 48 because its char, 48 = 0
   80ffc:	7823      	ldrb	r3, [r4, #0]
   80ffe:	2b30      	cmp	r3, #48	; 0x30
   81000:	d124      	bne.n	8104c <getPIDValues+0x84>
		isMatlab = 0; // save 0 to indicate is not Matlab COM
   81002:	2200      	movs	r2, #0
   81004:	7022      	strb	r2, [r4, #0]
		printf("Terminal debugging enabled\n");
   81006:	484e      	ldr	r0, [pc, #312]	; (81140 <getPIDValues+0x178>)
   81008:	4c4e      	ldr	r4, [pc, #312]	; (81144 <getPIDValues+0x17c>)
   8100a:	47a0      	blx	r4
		// Set debugging values
		kP_Gain_temp = KP_GAIN_DEBUGGING;
   8100c:	233c      	movs	r3, #60	; 0x3c
   8100e:	f8ad 3006 	strh.w	r3, [sp, #6]
		kI_Gain_temp = KI_GAIN_DEBUGGING;
   81012:	2209      	movs	r2, #9
   81014:	f8ad 2004 	strh.w	r2, [sp, #4]
		kD_Gain_temp = KD_GAIN_DEBUGGING;
   81018:	f8ad 3002 	strh.w	r3, [sp, #2]
		setPoint = SETPOINT_DEBUGGING;
   8101c:	4d4a      	ldr	r5, [pc, #296]	; (81148 <getPIDValues+0x180>)
   8101e:	2314      	movs	r3, #20
   81020:	602b      	str	r3, [r5, #0]
		printf("Preset values:\n");
   81022:	484a      	ldr	r0, [pc, #296]	; (8114c <getPIDValues+0x184>)
   81024:	47a0      	blx	r4
		printf("kP: %u\n\r", (uint16_t)(kP_Gain_temp));
   81026:	f8bd 1006 	ldrh.w	r1, [sp, #6]
   8102a:	4849      	ldr	r0, [pc, #292]	; (81150 <getPIDValues+0x188>)
   8102c:	47a0      	blx	r4
		printf("kI: %u\n\r", (uint16_t)(kI_Gain_temp));
   8102e:	f8bd 1004 	ldrh.w	r1, [sp, #4]
   81032:	4848      	ldr	r0, [pc, #288]	; (81154 <getPIDValues+0x18c>)
   81034:	47a0      	blx	r4
		printf("kD: %u\n\r", (uint16_t)(kD_Gain_temp));
   81036:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   8103a:	4847      	ldr	r0, [pc, #284]	; (81158 <getPIDValues+0x190>)
   8103c:	47a0      	blx	r4
		printf("Setpoint: %u\n\r", setPoint);
   8103e:	6829      	ldr	r1, [r5, #0]
   81040:	4846      	ldr	r0, [pc, #280]	; (8115c <getPIDValues+0x194>)
   81042:	47a0      	blx	r4
   81044:	e039      	b.n	810ba <getPIDValues+0xf2>
		} else {
		while (!uart_is_rx_ready (CONF_UART)){
			vTaskDelay(1);
   81046:	2001      	movs	r0, #1
   81048:	47b0      	blx	r6
   8104a:	e002      	b.n	81052 <getPIDValues+0x8a>
		printf("kP: %u\n\r", (uint16_t)(kP_Gain_temp));
		printf("kI: %u\n\r", (uint16_t)(kI_Gain_temp));
		printf("kD: %u\n\r", (uint16_t)(kD_Gain_temp));
		printf("Setpoint: %u\n\r", setPoint);
		} else {
		while (!uart_is_rx_ready (CONF_UART)){
   8104c:	4d38      	ldr	r5, [pc, #224]	; (81130 <getPIDValues+0x168>)
   8104e:	4c39      	ldr	r4, [pc, #228]	; (81134 <getPIDValues+0x16c>)
			vTaskDelay(1);
   81050:	4e39      	ldr	r6, [pc, #228]	; (81138 <getPIDValues+0x170>)
		printf("kP: %u\n\r", (uint16_t)(kP_Gain_temp));
		printf("kI: %u\n\r", (uint16_t)(kI_Gain_temp));
		printf("kD: %u\n\r", (uint16_t)(kD_Gain_temp));
		printf("Setpoint: %u\n\r", setPoint);
		} else {
		while (!uart_is_rx_ready (CONF_UART)){
   81052:	4628      	mov	r0, r5
   81054:	47a0      	blx	r4
   81056:	2800      	cmp	r0, #0
   81058:	d0f5      	beq.n	81046 <getPIDValues+0x7e>
			vTaskDelay(1);
		}

		uart_read(CONF_UART, &kP_Gain_temp);
   8105a:	f10d 0106 	add.w	r1, sp, #6
   8105e:	4834      	ldr	r0, [pc, #208]	; (81130 <getPIDValues+0x168>)
   81060:	4b36      	ldr	r3, [pc, #216]	; (8113c <getPIDValues+0x174>)
   81062:	4798      	blx	r3
		while (!uart_is_rx_ready (CONF_UART)){
   81064:	4d32      	ldr	r5, [pc, #200]	; (81130 <getPIDValues+0x168>)
   81066:	4c33      	ldr	r4, [pc, #204]	; (81134 <getPIDValues+0x16c>)
			vTaskDelay(1);
   81068:	4e33      	ldr	r6, [pc, #204]	; (81138 <getPIDValues+0x170>)
		while (!uart_is_rx_ready (CONF_UART)){
			vTaskDelay(1);
		}

		uart_read(CONF_UART, &kP_Gain_temp);
		while (!uart_is_rx_ready (CONF_UART)){
   8106a:	e001      	b.n	81070 <getPIDValues+0xa8>
			vTaskDelay(1);
   8106c:	2001      	movs	r0, #1
   8106e:	47b0      	blx	r6
		while (!uart_is_rx_ready (CONF_UART)){
			vTaskDelay(1);
		}

		uart_read(CONF_UART, &kP_Gain_temp);
		while (!uart_is_rx_ready (CONF_UART)){
   81070:	4628      	mov	r0, r5
   81072:	47a0      	blx	r4
   81074:	2800      	cmp	r0, #0
   81076:	d0f9      	beq.n	8106c <getPIDValues+0xa4>
			vTaskDelay(1);
		}
		uart_read(CONF_UART, &kI_Gain_temp);
   81078:	a901      	add	r1, sp, #4
   8107a:	482d      	ldr	r0, [pc, #180]	; (81130 <getPIDValues+0x168>)
   8107c:	4b2f      	ldr	r3, [pc, #188]	; (8113c <getPIDValues+0x174>)
   8107e:	4798      	blx	r3
		while (!uart_is_rx_ready (CONF_UART)){
   81080:	4d2b      	ldr	r5, [pc, #172]	; (81130 <getPIDValues+0x168>)
   81082:	4c2c      	ldr	r4, [pc, #176]	; (81134 <getPIDValues+0x16c>)
			vTaskDelay(1);
   81084:	4e2c      	ldr	r6, [pc, #176]	; (81138 <getPIDValues+0x170>)
		uart_read(CONF_UART, &kP_Gain_temp);
		while (!uart_is_rx_ready (CONF_UART)){
			vTaskDelay(1);
		}
		uart_read(CONF_UART, &kI_Gain_temp);
		while (!uart_is_rx_ready (CONF_UART)){
   81086:	e001      	b.n	8108c <getPIDValues+0xc4>
			vTaskDelay(1);
   81088:	2001      	movs	r0, #1
   8108a:	47b0      	blx	r6
		uart_read(CONF_UART, &kP_Gain_temp);
		while (!uart_is_rx_ready (CONF_UART)){
			vTaskDelay(1);
		}
		uart_read(CONF_UART, &kI_Gain_temp);
		while (!uart_is_rx_ready (CONF_UART)){
   8108c:	4628      	mov	r0, r5
   8108e:	47a0      	blx	r4
   81090:	2800      	cmp	r0, #0
   81092:	d0f9      	beq.n	81088 <getPIDValues+0xc0>
			vTaskDelay(1);
		};
		uart_read(CONF_UART, &kD_Gain_temp);
   81094:	f10d 0102 	add.w	r1, sp, #2
   81098:	4825      	ldr	r0, [pc, #148]	; (81130 <getPIDValues+0x168>)
   8109a:	4b28      	ldr	r3, [pc, #160]	; (8113c <getPIDValues+0x174>)
   8109c:	4798      	blx	r3
		while (!uart_is_rx_ready (CONF_UART)){
   8109e:	4d24      	ldr	r5, [pc, #144]	; (81130 <getPIDValues+0x168>)
   810a0:	4c24      	ldr	r4, [pc, #144]	; (81134 <getPIDValues+0x16c>)
			vTaskDelay(1);
   810a2:	4e25      	ldr	r6, [pc, #148]	; (81138 <getPIDValues+0x170>)
		uart_read(CONF_UART, &kI_Gain_temp);
		while (!uart_is_rx_ready (CONF_UART)){
			vTaskDelay(1);
		};
		uart_read(CONF_UART, &kD_Gain_temp);
		while (!uart_is_rx_ready (CONF_UART)){
   810a4:	e001      	b.n	810aa <getPIDValues+0xe2>
			vTaskDelay(1);
   810a6:	2001      	movs	r0, #1
   810a8:	47b0      	blx	r6
		uart_read(CONF_UART, &kI_Gain_temp);
		while (!uart_is_rx_ready (CONF_UART)){
			vTaskDelay(1);
		};
		uart_read(CONF_UART, &kD_Gain_temp);
		while (!uart_is_rx_ready (CONF_UART)){
   810aa:	4628      	mov	r0, r5
   810ac:	47a0      	blx	r4
   810ae:	2800      	cmp	r0, #0
   810b0:	d0f9      	beq.n	810a6 <getPIDValues+0xde>
			vTaskDelay(1);
		};
		uart_read(CONF_UART, &setPoint);
   810b2:	4925      	ldr	r1, [pc, #148]	; (81148 <getPIDValues+0x180>)
   810b4:	481e      	ldr	r0, [pc, #120]	; (81130 <getPIDValues+0x168>)
   810b6:	4b21      	ldr	r3, [pc, #132]	; (8113c <getPIDValues+0x174>)
   810b8:	4798      	blx	r3
	}

	//Convert to correct data types
	kP_Gain = (double) ((double) kP_Gain_temp / divider);
   810ba:	f8bd 0006 	ldrh.w	r0, [sp, #6]
   810be:	4b28      	ldr	r3, [pc, #160]	; (81160 <getPIDValues+0x198>)
   810c0:	4798      	blx	r3
   810c2:	2200      	movs	r2, #0
   810c4:	4b27      	ldr	r3, [pc, #156]	; (81164 <getPIDValues+0x19c>)
   810c6:	4c28      	ldr	r4, [pc, #160]	; (81168 <getPIDValues+0x1a0>)
   810c8:	47a0      	blx	r4
   810ca:	4b28      	ldr	r3, [pc, #160]	; (8116c <getPIDValues+0x1a4>)
   810cc:	e9c3 0100 	strd	r0, r1, [r3]
	kI_Gain = (double) (kI_Gain_temp / divider);
   810d0:	f8bd 0004 	ldrh.w	r0, [sp, #4]
   810d4:	4d26      	ldr	r5, [pc, #152]	; (81170 <getPIDValues+0x1a8>)
   810d6:	fb85 3000 	smull	r3, r0, r5, r0
   810da:	4c26      	ldr	r4, [pc, #152]	; (81174 <getPIDValues+0x1ac>)
   810dc:	1140      	asrs	r0, r0, #5
   810de:	47a0      	blx	r4
   810e0:	4b25      	ldr	r3, [pc, #148]	; (81178 <getPIDValues+0x1b0>)
   810e2:	e9c3 0100 	strd	r0, r1, [r3]
	kD_Gain = (double) (kD_Gain_temp / divider);
   810e6:	f8bd 0002 	ldrh.w	r0, [sp, #2]
   810ea:	fb85 3000 	smull	r3, r0, r5, r0
   810ee:	1140      	asrs	r0, r0, #5
   810f0:	47a0      	blx	r4
   810f2:	4b22      	ldr	r3, [pc, #136]	; (8117c <getPIDValues+0x1b4>)
   810f4:	e9c3 0100 	strd	r0, r1, [r3]

	// Wait here untill start signal is sent from matlab
	while (!uart_is_rx_ready (CONF_UART)){
   810f8:	4d0d      	ldr	r5, [pc, #52]	; (81130 <getPIDValues+0x168>)
   810fa:	4c0e      	ldr	r4, [pc, #56]	; (81134 <getPIDValues+0x16c>)
		vTaskDelay(1);
   810fc:	4e0e      	ldr	r6, [pc, #56]	; (81138 <getPIDValues+0x170>)
	kP_Gain = (double) ((double) kP_Gain_temp / divider);
	kI_Gain = (double) (kI_Gain_temp / divider);
	kD_Gain = (double) (kD_Gain_temp / divider);

	// Wait here untill start signal is sent from matlab
	while (!uart_is_rx_ready (CONF_UART)){
   810fe:	e001      	b.n	81104 <getPIDValues+0x13c>
		vTaskDelay(1);
   81100:	2001      	movs	r0, #1
   81102:	47b0      	blx	r6
	kP_Gain = (double) ((double) kP_Gain_temp / divider);
	kI_Gain = (double) (kI_Gain_temp / divider);
	kD_Gain = (double) (kD_Gain_temp / divider);

	// Wait here untill start signal is sent from matlab
	while (!uart_is_rx_ready (CONF_UART)){
   81104:	4628      	mov	r0, r5
   81106:	47a0      	blx	r4
   81108:	2800      	cmp	r0, #0
   8110a:	d0f9      	beq.n	81100 <getPIDValues+0x138>
		vTaskDelay(1);
	};
	// Clear RX buffer
	while (uart_is_rx_ready (CONF_UART)){
   8110c:	4c08      	ldr	r4, [pc, #32]	; (81130 <getPIDValues+0x168>)
   8110e:	4d09      	ldr	r5, [pc, #36]	; (81134 <getPIDValues+0x16c>)
		uint8_t clearBuffer = 0;
		uart_read(CONF_UART, &clearBuffer);
   81110:	4e0a      	ldr	r6, [pc, #40]	; (8113c <getPIDValues+0x174>)
   81112:	e005      	b.n	81120 <getPIDValues+0x158>
	while (!uart_is_rx_ready (CONF_UART)){
		vTaskDelay(1);
	};
	// Clear RX buffer
	while (uart_is_rx_ready (CONF_UART)){
		uint8_t clearBuffer = 0;
   81114:	a902      	add	r1, sp, #8
   81116:	2300      	movs	r3, #0
   81118:	f801 3d07 	strb.w	r3, [r1, #-7]!
		uart_read(CONF_UART, &clearBuffer);
   8111c:	4620      	mov	r0, r4
   8111e:	47b0      	blx	r6
	// Wait here untill start signal is sent from matlab
	while (!uart_is_rx_ready (CONF_UART)){
		vTaskDelay(1);
	};
	// Clear RX buffer
	while (uart_is_rx_ready (CONF_UART)){
   81120:	4620      	mov	r0, r4
   81122:	47a8      	blx	r5
   81124:	2800      	cmp	r0, #0
   81126:	d1f5      	bne.n	81114 <getPIDValues+0x14c>
		uint8_t clearBuffer = 0;
		uart_read(CONF_UART, &clearBuffer);
	};
}
   81128:	b002      	add	sp, #8
   8112a:	bd70      	pop	{r4, r5, r6, pc}
   8112c:	20070144 	.word	0x20070144
   81130:	400e0800 	.word	0x400e0800
   81134:	00082afd 	.word	0x00082afd
   81138:	000820b5 	.word	0x000820b5
   8113c:	00082b15 	.word	0x00082b15
   81140:	00086844 	.word	0x00086844
   81144:	000838fd 	.word	0x000838fd
   81148:	20070a88 	.word	0x20070a88
   8114c:	00086860 	.word	0x00086860
   81150:	00086870 	.word	0x00086870
   81154:	0008687c 	.word	0x0008687c
   81158:	00086888 	.word	0x00086888
   8115c:	00086894 	.word	0x00086894
   81160:	00082e95 	.word	0x00082e95
   81164:	40590000 	.word	0x40590000
   81168:	000831d5 	.word	0x000831d5
   8116c:	20070a68 	.word	0x20070a68
   81170:	51eb851f 	.word	0x51eb851f
   81174:	00082eb5 	.word	0x00082eb5
   81178:	20070a90 	.word	0x20070a90
   8117c:	20070a78 	.word	0x20070a78

00081180 <sendValues>:

/* Function that sends values to Matlab */
void sendValues(){
   81180:	b538      	push	{r3, r4, r5, lr}
	if(!isMatlab){
   81182:	4b0c      	ldr	r3, [pc, #48]	; (811b4 <sendValues+0x34>)
   81184:	781b      	ldrb	r3, [r3, #0]
   81186:	b913      	cbnz	r3, 8118e <sendValues+0xe>
		printf("Values:\n");
   81188:	480b      	ldr	r0, [pc, #44]	; (811b8 <sendValues+0x38>)
   8118a:	4b0c      	ldr	r3, [pc, #48]	; (811bc <sendValues+0x3c>)
   8118c:	4798      	blx	r3
	}
	//printf("%i\n\r", (int32_t)((float)(10000*D_Output)));
	printf("%i\n\r", error);
   8118e:	4d0c      	ldr	r5, [pc, #48]	; (811c0 <sendValues+0x40>)
   81190:	4b0c      	ldr	r3, [pc, #48]	; (811c4 <sendValues+0x44>)
   81192:	6819      	ldr	r1, [r3, #0]
   81194:	4628      	mov	r0, r5
   81196:	4c09      	ldr	r4, [pc, #36]	; (811bc <sendValues+0x3c>)
   81198:	47a0      	blx	r4
	printf("%i\n\r", pwm_val);
   8119a:	4b0b      	ldr	r3, [pc, #44]	; (811c8 <sendValues+0x48>)
   8119c:	6819      	ldr	r1, [r3, #0]
   8119e:	4628      	mov	r0, r5
   811a0:	47a0      	blx	r4
	printf("%i\n\r", distance);
   811a2:	4b0a      	ldr	r3, [pc, #40]	; (811cc <sendValues+0x4c>)
   811a4:	6819      	ldr	r1, [r3, #0]
   811a6:	4628      	mov	r0, r5
   811a8:	47a0      	blx	r4
	printf("%i\n\r", setPoint);
   811aa:	4b09      	ldr	r3, [pc, #36]	; (811d0 <sendValues+0x50>)
   811ac:	6819      	ldr	r1, [r3, #0]
   811ae:	4628      	mov	r0, r5
   811b0:	47a0      	blx	r4
   811b2:	bd38      	pop	{r3, r4, r5, pc}
   811b4:	20070144 	.word	0x20070144
   811b8:	000868a4 	.word	0x000868a4
   811bc:	000838fd 	.word	0x000838fd
   811c0:	000868b0 	.word	0x000868b0
   811c4:	20070a60 	.word	0x20070a60
   811c8:	20070a58 	.word	0x20070a58
   811cc:	20070a5c 	.word	0x20070a5c
   811d0:	20070a88 	.word	0x20070a88

000811d4 <SerialComTask>:
#include "UARTFunctions.h"
#include "ADCCustom.h"
#include "testFunctions.h"

void SerialComTask (void *pvParameters)
{
   811d4:	b5f0      	push	{r4, r5, r6, r7, lr}
   811d6:	b083      	sub	sp, #12
	getPIDValues(); // Get Values from Matlab
   811d8:	4b10      	ldr	r3, [pc, #64]	; (8121c <SerialComTask+0x48>)
   811da:	4798      	blx	r3

	xSemaphoreGive(sem); // Tell PID Task to start
   811dc:	2300      	movs	r3, #0
   811de:	461a      	mov	r2, r3
   811e0:	4619      	mov	r1, r3
   811e2:	480f      	ldr	r0, [pc, #60]	; (81220 <SerialComTask+0x4c>)
   811e4:	6800      	ldr	r0, [r0, #0]
   811e6:	4c0f      	ldr	r4, [pc, #60]	; (81224 <SerialComTask+0x50>)
   811e8:	47a0      	blx	r4

	for(;;){

		// Wait here for Matlab to send signal its ready to receive values
		while (!uart_is_rx_ready (CONF_UART)){
   811ea:	4c0f      	ldr	r4, [pc, #60]	; (81228 <SerialComTask+0x54>)
   811ec:	4d0f      	ldr	r5, [pc, #60]	; (8122c <SerialComTask+0x58>)
		};

		// Clear RX buffer
		while (uart_is_rx_ready (CONF_UART)){
			uint8_t clearBuffer = 0;
			uart_read(CONF_UART, &clearBuffer);
   811ee:	4e10      	ldr	r6, [pc, #64]	; (81230 <SerialComTask+0x5c>)
		};

		sendValues(); // Send values to MATLAB for graphing
   811f0:	4f10      	ldr	r7, [pc, #64]	; (81234 <SerialComTask+0x60>)
   811f2:	e002      	b.n	811fa <SerialComTask+0x26>

	for(;;){

		// Wait here for Matlab to send signal its ready to receive values
		while (!uart_is_rx_ready (CONF_UART)){
			vTaskDelay(1);
   811f4:	2001      	movs	r0, #1
   811f6:	4b10      	ldr	r3, [pc, #64]	; (81238 <SerialComTask+0x64>)
   811f8:	4798      	blx	r3
	xSemaphoreGive(sem); // Tell PID Task to start

	for(;;){

		// Wait here for Matlab to send signal its ready to receive values
		while (!uart_is_rx_ready (CONF_UART)){
   811fa:	4620      	mov	r0, r4
   811fc:	47a8      	blx	r5
   811fe:	2800      	cmp	r0, #0
   81200:	d0f8      	beq.n	811f4 <SerialComTask+0x20>
   81202:	e005      	b.n	81210 <SerialComTask+0x3c>
			vTaskDelay(1);
		};

		// Clear RX buffer
		while (uart_is_rx_ready (CONF_UART)){
			uint8_t clearBuffer = 0;
   81204:	a902      	add	r1, sp, #8
   81206:	2300      	movs	r3, #0
   81208:	f801 3d01 	strb.w	r3, [r1, #-1]!
			uart_read(CONF_UART, &clearBuffer);
   8120c:	4620      	mov	r0, r4
   8120e:	47b0      	blx	r6
		while (!uart_is_rx_ready (CONF_UART)){
			vTaskDelay(1);
		};

		// Clear RX buffer
		while (uart_is_rx_ready (CONF_UART)){
   81210:	4620      	mov	r0, r4
   81212:	47a8      	blx	r5
   81214:	2800      	cmp	r0, #0
   81216:	d1f5      	bne.n	81204 <SerialComTask+0x30>
			uint8_t clearBuffer = 0;
			uart_read(CONF_UART, &clearBuffer);
		};

		sendValues(); // Send values to MATLAB for graphing
   81218:	47b8      	blx	r7
	}
   8121a:	e7ee      	b.n	811fa <SerialComTask+0x26>
   8121c:	00080fc9 	.word	0x00080fc9
   81220:	20070a70 	.word	0x20070a70
   81224:	00081789 	.word	0x00081789
   81228:	400e0800 	.word	0x400e0800
   8122c:	00082afd 	.word	0x00082afd
   81230:	00082b15 	.word	0x00082b15
   81234:	00081181 	.word	0x00081181
   81238:	000820b5 	.word	0x000820b5

0008123c <vListInitialise>:
void vListInitialise( xList *pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
   8123c:	f100 0308 	add.w	r3, r0, #8
   81240:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
   81242:	f64f 72ff 	movw	r2, #65535	; 0xffff
   81246:	8102      	strh	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
   81248:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
   8124a:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
   8124c:	2300      	movs	r3, #0
   8124e:	6003      	str	r3, [r0, #0]
   81250:	4770      	bx	lr
   81252:	bf00      	nop

00081254 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
   81254:	2300      	movs	r3, #0
   81256:	6103      	str	r3, [r0, #16]
   81258:	4770      	bx	lr
   8125a:	bf00      	nop

0008125c <vListInsertEnd>:

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
   8125c:	6843      	ldr	r3, [r0, #4]

	pxNewListItem->pxNext = pxIndex->pxNext;
   8125e:	685a      	ldr	r2, [r3, #4]
   81260:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxPrevious = pxList->pxIndex;
   81262:	6842      	ldr	r2, [r0, #4]
   81264:	608a      	str	r2, [r1, #8]
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
   81266:	685a      	ldr	r2, [r3, #4]
   81268:	6091      	str	r1, [r2, #8]
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
   8126a:	6059      	str	r1, [r3, #4]
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
   8126c:	6041      	str	r1, [r0, #4]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   8126e:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
   81270:	6803      	ldr	r3, [r0, #0]
   81272:	3301      	adds	r3, #1
   81274:	6003      	str	r3, [r0, #0]
   81276:	4770      	bx	lr

00081278 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
   81278:	b410      	push	{r4}
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
   8127a:	880c      	ldrh	r4, [r1, #0]
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
   8127c:	f64f 73ff 	movw	r3, #65535	; 0xffff
   81280:	429c      	cmp	r4, r3
   81282:	d101      	bne.n	81288 <vListInsert+0x10>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
   81284:	6902      	ldr	r2, [r0, #16]
   81286:	e00c      	b.n	812a2 <vListInsert+0x2a>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/

		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
   81288:	f100 0208 	add.w	r2, r0, #8
   8128c:	68c3      	ldr	r3, [r0, #12]
   8128e:	881b      	ldrh	r3, [r3, #0]
   81290:	b29b      	uxth	r3, r3
   81292:	429c      	cmp	r4, r3
   81294:	d305      	bcc.n	812a2 <vListInsert+0x2a>
   81296:	6852      	ldr	r2, [r2, #4]
   81298:	6853      	ldr	r3, [r2, #4]
   8129a:	881b      	ldrh	r3, [r3, #0]
   8129c:	b29b      	uxth	r3, r3
   8129e:	429c      	cmp	r4, r3
   812a0:	d2f9      	bcs.n	81296 <vListInsert+0x1e>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
   812a2:	6853      	ldr	r3, [r2, #4]
   812a4:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
   812a6:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
   812a8:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
   812aa:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   812ac:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
   812ae:	6803      	ldr	r3, [r0, #0]
   812b0:	3301      	adds	r3, #1
   812b2:	6003      	str	r3, [r0, #0]
}
   812b4:	bc10      	pop	{r4}
   812b6:	4770      	bx	lr

000812b8 <uxListRemove>:

unsigned portBASE_TYPE uxListRemove( xListItem *pxItemToRemove )
{
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
   812b8:	6843      	ldr	r3, [r0, #4]
   812ba:	6882      	ldr	r2, [r0, #8]
   812bc:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
   812be:	6883      	ldr	r3, [r0, #8]
   812c0:	6842      	ldr	r2, [r0, #4]
   812c2:	605a      	str	r2, [r3, #4]

	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
   812c4:	6903      	ldr	r3, [r0, #16]

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
   812c6:	685a      	ldr	r2, [r3, #4]
   812c8:	4290      	cmp	r0, r2
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
   812ca:	bf04      	itt	eq
   812cc:	6882      	ldreq	r2, [r0, #8]
   812ce:	605a      	streq	r2, [r3, #4]
	}

	pxItemToRemove->pvContainer = NULL;
   812d0:	2200      	movs	r2, #0
   812d2:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
   812d4:	681a      	ldr	r2, [r3, #0]
   812d6:	3a01      	subs	r2, #1
   812d8:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
   812da:	6818      	ldr	r0, [r3, #0]
}
   812dc:	4770      	bx	lr
   812de:	bf00      	nop

000812e0 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
   812e0:	4803      	ldr	r0, [pc, #12]	; (812f0 <prvPortStartFirstTask+0x10>)
   812e2:	6800      	ldr	r0, [r0, #0]
   812e4:	6800      	ldr	r0, [r0, #0]
   812e6:	f380 8808 	msr	MSP, r0
   812ea:	b662      	cpsie	i
   812ec:	df00      	svc	0
   812ee:	bf00      	nop
   812f0:	e000ed08 	.word	0xe000ed08

000812f4 <pxPortInitialiseStack>:
portSTACK_TYPE *pxPortInitialiseStack( portSTACK_TYPE *pxTopOfStack, pdTASK_CODE pxCode, void *pvParameters )
{
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
   812f4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   812f8:	f840 3c04 	str.w	r3, [r0, #-4]
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) pxCode;	/* PC */
   812fc:	f840 1c08 	str.w	r1, [r0, #-8]
	pxTopOfStack--;
	*pxTopOfStack = 0;	/* LR */
   81300:	2300      	movs	r3, #0
   81302:	f840 3c0c 	str.w	r3, [r0, #-12]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
	*pxTopOfStack = ( portSTACK_TYPE ) pvParameters;	/* R0 */
   81306:	f840 2c20 	str.w	r2, [r0, #-32]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */

	return pxTopOfStack;
}
   8130a:	3840      	subs	r0, #64	; 0x40
   8130c:	4770      	bx	lr
   8130e:	bf00      	nop

00081310 <SVC_Handler>:
/*-----------------------------------------------------------*/

__attribute__ (( naked )) void SVC_Handler( void )
{
	__asm volatile (
   81310:	4b06      	ldr	r3, [pc, #24]	; (8132c <pxCurrentTCBConst2>)
   81312:	6819      	ldr	r1, [r3, #0]
   81314:	6808      	ldr	r0, [r1, #0]
   81316:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   8131a:	f380 8809 	msr	PSP, r0
   8131e:	f04f 0000 	mov.w	r0, #0
   81322:	f380 8811 	msr	BASEPRI, r0
   81326:	f04e 0e0d 	orr.w	lr, lr, #13
   8132a:	4770      	bx	lr

0008132c <pxCurrentTCBConst2>:
   8132c:	20078bc0 	.word	0x20078bc0

00081330 <vPortYieldFromISR>:
/*-----------------------------------------------------------*/

void vPortYieldFromISR( void )
{
	/* Set a PendSV to request a context switch. */
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
   81330:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   81334:	4b01      	ldr	r3, [pc, #4]	; (8133c <vPortYieldFromISR+0xc>)
   81336:	601a      	str	r2, [r3, #0]
   81338:	4770      	bx	lr
   8133a:	bf00      	nop
   8133c:	e000ed04 	.word	0xe000ed04

00081340 <ulPortSetInterruptMask>:
}
/*-----------------------------------------------------------*/

__attribute__(( naked )) unsigned long ulPortSetInterruptMask( void )
{
	__asm volatile														\
   81340:	f3ef 8011 	mrs	r0, BASEPRI
   81344:	f04f 01a0 	mov.w	r1, #160	; 0xa0
   81348:	f381 8811 	msr	BASEPRI, r1
   8134c:	4770      	bx	lr
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return 0;
}
   8134e:	2000      	movs	r0, #0

00081350 <vPortEnterCritical>:
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
   81350:	b508      	push	{r3, lr}
	portDISABLE_INTERRUPTS();
   81352:	4b03      	ldr	r3, [pc, #12]	; (81360 <vPortEnterCritical+0x10>)
   81354:	4798      	blx	r3
	uxCriticalNesting++;
   81356:	4a03      	ldr	r2, [pc, #12]	; (81364 <vPortEnterCritical+0x14>)
   81358:	6813      	ldr	r3, [r2, #0]
   8135a:	3301      	adds	r3, #1
   8135c:	6013      	str	r3, [r2, #0]
   8135e:	bd08      	pop	{r3, pc}
   81360:	00081341 	.word	0x00081341
   81364:	20070148 	.word	0x20070148

00081368 <vPortClearInterruptMask>:
}
/*-----------------------------------------------------------*/

__attribute__(( naked )) void vPortClearInterruptMask( unsigned long ulNewMaskValue )
{
	__asm volatile													\
   81368:	f380 8811 	msr	BASEPRI, r0
   8136c:	4770      	bx	lr
   8136e:	bf00      	nop

00081370 <vPortExitCritical>:
	uxCriticalNesting++;
}
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
   81370:	b508      	push	{r3, lr}
	uxCriticalNesting--;
   81372:	4a04      	ldr	r2, [pc, #16]	; (81384 <vPortExitCritical+0x14>)
   81374:	6813      	ldr	r3, [r2, #0]
   81376:	3b01      	subs	r3, #1
   81378:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
   8137a:	b913      	cbnz	r3, 81382 <vPortExitCritical+0x12>
	{
		portENABLE_INTERRUPTS();
   8137c:	2000      	movs	r0, #0
   8137e:	4b02      	ldr	r3, [pc, #8]	; (81388 <vPortExitCritical+0x18>)
   81380:	4798      	blx	r3
   81382:	bd08      	pop	{r3, pc}
   81384:	20070148 	.word	0x20070148
   81388:	00081369 	.word	0x00081369

0008138c <PendSV_Handler>:

__attribute__(( naked )) void PendSV_Handler( void )
{
	/* This is a naked function. */

	__asm volatile
   8138c:	f3ef 8009 	mrs	r0, PSP
   81390:	4b0c      	ldr	r3, [pc, #48]	; (813c4 <pxCurrentTCBConst>)
   81392:	681a      	ldr	r2, [r3, #0]
   81394:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   81398:	6010      	str	r0, [r2, #0]
   8139a:	e92d 4008 	stmdb	sp!, {r3, lr}
   8139e:	f04f 00a0 	mov.w	r0, #160	; 0xa0
   813a2:	f380 8811 	msr	BASEPRI, r0
   813a6:	f000 feed 	bl	82184 <vTaskSwitchContext>
   813aa:	f04f 0000 	mov.w	r0, #0
   813ae:	f380 8811 	msr	BASEPRI, r0
   813b2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   813b6:	6819      	ldr	r1, [r3, #0]
   813b8:	6808      	ldr	r0, [r1, #0]
   813ba:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   813be:	f380 8809 	msr	PSP, r0
   813c2:	4770      	bx	lr

000813c4 <pxCurrentTCBConst>:
   813c4:	20078bc0 	.word	0x20078bc0

000813c8 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void SysTick_Handler( void )
{
   813c8:	b508      	push	{r3, lr}
	/* If using preemption, also force a context switch. */
	#if configUSE_PREEMPTION == 1
		portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
   813ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   813ce:	4b05      	ldr	r3, [pc, #20]	; (813e4 <SysTick_Handler+0x1c>)
   813d0:	601a      	str	r2, [r3, #0]
	to generate the tick interrupt. */
	#if configUSE_TICKLESS_IDLE == 1
		portNVIC_SYSTICK_LOAD_REG = ulTimerReloadValueForOneTick;
	#endif

	( void ) portSET_INTERRUPT_MASK_FROM_ISR();
   813d2:	4b05      	ldr	r3, [pc, #20]	; (813e8 <SysTick_Handler+0x20>)
   813d4:	4798      	blx	r3
	{
		vTaskIncrementTick();
   813d6:	4b05      	ldr	r3, [pc, #20]	; (813ec <SysTick_Handler+0x24>)
   813d8:	4798      	blx	r3
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( 0 );
   813da:	2000      	movs	r0, #0
   813dc:	4b04      	ldr	r3, [pc, #16]	; (813f0 <SysTick_Handler+0x28>)
   813de:	4798      	blx	r3
   813e0:	bd08      	pop	{r3, pc}
   813e2:	bf00      	nop
   813e4:	e000ed04 	.word	0xe000ed04
   813e8:	00081341 	.word	0x00081341
   813ec:	00081ded 	.word	0x00081ded
   813f0:	00081369 	.word	0x00081369

000813f4 <vPortSetupTimerInterrupt>:
		ulStoppedTimerCompensation = 45UL / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;;
   813f4:	4a03      	ldr	r2, [pc, #12]	; (81404 <vPortSetupTimerInterrupt+0x10>)
   813f6:	4b04      	ldr	r3, [pc, #16]	; (81408 <vPortSetupTimerInterrupt+0x14>)
   813f8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
   813fa:	2207      	movs	r2, #7
   813fc:	3b04      	subs	r3, #4
   813fe:	601a      	str	r2, [r3, #0]
   81400:	4770      	bx	lr
   81402:	bf00      	nop
   81404:	0001481f 	.word	0x0001481f
   81408:	e000e014 	.word	0xe000e014

0008140c <xPortStartScheduler>:

/*
 * See header file for description.
 */
portBASE_TYPE xPortStartScheduler( void )
{
   8140c:	b510      	push	{r4, lr}
	/* configMAX_SYSCALL_INTERRUPT_PRIORITY must not be set to 0.
	See http://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
   8140e:	4b09      	ldr	r3, [pc, #36]	; (81434 <xPortStartScheduler+0x28>)
   81410:	681a      	ldr	r2, [r3, #0]
   81412:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
   81416:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
   81418:	681a      	ldr	r2, [r3, #0]
   8141a:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
   8141e:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
   81420:	4b05      	ldr	r3, [pc, #20]	; (81438 <xPortStartScheduler+0x2c>)
   81422:	4798      	blx	r3

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
   81424:	2400      	movs	r4, #0
   81426:	4b05      	ldr	r3, [pc, #20]	; (8143c <xPortStartScheduler+0x30>)
   81428:	601c      	str	r4, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
   8142a:	4b05      	ldr	r3, [pc, #20]	; (81440 <xPortStartScheduler+0x34>)
   8142c:	4798      	blx	r3

	/* Should not get here! */
	return 0;
}
   8142e:	4620      	mov	r0, r4
   81430:	bd10      	pop	{r4, pc}
   81432:	bf00      	nop
   81434:	e000ed20 	.word	0xe000ed20
   81438:	000813f5 	.word	0x000813f5
   8143c:	20070148 	.word	0x20070148
   81440:	000812e1 	.word	0x000812e1

00081444 <prvInsertBlockIntoFreeList>:
xBlockLink *pxIterator;
unsigned char *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
   81444:	4a12      	ldr	r2, [pc, #72]	; (81490 <prvInsertBlockIntoFreeList+0x4c>)
   81446:	e000      	b.n	8144a <prvInsertBlockIntoFreeList+0x6>
   81448:	461a      	mov	r2, r3
   8144a:	6813      	ldr	r3, [r2, #0]
   8144c:	4283      	cmp	r3, r0
   8144e:	d3fb      	bcc.n	81448 <prvInsertBlockIntoFreeList+0x4>
	xFreeBytesRemaining -= heapSTRUCT_SIZE;
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( xBlockLink *pxBlockToInsert )
{
   81450:	b410      	push	{r4}
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */	
	puc = ( unsigned char * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( unsigned char * ) pxBlockToInsert )
   81452:	6851      	ldr	r1, [r2, #4]
   81454:	1854      	adds	r4, r2, r1
   81456:	42a0      	cmp	r0, r4
   81458:	d103      	bne.n	81462 <prvInsertBlockIntoFreeList+0x1e>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
   8145a:	6840      	ldr	r0, [r0, #4]
   8145c:	4401      	add	r1, r0
   8145e:	6051      	str	r1, [r2, #4]
   81460:	4610      	mov	r0, r2
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( unsigned char * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( unsigned char * ) pxIterator->pxNextFreeBlock )
   81462:	6841      	ldr	r1, [r0, #4]
   81464:	1844      	adds	r4, r0, r1
   81466:	42a3      	cmp	r3, r4
   81468:	d10c      	bne.n	81484 <prvInsertBlockIntoFreeList+0x40>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
   8146a:	4b0a      	ldr	r3, [pc, #40]	; (81494 <prvInsertBlockIntoFreeList+0x50>)
   8146c:	681b      	ldr	r3, [r3, #0]
   8146e:	429c      	cmp	r4, r3
   81470:	d006      	beq.n	81480 <prvInsertBlockIntoFreeList+0x3c>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
   81472:	6863      	ldr	r3, [r4, #4]
   81474:	4419      	add	r1, r3
   81476:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
   81478:	6813      	ldr	r3, [r2, #0]
   8147a:	681b      	ldr	r3, [r3, #0]
   8147c:	6003      	str	r3, [r0, #0]
   8147e:	e002      	b.n	81486 <prvInsertBlockIntoFreeList+0x42>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
   81480:	6004      	str	r4, [r0, #0]
   81482:	e000      	b.n	81486 <prvInsertBlockIntoFreeList+0x42>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;		
   81484:	6003      	str	r3, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
   81486:	4290      	cmp	r0, r2
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
   81488:	bf18      	it	ne
   8148a:	6010      	strne	r0, [r2, #0]
	}
}
   8148c:	bc10      	pop	{r4}
   8148e:	4770      	bx	lr
   81490:	20078a9c 	.word	0x20078a9c
   81494:	20078a98 	.word	0x20078a98

00081498 <pvPortMalloc>:
/* STATIC FUNCTIONS ARE DEFINED AS MACROS TO MINIMIZE THE FUNCTION CALL DEPTH. */

/*-----------------------------------------------------------*/
extern void vApplicationMallocFailedHook( void );
void *pvPortMalloc( size_t xWantedSize )
{
   81498:	b538      	push	{r3, r4, r5, lr}
   8149a:	4604      	mov	r4, r0
xBlockLink *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;

	vTaskSuspendAll();
   8149c:	4b29      	ldr	r3, [pc, #164]	; (81544 <pvPortMalloc+0xac>)
   8149e:	4798      	blx	r3
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
   814a0:	4b29      	ldr	r3, [pc, #164]	; (81548 <pvPortMalloc+0xb0>)
   814a2:	681b      	ldr	r3, [r3, #0]
   814a4:	b99b      	cbnz	r3, 814ce <pvPortMalloc+0x36>
	/* Ensure the start of the heap is aligned. */
	configASSERT( ( ( ( unsigned long ) xHeap.ucHeap ) & ( ( unsigned long ) portBYTE_ALIGNMENT_MASK ) ) == 0UL );

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) xHeap.ucHeap;
   814a6:	4a29      	ldr	r2, [pc, #164]	; (8154c <pvPortMalloc+0xb4>)
   814a8:	4b29      	ldr	r3, [pc, #164]	; (81550 <pvPortMalloc+0xb8>)
   814aa:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
   814ac:	2100      	movs	r1, #0
   814ae:	6051      	str	r1, [r2, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	pucHeapEnd = xHeap.ucHeap + xTotalHeapSize;
	pucHeapEnd -= heapSTRUCT_SIZE;
	pxEnd = ( void * ) pucHeapEnd;
   814b0:	f647 72f0 	movw	r2, #32752	; 0x7ff0
   814b4:	1898      	adds	r0, r3, r2
   814b6:	4d24      	ldr	r5, [pc, #144]	; (81548 <pvPortMalloc+0xb0>)
   814b8:	6028      	str	r0, [r5, #0]
	configASSERT( ( ( ( unsigned long ) pxEnd ) & ( ( unsigned long ) portBYTE_ALIGNMENT_MASK ) ) == 0UL );
	pxEnd->xBlockSize = 0;
   814ba:	f647 75f4 	movw	r5, #32756	; 0x7ff4
   814be:	5159      	str	r1, [r3, r5]
	pxEnd->pxNextFreeBlock = NULL;
   814c0:	5099      	str	r1, [r3, r2]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) xHeap.ucHeap;
	pxFirstFreeBlock->xBlockSize = xTotalHeapSize - heapSTRUCT_SIZE;
   814c2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
   814c4:	6018      	str	r0, [r3, #0]

	/* The heap now contains pxEnd. */
	xFreeBytesRemaining -= heapSTRUCT_SIZE;
   814c6:	4a23      	ldr	r2, [pc, #140]	; (81554 <pvPortMalloc+0xbc>)
   814c8:	6813      	ldr	r3, [r2, #0]
   814ca:	3b10      	subs	r3, #16
   814cc:	6013      	str	r3, [r2, #0]
			prvHeapInit();
		}

		/* The wanted size is increased so it can contain a xBlockLink
		structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
   814ce:	2c00      	cmp	r4, #0
   814d0:	d02e      	beq.n	81530 <pvPortMalloc+0x98>
		{
			xWantedSize += heapSTRUCT_SIZE;
   814d2:	f104 0210 	add.w	r2, r4, #16

			/* Ensure that blocks are always aligned to the required number of 
			bytes. */
			if( xWantedSize & portBYTE_ALIGNMENT_MASK )
   814d6:	f012 0f07 	tst.w	r2, #7
			{
				/* Byte alignment required. */
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
   814da:	bf1c      	itt	ne
   814dc:	f022 0207 	bicne.w	r2, r2, #7
   814e0:	3208      	addne	r2, #8
			}
		}

		if( ( xWantedSize > 0 ) && ( xWantedSize < xTotalHeapSize ) )
   814e2:	1e51      	subs	r1, r2, #1
   814e4:	f647 73fe 	movw	r3, #32766	; 0x7ffe
   814e8:	4299      	cmp	r1, r3
   814ea:	d823      	bhi.n	81534 <pvPortMalloc+0x9c>
		{
			/* Traverse the list from the start	(lowest address) block until one
			of adequate size is found. */
			pxPreviousBlock = &xStart;
			pxBlock = xStart.pxNextFreeBlock;
   814ec:	4917      	ldr	r1, [pc, #92]	; (8154c <pvPortMalloc+0xb4>)
   814ee:	680c      	ldr	r4, [r1, #0]
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
   814f0:	e001      	b.n	814f6 <pvPortMalloc+0x5e>
   814f2:	4621      	mov	r1, r4
			{
				pxPreviousBlock = pxBlock;
				pxBlock = pxBlock->pxNextFreeBlock;
   814f4:	461c      	mov	r4, r3
		{
			/* Traverse the list from the start	(lowest address) block until one
			of adequate size is found. */
			pxPreviousBlock = &xStart;
			pxBlock = xStart.pxNextFreeBlock;
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
   814f6:	6863      	ldr	r3, [r4, #4]
   814f8:	429a      	cmp	r2, r3
   814fa:	d902      	bls.n	81502 <pvPortMalloc+0x6a>
   814fc:	6823      	ldr	r3, [r4, #0]
   814fe:	2b00      	cmp	r3, #0
   81500:	d1f7      	bne.n	814f2 <pvPortMalloc+0x5a>
				pxBlock = pxBlock->pxNextFreeBlock;
			}

			/* If the end marker was reached then a block of adequate size was
			not found. */
			if( pxBlock != pxEnd )
   81502:	4b11      	ldr	r3, [pc, #68]	; (81548 <pvPortMalloc+0xb0>)
   81504:	681b      	ldr	r3, [r3, #0]
   81506:	429c      	cmp	r4, r3
   81508:	d016      	beq.n	81538 <pvPortMalloc+0xa0>
			{
				/* Return the memory space - jumping over the xBlockLink structure
				at its start. */
				pvReturn = ( void * ) ( ( ( unsigned char * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
   8150a:	680d      	ldr	r5, [r1, #0]
   8150c:	3510      	adds	r5, #16

				/* This block is being returned for use so must be taken out of
				the	list of free blocks. */
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
   8150e:	6823      	ldr	r3, [r4, #0]
   81510:	600b      	str	r3, [r1, #0]

				/* If the block is larger than required it can be split into two. */
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
   81512:	6863      	ldr	r3, [r4, #4]
   81514:	1a9b      	subs	r3, r3, r2
   81516:	2b20      	cmp	r3, #32
   81518:	d904      	bls.n	81524 <pvPortMalloc+0x8c>
				{
					/* This block is to be split into two.  Create a new block
					following the number of bytes requested. The void cast is
					used to prevent byte alignment warnings from the compiler. */
					pxNewBlockLink = ( void * ) ( ( ( unsigned char * ) pxBlock ) + xWantedSize );
   8151a:	18a0      	adds	r0, r4, r2

					/* Calculate the sizes of two blocks split from the single
					block. */
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
   8151c:	6043      	str	r3, [r0, #4]
					pxBlock->xBlockSize = xWantedSize;
   8151e:	6062      	str	r2, [r4, #4]

					/* Insert the new block into the list of free blocks. */
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
   81520:	4b0d      	ldr	r3, [pc, #52]	; (81558 <pvPortMalloc+0xc0>)
   81522:	4798      	blx	r3
				}

				xFreeBytesRemaining -= pxBlock->xBlockSize;
   81524:	4a0b      	ldr	r2, [pc, #44]	; (81554 <pvPortMalloc+0xbc>)
   81526:	6813      	ldr	r3, [r2, #0]
   81528:	6861      	ldr	r1, [r4, #4]
   8152a:	1a5b      	subs	r3, r3, r1
   8152c:	6013      	str	r3, [r2, #0]
   8152e:	e004      	b.n	8153a <pvPortMalloc+0xa2>
/*-----------------------------------------------------------*/
extern void vApplicationMallocFailedHook( void );
void *pvPortMalloc( size_t xWantedSize )
{
xBlockLink *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
   81530:	2500      	movs	r5, #0
   81532:	e002      	b.n	8153a <pvPortMalloc+0xa2>
   81534:	2500      	movs	r5, #0
   81536:	e000      	b.n	8153a <pvPortMalloc+0xa2>
   81538:	2500      	movs	r5, #0

				xFreeBytesRemaining -= pxBlock->xBlockSize;
			}
		}
	}
	xTaskResumeAll();
   8153a:	4b08      	ldr	r3, [pc, #32]	; (8155c <pvPortMalloc+0xc4>)
   8153c:	4798      	blx	r3
		}
	}
	#endif

	return pvReturn;
}
   8153e:	4628      	mov	r0, r5
   81540:	bd38      	pop	{r3, r4, r5, pc}
   81542:	bf00      	nop
   81544:	00081dbd 	.word	0x00081dbd
   81548:	20078a98 	.word	0x20078a98
   8154c:	20078a9c 	.word	0x20078a9c
   81550:	20070a98 	.word	0x20070a98
   81554:	2007014c 	.word	0x2007014c
   81558:	00081445 	.word	0x00081445
   8155c:	00081f19 	.word	0x00081f19

00081560 <vPortFree>:
void vPortFree( void *pv )
{
unsigned char *puc = ( unsigned char * ) pv;
xBlockLink *pxLink;

	if( pv != NULL )
   81560:	b180      	cbz	r0, 81584 <vPortFree+0x24>
	return pvReturn;
}
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
   81562:	b510      	push	{r4, lr}
   81564:	4604      	mov	r4, r0
		puc -= heapSTRUCT_SIZE;

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;

		vTaskSuspendAll();
   81566:	4b08      	ldr	r3, [pc, #32]	; (81588 <vPortFree+0x28>)
   81568:	4798      	blx	r3
		{
			/* Add this block to the list of free blocks. */
			xFreeBytesRemaining += pxLink->xBlockSize;
   8156a:	4a08      	ldr	r2, [pc, #32]	; (8158c <vPortFree+0x2c>)
   8156c:	f854 1c0c 	ldr.w	r1, [r4, #-12]
   81570:	6813      	ldr	r3, [r2, #0]
   81572:	440b      	add	r3, r1
   81574:	6013      	str	r3, [r2, #0]
			prvInsertBlockIntoFreeList( ( ( xBlockLink * ) pxLink ) );			
   81576:	f1a4 0010 	sub.w	r0, r4, #16
   8157a:	4b05      	ldr	r3, [pc, #20]	; (81590 <vPortFree+0x30>)
   8157c:	4798      	blx	r3
		}
		xTaskResumeAll();
   8157e:	4b05      	ldr	r3, [pc, #20]	; (81594 <vPortFree+0x34>)
   81580:	4798      	blx	r3
   81582:	bd10      	pop	{r4, pc}
   81584:	4770      	bx	lr
   81586:	bf00      	nop
   81588:	00081dbd 	.word	0x00081dbd
   8158c:	2007014c 	.word	0x2007014c
   81590:	00081445 	.word	0x00081445
   81594:	00081f19 	.word	0x00081f19

00081598 <prvCopyDataToQueue>:

#endif
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( xQUEUE *pxQueue, const void *pvItemToQueue, portBASE_TYPE xPosition )
{
   81598:	b510      	push	{r4, lr}
   8159a:	4604      	mov	r4, r0
	if( pxQueue->uxItemSize == ( unsigned portBASE_TYPE ) 0 )
   8159c:	6c03      	ldr	r3, [r0, #64]	; 0x40
   8159e:	b93b      	cbnz	r3, 815b0 <prvCopyDataToQueue+0x18>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   815a0:	6803      	ldr	r3, [r0, #0]
   815a2:	bb1b      	cbnz	r3, 815ec <prvCopyDataToQueue+0x54>
			{
				/* The mutex is no longer being held. */
				vTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
   815a4:	6840      	ldr	r0, [r0, #4]
   815a6:	4b13      	ldr	r3, [pc, #76]	; (815f4 <prvCopyDataToQueue+0x5c>)
   815a8:	4798      	blx	r3
				pxQueue->pxMutexHolder = NULL;
   815aa:	2300      	movs	r3, #0
   815ac:	6063      	str	r3, [r4, #4]
   815ae:	e01d      	b.n	815ec <prvCopyDataToQueue+0x54>
			}
		}
		#endif
	}
	else if( xPosition == queueSEND_TO_BACK )
   815b0:	b96a      	cbnz	r2, 815ce <prvCopyDataToQueue+0x36>
	{
		memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
   815b2:	461a      	mov	r2, r3
   815b4:	6880      	ldr	r0, [r0, #8]
   815b6:	4b10      	ldr	r3, [pc, #64]	; (815f8 <prvCopyDataToQueue+0x60>)
   815b8:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
   815ba:	68a2      	ldr	r2, [r4, #8]
   815bc:	6c23      	ldr	r3, [r4, #64]	; 0x40
   815be:	4413      	add	r3, r2
   815c0:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail )
   815c2:	6862      	ldr	r2, [r4, #4]
   815c4:	4293      	cmp	r3, r2
   815c6:	d311      	bcc.n	815ec <prvCopyDataToQueue+0x54>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
   815c8:	6823      	ldr	r3, [r4, #0]
   815ca:	60a3      	str	r3, [r4, #8]
   815cc:	e00e      	b.n	815ec <prvCopyDataToQueue+0x54>
		}
	}
	else
	{
		memcpy( ( void * ) pxQueue->pcReadFrom, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
   815ce:	461a      	mov	r2, r3
   815d0:	68c0      	ldr	r0, [r0, #12]
   815d2:	4b09      	ldr	r3, [pc, #36]	; (815f8 <prvCopyDataToQueue+0x60>)
   815d4:	4798      	blx	r3
		pxQueue->pcReadFrom -= pxQueue->uxItemSize;
   815d6:	6c23      	ldr	r3, [r4, #64]	; 0x40
   815d8:	425b      	negs	r3, r3
   815da:	68e2      	ldr	r2, [r4, #12]
   815dc:	441a      	add	r2, r3
   815de:	60e2      	str	r2, [r4, #12]
		if( pxQueue->pcReadFrom < pxQueue->pcHead )
   815e0:	6821      	ldr	r1, [r4, #0]
   815e2:	428a      	cmp	r2, r1
   815e4:	d202      	bcs.n	815ec <prvCopyDataToQueue+0x54>
		{
			pxQueue->pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
   815e6:	6862      	ldr	r2, [r4, #4]
   815e8:	4413      	add	r3, r2
   815ea:	60e3      	str	r3, [r4, #12]
		}
	}

	++( pxQueue->uxMessagesWaiting );
   815ec:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   815ee:	3301      	adds	r3, #1
   815f0:	63a3      	str	r3, [r4, #56]	; 0x38
   815f2:	bd10      	pop	{r4, pc}
   815f4:	000824c5 	.word	0x000824c5
   815f8:	00083925 	.word	0x00083925

000815fc <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( xQUEUE * const pxQueue, const void *pvBuffer )
{
   815fc:	b538      	push	{r3, r4, r5, lr}
   815fe:	4603      	mov	r3, r0
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
   81600:	6800      	ldr	r0, [r0, #0]
   81602:	b158      	cbz	r0, 8161c <prvCopyDataFromQueue+0x20>
	{
		pxQueue->pcReadFrom += pxQueue->uxItemSize;
   81604:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   81606:	68dc      	ldr	r4, [r3, #12]
   81608:	4414      	add	r4, r2
   8160a:	60dc      	str	r4, [r3, #12]
		if( pxQueue->pcReadFrom >= pxQueue->pcTail )
   8160c:	685d      	ldr	r5, [r3, #4]
   8160e:	42ac      	cmp	r4, r5
		{
			pxQueue->pcReadFrom = pxQueue->pcHead;
   81610:	bf28      	it	cs
   81612:	60d8      	strcs	r0, [r3, #12]
   81614:	4608      	mov	r0, r1
		}
		memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->pcReadFrom, ( unsigned ) pxQueue->uxItemSize );
   81616:	68d9      	ldr	r1, [r3, #12]
   81618:	4b01      	ldr	r3, [pc, #4]	; (81620 <prvCopyDataFromQueue+0x24>)
   8161a:	4798      	blx	r3
   8161c:	bd38      	pop	{r3, r4, r5, pc}
   8161e:	bf00      	nop
   81620:	00083925 	.word	0x00083925

00081624 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( xQueueHandle pxQueue )
{
   81624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   81626:	4604      	mov	r4, r0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
   81628:	4b1e      	ldr	r3, [pc, #120]	; (816a4 <prvUnlockQueue+0x80>)
   8162a:	4798      	blx	r3
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
   8162c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   8162e:	2b00      	cmp	r3, #0
   81630:	dd13      	ble.n	8165a <prvUnlockQueue+0x36>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   81632:	6a63      	ldr	r3, [r4, #36]	; 0x24
   81634:	b91b      	cbnz	r3, 8163e <prvUnlockQueue+0x1a>
   81636:	e010      	b.n	8165a <prvUnlockQueue+0x36>
   81638:	6a63      	ldr	r3, [r4, #36]	; 0x24
   8163a:	b923      	cbnz	r3, 81646 <prvUnlockQueue+0x22>
   8163c:	e00d      	b.n	8165a <prvUnlockQueue+0x36>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   8163e:	f104 0624 	add.w	r6, r4, #36	; 0x24
   81642:	4d19      	ldr	r5, [pc, #100]	; (816a8 <prvUnlockQueue+0x84>)
				{
					/* The task waiting has a higher priority so record that a
					context	switch is required. */
					vTaskMissedYield();
   81644:	4f19      	ldr	r7, [pc, #100]	; (816ac <prvUnlockQueue+0x88>)
			blocked waiting for data to become available? */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   81646:	4630      	mov	r0, r6
   81648:	47a8      	blx	r5
   8164a:	b100      	cbz	r0, 8164e <prvUnlockQueue+0x2a>
				{
					/* The task waiting has a higher priority so record that a
					context	switch is required. */
					vTaskMissedYield();
   8164c:	47b8      	blx	r7
				}

				--( pxQueue->xTxLock );
   8164e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   81650:	3b01      	subs	r3, #1
   81652:	64a3      	str	r3, [r4, #72]	; 0x48
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
   81654:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   81656:	2b00      	cmp	r3, #0
   81658:	dcee      	bgt.n	81638 <prvUnlockQueue+0x14>
			{
				break;
			}
		}

		pxQueue->xTxLock = queueUNLOCKED;
   8165a:	f04f 33ff 	mov.w	r3, #4294967295
   8165e:	64a3      	str	r3, [r4, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
   81660:	4b13      	ldr	r3, [pc, #76]	; (816b0 <prvUnlockQueue+0x8c>)
   81662:	4798      	blx	r3

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
   81664:	4b0f      	ldr	r3, [pc, #60]	; (816a4 <prvUnlockQueue+0x80>)
   81666:	4798      	blx	r3
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
   81668:	6c63      	ldr	r3, [r4, #68]	; 0x44
   8166a:	2b00      	cmp	r3, #0
   8166c:	dd13      	ble.n	81696 <prvUnlockQueue+0x72>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   8166e:	6923      	ldr	r3, [r4, #16]
   81670:	b91b      	cbnz	r3, 8167a <prvUnlockQueue+0x56>
   81672:	e010      	b.n	81696 <prvUnlockQueue+0x72>
   81674:	6923      	ldr	r3, [r4, #16]
   81676:	b923      	cbnz	r3, 81682 <prvUnlockQueue+0x5e>
   81678:	e00d      	b.n	81696 <prvUnlockQueue+0x72>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   8167a:	f104 0610 	add.w	r6, r4, #16
   8167e:	4d0a      	ldr	r5, [pc, #40]	; (816a8 <prvUnlockQueue+0x84>)
				{
					vTaskMissedYield();
   81680:	4f0a      	ldr	r7, [pc, #40]	; (816ac <prvUnlockQueue+0x88>)
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   81682:	4630      	mov	r0, r6
   81684:	47a8      	blx	r5
   81686:	b100      	cbz	r0, 8168a <prvUnlockQueue+0x66>
				{
					vTaskMissedYield();
   81688:	47b8      	blx	r7
				}

				--( pxQueue->xRxLock );
   8168a:	6c63      	ldr	r3, [r4, #68]	; 0x44
   8168c:	3b01      	subs	r3, #1
   8168e:	6463      	str	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
   81690:	6c63      	ldr	r3, [r4, #68]	; 0x44
   81692:	2b00      	cmp	r3, #0
   81694:	dcee      	bgt.n	81674 <prvUnlockQueue+0x50>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
   81696:	f04f 33ff 	mov.w	r3, #4294967295
   8169a:	6463      	str	r3, [r4, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
   8169c:	4b04      	ldr	r3, [pc, #16]	; (816b0 <prvUnlockQueue+0x8c>)
   8169e:	4798      	blx	r3
   816a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   816a2:	bf00      	nop
   816a4:	00081351 	.word	0x00081351
   816a8:	000822d5 	.word	0x000822d5
   816ac:	0008240d 	.word	0x0008240d
   816b0:	00081371 	.word	0x00081371

000816b4 <xQueueGenericReset>:
/*-----------------------------------------------------------
 * PUBLIC QUEUE MANAGEMENT API documented in queue.h
 *----------------------------------------------------------*/

portBASE_TYPE xQueueGenericReset( xQueueHandle pxQueue, portBASE_TYPE xNewQueue )
{
   816b4:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
   816b6:	b918      	cbnz	r0, 816c0 <xQueueGenericReset+0xc>
   816b8:	4b17      	ldr	r3, [pc, #92]	; (81718 <xQueueGenericReset+0x64>)
   816ba:	4798      	blx	r3
   816bc:	bf00      	nop
   816be:	e7fd      	b.n	816bc <xQueueGenericReset+0x8>
   816c0:	460d      	mov	r5, r1
   816c2:	4604      	mov	r4, r0

	taskENTER_CRITICAL();
   816c4:	4b15      	ldr	r3, [pc, #84]	; (8171c <xQueueGenericReset+0x68>)
   816c6:	4798      	blx	r3
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
   816c8:	6822      	ldr	r2, [r4, #0]
   816ca:	6c21      	ldr	r1, [r4, #64]	; 0x40
   816cc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   816ce:	fb03 f301 	mul.w	r3, r3, r1
   816d2:	18d0      	adds	r0, r2, r3
   816d4:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
   816d6:	2000      	movs	r0, #0
   816d8:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
   816da:	60a2      	str	r2, [r4, #8]
		pxQueue->pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( unsigned portBASE_TYPE ) 1U ) * pxQueue->uxItemSize );
   816dc:	1a5b      	subs	r3, r3, r1
   816de:	4413      	add	r3, r2
   816e0:	60e3      	str	r3, [r4, #12]
		pxQueue->xRxLock = queueUNLOCKED;
   816e2:	f04f 33ff 	mov.w	r3, #4294967295
   816e6:	6463      	str	r3, [r4, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
   816e8:	64a3      	str	r3, [r4, #72]	; 0x48

		if( xNewQueue == pdFALSE )
   816ea:	b955      	cbnz	r5, 81702 <xQueueGenericReset+0x4e>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to	write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   816ec:	6923      	ldr	r3, [r4, #16]
   816ee:	b17b      	cbz	r3, 81710 <xQueueGenericReset+0x5c>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
   816f0:	f104 0010 	add.w	r0, r4, #16
   816f4:	4b0a      	ldr	r3, [pc, #40]	; (81720 <xQueueGenericReset+0x6c>)
   816f6:	4798      	blx	r3
   816f8:	2801      	cmp	r0, #1
   816fa:	d109      	bne.n	81710 <xQueueGenericReset+0x5c>
				{
					portYIELD_WITHIN_API();
   816fc:	4b09      	ldr	r3, [pc, #36]	; (81724 <xQueueGenericReset+0x70>)
   816fe:	4798      	blx	r3
   81700:	e006      	b.n	81710 <xQueueGenericReset+0x5c>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
   81702:	f104 0010 	add.w	r0, r4, #16
   81706:	4d08      	ldr	r5, [pc, #32]	; (81728 <xQueueGenericReset+0x74>)
   81708:	47a8      	blx	r5
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
   8170a:	f104 0024 	add.w	r0, r4, #36	; 0x24
   8170e:	47a8      	blx	r5
		}
	}
	taskEXIT_CRITICAL();
   81710:	4b06      	ldr	r3, [pc, #24]	; (8172c <xQueueGenericReset+0x78>)
   81712:	4798      	blx	r3

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
}
   81714:	2001      	movs	r0, #1
   81716:	bd38      	pop	{r3, r4, r5, pc}
   81718:	00081341 	.word	0x00081341
   8171c:	00081351 	.word	0x00081351
   81720:	000822d5 	.word	0x000822d5
   81724:	00081331 	.word	0x00081331
   81728:	0008123d 	.word	0x0008123d
   8172c:	00081371 	.word	0x00081371

00081730 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

xQueueHandle xQueueGenericCreate( unsigned portBASE_TYPE uxQueueLength, unsigned portBASE_TYPE uxItemSize, unsigned char ucQueueType )
{
   81730:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	/* Allocate the new queue structure. */
	if( uxQueueLength > ( unsigned portBASE_TYPE ) 0 )
   81732:	b1a0      	cbz	r0, 8175e <xQueueGenericCreate+0x2e>
   81734:	460d      	mov	r5, r1
   81736:	4617      	mov	r7, r2
   81738:	4606      	mov	r6, r0
	{
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
   8173a:	2050      	movs	r0, #80	; 0x50
   8173c:	4b0e      	ldr	r3, [pc, #56]	; (81778 <xQueueGenericCreate+0x48>)
   8173e:	4798      	blx	r3
		if( pxNewQueue != NULL )
   81740:	4604      	mov	r4, r0
   81742:	b160      	cbz	r0, 8175e <xQueueGenericCreate+0x2e>
		{
			/* Create the list of pointers to queue items.  The queue is one byte
			longer than asked for to make wrap checking easier/faster. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1;

			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
   81744:	fb05 f006 	mul.w	r0, r5, r6
   81748:	3001      	adds	r0, #1
   8174a:	4b0b      	ldr	r3, [pc, #44]	; (81778 <xQueueGenericCreate+0x48>)
   8174c:	4798      	blx	r3
   8174e:	6020      	str	r0, [r4, #0]
			if( pxNewQueue->pcHead != NULL )
   81750:	b940      	cbnz	r0, 81764 <xQueueGenericCreate+0x34>
				xReturn = pxNewQueue;
			}
			else
			{
				traceQUEUE_CREATE_FAILED( ucQueueType );
				vPortFree( pxNewQueue );
   81752:	4620      	mov	r0, r4
   81754:	4b09      	ldr	r3, [pc, #36]	; (8177c <xQueueGenericCreate+0x4c>)
   81756:	4798      	blx	r3
   81758:	e001      	b.n	8175e <xQueueGenericCreate+0x2e>
			}
		}
	}

	configASSERT( xReturn );
   8175a:	bf00      	nop
   8175c:	e7fd      	b.n	8175a <xQueueGenericCreate+0x2a>
   8175e:	4b08      	ldr	r3, [pc, #32]	; (81780 <xQueueGenericCreate+0x50>)
   81760:	4798      	blx	r3
   81762:	e7fa      	b.n	8175a <xQueueGenericCreate+0x2a>
			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
			if( pxNewQueue->pcHead != NULL )
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->uxLength = uxQueueLength;
   81764:	63e6      	str	r6, [r4, #60]	; 0x3c
				pxNewQueue->uxItemSize = uxItemSize;
   81766:	6425      	str	r5, [r4, #64]	; 0x40
				xQueueGenericReset( pxNewQueue, pdTRUE );
   81768:	2101      	movs	r1, #1
   8176a:	4620      	mov	r0, r4
   8176c:	4b05      	ldr	r3, [pc, #20]	; (81784 <xQueueGenericCreate+0x54>)
   8176e:	4798      	blx	r3
				#if ( configUSE_TRACE_FACILITY == 1 )
				{
					pxNewQueue->ucQueueType = ucQueueType;
   81770:	f884 704d 	strb.w	r7, [r4, #77]	; 0x4d
	}

	configASSERT( xReturn );

	return xReturn;
}
   81774:	4620      	mov	r0, r4
   81776:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   81778:	00081499 	.word	0x00081499
   8177c:	00081561 	.word	0x00081561
   81780:	00081341 	.word	0x00081341
   81784:	000816b5 	.word	0x000816b5

00081788 <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSend( xQueueHandle pxQueue, const void * const pvItemToQueue, portTickType xTicksToWait, portBASE_TYPE xCopyPosition )
{
   81788:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8178c:	b085      	sub	sp, #20
   8178e:	9300      	str	r3, [sp, #0]
   81790:	f8ad 2006 	strh.w	r2, [sp, #6]
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
xTimeOutType xTimeOut;

	configASSERT( pxQueue );
   81794:	b918      	cbnz	r0, 8179e <xQueueGenericSend+0x16>
   81796:	4b3a      	ldr	r3, [pc, #232]	; (81880 <xQueueGenericSend+0xf8>)
   81798:	4798      	blx	r3
   8179a:	bf00      	nop
   8179c:	e7fd      	b.n	8179a <xQueueGenericSend+0x12>
   8179e:	468a      	mov	sl, r1
   817a0:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
   817a2:	b929      	cbnz	r1, 817b0 <xQueueGenericSend+0x28>
   817a4:	6c03      	ldr	r3, [r0, #64]	; 0x40
   817a6:	b12b      	cbz	r3, 817b4 <xQueueGenericSend+0x2c>
   817a8:	4b35      	ldr	r3, [pc, #212]	; (81880 <xQueueGenericSend+0xf8>)
   817aa:	4798      	blx	r3
   817ac:	bf00      	nop
   817ae:	e7fd      	b.n	817ac <xQueueGenericSend+0x24>
   817b0:	2700      	movs	r7, #0
   817b2:	e000      	b.n	817b6 <xQueueGenericSend+0x2e>
   817b4:	2700      	movs	r7, #0
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
   817b6:	4e33      	ldr	r6, [pc, #204]	; (81884 <xQueueGenericSend+0xfc>)
				}
				else if( xEntryTimeSet == pdFALSE )
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
   817b8:	f8df b0f0 	ldr.w	fp, [pc, #240]	; 818ac <xQueueGenericSend+0x124>
					xEntryTimeSet = pdTRUE;
				}
			}
		}
		taskEXIT_CRITICAL();
   817bc:	4d32      	ldr	r5, [pc, #200]	; (81888 <xQueueGenericSend+0x100>)
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
   817be:	47b0      	blx	r6
		{
			/* Is there room on the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
   817c0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   817c2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   817c4:	429a      	cmp	r2, r3
   817c6:	d212      	bcs.n	817ee <xQueueGenericSend+0x66>
			{
				traceQUEUE_SEND( pxQueue );
				prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
   817c8:	9a00      	ldr	r2, [sp, #0]
   817ca:	4651      	mov	r1, sl
   817cc:	4620      	mov	r0, r4
   817ce:	4b2f      	ldr	r3, [pc, #188]	; (8188c <xQueueGenericSend+0x104>)
   817d0:	4798      	blx	r3

				/* If there was a task waiting for data to arrive on the
				queue then unblock it now. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   817d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
   817d4:	b13b      	cbz	r3, 817e6 <xQueueGenericSend+0x5e>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
   817d6:	f104 0024 	add.w	r0, r4, #36	; 0x24
   817da:	4b2d      	ldr	r3, [pc, #180]	; (81890 <xQueueGenericSend+0x108>)
   817dc:	4798      	blx	r3
   817de:	2801      	cmp	r0, #1
   817e0:	d101      	bne.n	817e6 <xQueueGenericSend+0x5e>
					{
						/* The unblocked task has a priority higher than
						our own so yield immediately.  Yes it is ok to do
						this from within the critical section - the kernel
						takes care of that. */
						portYIELD_WITHIN_API();
   817e2:	4b2c      	ldr	r3, [pc, #176]	; (81894 <xQueueGenericSend+0x10c>)
   817e4:	4798      	blx	r3
					}
				}

				taskEXIT_CRITICAL();
   817e6:	4b28      	ldr	r3, [pc, #160]	; (81888 <xQueueGenericSend+0x100>)
   817e8:	4798      	blx	r3

				/* Return to the original privilege level before exiting the
				function. */
				return pdPASS;
   817ea:	2001      	movs	r0, #1
   817ec:	e045      	b.n	8187a <xQueueGenericSend+0xf2>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
   817ee:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   817f2:	b91b      	cbnz	r3, 817fc <xQueueGenericSend+0x74>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
   817f4:	4b24      	ldr	r3, [pc, #144]	; (81888 <xQueueGenericSend+0x100>)
   817f6:	4798      	blx	r3

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
   817f8:	2000      	movs	r0, #0
   817fa:	e03e      	b.n	8187a <xQueueGenericSend+0xf2>
				}
				else if( xEntryTimeSet == pdFALSE )
   817fc:	b917      	cbnz	r7, 81804 <xQueueGenericSend+0x7c>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
   817fe:	a802      	add	r0, sp, #8
   81800:	47d8      	blx	fp
					xEntryTimeSet = pdTRUE;
   81802:	2701      	movs	r7, #1
				}
			}
		}
		taskEXIT_CRITICAL();
   81804:	47a8      	blx	r5

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
   81806:	4b24      	ldr	r3, [pc, #144]	; (81898 <xQueueGenericSend+0x110>)
   81808:	4798      	blx	r3
		prvLockQueue( pxQueue );
   8180a:	47b0      	blx	r6
   8180c:	6c63      	ldr	r3, [r4, #68]	; 0x44
   8180e:	f1b3 3fff 	cmp.w	r3, #4294967295
   81812:	bf04      	itt	eq
   81814:	2300      	moveq	r3, #0
   81816:	6463      	streq	r3, [r4, #68]	; 0x44
   81818:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   8181a:	f1b3 3fff 	cmp.w	r3, #4294967295
   8181e:	bf04      	itt	eq
   81820:	2300      	moveq	r3, #0
   81822:	64a3      	streq	r3, [r4, #72]	; 0x48
   81824:	47a8      	blx	r5

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   81826:	f10d 0106 	add.w	r1, sp, #6
   8182a:	a802      	add	r0, sp, #8
   8182c:	4b1b      	ldr	r3, [pc, #108]	; (8189c <xQueueGenericSend+0x114>)
   8182e:	4798      	blx	r3
   81830:	b9e8      	cbnz	r0, 8186e <xQueueGenericSend+0xe6>

static signed portBASE_TYPE prvIsQueueFull( const xQueueHandle pxQueue )
{
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
   81832:	47b0      	blx	r6
		xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
   81834:	f8d4 9038 	ldr.w	r9, [r4, #56]	; 0x38
   81838:	f8d4 803c 	ldr.w	r8, [r4, #60]	; 0x3c
	taskEXIT_CRITICAL();
   8183c:	47a8      	blx	r5
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
   8183e:	45c1      	cmp	r9, r8
   81840:	d10f      	bne.n	81862 <xQueueGenericSend+0xda>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
   81842:	f8bd 1006 	ldrh.w	r1, [sp, #6]
   81846:	f104 0010 	add.w	r0, r4, #16
   8184a:	4b15      	ldr	r3, [pc, #84]	; (818a0 <xQueueGenericSend+0x118>)
   8184c:	4798      	blx	r3
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
   8184e:	4620      	mov	r0, r4
   81850:	4b14      	ldr	r3, [pc, #80]	; (818a4 <xQueueGenericSend+0x11c>)
   81852:	4798      	blx	r3
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
   81854:	4b14      	ldr	r3, [pc, #80]	; (818a8 <xQueueGenericSend+0x120>)
   81856:	4798      	blx	r3
   81858:	2800      	cmp	r0, #0
   8185a:	d1b0      	bne.n	817be <xQueueGenericSend+0x36>
				{
					portYIELD_WITHIN_API();
   8185c:	4b0d      	ldr	r3, [pc, #52]	; (81894 <xQueueGenericSend+0x10c>)
   8185e:	4798      	blx	r3
   81860:	e7ad      	b.n	817be <xQueueGenericSend+0x36>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
   81862:	4620      	mov	r0, r4
   81864:	4b0f      	ldr	r3, [pc, #60]	; (818a4 <xQueueGenericSend+0x11c>)
   81866:	4798      	blx	r3
				( void ) xTaskResumeAll();
   81868:	4b0f      	ldr	r3, [pc, #60]	; (818a8 <xQueueGenericSend+0x120>)
   8186a:	4798      	blx	r3
   8186c:	e7a7      	b.n	817be <xQueueGenericSend+0x36>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
   8186e:	4620      	mov	r0, r4
   81870:	4b0c      	ldr	r3, [pc, #48]	; (818a4 <xQueueGenericSend+0x11c>)
   81872:	4798      	blx	r3
			( void ) xTaskResumeAll();
   81874:	4b0c      	ldr	r3, [pc, #48]	; (818a8 <xQueueGenericSend+0x120>)
   81876:	4798      	blx	r3

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
   81878:	2000      	movs	r0, #0
		}
	}
}
   8187a:	b005      	add	sp, #20
   8187c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   81880:	00081341 	.word	0x00081341
   81884:	00081351 	.word	0x00081351
   81888:	00081371 	.word	0x00081371
   8188c:	00081599 	.word	0x00081599
   81890:	000822d5 	.word	0x000822d5
   81894:	00081331 	.word	0x00081331
   81898:	00081dbd 	.word	0x00081dbd
   8189c:	00082381 	.word	0x00082381
   818a0:	00082229 	.word	0x00082229
   818a4:	00081625 	.word	0x00081625
   818a8:	00081f19 	.word	0x00081f19
   818ac:	00082359 	.word	0x00082359

000818b0 <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSendFromISR( xQueueHandle pxQueue, const void * const pvItemToQueue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portBASE_TYPE xCopyPosition )
{
   818b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
signed portBASE_TYPE xReturn;
unsigned portBASE_TYPE uxSavedInterruptStatus;

	configASSERT( pxQueue );
   818b4:	b918      	cbnz	r0, 818be <xQueueGenericSendFromISR+0xe>
   818b6:	4b1e      	ldr	r3, [pc, #120]	; (81930 <xQueueGenericSendFromISR+0x80>)
   818b8:	4798      	blx	r3
   818ba:	bf00      	nop
   818bc:	e7fd      	b.n	818ba <xQueueGenericSendFromISR+0xa>
   818be:	460e      	mov	r6, r1
   818c0:	4615      	mov	r5, r2
   818c2:	4698      	mov	r8, r3
   818c4:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
   818c6:	b929      	cbnz	r1, 818d4 <xQueueGenericSendFromISR+0x24>
   818c8:	6c03      	ldr	r3, [r0, #64]	; 0x40
   818ca:	b11b      	cbz	r3, 818d4 <xQueueGenericSendFromISR+0x24>
   818cc:	4b18      	ldr	r3, [pc, #96]	; (81930 <xQueueGenericSendFromISR+0x80>)
   818ce:	4798      	blx	r3
   818d0:	bf00      	nop
   818d2:	e7fd      	b.n	818d0 <xQueueGenericSendFromISR+0x20>
	/* Similar to xQueueGenericSend, except we don't block if there is no room
	in the queue.  Also we don't directly wake a task that was blocked on a
	queue read, instead we return a flag to say whether a context switch is
	required or not (i.e. has a task with a higher priority than us been woken
	by this	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
   818d4:	4b16      	ldr	r3, [pc, #88]	; (81930 <xQueueGenericSendFromISR+0x80>)
   818d6:	4798      	blx	r3
   818d8:	4607      	mov	r7, r0
	{
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
   818da:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   818dc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   818de:	429a      	cmp	r2, r3
   818e0:	d218      	bcs.n	81914 <xQueueGenericSendFromISR+0x64>
		{
			traceQUEUE_SEND_FROM_ISR( pxQueue );

			prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
   818e2:	4642      	mov	r2, r8
   818e4:	4631      	mov	r1, r6
   818e6:	4620      	mov	r0, r4
   818e8:	4b12      	ldr	r3, [pc, #72]	; (81934 <xQueueGenericSendFromISR+0x84>)
   818ea:	4798      	blx	r3

			/* If the queue is locked we do not alter the event list.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
   818ec:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   818ee:	f1b3 3fff 	cmp.w	r3, #4294967295
   818f2:	d10a      	bne.n	8190a <xQueueGenericSendFromISR+0x5a>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   818f4:	6a63      	ldr	r3, [r4, #36]	; 0x24
   818f6:	b17b      	cbz	r3, 81918 <xQueueGenericSendFromISR+0x68>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   818f8:	f104 0024 	add.w	r0, r4, #36	; 0x24
   818fc:	4b0e      	ldr	r3, [pc, #56]	; (81938 <xQueueGenericSendFromISR+0x88>)
   818fe:	4798      	blx	r3
   81900:	b160      	cbz	r0, 8191c <xQueueGenericSendFromISR+0x6c>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						if( pxHigherPriorityTaskWoken != NULL )
   81902:	b16d      	cbz	r5, 81920 <xQueueGenericSendFromISR+0x70>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
   81904:	2401      	movs	r4, #1
   81906:	602c      	str	r4, [r5, #0]
   81908:	e00b      	b.n	81922 <xQueueGenericSendFromISR+0x72>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
   8190a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   8190c:	3301      	adds	r3, #1
   8190e:	64a3      	str	r3, [r4, #72]	; 0x48
			}

			xReturn = pdPASS;
   81910:	2401      	movs	r4, #1
   81912:	e006      	b.n	81922 <xQueueGenericSendFromISR+0x72>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
   81914:	2400      	movs	r4, #0
   81916:	e004      	b.n	81922 <xQueueGenericSendFromISR+0x72>
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
			}

			xReturn = pdPASS;
   81918:	2401      	movs	r4, #1
   8191a:	e002      	b.n	81922 <xQueueGenericSendFromISR+0x72>
   8191c:	2401      	movs	r4, #1
   8191e:	e000      	b.n	81922 <xQueueGenericSendFromISR+0x72>
   81920:	2401      	movs	r4, #1
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
   81922:	4638      	mov	r0, r7
   81924:	4b05      	ldr	r3, [pc, #20]	; (8193c <xQueueGenericSendFromISR+0x8c>)
   81926:	4798      	blx	r3

	return xReturn;
}
   81928:	4620      	mov	r0, r4
   8192a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8192e:	bf00      	nop
   81930:	00081341 	.word	0x00081341
   81934:	00081599 	.word	0x00081599
   81938:	000822d5 	.word	0x000822d5
   8193c:	00081369 	.word	0x00081369

00081940 <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericReceive( xQueueHandle pxQueue, void * const pvBuffer, portTickType xTicksToWait, portBASE_TYPE xJustPeeking )
{
   81940:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   81944:	b085      	sub	sp, #20
   81946:	f8ad 2006 	strh.w	r2, [sp, #6]
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
xTimeOutType xTimeOut;
signed char *pcOriginalReadPosition;

	configASSERT( pxQueue );
   8194a:	b918      	cbnz	r0, 81954 <xQueueGenericReceive+0x14>
   8194c:	4b47      	ldr	r3, [pc, #284]	; (81a6c <xQueueGenericReceive+0x12c>)
   8194e:	4798      	blx	r3
   81950:	bf00      	nop
   81952:	e7fd      	b.n	81950 <xQueueGenericReceive+0x10>
   81954:	4689      	mov	r9, r1
   81956:	469a      	mov	sl, r3
   81958:	4604      	mov	r4, r0
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
   8195a:	b929      	cbnz	r1, 81968 <xQueueGenericReceive+0x28>
   8195c:	6c03      	ldr	r3, [r0, #64]	; 0x40
   8195e:	b12b      	cbz	r3, 8196c <xQueueGenericReceive+0x2c>
   81960:	4b42      	ldr	r3, [pc, #264]	; (81a6c <xQueueGenericReceive+0x12c>)
   81962:	4798      	blx	r3
   81964:	bf00      	nop
   81966:	e7fd      	b.n	81964 <xQueueGenericReceive+0x24>
   81968:	2700      	movs	r7, #0
   8196a:	e000      	b.n	8196e <xQueueGenericReceive+0x2e>
   8196c:	2700      	movs	r7, #0
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
   8196e:	4e40      	ldr	r6, [pc, #256]	; (81a70 <xQueueGenericReceive+0x130>)
				}
				else if( xEntryTimeSet == pdFALSE )
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
   81970:	f8df b12c 	ldr.w	fp, [pc, #300]	; 81aa0 <xQueueGenericReceive+0x160>
					xEntryTimeSet = pdTRUE;
				}
			}
		}
		taskEXIT_CRITICAL();
   81974:	4d3f      	ldr	r5, [pc, #252]	; (81a74 <xQueueGenericReceive+0x134>)
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
   81976:	47b0      	blx	r6
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
   81978:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   8197a:	b343      	cbz	r3, 819ce <xQueueGenericReceive+0x8e>
			{
				/* Remember our read position in case we are just peeking. */
				pcOriginalReadPosition = pxQueue->pcReadFrom;
   8197c:	68e5      	ldr	r5, [r4, #12]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
   8197e:	4649      	mov	r1, r9
   81980:	4620      	mov	r0, r4
   81982:	4b3d      	ldr	r3, [pc, #244]	; (81a78 <xQueueGenericReceive+0x138>)
   81984:	4798      	blx	r3

				if( xJustPeeking == pdFALSE )
   81986:	f1ba 0f00 	cmp.w	sl, #0
   8198a:	d112      	bne.n	819b2 <xQueueGenericReceive+0x72>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* We are actually removing data. */
					--( pxQueue->uxMessagesWaiting );
   8198c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   8198e:	3b01      	subs	r3, #1
   81990:	63a3      	str	r3, [r4, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   81992:	6823      	ldr	r3, [r4, #0]
   81994:	b913      	cbnz	r3, 8199c <xQueueGenericReceive+0x5c>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = xTaskGetCurrentTaskHandle();
   81996:	4b39      	ldr	r3, [pc, #228]	; (81a7c <xQueueGenericReceive+0x13c>)
   81998:	4798      	blx	r3
   8199a:	6060      	str	r0, [r4, #4]
						}
					}
					#endif

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   8199c:	6923      	ldr	r3, [r4, #16]
   8199e:	b193      	cbz	r3, 819c6 <xQueueGenericReceive+0x86>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
   819a0:	f104 0010 	add.w	r0, r4, #16
   819a4:	4b36      	ldr	r3, [pc, #216]	; (81a80 <xQueueGenericReceive+0x140>)
   819a6:	4798      	blx	r3
   819a8:	2801      	cmp	r0, #1
   819aa:	d10c      	bne.n	819c6 <xQueueGenericReceive+0x86>
						{
							portYIELD_WITHIN_API();
   819ac:	4b35      	ldr	r3, [pc, #212]	; (81a84 <xQueueGenericReceive+0x144>)
   819ae:	4798      	blx	r3
   819b0:	e009      	b.n	819c6 <xQueueGenericReceive+0x86>
				{
					traceQUEUE_PEEK( pxQueue );

					/* We are not removing the data, so reset our read
					pointer. */
					pxQueue->pcReadFrom = pcOriginalReadPosition;
   819b2:	60e5      	str	r5, [r4, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   819b4:	6a63      	ldr	r3, [r4, #36]	; 0x24
   819b6:	b133      	cbz	r3, 819c6 <xQueueGenericReceive+0x86>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   819b8:	f104 0024 	add.w	r0, r4, #36	; 0x24
   819bc:	4b30      	ldr	r3, [pc, #192]	; (81a80 <xQueueGenericReceive+0x140>)
   819be:	4798      	blx	r3
   819c0:	b108      	cbz	r0, 819c6 <xQueueGenericReceive+0x86>
						{
							/* The task waiting has a higher priority than this task. */
							portYIELD_WITHIN_API();
   819c2:	4b30      	ldr	r3, [pc, #192]	; (81a84 <xQueueGenericReceive+0x144>)
   819c4:	4798      	blx	r3
						}
					}
				}

				taskEXIT_CRITICAL();
   819c6:	4b2b      	ldr	r3, [pc, #172]	; (81a74 <xQueueGenericReceive+0x134>)
   819c8:	4798      	blx	r3
				return pdPASS;
   819ca:	2001      	movs	r0, #1
   819cc:	e04b      	b.n	81a66 <xQueueGenericReceive+0x126>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
   819ce:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   819d2:	b91b      	cbnz	r3, 819dc <xQueueGenericReceive+0x9c>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
   819d4:	4b27      	ldr	r3, [pc, #156]	; (81a74 <xQueueGenericReceive+0x134>)
   819d6:	4798      	blx	r3
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
   819d8:	2000      	movs	r0, #0
   819da:	e044      	b.n	81a66 <xQueueGenericReceive+0x126>
				}
				else if( xEntryTimeSet == pdFALSE )
   819dc:	b917      	cbnz	r7, 819e4 <xQueueGenericReceive+0xa4>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
   819de:	a802      	add	r0, sp, #8
   819e0:	47d8      	blx	fp
					xEntryTimeSet = pdTRUE;
   819e2:	2701      	movs	r7, #1
				}
			}
		}
		taskEXIT_CRITICAL();
   819e4:	47a8      	blx	r5

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
   819e6:	4b28      	ldr	r3, [pc, #160]	; (81a88 <xQueueGenericReceive+0x148>)
   819e8:	4798      	blx	r3
		prvLockQueue( pxQueue );
   819ea:	47b0      	blx	r6
   819ec:	6c63      	ldr	r3, [r4, #68]	; 0x44
   819ee:	f1b3 3fff 	cmp.w	r3, #4294967295
   819f2:	bf04      	itt	eq
   819f4:	2300      	moveq	r3, #0
   819f6:	6463      	streq	r3, [r4, #68]	; 0x44
   819f8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   819fa:	f1b3 3fff 	cmp.w	r3, #4294967295
   819fe:	bf04      	itt	eq
   81a00:	2300      	moveq	r3, #0
   81a02:	64a3      	streq	r3, [r4, #72]	; 0x48
   81a04:	47a8      	blx	r5

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   81a06:	f10d 0106 	add.w	r1, sp, #6
   81a0a:	a802      	add	r0, sp, #8
   81a0c:	4b1f      	ldr	r3, [pc, #124]	; (81a8c <xQueueGenericReceive+0x14c>)
   81a0e:	4798      	blx	r3
   81a10:	bb18      	cbnz	r0, 81a5a <xQueueGenericReceive+0x11a>

static signed portBASE_TYPE prvIsQueueEmpty( const xQueueHandle pxQueue )
{
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
   81a12:	47b0      	blx	r6
		xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
   81a14:	f8d4 8038 	ldr.w	r8, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
   81a18:	47a8      	blx	r5
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   81a1a:	f1b8 0f00 	cmp.w	r8, #0
   81a1e:	d116      	bne.n	81a4e <xQueueGenericReceive+0x10e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   81a20:	6823      	ldr	r3, [r4, #0]
   81a22:	b923      	cbnz	r3, 81a2e <xQueueGenericReceive+0xee>
					{
						portENTER_CRITICAL();
   81a24:	47b0      	blx	r6
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
   81a26:	6860      	ldr	r0, [r4, #4]
   81a28:	4b19      	ldr	r3, [pc, #100]	; (81a90 <xQueueGenericReceive+0x150>)
   81a2a:	4798      	blx	r3
						}
						portEXIT_CRITICAL();
   81a2c:	47a8      	blx	r5
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
   81a2e:	f8bd 1006 	ldrh.w	r1, [sp, #6]
   81a32:	f104 0024 	add.w	r0, r4, #36	; 0x24
   81a36:	4b17      	ldr	r3, [pc, #92]	; (81a94 <xQueueGenericReceive+0x154>)
   81a38:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
   81a3a:	4620      	mov	r0, r4
   81a3c:	4b16      	ldr	r3, [pc, #88]	; (81a98 <xQueueGenericReceive+0x158>)
   81a3e:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
   81a40:	4b16      	ldr	r3, [pc, #88]	; (81a9c <xQueueGenericReceive+0x15c>)
   81a42:	4798      	blx	r3
   81a44:	2800      	cmp	r0, #0
   81a46:	d196      	bne.n	81976 <xQueueGenericReceive+0x36>
				{
					portYIELD_WITHIN_API();
   81a48:	4b0e      	ldr	r3, [pc, #56]	; (81a84 <xQueueGenericReceive+0x144>)
   81a4a:	4798      	blx	r3
   81a4c:	e793      	b.n	81976 <xQueueGenericReceive+0x36>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
   81a4e:	4620      	mov	r0, r4
   81a50:	4b11      	ldr	r3, [pc, #68]	; (81a98 <xQueueGenericReceive+0x158>)
   81a52:	4798      	blx	r3
				( void ) xTaskResumeAll();
   81a54:	4b11      	ldr	r3, [pc, #68]	; (81a9c <xQueueGenericReceive+0x15c>)
   81a56:	4798      	blx	r3
   81a58:	e78d      	b.n	81976 <xQueueGenericReceive+0x36>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
   81a5a:	4620      	mov	r0, r4
   81a5c:	4b0e      	ldr	r3, [pc, #56]	; (81a98 <xQueueGenericReceive+0x158>)
   81a5e:	4798      	blx	r3
			( void ) xTaskResumeAll();
   81a60:	4b0e      	ldr	r3, [pc, #56]	; (81a9c <xQueueGenericReceive+0x15c>)
   81a62:	4798      	blx	r3
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
   81a64:	2000      	movs	r0, #0
		}
	}
}
   81a66:	b005      	add	sp, #20
   81a68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   81a6c:	00081341 	.word	0x00081341
   81a70:	00081351 	.word	0x00081351
   81a74:	00081371 	.word	0x00081371
   81a78:	000815fd 	.word	0x000815fd
   81a7c:	00082419 	.word	0x00082419
   81a80:	000822d5 	.word	0x000822d5
   81a84:	00081331 	.word	0x00081331
   81a88:	00081dbd 	.word	0x00081dbd
   81a8c:	00082381 	.word	0x00082381
   81a90:	00082445 	.word	0x00082445
   81a94:	00082229 	.word	0x00082229
   81a98:	00081625 	.word	0x00081625
   81a9c:	00081f19 	.word	0x00081f19
   81aa0:	00082359 	.word	0x00082359

00081aa4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if configUSE_TIMERS == 1

	void vQueueWaitForMessageRestricted( xQueueHandle pxQueue, portTickType xTicksToWait )
	{
   81aa4:	b538      	push	{r3, r4, r5, lr}
   81aa6:	4604      	mov	r4, r0
   81aa8:	460d      	mov	r5, r1
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
   81aaa:	4b0d      	ldr	r3, [pc, #52]	; (81ae0 <vQueueWaitForMessageRestricted+0x3c>)
   81aac:	4798      	blx	r3
   81aae:	6c63      	ldr	r3, [r4, #68]	; 0x44
   81ab0:	f1b3 3fff 	cmp.w	r3, #4294967295
   81ab4:	bf04      	itt	eq
   81ab6:	2300      	moveq	r3, #0
   81ab8:	6463      	streq	r3, [r4, #68]	; 0x44
   81aba:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   81abc:	f1b3 3fff 	cmp.w	r3, #4294967295
   81ac0:	bf04      	itt	eq
   81ac2:	2300      	moveq	r3, #0
   81ac4:	64a3      	streq	r3, [r4, #72]	; 0x48
   81ac6:	4b07      	ldr	r3, [pc, #28]	; (81ae4 <vQueueWaitForMessageRestricted+0x40>)
   81ac8:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0U )
   81aca:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   81acc:	b923      	cbnz	r3, 81ad8 <vQueueWaitForMessageRestricted+0x34>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
   81ace:	4629      	mov	r1, r5
   81ad0:	f104 0024 	add.w	r0, r4, #36	; 0x24
   81ad4:	4b04      	ldr	r3, [pc, #16]	; (81ae8 <vQueueWaitForMessageRestricted+0x44>)
   81ad6:	4798      	blx	r3
		}
		prvUnlockQueue( pxQueue );
   81ad8:	4620      	mov	r0, r4
   81ada:	4b04      	ldr	r3, [pc, #16]	; (81aec <vQueueWaitForMessageRestricted+0x48>)
   81adc:	4798      	blx	r3
   81ade:	bd38      	pop	{r3, r4, r5, pc}
   81ae0:	00081351 	.word	0x00081351
   81ae4:	00081371 	.word	0x00081371
   81ae8:	0008228d 	.word	0x0008228d
   81aec:	00081625 	.word	0x00081625

00081af0 <prvAddCurrentTaskToDelayedList>:
	#endif
}
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( portTickType xTimeToWake )
{
   81af0:	b510      	push	{r4, lr}
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
   81af2:	4b10      	ldr	r3, [pc, #64]	; (81b34 <prvAddCurrentTaskToDelayedList+0x44>)
   81af4:	681b      	ldr	r3, [r3, #0]
   81af6:	8098      	strh	r0, [r3, #4]

	if( xTimeToWake < xTickCount )
   81af8:	4b0f      	ldr	r3, [pc, #60]	; (81b38 <prvAddCurrentTaskToDelayedList+0x48>)
   81afa:	881b      	ldrh	r3, [r3, #0]
   81afc:	b29b      	uxth	r3, r3
   81afe:	4298      	cmp	r0, r3
   81b00:	d207      	bcs.n	81b12 <prvAddCurrentTaskToDelayedList+0x22>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
   81b02:	4b0e      	ldr	r3, [pc, #56]	; (81b3c <prvAddCurrentTaskToDelayedList+0x4c>)
   81b04:	6818      	ldr	r0, [r3, #0]
   81b06:	4b0b      	ldr	r3, [pc, #44]	; (81b34 <prvAddCurrentTaskToDelayedList+0x44>)
   81b08:	6819      	ldr	r1, [r3, #0]
   81b0a:	3104      	adds	r1, #4
   81b0c:	4b0c      	ldr	r3, [pc, #48]	; (81b40 <prvAddCurrentTaskToDelayedList+0x50>)
   81b0e:	4798      	blx	r3
   81b10:	bd10      	pop	{r4, pc}
   81b12:	4604      	mov	r4, r0
	}
	else
	{
		/* The wake time has not overflowed, so we can use the current block list. */
		vListInsert( ( xList * ) pxDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
   81b14:	4b0b      	ldr	r3, [pc, #44]	; (81b44 <prvAddCurrentTaskToDelayedList+0x54>)
   81b16:	6818      	ldr	r0, [r3, #0]
   81b18:	4b06      	ldr	r3, [pc, #24]	; (81b34 <prvAddCurrentTaskToDelayedList+0x44>)
   81b1a:	6819      	ldr	r1, [r3, #0]
   81b1c:	3104      	adds	r1, #4
   81b1e:	4b08      	ldr	r3, [pc, #32]	; (81b40 <prvAddCurrentTaskToDelayedList+0x50>)
   81b20:	4798      	blx	r3

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
   81b22:	4b09      	ldr	r3, [pc, #36]	; (81b48 <prvAddCurrentTaskToDelayedList+0x58>)
   81b24:	881b      	ldrh	r3, [r3, #0]
   81b26:	b29b      	uxth	r3, r3
   81b28:	429c      	cmp	r4, r3
		{
			xNextTaskUnblockTime = xTimeToWake;
   81b2a:	bf3c      	itt	cc
   81b2c:	4b06      	ldrcc	r3, [pc, #24]	; (81b48 <prvAddCurrentTaskToDelayedList+0x58>)
   81b2e:	801c      	strhcc	r4, [r3, #0]
   81b30:	bd10      	pop	{r4, pc}
   81b32:	bf00      	nop
   81b34:	20078bc0 	.word	0x20078bc0
   81b38:	20078bdc 	.word	0x20078bdc
   81b3c:	20078be0 	.word	0x20078be0
   81b40:	00081279 	.word	0x00081279
   81b44:	20078ab8 	.word	0x20078ab8
   81b48:	20070150 	.word	0x20070150

00081b4c <xTaskGenericCreate>:
/*-----------------------------------------------------------
 * TASK CREATION API documented in task.h
 *----------------------------------------------------------*/

signed portBASE_TYPE xTaskGenericCreate( pdTASK_CODE pxTaskCode, const signed char * const pcName, unsigned short usStackDepth, void *pvParameters, unsigned portBASE_TYPE uxPriority, xTaskHandle *pxCreatedTask, portSTACK_TYPE *puxStackBuffer, const xMemoryRegion * const xRegions )
{
   81b4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   81b50:	b083      	sub	sp, #12
   81b52:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   81b54:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
   81b58:	9e0e      	ldr	r6, [sp, #56]	; 0x38
signed portBASE_TYPE xReturn;
tskTCB * pxNewTCB;

	configASSERT( pxTaskCode );
   81b5a:	9001      	str	r0, [sp, #4]
   81b5c:	b918      	cbnz	r0, 81b66 <xTaskGenericCreate+0x1a>
   81b5e:	4b62      	ldr	r3, [pc, #392]	; (81ce8 <xTaskGenericCreate+0x19c>)
   81b60:	4798      	blx	r3
   81b62:	bf00      	nop
   81b64:	e7fd      	b.n	81b62 <xTaskGenericCreate+0x16>
   81b66:	4689      	mov	r9, r1
   81b68:	4615      	mov	r5, r2
   81b6a:	469b      	mov	fp, r3
	configASSERT( ( ( uxPriority & ( ~portPRIVILEGE_BIT ) ) < configMAX_PRIORITIES ) );
   81b6c:	2f09      	cmp	r7, #9
   81b6e:	d903      	bls.n	81b78 <xTaskGenericCreate+0x2c>
   81b70:	4b5d      	ldr	r3, [pc, #372]	; (81ce8 <xTaskGenericCreate+0x19c>)
   81b72:	4798      	blx	r3
   81b74:	bf00      	nop
   81b76:	e7fd      	b.n	81b74 <xTaskGenericCreate+0x28>
{
tskTCB *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( tskTCB * ) pvPortMalloc( sizeof( tskTCB ) );
   81b78:	2050      	movs	r0, #80	; 0x50
   81b7a:	4b5c      	ldr	r3, [pc, #368]	; (81cec <xTaskGenericCreate+0x1a0>)
   81b7c:	4798      	blx	r3

	if( pxNewTCB != NULL )
   81b7e:	4604      	mov	r4, r0
   81b80:	2800      	cmp	r0, #0
   81b82:	f000 80ab 	beq.w	81cdc <xTaskGenericCreate+0x190>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
   81b86:	2e00      	cmp	r6, #0
   81b88:	f040 80a5 	bne.w	81cd6 <xTaskGenericCreate+0x18a>
   81b8c:	00a8      	lsls	r0, r5, #2
   81b8e:	4b57      	ldr	r3, [pc, #348]	; (81cec <xTaskGenericCreate+0x1a0>)
   81b90:	4798      	blx	r3
   81b92:	6320      	str	r0, [r4, #48]	; 0x30

		if( pxNewTCB->pxStack == NULL )
   81b94:	b918      	cbnz	r0, 81b9e <xTaskGenericCreate+0x52>
		{
			/* Could not allocate the stack.  Delete the allocated TCB. */
			vPortFree( pxNewTCB );
   81b96:	4620      	mov	r0, r4
   81b98:	4b55      	ldr	r3, [pc, #340]	; (81cf0 <xTaskGenericCreate+0x1a4>)
   81b9a:	4798      	blx	r3
   81b9c:	e09e      	b.n	81cdc <xTaskGenericCreate+0x190>
			pxNewTCB = NULL;
		}
		else
		{
			/* Just to help debugging. */
			memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( portSTACK_TYPE ) );
   81b9e:	00aa      	lsls	r2, r5, #2
   81ba0:	21a5      	movs	r1, #165	; 0xa5
   81ba2:	4b54      	ldr	r3, [pc, #336]	; (81cf4 <xTaskGenericCreate+0x1a8>)
   81ba4:	4798      	blx	r3
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( unsigned short ) 1 );
			pxTopOfStack = ( portSTACK_TYPE * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK  ) );
   81ba6:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
   81baa:	3d01      	subs	r5, #1
   81bac:	6b23      	ldr	r3, [r4, #48]	; 0x30
   81bae:	eb03 0385 	add.w	r3, r3, r5, lsl #2
   81bb2:	f023 0507 	bic.w	r5, r3, #7
{
	/* Store the function name in the TCB. */
	#if configMAX_TASK_NAME_LEN > 1
	{
		/* Don't bring strncpy into the build unnecessarily. */
		strncpy( ( char * ) pxTCB->pcTaskName, ( const char * ) pcName, ( unsigned short ) configMAX_TASK_NAME_LEN );
   81bb6:	2210      	movs	r2, #16
   81bb8:	4649      	mov	r1, r9
   81bba:	f104 0034 	add.w	r0, r4, #52	; 0x34
   81bbe:	4b4e      	ldr	r3, [pc, #312]	; (81cf8 <xTaskGenericCreate+0x1ac>)
   81bc0:	4798      	blx	r3
	}
	#endif
	pxTCB->pcTaskName[ ( unsigned short ) configMAX_TASK_NAME_LEN - ( unsigned short ) 1 ] = ( signed char ) '\0';
   81bc2:	2300      	movs	r3, #0
   81bc4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   81bc8:	463e      	mov	r6, r7
   81bca:	2f09      	cmp	r7, #9
   81bcc:	bf28      	it	cs
   81bce:	2609      	movcs	r6, #9
	if( uxPriority >= configMAX_PRIORITIES )
	{
		uxPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
	}

	pxTCB->uxPriority = uxPriority;
   81bd0:	62e6      	str	r6, [r4, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
   81bd2:	64e6      	str	r6, [r4, #76]	; 0x4c
	}
	#endif

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
   81bd4:	f104 0904 	add.w	r9, r4, #4
   81bd8:	4648      	mov	r0, r9
   81bda:	f8df a16c 	ldr.w	sl, [pc, #364]	; 81d48 <xTaskGenericCreate+0x1fc>
   81bde:	47d0      	blx	sl
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
   81be0:	f104 0018 	add.w	r0, r4, #24
   81be4:	47d0      	blx	sl

	/* Set the pxTCB as a link back from the xListItem.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
   81be6:	6124      	str	r4, [r4, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
   81be8:	f1c6 060a 	rsb	r6, r6, #10
   81bec:	8326      	strh	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
   81bee:	6264      	str	r4, [r4, #36]	; 0x24
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
   81bf0:	465a      	mov	r2, fp
   81bf2:	9901      	ldr	r1, [sp, #4]
   81bf4:	4628      	mov	r0, r5
   81bf6:	4b41      	ldr	r3, [pc, #260]	; (81cfc <xTaskGenericCreate+0x1b0>)
   81bf8:	4798      	blx	r3
   81bfa:	6020      	str	r0, [r4, #0]
		}
		#endif

		/* Check the alignment of the initialised stack. */
		portALIGNMENT_ASSERT_pxCurrentTCB( ( ( ( unsigned long ) pxNewTCB->pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
   81bfc:	f010 0f07 	tst.w	r0, #7
   81c00:	d003      	beq.n	81c0a <xTaskGenericCreate+0xbe>
   81c02:	4b39      	ldr	r3, [pc, #228]	; (81ce8 <xTaskGenericCreate+0x19c>)
   81c04:	4798      	blx	r3
   81c06:	bf00      	nop
   81c08:	e7fd      	b.n	81c06 <xTaskGenericCreate+0xba>

		if( ( void * ) pxCreatedTask != NULL )
   81c0a:	f1b8 0f00 	cmp.w	r8, #0
   81c0e:	d001      	beq.n	81c14 <xTaskGenericCreate+0xc8>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( xTaskHandle ) pxNewTCB;
   81c10:	f8c8 4000 	str.w	r4, [r8]
		}

		/* We are going to manipulate the task queues to add this task to a
		ready list, so must make sure no interrupts occur. */
		taskENTER_CRITICAL();
   81c14:	4b3a      	ldr	r3, [pc, #232]	; (81d00 <xTaskGenericCreate+0x1b4>)
   81c16:	4798      	blx	r3
		{
			uxCurrentNumberOfTasks++;
   81c18:	4a3a      	ldr	r2, [pc, #232]	; (81d04 <xTaskGenericCreate+0x1b8>)
   81c1a:	6813      	ldr	r3, [r2, #0]
   81c1c:	3301      	adds	r3, #1
   81c1e:	6013      	str	r3, [r2, #0]
			if( pxCurrentTCB == NULL )
   81c20:	4b39      	ldr	r3, [pc, #228]	; (81d08 <xTaskGenericCreate+0x1bc>)
   81c22:	681b      	ldr	r3, [r3, #0]
   81c24:	bb0b      	cbnz	r3, 81c6a <xTaskGenericCreate+0x11e>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
   81c26:	4b38      	ldr	r3, [pc, #224]	; (81d08 <xTaskGenericCreate+0x1bc>)
   81c28:	601c      	str	r4, [r3, #0]

				if( uxCurrentNumberOfTasks == ( unsigned portBASE_TYPE ) 1 )
   81c2a:	6813      	ldr	r3, [r2, #0]
   81c2c:	2b01      	cmp	r3, #1
   81c2e:	d126      	bne.n	81c7e <xTaskGenericCreate+0x132>
   81c30:	4d36      	ldr	r5, [pc, #216]	; (81d0c <xTaskGenericCreate+0x1c0>)
   81c32:	f105 08c8 	add.w	r8, r5, #200	; 0xc8
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
   81c36:	4e36      	ldr	r6, [pc, #216]	; (81d10 <xTaskGenericCreate+0x1c4>)
   81c38:	4628      	mov	r0, r5
   81c3a:	47b0      	blx	r6
   81c3c:	3514      	adds	r5, #20

static void prvInitialiseTaskLists( void )
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
   81c3e:	4545      	cmp	r5, r8
   81c40:	d1fa      	bne.n	81c38 <xTaskGenericCreate+0xec>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( ( xList * ) &xDelayedTaskList1 );
   81c42:	f8df 8108 	ldr.w	r8, [pc, #264]	; 81d4c <xTaskGenericCreate+0x200>
   81c46:	4640      	mov	r0, r8
   81c48:	4d31      	ldr	r5, [pc, #196]	; (81d10 <xTaskGenericCreate+0x1c4>)
   81c4a:	47a8      	blx	r5
	vListInitialise( ( xList * ) &xDelayedTaskList2 );
   81c4c:	4e31      	ldr	r6, [pc, #196]	; (81d14 <xTaskGenericCreate+0x1c8>)
   81c4e:	4630      	mov	r0, r6
   81c50:	47a8      	blx	r5
	vListInitialise( ( xList * ) &xPendingReadyList );
   81c52:	4831      	ldr	r0, [pc, #196]	; (81d18 <xTaskGenericCreate+0x1cc>)
   81c54:	47a8      	blx	r5

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( ( xList * ) &xTasksWaitingTermination );
   81c56:	4831      	ldr	r0, [pc, #196]	; (81d1c <xTaskGenericCreate+0x1d0>)
   81c58:	47a8      	blx	r5
	}
	#endif

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( ( xList * ) &xSuspendedTaskList );
   81c5a:	4831      	ldr	r0, [pc, #196]	; (81d20 <xTaskGenericCreate+0x1d4>)
   81c5c:	47a8      	blx	r5
	}
	#endif

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
   81c5e:	4b31      	ldr	r3, [pc, #196]	; (81d24 <xTaskGenericCreate+0x1d8>)
   81c60:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
   81c64:	4b30      	ldr	r3, [pc, #192]	; (81d28 <xTaskGenericCreate+0x1dc>)
   81c66:	601e      	str	r6, [r3, #0]
   81c68:	e009      	b.n	81c7e <xTaskGenericCreate+0x132>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
   81c6a:	4b30      	ldr	r3, [pc, #192]	; (81d2c <xTaskGenericCreate+0x1e0>)
   81c6c:	681b      	ldr	r3, [r3, #0]
   81c6e:	b933      	cbnz	r3, 81c7e <xTaskGenericCreate+0x132>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
   81c70:	4b25      	ldr	r3, [pc, #148]	; (81d08 <xTaskGenericCreate+0x1bc>)
   81c72:	681b      	ldr	r3, [r3, #0]
   81c74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   81c76:	429f      	cmp	r7, r3
					{
						pxCurrentTCB = pxNewTCB;
   81c78:	bf24      	itt	cs
   81c7a:	4b23      	ldrcs	r3, [pc, #140]	; (81d08 <xTaskGenericCreate+0x1bc>)
   81c7c:	601c      	strcs	r4, [r3, #0]
				}
			}

			/* Remember the top priority to make context switching faster.  Use
			the priority in pxNewTCB as this has been capped to a valid value. */
			if( pxNewTCB->uxPriority > uxTopUsedPriority )
   81c7e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   81c80:	4b2b      	ldr	r3, [pc, #172]	; (81d30 <xTaskGenericCreate+0x1e4>)
   81c82:	681b      	ldr	r3, [r3, #0]
   81c84:	4298      	cmp	r0, r3
			{
				uxTopUsedPriority = pxNewTCB->uxPriority;
   81c86:	bf84      	itt	hi
   81c88:	4b29      	ldrhi	r3, [pc, #164]	; (81d30 <xTaskGenericCreate+0x1e4>)
   81c8a:	6018      	strhi	r0, [r3, #0]
			}

			#if ( configUSE_TRACE_FACILITY == 1 )
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
   81c8c:	4a29      	ldr	r2, [pc, #164]	; (81d34 <xTaskGenericCreate+0x1e8>)
   81c8e:	6813      	ldr	r3, [r2, #0]
   81c90:	6463      	str	r3, [r4, #68]	; 0x44
			}
			#endif
			uxTaskNumber++;
   81c92:	3301      	adds	r3, #1
   81c94:	6013      	str	r3, [r2, #0]

			prvAddTaskToReadyQueue( pxNewTCB );
   81c96:	4b28      	ldr	r3, [pc, #160]	; (81d38 <xTaskGenericCreate+0x1ec>)
   81c98:	681b      	ldr	r3, [r3, #0]
   81c9a:	4298      	cmp	r0, r3
   81c9c:	bf84      	itt	hi
   81c9e:	4b26      	ldrhi	r3, [pc, #152]	; (81d38 <xTaskGenericCreate+0x1ec>)
   81ca0:	6018      	strhi	r0, [r3, #0]
   81ca2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   81ca6:	4649      	mov	r1, r9
   81ca8:	4b18      	ldr	r3, [pc, #96]	; (81d0c <xTaskGenericCreate+0x1c0>)
   81caa:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   81cae:	4b23      	ldr	r3, [pc, #140]	; (81d3c <xTaskGenericCreate+0x1f0>)
   81cb0:	4798      	blx	r3

			xReturn = pdPASS;
			portSETUP_TCB( pxNewTCB );
			traceTASK_CREATE( pxNewTCB );
		}
		taskEXIT_CRITICAL();
   81cb2:	4b23      	ldr	r3, [pc, #140]	; (81d40 <xTaskGenericCreate+0x1f4>)
   81cb4:	4798      	blx	r3
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
	{
		if( xSchedulerRunning != pdFALSE )
   81cb6:	4b1d      	ldr	r3, [pc, #116]	; (81d2c <xTaskGenericCreate+0x1e0>)
   81cb8:	681b      	ldr	r3, [r3, #0]
   81cba:	b143      	cbz	r3, 81cce <xTaskGenericCreate+0x182>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
   81cbc:	4b12      	ldr	r3, [pc, #72]	; (81d08 <xTaskGenericCreate+0x1bc>)
   81cbe:	681b      	ldr	r3, [r3, #0]
   81cc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   81cc2:	429f      	cmp	r7, r3
   81cc4:	d905      	bls.n	81cd2 <xTaskGenericCreate+0x186>
			{
				portYIELD_WITHIN_API();
   81cc6:	4b1f      	ldr	r3, [pc, #124]	; (81d44 <xTaskGenericCreate+0x1f8>)
   81cc8:	4798      	blx	r3
   81cca:	2001      	movs	r0, #1
   81ccc:	e008      	b.n	81ce0 <xTaskGenericCreate+0x194>
   81cce:	2001      	movs	r0, #1
   81cd0:	e006      	b.n	81ce0 <xTaskGenericCreate+0x194>
   81cd2:	2001      	movs	r0, #1
   81cd4:	e004      	b.n	81ce0 <xTaskGenericCreate+0x194>
	if( pxNewTCB != NULL )
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
   81cd6:	6306      	str	r6, [r0, #48]	; 0x30
   81cd8:	4630      	mov	r0, r6
   81cda:	e760      	b.n	81b9e <xTaskGenericCreate+0x52>
		}
		taskEXIT_CRITICAL();
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
   81cdc:	f04f 30ff 	mov.w	r0, #4294967295
			}
		}
	}

	return xReturn;
}
   81ce0:	b003      	add	sp, #12
   81ce2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   81ce6:	bf00      	nop
   81ce8:	00081341 	.word	0x00081341
   81cec:	00081499 	.word	0x00081499
   81cf0:	00081561 	.word	0x00081561
   81cf4:	00083a11 	.word	0x00083a11
   81cf8:	00083c69 	.word	0x00083c69
   81cfc:	000812f5 	.word	0x000812f5
   81d00:	00081351 	.word	0x00081351
   81d04:	20078c00 	.word	0x20078c00
   81d08:	20078bc0 	.word	0x20078bc0
   81d0c:	20078af4 	.word	0x20078af4
   81d10:	0008123d 	.word	0x0008123d
   81d14:	20078adc 	.word	0x20078adc
   81d18:	20078bc4 	.word	0x20078bc4
   81d1c:	20078ac8 	.word	0x20078ac8
   81d20:	20078aa4 	.word	0x20078aa4
   81d24:	20078ab8 	.word	0x20078ab8
   81d28:	20078be0 	.word	0x20078be0
   81d2c:	20078ac0 	.word	0x20078ac0
   81d30:	20078c04 	.word	0x20078c04
   81d34:	20078be4 	.word	0x20078be4
   81d38:	20078af0 	.word	0x20078af0
   81d3c:	0008125d 	.word	0x0008125d
   81d40:	00081371 	.word	0x00081371
   81d44:	00081331 	.word	0x00081331
   81d48:	00081255 	.word	0x00081255
   81d4c:	20078be8 	.word	0x20078be8

00081d50 <vTaskStartScheduler>:
 * PUBLIC SCHEDULER CONTROL documented in task.h
 *----------------------------------------------------------*/


void vTaskStartScheduler( void )
{
   81d50:	b510      	push	{r4, lr}
   81d52:	b084      	sub	sp, #16
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle );
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );
   81d54:	2300      	movs	r3, #0
   81d56:	9303      	str	r3, [sp, #12]
   81d58:	9302      	str	r3, [sp, #8]
   81d5a:	9301      	str	r3, [sp, #4]
   81d5c:	9300      	str	r3, [sp, #0]
   81d5e:	f44f 7280 	mov.w	r2, #256	; 0x100
   81d62:	490e      	ldr	r1, [pc, #56]	; (81d9c <vTaskStartScheduler+0x4c>)
   81d64:	480e      	ldr	r0, [pc, #56]	; (81da0 <vTaskStartScheduler+0x50>)
   81d66:	4c0f      	ldr	r4, [pc, #60]	; (81da4 <vTaskStartScheduler+0x54>)
   81d68:	47a0      	blx	r4
	}
	#endif

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
   81d6a:	2801      	cmp	r0, #1
   81d6c:	d10e      	bne.n	81d8c <vTaskStartScheduler+0x3c>
		{
			xReturn = xTimerCreateTimerTask();
   81d6e:	4b0e      	ldr	r3, [pc, #56]	; (81da8 <vTaskStartScheduler+0x58>)
   81d70:	4798      	blx	r3
		}
	}
	#endif

	if( xReturn == pdPASS )
   81d72:	2801      	cmp	r0, #1
   81d74:	d10a      	bne.n	81d8c <vTaskStartScheduler+0x3c>
		so interrupts will automatically get re-enabled when the first task
		starts to run.

		STEPPING THROUGH HERE USING A DEBUGGER CAN CAUSE BIG PROBLEMS IF THE
		DEBUGGER ALLOWS INTERRUPTS TO BE PROCESSED. */
		portDISABLE_INTERRUPTS();
   81d76:	4b0d      	ldr	r3, [pc, #52]	; (81dac <vTaskStartScheduler+0x5c>)
   81d78:	4798      	blx	r3

		xSchedulerRunning = pdTRUE;
   81d7a:	2201      	movs	r2, #1
   81d7c:	4b0c      	ldr	r3, [pc, #48]	; (81db0 <vTaskStartScheduler+0x60>)
   81d7e:	601a      	str	r2, [r3, #0]
		xTickCount = ( portTickType ) 0U;
   81d80:	2200      	movs	r2, #0
   81d82:	4b0c      	ldr	r3, [pc, #48]	; (81db4 <vTaskStartScheduler+0x64>)
   81d84:	801a      	strh	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
   81d86:	4b0c      	ldr	r3, [pc, #48]	; (81db8 <vTaskStartScheduler+0x68>)
   81d88:	4798      	blx	r3
   81d8a:	e004      	b.n	81d96 <vTaskStartScheduler+0x46>
			/* Should only reach here if a task calls xTaskEndScheduler(). */
		}
	}

	/* This line will only be reached if the kernel could not be started. */
	configASSERT( xReturn );
   81d8c:	b918      	cbnz	r0, 81d96 <vTaskStartScheduler+0x46>
   81d8e:	4b07      	ldr	r3, [pc, #28]	; (81dac <vTaskStartScheduler+0x5c>)
   81d90:	4798      	blx	r3
   81d92:	bf00      	nop
   81d94:	e7fd      	b.n	81d92 <vTaskStartScheduler+0x42>
}
   81d96:	b004      	add	sp, #16
   81d98:	bd10      	pop	{r4, pc}
   81d9a:	bf00      	nop
   81d9c:	000868cc 	.word	0x000868cc
   81da0:	00082101 	.word	0x00082101
   81da4:	00081b4d 	.word	0x00081b4d
   81da8:	000825bd 	.word	0x000825bd
   81dac:	00081341 	.word	0x00081341
   81db0:	20078ac0 	.word	0x20078ac0
   81db4:	20078bdc 	.word	0x20078bdc
   81db8:	0008140d 	.word	0x0008140d

00081dbc <vTaskSuspendAll>:

void vTaskSuspendAll( void )
{
	/* A critical section is not required as the variable is of type
	portBASE_TYPE. */
	++uxSchedulerSuspended;
   81dbc:	4a02      	ldr	r2, [pc, #8]	; (81dc8 <vTaskSuspendAll+0xc>)
   81dbe:	6813      	ldr	r3, [r2, #0]
   81dc0:	3301      	adds	r3, #1
   81dc2:	6013      	str	r3, [r2, #0]
   81dc4:	4770      	bx	lr
   81dc6:	bf00      	nop
   81dc8:	20078bbc 	.word	0x20078bbc

00081dcc <xTaskGetTickCount>:
 *----------------------------------------------------------*/



portTickType xTaskGetTickCount( void )
{
   81dcc:	b510      	push	{r4, lr}
portTickType xTicks;

	/* Critical section required if running on a 16 bit processor. */
	taskENTER_CRITICAL();
   81dce:	4b04      	ldr	r3, [pc, #16]	; (81de0 <xTaskGetTickCount+0x14>)
   81dd0:	4798      	blx	r3
	{
		xTicks = xTickCount;
   81dd2:	4b04      	ldr	r3, [pc, #16]	; (81de4 <xTaskGetTickCount+0x18>)
   81dd4:	881c      	ldrh	r4, [r3, #0]
   81dd6:	b2a4      	uxth	r4, r4
	}
	taskEXIT_CRITICAL();
   81dd8:	4b03      	ldr	r3, [pc, #12]	; (81de8 <xTaskGetTickCount+0x1c>)
   81dda:	4798      	blx	r3

	return xTicks;
}
   81ddc:	4620      	mov	r0, r4
   81dde:	bd10      	pop	{r4, pc}
   81de0:	00081351 	.word	0x00081351
   81de4:	20078bdc 	.word	0x20078bdc
   81de8:	00081371 	.word	0x00081371

00081dec <vTaskIncrementTick>:
 * SCHEDULER INTERNALS AVAILABLE FOR PORTING PURPOSES
 * documented in task.h
 *----------------------------------------------------------*/

void vTaskIncrementTick( void )
{
   81dec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   81df0:	4b3d      	ldr	r3, [pc, #244]	; (81ee8 <vTaskIncrementTick+0xfc>)
   81df2:	681b      	ldr	r3, [r3, #0]
   81df4:	2b00      	cmp	r3, #0
   81df6:	d171      	bne.n	81edc <vTaskIncrementTick+0xf0>
	{
		++xTickCount;
   81df8:	4a3c      	ldr	r2, [pc, #240]	; (81eec <vTaskIncrementTick+0x100>)
   81dfa:	8813      	ldrh	r3, [r2, #0]
   81dfc:	3301      	adds	r3, #1
   81dfe:	b29b      	uxth	r3, r3
   81e00:	8013      	strh	r3, [r2, #0]
		if( xTickCount == ( portTickType ) 0U )
   81e02:	8813      	ldrh	r3, [r2, #0]
   81e04:	b29b      	uxth	r3, r3
   81e06:	bb03      	cbnz	r3, 81e4a <vTaskIncrementTick+0x5e>
			xList *pxTemp;

			/* Tick count has overflowed so we need to swap the delay lists.
			If there are any items in pxDelayedTaskList here then there is
			an error! */
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );
   81e08:	4b39      	ldr	r3, [pc, #228]	; (81ef0 <vTaskIncrementTick+0x104>)
   81e0a:	681b      	ldr	r3, [r3, #0]
   81e0c:	681b      	ldr	r3, [r3, #0]
   81e0e:	b11b      	cbz	r3, 81e18 <vTaskIncrementTick+0x2c>
   81e10:	4b38      	ldr	r3, [pc, #224]	; (81ef4 <vTaskIncrementTick+0x108>)
   81e12:	4798      	blx	r3
   81e14:	bf00      	nop
   81e16:	e7fd      	b.n	81e14 <vTaskIncrementTick+0x28>

			pxTemp = pxDelayedTaskList;
   81e18:	4b35      	ldr	r3, [pc, #212]	; (81ef0 <vTaskIncrementTick+0x104>)
   81e1a:	6819      	ldr	r1, [r3, #0]
			pxDelayedTaskList = pxOverflowDelayedTaskList;
   81e1c:	4a36      	ldr	r2, [pc, #216]	; (81ef8 <vTaskIncrementTick+0x10c>)
   81e1e:	6810      	ldr	r0, [r2, #0]
   81e20:	6018      	str	r0, [r3, #0]
			pxOverflowDelayedTaskList = pxTemp;
   81e22:	6011      	str	r1, [r2, #0]
			xNumOfOverflows++;
   81e24:	4935      	ldr	r1, [pc, #212]	; (81efc <vTaskIncrementTick+0x110>)
   81e26:	680a      	ldr	r2, [r1, #0]
   81e28:	3201      	adds	r2, #1
   81e2a:	600a      	str	r2, [r1, #0]

			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   81e2c:	681b      	ldr	r3, [r3, #0]
   81e2e:	681b      	ldr	r3, [r3, #0]
   81e30:	b923      	cbnz	r3, 81e3c <vTaskIncrementTick+0x50>
				/* The new current delayed list is empty.  Set
				xNextTaskUnblockTime to the maximum possible value so it is
				extremely unlikely that the
				if( xTickCount >= xNextTaskUnblockTime ) test will pass until
				there is an item in the delayed list. */
				xNextTaskUnblockTime = portMAX_DELAY;
   81e32:	f64f 72ff 	movw	r2, #65535	; 0xffff
   81e36:	4b32      	ldr	r3, [pc, #200]	; (81f00 <vTaskIncrementTick+0x114>)
   81e38:	801a      	strh	r2, [r3, #0]
   81e3a:	e006      	b.n	81e4a <vTaskIncrementTick+0x5e>
			{
				/* The new current delayed list is not empty, get the value of
				the item at the head of the delayed list.  This is the time at
				which the task at the head of the delayed list should be removed
				from the Blocked state. */
				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
   81e3c:	4b2c      	ldr	r3, [pc, #176]	; (81ef0 <vTaskIncrementTick+0x104>)
   81e3e:	681b      	ldr	r3, [r3, #0]
   81e40:	68db      	ldr	r3, [r3, #12]
   81e42:	68db      	ldr	r3, [r3, #12]
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
   81e44:	889a      	ldrh	r2, [r3, #4]
   81e46:	4b2e      	ldr	r3, [pc, #184]	; (81f00 <vTaskIncrementTick+0x114>)
   81e48:	801a      	strh	r2, [r3, #0]
			}
		}

		/* See if this tick has made a timeout expire. */
		prvCheckDelayedTasks();
   81e4a:	4b28      	ldr	r3, [pc, #160]	; (81eec <vTaskIncrementTick+0x100>)
   81e4c:	881a      	ldrh	r2, [r3, #0]
   81e4e:	b292      	uxth	r2, r2
   81e50:	4b2b      	ldr	r3, [pc, #172]	; (81f00 <vTaskIncrementTick+0x114>)
   81e52:	881b      	ldrh	r3, [r3, #0]
   81e54:	b29b      	uxth	r3, r3
   81e56:	429a      	cmp	r2, r3
   81e58:	d344      	bcc.n	81ee4 <vTaskIncrementTick+0xf8>
   81e5a:	4b25      	ldr	r3, [pc, #148]	; (81ef0 <vTaskIncrementTick+0x104>)
   81e5c:	681b      	ldr	r3, [r3, #0]
   81e5e:	681b      	ldr	r3, [r3, #0]
   81e60:	b16b      	cbz	r3, 81e7e <vTaskIncrementTick+0x92>
   81e62:	4b23      	ldr	r3, [pc, #140]	; (81ef0 <vTaskIncrementTick+0x104>)
   81e64:	681b      	ldr	r3, [r3, #0]
   81e66:	68db      	ldr	r3, [r3, #12]
   81e68:	68dc      	ldr	r4, [r3, #12]
   81e6a:	88a2      	ldrh	r2, [r4, #4]
   81e6c:	4b1f      	ldr	r3, [pc, #124]	; (81eec <vTaskIncrementTick+0x100>)
   81e6e:	881b      	ldrh	r3, [r3, #0]
   81e70:	b29b      	uxth	r3, r3
   81e72:	429a      	cmp	r2, r3
   81e74:	d813      	bhi.n	81e9e <vTaskIncrementTick+0xb2>
   81e76:	4d23      	ldr	r5, [pc, #140]	; (81f04 <vTaskIncrementTick+0x118>)
   81e78:	4e23      	ldr	r6, [pc, #140]	; (81f08 <vTaskIncrementTick+0x11c>)
   81e7a:	4f24      	ldr	r7, [pc, #144]	; (81f0c <vTaskIncrementTick+0x120>)
   81e7c:	e013      	b.n	81ea6 <vTaskIncrementTick+0xba>
   81e7e:	f64f 72ff 	movw	r2, #65535	; 0xffff
   81e82:	4b1f      	ldr	r3, [pc, #124]	; (81f00 <vTaskIncrementTick+0x114>)
   81e84:	801a      	strh	r2, [r3, #0]
   81e86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   81e8a:	4b19      	ldr	r3, [pc, #100]	; (81ef0 <vTaskIncrementTick+0x104>)
   81e8c:	681b      	ldr	r3, [r3, #0]
   81e8e:	68db      	ldr	r3, [r3, #12]
   81e90:	68dc      	ldr	r4, [r3, #12]
   81e92:	88a2      	ldrh	r2, [r4, #4]
   81e94:	4b15      	ldr	r3, [pc, #84]	; (81eec <vTaskIncrementTick+0x100>)
   81e96:	881b      	ldrh	r3, [r3, #0]
   81e98:	b29b      	uxth	r3, r3
   81e9a:	429a      	cmp	r2, r3
   81e9c:	d903      	bls.n	81ea6 <vTaskIncrementTick+0xba>
   81e9e:	4b18      	ldr	r3, [pc, #96]	; (81f00 <vTaskIncrementTick+0x114>)
   81ea0:	801a      	strh	r2, [r3, #0]
   81ea2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   81ea6:	f104 0804 	add.w	r8, r4, #4
   81eaa:	4640      	mov	r0, r8
   81eac:	47a8      	blx	r5
   81eae:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   81eb0:	b113      	cbz	r3, 81eb8 <vTaskIncrementTick+0xcc>
   81eb2:	f104 0018 	add.w	r0, r4, #24
   81eb6:	47a8      	blx	r5
   81eb8:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   81eba:	6833      	ldr	r3, [r6, #0]
   81ebc:	4298      	cmp	r0, r3
   81ebe:	bf88      	it	hi
   81ec0:	6030      	strhi	r0, [r6, #0]
   81ec2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   81ec6:	4641      	mov	r1, r8
   81ec8:	eb07 0080 	add.w	r0, r7, r0, lsl #2
   81ecc:	4b10      	ldr	r3, [pc, #64]	; (81f10 <vTaskIncrementTick+0x124>)
   81ece:	4798      	blx	r3
   81ed0:	4b07      	ldr	r3, [pc, #28]	; (81ef0 <vTaskIncrementTick+0x104>)
   81ed2:	681b      	ldr	r3, [r3, #0]
   81ed4:	681b      	ldr	r3, [r3, #0]
   81ed6:	2b00      	cmp	r3, #0
   81ed8:	d1d7      	bne.n	81e8a <vTaskIncrementTick+0x9e>
   81eda:	e7d0      	b.n	81e7e <vTaskIncrementTick+0x92>
	}
	else
	{
		++uxMissedTicks;
   81edc:	4a0d      	ldr	r2, [pc, #52]	; (81f14 <vTaskIncrementTick+0x128>)
   81ede:	6813      	ldr	r3, [r2, #0]
   81ee0:	3301      	adds	r3, #1
   81ee2:	6013      	str	r3, [r2, #0]
   81ee4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   81ee8:	20078bbc 	.word	0x20078bbc
   81eec:	20078bdc 	.word	0x20078bdc
   81ef0:	20078ab8 	.word	0x20078ab8
   81ef4:	00081341 	.word	0x00081341
   81ef8:	20078be0 	.word	0x20078be0
   81efc:	20078bd8 	.word	0x20078bd8
   81f00:	20070150 	.word	0x20070150
   81f04:	000812b9 	.word	0x000812b9
   81f08:	20078af0 	.word	0x20078af0
   81f0c:	20078af4 	.word	0x20078af4
   81f10:	0008125d 	.word	0x0008125d
   81f14:	20078abc 	.word	0x20078abc

00081f18 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE != 0  */
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
   81f18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
   81f1c:	4b30      	ldr	r3, [pc, #192]	; (81fe0 <xTaskResumeAll+0xc8>)
   81f1e:	681b      	ldr	r3, [r3, #0]
   81f20:	b91b      	cbnz	r3, 81f2a <xTaskResumeAll+0x12>
   81f22:	4b30      	ldr	r3, [pc, #192]	; (81fe4 <xTaskResumeAll+0xcc>)
   81f24:	4798      	blx	r3
   81f26:	bf00      	nop
   81f28:	e7fd      	b.n	81f26 <xTaskResumeAll+0xe>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
   81f2a:	4b2f      	ldr	r3, [pc, #188]	; (81fe8 <xTaskResumeAll+0xd0>)
   81f2c:	4798      	blx	r3
	{
		--uxSchedulerSuspended;
   81f2e:	4b2c      	ldr	r3, [pc, #176]	; (81fe0 <xTaskResumeAll+0xc8>)
   81f30:	681a      	ldr	r2, [r3, #0]
   81f32:	3a01      	subs	r2, #1
   81f34:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   81f36:	681b      	ldr	r3, [r3, #0]
   81f38:	2b00      	cmp	r3, #0
   81f3a:	d149      	bne.n	81fd0 <xTaskResumeAll+0xb8>
		{
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0U )
   81f3c:	4b2b      	ldr	r3, [pc, #172]	; (81fec <xTaskResumeAll+0xd4>)
   81f3e:	681b      	ldr	r3, [r3, #0]
   81f40:	bb03      	cbnz	r3, 81f84 <xTaskResumeAll+0x6c>
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;
   81f42:	2400      	movs	r4, #0
   81f44:	e047      	b.n	81fd6 <xTaskResumeAll+0xbe>

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
   81f46:	f8d8 300c 	ldr.w	r3, [r8, #12]
   81f4a:	68dc      	ldr	r4, [r3, #12]
					uxListRemove( &( pxTCB->xEventListItem ) );
   81f4c:	f104 0018 	add.w	r0, r4, #24
   81f50:	47b8      	blx	r7
					uxListRemove( &( pxTCB->xGenericListItem ) );
   81f52:	f104 0904 	add.w	r9, r4, #4
   81f56:	4648      	mov	r0, r9
   81f58:	47b8      	blx	r7
					prvAddTaskToReadyQueue( pxTCB );
   81f5a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   81f5c:	6833      	ldr	r3, [r6, #0]
   81f5e:	4298      	cmp	r0, r3
   81f60:	bf88      	it	hi
   81f62:	6030      	strhi	r0, [r6, #0]
   81f64:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   81f68:	4649      	mov	r1, r9
   81f6a:	4b21      	ldr	r3, [pc, #132]	; (81ff0 <xTaskResumeAll+0xd8>)
   81f6c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   81f70:	4b20      	ldr	r3, [pc, #128]	; (81ff4 <xTaskResumeAll+0xdc>)
   81f72:	4798      	blx	r3

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
   81f74:	4b20      	ldr	r3, [pc, #128]	; (81ff8 <xTaskResumeAll+0xe0>)
   81f76:	681b      	ldr	r3, [r3, #0]
   81f78:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   81f7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
					{
						xYieldRequired = pdTRUE;
   81f7c:	429a      	cmp	r2, r3
   81f7e:	bf28      	it	cs
   81f80:	2501      	movcs	r5, #1
   81f82:	e004      	b.n	81f8e <xTaskResumeAll+0x76>
   81f84:	2500      	movs	r5, #0
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
   81f86:	f8df 8090 	ldr.w	r8, [pc, #144]	; 82018 <xTaskResumeAll+0x100>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
					uxListRemove( &( pxTCB->xEventListItem ) );
   81f8a:	4f1c      	ldr	r7, [pc, #112]	; (81ffc <xTaskResumeAll+0xe4>)
					uxListRemove( &( pxTCB->xGenericListItem ) );
					prvAddTaskToReadyQueue( pxTCB );
   81f8c:	4e1c      	ldr	r6, [pc, #112]	; (82000 <xTaskResumeAll+0xe8>)
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
   81f8e:	f8d8 3000 	ldr.w	r3, [r8]
   81f92:	2b00      	cmp	r3, #0
   81f94:	d1d7      	bne.n	81f46 <xTaskResumeAll+0x2e>
				}

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
   81f96:	4b1b      	ldr	r3, [pc, #108]	; (82004 <xTaskResumeAll+0xec>)
   81f98:	681b      	ldr	r3, [r3, #0]
   81f9a:	b163      	cbz	r3, 81fb6 <xTaskResumeAll+0x9e>
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
   81f9c:	4b19      	ldr	r3, [pc, #100]	; (82004 <xTaskResumeAll+0xec>)
   81f9e:	681b      	ldr	r3, [r3, #0]
   81fa0:	b17b      	cbz	r3, 81fc2 <xTaskResumeAll+0xaa>
					{
						vTaskIncrementTick();
   81fa2:	4d19      	ldr	r5, [pc, #100]	; (82008 <xTaskResumeAll+0xf0>)
						--uxMissedTicks;
   81fa4:	4c17      	ldr	r4, [pc, #92]	; (82004 <xTaskResumeAll+0xec>)
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
					{
						vTaskIncrementTick();
   81fa6:	47a8      	blx	r5
						--uxMissedTicks;
   81fa8:	6823      	ldr	r3, [r4, #0]
   81faa:	3b01      	subs	r3, #1
   81fac:	6023      	str	r3, [r4, #0]
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
   81fae:	6823      	ldr	r3, [r4, #0]
   81fb0:	2b00      	cmp	r3, #0
   81fb2:	d1f8      	bne.n	81fa6 <xTaskResumeAll+0x8e>
   81fb4:	e005      	b.n	81fc2 <xTaskResumeAll+0xaa>
						xYieldRequired = pdTRUE;
					}
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
   81fb6:	2d01      	cmp	r5, #1
   81fb8:	d003      	beq.n	81fc2 <xTaskResumeAll+0xaa>
   81fba:	4b14      	ldr	r3, [pc, #80]	; (8200c <xTaskResumeAll+0xf4>)
   81fbc:	681b      	ldr	r3, [r3, #0]
   81fbe:	2b01      	cmp	r3, #1
   81fc0:	d108      	bne.n	81fd4 <xTaskResumeAll+0xbc>
				{
					xAlreadyYielded = pdTRUE;
					xMissedYield = pdFALSE;
   81fc2:	2200      	movs	r2, #0
   81fc4:	4b11      	ldr	r3, [pc, #68]	; (8200c <xTaskResumeAll+0xf4>)
   81fc6:	601a      	str	r2, [r3, #0]
					portYIELD_WITHIN_API();
   81fc8:	4b11      	ldr	r3, [pc, #68]	; (82010 <xTaskResumeAll+0xf8>)
   81fca:	4798      	blx	r3
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
				{
					xAlreadyYielded = pdTRUE;
   81fcc:	2401      	movs	r4, #1
   81fce:	e002      	b.n	81fd6 <xTaskResumeAll+0xbe>
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;
   81fd0:	2400      	movs	r4, #0
   81fd2:	e000      	b.n	81fd6 <xTaskResumeAll+0xbe>
   81fd4:	2400      	movs	r4, #0
					portYIELD_WITHIN_API();
				}
			}
		}
	}
	taskEXIT_CRITICAL();
   81fd6:	4b0f      	ldr	r3, [pc, #60]	; (82014 <xTaskResumeAll+0xfc>)
   81fd8:	4798      	blx	r3

	return xAlreadyYielded;
}
   81fda:	4620      	mov	r0, r4
   81fdc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   81fe0:	20078bbc 	.word	0x20078bbc
   81fe4:	00081341 	.word	0x00081341
   81fe8:	00081351 	.word	0x00081351
   81fec:	20078c00 	.word	0x20078c00
   81ff0:	20078af4 	.word	0x20078af4
   81ff4:	0008125d 	.word	0x0008125d
   81ff8:	20078bc0 	.word	0x20078bc0
   81ffc:	000812b9 	.word	0x000812b9
   82000:	20078af0 	.word	0x20078af0
   82004:	20078abc 	.word	0x20078abc
   82008:	00081ded 	.word	0x00081ded
   8200c:	20078bfc 	.word	0x20078bfc
   82010:	00081331 	.word	0x00081331
   82014:	00081371 	.word	0x00081371
   82018:	20078bc4 	.word	0x20078bc4

0008201c <vTaskDelayUntil>:
 *----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( portTickType * const pxPreviousWakeTime, portTickType xTimeIncrement )
	{
   8201c:	b538      	push	{r3, r4, r5, lr}
	portTickType xTimeToWake;
	portBASE_TYPE xAlreadyYielded, xShouldDelay = pdFALSE;

		configASSERT( pxPreviousWakeTime );
   8201e:	b918      	cbnz	r0, 82028 <vTaskDelayUntil+0xc>
   82020:	4b1c      	ldr	r3, [pc, #112]	; (82094 <vTaskDelayUntil+0x78>)
   82022:	4798      	blx	r3
   82024:	bf00      	nop
   82026:	e7fd      	b.n	82024 <vTaskDelayUntil+0x8>
   82028:	460c      	mov	r4, r1
   8202a:	4605      	mov	r5, r0
		configASSERT( ( xTimeIncrement > 0U ) );
   8202c:	b919      	cbnz	r1, 82036 <vTaskDelayUntil+0x1a>
   8202e:	4b19      	ldr	r3, [pc, #100]	; (82094 <vTaskDelayUntil+0x78>)
   82030:	4798      	blx	r3
   82032:	bf00      	nop
   82034:	e7fd      	b.n	82032 <vTaskDelayUntil+0x16>

		vTaskSuspendAll();
   82036:	4b18      	ldr	r3, [pc, #96]	; (82098 <vTaskDelayUntil+0x7c>)
   82038:	4798      	blx	r3
		{
			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
   8203a:	882b      	ldrh	r3, [r5, #0]
   8203c:	441c      	add	r4, r3
   8203e:	b2a4      	uxth	r4, r4

			if( xTickCount < *pxPreviousWakeTime )
   82040:	4a16      	ldr	r2, [pc, #88]	; (8209c <vTaskDelayUntil+0x80>)
   82042:	8812      	ldrh	r2, [r2, #0]
   82044:	b292      	uxth	r2, r2
   82046:	4293      	cmp	r3, r2
   82048:	d908      	bls.n	8205c <vTaskDelayUntil+0x40>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xTickCount ) )
   8204a:	42a3      	cmp	r3, r4
   8204c:	d91e      	bls.n	8208c <vTaskDelayUntil+0x70>
   8204e:	4b13      	ldr	r3, [pc, #76]	; (8209c <vTaskDelayUntil+0x80>)
   82050:	881b      	ldrh	r3, [r3, #0]
   82052:	b29b      	uxth	r3, r3
					xShouldDelay = pdTRUE;
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
   82054:	802c      	strh	r4, [r5, #0]

			if( xShouldDelay != pdFALSE )
   82056:	429c      	cmp	r4, r3
   82058:	d910      	bls.n	8207c <vTaskDelayUntil+0x60>
   8205a:	e007      	b.n	8206c <vTaskDelayUntil+0x50>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xTickCount ) )
   8205c:	42a3      	cmp	r3, r4
   8205e:	d813      	bhi.n	82088 <vTaskDelayUntil+0x6c>
   82060:	4b0e      	ldr	r3, [pc, #56]	; (8209c <vTaskDelayUntil+0x80>)
   82062:	881b      	ldrh	r3, [r3, #0]
   82064:	b29b      	uxth	r3, r3
   82066:	429c      	cmp	r4, r3
   82068:	d80e      	bhi.n	82088 <vTaskDelayUntil+0x6c>
   8206a:	e00f      	b.n	8208c <vTaskDelayUntil+0x70>
				traceTASK_DELAY_UNTIL();

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
   8206c:	4b0c      	ldr	r3, [pc, #48]	; (820a0 <vTaskDelayUntil+0x84>)
   8206e:	6818      	ldr	r0, [r3, #0]
   82070:	3004      	adds	r0, #4
   82072:	4b0c      	ldr	r3, [pc, #48]	; (820a4 <vTaskDelayUntil+0x88>)
   82074:	4798      	blx	r3
					no need to check, and the port reset macro can be called
					directly. */
					portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
				}

				prvAddCurrentTaskToDelayedList( xTimeToWake );
   82076:	4620      	mov	r0, r4
   82078:	4b0b      	ldr	r3, [pc, #44]	; (820a8 <vTaskDelayUntil+0x8c>)
   8207a:	4798      	blx	r3
			}
		}
		xAlreadyYielded = xTaskResumeAll();
   8207c:	4b0b      	ldr	r3, [pc, #44]	; (820ac <vTaskDelayUntil+0x90>)
   8207e:	4798      	blx	r3

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
   82080:	b930      	cbnz	r0, 82090 <vTaskDelayUntil+0x74>
		{
			portYIELD_WITHIN_API();
   82082:	4b0b      	ldr	r3, [pc, #44]	; (820b0 <vTaskDelayUntil+0x94>)
   82084:	4798      	blx	r3
		}
	}
   82086:	bd38      	pop	{r3, r4, r5, pc}
					xShouldDelay = pdTRUE;
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
   82088:	802c      	strh	r4, [r5, #0]
   8208a:	e7ef      	b.n	8206c <vTaskDelayUntil+0x50>
   8208c:	802c      	strh	r4, [r5, #0]
   8208e:	e7f5      	b.n	8207c <vTaskDelayUntil+0x60>
   82090:	bd38      	pop	{r3, r4, r5, pc}
   82092:	bf00      	nop
   82094:	00081341 	.word	0x00081341
   82098:	00081dbd 	.word	0x00081dbd
   8209c:	20078bdc 	.word	0x20078bdc
   820a0:	20078bc0 	.word	0x20078bc0
   820a4:	000812b9 	.word	0x000812b9
   820a8:	00081af1 	.word	0x00081af1
   820ac:	00081f19 	.word	0x00081f19
   820b0:	00081331 	.word	0x00081331

000820b4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( portTickType xTicksToDelay )
	{
   820b4:	b510      	push	{r4, lr}
	portTickType xTimeToWake;
	signed portBASE_TYPE xAlreadyYielded = pdFALSE;

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( portTickType ) 0U )
   820b6:	b188      	cbz	r0, 820dc <vTaskDelay+0x28>
   820b8:	4604      	mov	r4, r0
		{
			vTaskSuspendAll();
   820ba:	4b0a      	ldr	r3, [pc, #40]	; (820e4 <vTaskDelay+0x30>)
   820bc:	4798      	blx	r3
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
   820be:	4b0a      	ldr	r3, [pc, #40]	; (820e8 <vTaskDelay+0x34>)
   820c0:	881b      	ldrh	r3, [r3, #0]
   820c2:	441c      	add	r4, r3
   820c4:	b2a4      	uxth	r4, r4

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
   820c6:	4b09      	ldr	r3, [pc, #36]	; (820ec <vTaskDelay+0x38>)
   820c8:	6818      	ldr	r0, [r3, #0]
   820ca:	3004      	adds	r0, #4
   820cc:	4b08      	ldr	r3, [pc, #32]	; (820f0 <vTaskDelay+0x3c>)
   820ce:	4798      	blx	r3
					/* The current task must be in a ready list, so there is
					no need to check, and the port reset macro can be called
					directly. */
					portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
				}
				prvAddCurrentTaskToDelayedList( xTimeToWake );
   820d0:	4620      	mov	r0, r4
   820d2:	4b08      	ldr	r3, [pc, #32]	; (820f4 <vTaskDelay+0x40>)
   820d4:	4798      	blx	r3
			}
			xAlreadyYielded = xTaskResumeAll();
   820d6:	4b08      	ldr	r3, [pc, #32]	; (820f8 <vTaskDelay+0x44>)
   820d8:	4798      	blx	r3
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
   820da:	b908      	cbnz	r0, 820e0 <vTaskDelay+0x2c>
		{
			portYIELD_WITHIN_API();
   820dc:	4b07      	ldr	r3, [pc, #28]	; (820fc <vTaskDelay+0x48>)
   820de:	4798      	blx	r3
   820e0:	bd10      	pop	{r4, pc}
   820e2:	bf00      	nop
   820e4:	00081dbd 	.word	0x00081dbd
   820e8:	20078bdc 	.word	0x20078bdc
   820ec:	20078bc0 	.word	0x20078bc0
   820f0:	000812b9 	.word	0x000812b9
   820f4:	00081af1 	.word	0x00081af1
   820f8:	00081f19 	.word	0x00081f19
   820fc:	00081331 	.word	0x00081331

00082100 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
   82100:	b580      	push	{r7, lr}
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
   82102:	4d15      	ldr	r5, [pc, #84]	; (82158 <prvIdleTask+0x58>)
		{
			vTaskSuspendAll();
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
   82104:	4f15      	ldr	r7, [pc, #84]	; (8215c <prvIdleTask+0x5c>)

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
		{
			vTaskSuspendAll();
   82106:	f8df 8074 	ldr.w	r8, [pc, #116]	; 8217c <prvIdleTask+0x7c>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
			xTaskResumeAll();
   8210a:	4e15      	ldr	r6, [pc, #84]	; (82160 <prvIdleTask+0x60>)
   8210c:	e019      	b.n	82142 <prvIdleTask+0x42>

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
		{
			vTaskSuspendAll();
   8210e:	47c0      	blx	r8
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
   82110:	683c      	ldr	r4, [r7, #0]
			xTaskResumeAll();
   82112:	47b0      	blx	r6

			if( xListIsEmpty == pdFALSE )
   82114:	b1ac      	cbz	r4, 82142 <prvIdleTask+0x42>
			{
				tskTCB *pxTCB;

				taskENTER_CRITICAL();
   82116:	4b13      	ldr	r3, [pc, #76]	; (82164 <prvIdleTask+0x64>)
   82118:	4798      	blx	r3
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
   8211a:	68fb      	ldr	r3, [r7, #12]
   8211c:	68dc      	ldr	r4, [r3, #12]
					uxListRemove( &( pxTCB->xGenericListItem ) );
   8211e:	1d20      	adds	r0, r4, #4
   82120:	4b11      	ldr	r3, [pc, #68]	; (82168 <prvIdleTask+0x68>)
   82122:	4798      	blx	r3
					--uxCurrentNumberOfTasks;
   82124:	4a11      	ldr	r2, [pc, #68]	; (8216c <prvIdleTask+0x6c>)
   82126:	6813      	ldr	r3, [r2, #0]
   82128:	3b01      	subs	r3, #1
   8212a:	6013      	str	r3, [r2, #0]
					--uxTasksDeleted;
   8212c:	682b      	ldr	r3, [r5, #0]
   8212e:	3b01      	subs	r3, #1
   82130:	602b      	str	r3, [r5, #0]
				}
				taskEXIT_CRITICAL();
   82132:	4b0f      	ldr	r3, [pc, #60]	; (82170 <prvIdleTask+0x70>)
   82134:	4798      	blx	r3
		want to allocate and clean RAM statically. */
		portCLEAN_UP_TCB( pxTCB );

		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
   82136:	6b20      	ldr	r0, [r4, #48]	; 0x30
   82138:	f8df 9044 	ldr.w	r9, [pc, #68]	; 82180 <prvIdleTask+0x80>
   8213c:	47c8      	blx	r9
		vPortFree( pxTCB );
   8213e:	4620      	mov	r0, r4
   82140:	47c8      	blx	r9
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
   82142:	682b      	ldr	r3, [r5, #0]
   82144:	2b00      	cmp	r3, #0
   82146:	d1e2      	bne.n	8210e <prvIdleTask+0xe>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
   82148:	4b0a      	ldr	r3, [pc, #40]	; (82174 <prvIdleTask+0x74>)
   8214a:	681b      	ldr	r3, [r3, #0]
   8214c:	2b01      	cmp	r3, #1
   8214e:	d9dc      	bls.n	8210a <prvIdleTask+0xa>
			{
				taskYIELD();
   82150:	4b09      	ldr	r3, [pc, #36]	; (82178 <prvIdleTask+0x78>)
   82152:	4798      	blx	r3
   82154:	e7d7      	b.n	82106 <prvIdleTask+0x6>
   82156:	bf00      	nop
   82158:	20078ac4 	.word	0x20078ac4
   8215c:	20078ac8 	.word	0x20078ac8
   82160:	00081f19 	.word	0x00081f19
   82164:	00081351 	.word	0x00081351
   82168:	000812b9 	.word	0x000812b9
   8216c:	20078c00 	.word	0x20078c00
   82170:	00081371 	.word	0x00081371
   82174:	20078af4 	.word	0x20078af4
   82178:	00081331 	.word	0x00081331
   8217c:	00081dbd 	.word	0x00081dbd
   82180:	00081561 	.word	0x00081561

00082184 <vTaskSwitchContext>:

#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
   82184:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
   82186:	4b22      	ldr	r3, [pc, #136]	; (82210 <vTaskSwitchContext+0x8c>)
   82188:	681b      	ldr	r3, [r3, #0]
   8218a:	b96b      	cbnz	r3, 821a8 <vTaskSwitchContext+0x24>
		#endif

		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();

		taskSELECT_HIGHEST_PRIORITY_TASK();
   8218c:	4b21      	ldr	r3, [pc, #132]	; (82214 <vTaskSwitchContext+0x90>)
   8218e:	681b      	ldr	r3, [r3, #0]
   82190:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   82194:	009b      	lsls	r3, r3, #2
   82196:	4a20      	ldr	r2, [pc, #128]	; (82218 <vTaskSwitchContext+0x94>)
   82198:	58d3      	ldr	r3, [r2, r3]
   8219a:	b9cb      	cbnz	r3, 821d0 <vTaskSwitchContext+0x4c>
   8219c:	4b1d      	ldr	r3, [pc, #116]	; (82214 <vTaskSwitchContext+0x90>)
   8219e:	681b      	ldr	r3, [r3, #0]
   821a0:	b143      	cbz	r3, 821b4 <vTaskSwitchContext+0x30>
   821a2:	4a1c      	ldr	r2, [pc, #112]	; (82214 <vTaskSwitchContext+0x90>)
   821a4:	491c      	ldr	r1, [pc, #112]	; (82218 <vTaskSwitchContext+0x94>)
   821a6:	e009      	b.n	821bc <vTaskSwitchContext+0x38>
{
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
   821a8:	2201      	movs	r2, #1
   821aa:	4b1c      	ldr	r3, [pc, #112]	; (8221c <vTaskSwitchContext+0x98>)
   821ac:	601a      	str	r2, [r3, #0]
   821ae:	bd10      	pop	{r4, pc}
		#endif

		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();

		taskSELECT_HIGHEST_PRIORITY_TASK();
   821b0:	6813      	ldr	r3, [r2, #0]
   821b2:	b91b      	cbnz	r3, 821bc <vTaskSwitchContext+0x38>
   821b4:	4b1a      	ldr	r3, [pc, #104]	; (82220 <vTaskSwitchContext+0x9c>)
   821b6:	4798      	blx	r3
   821b8:	bf00      	nop
   821ba:	e7fd      	b.n	821b8 <vTaskSwitchContext+0x34>
   821bc:	6813      	ldr	r3, [r2, #0]
   821be:	3b01      	subs	r3, #1
   821c0:	6013      	str	r3, [r2, #0]
   821c2:	6813      	ldr	r3, [r2, #0]
   821c4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   821c8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   821cc:	2b00      	cmp	r3, #0
   821ce:	d0ef      	beq.n	821b0 <vTaskSwitchContext+0x2c>
   821d0:	4b10      	ldr	r3, [pc, #64]	; (82214 <vTaskSwitchContext+0x90>)
   821d2:	681b      	ldr	r3, [r3, #0]
   821d4:	4a10      	ldr	r2, [pc, #64]	; (82218 <vTaskSwitchContext+0x94>)
   821d6:	0099      	lsls	r1, r3, #2
   821d8:	18c8      	adds	r0, r1, r3
   821da:	eb02 0080 	add.w	r0, r2, r0, lsl #2
   821de:	6844      	ldr	r4, [r0, #4]
   821e0:	6864      	ldr	r4, [r4, #4]
   821e2:	6044      	str	r4, [r0, #4]
   821e4:	4602      	mov	r2, r0
   821e6:	3208      	adds	r2, #8
   821e8:	4294      	cmp	r4, r2
   821ea:	d106      	bne.n	821fa <vTaskSwitchContext+0x76>
   821ec:	6860      	ldr	r0, [r4, #4]
   821ee:	eb03 0183 	add.w	r1, r3, r3, lsl #2
   821f2:	4a09      	ldr	r2, [pc, #36]	; (82218 <vTaskSwitchContext+0x94>)
   821f4:	eb02 0281 	add.w	r2, r2, r1, lsl #2
   821f8:	6050      	str	r0, [r2, #4]
   821fa:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   821fe:	4a06      	ldr	r2, [pc, #24]	; (82218 <vTaskSwitchContext+0x94>)
   82200:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   82204:	685b      	ldr	r3, [r3, #4]
   82206:	68da      	ldr	r2, [r3, #12]
   82208:	4b06      	ldr	r3, [pc, #24]	; (82224 <vTaskSwitchContext+0xa0>)
   8220a:	601a      	str	r2, [r3, #0]
   8220c:	bd10      	pop	{r4, pc}
   8220e:	bf00      	nop
   82210:	20078bbc 	.word	0x20078bbc
   82214:	20078af0 	.word	0x20078af0
   82218:	20078af4 	.word	0x20078af4
   8221c:	20078bfc 	.word	0x20078bfc
   82220:	00081341 	.word	0x00081341
   82224:	20078bc0 	.word	0x20078bc0

00082228 <vTaskPlaceOnEventList>:
	}
}
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( const xList * const pxEventList, portTickType xTicksToWait )
{
   82228:	b538      	push	{r3, r4, r5, lr}
portTickType xTimeToWake;

	configASSERT( pxEventList );
   8222a:	b918      	cbnz	r0, 82234 <vTaskPlaceOnEventList+0xc>
   8222c:	4b0f      	ldr	r3, [pc, #60]	; (8226c <vTaskPlaceOnEventList+0x44>)
   8222e:	4798      	blx	r3
   82230:	bf00      	nop
   82232:	e7fd      	b.n	82230 <vTaskPlaceOnEventList+0x8>
   82234:	460c      	mov	r4, r1
	SCHEDULER SUSPENDED. */

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event. */
	vListInsert( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
   82236:	4d0e      	ldr	r5, [pc, #56]	; (82270 <vTaskPlaceOnEventList+0x48>)
   82238:	6829      	ldr	r1, [r5, #0]
   8223a:	3118      	adds	r1, #24
   8223c:	4b0d      	ldr	r3, [pc, #52]	; (82274 <vTaskPlaceOnEventList+0x4c>)
   8223e:	4798      	blx	r3

	/* We must remove ourselves from the ready list before adding ourselves
	to the blocked list as the same list item is used for both lists.  We have
	exclusive access to the ready lists as the scheduler is locked. */
	if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
   82240:	6828      	ldr	r0, [r5, #0]
   82242:	3004      	adds	r0, #4
   82244:	4b0c      	ldr	r3, [pc, #48]	; (82278 <vTaskPlaceOnEventList+0x50>)
   82246:	4798      	blx	r3
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( xTicksToWait == portMAX_DELAY )
   82248:	f64f 73ff 	movw	r3, #65535	; 0xffff
   8224c:	429c      	cmp	r4, r3
   8224e:	d105      	bne.n	8225c <vTaskPlaceOnEventList+0x34>
		{
			/* Add ourselves to the suspended task list instead of a delayed task
			list to ensure we are not woken by a timing event.  We will block
			indefinitely. */
			vListInsertEnd( ( xList * ) &xSuspendedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
   82250:	6829      	ldr	r1, [r5, #0]
   82252:	3104      	adds	r1, #4
   82254:	4809      	ldr	r0, [pc, #36]	; (8227c <vTaskPlaceOnEventList+0x54>)
   82256:	4b0a      	ldr	r3, [pc, #40]	; (82280 <vTaskPlaceOnEventList+0x58>)
   82258:	4798      	blx	r3
   8225a:	bd38      	pop	{r3, r4, r5, pc}
		}
		else
		{
			/* Calculate the time at which the task should be woken if the event does
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
   8225c:	4b09      	ldr	r3, [pc, #36]	; (82284 <vTaskPlaceOnEventList+0x5c>)
   8225e:	8818      	ldrh	r0, [r3, #0]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
   82260:	4420      	add	r0, r4
   82262:	b280      	uxth	r0, r0
   82264:	4b08      	ldr	r3, [pc, #32]	; (82288 <vTaskPlaceOnEventList+0x60>)
   82266:	4798      	blx	r3
   82268:	bd38      	pop	{r3, r4, r5, pc}
   8226a:	bf00      	nop
   8226c:	00081341 	.word	0x00081341
   82270:	20078bc0 	.word	0x20078bc0
   82274:	00081279 	.word	0x00081279
   82278:	000812b9 	.word	0x000812b9
   8227c:	20078aa4 	.word	0x20078aa4
   82280:	0008125d 	.word	0x0008125d
   82284:	20078bdc 	.word	0x20078bdc
   82288:	00081af1 	.word	0x00081af1

0008228c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if configUSE_TIMERS == 1

	void vTaskPlaceOnEventListRestricted( const xList * const pxEventList, portTickType xTicksToWait )
	{
   8228c:	b538      	push	{r3, r4, r5, lr}
	portTickType xTimeToWake;

		configASSERT( pxEventList );
   8228e:	b918      	cbnz	r0, 82298 <vTaskPlaceOnEventListRestricted+0xc>
   82290:	4b0a      	ldr	r3, [pc, #40]	; (822bc <vTaskPlaceOnEventListRestricted+0x30>)
   82292:	4798      	blx	r3
   82294:	bf00      	nop
   82296:	e7fd      	b.n	82294 <vTaskPlaceOnEventListRestricted+0x8>
   82298:	460d      	mov	r5, r1

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
   8229a:	4c09      	ldr	r4, [pc, #36]	; (822c0 <vTaskPlaceOnEventListRestricted+0x34>)
   8229c:	6821      	ldr	r1, [r4, #0]
   8229e:	3118      	adds	r1, #24
   822a0:	4b08      	ldr	r3, [pc, #32]	; (822c4 <vTaskPlaceOnEventListRestricted+0x38>)
   822a2:	4798      	blx	r3

		/* We must remove this task from the ready list before adding it to the
		blocked list as the same list item is used for both lists.  This
		function is called form a critical section. */
		if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
   822a4:	6820      	ldr	r0, [r4, #0]
   822a6:	3004      	adds	r0, #4
   822a8:	4b07      	ldr	r3, [pc, #28]	; (822c8 <vTaskPlaceOnEventListRestricted+0x3c>)
   822aa:	4798      	blx	r3
			portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
		}

		/* Calculate the time at which the task should be woken if the event does
		not occur.  This may overflow but this doesn't matter. */
		xTimeToWake = xTickCount + xTicksToWait;
   822ac:	4b07      	ldr	r3, [pc, #28]	; (822cc <vTaskPlaceOnEventListRestricted+0x40>)
   822ae:	8818      	ldrh	r0, [r3, #0]
		
		traceTASK_DELAY_UNTIL();
		prvAddCurrentTaskToDelayedList( xTimeToWake );
   822b0:	4428      	add	r0, r5
   822b2:	b280      	uxth	r0, r0
   822b4:	4b06      	ldr	r3, [pc, #24]	; (822d0 <vTaskPlaceOnEventListRestricted+0x44>)
   822b6:	4798      	blx	r3
   822b8:	bd38      	pop	{r3, r4, r5, pc}
   822ba:	bf00      	nop
   822bc:	00081341 	.word	0x00081341
   822c0:	20078bc0 	.word	0x20078bc0
   822c4:	0008125d 	.word	0x0008125d
   822c8:	000812b9 	.word	0x000812b9
   822cc:	20078bdc 	.word	0x20078bdc
   822d0:	00081af1 	.word	0x00081af1

000822d4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xTaskRemoveFromEventList( const xList * const pxEventList )
{
   822d4:	b538      	push	{r3, r4, r5, lr}
	get called - the lock count on the queue will get modified instead.  This
	means we can always expect exclusive access to the event list here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
   822d6:	68c3      	ldr	r3, [r0, #12]
   822d8:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
   822da:	b91c      	cbnz	r4, 822e4 <xTaskRemoveFromEventList+0x10>
   822dc:	4b16      	ldr	r3, [pc, #88]	; (82338 <xTaskRemoveFromEventList+0x64>)
   822de:	4798      	blx	r3
   822e0:	bf00      	nop
   822e2:	e7fd      	b.n	822e0 <xTaskRemoveFromEventList+0xc>
	uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
   822e4:	f104 0518 	add.w	r5, r4, #24
   822e8:	4628      	mov	r0, r5
   822ea:	4b14      	ldr	r3, [pc, #80]	; (8233c <xTaskRemoveFromEventList+0x68>)
   822ec:	4798      	blx	r3

	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   822ee:	4b14      	ldr	r3, [pc, #80]	; (82340 <xTaskRemoveFromEventList+0x6c>)
   822f0:	681b      	ldr	r3, [r3, #0]
   822f2:	b99b      	cbnz	r3, 8231c <xTaskRemoveFromEventList+0x48>
	{
		uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
   822f4:	1d25      	adds	r5, r4, #4
   822f6:	4628      	mov	r0, r5
   822f8:	4b10      	ldr	r3, [pc, #64]	; (8233c <xTaskRemoveFromEventList+0x68>)
   822fa:	4798      	blx	r3
		prvAddTaskToReadyQueue( pxUnblockedTCB );
   822fc:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   822fe:	4b11      	ldr	r3, [pc, #68]	; (82344 <xTaskRemoveFromEventList+0x70>)
   82300:	681b      	ldr	r3, [r3, #0]
   82302:	4298      	cmp	r0, r3
   82304:	bf84      	itt	hi
   82306:	4b0f      	ldrhi	r3, [pc, #60]	; (82344 <xTaskRemoveFromEventList+0x70>)
   82308:	6018      	strhi	r0, [r3, #0]
   8230a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   8230e:	4629      	mov	r1, r5
   82310:	4b0d      	ldr	r3, [pc, #52]	; (82348 <xTaskRemoveFromEventList+0x74>)
   82312:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   82316:	4b0d      	ldr	r3, [pc, #52]	; (8234c <xTaskRemoveFromEventList+0x78>)
   82318:	4798      	blx	r3
   8231a:	e003      	b.n	82324 <xTaskRemoveFromEventList+0x50>
	}
	else
	{
		/* We cannot access the delayed or ready lists, so will hold this
		task pending until the scheduler is resumed. */
		vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
   8231c:	4629      	mov	r1, r5
   8231e:	480c      	ldr	r0, [pc, #48]	; (82350 <xTaskRemoveFromEventList+0x7c>)
   82320:	4b0a      	ldr	r3, [pc, #40]	; (8234c <xTaskRemoveFromEventList+0x78>)
   82322:	4798      	blx	r3
	}

	if( pxUnblockedTCB->uxPriority >= pxCurrentTCB->uxPriority )
   82324:	4b0b      	ldr	r3, [pc, #44]	; (82354 <xTaskRemoveFromEventList+0x80>)
   82326:	681b      	ldr	r3, [r3, #0]
	else
	{
		xReturn = pdFALSE;
	}

	return xReturn;
   82328:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   8232a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
   8232c:	4298      	cmp	r0, r3
   8232e:	bf34      	ite	cc
   82330:	2000      	movcc	r0, #0
   82332:	2001      	movcs	r0, #1
   82334:	bd38      	pop	{r3, r4, r5, pc}
   82336:	bf00      	nop
   82338:	00081341 	.word	0x00081341
   8233c:	000812b9 	.word	0x000812b9
   82340:	20078bbc 	.word	0x20078bbc
   82344:	20078af0 	.word	0x20078af0
   82348:	20078af4 	.word	0x20078af4
   8234c:	0008125d 	.word	0x0008125d
   82350:	20078bc4 	.word	0x20078bc4
   82354:	20078bc0 	.word	0x20078bc0

00082358 <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( xTimeOutType * const pxTimeOut )
{
   82358:	b508      	push	{r3, lr}
	configASSERT( pxTimeOut );
   8235a:	b918      	cbnz	r0, 82364 <vTaskSetTimeOutState+0xc>
   8235c:	4b05      	ldr	r3, [pc, #20]	; (82374 <vTaskSetTimeOutState+0x1c>)
   8235e:	4798      	blx	r3
   82360:	bf00      	nop
   82362:	e7fd      	b.n	82360 <vTaskSetTimeOutState+0x8>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
   82364:	4a04      	ldr	r2, [pc, #16]	; (82378 <vTaskSetTimeOutState+0x20>)
   82366:	6812      	ldr	r2, [r2, #0]
   82368:	6002      	str	r2, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
   8236a:	4a04      	ldr	r2, [pc, #16]	; (8237c <vTaskSetTimeOutState+0x24>)
   8236c:	8812      	ldrh	r2, [r2, #0]
   8236e:	8082      	strh	r2, [r0, #4]
   82370:	bd08      	pop	{r3, pc}
   82372:	bf00      	nop
   82374:	00081341 	.word	0x00081341
   82378:	20078bd8 	.word	0x20078bd8
   8237c:	20078bdc 	.word	0x20078bdc

00082380 <xTaskCheckForTimeOut>:
}
/*-----------------------------------------------------------*/

portBASE_TYPE xTaskCheckForTimeOut( xTimeOutType * const pxTimeOut, portTickType * const pxTicksToWait )
{
   82380:	b538      	push	{r3, r4, r5, lr}
portBASE_TYPE xReturn;

	configASSERT( pxTimeOut );
   82382:	b918      	cbnz	r0, 8238c <xTaskCheckForTimeOut+0xc>
   82384:	4b1b      	ldr	r3, [pc, #108]	; (823f4 <xTaskCheckForTimeOut+0x74>)
   82386:	4798      	blx	r3
   82388:	bf00      	nop
   8238a:	e7fd      	b.n	82388 <xTaskCheckForTimeOut+0x8>
   8238c:	460d      	mov	r5, r1
   8238e:	4604      	mov	r4, r0
	configASSERT( pxTicksToWait );
   82390:	b919      	cbnz	r1, 8239a <xTaskCheckForTimeOut+0x1a>
   82392:	4b18      	ldr	r3, [pc, #96]	; (823f4 <xTaskCheckForTimeOut+0x74>)
   82394:	4798      	blx	r3
   82396:	bf00      	nop
   82398:	e7fd      	b.n	82396 <xTaskCheckForTimeOut+0x16>

	taskENTER_CRITICAL();
   8239a:	4b17      	ldr	r3, [pc, #92]	; (823f8 <xTaskCheckForTimeOut+0x78>)
   8239c:	4798      	blx	r3
	{
		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
   8239e:	882b      	ldrh	r3, [r5, #0]
   823a0:	f64f 72ff 	movw	r2, #65535	; 0xffff
   823a4:	4293      	cmp	r3, r2
   823a6:	d01b      	beq.n	823e0 <xTaskCheckForTimeOut+0x60>
				xReturn = pdFALSE;
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( ( portTickType ) xTickCount >= ( portTickType ) pxTimeOut->xTimeOnEntering ) )
   823a8:	4a14      	ldr	r2, [pc, #80]	; (823fc <xTaskCheckForTimeOut+0x7c>)
   823aa:	6812      	ldr	r2, [r2, #0]
   823ac:	6821      	ldr	r1, [r4, #0]
   823ae:	4291      	cmp	r1, r2
   823b0:	d005      	beq.n	823be <xTaskCheckForTimeOut+0x3e>
   823b2:	4a13      	ldr	r2, [pc, #76]	; (82400 <xTaskCheckForTimeOut+0x80>)
   823b4:	8812      	ldrh	r2, [r2, #0]
   823b6:	b292      	uxth	r2, r2
   823b8:	88a1      	ldrh	r1, [r4, #4]
   823ba:	4291      	cmp	r1, r2
   823bc:	d912      	bls.n	823e4 <xTaskCheckForTimeOut+0x64>
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
		}
		else if( ( ( portTickType ) ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering ) ) < ( portTickType ) *pxTicksToWait )
   823be:	4a10      	ldr	r2, [pc, #64]	; (82400 <xTaskCheckForTimeOut+0x80>)
   823c0:	8811      	ldrh	r1, [r2, #0]
   823c2:	88a0      	ldrh	r0, [r4, #4]
   823c4:	1a09      	subs	r1, r1, r0
   823c6:	b289      	uxth	r1, r1
   823c8:	428b      	cmp	r3, r1
   823ca:	d90d      	bls.n	823e8 <xTaskCheckForTimeOut+0x68>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering );
   823cc:	8812      	ldrh	r2, [r2, #0]
   823ce:	b292      	uxth	r2, r2
   823d0:	1a12      	subs	r2, r2, r0
   823d2:	1a9b      	subs	r3, r3, r2
   823d4:	802b      	strh	r3, [r5, #0]
			vTaskSetTimeOutState( pxTimeOut );
   823d6:	4620      	mov	r0, r4
   823d8:	4b0a      	ldr	r3, [pc, #40]	; (82404 <xTaskCheckForTimeOut+0x84>)
   823da:	4798      	blx	r3
			xReturn = pdFALSE;
   823dc:	2400      	movs	r4, #0
   823de:	e004      	b.n	823ea <xTaskCheckForTimeOut+0x6a>
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
			{
				xReturn = pdFALSE;
   823e0:	2400      	movs	r4, #0
   823e2:	e002      	b.n	823ea <xTaskCheckForTimeOut+0x6a>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
   823e4:	2401      	movs	r4, #1
   823e6:	e000      	b.n	823ea <xTaskCheckForTimeOut+0x6a>
			vTaskSetTimeOutState( pxTimeOut );
			xReturn = pdFALSE;
		}
		else
		{
			xReturn = pdTRUE;
   823e8:	2401      	movs	r4, #1
		}
	}
	taskEXIT_CRITICAL();
   823ea:	4b07      	ldr	r3, [pc, #28]	; (82408 <xTaskCheckForTimeOut+0x88>)
   823ec:	4798      	blx	r3

	return xReturn;
}
   823ee:	4620      	mov	r0, r4
   823f0:	bd38      	pop	{r3, r4, r5, pc}
   823f2:	bf00      	nop
   823f4:	00081341 	.word	0x00081341
   823f8:	00081351 	.word	0x00081351
   823fc:	20078bd8 	.word	0x20078bd8
   82400:	20078bdc 	.word	0x20078bdc
   82404:	00082359 	.word	0x00082359
   82408:	00081371 	.word	0x00081371

0008240c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
	xMissedYield = pdTRUE;
   8240c:	2201      	movs	r2, #1
   8240e:	4b01      	ldr	r3, [pc, #4]	; (82414 <vTaskMissedYield+0x8>)
   82410:	601a      	str	r2, [r3, #0]
   82412:	4770      	bx	lr
   82414:	20078bfc 	.word	0x20078bfc

00082418 <xTaskGetCurrentTaskHandle>:
	xTaskHandle xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
   82418:	4b01      	ldr	r3, [pc, #4]	; (82420 <xTaskGetCurrentTaskHandle+0x8>)
   8241a:	6818      	ldr	r0, [r3, #0]

		return xReturn;
	}
   8241c:	4770      	bx	lr
   8241e:	bf00      	nop
   82420:	20078bc0 	.word	0x20078bc0

00082424 <xTaskGetSchedulerState>:

	portBASE_TYPE xTaskGetSchedulerState( void )
	{
	portBASE_TYPE xReturn;

		if( xSchedulerRunning == pdFALSE )
   82424:	4b05      	ldr	r3, [pc, #20]	; (8243c <xTaskGetSchedulerState+0x18>)
   82426:	681b      	ldr	r3, [r3, #0]
   82428:	b133      	cbz	r3, 82438 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
		}
		else
		{
			if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   8242a:	4b05      	ldr	r3, [pc, #20]	; (82440 <xTaskGetSchedulerState+0x1c>)
   8242c:	681b      	ldr	r3, [r3, #0]
			{
				xReturn = taskSCHEDULER_RUNNING;
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
   8242e:	2b00      	cmp	r3, #0
   82430:	bf0c      	ite	eq
   82432:	2001      	moveq	r0, #1
   82434:	2002      	movne	r0, #2
   82436:	4770      	bx	lr
	{
	portBASE_TYPE xReturn;

		if( xSchedulerRunning == pdFALSE )
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
   82438:	2000      	movs	r0, #0
				xReturn = taskSCHEDULER_SUSPENDED;
			}
		}

		return xReturn;
	}
   8243a:	4770      	bx	lr
   8243c:	20078ac0 	.word	0x20078ac0
   82440:	20078bbc 	.word	0x20078bbc

00082444 <vTaskPriorityInherit>:
	{
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
   82444:	2800      	cmp	r0, #0
   82446:	d031      	beq.n	824ac <vTaskPriorityInherit+0x68>
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( xTaskHandle * const pxMutexHolder )
	{
   82448:	b538      	push	{r3, r4, r5, lr}

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
		{
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
   8244a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   8244c:	4918      	ldr	r1, [pc, #96]	; (824b0 <vTaskPriorityInherit+0x6c>)
   8244e:	6809      	ldr	r1, [r1, #0]
   82450:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
   82452:	428b      	cmp	r3, r1
   82454:	d229      	bcs.n	824aa <vTaskPriorityInherit+0x66>
			{
				/* Adjust the mutex holder state to account for its new priority. */
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxCurrentTCB->uxPriority );
   82456:	4916      	ldr	r1, [pc, #88]	; (824b0 <vTaskPriorityInherit+0x6c>)
   82458:	6809      	ldr	r1, [r1, #0]
   8245a:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
   8245c:	f1c1 010a 	rsb	r1, r1, #10
   82460:	8301      	strh	r1, [r0, #24]

				/* If the task being modified is in the ready state it will need to
				be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
   82462:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   82466:	4913      	ldr	r1, [pc, #76]	; (824b4 <vTaskPriorityInherit+0x70>)
   82468:	eb01 0383 	add.w	r3, r1, r3, lsl #2
   8246c:	6941      	ldr	r1, [r0, #20]
   8246e:	4299      	cmp	r1, r3
   82470:	d117      	bne.n	824a2 <vTaskPriorityInherit+0x5e>
   82472:	4605      	mov	r5, r0
				{
					if( uxListRemove( ( xListItem * ) &( pxTCB->xGenericListItem ) ) == 0 )
   82474:	1d04      	adds	r4, r0, #4
   82476:	4620      	mov	r0, r4
   82478:	4b0f      	ldr	r3, [pc, #60]	; (824b8 <vTaskPriorityInherit+0x74>)
   8247a:	4798      	blx	r3
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
   8247c:	4b0c      	ldr	r3, [pc, #48]	; (824b0 <vTaskPriorityInherit+0x6c>)
   8247e:	681b      	ldr	r3, [r3, #0]
   82480:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
   82482:	62e8      	str	r0, [r5, #44]	; 0x2c
					prvAddTaskToReadyQueue( pxTCB );
   82484:	4b0d      	ldr	r3, [pc, #52]	; (824bc <vTaskPriorityInherit+0x78>)
   82486:	681b      	ldr	r3, [r3, #0]
   82488:	4298      	cmp	r0, r3
   8248a:	bf84      	itt	hi
   8248c:	4b0b      	ldrhi	r3, [pc, #44]	; (824bc <vTaskPriorityInherit+0x78>)
   8248e:	6018      	strhi	r0, [r3, #0]
   82490:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   82494:	4621      	mov	r1, r4
   82496:	4b07      	ldr	r3, [pc, #28]	; (824b4 <vTaskPriorityInherit+0x70>)
   82498:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   8249c:	4b08      	ldr	r3, [pc, #32]	; (824c0 <vTaskPriorityInherit+0x7c>)
   8249e:	4798      	blx	r3
   824a0:	bd38      	pop	{r3, r4, r5, pc}
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
   824a2:	4b03      	ldr	r3, [pc, #12]	; (824b0 <vTaskPriorityInherit+0x6c>)
   824a4:	681b      	ldr	r3, [r3, #0]
   824a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   824a8:	62c3      	str	r3, [r0, #44]	; 0x2c
   824aa:	bd38      	pop	{r3, r4, r5, pc}
   824ac:	4770      	bx	lr
   824ae:	bf00      	nop
   824b0:	20078bc0 	.word	0x20078bc0
   824b4:	20078af4 	.word	0x20078af4
   824b8:	000812b9 	.word	0x000812b9
   824bc:	20078af0 	.word	0x20078af0
   824c0:	0008125d 	.word	0x0008125d

000824c4 <vTaskPriorityDisinherit>:

	void vTaskPriorityDisinherit( xTaskHandle * const pxMutexHolder )
	{
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;

		if( pxMutexHolder != NULL )
   824c4:	b1e8      	cbz	r0, 82502 <vTaskPriorityDisinherit+0x3e>
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinherit( xTaskHandle * const pxMutexHolder )
	{
   824c6:	b538      	push	{r3, r4, r5, lr}
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;

		if( pxMutexHolder != NULL )
		{
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
   824c8:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
   824ca:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
   824cc:	4291      	cmp	r1, r2
   824ce:	d017      	beq.n	82500 <vTaskPriorityDisinherit+0x3c>
   824d0:	4604      	mov	r4, r0
			{
				/* We must be the running task to be able to give the mutex back.
				Remove ourselves from the ready list we currently appear in. */
				if( uxListRemove( ( xListItem * ) &( pxTCB->xGenericListItem ) ) == 0 )
   824d2:	1d05      	adds	r5, r0, #4
   824d4:	4628      	mov	r0, r5
   824d6:	4b0b      	ldr	r3, [pc, #44]	; (82504 <vTaskPriorityDisinherit+0x40>)
   824d8:	4798      	blx	r3
				}

				/* Disinherit the priority before adding the task into the new
				ready list. */
				traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
				pxTCB->uxPriority = pxTCB->uxBasePriority;
   824da:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
   824dc:	62e0      	str	r0, [r4, #44]	; 0x2c
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxTCB->uxPriority );
   824de:	f1c0 030a 	rsb	r3, r0, #10
   824e2:	8323      	strh	r3, [r4, #24]
				prvAddTaskToReadyQueue( pxTCB );
   824e4:	4b08      	ldr	r3, [pc, #32]	; (82508 <vTaskPriorityDisinherit+0x44>)
   824e6:	681b      	ldr	r3, [r3, #0]
   824e8:	4298      	cmp	r0, r3
   824ea:	bf84      	itt	hi
   824ec:	4b06      	ldrhi	r3, [pc, #24]	; (82508 <vTaskPriorityDisinherit+0x44>)
   824ee:	6018      	strhi	r0, [r3, #0]
   824f0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   824f4:	4629      	mov	r1, r5
   824f6:	4b05      	ldr	r3, [pc, #20]	; (8250c <vTaskPriorityDisinherit+0x48>)
   824f8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   824fc:	4b04      	ldr	r3, [pc, #16]	; (82510 <vTaskPriorityDisinherit+0x4c>)
   824fe:	4798      	blx	r3
   82500:	bd38      	pop	{r3, r4, r5, pc}
   82502:	4770      	bx	lr
   82504:	000812b9 	.word	0x000812b9
   82508:	20078af0 	.word	0x20078af0
   8250c:	20078af4 	.word	0x20078af4
   82510:	0008125d 	.word	0x0008125d

00082514 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static portBASE_TYPE prvInsertTimerInActiveList( xTIMER *pxTimer, portTickType xNextExpiryTime, portTickType xTimeNow, portTickType xCommandTime )
{
   82514:	b508      	push	{r3, lr}
portBASE_TYPE xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
   82516:	8081      	strh	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   82518:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
   8251a:	4291      	cmp	r1, r2
   8251c:	d80b      	bhi.n	82536 <prvInsertTimerInActiveList+0x22>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( portTickType ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
   8251e:	1ad2      	subs	r2, r2, r3
   82520:	8b03      	ldrh	r3, [r0, #24]
   82522:	b292      	uxth	r2, r2
   82524:	4293      	cmp	r3, r2
   82526:	d911      	bls.n	8254c <prvInsertTimerInActiveList+0x38>
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
   82528:	1d01      	adds	r1, r0, #4
   8252a:	4b0a      	ldr	r3, [pc, #40]	; (82554 <prvInsertTimerInActiveList+0x40>)
   8252c:	6818      	ldr	r0, [r3, #0]
   8252e:	4b0a      	ldr	r3, [pc, #40]	; (82558 <prvInsertTimerInActiveList+0x44>)
   82530:	4798      	blx	r3
}
/*-----------------------------------------------------------*/

static portBASE_TYPE prvInsertTimerInActiveList( xTIMER *pxTimer, portTickType xNextExpiryTime, portTickType xTimeNow, portTickType xCommandTime )
{
portBASE_TYPE xProcessTimerNow = pdFALSE;
   82532:	2000      	movs	r0, #0
   82534:	bd08      	pop	{r3, pc}
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
   82536:	429a      	cmp	r2, r3
   82538:	d201      	bcs.n	8253e <prvInsertTimerInActiveList+0x2a>
   8253a:	4299      	cmp	r1, r3
   8253c:	d208      	bcs.n	82550 <prvInsertTimerInActiveList+0x3c>
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   8253e:	1d01      	adds	r1, r0, #4
   82540:	4b06      	ldr	r3, [pc, #24]	; (8255c <prvInsertTimerInActiveList+0x48>)
   82542:	6818      	ldr	r0, [r3, #0]
   82544:	4b04      	ldr	r3, [pc, #16]	; (82558 <prvInsertTimerInActiveList+0x44>)
   82546:	4798      	blx	r3
}
/*-----------------------------------------------------------*/

static portBASE_TYPE prvInsertTimerInActiveList( xTIMER *pxTimer, portTickType xNextExpiryTime, portTickType xTimeNow, portTickType xCommandTime )
{
portBASE_TYPE xProcessTimerNow = pdFALSE;
   82548:	2000      	movs	r0, #0
   8254a:	bd08      	pop	{r3, pc}
		timer was issued, and the time the command was processed? */
		if( ( ( portTickType ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
   8254c:	2001      	movs	r0, #1
   8254e:	bd08      	pop	{r3, pc}
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
   82550:	2001      	movs	r0, #1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
   82552:	bd08      	pop	{r3, pc}
   82554:	20078c3c 	.word	0x20078c3c
   82558:	00081279 	.word	0x00081279
   8255c:	20078c08 	.word	0x20078c08

00082560 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
   82560:	b570      	push	{r4, r5, r6, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
   82562:	4b0d      	ldr	r3, [pc, #52]	; (82598 <prvCheckForValidListAndQueue+0x38>)
   82564:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
   82566:	4b0d      	ldr	r3, [pc, #52]	; (8259c <prvCheckForValidListAndQueue+0x3c>)
   82568:	681b      	ldr	r3, [r3, #0]
   8256a:	b98b      	cbnz	r3, 82590 <prvCheckForValidListAndQueue+0x30>
		{
			vListInitialise( &xActiveTimerList1 );
   8256c:	4d0c      	ldr	r5, [pc, #48]	; (825a0 <prvCheckForValidListAndQueue+0x40>)
   8256e:	4628      	mov	r0, r5
   82570:	4e0c      	ldr	r6, [pc, #48]	; (825a4 <prvCheckForValidListAndQueue+0x44>)
   82572:	47b0      	blx	r6
			vListInitialise( &xActiveTimerList2 );
   82574:	4c0c      	ldr	r4, [pc, #48]	; (825a8 <prvCheckForValidListAndQueue+0x48>)
   82576:	4620      	mov	r0, r4
   82578:	47b0      	blx	r6
			pxCurrentTimerList = &xActiveTimerList1;
   8257a:	4b0c      	ldr	r3, [pc, #48]	; (825ac <prvCheckForValidListAndQueue+0x4c>)
   8257c:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
   8257e:	4b0c      	ldr	r3, [pc, #48]	; (825b0 <prvCheckForValidListAndQueue+0x50>)
   82580:	601c      	str	r4, [r3, #0]
			xTimerQueue = xQueueCreate( ( unsigned portBASE_TYPE ) configTIMER_QUEUE_LENGTH, sizeof( xTIMER_MESSAGE ) );
   82582:	2200      	movs	r2, #0
   82584:	210c      	movs	r1, #12
   82586:	2005      	movs	r0, #5
   82588:	4b0a      	ldr	r3, [pc, #40]	; (825b4 <prvCheckForValidListAndQueue+0x54>)
   8258a:	4798      	blx	r3
   8258c:	4b03      	ldr	r3, [pc, #12]	; (8259c <prvCheckForValidListAndQueue+0x3c>)
   8258e:	6018      	str	r0, [r3, #0]
		}
	}
	taskEXIT_CRITICAL();
   82590:	4b09      	ldr	r3, [pc, #36]	; (825b8 <prvCheckForValidListAndQueue+0x58>)
   82592:	4798      	blx	r3
   82594:	bd70      	pop	{r4, r5, r6, pc}
   82596:	bf00      	nop
   82598:	00081351 	.word	0x00081351
   8259c:	20078c38 	.word	0x20078c38
   825a0:	20078c0c 	.word	0x20078c0c
   825a4:	0008123d 	.word	0x0008123d
   825a8:	20078c20 	.word	0x20078c20
   825ac:	20078c08 	.word	0x20078c08
   825b0:	20078c3c 	.word	0x20078c3c
   825b4:	00081731 	.word	0x00081731
   825b8:	00081371 	.word	0x00081371

000825bc <xTimerCreateTimerTask>:
static void prvProcessTimerOrBlockTask( portTickType xNextExpireTime, portBASE_TYPE xListWasEmpty ) PRIVILEGED_FUNCTION;

/*-----------------------------------------------------------*/

portBASE_TYPE xTimerCreateTimerTask( void )
{
   825bc:	b510      	push	{r4, lr}
   825be:	b084      	sub	sp, #16

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
   825c0:	4b0b      	ldr	r3, [pc, #44]	; (825f0 <xTimerCreateTimerTask+0x34>)
   825c2:	4798      	blx	r3

	if( xTimerQueue != NULL )
   825c4:	4b0b      	ldr	r3, [pc, #44]	; (825f4 <xTimerCreateTimerTask+0x38>)
   825c6:	681b      	ldr	r3, [r3, #0]
   825c8:	b163      	cbz	r3, 825e4 <xTimerCreateTimerTask+0x28>
			xReturn = xTaskCreate( prvTimerTask, ( const signed char * ) "Tmr Svc", ( unsigned short ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( unsigned portBASE_TYPE ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, &xTimerTaskHandle );
		}
		#else
		{
			/* Create the timer task without storing its handle. */
			xReturn = xTaskCreate( prvTimerTask, ( const signed char * ) "Tmr Svc", ( unsigned short ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( unsigned portBASE_TYPE ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
   825ca:	2300      	movs	r3, #0
   825cc:	9303      	str	r3, [sp, #12]
   825ce:	9302      	str	r3, [sp, #8]
   825d0:	9301      	str	r3, [sp, #4]
   825d2:	2209      	movs	r2, #9
   825d4:	9200      	str	r2, [sp, #0]
   825d6:	f44f 7200 	mov.w	r2, #512	; 0x200
   825da:	4907      	ldr	r1, [pc, #28]	; (825f8 <xTimerCreateTimerTask+0x3c>)
   825dc:	4807      	ldr	r0, [pc, #28]	; (825fc <xTimerCreateTimerTask+0x40>)
   825de:	4c08      	ldr	r4, [pc, #32]	; (82600 <xTimerCreateTimerTask+0x44>)
   825e0:	47a0      	blx	r4
		}
		#endif
	}

	configASSERT( xReturn );
   825e2:	b918      	cbnz	r0, 825ec <xTimerCreateTimerTask+0x30>
   825e4:	4b07      	ldr	r3, [pc, #28]	; (82604 <xTimerCreateTimerTask+0x48>)
   825e6:	4798      	blx	r3
   825e8:	bf00      	nop
   825ea:	e7fd      	b.n	825e8 <xTimerCreateTimerTask+0x2c>
	return xReturn;
}
   825ec:	b004      	add	sp, #16
   825ee:	bd10      	pop	{r4, pc}
   825f0:	00082561 	.word	0x00082561
   825f4:	20078c38 	.word	0x20078c38
   825f8:	000868d4 	.word	0x000868d4
   825fc:	00082719 	.word	0x00082719
   82600:	00081b4d 	.word	0x00081b4d
   82604:	00081341 	.word	0x00081341

00082608 <xTimerGenericCommand>:
	return ( xTimerHandle ) pxNewTimer;
}
/*-----------------------------------------------------------*/

portBASE_TYPE xTimerGenericCommand( xTimerHandle xTimer, portBASE_TYPE xCommandID, portTickType xOptionalValue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portTickType xBlockTime )
{
   82608:	b530      	push	{r4, r5, lr}
   8260a:	b085      	sub	sp, #20
portBASE_TYPE xReturn = pdFAIL;
xTIMER_MESSAGE xMessage;

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
   8260c:	4c10      	ldr	r4, [pc, #64]	; (82650 <xTimerGenericCommand+0x48>)
   8260e:	6825      	ldr	r5, [r4, #0]
   82610:	b1dd      	cbz	r5, 8264a <xTimerGenericCommand+0x42>
   82612:	461c      	mov	r4, r3
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
   82614:	9101      	str	r1, [sp, #4]
		xMessage.xMessageValue = xOptionalValue;
   82616:	f8ad 2008 	strh.w	r2, [sp, #8]
		xMessage.pxTimer = ( xTIMER * ) xTimer;
   8261a:	9003      	str	r0, [sp, #12]

		if( pxHigherPriorityTaskWoken == NULL )
   8261c:	b974      	cbnz	r4, 8263c <xTimerGenericCommand+0x34>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
   8261e:	4b0d      	ldr	r3, [pc, #52]	; (82654 <xTimerGenericCommand+0x4c>)
   82620:	4798      	blx	r3
   82622:	2801      	cmp	r0, #1
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xBlockTime );
   82624:	f04f 0300 	mov.w	r3, #0
   82628:	bf0c      	ite	eq
   8262a:	f8bd 2020 	ldrheq.w	r2, [sp, #32]
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
   8262e:	461a      	movne	r2, r3
   82630:	a901      	add	r1, sp, #4
   82632:	4807      	ldr	r0, [pc, #28]	; (82650 <xTimerGenericCommand+0x48>)
   82634:	6800      	ldr	r0, [r0, #0]
   82636:	4c08      	ldr	r4, [pc, #32]	; (82658 <xTimerGenericCommand+0x50>)
   82638:	47a0      	blx	r4
   8263a:	e007      	b.n	8264c <xTimerGenericCommand+0x44>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
   8263c:	2300      	movs	r3, #0
   8263e:	4622      	mov	r2, r4
   82640:	a901      	add	r1, sp, #4
   82642:	4628      	mov	r0, r5
   82644:	4c05      	ldr	r4, [pc, #20]	; (8265c <xTimerGenericCommand+0x54>)
   82646:	47a0      	blx	r4
   82648:	e000      	b.n	8264c <xTimerGenericCommand+0x44>
}
/*-----------------------------------------------------------*/

portBASE_TYPE xTimerGenericCommand( xTimerHandle xTimer, portBASE_TYPE xCommandID, portTickType xOptionalValue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portTickType xBlockTime )
{
portBASE_TYPE xReturn = pdFAIL;
   8264a:	2000      	movs	r0, #0

		traceTIMER_COMMAND_SEND( xTimer, xCommandID, xOptionalValue, xReturn );
	}

	return xReturn;
}
   8264c:	b005      	add	sp, #20
   8264e:	bd30      	pop	{r4, r5, pc}
   82650:	20078c38 	.word	0x20078c38
   82654:	00082425 	.word	0x00082425
   82658:	00081789 	.word	0x00081789
   8265c:	000818b1 	.word	0x000818b1

00082660 <prvSampleTimeNow>:
	return xNextExpireTime;
}
/*-----------------------------------------------------------*/

static portTickType prvSampleTimeNow( portBASE_TYPE *pxTimerListsWereSwitched )
{
   82660:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   82664:	b082      	sub	sp, #8
   82666:	4681      	mov	r9, r0
portTickType xTimeNow;
PRIVILEGED_DATA static portTickType xLastTime = ( portTickType ) 0U;

	xTimeNow = xTaskGetTickCount();
   82668:	4b23      	ldr	r3, [pc, #140]	; (826f8 <prvSampleTimeNow+0x98>)
   8266a:	4798      	blx	r3
   8266c:	4680      	mov	r8, r0

	if( xTimeNow < xLastTime )
   8266e:	4b23      	ldr	r3, [pc, #140]	; (826fc <prvSampleTimeNow+0x9c>)
   82670:	881b      	ldrh	r3, [r3, #0]
   82672:	4283      	cmp	r3, r0
   82674:	d936      	bls.n	826e4 <prvSampleTimeNow+0x84>
   82676:	e026      	b.n	826c6 <prvSampleTimeNow+0x66>
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   82678:	68da      	ldr	r2, [r3, #12]
   8267a:	8815      	ldrh	r5, [r2, #0]
   8267c:	b2ad      	uxth	r5, r5

		/* Remove the timer from the list. */
		pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
   8267e:	68db      	ldr	r3, [r3, #12]
   82680:	68dc      	ldr	r4, [r3, #12]
		uxListRemove( &( pxTimer->xTimerListItem ) );
   82682:	f104 0a04 	add.w	sl, r4, #4
   82686:	4650      	mov	r0, sl
   82688:	47b8      	blx	r7

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
   8268a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   8268c:	4620      	mov	r0, r4
   8268e:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
   82690:	69e3      	ldr	r3, [r4, #28]
   82692:	2b01      	cmp	r3, #1
   82694:	d119      	bne.n	826ca <prvSampleTimeNow+0x6a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
   82696:	8b23      	ldrh	r3, [r4, #24]
   82698:	442b      	add	r3, r5
   8269a:	b29b      	uxth	r3, r3
			if( xReloadTime > xNextExpireTime )
   8269c:	429d      	cmp	r5, r3
   8269e:	d206      	bcs.n	826ae <prvSampleTimeNow+0x4e>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
   826a0:	80a3      	strh	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   826a2:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   826a4:	4651      	mov	r1, sl
   826a6:	6830      	ldr	r0, [r6, #0]
   826a8:	4b15      	ldr	r3, [pc, #84]	; (82700 <prvSampleTimeNow+0xa0>)
   826aa:	4798      	blx	r3
   826ac:	e00d      	b.n	826ca <prvSampleTimeNow+0x6a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xNextExpireTime, NULL, tmrNO_DELAY );
   826ae:	2100      	movs	r1, #0
   826b0:	9100      	str	r1, [sp, #0]
   826b2:	460b      	mov	r3, r1
   826b4:	462a      	mov	r2, r5
   826b6:	4620      	mov	r0, r4
   826b8:	4c12      	ldr	r4, [pc, #72]	; (82704 <prvSampleTimeNow+0xa4>)
   826ba:	47a0      	blx	r4
				configASSERT( xResult );
   826bc:	b928      	cbnz	r0, 826ca <prvSampleTimeNow+0x6a>
   826be:	4b12      	ldr	r3, [pc, #72]	; (82708 <prvSampleTimeNow+0xa8>)
   826c0:	4798      	blx	r3
   826c2:	bf00      	nop
   826c4:	e7fd      	b.n	826c2 <prvSampleTimeNow+0x62>

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
   826c6:	4e11      	ldr	r6, [pc, #68]	; (8270c <prvSampleTimeNow+0xac>)
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );

		/* Remove the timer from the list. */
		pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
		uxListRemove( &( pxTimer->xTimerListItem ) );
   826c8:	4f11      	ldr	r7, [pc, #68]	; (82710 <prvSampleTimeNow+0xb0>)

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
   826ca:	6833      	ldr	r3, [r6, #0]
   826cc:	681a      	ldr	r2, [r3, #0]
   826ce:	2a00      	cmp	r2, #0
   826d0:	d1d2      	bne.n	82678 <prvSampleTimeNow+0x18>
			}
		}
	}

	pxTemp = pxCurrentTimerList;
	pxCurrentTimerList = pxOverflowTimerList;
   826d2:	4a10      	ldr	r2, [pc, #64]	; (82714 <prvSampleTimeNow+0xb4>)
   826d4:	6810      	ldr	r0, [r2, #0]
   826d6:	490d      	ldr	r1, [pc, #52]	; (8270c <prvSampleTimeNow+0xac>)
   826d8:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
   826da:	6013      	str	r3, [r2, #0]
	xTimeNow = xTaskGetTickCount();

	if( xTimeNow < xLastTime )
	{
		prvSwitchTimerLists( xLastTime );
		*pxTimerListsWereSwitched = pdTRUE;
   826dc:	2301      	movs	r3, #1
   826de:	f8c9 3000 	str.w	r3, [r9]
   826e2:	e002      	b.n	826ea <prvSampleTimeNow+0x8a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
   826e4:	2300      	movs	r3, #0
   826e6:	f8c9 3000 	str.w	r3, [r9]
	}

	xLastTime = xTimeNow;
   826ea:	4b04      	ldr	r3, [pc, #16]	; (826fc <prvSampleTimeNow+0x9c>)
   826ec:	f8a3 8000 	strh.w	r8, [r3]

	return xTimeNow;
}
   826f0:	4640      	mov	r0, r8
   826f2:	b002      	add	sp, #8
   826f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   826f8:	00081dcd 	.word	0x00081dcd
   826fc:	20078c34 	.word	0x20078c34
   82700:	00081279 	.word	0x00081279
   82704:	00082609 	.word	0x00082609
   82708:	00081341 	.word	0x00081341
   8270c:	20078c08 	.word	0x20078c08
   82710:	000812b9 	.word	0x000812b9
   82714:	20078c3c 	.word	0x20078c3c

00082718 <prvTimerTask>:
	pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
}
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
   82718:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   8271c:	b087      	sub	sp, #28
				time has not been reached yet.  This task should therefore
				block to wait for the next expire time or a command to be
				received - whichever comes first.  The following line cannot
				be reached unless xNextExpireTime > xTimeNow, except in the
				case when the current timer list is empty. */
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
   8271e:	4d51      	ldr	r5, [pc, #324]	; (82864 <prvTimerTask+0x14c>)
portBASE_TYPE xResult;

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
	uxListRemove( &( pxTimer->xTimerListItem ) );
   82720:	f8df 8170 	ldr.w	r8, [pc, #368]	; 82894 <prvTimerTask+0x17c>
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
   82724:	4b50      	ldr	r3, [pc, #320]	; (82868 <prvTimerTask+0x150>)
   82726:	681b      	ldr	r3, [r3, #0]
   82728:	681a      	ldr	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
   8272a:	2a00      	cmp	r2, #0
   8272c:	f000 8090 	beq.w	82850 <prvTimerTask+0x138>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   82730:	68db      	ldr	r3, [r3, #12]
   82732:	881c      	ldrh	r4, [r3, #0]
   82734:	b2a4      	uxth	r4, r4
static void prvProcessTimerOrBlockTask( portTickType xNextExpireTime, portBASE_TYPE xListWasEmpty )
{
portTickType xTimeNow;
portBASE_TYPE xTimerListsWereSwitched;

	vTaskSuspendAll();
   82736:	4b4d      	ldr	r3, [pc, #308]	; (8286c <prvTimerTask+0x154>)
   82738:	4798      	blx	r3
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampelTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   8273a:	a803      	add	r0, sp, #12
   8273c:	4b4c      	ldr	r3, [pc, #304]	; (82870 <prvTimerTask+0x158>)
   8273e:	4798      	blx	r3
   82740:	4607      	mov	r7, r0
		if( xTimerListsWereSwitched == pdFALSE )
   82742:	9b03      	ldr	r3, [sp, #12]
   82744:	2b00      	cmp	r3, #0
   82746:	d132      	bne.n	827ae <prvTimerTask+0x96>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
   82748:	4284      	cmp	r4, r0
   8274a:	d825      	bhi.n	82798 <prvTimerTask+0x80>
			{
				xTaskResumeAll();
   8274c:	4b49      	ldr	r3, [pc, #292]	; (82874 <prvTimerTask+0x15c>)
   8274e:	4798      	blx	r3
xTIMER *pxTimer;
portBASE_TYPE xResult;

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
   82750:	4b45      	ldr	r3, [pc, #276]	; (82868 <prvTimerTask+0x150>)
   82752:	681b      	ldr	r3, [r3, #0]
   82754:	68db      	ldr	r3, [r3, #12]
   82756:	68de      	ldr	r6, [r3, #12]
	uxListRemove( &( pxTimer->xTimerListItem ) );
   82758:	1d30      	adds	r0, r6, #4
   8275a:	47c0      	blx	r8
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
   8275c:	69f3      	ldr	r3, [r6, #28]
   8275e:	2b01      	cmp	r3, #1
   82760:	d115      	bne.n	8278e <prvTimerTask+0x76>
		a time relative to anything other than the current time.  It
		will therefore be inserted into the correct list relative to
		the time this task thinks it is now, even if a command to
		switch lists due to a tick count overflow is already waiting in
		the timer queue. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
   82762:	8b31      	ldrh	r1, [r6, #24]
   82764:	4421      	add	r1, r4
   82766:	4623      	mov	r3, r4
   82768:	463a      	mov	r2, r7
   8276a:	b289      	uxth	r1, r1
   8276c:	4630      	mov	r0, r6
   8276e:	4f42      	ldr	r7, [pc, #264]	; (82878 <prvTimerTask+0x160>)
   82770:	47b8      	blx	r7
   82772:	2801      	cmp	r0, #1
   82774:	d10b      	bne.n	8278e <prvTimerTask+0x76>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xNextExpireTime, NULL, tmrNO_DELAY );
   82776:	2100      	movs	r1, #0
   82778:	9100      	str	r1, [sp, #0]
   8277a:	460b      	mov	r3, r1
   8277c:	4622      	mov	r2, r4
   8277e:	4630      	mov	r0, r6
   82780:	4c3e      	ldr	r4, [pc, #248]	; (8287c <prvTimerTask+0x164>)
   82782:	47a0      	blx	r4
			configASSERT( xResult );
   82784:	b918      	cbnz	r0, 8278e <prvTimerTask+0x76>
   82786:	4b3e      	ldr	r3, [pc, #248]	; (82880 <prvTimerTask+0x168>)
   82788:	4798      	blx	r3
   8278a:	bf00      	nop
   8278c:	e7fd      	b.n	8278a <prvTimerTask+0x72>
			( void ) xResult;
		}
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
   8278e:	6a73      	ldr	r3, [r6, #36]	; 0x24
   82790:	4630      	mov	r0, r6
   82792:	4798      	blx	r3
   82794:	e00d      	b.n	827b2 <prvTimerTask+0x9a>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( portTickType ) 0U;
   82796:	2400      	movs	r4, #0
				time has not been reached yet.  This task should therefore
				block to wait for the next expire time or a command to be
				received - whichever comes first.  The following line cannot
				be reached unless xNextExpireTime > xTimeNow, except in the
				case when the current timer list is empty. */
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
   82798:	1be1      	subs	r1, r4, r7
   8279a:	b289      	uxth	r1, r1
   8279c:	6828      	ldr	r0, [r5, #0]
   8279e:	4b39      	ldr	r3, [pc, #228]	; (82884 <prvTimerTask+0x16c>)
   827a0:	4798      	blx	r3

				if( xTaskResumeAll() == pdFALSE )
   827a2:	4b34      	ldr	r3, [pc, #208]	; (82874 <prvTimerTask+0x15c>)
   827a4:	4798      	blx	r3
   827a6:	b920      	cbnz	r0, 827b2 <prvTimerTask+0x9a>
				{
					/* Yield to wait for either a command to arrive, or the block time
					to expire.  If a command arrived between the critical section being
					exited and this yield then the yield will not cause the task
					to block. */
					portYIELD_WITHIN_API();
   827a8:	4b37      	ldr	r3, [pc, #220]	; (82888 <prvTimerTask+0x170>)
   827aa:	4798      	blx	r3
   827ac:	e001      	b.n	827b2 <prvTimerTask+0x9a>
				}
			}
		}
		else
		{
			xTaskResumeAll();
   827ae:	4b31      	ldr	r3, [pc, #196]	; (82874 <prvTimerTask+0x15c>)
   827b0:	4798      	blx	r3
portBASE_TYPE xTimerListsWereSwitched, xResult;
portTickType xTimeNow;

	/* In this case the xTimerListsWereSwitched parameter is not used, but it
	must be present in the function call. */
	xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   827b2:	a802      	add	r0, sp, #8
   827b4:	4b2e      	ldr	r3, [pc, #184]	; (82870 <prvTimerTask+0x158>)
   827b6:	4798      	blx	r3
   827b8:	4607      	mov	r7, r0

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
   827ba:	4e34      	ldr	r6, [pc, #208]	; (8288c <prvTimerTask+0x174>)
				break;

			case tmrCOMMAND_CHANGE_PERIOD :
				pxTimer->xTimerPeriodInTicks = xMessage.xMessageValue;
				configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
				prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
   827bc:	f8df 90b8 	ldr.w	r9, [pc, #184]	; 82878 <prvTimerTask+0x160>
   827c0:	e03e      	b.n	82840 <prvTimerTask+0x128>
	must be present in the function call. */
	xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
	{
		pxTimer = xMessage.pxTimer;
   827c2:	9c05      	ldr	r4, [sp, #20]

		/* Is the timer already in a list of active timers?  When the command
		is trmCOMMAND_PROCESS_TIMER_OVERFLOW, the timer will be NULL as the
		command is to the task rather than to an individual timer. */
		if( pxTimer != NULL )
   827c4:	b11c      	cbz	r4, 827ce <prvTimerTask+0xb6>
		{
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
   827c6:	6963      	ldr	r3, [r4, #20]
   827c8:	b10b      	cbz	r3, 827ce <prvTimerTask+0xb6>
			{
				/* The timer is in a list, remove it. */
				uxListRemove( &( pxTimer->xTimerListItem ) );
   827ca:	1d20      	adds	r0, r4, #4
   827cc:	47c0      	blx	r8
			}
		}

		traceTIMER_COMMAND_RECEIVED( pxTimer, xMessage.xMessageID, xMessage.xMessageValue );

		switch( xMessage.xMessageID )
   827ce:	9b03      	ldr	r3, [sp, #12]
   827d0:	2b02      	cmp	r3, #2
   827d2:	d023      	beq.n	8281c <prvTimerTask+0x104>
   827d4:	2b03      	cmp	r3, #3
   827d6:	d030      	beq.n	8283a <prvTimerTask+0x122>
   827d8:	2b00      	cmp	r3, #0
   827da:	d131      	bne.n	82840 <prvTimerTask+0x128>
		{
			case tmrCOMMAND_START :
				/* Start or restart a timer. */
				if( prvInsertTimerInActiveList( pxTimer,  xMessage.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.xMessageValue ) == pdTRUE )
   827dc:	f8bd 3010 	ldrh.w	r3, [sp, #16]
   827e0:	8b21      	ldrh	r1, [r4, #24]
   827e2:	4419      	add	r1, r3
   827e4:	463a      	mov	r2, r7
   827e6:	b289      	uxth	r1, r1
   827e8:	4620      	mov	r0, r4
   827ea:	47c8      	blx	r9
   827ec:	2801      	cmp	r0, #1
   827ee:	d127      	bne.n	82840 <prvTimerTask+0x128>
				{
					/* The timer expired before it was added to the active timer
					list.  Process it now. */
					pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
   827f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
   827f2:	4620      	mov	r0, r4
   827f4:	4798      	blx	r3

					if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
   827f6:	69e3      	ldr	r3, [r4, #28]
   827f8:	2b01      	cmp	r3, #1
   827fa:	d121      	bne.n	82840 <prvTimerTask+0x128>
					{
						xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xMessage.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
   827fc:	f8bd 2010 	ldrh.w	r2, [sp, #16]
   82800:	8b23      	ldrh	r3, [r4, #24]
   82802:	441a      	add	r2, r3
   82804:	2100      	movs	r1, #0
   82806:	9100      	str	r1, [sp, #0]
   82808:	460b      	mov	r3, r1
   8280a:	b292      	uxth	r2, r2
   8280c:	4620      	mov	r0, r4
   8280e:	4c1b      	ldr	r4, [pc, #108]	; (8287c <prvTimerTask+0x164>)
   82810:	47a0      	blx	r4
						configASSERT( xResult );
   82812:	b9a8      	cbnz	r0, 82840 <prvTimerTask+0x128>
   82814:	4b1a      	ldr	r3, [pc, #104]	; (82880 <prvTimerTask+0x168>)
   82816:	4798      	blx	r3
   82818:	bf00      	nop
   8281a:	e7fd      	b.n	82818 <prvTimerTask+0x100>
				/* The timer has already been removed from the active list.
				There is nothing to do here. */
				break;

			case tmrCOMMAND_CHANGE_PERIOD :
				pxTimer->xTimerPeriodInTicks = xMessage.xMessageValue;
   8281c:	f8bd 3010 	ldrh.w	r3, [sp, #16]
   82820:	8323      	strh	r3, [r4, #24]
				configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
   82822:	b91b      	cbnz	r3, 8282c <prvTimerTask+0x114>
   82824:	4b16      	ldr	r3, [pc, #88]	; (82880 <prvTimerTask+0x168>)
   82826:	4798      	blx	r3
   82828:	bf00      	nop
   8282a:	e7fd      	b.n	82828 <prvTimerTask+0x110>
				prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
   8282c:	18f9      	adds	r1, r7, r3
   8282e:	463b      	mov	r3, r7
   82830:	463a      	mov	r2, r7
   82832:	b289      	uxth	r1, r1
   82834:	4620      	mov	r0, r4
   82836:	47c8      	blx	r9
   82838:	e002      	b.n	82840 <prvTimerTask+0x128>
				break;

			case tmrCOMMAND_DELETE :
				/* The timer has already been removed from the active list,
				just free up the memory. */
				vPortFree( pxTimer );
   8283a:	4620      	mov	r0, r4
   8283c:	4b14      	ldr	r3, [pc, #80]	; (82890 <prvTimerTask+0x178>)
   8283e:	4798      	blx	r3

	/* In this case the xTimerListsWereSwitched parameter is not used, but it
	must be present in the function call. */
	xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
   82840:	2300      	movs	r3, #0
   82842:	461a      	mov	r2, r3
   82844:	a903      	add	r1, sp, #12
   82846:	6828      	ldr	r0, [r5, #0]
   82848:	47b0      	blx	r6
   8284a:	2800      	cmp	r0, #0
   8284c:	d1b9      	bne.n	827c2 <prvTimerTask+0xaa>
   8284e:	e769      	b.n	82724 <prvTimerTask+0xc>
static void prvProcessTimerOrBlockTask( portTickType xNextExpireTime, portBASE_TYPE xListWasEmpty )
{
portTickType xTimeNow;
portBASE_TYPE xTimerListsWereSwitched;

	vTaskSuspendAll();
   82850:	4b06      	ldr	r3, [pc, #24]	; (8286c <prvTimerTask+0x154>)
   82852:	4798      	blx	r3
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampelTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   82854:	a803      	add	r0, sp, #12
   82856:	4b06      	ldr	r3, [pc, #24]	; (82870 <prvTimerTask+0x158>)
   82858:	4798      	blx	r3
   8285a:	4607      	mov	r7, r0
		if( xTimerListsWereSwitched == pdFALSE )
   8285c:	9b03      	ldr	r3, [sp, #12]
   8285e:	2b00      	cmp	r3, #0
   82860:	d099      	beq.n	82796 <prvTimerTask+0x7e>
   82862:	e7a4      	b.n	827ae <prvTimerTask+0x96>
   82864:	20078c38 	.word	0x20078c38
   82868:	20078c08 	.word	0x20078c08
   8286c:	00081dbd 	.word	0x00081dbd
   82870:	00082661 	.word	0x00082661
   82874:	00081f19 	.word	0x00081f19
   82878:	00082515 	.word	0x00082515
   8287c:	00082609 	.word	0x00082609
   82880:	00081341 	.word	0x00081341
   82884:	00081aa5 	.word	0x00081aa5
   82888:	00081331 	.word	0x00081331
   8288c:	00081941 	.word	0x00081941
   82890:	00081561 	.word	0x00081561
   82894:	000812b9 	.word	0x000812b9

00082898 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
   82898:	3801      	subs	r0, #1
   8289a:	2802      	cmp	r0, #2
   8289c:	d815      	bhi.n	828ca <_write+0x32>
int __attribute__((weak))
_write (int file, const char *ptr, int len);

int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
   8289e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   828a2:	460e      	mov	r6, r1
   828a4:	4614      	mov	r4, r2

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
   828a6:	b19a      	cbz	r2, 828d0 <_write+0x38>
   828a8:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
   828aa:	f8df 8038 	ldr.w	r8, [pc, #56]	; 828e4 <_write+0x4c>
   828ae:	4f0c      	ldr	r7, [pc, #48]	; (828e0 <_write+0x48>)
   828b0:	f8d8 0000 	ldr.w	r0, [r8]
   828b4:	f815 1b01 	ldrb.w	r1, [r5], #1
   828b8:	683b      	ldr	r3, [r7, #0]
   828ba:	4798      	blx	r3
   828bc:	2800      	cmp	r0, #0
   828be:	db0a      	blt.n	828d6 <_write+0x3e>
   828c0:	1ba8      	subs	r0, r5, r6

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
   828c2:	3c01      	subs	r4, #1
   828c4:	d1f4      	bne.n	828b0 <_write+0x18>
   828c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
   828ca:	f04f 30ff 	mov.w	r0, #4294967295
			return -1;
		}
		++nChars;
	}
	return nChars;
}
   828ce:	4770      	bx	lr

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
   828d0:	2000      	movs	r0, #0
   828d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
   828d6:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
   828da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   828de:	bf00      	nop
   828e0:	20078ca0 	.word	0x20078ca0
   828e4:	20078ca4 	.word	0x20078ca4

000828e8 <pwm_clocks_generate>:
 *
 * \retval Return the value to be set in the PWM Clock Register (PWM Mode Register for
 * SAM3N/SAM4N/SAM4C/SAM4CP/SAM4CM) or PWM_INVALID_ARGUMENT if the configuration cannot be met.
 */
static uint32_t pwm_clocks_generate(uint32_t ul_frequency, uint32_t ul_mck)
{
   828e8:	b4f0      	push	{r4, r5, r6, r7}
   828ea:	b08c      	sub	sp, #48	; 0x30
   828ec:	4607      	mov	r7, r0
   828ee:	460e      	mov	r6, r1
	uint32_t ul_divisors[PWM_CLOCK_PRE_MAX] =
   828f0:	ac01      	add	r4, sp, #4
   828f2:	4d11      	ldr	r5, [pc, #68]	; (82938 <pwm_clocks_generate+0x50>)
   828f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   828f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   828f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   828fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   828fc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   82900:	e884 0007 	stmia.w	r4, {r0, r1, r2}
   82904:	aa01      	add	r2, sp, #4
			{1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024 };
	uint32_t ul_pre = 0;
   82906:	2000      	movs	r0, #0
	uint32_t ul_div;

	/* Find prescaler and divisor values */
	do {
		ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
   82908:	f852 3b04 	ldr.w	r3, [r2], #4
   8290c:	fbb6 f3f3 	udiv	r3, r6, r3
   82910:	fbb3 f3f7 	udiv	r3, r3, r7
		if (ul_div <= PWM_CLOCK_DIV_MAX) {
   82914:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   82918:	d905      	bls.n	82926 <pwm_clocks_generate+0x3e>
			break;
		}
		ul_pre++;
   8291a:	3001      	adds	r0, #1
	} while (ul_pre < PWM_CLOCK_PRE_MAX);
   8291c:	280b      	cmp	r0, #11
   8291e:	d1f3      	bne.n	82908 <pwm_clocks_generate+0x20>

	/* Return result */
	if (ul_pre < PWM_CLOCK_PRE_MAX) {
		return ul_div | (ul_pre << 8);
	} else {
		return PWM_INVALID_ARGUMENT;
   82920:	f64f 70ff 	movw	r0, #65535	; 0xffff
   82924:	e005      	b.n	82932 <pwm_clocks_generate+0x4a>
		}
		ul_pre++;
	} while (ul_pre < PWM_CLOCK_PRE_MAX);

	/* Return result */
	if (ul_pre < PWM_CLOCK_PRE_MAX) {
   82926:	280a      	cmp	r0, #10
		return ul_div | (ul_pre << 8);
   82928:	bf94      	ite	ls
   8292a:	ea43 2000 	orrls.w	r0, r3, r0, lsl #8
	} else {
		return PWM_INVALID_ARGUMENT;
   8292e:	f64f 70ff 	movwhi	r0, #65535	; 0xffff
	}
}
   82932:	b00c      	add	sp, #48	; 0x30
   82934:	bcf0      	pop	{r4, r5, r6, r7}
   82936:	4770      	bx	lr
   82938:	000868dc 	.word	0x000868dc

0008293c <pwm_init>:
 * \param clock_config PWM clock configuration.
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_init(Pwm *p_pwm, pwm_clock_t *clock_config)
{
   8293c:	b570      	push	{r4, r5, r6, lr}
   8293e:	4606      	mov	r6, r0
   82940:	460c      	mov	r4, r1
	uint32_t clock = 0;
	uint32_t result;

	/* Clock A */
	if (clock_config->ul_clka != 0) {
   82942:	6808      	ldr	r0, [r1, #0]
   82944:	b140      	cbz	r0, 82958 <pwm_init+0x1c>
		result = pwm_clocks_generate(clock_config->ul_clka, clock_config->ul_mck);
   82946:	6889      	ldr	r1, [r1, #8]
   82948:	4b0e      	ldr	r3, [pc, #56]	; (82984 <pwm_init+0x48>)
   8294a:	4798      	blx	r3
   8294c:	4605      	mov	r5, r0
		if (result == PWM_INVALID_ARGUMENT) {
   8294e:	f64f 73ff 	movw	r3, #65535	; 0xffff
   82952:	4298      	cmp	r0, r3
   82954:	d101      	bne.n	8295a <pwm_init+0x1e>
   82956:	e00e      	b.n	82976 <pwm_init+0x3a>
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_init(Pwm *p_pwm, pwm_clock_t *clock_config)
{
	uint32_t clock = 0;
   82958:	2500      	movs	r5, #0

		clock = result;
	}

	/* Clock B */
	if (clock_config->ul_clkb != 0) {
   8295a:	6860      	ldr	r0, [r4, #4]
   8295c:	b140      	cbz	r0, 82970 <pwm_init+0x34>
		result = pwm_clocks_generate(clock_config->ul_clkb, clock_config->ul_mck);
   8295e:	68a1      	ldr	r1, [r4, #8]
   82960:	4b08      	ldr	r3, [pc, #32]	; (82984 <pwm_init+0x48>)
   82962:	4798      	blx	r3

		if (result == PWM_INVALID_ARGUMENT) {
   82964:	f64f 73ff 	movw	r3, #65535	; 0xffff
   82968:	4298      	cmp	r0, r3
   8296a:	d007      	beq.n	8297c <pwm_init+0x40>
			return result;
		}

		clock |= (result << 16);
   8296c:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
	}
#if (SAM3N || SAM4N || SAM4C || SAM4CP || SAM4CM)
	p_pwm->PWM_MR = clock;
#else
	p_pwm->PWM_CLK = clock;
   82970:	6035      	str	r5, [r6, #0]
#endif
	return 0;
   82972:	2000      	movs	r0, #0
   82974:	bd70      	pop	{r4, r5, r6, pc}

	/* Clock A */
	if (clock_config->ul_clka != 0) {
		result = pwm_clocks_generate(clock_config->ul_clka, clock_config->ul_mck);
		if (result == PWM_INVALID_ARGUMENT) {
			return result;
   82976:	f64f 70ff 	movw	r0, #65535	; 0xffff
   8297a:	bd70      	pop	{r4, r5, r6, pc}
	/* Clock B */
	if (clock_config->ul_clkb != 0) {
		result = pwm_clocks_generate(clock_config->ul_clkb, clock_config->ul_mck);

		if (result == PWM_INVALID_ARGUMENT) {
			return result;
   8297c:	f64f 70ff 	movw	r0, #65535	; 0xffff
	p_pwm->PWM_MR = clock;
#else
	p_pwm->PWM_CLK = clock;
#endif
	return 0;
}
   82980:	bd70      	pop	{r4, r5, r6, pc}
   82982:	bf00      	nop
   82984:	000828e9 	.word	0x000828e9

00082988 <pwm_channel_init>:
 * \param p_channel Configurations of the specified PWM channel.
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_channel_init(Pwm *p_pwm, pwm_channel_t *p_channel)
{
   82988:	b470      	push	{r4, r5, r6}
	uint32_t tmp_reg = 0;
	uint32_t ch_num = p_channel->channel;
   8298a:	680b      	ldr	r3, [r1, #0]

	/* Channel Mode/Clock Register */
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
   8298c:	684a      	ldr	r2, [r1, #4]
   8298e:	f002 020f 	and.w	r2, r2, #15
   82992:	8a8c      	ldrh	r4, [r1, #20]
   82994:	4322      	orrs	r2, r4
   82996:	890c      	ldrh	r4, [r1, #8]
   82998:	4322      	orrs	r2, r4
   8299a:	7a8c      	ldrb	r4, [r1, #10]
   8299c:	ea42 2244 	orr.w	r2, r2, r4, lsl #9
   829a0:	7d8c      	ldrb	r4, [r1, #22]
   829a2:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
   829a6:	7dcc      	ldrb	r4, [r1, #23]
   829a8:	ea42 4244 	orr.w	r2, r2, r4, lsl #17
   829ac:	7e0c      	ldrb	r4, [r1, #24]
   829ae:	ea42 4284 	orr.w	r2, r2, r4, lsl #18
   829b2:	eb00 1443 	add.w	r4, r0, r3, lsl #5
			(p_channel->b_deadtime_generator << 16) |
			(p_channel->b_pwmh_output_inverted << 17) |
			(p_channel->b_pwml_output_inverted << 18) |
#endif
			(p_channel->alignment);
	p_pwm->PWM_CH_NUM[ch_num].PWM_CMR = tmp_reg;
   829b6:	f8c4 2200 	str.w	r2, [r4, #512]	; 0x200

	/* Channel Duty Cycle Register */
	p_pwm->PWM_CH_NUM[ch_num].PWM_CDTY = p_channel->ul_duty;
   829ba:	68ca      	ldr	r2, [r1, #12]
   829bc:	f8c4 2204 	str.w	r2, [r4, #516]	; 0x204

	/* Channel Period Register */
	p_pwm->PWM_CH_NUM[ch_num].PWM_CPRD = p_channel->ul_period;
   829c0:	690a      	ldr	r2, [r1, #16]
   829c2:	f8c4 220c 	str.w	r2, [r4, #524]	; 0x20c
	
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E || SAMV70 || SAMV71 || SAME70 || SAMS70)
	/* Channel Dead Time Register */
	if (p_channel->b_deadtime_generator) {
   829c6:	7d8a      	ldrb	r2, [r1, #22]
   829c8:	b13a      	cbz	r2, 829da <pwm_channel_init+0x52>
		p_pwm->PWM_CH_NUM[ch_num].PWM_DT =
				PWM_DT_DTL(p_channel->
				us_deadtime_pwml) | PWM_DT_DTH(p_channel->
   829ca:	8b8c      	ldrh	r4, [r1, #28]
   829cc:	8b4a      	ldrh	r2, [r1, #26]
   829ce:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
	p_pwm->PWM_CH_NUM[ch_num].PWM_CPRD = p_channel->ul_period;
	
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E || SAMV70 || SAMV71 || SAME70 || SAMS70)
	/* Channel Dead Time Register */
	if (p_channel->b_deadtime_generator) {
		p_pwm->PWM_CH_NUM[ch_num].PWM_DT =
   829d2:	eb00 1443 	add.w	r4, r0, r3, lsl #5
   829d6:	f8c4 2218 	str.w	r2, [r4, #536]	; 0x218
				us_deadtime_pwml) | PWM_DT_DTH(p_channel->
				us_deadtime_pwmh);
	}

	/* Output Selection Register */
	tmp_reg  = p_pwm->PWM_OS & (~((PWM_OS_OSH0 | PWM_OS_OSL0) << ch_num));
   829da:	6c84      	ldr	r4, [r0, #72]	; 0x48
   829dc:	f04f 1201 	mov.w	r2, #65537	; 0x10001
   829e0:	409a      	lsls	r2, r3
   829e2:	43d2      	mvns	r2, r2
   829e4:	ea04 0502 	and.w	r5, r4, r2
	tmp_reg |= ((p_channel->output_selection.b_override_pwmh) << ch_num) |
   829e8:	7fcc      	ldrb	r4, [r1, #31]
   829ea:	fa04 f603 	lsl.w	r6, r4, r3
   829ee:	7f8c      	ldrb	r4, [r1, #30]
   829f0:	409c      	lsls	r4, r3
   829f2:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
   829f6:	432c      	orrs	r4, r5
			(((p_channel->output_selection.b_override_pwml) << ch_num)
					<< 16);
	p_pwm->PWM_OS = tmp_reg;
   829f8:	6484      	str	r4, [r0, #72]	; 0x48

	/* Output Override Value Register */
	tmp_reg  = p_pwm->PWM_OOV & (~((PWM_OOV_OOVH0 | PWM_OOV_OOVL0) << ch_num));
   829fa:	6c44      	ldr	r4, [r0, #68]	; 0x44
   829fc:	4022      	ands	r2, r4
	tmp_reg |= ((p_channel->output_selection.override_level_pwmh) << ch_num) |
   829fe:	f891 4021 	ldrb.w	r4, [r1, #33]	; 0x21
   82a02:	fa04 f503 	lsl.w	r5, r4, r3
   82a06:	f891 4020 	ldrb.w	r4, [r1, #32]
   82a0a:	409c      	lsls	r4, r3
   82a0c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
   82a10:	4322      	orrs	r2, r4
			(((p_channel->output_selection.override_level_pwml) << ch_num)
					<< 16);
	p_pwm->PWM_OOV = tmp_reg;
   82a12:	6442      	str	r2, [r0, #68]	; 0x44

	/* Sync Channels Mode Register */
	uint32_t channel = (1 << ch_num);
   82a14:	2201      	movs	r2, #1
   82a16:	409a      	lsls	r2, r3
	if (p_channel->b_sync_ch) {
   82a18:	f891 4022 	ldrb.w	r4, [r1, #34]	; 0x22
   82a1c:	b11c      	cbz	r4, 82a26 <pwm_channel_init+0x9e>
		p_pwm->PWM_SCM |= channel;
   82a1e:	6a04      	ldr	r4, [r0, #32]
   82a20:	4314      	orrs	r4, r2
   82a22:	6204      	str	r4, [r0, #32]
   82a24:	e003      	b.n	82a2e <pwm_channel_init+0xa6>
	} else {
		p_pwm->PWM_SCM &= ~((uint32_t) channel);
   82a26:	6a04      	ldr	r4, [r0, #32]
   82a28:	ea24 0402 	bic.w	r4, r4, r2
   82a2c:	6204      	str	r4, [r0, #32]
		} else {
			p_pwm->PWM_FPV1 &= (~((0x01 << ch_num) << 16));
		}
	}
#else
	if (p_channel->ul_fault_output_pwmh == PWM_HIGH) {
   82a2e:	f891 4024 	ldrb.w	r4, [r1, #36]	; 0x24
   82a32:	2c01      	cmp	r4, #1
		p_pwm->PWM_FPV |= (0x01 << ch_num);
   82a34:	6e84      	ldr	r4, [r0, #104]	; 0x68
   82a36:	bf0c      	ite	eq
   82a38:	4314      	orreq	r4, r2
	} else {
		p_pwm->PWM_FPV &= (~(0x01 << ch_num));
   82a3a:	4394      	bicne	r4, r2
   82a3c:	6684      	str	r4, [r0, #104]	; 0x68
	}
	if (p_channel->ul_fault_output_pwml == PWM_HIGH) {
   82a3e:	f891 4025 	ldrb.w	r4, [r1, #37]	; 0x25
   82a42:	2c01      	cmp	r4, #1
		p_pwm->PWM_FPV |= ((0x01 << ch_num) << 16);
   82a44:	6e84      	ldr	r4, [r0, #104]	; 0x68
   82a46:	bf0c      	ite	eq
   82a48:	ea44 4202 	orreq.w	r2, r4, r2, lsl #16
	} else {
		p_pwm->PWM_FPV &= (~((0x01 << ch_num) << 16));
   82a4c:	ea24 4202 	bicne.w	r2, r4, r2, lsl #16
   82a50:	6682      	str	r2, [r0, #104]	; 0x68
	}
#endif
	/* Fault Protection Enable Register */
	uint32_t fault_enable_reg = 0;
#if (SAM3XA)
	if (ch_num < 4) {
   82a52:	2b03      	cmp	r3, #3
   82a54:	d80c      	bhi.n	82a70 <pwm_channel_init+0xe8>
		ch_num *= 8;
   82a56:	00db      	lsls	r3, r3, #3
		fault_enable_reg = p_pwm->PWM_FPE1;
   82a58:	6ec4      	ldr	r4, [r0, #108]	; 0x6c
		fault_enable_reg &= ~(0xFF << ch_num);
   82a5a:	22ff      	movs	r2, #255	; 0xff
   82a5c:	409a      	lsls	r2, r3
   82a5e:	ea24 0202 	bic.w	r2, r4, r2
		fault_enable_reg |= ((p_channel->fault_id) << ch_num);
   82a62:	f891 1023 	ldrb.w	r1, [r1, #35]	; 0x23
   82a66:	fa01 f303 	lsl.w	r3, r1, r3
   82a6a:	4313      	orrs	r3, r2
		p_pwm->PWM_FPE1 = fault_enable_reg;
   82a6c:	66c3      	str	r3, [r0, #108]	; 0x6c
   82a6e:	e00c      	b.n	82a8a <pwm_channel_init+0x102>
	} else {
		ch_num -= 4;
   82a70:	3b04      	subs	r3, #4
		ch_num *= 8;
   82a72:	00db      	lsls	r3, r3, #3
		fault_enable_reg = p_pwm->PWM_FPE2;
   82a74:	6f04      	ldr	r4, [r0, #112]	; 0x70
		fault_enable_reg &= ~(0xFF << ch_num);
   82a76:	22ff      	movs	r2, #255	; 0xff
   82a78:	409a      	lsls	r2, r3
   82a7a:	ea24 0202 	bic.w	r2, r4, r2
		fault_enable_reg |= ((p_channel->fault_id) << ch_num);
   82a7e:	f891 1023 	ldrb.w	r1, [r1, #35]	; 0x23
   82a82:	fa01 f303 	lsl.w	r3, r1, r3
   82a86:	4313      	orrs	r3, r2
		p_pwm->PWM_FPE2 = fault_enable_reg;
   82a88:	6703      	str	r3, [r0, #112]	; 0x70
	p_pwm->PWM_CH_NUM[ch_num].PWM_CMR &= (~PWM_CMR_PPM);
	p_pwm->PWM_CH_NUM[ch_num].PWM_CMR |= (p_channel->ul_ppm_mode & PWM_CMR_PPM);
#endif

	return 0;
}
   82a8a:	2000      	movs	r0, #0
   82a8c:	bc70      	pop	{r4, r5, r6}
   82a8e:	4770      	bx	lr

00082a90 <pwm_channel_update_duty>:
		uint32_t ul_duty)
{
	uint32_t ch_num = p_channel->channel;

		/** Check parameter */
	if (p_channel->ul_period < ul_duty) {
   82a90:	690b      	ldr	r3, [r1, #16]
   82a92:	4293      	cmp	r3, r2
   82a94:	d307      	bcc.n	82aa6 <pwm_channel_update_duty+0x16>
 * \retval 0 if changing succeeds, otherwise fails.
 */
uint32_t pwm_channel_update_duty(Pwm *p_pwm, pwm_channel_t *p_channel,
		uint32_t ul_duty)
{
	uint32_t ch_num = p_channel->channel;
   82a96:	680b      	ldr	r3, [r1, #0]
		/** Check parameter */
	if (p_channel->ul_period < ul_duty) {
		return PWM_INVALID_ARGUMENT;
	} else {
		/* Save new duty cycle value */
		p_channel->ul_duty = ul_duty;
   82a98:	60ca      	str	r2, [r1, #12]
		mode &= ~PWM_CMR_CPD;
		p_pwm->PWM_CH_NUM[ch_num].PWM_CMR = mode;

		p_pwm->PWM_CH_NUM[ch_num].PWM_CUPD = ul_duty;
#else
		p_pwm->PWM_CH_NUM[ch_num].PWM_CDTYUPD = ul_duty;
   82a9a:	eb00 1043 	add.w	r0, r0, r3, lsl #5
   82a9e:	f8c0 2208 	str.w	r2, [r0, #520]	; 0x208
#endif
	}

	return 0;
   82aa2:	2000      	movs	r0, #0
   82aa4:	4770      	bx	lr
{
	uint32_t ch_num = p_channel->channel;

		/** Check parameter */
	if (p_channel->ul_period < ul_duty) {
		return PWM_INVALID_ARGUMENT;
   82aa6:	f64f 70ff 	movw	r0, #65535	; 0xffff
		p_pwm->PWM_CH_NUM[ch_num].PWM_CDTYUPD = ul_duty;
#endif
	}

	return 0;
}
   82aaa:	4770      	bx	lr

00082aac <pwm_channel_enable>:
 * \param p_pwm Pointer to a PWM instance.
 * \param ul_channel PWM channel number to enable.
 */
void pwm_channel_enable(Pwm *p_pwm, uint32_t ul_channel)
{
	p_pwm->PWM_ENA = (1 << ul_channel);
   82aac:	2301      	movs	r3, #1
   82aae:	fa03 f101 	lsl.w	r1, r3, r1
   82ab2:	6041      	str	r1, [r0, #4]
   82ab4:	4770      	bx	lr
   82ab6:	bf00      	nop

00082ab8 <pwm_channel_disable>:
 * \param p_pwm Pointer to a PWM instance.
 * \param ul_channel PWM channel number to disable.
 */
void pwm_channel_disable(Pwm *p_pwm, uint32_t ul_channel)
{
	p_pwm->PWM_DIS = (1 << ul_channel);
   82ab8:	2301      	movs	r3, #1
   82aba:	fa03 f101 	lsl.w	r1, r3, r1
   82abe:	6081      	str	r1, [r0, #8]
   82ac0:	4770      	bx	lr
   82ac2:	bf00      	nop

00082ac4 <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
   82ac4:	b410      	push	{r4}
	uint32_t cd = 0;

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
   82ac6:	23ac      	movs	r3, #172	; 0xac
   82ac8:	6003      	str	r3, [r0, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
   82aca:	680b      	ldr	r3, [r1, #0]
   82acc:	684a      	ldr	r2, [r1, #4]
   82ace:	fbb3 f3f2 	udiv	r3, r3, r2
   82ad2:	091b      	lsrs	r3, r3, #4
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
   82ad4:	1e5c      	subs	r4, r3, #1
   82ad6:	f64f 72fe 	movw	r2, #65534	; 0xfffe
   82ada:	4294      	cmp	r4, r2
   82adc:	d80a      	bhi.n	82af4 <uart_init+0x30>
		return 1;

	p_uart->UART_BRGR = cd;
   82ade:	6203      	str	r3, [r0, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
   82ae0:	688b      	ldr	r3, [r1, #8]
   82ae2:	6043      	str	r3, [r0, #4]

#if (!SAMV71 && !SAMV70 && !SAME70 && !SAMS70)
	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
   82ae4:	f240 2302 	movw	r3, #514	; 0x202
   82ae8:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
#endif

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
   82aec:	2350      	movs	r3, #80	; 0x50
   82aee:	6003      	str	r3, [r0, #0]

	return 0;
   82af0:	2000      	movs	r0, #0
   82af2:	e000      	b.n	82af6 <uart_init+0x32>

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
		return 1;
   82af4:	2001      	movs	r0, #1

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;

	return 0;
}
   82af6:	bc10      	pop	{r4}
   82af8:	4770      	bx	lr
   82afa:	bf00      	nop

00082afc <uart_is_rx_ready>:
 * \retval 1 One data has been received.
 * \retval 0 No data has been received.
 */
uint32_t uart_is_rx_ready(Uart *p_uart)
{
	return (p_uart->UART_SR & UART_SR_RXRDY) > 0;
   82afc:	6940      	ldr	r0, [r0, #20]
}
   82afe:	f000 0001 	and.w	r0, r0, #1
   82b02:	4770      	bx	lr

00082b04 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
   82b04:	6943      	ldr	r3, [r0, #20]
   82b06:	f013 0f02 	tst.w	r3, #2
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
   82b0a:	bf1a      	itte	ne
   82b0c:	61c1      	strne	r1, [r0, #28]
	return 0;
   82b0e:	2000      	movne	r0, #0
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
		return 1;
   82b10:	2001      	moveq	r0, #1

	/* Send character */
	p_uart->UART_THR = uc_data;
	return 0;
}
   82b12:	4770      	bx	lr

00082b14 <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
   82b14:	6943      	ldr	r3, [r0, #20]
   82b16:	f013 0f01 	tst.w	r3, #1
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
   82b1a:	bf1d      	ittte	ne
   82b1c:	6983      	ldrne	r3, [r0, #24]
   82b1e:	700b      	strbne	r3, [r1, #0]
	return 0;
   82b20:	2000      	movne	r0, #0
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
		return 1;
   82b22:	2001      	moveq	r0, #1

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
	return 0;
}
   82b24:	4770      	bx	lr
   82b26:	bf00      	nop

00082b28 <main>:
#include "UARTFunctions.h"
#include "UARTTask.h"
#include "PIDTask.h"

int main (void)
{
   82b28:	b500      	push	{lr}
   82b2a:	b085      	sub	sp, #20
	// Board init
	sysclk_init();
   82b2c:	4b24      	ldr	r3, [pc, #144]	; (82bc0 <main+0x98>)
   82b2e:	4798      	blx	r3
	board_init();
   82b30:	4b24      	ldr	r3, [pc, #144]	; (82bc4 <main+0x9c>)
   82b32:	4798      	blx	r3
   82b34:	200b      	movs	r0, #11
   82b36:	4c24      	ldr	r4, [pc, #144]	; (82bc8 <main+0xa0>)
   82b38:	47a0      	blx	r4
   82b3a:	200c      	movs	r0, #12
   82b3c:	47a0      	blx	r4
   82b3e:	200d      	movs	r0, #13
   82b40:	47a0      	blx	r4
   82b42:	200e      	movs	r0, #14
   82b44:	47a0      	blx	r4
	ioport_init();

	delay_init();
	configure_console(); // Initialize UART
   82b46:	4b21      	ldr	r3, [pc, #132]	; (82bcc <main+0xa4>)
   82b48:	4798      	blx	r3

	PWMSetup();
   82b4a:	4b21      	ldr	r3, [pc, #132]	; (82bd0 <main+0xa8>)
   82b4c:	4798      	blx	r3
	shieldInit();
   82b4e:	4b21      	ldr	r3, [pc, #132]	; (82bd4 <main+0xac>)
   82b50:	4798      	blx	r3
	ADCSetup();
   82b52:	4b21      	ldr	r3, [pc, #132]	; (82bd8 <main+0xb0>)
   82b54:	4798      	blx	r3
	//testFans(); // Loops fan speed
	//testFilter(); // Loops FIR-filtered sensor values
	//testADC(); // Loops sensor values
	
	//initialize binary semaphore
	vSemaphoreCreateBinary(sem);
   82b56:	2203      	movs	r2, #3
   82b58:	2100      	movs	r1, #0
   82b5a:	2001      	movs	r0, #1
   82b5c:	4b1f      	ldr	r3, [pc, #124]	; (82bdc <main+0xb4>)
   82b5e:	4798      	blx	r3
   82b60:	4b1f      	ldr	r3, [pc, #124]	; (82be0 <main+0xb8>)
   82b62:	6018      	str	r0, [r3, #0]
   82b64:	b120      	cbz	r0, 82b70 <main+0x48>
   82b66:	2300      	movs	r3, #0
   82b68:	461a      	mov	r2, r3
   82b6a:	4619      	mov	r1, r3
   82b6c:	4c1d      	ldr	r4, [pc, #116]	; (82be4 <main+0xbc>)
   82b6e:	47a0      	blx	r4
		// The semaphore can now be used.
	}
	
	/* Creating the PID regulation task */
	//	printf("Created PIDRegulationTask\n\r");
	if (xTaskCreate(PIDRegulationTask, (const signed char * const) "PIDRegulation",
   82b70:	2300      	movs	r3, #0
   82b72:	9303      	str	r3, [sp, #12]
   82b74:	9302      	str	r3, [sp, #8]
   82b76:	9301      	str	r3, [sp, #4]
   82b78:	2202      	movs	r2, #2
   82b7a:	9200      	str	r2, [sp, #0]
   82b7c:	f44f 7200 	mov.w	r2, #512	; 0x200
   82b80:	4919      	ldr	r1, [pc, #100]	; (82be8 <main+0xc0>)
   82b82:	481a      	ldr	r0, [pc, #104]	; (82bec <main+0xc4>)
   82b84:	4c1a      	ldr	r4, [pc, #104]	; (82bf0 <main+0xc8>)
   82b86:	47a0      	blx	r4
   82b88:	2801      	cmp	r0, #1
   82b8a:	d002      	beq.n	82b92 <main+0x6a>
	TASK_PIDRegulation_STACK_SIZE, NULL, TASK_PIDRegulation_STACK_PRIORITY, NULL) != pdPASS)
	{
		printf("Failed to create PIDRegulationTask\r\n");
   82b8c:	4819      	ldr	r0, [pc, #100]	; (82bf4 <main+0xcc>)
   82b8e:	4b1a      	ldr	r3, [pc, #104]	; (82bf8 <main+0xd0>)
   82b90:	4798      	blx	r3
	}
	
	/* Creating the serial communication task */
	//	printf("Created SerialComTask\n\r");
	if (xTaskCreate(SerialComTask, (const signed char * const) "SerialComTask",
   82b92:	2300      	movs	r3, #0
   82b94:	9303      	str	r3, [sp, #12]
   82b96:	9302      	str	r3, [sp, #8]
   82b98:	9301      	str	r3, [sp, #4]
   82b9a:	2201      	movs	r2, #1
   82b9c:	9200      	str	r2, [sp, #0]
   82b9e:	f44f 7200 	mov.w	r2, #512	; 0x200
   82ba2:	4916      	ldr	r1, [pc, #88]	; (82bfc <main+0xd4>)
   82ba4:	4816      	ldr	r0, [pc, #88]	; (82c00 <main+0xd8>)
   82ba6:	4c12      	ldr	r4, [pc, #72]	; (82bf0 <main+0xc8>)
   82ba8:	47a0      	blx	r4
   82baa:	2801      	cmp	r0, #1
   82bac:	d002      	beq.n	82bb4 <main+0x8c>
	TASK_SerialComTask_STACK_SIZE, NULL, TASK_SerialComTask_STACK_PRIORITY, NULL) != pdPASS)
	{
		printf("Failed to create SerialComTask\r\n");
   82bae:	4815      	ldr	r0, [pc, #84]	; (82c04 <main+0xdc>)
   82bb0:	4b11      	ldr	r3, [pc, #68]	; (82bf8 <main+0xd0>)
   82bb2:	4798      	blx	r3
	}
	
	///* Start the FreeRTOS scheduler running all tasks indefinitely*/
	vTaskStartScheduler();
   82bb4:	4b14      	ldr	r3, [pc, #80]	; (82c08 <main+0xe0>)
   82bb6:	4798      	blx	r3
	printf("Insufficient RAM\r\n");
   82bb8:	4814      	ldr	r0, [pc, #80]	; (82c0c <main+0xe4>)
   82bba:	4b0f      	ldr	r3, [pc, #60]	; (82bf8 <main+0xd0>)
   82bbc:	4798      	blx	r3
   82bbe:	e7fe      	b.n	82bbe <main+0x96>
   82bc0:	00080291 	.word	0x00080291
   82bc4:	00080331 	.word	0x00080331
   82bc8:	00080801 	.word	0x00080801
   82bcc:	00080f31 	.word	0x00080f31
   82bd0:	00080d39 	.word	0x00080d39
   82bd4:	00080dc9 	.word	0x00080dc9
   82bd8:	00080151 	.word	0x00080151
   82bdc:	00081731 	.word	0x00081731
   82be0:	20070a70 	.word	0x20070a70
   82be4:	00081789 	.word	0x00081789
   82be8:	00086908 	.word	0x00086908
   82bec:	00080cb9 	.word	0x00080cb9
   82bf0:	00081b4d 	.word	0x00081b4d
   82bf4:	00086918 	.word	0x00086918
   82bf8:	000838fd 	.word	0x000838fd
   82bfc:	00086940 	.word	0x00086940
   82c00:	000811d5 	.word	0x000811d5
   82c04:	00086950 	.word	0x00086950
   82c08:	00081d51 	.word	0x00081d51
   82c0c:	00086974 	.word	0x00086974

00082c10 <__aeabi_drsub>:
   82c10:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   82c14:	e002      	b.n	82c1c <__adddf3>
   82c16:	bf00      	nop

00082c18 <__aeabi_dsub>:
   82c18:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00082c1c <__adddf3>:
   82c1c:	b530      	push	{r4, r5, lr}
   82c1e:	ea4f 0441 	mov.w	r4, r1, lsl #1
   82c22:	ea4f 0543 	mov.w	r5, r3, lsl #1
   82c26:	ea94 0f05 	teq	r4, r5
   82c2a:	bf08      	it	eq
   82c2c:	ea90 0f02 	teqeq	r0, r2
   82c30:	bf1f      	itttt	ne
   82c32:	ea54 0c00 	orrsne.w	ip, r4, r0
   82c36:	ea55 0c02 	orrsne.w	ip, r5, r2
   82c3a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   82c3e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   82c42:	f000 80e2 	beq.w	82e0a <__adddf3+0x1ee>
   82c46:	ea4f 5454 	mov.w	r4, r4, lsr #21
   82c4a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   82c4e:	bfb8      	it	lt
   82c50:	426d      	neglt	r5, r5
   82c52:	dd0c      	ble.n	82c6e <__adddf3+0x52>
   82c54:	442c      	add	r4, r5
   82c56:	ea80 0202 	eor.w	r2, r0, r2
   82c5a:	ea81 0303 	eor.w	r3, r1, r3
   82c5e:	ea82 0000 	eor.w	r0, r2, r0
   82c62:	ea83 0101 	eor.w	r1, r3, r1
   82c66:	ea80 0202 	eor.w	r2, r0, r2
   82c6a:	ea81 0303 	eor.w	r3, r1, r3
   82c6e:	2d36      	cmp	r5, #54	; 0x36
   82c70:	bf88      	it	hi
   82c72:	bd30      	pophi	{r4, r5, pc}
   82c74:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   82c78:	ea4f 3101 	mov.w	r1, r1, lsl #12
   82c7c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   82c80:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   82c84:	d002      	beq.n	82c8c <__adddf3+0x70>
   82c86:	4240      	negs	r0, r0
   82c88:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   82c8c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   82c90:	ea4f 3303 	mov.w	r3, r3, lsl #12
   82c94:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   82c98:	d002      	beq.n	82ca0 <__adddf3+0x84>
   82c9a:	4252      	negs	r2, r2
   82c9c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   82ca0:	ea94 0f05 	teq	r4, r5
   82ca4:	f000 80a7 	beq.w	82df6 <__adddf3+0x1da>
   82ca8:	f1a4 0401 	sub.w	r4, r4, #1
   82cac:	f1d5 0e20 	rsbs	lr, r5, #32
   82cb0:	db0d      	blt.n	82cce <__adddf3+0xb2>
   82cb2:	fa02 fc0e 	lsl.w	ip, r2, lr
   82cb6:	fa22 f205 	lsr.w	r2, r2, r5
   82cba:	1880      	adds	r0, r0, r2
   82cbc:	f141 0100 	adc.w	r1, r1, #0
   82cc0:	fa03 f20e 	lsl.w	r2, r3, lr
   82cc4:	1880      	adds	r0, r0, r2
   82cc6:	fa43 f305 	asr.w	r3, r3, r5
   82cca:	4159      	adcs	r1, r3
   82ccc:	e00e      	b.n	82cec <__adddf3+0xd0>
   82cce:	f1a5 0520 	sub.w	r5, r5, #32
   82cd2:	f10e 0e20 	add.w	lr, lr, #32
   82cd6:	2a01      	cmp	r2, #1
   82cd8:	fa03 fc0e 	lsl.w	ip, r3, lr
   82cdc:	bf28      	it	cs
   82cde:	f04c 0c02 	orrcs.w	ip, ip, #2
   82ce2:	fa43 f305 	asr.w	r3, r3, r5
   82ce6:	18c0      	adds	r0, r0, r3
   82ce8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   82cec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   82cf0:	d507      	bpl.n	82d02 <__adddf3+0xe6>
   82cf2:	f04f 0e00 	mov.w	lr, #0
   82cf6:	f1dc 0c00 	rsbs	ip, ip, #0
   82cfa:	eb7e 0000 	sbcs.w	r0, lr, r0
   82cfe:	eb6e 0101 	sbc.w	r1, lr, r1
   82d02:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   82d06:	d31b      	bcc.n	82d40 <__adddf3+0x124>
   82d08:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   82d0c:	d30c      	bcc.n	82d28 <__adddf3+0x10c>
   82d0e:	0849      	lsrs	r1, r1, #1
   82d10:	ea5f 0030 	movs.w	r0, r0, rrx
   82d14:	ea4f 0c3c 	mov.w	ip, ip, rrx
   82d18:	f104 0401 	add.w	r4, r4, #1
   82d1c:	ea4f 5244 	mov.w	r2, r4, lsl #21
   82d20:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   82d24:	f080 809a 	bcs.w	82e5c <__adddf3+0x240>
   82d28:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   82d2c:	bf08      	it	eq
   82d2e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   82d32:	f150 0000 	adcs.w	r0, r0, #0
   82d36:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   82d3a:	ea41 0105 	orr.w	r1, r1, r5
   82d3e:	bd30      	pop	{r4, r5, pc}
   82d40:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   82d44:	4140      	adcs	r0, r0
   82d46:	eb41 0101 	adc.w	r1, r1, r1
   82d4a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   82d4e:	f1a4 0401 	sub.w	r4, r4, #1
   82d52:	d1e9      	bne.n	82d28 <__adddf3+0x10c>
   82d54:	f091 0f00 	teq	r1, #0
   82d58:	bf04      	itt	eq
   82d5a:	4601      	moveq	r1, r0
   82d5c:	2000      	moveq	r0, #0
   82d5e:	fab1 f381 	clz	r3, r1
   82d62:	bf08      	it	eq
   82d64:	3320      	addeq	r3, #32
   82d66:	f1a3 030b 	sub.w	r3, r3, #11
   82d6a:	f1b3 0220 	subs.w	r2, r3, #32
   82d6e:	da0c      	bge.n	82d8a <__adddf3+0x16e>
   82d70:	320c      	adds	r2, #12
   82d72:	dd08      	ble.n	82d86 <__adddf3+0x16a>
   82d74:	f102 0c14 	add.w	ip, r2, #20
   82d78:	f1c2 020c 	rsb	r2, r2, #12
   82d7c:	fa01 f00c 	lsl.w	r0, r1, ip
   82d80:	fa21 f102 	lsr.w	r1, r1, r2
   82d84:	e00c      	b.n	82da0 <__adddf3+0x184>
   82d86:	f102 0214 	add.w	r2, r2, #20
   82d8a:	bfd8      	it	le
   82d8c:	f1c2 0c20 	rsble	ip, r2, #32
   82d90:	fa01 f102 	lsl.w	r1, r1, r2
   82d94:	fa20 fc0c 	lsr.w	ip, r0, ip
   82d98:	bfdc      	itt	le
   82d9a:	ea41 010c 	orrle.w	r1, r1, ip
   82d9e:	4090      	lslle	r0, r2
   82da0:	1ae4      	subs	r4, r4, r3
   82da2:	bfa2      	ittt	ge
   82da4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   82da8:	4329      	orrge	r1, r5
   82daa:	bd30      	popge	{r4, r5, pc}
   82dac:	ea6f 0404 	mvn.w	r4, r4
   82db0:	3c1f      	subs	r4, #31
   82db2:	da1c      	bge.n	82dee <__adddf3+0x1d2>
   82db4:	340c      	adds	r4, #12
   82db6:	dc0e      	bgt.n	82dd6 <__adddf3+0x1ba>
   82db8:	f104 0414 	add.w	r4, r4, #20
   82dbc:	f1c4 0220 	rsb	r2, r4, #32
   82dc0:	fa20 f004 	lsr.w	r0, r0, r4
   82dc4:	fa01 f302 	lsl.w	r3, r1, r2
   82dc8:	ea40 0003 	orr.w	r0, r0, r3
   82dcc:	fa21 f304 	lsr.w	r3, r1, r4
   82dd0:	ea45 0103 	orr.w	r1, r5, r3
   82dd4:	bd30      	pop	{r4, r5, pc}
   82dd6:	f1c4 040c 	rsb	r4, r4, #12
   82dda:	f1c4 0220 	rsb	r2, r4, #32
   82dde:	fa20 f002 	lsr.w	r0, r0, r2
   82de2:	fa01 f304 	lsl.w	r3, r1, r4
   82de6:	ea40 0003 	orr.w	r0, r0, r3
   82dea:	4629      	mov	r1, r5
   82dec:	bd30      	pop	{r4, r5, pc}
   82dee:	fa21 f004 	lsr.w	r0, r1, r4
   82df2:	4629      	mov	r1, r5
   82df4:	bd30      	pop	{r4, r5, pc}
   82df6:	f094 0f00 	teq	r4, #0
   82dfa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   82dfe:	bf06      	itte	eq
   82e00:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   82e04:	3401      	addeq	r4, #1
   82e06:	3d01      	subne	r5, #1
   82e08:	e74e      	b.n	82ca8 <__adddf3+0x8c>
   82e0a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   82e0e:	bf18      	it	ne
   82e10:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   82e14:	d029      	beq.n	82e6a <__adddf3+0x24e>
   82e16:	ea94 0f05 	teq	r4, r5
   82e1a:	bf08      	it	eq
   82e1c:	ea90 0f02 	teqeq	r0, r2
   82e20:	d005      	beq.n	82e2e <__adddf3+0x212>
   82e22:	ea54 0c00 	orrs.w	ip, r4, r0
   82e26:	bf04      	itt	eq
   82e28:	4619      	moveq	r1, r3
   82e2a:	4610      	moveq	r0, r2
   82e2c:	bd30      	pop	{r4, r5, pc}
   82e2e:	ea91 0f03 	teq	r1, r3
   82e32:	bf1e      	ittt	ne
   82e34:	2100      	movne	r1, #0
   82e36:	2000      	movne	r0, #0
   82e38:	bd30      	popne	{r4, r5, pc}
   82e3a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   82e3e:	d105      	bne.n	82e4c <__adddf3+0x230>
   82e40:	0040      	lsls	r0, r0, #1
   82e42:	4149      	adcs	r1, r1
   82e44:	bf28      	it	cs
   82e46:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   82e4a:	bd30      	pop	{r4, r5, pc}
   82e4c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   82e50:	bf3c      	itt	cc
   82e52:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   82e56:	bd30      	popcc	{r4, r5, pc}
   82e58:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   82e5c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   82e60:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   82e64:	f04f 0000 	mov.w	r0, #0
   82e68:	bd30      	pop	{r4, r5, pc}
   82e6a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   82e6e:	bf1a      	itte	ne
   82e70:	4619      	movne	r1, r3
   82e72:	4610      	movne	r0, r2
   82e74:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   82e78:	bf1c      	itt	ne
   82e7a:	460b      	movne	r3, r1
   82e7c:	4602      	movne	r2, r0
   82e7e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   82e82:	bf06      	itte	eq
   82e84:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   82e88:	ea91 0f03 	teqeq	r1, r3
   82e8c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   82e90:	bd30      	pop	{r4, r5, pc}
   82e92:	bf00      	nop

00082e94 <__aeabi_ui2d>:
   82e94:	f090 0f00 	teq	r0, #0
   82e98:	bf04      	itt	eq
   82e9a:	2100      	moveq	r1, #0
   82e9c:	4770      	bxeq	lr
   82e9e:	b530      	push	{r4, r5, lr}
   82ea0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   82ea4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   82ea8:	f04f 0500 	mov.w	r5, #0
   82eac:	f04f 0100 	mov.w	r1, #0
   82eb0:	e750      	b.n	82d54 <__adddf3+0x138>
   82eb2:	bf00      	nop

00082eb4 <__aeabi_i2d>:
   82eb4:	f090 0f00 	teq	r0, #0
   82eb8:	bf04      	itt	eq
   82eba:	2100      	moveq	r1, #0
   82ebc:	4770      	bxeq	lr
   82ebe:	b530      	push	{r4, r5, lr}
   82ec0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   82ec4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   82ec8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   82ecc:	bf48      	it	mi
   82ece:	4240      	negmi	r0, r0
   82ed0:	f04f 0100 	mov.w	r1, #0
   82ed4:	e73e      	b.n	82d54 <__adddf3+0x138>
   82ed6:	bf00      	nop

00082ed8 <__aeabi_f2d>:
   82ed8:	0042      	lsls	r2, r0, #1
   82eda:	ea4f 01e2 	mov.w	r1, r2, asr #3
   82ede:	ea4f 0131 	mov.w	r1, r1, rrx
   82ee2:	ea4f 7002 	mov.w	r0, r2, lsl #28
   82ee6:	bf1f      	itttt	ne
   82ee8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   82eec:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   82ef0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   82ef4:	4770      	bxne	lr
   82ef6:	f092 0f00 	teq	r2, #0
   82efa:	bf14      	ite	ne
   82efc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   82f00:	4770      	bxeq	lr
   82f02:	b530      	push	{r4, r5, lr}
   82f04:	f44f 7460 	mov.w	r4, #896	; 0x380
   82f08:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   82f0c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   82f10:	e720      	b.n	82d54 <__adddf3+0x138>
   82f12:	bf00      	nop

00082f14 <__aeabi_ul2d>:
   82f14:	ea50 0201 	orrs.w	r2, r0, r1
   82f18:	bf08      	it	eq
   82f1a:	4770      	bxeq	lr
   82f1c:	b530      	push	{r4, r5, lr}
   82f1e:	f04f 0500 	mov.w	r5, #0
   82f22:	e00a      	b.n	82f3a <__aeabi_l2d+0x16>

00082f24 <__aeabi_l2d>:
   82f24:	ea50 0201 	orrs.w	r2, r0, r1
   82f28:	bf08      	it	eq
   82f2a:	4770      	bxeq	lr
   82f2c:	b530      	push	{r4, r5, lr}
   82f2e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   82f32:	d502      	bpl.n	82f3a <__aeabi_l2d+0x16>
   82f34:	4240      	negs	r0, r0
   82f36:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   82f3a:	f44f 6480 	mov.w	r4, #1024	; 0x400
   82f3e:	f104 0432 	add.w	r4, r4, #50	; 0x32
   82f42:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   82f46:	f43f aedc 	beq.w	82d02 <__adddf3+0xe6>
   82f4a:	f04f 0203 	mov.w	r2, #3
   82f4e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   82f52:	bf18      	it	ne
   82f54:	3203      	addne	r2, #3
   82f56:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   82f5a:	bf18      	it	ne
   82f5c:	3203      	addne	r2, #3
   82f5e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   82f62:	f1c2 0320 	rsb	r3, r2, #32
   82f66:	fa00 fc03 	lsl.w	ip, r0, r3
   82f6a:	fa20 f002 	lsr.w	r0, r0, r2
   82f6e:	fa01 fe03 	lsl.w	lr, r1, r3
   82f72:	ea40 000e 	orr.w	r0, r0, lr
   82f76:	fa21 f102 	lsr.w	r1, r1, r2
   82f7a:	4414      	add	r4, r2
   82f7c:	e6c1      	b.n	82d02 <__adddf3+0xe6>
   82f7e:	bf00      	nop

00082f80 <__aeabi_dmul>:
   82f80:	b570      	push	{r4, r5, r6, lr}
   82f82:	f04f 0cff 	mov.w	ip, #255	; 0xff
   82f86:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   82f8a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   82f8e:	bf1d      	ittte	ne
   82f90:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   82f94:	ea94 0f0c 	teqne	r4, ip
   82f98:	ea95 0f0c 	teqne	r5, ip
   82f9c:	f000 f8de 	bleq	8315c <__aeabi_dmul+0x1dc>
   82fa0:	442c      	add	r4, r5
   82fa2:	ea81 0603 	eor.w	r6, r1, r3
   82fa6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   82faa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   82fae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   82fb2:	bf18      	it	ne
   82fb4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   82fb8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   82fbc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   82fc0:	d038      	beq.n	83034 <__aeabi_dmul+0xb4>
   82fc2:	fba0 ce02 	umull	ip, lr, r0, r2
   82fc6:	f04f 0500 	mov.w	r5, #0
   82fca:	fbe1 e502 	umlal	lr, r5, r1, r2
   82fce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   82fd2:	fbe0 e503 	umlal	lr, r5, r0, r3
   82fd6:	f04f 0600 	mov.w	r6, #0
   82fda:	fbe1 5603 	umlal	r5, r6, r1, r3
   82fde:	f09c 0f00 	teq	ip, #0
   82fe2:	bf18      	it	ne
   82fe4:	f04e 0e01 	orrne.w	lr, lr, #1
   82fe8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   82fec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   82ff0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   82ff4:	d204      	bcs.n	83000 <__aeabi_dmul+0x80>
   82ff6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   82ffa:	416d      	adcs	r5, r5
   82ffc:	eb46 0606 	adc.w	r6, r6, r6
   83000:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   83004:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   83008:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   8300c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   83010:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   83014:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   83018:	bf88      	it	hi
   8301a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   8301e:	d81e      	bhi.n	8305e <__aeabi_dmul+0xde>
   83020:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   83024:	bf08      	it	eq
   83026:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   8302a:	f150 0000 	adcs.w	r0, r0, #0
   8302e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   83032:	bd70      	pop	{r4, r5, r6, pc}
   83034:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   83038:	ea46 0101 	orr.w	r1, r6, r1
   8303c:	ea40 0002 	orr.w	r0, r0, r2
   83040:	ea81 0103 	eor.w	r1, r1, r3
   83044:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   83048:	bfc2      	ittt	gt
   8304a:	ebd4 050c 	rsbsgt	r5, r4, ip
   8304e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   83052:	bd70      	popgt	{r4, r5, r6, pc}
   83054:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   83058:	f04f 0e00 	mov.w	lr, #0
   8305c:	3c01      	subs	r4, #1
   8305e:	f300 80ab 	bgt.w	831b8 <__aeabi_dmul+0x238>
   83062:	f114 0f36 	cmn.w	r4, #54	; 0x36
   83066:	bfde      	ittt	le
   83068:	2000      	movle	r0, #0
   8306a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   8306e:	bd70      	pople	{r4, r5, r6, pc}
   83070:	f1c4 0400 	rsb	r4, r4, #0
   83074:	3c20      	subs	r4, #32
   83076:	da35      	bge.n	830e4 <__aeabi_dmul+0x164>
   83078:	340c      	adds	r4, #12
   8307a:	dc1b      	bgt.n	830b4 <__aeabi_dmul+0x134>
   8307c:	f104 0414 	add.w	r4, r4, #20
   83080:	f1c4 0520 	rsb	r5, r4, #32
   83084:	fa00 f305 	lsl.w	r3, r0, r5
   83088:	fa20 f004 	lsr.w	r0, r0, r4
   8308c:	fa01 f205 	lsl.w	r2, r1, r5
   83090:	ea40 0002 	orr.w	r0, r0, r2
   83094:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   83098:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   8309c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   830a0:	fa21 f604 	lsr.w	r6, r1, r4
   830a4:	eb42 0106 	adc.w	r1, r2, r6
   830a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   830ac:	bf08      	it	eq
   830ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   830b2:	bd70      	pop	{r4, r5, r6, pc}
   830b4:	f1c4 040c 	rsb	r4, r4, #12
   830b8:	f1c4 0520 	rsb	r5, r4, #32
   830bc:	fa00 f304 	lsl.w	r3, r0, r4
   830c0:	fa20 f005 	lsr.w	r0, r0, r5
   830c4:	fa01 f204 	lsl.w	r2, r1, r4
   830c8:	ea40 0002 	orr.w	r0, r0, r2
   830cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   830d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   830d4:	f141 0100 	adc.w	r1, r1, #0
   830d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   830dc:	bf08      	it	eq
   830de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   830e2:	bd70      	pop	{r4, r5, r6, pc}
   830e4:	f1c4 0520 	rsb	r5, r4, #32
   830e8:	fa00 f205 	lsl.w	r2, r0, r5
   830ec:	ea4e 0e02 	orr.w	lr, lr, r2
   830f0:	fa20 f304 	lsr.w	r3, r0, r4
   830f4:	fa01 f205 	lsl.w	r2, r1, r5
   830f8:	ea43 0302 	orr.w	r3, r3, r2
   830fc:	fa21 f004 	lsr.w	r0, r1, r4
   83100:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   83104:	fa21 f204 	lsr.w	r2, r1, r4
   83108:	ea20 0002 	bic.w	r0, r0, r2
   8310c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   83110:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   83114:	bf08      	it	eq
   83116:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   8311a:	bd70      	pop	{r4, r5, r6, pc}
   8311c:	f094 0f00 	teq	r4, #0
   83120:	d10f      	bne.n	83142 <__aeabi_dmul+0x1c2>
   83122:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   83126:	0040      	lsls	r0, r0, #1
   83128:	eb41 0101 	adc.w	r1, r1, r1
   8312c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   83130:	bf08      	it	eq
   83132:	3c01      	subeq	r4, #1
   83134:	d0f7      	beq.n	83126 <__aeabi_dmul+0x1a6>
   83136:	ea41 0106 	orr.w	r1, r1, r6
   8313a:	f095 0f00 	teq	r5, #0
   8313e:	bf18      	it	ne
   83140:	4770      	bxne	lr
   83142:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   83146:	0052      	lsls	r2, r2, #1
   83148:	eb43 0303 	adc.w	r3, r3, r3
   8314c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   83150:	bf08      	it	eq
   83152:	3d01      	subeq	r5, #1
   83154:	d0f7      	beq.n	83146 <__aeabi_dmul+0x1c6>
   83156:	ea43 0306 	orr.w	r3, r3, r6
   8315a:	4770      	bx	lr
   8315c:	ea94 0f0c 	teq	r4, ip
   83160:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   83164:	bf18      	it	ne
   83166:	ea95 0f0c 	teqne	r5, ip
   8316a:	d00c      	beq.n	83186 <__aeabi_dmul+0x206>
   8316c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   83170:	bf18      	it	ne
   83172:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   83176:	d1d1      	bne.n	8311c <__aeabi_dmul+0x19c>
   83178:	ea81 0103 	eor.w	r1, r1, r3
   8317c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   83180:	f04f 0000 	mov.w	r0, #0
   83184:	bd70      	pop	{r4, r5, r6, pc}
   83186:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   8318a:	bf06      	itte	eq
   8318c:	4610      	moveq	r0, r2
   8318e:	4619      	moveq	r1, r3
   83190:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   83194:	d019      	beq.n	831ca <__aeabi_dmul+0x24a>
   83196:	ea94 0f0c 	teq	r4, ip
   8319a:	d102      	bne.n	831a2 <__aeabi_dmul+0x222>
   8319c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   831a0:	d113      	bne.n	831ca <__aeabi_dmul+0x24a>
   831a2:	ea95 0f0c 	teq	r5, ip
   831a6:	d105      	bne.n	831b4 <__aeabi_dmul+0x234>
   831a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   831ac:	bf1c      	itt	ne
   831ae:	4610      	movne	r0, r2
   831b0:	4619      	movne	r1, r3
   831b2:	d10a      	bne.n	831ca <__aeabi_dmul+0x24a>
   831b4:	ea81 0103 	eor.w	r1, r1, r3
   831b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   831bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   831c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   831c4:	f04f 0000 	mov.w	r0, #0
   831c8:	bd70      	pop	{r4, r5, r6, pc}
   831ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   831ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   831d2:	bd70      	pop	{r4, r5, r6, pc}

000831d4 <__aeabi_ddiv>:
   831d4:	b570      	push	{r4, r5, r6, lr}
   831d6:	f04f 0cff 	mov.w	ip, #255	; 0xff
   831da:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   831de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   831e2:	bf1d      	ittte	ne
   831e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   831e8:	ea94 0f0c 	teqne	r4, ip
   831ec:	ea95 0f0c 	teqne	r5, ip
   831f0:	f000 f8a7 	bleq	83342 <__aeabi_ddiv+0x16e>
   831f4:	eba4 0405 	sub.w	r4, r4, r5
   831f8:	ea81 0e03 	eor.w	lr, r1, r3
   831fc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   83200:	ea4f 3101 	mov.w	r1, r1, lsl #12
   83204:	f000 8088 	beq.w	83318 <__aeabi_ddiv+0x144>
   83208:	ea4f 3303 	mov.w	r3, r3, lsl #12
   8320c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   83210:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   83214:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   83218:	ea4f 2202 	mov.w	r2, r2, lsl #8
   8321c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   83220:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   83224:	ea4f 2600 	mov.w	r6, r0, lsl #8
   83228:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   8322c:	429d      	cmp	r5, r3
   8322e:	bf08      	it	eq
   83230:	4296      	cmpeq	r6, r2
   83232:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   83236:	f504 7440 	add.w	r4, r4, #768	; 0x300
   8323a:	d202      	bcs.n	83242 <__aeabi_ddiv+0x6e>
   8323c:	085b      	lsrs	r3, r3, #1
   8323e:	ea4f 0232 	mov.w	r2, r2, rrx
   83242:	1ab6      	subs	r6, r6, r2
   83244:	eb65 0503 	sbc.w	r5, r5, r3
   83248:	085b      	lsrs	r3, r3, #1
   8324a:	ea4f 0232 	mov.w	r2, r2, rrx
   8324e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   83252:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   83256:	ebb6 0e02 	subs.w	lr, r6, r2
   8325a:	eb75 0e03 	sbcs.w	lr, r5, r3
   8325e:	bf22      	ittt	cs
   83260:	1ab6      	subcs	r6, r6, r2
   83262:	4675      	movcs	r5, lr
   83264:	ea40 000c 	orrcs.w	r0, r0, ip
   83268:	085b      	lsrs	r3, r3, #1
   8326a:	ea4f 0232 	mov.w	r2, r2, rrx
   8326e:	ebb6 0e02 	subs.w	lr, r6, r2
   83272:	eb75 0e03 	sbcs.w	lr, r5, r3
   83276:	bf22      	ittt	cs
   83278:	1ab6      	subcs	r6, r6, r2
   8327a:	4675      	movcs	r5, lr
   8327c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   83280:	085b      	lsrs	r3, r3, #1
   83282:	ea4f 0232 	mov.w	r2, r2, rrx
   83286:	ebb6 0e02 	subs.w	lr, r6, r2
   8328a:	eb75 0e03 	sbcs.w	lr, r5, r3
   8328e:	bf22      	ittt	cs
   83290:	1ab6      	subcs	r6, r6, r2
   83292:	4675      	movcs	r5, lr
   83294:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   83298:	085b      	lsrs	r3, r3, #1
   8329a:	ea4f 0232 	mov.w	r2, r2, rrx
   8329e:	ebb6 0e02 	subs.w	lr, r6, r2
   832a2:	eb75 0e03 	sbcs.w	lr, r5, r3
   832a6:	bf22      	ittt	cs
   832a8:	1ab6      	subcs	r6, r6, r2
   832aa:	4675      	movcs	r5, lr
   832ac:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   832b0:	ea55 0e06 	orrs.w	lr, r5, r6
   832b4:	d018      	beq.n	832e8 <__aeabi_ddiv+0x114>
   832b6:	ea4f 1505 	mov.w	r5, r5, lsl #4
   832ba:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   832be:	ea4f 1606 	mov.w	r6, r6, lsl #4
   832c2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   832c6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   832ca:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   832ce:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   832d2:	d1c0      	bne.n	83256 <__aeabi_ddiv+0x82>
   832d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   832d8:	d10b      	bne.n	832f2 <__aeabi_ddiv+0x11e>
   832da:	ea41 0100 	orr.w	r1, r1, r0
   832de:	f04f 0000 	mov.w	r0, #0
   832e2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   832e6:	e7b6      	b.n	83256 <__aeabi_ddiv+0x82>
   832e8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   832ec:	bf04      	itt	eq
   832ee:	4301      	orreq	r1, r0
   832f0:	2000      	moveq	r0, #0
   832f2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   832f6:	bf88      	it	hi
   832f8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   832fc:	f63f aeaf 	bhi.w	8305e <__aeabi_dmul+0xde>
   83300:	ebb5 0c03 	subs.w	ip, r5, r3
   83304:	bf04      	itt	eq
   83306:	ebb6 0c02 	subseq.w	ip, r6, r2
   8330a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   8330e:	f150 0000 	adcs.w	r0, r0, #0
   83312:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   83316:	bd70      	pop	{r4, r5, r6, pc}
   83318:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   8331c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   83320:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   83324:	bfc2      	ittt	gt
   83326:	ebd4 050c 	rsbsgt	r5, r4, ip
   8332a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   8332e:	bd70      	popgt	{r4, r5, r6, pc}
   83330:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   83334:	f04f 0e00 	mov.w	lr, #0
   83338:	3c01      	subs	r4, #1
   8333a:	e690      	b.n	8305e <__aeabi_dmul+0xde>
   8333c:	ea45 0e06 	orr.w	lr, r5, r6
   83340:	e68d      	b.n	8305e <__aeabi_dmul+0xde>
   83342:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   83346:	ea94 0f0c 	teq	r4, ip
   8334a:	bf08      	it	eq
   8334c:	ea95 0f0c 	teqeq	r5, ip
   83350:	f43f af3b 	beq.w	831ca <__aeabi_dmul+0x24a>
   83354:	ea94 0f0c 	teq	r4, ip
   83358:	d10a      	bne.n	83370 <__aeabi_ddiv+0x19c>
   8335a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   8335e:	f47f af34 	bne.w	831ca <__aeabi_dmul+0x24a>
   83362:	ea95 0f0c 	teq	r5, ip
   83366:	f47f af25 	bne.w	831b4 <__aeabi_dmul+0x234>
   8336a:	4610      	mov	r0, r2
   8336c:	4619      	mov	r1, r3
   8336e:	e72c      	b.n	831ca <__aeabi_dmul+0x24a>
   83370:	ea95 0f0c 	teq	r5, ip
   83374:	d106      	bne.n	83384 <__aeabi_ddiv+0x1b0>
   83376:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   8337a:	f43f aefd 	beq.w	83178 <__aeabi_dmul+0x1f8>
   8337e:	4610      	mov	r0, r2
   83380:	4619      	mov	r1, r3
   83382:	e722      	b.n	831ca <__aeabi_dmul+0x24a>
   83384:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   83388:	bf18      	it	ne
   8338a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   8338e:	f47f aec5 	bne.w	8311c <__aeabi_dmul+0x19c>
   83392:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   83396:	f47f af0d 	bne.w	831b4 <__aeabi_dmul+0x234>
   8339a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   8339e:	f47f aeeb 	bne.w	83178 <__aeabi_dmul+0x1f8>
   833a2:	e712      	b.n	831ca <__aeabi_dmul+0x24a>

000833a4 <__gedf2>:
   833a4:	f04f 3cff 	mov.w	ip, #4294967295
   833a8:	e006      	b.n	833b8 <__cmpdf2+0x4>
   833aa:	bf00      	nop

000833ac <__ledf2>:
   833ac:	f04f 0c01 	mov.w	ip, #1
   833b0:	e002      	b.n	833b8 <__cmpdf2+0x4>
   833b2:	bf00      	nop

000833b4 <__cmpdf2>:
   833b4:	f04f 0c01 	mov.w	ip, #1
   833b8:	f84d cd04 	str.w	ip, [sp, #-4]!
   833bc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   833c0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   833c4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   833c8:	bf18      	it	ne
   833ca:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   833ce:	d01b      	beq.n	83408 <__cmpdf2+0x54>
   833d0:	b001      	add	sp, #4
   833d2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   833d6:	bf0c      	ite	eq
   833d8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   833dc:	ea91 0f03 	teqne	r1, r3
   833e0:	bf02      	ittt	eq
   833e2:	ea90 0f02 	teqeq	r0, r2
   833e6:	2000      	moveq	r0, #0
   833e8:	4770      	bxeq	lr
   833ea:	f110 0f00 	cmn.w	r0, #0
   833ee:	ea91 0f03 	teq	r1, r3
   833f2:	bf58      	it	pl
   833f4:	4299      	cmppl	r1, r3
   833f6:	bf08      	it	eq
   833f8:	4290      	cmpeq	r0, r2
   833fa:	bf2c      	ite	cs
   833fc:	17d8      	asrcs	r0, r3, #31
   833fe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   83402:	f040 0001 	orr.w	r0, r0, #1
   83406:	4770      	bx	lr
   83408:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   8340c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   83410:	d102      	bne.n	83418 <__cmpdf2+0x64>
   83412:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   83416:	d107      	bne.n	83428 <__cmpdf2+0x74>
   83418:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   8341c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   83420:	d1d6      	bne.n	833d0 <__cmpdf2+0x1c>
   83422:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   83426:	d0d3      	beq.n	833d0 <__cmpdf2+0x1c>
   83428:	f85d 0b04 	ldr.w	r0, [sp], #4
   8342c:	4770      	bx	lr
   8342e:	bf00      	nop

00083430 <__aeabi_cdrcmple>:
   83430:	4684      	mov	ip, r0
   83432:	4610      	mov	r0, r2
   83434:	4662      	mov	r2, ip
   83436:	468c      	mov	ip, r1
   83438:	4619      	mov	r1, r3
   8343a:	4663      	mov	r3, ip
   8343c:	e000      	b.n	83440 <__aeabi_cdcmpeq>
   8343e:	bf00      	nop

00083440 <__aeabi_cdcmpeq>:
   83440:	b501      	push	{r0, lr}
   83442:	f7ff ffb7 	bl	833b4 <__cmpdf2>
   83446:	2800      	cmp	r0, #0
   83448:	bf48      	it	mi
   8344a:	f110 0f00 	cmnmi.w	r0, #0
   8344e:	bd01      	pop	{r0, pc}

00083450 <__aeabi_dcmpeq>:
   83450:	f84d ed08 	str.w	lr, [sp, #-8]!
   83454:	f7ff fff4 	bl	83440 <__aeabi_cdcmpeq>
   83458:	bf0c      	ite	eq
   8345a:	2001      	moveq	r0, #1
   8345c:	2000      	movne	r0, #0
   8345e:	f85d fb08 	ldr.w	pc, [sp], #8
   83462:	bf00      	nop

00083464 <__aeabi_dcmplt>:
   83464:	f84d ed08 	str.w	lr, [sp, #-8]!
   83468:	f7ff ffea 	bl	83440 <__aeabi_cdcmpeq>
   8346c:	bf34      	ite	cc
   8346e:	2001      	movcc	r0, #1
   83470:	2000      	movcs	r0, #0
   83472:	f85d fb08 	ldr.w	pc, [sp], #8
   83476:	bf00      	nop

00083478 <__aeabi_dcmple>:
   83478:	f84d ed08 	str.w	lr, [sp, #-8]!
   8347c:	f7ff ffe0 	bl	83440 <__aeabi_cdcmpeq>
   83480:	bf94      	ite	ls
   83482:	2001      	movls	r0, #1
   83484:	2000      	movhi	r0, #0
   83486:	f85d fb08 	ldr.w	pc, [sp], #8
   8348a:	bf00      	nop

0008348c <__aeabi_dcmpge>:
   8348c:	f84d ed08 	str.w	lr, [sp, #-8]!
   83490:	f7ff ffce 	bl	83430 <__aeabi_cdrcmple>
   83494:	bf94      	ite	ls
   83496:	2001      	movls	r0, #1
   83498:	2000      	movhi	r0, #0
   8349a:	f85d fb08 	ldr.w	pc, [sp], #8
   8349e:	bf00      	nop

000834a0 <__aeabi_dcmpgt>:
   834a0:	f84d ed08 	str.w	lr, [sp, #-8]!
   834a4:	f7ff ffc4 	bl	83430 <__aeabi_cdrcmple>
   834a8:	bf34      	ite	cc
   834aa:	2001      	movcc	r0, #1
   834ac:	2000      	movcs	r0, #0
   834ae:	f85d fb08 	ldr.w	pc, [sp], #8
   834b2:	bf00      	nop

000834b4 <__aeabi_d2iz>:
   834b4:	ea4f 0241 	mov.w	r2, r1, lsl #1
   834b8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   834bc:	d215      	bcs.n	834ea <__aeabi_d2iz+0x36>
   834be:	d511      	bpl.n	834e4 <__aeabi_d2iz+0x30>
   834c0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   834c4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   834c8:	d912      	bls.n	834f0 <__aeabi_d2iz+0x3c>
   834ca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   834ce:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   834d2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   834d6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   834da:	fa23 f002 	lsr.w	r0, r3, r2
   834de:	bf18      	it	ne
   834e0:	4240      	negne	r0, r0
   834e2:	4770      	bx	lr
   834e4:	f04f 0000 	mov.w	r0, #0
   834e8:	4770      	bx	lr
   834ea:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   834ee:	d105      	bne.n	834fc <__aeabi_d2iz+0x48>
   834f0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   834f4:	bf08      	it	eq
   834f6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   834fa:	4770      	bx	lr
   834fc:	f04f 0000 	mov.w	r0, #0
   83500:	4770      	bx	lr
   83502:	bf00      	nop

00083504 <__aeabi_d2f>:
   83504:	ea4f 0241 	mov.w	r2, r1, lsl #1
   83508:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   8350c:	bf24      	itt	cs
   8350e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   83512:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   83516:	d90d      	bls.n	83534 <__aeabi_d2f+0x30>
   83518:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   8351c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   83520:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   83524:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   83528:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   8352c:	bf08      	it	eq
   8352e:	f020 0001 	biceq.w	r0, r0, #1
   83532:	4770      	bx	lr
   83534:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   83538:	d121      	bne.n	8357e <__aeabi_d2f+0x7a>
   8353a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   8353e:	bfbc      	itt	lt
   83540:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   83544:	4770      	bxlt	lr
   83546:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   8354a:	ea4f 5252 	mov.w	r2, r2, lsr #21
   8354e:	f1c2 0218 	rsb	r2, r2, #24
   83552:	f1c2 0c20 	rsb	ip, r2, #32
   83556:	fa10 f30c 	lsls.w	r3, r0, ip
   8355a:	fa20 f002 	lsr.w	r0, r0, r2
   8355e:	bf18      	it	ne
   83560:	f040 0001 	orrne.w	r0, r0, #1
   83564:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   83568:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   8356c:	fa03 fc0c 	lsl.w	ip, r3, ip
   83570:	ea40 000c 	orr.w	r0, r0, ip
   83574:	fa23 f302 	lsr.w	r3, r3, r2
   83578:	ea4f 0343 	mov.w	r3, r3, lsl #1
   8357c:	e7cc      	b.n	83518 <__aeabi_d2f+0x14>
   8357e:	ea7f 5362 	mvns.w	r3, r2, asr #21
   83582:	d107      	bne.n	83594 <__aeabi_d2f+0x90>
   83584:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   83588:	bf1e      	ittt	ne
   8358a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   8358e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   83592:	4770      	bxne	lr
   83594:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   83598:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   8359c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   835a0:	4770      	bx	lr
   835a2:	bf00      	nop

000835a4 <__aeabi_frsub>:
   835a4:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
   835a8:	e002      	b.n	835b0 <__addsf3>
   835aa:	bf00      	nop

000835ac <__aeabi_fsub>:
   835ac:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

000835b0 <__addsf3>:
   835b0:	0042      	lsls	r2, r0, #1
   835b2:	bf1f      	itttt	ne
   835b4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
   835b8:	ea92 0f03 	teqne	r2, r3
   835bc:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
   835c0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   835c4:	d06a      	beq.n	8369c <__addsf3+0xec>
   835c6:	ea4f 6212 	mov.w	r2, r2, lsr #24
   835ca:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
   835ce:	bfc1      	itttt	gt
   835d0:	18d2      	addgt	r2, r2, r3
   835d2:	4041      	eorgt	r1, r0
   835d4:	4048      	eorgt	r0, r1
   835d6:	4041      	eorgt	r1, r0
   835d8:	bfb8      	it	lt
   835da:	425b      	neglt	r3, r3
   835dc:	2b19      	cmp	r3, #25
   835de:	bf88      	it	hi
   835e0:	4770      	bxhi	lr
   835e2:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   835e6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   835ea:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   835ee:	bf18      	it	ne
   835f0:	4240      	negne	r0, r0
   835f2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   835f6:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
   835fa:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   835fe:	bf18      	it	ne
   83600:	4249      	negne	r1, r1
   83602:	ea92 0f03 	teq	r2, r3
   83606:	d03f      	beq.n	83688 <__addsf3+0xd8>
   83608:	f1a2 0201 	sub.w	r2, r2, #1
   8360c:	fa41 fc03 	asr.w	ip, r1, r3
   83610:	eb10 000c 	adds.w	r0, r0, ip
   83614:	f1c3 0320 	rsb	r3, r3, #32
   83618:	fa01 f103 	lsl.w	r1, r1, r3
   8361c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   83620:	d502      	bpl.n	83628 <__addsf3+0x78>
   83622:	4249      	negs	r1, r1
   83624:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
   83628:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   8362c:	d313      	bcc.n	83656 <__addsf3+0xa6>
   8362e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
   83632:	d306      	bcc.n	83642 <__addsf3+0x92>
   83634:	0840      	lsrs	r0, r0, #1
   83636:	ea4f 0131 	mov.w	r1, r1, rrx
   8363a:	f102 0201 	add.w	r2, r2, #1
   8363e:	2afe      	cmp	r2, #254	; 0xfe
   83640:	d251      	bcs.n	836e6 <__addsf3+0x136>
   83642:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
   83646:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   8364a:	bf08      	it	eq
   8364c:	f020 0001 	biceq.w	r0, r0, #1
   83650:	ea40 0003 	orr.w	r0, r0, r3
   83654:	4770      	bx	lr
   83656:	0049      	lsls	r1, r1, #1
   83658:	eb40 0000 	adc.w	r0, r0, r0
   8365c:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
   83660:	f1a2 0201 	sub.w	r2, r2, #1
   83664:	d1ed      	bne.n	83642 <__addsf3+0x92>
   83666:	fab0 fc80 	clz	ip, r0
   8366a:	f1ac 0c08 	sub.w	ip, ip, #8
   8366e:	ebb2 020c 	subs.w	r2, r2, ip
   83672:	fa00 f00c 	lsl.w	r0, r0, ip
   83676:	bfaa      	itet	ge
   83678:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
   8367c:	4252      	neglt	r2, r2
   8367e:	4318      	orrge	r0, r3
   83680:	bfbc      	itt	lt
   83682:	40d0      	lsrlt	r0, r2
   83684:	4318      	orrlt	r0, r3
   83686:	4770      	bx	lr
   83688:	f092 0f00 	teq	r2, #0
   8368c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
   83690:	bf06      	itte	eq
   83692:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
   83696:	3201      	addeq	r2, #1
   83698:	3b01      	subne	r3, #1
   8369a:	e7b5      	b.n	83608 <__addsf3+0x58>
   8369c:	ea4f 0341 	mov.w	r3, r1, lsl #1
   836a0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   836a4:	bf18      	it	ne
   836a6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   836aa:	d021      	beq.n	836f0 <__addsf3+0x140>
   836ac:	ea92 0f03 	teq	r2, r3
   836b0:	d004      	beq.n	836bc <__addsf3+0x10c>
   836b2:	f092 0f00 	teq	r2, #0
   836b6:	bf08      	it	eq
   836b8:	4608      	moveq	r0, r1
   836ba:	4770      	bx	lr
   836bc:	ea90 0f01 	teq	r0, r1
   836c0:	bf1c      	itt	ne
   836c2:	2000      	movne	r0, #0
   836c4:	4770      	bxne	lr
   836c6:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
   836ca:	d104      	bne.n	836d6 <__addsf3+0x126>
   836cc:	0040      	lsls	r0, r0, #1
   836ce:	bf28      	it	cs
   836d0:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
   836d4:	4770      	bx	lr
   836d6:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
   836da:	bf3c      	itt	cc
   836dc:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
   836e0:	4770      	bxcc	lr
   836e2:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   836e6:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
   836ea:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   836ee:	4770      	bx	lr
   836f0:	ea7f 6222 	mvns.w	r2, r2, asr #24
   836f4:	bf16      	itet	ne
   836f6:	4608      	movne	r0, r1
   836f8:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
   836fc:	4601      	movne	r1, r0
   836fe:	0242      	lsls	r2, r0, #9
   83700:	bf06      	itte	eq
   83702:	ea5f 2341 	movseq.w	r3, r1, lsl #9
   83706:	ea90 0f01 	teqeq	r0, r1
   8370a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
   8370e:	4770      	bx	lr

00083710 <__aeabi_ui2f>:
   83710:	f04f 0300 	mov.w	r3, #0
   83714:	e004      	b.n	83720 <__aeabi_i2f+0x8>
   83716:	bf00      	nop

00083718 <__aeabi_i2f>:
   83718:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
   8371c:	bf48      	it	mi
   8371e:	4240      	negmi	r0, r0
   83720:	ea5f 0c00 	movs.w	ip, r0
   83724:	bf08      	it	eq
   83726:	4770      	bxeq	lr
   83728:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
   8372c:	4601      	mov	r1, r0
   8372e:	f04f 0000 	mov.w	r0, #0
   83732:	e01c      	b.n	8376e <__aeabi_l2f+0x2a>

00083734 <__aeabi_ul2f>:
   83734:	ea50 0201 	orrs.w	r2, r0, r1
   83738:	bf08      	it	eq
   8373a:	4770      	bxeq	lr
   8373c:	f04f 0300 	mov.w	r3, #0
   83740:	e00a      	b.n	83758 <__aeabi_l2f+0x14>
   83742:	bf00      	nop

00083744 <__aeabi_l2f>:
   83744:	ea50 0201 	orrs.w	r2, r0, r1
   83748:	bf08      	it	eq
   8374a:	4770      	bxeq	lr
   8374c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
   83750:	d502      	bpl.n	83758 <__aeabi_l2f+0x14>
   83752:	4240      	negs	r0, r0
   83754:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   83758:	ea5f 0c01 	movs.w	ip, r1
   8375c:	bf02      	ittt	eq
   8375e:	4684      	moveq	ip, r0
   83760:	4601      	moveq	r1, r0
   83762:	2000      	moveq	r0, #0
   83764:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
   83768:	bf08      	it	eq
   8376a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
   8376e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
   83772:	fabc f28c 	clz	r2, ip
   83776:	3a08      	subs	r2, #8
   83778:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
   8377c:	db10      	blt.n	837a0 <__aeabi_l2f+0x5c>
   8377e:	fa01 fc02 	lsl.w	ip, r1, r2
   83782:	4463      	add	r3, ip
   83784:	fa00 fc02 	lsl.w	ip, r0, r2
   83788:	f1c2 0220 	rsb	r2, r2, #32
   8378c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   83790:	fa20 f202 	lsr.w	r2, r0, r2
   83794:	eb43 0002 	adc.w	r0, r3, r2
   83798:	bf08      	it	eq
   8379a:	f020 0001 	biceq.w	r0, r0, #1
   8379e:	4770      	bx	lr
   837a0:	f102 0220 	add.w	r2, r2, #32
   837a4:	fa01 fc02 	lsl.w	ip, r1, r2
   837a8:	f1c2 0220 	rsb	r2, r2, #32
   837ac:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
   837b0:	fa21 f202 	lsr.w	r2, r1, r2
   837b4:	eb43 0002 	adc.w	r0, r3, r2
   837b8:	bf08      	it	eq
   837ba:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   837be:	4770      	bx	lr

000837c0 <__gesf2>:
   837c0:	f04f 3cff 	mov.w	ip, #4294967295
   837c4:	e006      	b.n	837d4 <__cmpsf2+0x4>
   837c6:	bf00      	nop

000837c8 <__lesf2>:
   837c8:	f04f 0c01 	mov.w	ip, #1
   837cc:	e002      	b.n	837d4 <__cmpsf2+0x4>
   837ce:	bf00      	nop

000837d0 <__cmpsf2>:
   837d0:	f04f 0c01 	mov.w	ip, #1
   837d4:	f84d cd04 	str.w	ip, [sp, #-4]!
   837d8:	ea4f 0240 	mov.w	r2, r0, lsl #1
   837dc:	ea4f 0341 	mov.w	r3, r1, lsl #1
   837e0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   837e4:	bf18      	it	ne
   837e6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   837ea:	d011      	beq.n	83810 <__cmpsf2+0x40>
   837ec:	b001      	add	sp, #4
   837ee:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
   837f2:	bf18      	it	ne
   837f4:	ea90 0f01 	teqne	r0, r1
   837f8:	bf58      	it	pl
   837fa:	ebb2 0003 	subspl.w	r0, r2, r3
   837fe:	bf88      	it	hi
   83800:	17c8      	asrhi	r0, r1, #31
   83802:	bf38      	it	cc
   83804:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
   83808:	bf18      	it	ne
   8380a:	f040 0001 	orrne.w	r0, r0, #1
   8380e:	4770      	bx	lr
   83810:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   83814:	d102      	bne.n	8381c <__cmpsf2+0x4c>
   83816:	ea5f 2c40 	movs.w	ip, r0, lsl #9
   8381a:	d105      	bne.n	83828 <__cmpsf2+0x58>
   8381c:	ea7f 6c23 	mvns.w	ip, r3, asr #24
   83820:	d1e4      	bne.n	837ec <__cmpsf2+0x1c>
   83822:	ea5f 2c41 	movs.w	ip, r1, lsl #9
   83826:	d0e1      	beq.n	837ec <__cmpsf2+0x1c>
   83828:	f85d 0b04 	ldr.w	r0, [sp], #4
   8382c:	4770      	bx	lr
   8382e:	bf00      	nop

00083830 <__aeabi_cfrcmple>:
   83830:	4684      	mov	ip, r0
   83832:	4608      	mov	r0, r1
   83834:	4661      	mov	r1, ip
   83836:	e7ff      	b.n	83838 <__aeabi_cfcmpeq>

00083838 <__aeabi_cfcmpeq>:
   83838:	b50f      	push	{r0, r1, r2, r3, lr}
   8383a:	f7ff ffc9 	bl	837d0 <__cmpsf2>
   8383e:	2800      	cmp	r0, #0
   83840:	bf48      	it	mi
   83842:	f110 0f00 	cmnmi.w	r0, #0
   83846:	bd0f      	pop	{r0, r1, r2, r3, pc}

00083848 <__aeabi_fcmpeq>:
   83848:	f84d ed08 	str.w	lr, [sp, #-8]!
   8384c:	f7ff fff4 	bl	83838 <__aeabi_cfcmpeq>
   83850:	bf0c      	ite	eq
   83852:	2001      	moveq	r0, #1
   83854:	2000      	movne	r0, #0
   83856:	f85d fb08 	ldr.w	pc, [sp], #8
   8385a:	bf00      	nop

0008385c <__aeabi_fcmplt>:
   8385c:	f84d ed08 	str.w	lr, [sp, #-8]!
   83860:	f7ff ffea 	bl	83838 <__aeabi_cfcmpeq>
   83864:	bf34      	ite	cc
   83866:	2001      	movcc	r0, #1
   83868:	2000      	movcs	r0, #0
   8386a:	f85d fb08 	ldr.w	pc, [sp], #8
   8386e:	bf00      	nop

00083870 <__aeabi_fcmple>:
   83870:	f84d ed08 	str.w	lr, [sp, #-8]!
   83874:	f7ff ffe0 	bl	83838 <__aeabi_cfcmpeq>
   83878:	bf94      	ite	ls
   8387a:	2001      	movls	r0, #1
   8387c:	2000      	movhi	r0, #0
   8387e:	f85d fb08 	ldr.w	pc, [sp], #8
   83882:	bf00      	nop

00083884 <__aeabi_fcmpge>:
   83884:	f84d ed08 	str.w	lr, [sp, #-8]!
   83888:	f7ff ffd2 	bl	83830 <__aeabi_cfrcmple>
   8388c:	bf94      	ite	ls
   8388e:	2001      	movls	r0, #1
   83890:	2000      	movhi	r0, #0
   83892:	f85d fb08 	ldr.w	pc, [sp], #8
   83896:	bf00      	nop

00083898 <__aeabi_fcmpgt>:
   83898:	f84d ed08 	str.w	lr, [sp, #-8]!
   8389c:	f7ff ffc8 	bl	83830 <__aeabi_cfrcmple>
   838a0:	bf34      	ite	cc
   838a2:	2001      	movcc	r0, #1
   838a4:	2000      	movcs	r0, #0
   838a6:	f85d fb08 	ldr.w	pc, [sp], #8
   838aa:	bf00      	nop

000838ac <__libc_init_array>:
   838ac:	b570      	push	{r4, r5, r6, lr}
   838ae:	4e0f      	ldr	r6, [pc, #60]	; (838ec <__libc_init_array+0x40>)
   838b0:	4d0f      	ldr	r5, [pc, #60]	; (838f0 <__libc_init_array+0x44>)
   838b2:	1b76      	subs	r6, r6, r5
   838b4:	10b6      	asrs	r6, r6, #2
   838b6:	bf18      	it	ne
   838b8:	2400      	movne	r4, #0
   838ba:	d005      	beq.n	838c8 <__libc_init_array+0x1c>
   838bc:	3401      	adds	r4, #1
   838be:	f855 3b04 	ldr.w	r3, [r5], #4
   838c2:	4798      	blx	r3
   838c4:	42a6      	cmp	r6, r4
   838c6:	d1f9      	bne.n	838bc <__libc_init_array+0x10>
   838c8:	4e0a      	ldr	r6, [pc, #40]	; (838f4 <__libc_init_array+0x48>)
   838ca:	4d0b      	ldr	r5, [pc, #44]	; (838f8 <__libc_init_array+0x4c>)
   838cc:	f003 f888 	bl	869e0 <_init>
   838d0:	1b76      	subs	r6, r6, r5
   838d2:	10b6      	asrs	r6, r6, #2
   838d4:	bf18      	it	ne
   838d6:	2400      	movne	r4, #0
   838d8:	d006      	beq.n	838e8 <__libc_init_array+0x3c>
   838da:	3401      	adds	r4, #1
   838dc:	f855 3b04 	ldr.w	r3, [r5], #4
   838e0:	4798      	blx	r3
   838e2:	42a6      	cmp	r6, r4
   838e4:	d1f9      	bne.n	838da <__libc_init_array+0x2e>
   838e6:	bd70      	pop	{r4, r5, r6, pc}
   838e8:	bd70      	pop	{r4, r5, r6, pc}
   838ea:	bf00      	nop
   838ec:	000869ec 	.word	0x000869ec
   838f0:	000869ec 	.word	0x000869ec
   838f4:	000869f4 	.word	0x000869f4
   838f8:	000869ec 	.word	0x000869ec

000838fc <iprintf>:
   838fc:	b40f      	push	{r0, r1, r2, r3}
   838fe:	b510      	push	{r4, lr}
   83900:	4b07      	ldr	r3, [pc, #28]	; (83920 <iprintf+0x24>)
   83902:	b082      	sub	sp, #8
   83904:	ac04      	add	r4, sp, #16
   83906:	f854 2b04 	ldr.w	r2, [r4], #4
   8390a:	6818      	ldr	r0, [r3, #0]
   8390c:	4623      	mov	r3, r4
   8390e:	6881      	ldr	r1, [r0, #8]
   83910:	9401      	str	r4, [sp, #4]
   83912:	f000 fa19 	bl	83d48 <_vfiprintf_r>
   83916:	b002      	add	sp, #8
   83918:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   8391c:	b004      	add	sp, #16
   8391e:	4770      	bx	lr
   83920:	20070580 	.word	0x20070580

00083924 <memcpy>:
   83924:	4684      	mov	ip, r0
   83926:	ea41 0300 	orr.w	r3, r1, r0
   8392a:	f013 0303 	ands.w	r3, r3, #3
   8392e:	d149      	bne.n	839c4 <memcpy+0xa0>
   83930:	3a40      	subs	r2, #64	; 0x40
   83932:	d323      	bcc.n	8397c <memcpy+0x58>
   83934:	680b      	ldr	r3, [r1, #0]
   83936:	6003      	str	r3, [r0, #0]
   83938:	684b      	ldr	r3, [r1, #4]
   8393a:	6043      	str	r3, [r0, #4]
   8393c:	688b      	ldr	r3, [r1, #8]
   8393e:	6083      	str	r3, [r0, #8]
   83940:	68cb      	ldr	r3, [r1, #12]
   83942:	60c3      	str	r3, [r0, #12]
   83944:	690b      	ldr	r3, [r1, #16]
   83946:	6103      	str	r3, [r0, #16]
   83948:	694b      	ldr	r3, [r1, #20]
   8394a:	6143      	str	r3, [r0, #20]
   8394c:	698b      	ldr	r3, [r1, #24]
   8394e:	6183      	str	r3, [r0, #24]
   83950:	69cb      	ldr	r3, [r1, #28]
   83952:	61c3      	str	r3, [r0, #28]
   83954:	6a0b      	ldr	r3, [r1, #32]
   83956:	6203      	str	r3, [r0, #32]
   83958:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   8395a:	6243      	str	r3, [r0, #36]	; 0x24
   8395c:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   8395e:	6283      	str	r3, [r0, #40]	; 0x28
   83960:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   83962:	62c3      	str	r3, [r0, #44]	; 0x2c
   83964:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   83966:	6303      	str	r3, [r0, #48]	; 0x30
   83968:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   8396a:	6343      	str	r3, [r0, #52]	; 0x34
   8396c:	6b8b      	ldr	r3, [r1, #56]	; 0x38
   8396e:	6383      	str	r3, [r0, #56]	; 0x38
   83970:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   83972:	63c3      	str	r3, [r0, #60]	; 0x3c
   83974:	3040      	adds	r0, #64	; 0x40
   83976:	3140      	adds	r1, #64	; 0x40
   83978:	3a40      	subs	r2, #64	; 0x40
   8397a:	d2db      	bcs.n	83934 <memcpy+0x10>
   8397c:	3230      	adds	r2, #48	; 0x30
   8397e:	d30b      	bcc.n	83998 <memcpy+0x74>
   83980:	680b      	ldr	r3, [r1, #0]
   83982:	6003      	str	r3, [r0, #0]
   83984:	684b      	ldr	r3, [r1, #4]
   83986:	6043      	str	r3, [r0, #4]
   83988:	688b      	ldr	r3, [r1, #8]
   8398a:	6083      	str	r3, [r0, #8]
   8398c:	68cb      	ldr	r3, [r1, #12]
   8398e:	60c3      	str	r3, [r0, #12]
   83990:	3010      	adds	r0, #16
   83992:	3110      	adds	r1, #16
   83994:	3a10      	subs	r2, #16
   83996:	d2f3      	bcs.n	83980 <memcpy+0x5c>
   83998:	320c      	adds	r2, #12
   8399a:	d305      	bcc.n	839a8 <memcpy+0x84>
   8399c:	f851 3b04 	ldr.w	r3, [r1], #4
   839a0:	f840 3b04 	str.w	r3, [r0], #4
   839a4:	3a04      	subs	r2, #4
   839a6:	d2f9      	bcs.n	8399c <memcpy+0x78>
   839a8:	3204      	adds	r2, #4
   839aa:	d008      	beq.n	839be <memcpy+0x9a>
   839ac:	07d2      	lsls	r2, r2, #31
   839ae:	bf1c      	itt	ne
   839b0:	f811 3b01 	ldrbne.w	r3, [r1], #1
   839b4:	f800 3b01 	strbne.w	r3, [r0], #1
   839b8:	d301      	bcc.n	839be <memcpy+0x9a>
   839ba:	880b      	ldrh	r3, [r1, #0]
   839bc:	8003      	strh	r3, [r0, #0]
   839be:	4660      	mov	r0, ip
   839c0:	4770      	bx	lr
   839c2:	bf00      	nop
   839c4:	2a08      	cmp	r2, #8
   839c6:	d313      	bcc.n	839f0 <memcpy+0xcc>
   839c8:	078b      	lsls	r3, r1, #30
   839ca:	d0b1      	beq.n	83930 <memcpy+0xc>
   839cc:	f010 0303 	ands.w	r3, r0, #3
   839d0:	d0ae      	beq.n	83930 <memcpy+0xc>
   839d2:	f1c3 0304 	rsb	r3, r3, #4
   839d6:	1ad2      	subs	r2, r2, r3
   839d8:	07db      	lsls	r3, r3, #31
   839da:	bf1c      	itt	ne
   839dc:	f811 3b01 	ldrbne.w	r3, [r1], #1
   839e0:	f800 3b01 	strbne.w	r3, [r0], #1
   839e4:	d3a4      	bcc.n	83930 <memcpy+0xc>
   839e6:	f831 3b02 	ldrh.w	r3, [r1], #2
   839ea:	f820 3b02 	strh.w	r3, [r0], #2
   839ee:	e79f      	b.n	83930 <memcpy+0xc>
   839f0:	3a04      	subs	r2, #4
   839f2:	d3d9      	bcc.n	839a8 <memcpy+0x84>
   839f4:	3a01      	subs	r2, #1
   839f6:	f811 3b01 	ldrb.w	r3, [r1], #1
   839fa:	f800 3b01 	strb.w	r3, [r0], #1
   839fe:	d2f9      	bcs.n	839f4 <memcpy+0xd0>
   83a00:	780b      	ldrb	r3, [r1, #0]
   83a02:	7003      	strb	r3, [r0, #0]
   83a04:	784b      	ldrb	r3, [r1, #1]
   83a06:	7043      	strb	r3, [r0, #1]
   83a08:	788b      	ldrb	r3, [r1, #2]
   83a0a:	7083      	strb	r3, [r0, #2]
   83a0c:	4660      	mov	r0, ip
   83a0e:	4770      	bx	lr

00083a10 <memset>:
   83a10:	b470      	push	{r4, r5, r6}
   83a12:	0784      	lsls	r4, r0, #30
   83a14:	d046      	beq.n	83aa4 <memset+0x94>
   83a16:	1e54      	subs	r4, r2, #1
   83a18:	2a00      	cmp	r2, #0
   83a1a:	d041      	beq.n	83aa0 <memset+0x90>
   83a1c:	b2cd      	uxtb	r5, r1
   83a1e:	4603      	mov	r3, r0
   83a20:	e002      	b.n	83a28 <memset+0x18>
   83a22:	1e62      	subs	r2, r4, #1
   83a24:	b3e4      	cbz	r4, 83aa0 <memset+0x90>
   83a26:	4614      	mov	r4, r2
   83a28:	f803 5b01 	strb.w	r5, [r3], #1
   83a2c:	079a      	lsls	r2, r3, #30
   83a2e:	d1f8      	bne.n	83a22 <memset+0x12>
   83a30:	2c03      	cmp	r4, #3
   83a32:	d92e      	bls.n	83a92 <memset+0x82>
   83a34:	b2cd      	uxtb	r5, r1
   83a36:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   83a3a:	2c0f      	cmp	r4, #15
   83a3c:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   83a40:	d919      	bls.n	83a76 <memset+0x66>
   83a42:	4626      	mov	r6, r4
   83a44:	f103 0210 	add.w	r2, r3, #16
   83a48:	3e10      	subs	r6, #16
   83a4a:	2e0f      	cmp	r6, #15
   83a4c:	f842 5c10 	str.w	r5, [r2, #-16]
   83a50:	f842 5c0c 	str.w	r5, [r2, #-12]
   83a54:	f842 5c08 	str.w	r5, [r2, #-8]
   83a58:	f842 5c04 	str.w	r5, [r2, #-4]
   83a5c:	f102 0210 	add.w	r2, r2, #16
   83a60:	d8f2      	bhi.n	83a48 <memset+0x38>
   83a62:	f1a4 0210 	sub.w	r2, r4, #16
   83a66:	f022 020f 	bic.w	r2, r2, #15
   83a6a:	f004 040f 	and.w	r4, r4, #15
   83a6e:	3210      	adds	r2, #16
   83a70:	2c03      	cmp	r4, #3
   83a72:	4413      	add	r3, r2
   83a74:	d90d      	bls.n	83a92 <memset+0x82>
   83a76:	461e      	mov	r6, r3
   83a78:	4622      	mov	r2, r4
   83a7a:	3a04      	subs	r2, #4
   83a7c:	2a03      	cmp	r2, #3
   83a7e:	f846 5b04 	str.w	r5, [r6], #4
   83a82:	d8fa      	bhi.n	83a7a <memset+0x6a>
   83a84:	1f22      	subs	r2, r4, #4
   83a86:	f022 0203 	bic.w	r2, r2, #3
   83a8a:	3204      	adds	r2, #4
   83a8c:	4413      	add	r3, r2
   83a8e:	f004 0403 	and.w	r4, r4, #3
   83a92:	b12c      	cbz	r4, 83aa0 <memset+0x90>
   83a94:	b2c9      	uxtb	r1, r1
   83a96:	441c      	add	r4, r3
   83a98:	f803 1b01 	strb.w	r1, [r3], #1
   83a9c:	42a3      	cmp	r3, r4
   83a9e:	d1fb      	bne.n	83a98 <memset+0x88>
   83aa0:	bc70      	pop	{r4, r5, r6}
   83aa2:	4770      	bx	lr
   83aa4:	4614      	mov	r4, r2
   83aa6:	4603      	mov	r3, r0
   83aa8:	e7c2      	b.n	83a30 <memset+0x20>
   83aaa:	bf00      	nop

00083aac <setbuf>:
   83aac:	2900      	cmp	r1, #0
   83aae:	bf0c      	ite	eq
   83ab0:	2202      	moveq	r2, #2
   83ab2:	2200      	movne	r2, #0
   83ab4:	f44f 6380 	mov.w	r3, #1024	; 0x400
   83ab8:	f000 b800 	b.w	83abc <setvbuf>

00083abc <setvbuf>:
   83abc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   83ac0:	4d51      	ldr	r5, [pc, #324]	; (83c08 <setvbuf+0x14c>)
   83ac2:	b083      	sub	sp, #12
   83ac4:	682d      	ldr	r5, [r5, #0]
   83ac6:	4604      	mov	r4, r0
   83ac8:	460f      	mov	r7, r1
   83aca:	4690      	mov	r8, r2
   83acc:	461e      	mov	r6, r3
   83ace:	b115      	cbz	r5, 83ad6 <setvbuf+0x1a>
   83ad0:	6bab      	ldr	r3, [r5, #56]	; 0x38
   83ad2:	2b00      	cmp	r3, #0
   83ad4:	d079      	beq.n	83bca <setvbuf+0x10e>
   83ad6:	f1b8 0f02 	cmp.w	r8, #2
   83ada:	d004      	beq.n	83ae6 <setvbuf+0x2a>
   83adc:	f1b8 0f01 	cmp.w	r8, #1
   83ae0:	d87f      	bhi.n	83be2 <setvbuf+0x126>
   83ae2:	2e00      	cmp	r6, #0
   83ae4:	db7d      	blt.n	83be2 <setvbuf+0x126>
   83ae6:	4621      	mov	r1, r4
   83ae8:	4628      	mov	r0, r5
   83aea:	f001 f96f 	bl	84dcc <_fflush_r>
   83aee:	6b21      	ldr	r1, [r4, #48]	; 0x30
   83af0:	b141      	cbz	r1, 83b04 <setvbuf+0x48>
   83af2:	f104 0340 	add.w	r3, r4, #64	; 0x40
   83af6:	4299      	cmp	r1, r3
   83af8:	d002      	beq.n	83b00 <setvbuf+0x44>
   83afa:	4628      	mov	r0, r5
   83afc:	f001 fac2 	bl	85084 <_free_r>
   83b00:	2300      	movs	r3, #0
   83b02:	6323      	str	r3, [r4, #48]	; 0x30
   83b04:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   83b08:	2200      	movs	r2, #0
   83b0a:	61a2      	str	r2, [r4, #24]
   83b0c:	6062      	str	r2, [r4, #4]
   83b0e:	061a      	lsls	r2, r3, #24
   83b10:	d454      	bmi.n	83bbc <setvbuf+0x100>
   83b12:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
   83b16:	f023 0303 	bic.w	r3, r3, #3
   83b1a:	f1b8 0f02 	cmp.w	r8, #2
   83b1e:	81a3      	strh	r3, [r4, #12]
   83b20:	d039      	beq.n	83b96 <setvbuf+0xda>
   83b22:	ab01      	add	r3, sp, #4
   83b24:	466a      	mov	r2, sp
   83b26:	4621      	mov	r1, r4
   83b28:	4628      	mov	r0, r5
   83b2a:	f001 fd49 	bl	855c0 <__swhatbuf_r>
   83b2e:	89a3      	ldrh	r3, [r4, #12]
   83b30:	4318      	orrs	r0, r3
   83b32:	81a0      	strh	r0, [r4, #12]
   83b34:	b326      	cbz	r6, 83b80 <setvbuf+0xc4>
   83b36:	b327      	cbz	r7, 83b82 <setvbuf+0xc6>
   83b38:	6bab      	ldr	r3, [r5, #56]	; 0x38
   83b3a:	2b00      	cmp	r3, #0
   83b3c:	d04d      	beq.n	83bda <setvbuf+0x11e>
   83b3e:	9b00      	ldr	r3, [sp, #0]
   83b40:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   83b44:	429e      	cmp	r6, r3
   83b46:	bf1c      	itt	ne
   83b48:	f440 6000 	orrne.w	r0, r0, #2048	; 0x800
   83b4c:	81a0      	strhne	r0, [r4, #12]
   83b4e:	f1b8 0f01 	cmp.w	r8, #1
   83b52:	bf08      	it	eq
   83b54:	f040 0001 	orreq.w	r0, r0, #1
   83b58:	b283      	uxth	r3, r0
   83b5a:	bf08      	it	eq
   83b5c:	81a0      	strheq	r0, [r4, #12]
   83b5e:	f003 0008 	and.w	r0, r3, #8
   83b62:	b280      	uxth	r0, r0
   83b64:	6027      	str	r7, [r4, #0]
   83b66:	6127      	str	r7, [r4, #16]
   83b68:	6166      	str	r6, [r4, #20]
   83b6a:	b318      	cbz	r0, 83bb4 <setvbuf+0xf8>
   83b6c:	f013 0001 	ands.w	r0, r3, #1
   83b70:	d02f      	beq.n	83bd2 <setvbuf+0x116>
   83b72:	2000      	movs	r0, #0
   83b74:	4276      	negs	r6, r6
   83b76:	61a6      	str	r6, [r4, #24]
   83b78:	60a0      	str	r0, [r4, #8]
   83b7a:	b003      	add	sp, #12
   83b7c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   83b80:	9e00      	ldr	r6, [sp, #0]
   83b82:	4630      	mov	r0, r6
   83b84:	f001 fd90 	bl	856a8 <malloc>
   83b88:	4607      	mov	r7, r0
   83b8a:	b368      	cbz	r0, 83be8 <setvbuf+0x12c>
   83b8c:	89a3      	ldrh	r3, [r4, #12]
   83b8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   83b92:	81a3      	strh	r3, [r4, #12]
   83b94:	e7d0      	b.n	83b38 <setvbuf+0x7c>
   83b96:	2000      	movs	r0, #0
   83b98:	f104 0243 	add.w	r2, r4, #67	; 0x43
   83b9c:	f043 0302 	orr.w	r3, r3, #2
   83ba0:	2500      	movs	r5, #0
   83ba2:	2101      	movs	r1, #1
   83ba4:	81a3      	strh	r3, [r4, #12]
   83ba6:	60a5      	str	r5, [r4, #8]
   83ba8:	6022      	str	r2, [r4, #0]
   83baa:	6122      	str	r2, [r4, #16]
   83bac:	6161      	str	r1, [r4, #20]
   83bae:	b003      	add	sp, #12
   83bb0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   83bb4:	60a0      	str	r0, [r4, #8]
   83bb6:	b003      	add	sp, #12
   83bb8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   83bbc:	6921      	ldr	r1, [r4, #16]
   83bbe:	4628      	mov	r0, r5
   83bc0:	f001 fa60 	bl	85084 <_free_r>
   83bc4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   83bc8:	e7a3      	b.n	83b12 <setvbuf+0x56>
   83bca:	4628      	mov	r0, r5
   83bcc:	f001 f992 	bl	84ef4 <__sinit>
   83bd0:	e781      	b.n	83ad6 <setvbuf+0x1a>
   83bd2:	60a6      	str	r6, [r4, #8]
   83bd4:	b003      	add	sp, #12
   83bd6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   83bda:	4628      	mov	r0, r5
   83bdc:	f001 f98a 	bl	84ef4 <__sinit>
   83be0:	e7ad      	b.n	83b3e <setvbuf+0x82>
   83be2:	f04f 30ff 	mov.w	r0, #4294967295
   83be6:	e7e2      	b.n	83bae <setvbuf+0xf2>
   83be8:	f8dd 9000 	ldr.w	r9, [sp]
   83bec:	45b1      	cmp	r9, r6
   83bee:	d006      	beq.n	83bfe <setvbuf+0x142>
   83bf0:	4648      	mov	r0, r9
   83bf2:	f001 fd59 	bl	856a8 <malloc>
   83bf6:	4607      	mov	r7, r0
   83bf8:	b108      	cbz	r0, 83bfe <setvbuf+0x142>
   83bfa:	464e      	mov	r6, r9
   83bfc:	e7c6      	b.n	83b8c <setvbuf+0xd0>
   83bfe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   83c02:	f04f 30ff 	mov.w	r0, #4294967295
   83c06:	e7c7      	b.n	83b98 <setvbuf+0xdc>
   83c08:	20070580 	.word	0x20070580

00083c0c <strlen>:
   83c0c:	f020 0103 	bic.w	r1, r0, #3
   83c10:	f010 0003 	ands.w	r0, r0, #3
   83c14:	f1c0 0000 	rsb	r0, r0, #0
   83c18:	f851 3b04 	ldr.w	r3, [r1], #4
   83c1c:	f100 0c04 	add.w	ip, r0, #4
   83c20:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
   83c24:	f06f 0200 	mvn.w	r2, #0
   83c28:	bf1c      	itt	ne
   83c2a:	fa22 f20c 	lsrne.w	r2, r2, ip
   83c2e:	4313      	orrne	r3, r2
   83c30:	f04f 0c01 	mov.w	ip, #1
   83c34:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
   83c38:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
   83c3c:	eba3 020c 	sub.w	r2, r3, ip
   83c40:	ea22 0203 	bic.w	r2, r2, r3
   83c44:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
   83c48:	bf04      	itt	eq
   83c4a:	f851 3b04 	ldreq.w	r3, [r1], #4
   83c4e:	3004      	addeq	r0, #4
   83c50:	d0f4      	beq.n	83c3c <strlen+0x30>
   83c52:	f1c2 0100 	rsb	r1, r2, #0
   83c56:	ea02 0201 	and.w	r2, r2, r1
   83c5a:	fab2 f282 	clz	r2, r2
   83c5e:	f1c2 021f 	rsb	r2, r2, #31
   83c62:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
   83c66:	4770      	bx	lr

00083c68 <strncpy>:
   83c68:	ea40 0301 	orr.w	r3, r0, r1
   83c6c:	079b      	lsls	r3, r3, #30
   83c6e:	b470      	push	{r4, r5, r6}
   83c70:	d12b      	bne.n	83cca <strncpy+0x62>
   83c72:	2a03      	cmp	r2, #3
   83c74:	d929      	bls.n	83cca <strncpy+0x62>
   83c76:	460c      	mov	r4, r1
   83c78:	4603      	mov	r3, r0
   83c7a:	4621      	mov	r1, r4
   83c7c:	f854 6b04 	ldr.w	r6, [r4], #4
   83c80:	f1a6 3501 	sub.w	r5, r6, #16843009	; 0x1010101
   83c84:	ea25 0506 	bic.w	r5, r5, r6
   83c88:	f015 3f80 	tst.w	r5, #2155905152	; 0x80808080
   83c8c:	d106      	bne.n	83c9c <strncpy+0x34>
   83c8e:	3a04      	subs	r2, #4
   83c90:	2a03      	cmp	r2, #3
   83c92:	f843 6b04 	str.w	r6, [r3], #4
   83c96:	4621      	mov	r1, r4
   83c98:	d8ef      	bhi.n	83c7a <strncpy+0x12>
   83c9a:	b1a2      	cbz	r2, 83cc6 <strncpy+0x5e>
   83c9c:	780c      	ldrb	r4, [r1, #0]
   83c9e:	3a01      	subs	r2, #1
   83ca0:	701c      	strb	r4, [r3, #0]
   83ca2:	3101      	adds	r1, #1
   83ca4:	3301      	adds	r3, #1
   83ca6:	b13c      	cbz	r4, 83cb8 <strncpy+0x50>
   83ca8:	b16a      	cbz	r2, 83cc6 <strncpy+0x5e>
   83caa:	f811 4b01 	ldrb.w	r4, [r1], #1
   83cae:	3a01      	subs	r2, #1
   83cb0:	f803 4b01 	strb.w	r4, [r3], #1
   83cb4:	2c00      	cmp	r4, #0
   83cb6:	d1f7      	bne.n	83ca8 <strncpy+0x40>
   83cb8:	b12a      	cbz	r2, 83cc6 <strncpy+0x5e>
   83cba:	441a      	add	r2, r3
   83cbc:	2100      	movs	r1, #0
   83cbe:	f803 1b01 	strb.w	r1, [r3], #1
   83cc2:	429a      	cmp	r2, r3
   83cc4:	d1fb      	bne.n	83cbe <strncpy+0x56>
   83cc6:	bc70      	pop	{r4, r5, r6}
   83cc8:	4770      	bx	lr
   83cca:	4603      	mov	r3, r0
   83ccc:	e7e5      	b.n	83c9a <strncpy+0x32>
   83cce:	bf00      	nop

00083cd0 <__sprint_r.part.0>:
   83cd0:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   83cd2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   83cd6:	049c      	lsls	r4, r3, #18
   83cd8:	4692      	mov	sl, r2
   83cda:	d52c      	bpl.n	83d36 <__sprint_r.part.0+0x66>
   83cdc:	6893      	ldr	r3, [r2, #8]
   83cde:	6812      	ldr	r2, [r2, #0]
   83ce0:	b33b      	cbz	r3, 83d32 <__sprint_r.part.0+0x62>
   83ce2:	460f      	mov	r7, r1
   83ce4:	4680      	mov	r8, r0
   83ce6:	f102 0908 	add.w	r9, r2, #8
   83cea:	e919 0060 	ldmdb	r9, {r5, r6}
   83cee:	08b6      	lsrs	r6, r6, #2
   83cf0:	d017      	beq.n	83d22 <__sprint_r.part.0+0x52>
   83cf2:	3d04      	subs	r5, #4
   83cf4:	2400      	movs	r4, #0
   83cf6:	e001      	b.n	83cfc <__sprint_r.part.0+0x2c>
   83cf8:	42a6      	cmp	r6, r4
   83cfa:	d010      	beq.n	83d1e <__sprint_r.part.0+0x4e>
   83cfc:	463a      	mov	r2, r7
   83cfe:	f855 1f04 	ldr.w	r1, [r5, #4]!
   83d02:	4640      	mov	r0, r8
   83d04:	f001 f95e 	bl	84fc4 <_fputwc_r>
   83d08:	1c43      	adds	r3, r0, #1
   83d0a:	f104 0401 	add.w	r4, r4, #1
   83d0e:	d1f3      	bne.n	83cf8 <__sprint_r.part.0+0x28>
   83d10:	2300      	movs	r3, #0
   83d12:	f8ca 3008 	str.w	r3, [sl, #8]
   83d16:	f8ca 3004 	str.w	r3, [sl, #4]
   83d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   83d1e:	f8da 3008 	ldr.w	r3, [sl, #8]
   83d22:	eba3 0386 	sub.w	r3, r3, r6, lsl #2
   83d26:	f8ca 3008 	str.w	r3, [sl, #8]
   83d2a:	f109 0908 	add.w	r9, r9, #8
   83d2e:	2b00      	cmp	r3, #0
   83d30:	d1db      	bne.n	83cea <__sprint_r.part.0+0x1a>
   83d32:	2000      	movs	r0, #0
   83d34:	e7ec      	b.n	83d10 <__sprint_r.part.0+0x40>
   83d36:	f001 fa8d 	bl	85254 <__sfvwrite_r>
   83d3a:	2300      	movs	r3, #0
   83d3c:	f8ca 3008 	str.w	r3, [sl, #8]
   83d40:	f8ca 3004 	str.w	r3, [sl, #4]
   83d44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00083d48 <_vfiprintf_r>:
   83d48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   83d4c:	b0ab      	sub	sp, #172	; 0xac
   83d4e:	461c      	mov	r4, r3
   83d50:	9100      	str	r1, [sp, #0]
   83d52:	4690      	mov	r8, r2
   83d54:	9304      	str	r3, [sp, #16]
   83d56:	9005      	str	r0, [sp, #20]
   83d58:	b118      	cbz	r0, 83d62 <_vfiprintf_r+0x1a>
   83d5a:	6b83      	ldr	r3, [r0, #56]	; 0x38
   83d5c:	2b00      	cmp	r3, #0
   83d5e:	f000 80de 	beq.w	83f1e <_vfiprintf_r+0x1d6>
   83d62:	9800      	ldr	r0, [sp, #0]
   83d64:	f9b0 100c 	ldrsh.w	r1, [r0, #12]
   83d68:	b28a      	uxth	r2, r1
   83d6a:	0495      	lsls	r5, r2, #18
   83d6c:	d407      	bmi.n	83d7e <_vfiprintf_r+0x36>
   83d6e:	6e43      	ldr	r3, [r0, #100]	; 0x64
   83d70:	f441 5200 	orr.w	r2, r1, #8192	; 0x2000
   83d74:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   83d78:	8182      	strh	r2, [r0, #12]
   83d7a:	6643      	str	r3, [r0, #100]	; 0x64
   83d7c:	b292      	uxth	r2, r2
   83d7e:	0711      	lsls	r1, r2, #28
   83d80:	f140 80b1 	bpl.w	83ee6 <_vfiprintf_r+0x19e>
   83d84:	9b00      	ldr	r3, [sp, #0]
   83d86:	691b      	ldr	r3, [r3, #16]
   83d88:	2b00      	cmp	r3, #0
   83d8a:	f000 80ac 	beq.w	83ee6 <_vfiprintf_r+0x19e>
   83d8e:	f002 021a 	and.w	r2, r2, #26
   83d92:	2a0a      	cmp	r2, #10
   83d94:	f000 80b5 	beq.w	83f02 <_vfiprintf_r+0x1ba>
   83d98:	f10d 0a68 	add.w	sl, sp, #104	; 0x68
   83d9c:	46d3      	mov	fp, sl
   83d9e:	2300      	movs	r3, #0
   83da0:	9302      	str	r3, [sp, #8]
   83da2:	930f      	str	r3, [sp, #60]	; 0x3c
   83da4:	930e      	str	r3, [sp, #56]	; 0x38
   83da6:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
   83daa:	f898 3000 	ldrb.w	r3, [r8]
   83dae:	4644      	mov	r4, r8
   83db0:	b1fb      	cbz	r3, 83df2 <_vfiprintf_r+0xaa>
   83db2:	2b25      	cmp	r3, #37	; 0x25
   83db4:	d102      	bne.n	83dbc <_vfiprintf_r+0x74>
   83db6:	e01c      	b.n	83df2 <_vfiprintf_r+0xaa>
   83db8:	2b25      	cmp	r3, #37	; 0x25
   83dba:	d003      	beq.n	83dc4 <_vfiprintf_r+0x7c>
   83dbc:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   83dc0:	2b00      	cmp	r3, #0
   83dc2:	d1f9      	bne.n	83db8 <_vfiprintf_r+0x70>
   83dc4:	ebc8 0504 	rsb	r5, r8, r4
   83dc8:	b19d      	cbz	r5, 83df2 <_vfiprintf_r+0xaa>
   83dca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   83dcc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   83dce:	3301      	adds	r3, #1
   83dd0:	442a      	add	r2, r5
   83dd2:	2b07      	cmp	r3, #7
   83dd4:	f8cb 8000 	str.w	r8, [fp]
   83dd8:	f8cb 5004 	str.w	r5, [fp, #4]
   83ddc:	920f      	str	r2, [sp, #60]	; 0x3c
   83dde:	930e      	str	r3, [sp, #56]	; 0x38
   83de0:	dd7b      	ble.n	83eda <_vfiprintf_r+0x192>
   83de2:	2a00      	cmp	r2, #0
   83de4:	f040 851f 	bne.w	84826 <_vfiprintf_r+0xade>
   83de8:	46d3      	mov	fp, sl
   83dea:	9b02      	ldr	r3, [sp, #8]
   83dec:	920e      	str	r2, [sp, #56]	; 0x38
   83dee:	442b      	add	r3, r5
   83df0:	9302      	str	r3, [sp, #8]
   83df2:	7823      	ldrb	r3, [r4, #0]
   83df4:	2b00      	cmp	r3, #0
   83df6:	f000 843b 	beq.w	84670 <_vfiprintf_r+0x928>
   83dfa:	f04f 0300 	mov.w	r3, #0
   83dfe:	2100      	movs	r1, #0
   83e00:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
   83e04:	f104 0801 	add.w	r8, r4, #1
   83e08:	7863      	ldrb	r3, [r4, #1]
   83e0a:	4608      	mov	r0, r1
   83e0c:	460e      	mov	r6, r1
   83e0e:	460c      	mov	r4, r1
   83e10:	f04f 32ff 	mov.w	r2, #4294967295
   83e14:	9201      	str	r2, [sp, #4]
   83e16:	f108 0801 	add.w	r8, r8, #1
   83e1a:	f1a3 0220 	sub.w	r2, r3, #32
   83e1e:	2a58      	cmp	r2, #88	; 0x58
   83e20:	f200 838b 	bhi.w	8453a <_vfiprintf_r+0x7f2>
   83e24:	e8df f012 	tbh	[pc, r2, lsl #1]
   83e28:	0389033d 	.word	0x0389033d
   83e2c:	03450389 	.word	0x03450389
   83e30:	03890389 	.word	0x03890389
   83e34:	03890389 	.word	0x03890389
   83e38:	03890389 	.word	0x03890389
   83e3c:	026b007e 	.word	0x026b007e
   83e40:	00860389 	.word	0x00860389
   83e44:	03890270 	.word	0x03890270
   83e48:	025d01cc 	.word	0x025d01cc
   83e4c:	025d025d 	.word	0x025d025d
   83e50:	025d025d 	.word	0x025d025d
   83e54:	025d025d 	.word	0x025d025d
   83e58:	025d025d 	.word	0x025d025d
   83e5c:	03890389 	.word	0x03890389
   83e60:	03890389 	.word	0x03890389
   83e64:	03890389 	.word	0x03890389
   83e68:	03890389 	.word	0x03890389
   83e6c:	03890389 	.word	0x03890389
   83e70:	038901d1 	.word	0x038901d1
   83e74:	03890389 	.word	0x03890389
   83e78:	03890389 	.word	0x03890389
   83e7c:	03890389 	.word	0x03890389
   83e80:	03890389 	.word	0x03890389
   83e84:	021a0389 	.word	0x021a0389
   83e88:	03890389 	.word	0x03890389
   83e8c:	03890389 	.word	0x03890389
   83e90:	02e50389 	.word	0x02e50389
   83e94:	03890389 	.word	0x03890389
   83e98:	03890308 	.word	0x03890308
   83e9c:	03890389 	.word	0x03890389
   83ea0:	03890389 	.word	0x03890389
   83ea4:	03890389 	.word	0x03890389
   83ea8:	03890389 	.word	0x03890389
   83eac:	032b0389 	.word	0x032b0389
   83eb0:	03890382 	.word	0x03890382
   83eb4:	03890389 	.word	0x03890389
   83eb8:	0382035e 	.word	0x0382035e
   83ebc:	03890389 	.word	0x03890389
   83ec0:	03890363 	.word	0x03890363
   83ec4:	028d0370 	.word	0x028d0370
   83ec8:	02e0008b 	.word	0x02e0008b
   83ecc:	02930389 	.word	0x02930389
   83ed0:	02b20389 	.word	0x02b20389
   83ed4:	03890389 	.word	0x03890389
   83ed8:	034a      	.short	0x034a
   83eda:	f10b 0b08 	add.w	fp, fp, #8
   83ede:	9b02      	ldr	r3, [sp, #8]
   83ee0:	442b      	add	r3, r5
   83ee2:	9302      	str	r3, [sp, #8]
   83ee4:	e785      	b.n	83df2 <_vfiprintf_r+0xaa>
   83ee6:	9900      	ldr	r1, [sp, #0]
   83ee8:	9805      	ldr	r0, [sp, #20]
   83eea:	f000 fe57 	bl	84b9c <__swsetup_r>
   83eee:	2800      	cmp	r0, #0
   83ef0:	f040 8545 	bne.w	8497e <_vfiprintf_r+0xc36>
   83ef4:	9b00      	ldr	r3, [sp, #0]
   83ef6:	899a      	ldrh	r2, [r3, #12]
   83ef8:	f002 021a 	and.w	r2, r2, #26
   83efc:	2a0a      	cmp	r2, #10
   83efe:	f47f af4b 	bne.w	83d98 <_vfiprintf_r+0x50>
   83f02:	9900      	ldr	r1, [sp, #0]
   83f04:	f9b1 300e 	ldrsh.w	r3, [r1, #14]
   83f08:	2b00      	cmp	r3, #0
   83f0a:	f6ff af45 	blt.w	83d98 <_vfiprintf_r+0x50>
   83f0e:	4623      	mov	r3, r4
   83f10:	4642      	mov	r2, r8
   83f12:	9805      	ldr	r0, [sp, #20]
   83f14:	f000 fe0c 	bl	84b30 <__sbprintf>
   83f18:	b02b      	add	sp, #172	; 0xac
   83f1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83f1e:	f000 ffe9 	bl	84ef4 <__sinit>
   83f22:	e71e      	b.n	83d62 <_vfiprintf_r+0x1a>
   83f24:	9a04      	ldr	r2, [sp, #16]
   83f26:	4613      	mov	r3, r2
   83f28:	6814      	ldr	r4, [r2, #0]
   83f2a:	3304      	adds	r3, #4
   83f2c:	2c00      	cmp	r4, #0
   83f2e:	9304      	str	r3, [sp, #16]
   83f30:	da02      	bge.n	83f38 <_vfiprintf_r+0x1f0>
   83f32:	4264      	negs	r4, r4
   83f34:	f046 0604 	orr.w	r6, r6, #4
   83f38:	f898 3000 	ldrb.w	r3, [r8]
   83f3c:	e76b      	b.n	83e16 <_vfiprintf_r+0xce>
   83f3e:	f04f 0300 	mov.w	r3, #0
   83f42:	9804      	ldr	r0, [sp, #16]
   83f44:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
   83f48:	4603      	mov	r3, r0
   83f4a:	2130      	movs	r1, #48	; 0x30
   83f4c:	f88d 1030 	strb.w	r1, [sp, #48]	; 0x30
   83f50:	9901      	ldr	r1, [sp, #4]
   83f52:	2278      	movs	r2, #120	; 0x78
   83f54:	2900      	cmp	r1, #0
   83f56:	9406      	str	r4, [sp, #24]
   83f58:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
   83f5c:	6804      	ldr	r4, [r0, #0]
   83f5e:	f103 0304 	add.w	r3, r3, #4
   83f62:	f04f 0500 	mov.w	r5, #0
   83f66:	f046 0202 	orr.w	r2, r6, #2
   83f6a:	f2c0 850c 	blt.w	84986 <_vfiprintf_r+0xc3e>
   83f6e:	f026 0680 	bic.w	r6, r6, #128	; 0x80
   83f72:	ea54 0205 	orrs.w	r2, r4, r5
   83f76:	f046 0602 	orr.w	r6, r6, #2
   83f7a:	9304      	str	r3, [sp, #16]
   83f7c:	f040 84b5 	bne.w	848ea <_vfiprintf_r+0xba2>
   83f80:	48b3      	ldr	r0, [pc, #716]	; (84250 <_vfiprintf_r+0x508>)
   83f82:	9b01      	ldr	r3, [sp, #4]
   83f84:	2b00      	cmp	r3, #0
   83f86:	f040 8462 	bne.w	8484e <_vfiprintf_r+0xb06>
   83f8a:	4699      	mov	r9, r3
   83f8c:	4657      	mov	r7, sl
   83f8e:	2300      	movs	r3, #0
   83f90:	9301      	str	r3, [sp, #4]
   83f92:	9303      	str	r3, [sp, #12]
   83f94:	9b01      	ldr	r3, [sp, #4]
   83f96:	9a03      	ldr	r2, [sp, #12]
   83f98:	4293      	cmp	r3, r2
   83f9a:	bfb8      	it	lt
   83f9c:	4613      	movlt	r3, r2
   83f9e:	461d      	mov	r5, r3
   83fa0:	f1b9 0f00 	cmp.w	r9, #0
   83fa4:	d000      	beq.n	83fa8 <_vfiprintf_r+0x260>
   83fa6:	3501      	adds	r5, #1
   83fa8:	f016 0302 	ands.w	r3, r6, #2
   83fac:	9307      	str	r3, [sp, #28]
   83fae:	bf18      	it	ne
   83fb0:	3502      	addne	r5, #2
   83fb2:	f016 0384 	ands.w	r3, r6, #132	; 0x84
   83fb6:	9308      	str	r3, [sp, #32]
   83fb8:	f040 82e8 	bne.w	8458c <_vfiprintf_r+0x844>
   83fbc:	9b06      	ldr	r3, [sp, #24]
   83fbe:	1b5c      	subs	r4, r3, r5
   83fc0:	2c00      	cmp	r4, #0
   83fc2:	f340 82e3 	ble.w	8458c <_vfiprintf_r+0x844>
   83fc6:	2c10      	cmp	r4, #16
   83fc8:	f340 853c 	ble.w	84a44 <_vfiprintf_r+0xcfc>
   83fcc:	f8df 9284 	ldr.w	r9, [pc, #644]	; 84254 <_vfiprintf_r+0x50c>
   83fd0:	f8dd e038 	ldr.w	lr, [sp, #56]	; 0x38
   83fd4:	46dc      	mov	ip, fp
   83fd6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   83fd8:	46c3      	mov	fp, r8
   83fda:	2310      	movs	r3, #16
   83fdc:	46a8      	mov	r8, r5
   83fde:	4670      	mov	r0, lr
   83fe0:	464d      	mov	r5, r9
   83fe2:	f8dd 9014 	ldr.w	r9, [sp, #20]
   83fe6:	e007      	b.n	83ff8 <_vfiprintf_r+0x2b0>
   83fe8:	f100 0e02 	add.w	lr, r0, #2
   83fec:	4608      	mov	r0, r1
   83fee:	f10c 0c08 	add.w	ip, ip, #8
   83ff2:	3c10      	subs	r4, #16
   83ff4:	2c10      	cmp	r4, #16
   83ff6:	dd13      	ble.n	84020 <_vfiprintf_r+0x2d8>
   83ff8:	1c41      	adds	r1, r0, #1
   83ffa:	3210      	adds	r2, #16
   83ffc:	2907      	cmp	r1, #7
   83ffe:	920f      	str	r2, [sp, #60]	; 0x3c
   84000:	f8cc 5000 	str.w	r5, [ip]
   84004:	f8cc 3004 	str.w	r3, [ip, #4]
   84008:	910e      	str	r1, [sp, #56]	; 0x38
   8400a:	dded      	ble.n	83fe8 <_vfiprintf_r+0x2a0>
   8400c:	2a00      	cmp	r2, #0
   8400e:	f040 82a5 	bne.w	8455c <_vfiprintf_r+0x814>
   84012:	3c10      	subs	r4, #16
   84014:	2c10      	cmp	r4, #16
   84016:	4610      	mov	r0, r2
   84018:	f04f 0e01 	mov.w	lr, #1
   8401c:	46d4      	mov	ip, sl
   8401e:	dceb      	bgt.n	83ff8 <_vfiprintf_r+0x2b0>
   84020:	46a9      	mov	r9, r5
   84022:	4670      	mov	r0, lr
   84024:	4645      	mov	r5, r8
   84026:	46d8      	mov	r8, fp
   84028:	46e3      	mov	fp, ip
   8402a:	4422      	add	r2, r4
   8402c:	2807      	cmp	r0, #7
   8402e:	920f      	str	r2, [sp, #60]	; 0x3c
   84030:	f8cb 9000 	str.w	r9, [fp]
   84034:	f8cb 4004 	str.w	r4, [fp, #4]
   84038:	900e      	str	r0, [sp, #56]	; 0x38
   8403a:	f300 836d 	bgt.w	84718 <_vfiprintf_r+0x9d0>
   8403e:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
   84042:	f10b 0b08 	add.w	fp, fp, #8
   84046:	f100 0e01 	add.w	lr, r0, #1
   8404a:	2b00      	cmp	r3, #0
   8404c:	f040 82a7 	bne.w	8459e <_vfiprintf_r+0x856>
   84050:	9b07      	ldr	r3, [sp, #28]
   84052:	2b00      	cmp	r3, #0
   84054:	f000 82ba 	beq.w	845cc <_vfiprintf_r+0x884>
   84058:	3202      	adds	r2, #2
   8405a:	a90c      	add	r1, sp, #48	; 0x30
   8405c:	2302      	movs	r3, #2
   8405e:	f1be 0f07 	cmp.w	lr, #7
   84062:	920f      	str	r2, [sp, #60]	; 0x3c
   84064:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
   84068:	e88b 000a 	stmia.w	fp, {r1, r3}
   8406c:	f340 8370 	ble.w	84750 <_vfiprintf_r+0xa08>
   84070:	2a00      	cmp	r2, #0
   84072:	f040 8400 	bne.w	84876 <_vfiprintf_r+0xb2e>
   84076:	9b08      	ldr	r3, [sp, #32]
   84078:	f04f 0e01 	mov.w	lr, #1
   8407c:	2b80      	cmp	r3, #128	; 0x80
   8407e:	4610      	mov	r0, r2
   84080:	46d3      	mov	fp, sl
   84082:	f040 82a7 	bne.w	845d4 <_vfiprintf_r+0x88c>
   84086:	9b06      	ldr	r3, [sp, #24]
   84088:	1b5c      	subs	r4, r3, r5
   8408a:	2c00      	cmp	r4, #0
   8408c:	f340 82a2 	ble.w	845d4 <_vfiprintf_r+0x88c>
   84090:	2c10      	cmp	r4, #16
   84092:	f340 84f8 	ble.w	84a86 <_vfiprintf_r+0xd3e>
   84096:	f8df 91c0 	ldr.w	r9, [pc, #448]	; 84258 <_vfiprintf_r+0x510>
   8409a:	46de      	mov	lr, fp
   8409c:	2310      	movs	r3, #16
   8409e:	46c3      	mov	fp, r8
   840a0:	46a8      	mov	r8, r5
   840a2:	464d      	mov	r5, r9
   840a4:	f8dd 9014 	ldr.w	r9, [sp, #20]
   840a8:	e007      	b.n	840ba <_vfiprintf_r+0x372>
   840aa:	f100 0c02 	add.w	ip, r0, #2
   840ae:	4608      	mov	r0, r1
   840b0:	f10e 0e08 	add.w	lr, lr, #8
   840b4:	3c10      	subs	r4, #16
   840b6:	2c10      	cmp	r4, #16
   840b8:	dd13      	ble.n	840e2 <_vfiprintf_r+0x39a>
   840ba:	1c41      	adds	r1, r0, #1
   840bc:	3210      	adds	r2, #16
   840be:	2907      	cmp	r1, #7
   840c0:	920f      	str	r2, [sp, #60]	; 0x3c
   840c2:	f8ce 5000 	str.w	r5, [lr]
   840c6:	f8ce 3004 	str.w	r3, [lr, #4]
   840ca:	910e      	str	r1, [sp, #56]	; 0x38
   840cc:	dded      	ble.n	840aa <_vfiprintf_r+0x362>
   840ce:	2a00      	cmp	r2, #0
   840d0:	f040 830c 	bne.w	846ec <_vfiprintf_r+0x9a4>
   840d4:	3c10      	subs	r4, #16
   840d6:	2c10      	cmp	r4, #16
   840d8:	f04f 0c01 	mov.w	ip, #1
   840dc:	4610      	mov	r0, r2
   840de:	46d6      	mov	lr, sl
   840e0:	dceb      	bgt.n	840ba <_vfiprintf_r+0x372>
   840e2:	46a9      	mov	r9, r5
   840e4:	4645      	mov	r5, r8
   840e6:	46d8      	mov	r8, fp
   840e8:	46f3      	mov	fp, lr
   840ea:	4422      	add	r2, r4
   840ec:	f1bc 0f07 	cmp.w	ip, #7
   840f0:	920f      	str	r2, [sp, #60]	; 0x3c
   840f2:	f8cb 9000 	str.w	r9, [fp]
   840f6:	f8cb 4004 	str.w	r4, [fp, #4]
   840fa:	f8cd c038 	str.w	ip, [sp, #56]	; 0x38
   840fe:	f300 83c8 	bgt.w	84892 <_vfiprintf_r+0xb4a>
   84102:	9b01      	ldr	r3, [sp, #4]
   84104:	9903      	ldr	r1, [sp, #12]
   84106:	f10b 0b08 	add.w	fp, fp, #8
   8410a:	1a5c      	subs	r4, r3, r1
   8410c:	2c00      	cmp	r4, #0
   8410e:	f10c 0e01 	add.w	lr, ip, #1
   84112:	4660      	mov	r0, ip
   84114:	f300 8264 	bgt.w	845e0 <_vfiprintf_r+0x898>
   84118:	9903      	ldr	r1, [sp, #12]
   8411a:	f1be 0f07 	cmp.w	lr, #7
   8411e:	440a      	add	r2, r1
   84120:	920f      	str	r2, [sp, #60]	; 0x3c
   84122:	f8cb 7000 	str.w	r7, [fp]
   84126:	f8cb 1004 	str.w	r1, [fp, #4]
   8412a:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
   8412e:	f340 82c5 	ble.w	846bc <_vfiprintf_r+0x974>
   84132:	2a00      	cmp	r2, #0
   84134:	f040 8332 	bne.w	8479c <_vfiprintf_r+0xa54>
   84138:	0770      	lsls	r0, r6, #29
   8413a:	920e      	str	r2, [sp, #56]	; 0x38
   8413c:	d538      	bpl.n	841b0 <_vfiprintf_r+0x468>
   8413e:	9b06      	ldr	r3, [sp, #24]
   84140:	1b5c      	subs	r4, r3, r5
   84142:	2c00      	cmp	r4, #0
   84144:	dd34      	ble.n	841b0 <_vfiprintf_r+0x468>
   84146:	46d3      	mov	fp, sl
   84148:	2c10      	cmp	r4, #16
   8414a:	f340 8496 	ble.w	84a7a <_vfiprintf_r+0xd32>
   8414e:	f8df 9104 	ldr.w	r9, [pc, #260]	; 84254 <_vfiprintf_r+0x50c>
   84152:	990e      	ldr	r1, [sp, #56]	; 0x38
   84154:	464f      	mov	r7, r9
   84156:	2610      	movs	r6, #16
   84158:	f8dd 9014 	ldr.w	r9, [sp, #20]
   8415c:	e006      	b.n	8416c <_vfiprintf_r+0x424>
   8415e:	1c88      	adds	r0, r1, #2
   84160:	4619      	mov	r1, r3
   84162:	f10b 0b08 	add.w	fp, fp, #8
   84166:	3c10      	subs	r4, #16
   84168:	2c10      	cmp	r4, #16
   8416a:	dd13      	ble.n	84194 <_vfiprintf_r+0x44c>
   8416c:	1c4b      	adds	r3, r1, #1
   8416e:	3210      	adds	r2, #16
   84170:	2b07      	cmp	r3, #7
   84172:	920f      	str	r2, [sp, #60]	; 0x3c
   84174:	f8cb 7000 	str.w	r7, [fp]
   84178:	f8cb 6004 	str.w	r6, [fp, #4]
   8417c:	930e      	str	r3, [sp, #56]	; 0x38
   8417e:	ddee      	ble.n	8415e <_vfiprintf_r+0x416>
   84180:	2a00      	cmp	r2, #0
   84182:	f040 8285 	bne.w	84690 <_vfiprintf_r+0x948>
   84186:	3c10      	subs	r4, #16
   84188:	2c10      	cmp	r4, #16
   8418a:	f04f 0001 	mov.w	r0, #1
   8418e:	4611      	mov	r1, r2
   84190:	46d3      	mov	fp, sl
   84192:	dceb      	bgt.n	8416c <_vfiprintf_r+0x424>
   84194:	46b9      	mov	r9, r7
   84196:	4422      	add	r2, r4
   84198:	2807      	cmp	r0, #7
   8419a:	920f      	str	r2, [sp, #60]	; 0x3c
   8419c:	f8cb 9000 	str.w	r9, [fp]
   841a0:	f8cb 4004 	str.w	r4, [fp, #4]
   841a4:	900e      	str	r0, [sp, #56]	; 0x38
   841a6:	f340 8292 	ble.w	846ce <_vfiprintf_r+0x986>
   841aa:	2a00      	cmp	r2, #0
   841ac:	f040 840c 	bne.w	849c8 <_vfiprintf_r+0xc80>
   841b0:	9b02      	ldr	r3, [sp, #8]
   841b2:	9a06      	ldr	r2, [sp, #24]
   841b4:	42aa      	cmp	r2, r5
   841b6:	bfac      	ite	ge
   841b8:	189b      	addge	r3, r3, r2
   841ba:	195b      	addlt	r3, r3, r5
   841bc:	9302      	str	r3, [sp, #8]
   841be:	e290      	b.n	846e2 <_vfiprintf_r+0x99a>
   841c0:	f046 0680 	orr.w	r6, r6, #128	; 0x80
   841c4:	f898 3000 	ldrb.w	r3, [r8]
   841c8:	e625      	b.n	83e16 <_vfiprintf_r+0xce>
   841ca:	9406      	str	r4, [sp, #24]
   841cc:	2900      	cmp	r1, #0
   841ce:	f040 8485 	bne.w	84adc <_vfiprintf_r+0xd94>
   841d2:	f046 0610 	orr.w	r6, r6, #16
   841d6:	06b3      	lsls	r3, r6, #26
   841d8:	f140 8304 	bpl.w	847e4 <_vfiprintf_r+0xa9c>
   841dc:	9904      	ldr	r1, [sp, #16]
   841de:	3107      	adds	r1, #7
   841e0:	f021 0107 	bic.w	r1, r1, #7
   841e4:	e9d1 2300 	ldrd	r2, r3, [r1]
   841e8:	4614      	mov	r4, r2
   841ea:	461d      	mov	r5, r3
   841ec:	3108      	adds	r1, #8
   841ee:	9104      	str	r1, [sp, #16]
   841f0:	2a00      	cmp	r2, #0
   841f2:	f173 0300 	sbcs.w	r3, r3, #0
   841f6:	f2c0 837c 	blt.w	848f2 <_vfiprintf_r+0xbaa>
   841fa:	9b01      	ldr	r3, [sp, #4]
   841fc:	f89d 902f 	ldrb.w	r9, [sp, #47]	; 0x2f
   84200:	2b00      	cmp	r3, #0
   84202:	f2c0 830b 	blt.w	8481c <_vfiprintf_r+0xad4>
   84206:	ea54 0305 	orrs.w	r3, r4, r5
   8420a:	f026 0680 	bic.w	r6, r6, #128	; 0x80
   8420e:	f000 80de 	beq.w	843ce <_vfiprintf_r+0x686>
   84212:	2d00      	cmp	r5, #0
   84214:	bf08      	it	eq
   84216:	2c0a      	cmpeq	r4, #10
   84218:	f0c0 80de 	bcc.w	843d8 <_vfiprintf_r+0x690>
   8421c:	4657      	mov	r7, sl
   8421e:	4620      	mov	r0, r4
   84220:	4629      	mov	r1, r5
   84222:	220a      	movs	r2, #10
   84224:	2300      	movs	r3, #0
   84226:	f002 f97d 	bl	86524 <__aeabi_uldivmod>
   8422a:	3230      	adds	r2, #48	; 0x30
   8422c:	f807 2d01 	strb.w	r2, [r7, #-1]!
   84230:	4620      	mov	r0, r4
   84232:	4629      	mov	r1, r5
   84234:	2300      	movs	r3, #0
   84236:	220a      	movs	r2, #10
   84238:	f002 f974 	bl	86524 <__aeabi_uldivmod>
   8423c:	4604      	mov	r4, r0
   8423e:	460d      	mov	r5, r1
   84240:	ea54 0305 	orrs.w	r3, r4, r5
   84244:	d1eb      	bne.n	8421e <_vfiprintf_r+0x4d6>
   84246:	ebc7 030a 	rsb	r3, r7, sl
   8424a:	9303      	str	r3, [sp, #12]
   8424c:	e6a2      	b.n	83f94 <_vfiprintf_r+0x24c>
   8424e:	bf00      	nop
   84250:	000869b4 	.word	0x000869b4
   84254:	000869d0 	.word	0x000869d0
   84258:	00086990 	.word	0x00086990
   8425c:	9406      	str	r4, [sp, #24]
   8425e:	2900      	cmp	r1, #0
   84260:	f040 8438 	bne.w	84ad4 <_vfiprintf_r+0xd8c>
   84264:	f046 0610 	orr.w	r6, r6, #16
   84268:	f016 0320 	ands.w	r3, r6, #32
   8426c:	f000 82a1 	beq.w	847b2 <_vfiprintf_r+0xa6a>
   84270:	f04f 0200 	mov.w	r2, #0
   84274:	9b04      	ldr	r3, [sp, #16]
   84276:	f88d 202f 	strb.w	r2, [sp, #47]	; 0x2f
   8427a:	3307      	adds	r3, #7
   8427c:	f023 0307 	bic.w	r3, r3, #7
   84280:	f103 0208 	add.w	r2, r3, #8
   84284:	e9d3 4500 	ldrd	r4, r5, [r3]
   84288:	9b01      	ldr	r3, [sp, #4]
   8428a:	9204      	str	r2, [sp, #16]
   8428c:	2b00      	cmp	r3, #0
   8428e:	db0a      	blt.n	842a6 <_vfiprintf_r+0x55e>
   84290:	ea54 0305 	orrs.w	r3, r4, r5
   84294:	f026 0680 	bic.w	r6, r6, #128	; 0x80
   84298:	d105      	bne.n	842a6 <_vfiprintf_r+0x55e>
   8429a:	9b01      	ldr	r3, [sp, #4]
   8429c:	2b00      	cmp	r3, #0
   8429e:	f000 8427 	beq.w	84af0 <_vfiprintf_r+0xda8>
   842a2:	2400      	movs	r4, #0
   842a4:	2500      	movs	r5, #0
   842a6:	f04f 0900 	mov.w	r9, #0
   842aa:	4657      	mov	r7, sl
   842ac:	08e2      	lsrs	r2, r4, #3
   842ae:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
   842b2:	08e9      	lsrs	r1, r5, #3
   842b4:	f004 0307 	and.w	r3, r4, #7
   842b8:	460d      	mov	r5, r1
   842ba:	4614      	mov	r4, r2
   842bc:	3330      	adds	r3, #48	; 0x30
   842be:	ea54 0205 	orrs.w	r2, r4, r5
   842c2:	f807 3d01 	strb.w	r3, [r7, #-1]!
   842c6:	d1f1      	bne.n	842ac <_vfiprintf_r+0x564>
   842c8:	07f4      	lsls	r4, r6, #31
   842ca:	d5bc      	bpl.n	84246 <_vfiprintf_r+0x4fe>
   842cc:	2b30      	cmp	r3, #48	; 0x30
   842ce:	d0ba      	beq.n	84246 <_vfiprintf_r+0x4fe>
   842d0:	2230      	movs	r2, #48	; 0x30
   842d2:	1e7b      	subs	r3, r7, #1
   842d4:	f807 2c01 	strb.w	r2, [r7, #-1]
   842d8:	ebc3 020a 	rsb	r2, r3, sl
   842dc:	9203      	str	r2, [sp, #12]
   842de:	461f      	mov	r7, r3
   842e0:	e658      	b.n	83f94 <_vfiprintf_r+0x24c>
   842e2:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   842e6:	2400      	movs	r4, #0
   842e8:	f818 3b01 	ldrb.w	r3, [r8], #1
   842ec:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   842f0:	eb02 0444 	add.w	r4, r2, r4, lsl #1
   842f4:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   842f8:	2a09      	cmp	r2, #9
   842fa:	d9f5      	bls.n	842e8 <_vfiprintf_r+0x5a0>
   842fc:	e58d      	b.n	83e1a <_vfiprintf_r+0xd2>
   842fe:	f898 3000 	ldrb.w	r3, [r8]
   84302:	2101      	movs	r1, #1
   84304:	202b      	movs	r0, #43	; 0x2b
   84306:	e586      	b.n	83e16 <_vfiprintf_r+0xce>
   84308:	f898 3000 	ldrb.w	r3, [r8]
   8430c:	f108 0501 	add.w	r5, r8, #1
   84310:	2b2a      	cmp	r3, #42	; 0x2a
   84312:	f000 83cc 	beq.w	84aae <_vfiprintf_r+0xd66>
   84316:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   8431a:	2a09      	cmp	r2, #9
   8431c:	46a8      	mov	r8, r5
   8431e:	bf98      	it	ls
   84320:	2500      	movls	r5, #0
   84322:	f200 83b5 	bhi.w	84a90 <_vfiprintf_r+0xd48>
   84326:	f818 3b01 	ldrb.w	r3, [r8], #1
   8432a:	eb05 0585 	add.w	r5, r5, r5, lsl #2
   8432e:	eb02 0545 	add.w	r5, r2, r5, lsl #1
   84332:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   84336:	2a09      	cmp	r2, #9
   84338:	d9f5      	bls.n	84326 <_vfiprintf_r+0x5de>
   8433a:	ea45 72e5 	orr.w	r2, r5, r5, asr #31
   8433e:	9201      	str	r2, [sp, #4]
   84340:	e56b      	b.n	83e1a <_vfiprintf_r+0xd2>
   84342:	9406      	str	r4, [sp, #24]
   84344:	2900      	cmp	r1, #0
   84346:	d08f      	beq.n	84268 <_vfiprintf_r+0x520>
   84348:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
   8434c:	e78c      	b.n	84268 <_vfiprintf_r+0x520>
   8434e:	f04f 0300 	mov.w	r3, #0
   84352:	9a04      	ldr	r2, [sp, #16]
   84354:	9406      	str	r4, [sp, #24]
   84356:	6817      	ldr	r7, [r2, #0]
   84358:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
   8435c:	1d14      	adds	r4, r2, #4
   8435e:	9b01      	ldr	r3, [sp, #4]
   84360:	2f00      	cmp	r7, #0
   84362:	f000 837f 	beq.w	84a64 <_vfiprintf_r+0xd1c>
   84366:	2b00      	cmp	r3, #0
   84368:	f2c0 8353 	blt.w	84a12 <_vfiprintf_r+0xcca>
   8436c:	461a      	mov	r2, r3
   8436e:	2100      	movs	r1, #0
   84370:	4638      	mov	r0, r7
   84372:	f001 fc4d 	bl	85c10 <memchr>
   84376:	2800      	cmp	r0, #0
   84378:	f000 838e 	beq.w	84a98 <_vfiprintf_r+0xd50>
   8437c:	1bc3      	subs	r3, r0, r7
   8437e:	9303      	str	r3, [sp, #12]
   84380:	2300      	movs	r3, #0
   84382:	9404      	str	r4, [sp, #16]
   84384:	f89d 902f 	ldrb.w	r9, [sp, #47]	; 0x2f
   84388:	9301      	str	r3, [sp, #4]
   8438a:	e603      	b.n	83f94 <_vfiprintf_r+0x24c>
   8438c:	9406      	str	r4, [sp, #24]
   8438e:	2900      	cmp	r1, #0
   84390:	f040 839d 	bne.w	84ace <_vfiprintf_r+0xd86>
   84394:	f016 0920 	ands.w	r9, r6, #32
   84398:	d134      	bne.n	84404 <_vfiprintf_r+0x6bc>
   8439a:	f016 0310 	ands.w	r3, r6, #16
   8439e:	d103      	bne.n	843a8 <_vfiprintf_r+0x660>
   843a0:	f016 0940 	ands.w	r9, r6, #64	; 0x40
   843a4:	f040 831f 	bne.w	849e6 <_vfiprintf_r+0xc9e>
   843a8:	9a04      	ldr	r2, [sp, #16]
   843aa:	2500      	movs	r5, #0
   843ac:	4613      	mov	r3, r2
   843ae:	6814      	ldr	r4, [r2, #0]
   843b0:	9a01      	ldr	r2, [sp, #4]
   843b2:	f88d 902f 	strb.w	r9, [sp, #47]	; 0x2f
   843b6:	2a00      	cmp	r2, #0
   843b8:	f103 0304 	add.w	r3, r3, #4
   843bc:	f2c0 8327 	blt.w	84a0e <_vfiprintf_r+0xcc6>
   843c0:	ea54 0205 	orrs.w	r2, r4, r5
   843c4:	f026 0680 	bic.w	r6, r6, #128	; 0x80
   843c8:	9304      	str	r3, [sp, #16]
   843ca:	f47f af22 	bne.w	84212 <_vfiprintf_r+0x4ca>
   843ce:	9b01      	ldr	r3, [sp, #4]
   843d0:	2b00      	cmp	r3, #0
   843d2:	f43f addb 	beq.w	83f8c <_vfiprintf_r+0x244>
   843d6:	2400      	movs	r4, #0
   843d8:	af2a      	add	r7, sp, #168	; 0xa8
   843da:	3430      	adds	r4, #48	; 0x30
   843dc:	f807 4d41 	strb.w	r4, [r7, #-65]!
   843e0:	ebc7 030a 	rsb	r3, r7, sl
   843e4:	9303      	str	r3, [sp, #12]
   843e6:	e5d5      	b.n	83f94 <_vfiprintf_r+0x24c>
   843e8:	f046 0620 	orr.w	r6, r6, #32
   843ec:	f898 3000 	ldrb.w	r3, [r8]
   843f0:	e511      	b.n	83e16 <_vfiprintf_r+0xce>
   843f2:	9406      	str	r4, [sp, #24]
   843f4:	2900      	cmp	r1, #0
   843f6:	f040 8375 	bne.w	84ae4 <_vfiprintf_r+0xd9c>
   843fa:	f046 0610 	orr.w	r6, r6, #16
   843fe:	f016 0920 	ands.w	r9, r6, #32
   84402:	d0ca      	beq.n	8439a <_vfiprintf_r+0x652>
   84404:	f04f 0200 	mov.w	r2, #0
   84408:	9b04      	ldr	r3, [sp, #16]
   8440a:	f88d 202f 	strb.w	r2, [sp, #47]	; 0x2f
   8440e:	3307      	adds	r3, #7
   84410:	f023 0307 	bic.w	r3, r3, #7
   84414:	f103 0208 	add.w	r2, r3, #8
   84418:	e9d3 4500 	ldrd	r4, r5, [r3]
   8441c:	9b01      	ldr	r3, [sp, #4]
   8441e:	9204      	str	r2, [sp, #16]
   84420:	2b00      	cmp	r3, #0
   84422:	f2c0 81f9 	blt.w	84818 <_vfiprintf_r+0xad0>
   84426:	ea54 0305 	orrs.w	r3, r4, r5
   8442a:	f026 0680 	bic.w	r6, r6, #128	; 0x80
   8442e:	f04f 0900 	mov.w	r9, #0
   84432:	f47f aeee 	bne.w	84212 <_vfiprintf_r+0x4ca>
   84436:	e7ca      	b.n	843ce <_vfiprintf_r+0x686>
   84438:	9406      	str	r4, [sp, #24]
   8443a:	2900      	cmp	r1, #0
   8443c:	f040 8355 	bne.w	84aea <_vfiprintf_r+0xda2>
   84440:	06b2      	lsls	r2, r6, #26
   84442:	48b2      	ldr	r0, [pc, #712]	; (8470c <_vfiprintf_r+0x9c4>)
   84444:	d541      	bpl.n	844ca <_vfiprintf_r+0x782>
   84446:	9a04      	ldr	r2, [sp, #16]
   84448:	3207      	adds	r2, #7
   8444a:	f022 0207 	bic.w	r2, r2, #7
   8444e:	f102 0108 	add.w	r1, r2, #8
   84452:	9104      	str	r1, [sp, #16]
   84454:	e9d2 4500 	ldrd	r4, r5, [r2]
   84458:	f016 0901 	ands.w	r9, r6, #1
   8445c:	f000 817e 	beq.w	8475c <_vfiprintf_r+0xa14>
   84460:	ea54 0205 	orrs.w	r2, r4, r5
   84464:	f040 822b 	bne.w	848be <_vfiprintf_r+0xb76>
   84468:	f04f 0300 	mov.w	r3, #0
   8446c:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
   84470:	9b01      	ldr	r3, [sp, #4]
   84472:	2b00      	cmp	r3, #0
   84474:	f2c0 82f3 	blt.w	84a5e <_vfiprintf_r+0xd16>
   84478:	f026 0680 	bic.w	r6, r6, #128	; 0x80
   8447c:	e581      	b.n	83f82 <_vfiprintf_r+0x23a>
   8447e:	9a04      	ldr	r2, [sp, #16]
   84480:	f04f 0100 	mov.w	r1, #0
   84484:	6813      	ldr	r3, [r2, #0]
   84486:	2501      	movs	r5, #1
   84488:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
   8448c:	4613      	mov	r3, r2
   8448e:	3304      	adds	r3, #4
   84490:	9406      	str	r4, [sp, #24]
   84492:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
   84496:	9304      	str	r3, [sp, #16]
   84498:	9503      	str	r5, [sp, #12]
   8449a:	af10      	add	r7, sp, #64	; 0x40
   8449c:	2300      	movs	r3, #0
   8449e:	9301      	str	r3, [sp, #4]
   844a0:	e582      	b.n	83fa8 <_vfiprintf_r+0x260>
   844a2:	f898 3000 	ldrb.w	r3, [r8]
   844a6:	2800      	cmp	r0, #0
   844a8:	f47f acb5 	bne.w	83e16 <_vfiprintf_r+0xce>
   844ac:	2101      	movs	r1, #1
   844ae:	2020      	movs	r0, #32
   844b0:	e4b1      	b.n	83e16 <_vfiprintf_r+0xce>
   844b2:	f046 0601 	orr.w	r6, r6, #1
   844b6:	f898 3000 	ldrb.w	r3, [r8]
   844ba:	e4ac      	b.n	83e16 <_vfiprintf_r+0xce>
   844bc:	9406      	str	r4, [sp, #24]
   844be:	2900      	cmp	r1, #0
   844c0:	f040 832a 	bne.w	84b18 <_vfiprintf_r+0xdd0>
   844c4:	06b2      	lsls	r2, r6, #26
   844c6:	4892      	ldr	r0, [pc, #584]	; (84710 <_vfiprintf_r+0x9c8>)
   844c8:	d4bd      	bmi.n	84446 <_vfiprintf_r+0x6fe>
   844ca:	9904      	ldr	r1, [sp, #16]
   844cc:	06f7      	lsls	r7, r6, #27
   844ce:	460a      	mov	r2, r1
   844d0:	f100 819d 	bmi.w	8480e <_vfiprintf_r+0xac6>
   844d4:	0675      	lsls	r5, r6, #25
   844d6:	f140 819a 	bpl.w	8480e <_vfiprintf_r+0xac6>
   844da:	3204      	adds	r2, #4
   844dc:	880c      	ldrh	r4, [r1, #0]
   844de:	9204      	str	r2, [sp, #16]
   844e0:	2500      	movs	r5, #0
   844e2:	e7b9      	b.n	84458 <_vfiprintf_r+0x710>
   844e4:	f046 0640 	orr.w	r6, r6, #64	; 0x40
   844e8:	f898 3000 	ldrb.w	r3, [r8]
   844ec:	e493      	b.n	83e16 <_vfiprintf_r+0xce>
   844ee:	f898 3000 	ldrb.w	r3, [r8]
   844f2:	2b6c      	cmp	r3, #108	; 0x6c
   844f4:	bf03      	ittte	eq
   844f6:	f898 3001 	ldrbeq.w	r3, [r8, #1]
   844fa:	f046 0620 	orreq.w	r6, r6, #32
   844fe:	f108 0801 	addeq.w	r8, r8, #1
   84502:	f046 0610 	orrne.w	r6, r6, #16
   84506:	e486      	b.n	83e16 <_vfiprintf_r+0xce>
   84508:	2900      	cmp	r1, #0
   8450a:	f040 8302 	bne.w	84b12 <_vfiprintf_r+0xdca>
   8450e:	06b4      	lsls	r4, r6, #26
   84510:	f140 8220 	bpl.w	84954 <_vfiprintf_r+0xc0c>
   84514:	9a04      	ldr	r2, [sp, #16]
   84516:	4613      	mov	r3, r2
   84518:	3304      	adds	r3, #4
   8451a:	9304      	str	r3, [sp, #16]
   8451c:	9b02      	ldr	r3, [sp, #8]
   8451e:	6811      	ldr	r1, [r2, #0]
   84520:	17dd      	asrs	r5, r3, #31
   84522:	461a      	mov	r2, r3
   84524:	462b      	mov	r3, r5
   84526:	e9c1 2300 	strd	r2, r3, [r1]
   8452a:	e43e      	b.n	83daa <_vfiprintf_r+0x62>
   8452c:	9406      	str	r4, [sp, #24]
   8452e:	2900      	cmp	r1, #0
   84530:	f43f ae51 	beq.w	841d6 <_vfiprintf_r+0x48e>
   84534:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
   84538:	e64d      	b.n	841d6 <_vfiprintf_r+0x48e>
   8453a:	9406      	str	r4, [sp, #24]
   8453c:	2900      	cmp	r1, #0
   8453e:	f040 82e5 	bne.w	84b0c <_vfiprintf_r+0xdc4>
   84542:	2b00      	cmp	r3, #0
   84544:	f000 8094 	beq.w	84670 <_vfiprintf_r+0x928>
   84548:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
   8454c:	f04f 0300 	mov.w	r3, #0
   84550:	2501      	movs	r5, #1
   84552:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
   84556:	9503      	str	r5, [sp, #12]
   84558:	af10      	add	r7, sp, #64	; 0x40
   8455a:	e79f      	b.n	8449c <_vfiprintf_r+0x754>
   8455c:	aa0d      	add	r2, sp, #52	; 0x34
   8455e:	9900      	ldr	r1, [sp, #0]
   84560:	4648      	mov	r0, r9
   84562:	9309      	str	r3, [sp, #36]	; 0x24
   84564:	f7ff fbb4 	bl	83cd0 <__sprint_r.part.0>
   84568:	2800      	cmp	r0, #0
   8456a:	f040 8088 	bne.w	8467e <_vfiprintf_r+0x936>
   8456e:	980e      	ldr	r0, [sp, #56]	; 0x38
   84570:	46d4      	mov	ip, sl
   84572:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   84574:	f100 0e01 	add.w	lr, r0, #1
   84578:	9b09      	ldr	r3, [sp, #36]	; 0x24
   8457a:	e53a      	b.n	83ff2 <_vfiprintf_r+0x2aa>
   8457c:	aa0d      	add	r2, sp, #52	; 0x34
   8457e:	9900      	ldr	r1, [sp, #0]
   84580:	9805      	ldr	r0, [sp, #20]
   84582:	f7ff fba5 	bl	83cd0 <__sprint_r.part.0>
   84586:	2800      	cmp	r0, #0
   84588:	d179      	bne.n	8467e <_vfiprintf_r+0x936>
   8458a:	46d3      	mov	fp, sl
   8458c:	980e      	ldr	r0, [sp, #56]	; 0x38
   8458e:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
   84592:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   84594:	f100 0e01 	add.w	lr, r0, #1
   84598:	2b00      	cmp	r3, #0
   8459a:	f43f ad59 	beq.w	84050 <_vfiprintf_r+0x308>
   8459e:	3201      	adds	r2, #1
   845a0:	f10d 012f 	add.w	r1, sp, #47	; 0x2f
   845a4:	2301      	movs	r3, #1
   845a6:	f1be 0f07 	cmp.w	lr, #7
   845aa:	920f      	str	r2, [sp, #60]	; 0x3c
   845ac:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
   845b0:	e88b 000a 	stmia.w	fp, {r1, r3}
   845b4:	f340 80c0 	ble.w	84738 <_vfiprintf_r+0x9f0>
   845b8:	2a00      	cmp	r2, #0
   845ba:	f040 814d 	bne.w	84858 <_vfiprintf_r+0xb10>
   845be:	9907      	ldr	r1, [sp, #28]
   845c0:	2900      	cmp	r1, #0
   845c2:	f040 80bf 	bne.w	84744 <_vfiprintf_r+0x9fc>
   845c6:	469e      	mov	lr, r3
   845c8:	4610      	mov	r0, r2
   845ca:	46d3      	mov	fp, sl
   845cc:	9b08      	ldr	r3, [sp, #32]
   845ce:	2b80      	cmp	r3, #128	; 0x80
   845d0:	f43f ad59 	beq.w	84086 <_vfiprintf_r+0x33e>
   845d4:	9b01      	ldr	r3, [sp, #4]
   845d6:	9903      	ldr	r1, [sp, #12]
   845d8:	1a5c      	subs	r4, r3, r1
   845da:	2c00      	cmp	r4, #0
   845dc:	f77f ad9c 	ble.w	84118 <_vfiprintf_r+0x3d0>
   845e0:	2c10      	cmp	r4, #16
   845e2:	f8df 9130 	ldr.w	r9, [pc, #304]	; 84714 <_vfiprintf_r+0x9cc>
   845e6:	dd25      	ble.n	84634 <_vfiprintf_r+0x8ec>
   845e8:	46dc      	mov	ip, fp
   845ea:	2310      	movs	r3, #16
   845ec:	46c3      	mov	fp, r8
   845ee:	46a8      	mov	r8, r5
   845f0:	464d      	mov	r5, r9
   845f2:	f8dd 9014 	ldr.w	r9, [sp, #20]
   845f6:	e007      	b.n	84608 <_vfiprintf_r+0x8c0>
   845f8:	f100 0e02 	add.w	lr, r0, #2
   845fc:	4608      	mov	r0, r1
   845fe:	f10c 0c08 	add.w	ip, ip, #8
   84602:	3c10      	subs	r4, #16
   84604:	2c10      	cmp	r4, #16
   84606:	dd11      	ble.n	8462c <_vfiprintf_r+0x8e4>
   84608:	1c41      	adds	r1, r0, #1
   8460a:	3210      	adds	r2, #16
   8460c:	2907      	cmp	r1, #7
   8460e:	920f      	str	r2, [sp, #60]	; 0x3c
   84610:	f8cc 5000 	str.w	r5, [ip]
   84614:	f8cc 3004 	str.w	r3, [ip, #4]
   84618:	910e      	str	r1, [sp, #56]	; 0x38
   8461a:	dded      	ble.n	845f8 <_vfiprintf_r+0x8b0>
   8461c:	b9d2      	cbnz	r2, 84654 <_vfiprintf_r+0x90c>
   8461e:	3c10      	subs	r4, #16
   84620:	2c10      	cmp	r4, #16
   84622:	f04f 0e01 	mov.w	lr, #1
   84626:	4610      	mov	r0, r2
   84628:	46d4      	mov	ip, sl
   8462a:	dced      	bgt.n	84608 <_vfiprintf_r+0x8c0>
   8462c:	46a9      	mov	r9, r5
   8462e:	4645      	mov	r5, r8
   84630:	46d8      	mov	r8, fp
   84632:	46e3      	mov	fp, ip
   84634:	4422      	add	r2, r4
   84636:	f1be 0f07 	cmp.w	lr, #7
   8463a:	920f      	str	r2, [sp, #60]	; 0x3c
   8463c:	f8cb 9000 	str.w	r9, [fp]
   84640:	f8cb 4004 	str.w	r4, [fp, #4]
   84644:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
   84648:	dc2e      	bgt.n	846a8 <_vfiprintf_r+0x960>
   8464a:	f10b 0b08 	add.w	fp, fp, #8
   8464e:	f10e 0e01 	add.w	lr, lr, #1
   84652:	e561      	b.n	84118 <_vfiprintf_r+0x3d0>
   84654:	aa0d      	add	r2, sp, #52	; 0x34
   84656:	9900      	ldr	r1, [sp, #0]
   84658:	4648      	mov	r0, r9
   8465a:	9301      	str	r3, [sp, #4]
   8465c:	f7ff fb38 	bl	83cd0 <__sprint_r.part.0>
   84660:	b968      	cbnz	r0, 8467e <_vfiprintf_r+0x936>
   84662:	980e      	ldr	r0, [sp, #56]	; 0x38
   84664:	46d4      	mov	ip, sl
   84666:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   84668:	f100 0e01 	add.w	lr, r0, #1
   8466c:	9b01      	ldr	r3, [sp, #4]
   8466e:	e7c8      	b.n	84602 <_vfiprintf_r+0x8ba>
   84670:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   84672:	b123      	cbz	r3, 8467e <_vfiprintf_r+0x936>
   84674:	9805      	ldr	r0, [sp, #20]
   84676:	aa0d      	add	r2, sp, #52	; 0x34
   84678:	9900      	ldr	r1, [sp, #0]
   8467a:	f7ff fb29 	bl	83cd0 <__sprint_r.part.0>
   8467e:	9b00      	ldr	r3, [sp, #0]
   84680:	899b      	ldrh	r3, [r3, #12]
   84682:	065a      	lsls	r2, r3, #25
   84684:	f100 817b 	bmi.w	8497e <_vfiprintf_r+0xc36>
   84688:	9802      	ldr	r0, [sp, #8]
   8468a:	b02b      	add	sp, #172	; 0xac
   8468c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   84690:	aa0d      	add	r2, sp, #52	; 0x34
   84692:	9900      	ldr	r1, [sp, #0]
   84694:	4648      	mov	r0, r9
   84696:	f7ff fb1b 	bl	83cd0 <__sprint_r.part.0>
   8469a:	2800      	cmp	r0, #0
   8469c:	d1ef      	bne.n	8467e <_vfiprintf_r+0x936>
   8469e:	990e      	ldr	r1, [sp, #56]	; 0x38
   846a0:	46d3      	mov	fp, sl
   846a2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   846a4:	1c48      	adds	r0, r1, #1
   846a6:	e55e      	b.n	84166 <_vfiprintf_r+0x41e>
   846a8:	2a00      	cmp	r2, #0
   846aa:	f040 80fa 	bne.w	848a2 <_vfiprintf_r+0xb5a>
   846ae:	46d3      	mov	fp, sl
   846b0:	9a03      	ldr	r2, [sp, #12]
   846b2:	2301      	movs	r3, #1
   846b4:	921b      	str	r2, [sp, #108]	; 0x6c
   846b6:	920f      	str	r2, [sp, #60]	; 0x3c
   846b8:	971a      	str	r7, [sp, #104]	; 0x68
   846ba:	930e      	str	r3, [sp, #56]	; 0x38
   846bc:	f10b 0b08 	add.w	fp, fp, #8
   846c0:	0771      	lsls	r1, r6, #29
   846c2:	d504      	bpl.n	846ce <_vfiprintf_r+0x986>
   846c4:	9b06      	ldr	r3, [sp, #24]
   846c6:	1b5c      	subs	r4, r3, r5
   846c8:	2c00      	cmp	r4, #0
   846ca:	f73f ad3d 	bgt.w	84148 <_vfiprintf_r+0x400>
   846ce:	9b02      	ldr	r3, [sp, #8]
   846d0:	9906      	ldr	r1, [sp, #24]
   846d2:	42a9      	cmp	r1, r5
   846d4:	bfac      	ite	ge
   846d6:	185b      	addge	r3, r3, r1
   846d8:	195b      	addlt	r3, r3, r5
   846da:	9302      	str	r3, [sp, #8]
   846dc:	2a00      	cmp	r2, #0
   846de:	f040 80ad 	bne.w	8483c <_vfiprintf_r+0xaf4>
   846e2:	2300      	movs	r3, #0
   846e4:	930e      	str	r3, [sp, #56]	; 0x38
   846e6:	46d3      	mov	fp, sl
   846e8:	f7ff bb5f 	b.w	83daa <_vfiprintf_r+0x62>
   846ec:	aa0d      	add	r2, sp, #52	; 0x34
   846ee:	9900      	ldr	r1, [sp, #0]
   846f0:	4648      	mov	r0, r9
   846f2:	9307      	str	r3, [sp, #28]
   846f4:	f7ff faec 	bl	83cd0 <__sprint_r.part.0>
   846f8:	2800      	cmp	r0, #0
   846fa:	d1c0      	bne.n	8467e <_vfiprintf_r+0x936>
   846fc:	980e      	ldr	r0, [sp, #56]	; 0x38
   846fe:	46d6      	mov	lr, sl
   84700:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   84702:	f100 0c01 	add.w	ip, r0, #1
   84706:	9b07      	ldr	r3, [sp, #28]
   84708:	e4d4      	b.n	840b4 <_vfiprintf_r+0x36c>
   8470a:	bf00      	nop
   8470c:	000869a0 	.word	0x000869a0
   84710:	000869b4 	.word	0x000869b4
   84714:	00086990 	.word	0x00086990
   84718:	2a00      	cmp	r2, #0
   8471a:	f47f af2f 	bne.w	8457c <_vfiprintf_r+0x834>
   8471e:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
   84722:	2b00      	cmp	r3, #0
   84724:	f000 80f3 	beq.w	8490e <_vfiprintf_r+0xbc6>
   84728:	2301      	movs	r3, #1
   8472a:	461a      	mov	r2, r3
   8472c:	469e      	mov	lr, r3
   8472e:	46d3      	mov	fp, sl
   84730:	f10d 012f 	add.w	r1, sp, #47	; 0x2f
   84734:	931b      	str	r3, [sp, #108]	; 0x6c
   84736:	911a      	str	r1, [sp, #104]	; 0x68
   84738:	4670      	mov	r0, lr
   8473a:	f10b 0b08 	add.w	fp, fp, #8
   8473e:	f10e 0e01 	add.w	lr, lr, #1
   84742:	e485      	b.n	84050 <_vfiprintf_r+0x308>
   84744:	469e      	mov	lr, r3
   84746:	46d3      	mov	fp, sl
   84748:	a90c      	add	r1, sp, #48	; 0x30
   8474a:	2202      	movs	r2, #2
   8474c:	911a      	str	r1, [sp, #104]	; 0x68
   8474e:	921b      	str	r2, [sp, #108]	; 0x6c
   84750:	4670      	mov	r0, lr
   84752:	f10b 0b08 	add.w	fp, fp, #8
   84756:	f10e 0e01 	add.w	lr, lr, #1
   8475a:	e737      	b.n	845cc <_vfiprintf_r+0x884>
   8475c:	9b01      	ldr	r3, [sp, #4]
   8475e:	f88d 902f 	strb.w	r9, [sp, #47]	; 0x2f
   84762:	2b00      	cmp	r3, #0
   84764:	f2c0 811b 	blt.w	8499e <_vfiprintf_r+0xc56>
   84768:	ea54 0305 	orrs.w	r3, r4, r5
   8476c:	f026 0680 	bic.w	r6, r6, #128	; 0x80
   84770:	f43f ac07 	beq.w	83f82 <_vfiprintf_r+0x23a>
   84774:	4657      	mov	r7, sl
   84776:	0923      	lsrs	r3, r4, #4
   84778:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
   8477c:	0929      	lsrs	r1, r5, #4
   8477e:	f004 020f 	and.w	r2, r4, #15
   84782:	460d      	mov	r5, r1
   84784:	461c      	mov	r4, r3
   84786:	5c83      	ldrb	r3, [r0, r2]
   84788:	f807 3d01 	strb.w	r3, [r7, #-1]!
   8478c:	ea54 0305 	orrs.w	r3, r4, r5
   84790:	d1f1      	bne.n	84776 <_vfiprintf_r+0xa2e>
   84792:	ebc7 030a 	rsb	r3, r7, sl
   84796:	9303      	str	r3, [sp, #12]
   84798:	f7ff bbfc 	b.w	83f94 <_vfiprintf_r+0x24c>
   8479c:	aa0d      	add	r2, sp, #52	; 0x34
   8479e:	9900      	ldr	r1, [sp, #0]
   847a0:	9805      	ldr	r0, [sp, #20]
   847a2:	f7ff fa95 	bl	83cd0 <__sprint_r.part.0>
   847a6:	2800      	cmp	r0, #0
   847a8:	f47f af69 	bne.w	8467e <_vfiprintf_r+0x936>
   847ac:	46d3      	mov	fp, sl
   847ae:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   847b0:	e786      	b.n	846c0 <_vfiprintf_r+0x978>
   847b2:	f016 0210 	ands.w	r2, r6, #16
   847b6:	f000 80b5 	beq.w	84924 <_vfiprintf_r+0xbdc>
   847ba:	9904      	ldr	r1, [sp, #16]
   847bc:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
   847c0:	460a      	mov	r2, r1
   847c2:	680c      	ldr	r4, [r1, #0]
   847c4:	9901      	ldr	r1, [sp, #4]
   847c6:	3204      	adds	r2, #4
   847c8:	2900      	cmp	r1, #0
   847ca:	f04f 0500 	mov.w	r5, #0
   847ce:	f2c0 8152 	blt.w	84a76 <_vfiprintf_r+0xd2e>
   847d2:	ea54 0105 	orrs.w	r1, r4, r5
   847d6:	f026 0680 	bic.w	r6, r6, #128	; 0x80
   847da:	9204      	str	r2, [sp, #16]
   847dc:	f43f ad5d 	beq.w	8429a <_vfiprintf_r+0x552>
   847e0:	4699      	mov	r9, r3
   847e2:	e562      	b.n	842aa <_vfiprintf_r+0x562>
   847e4:	9a04      	ldr	r2, [sp, #16]
   847e6:	06f7      	lsls	r7, r6, #27
   847e8:	4613      	mov	r3, r2
   847ea:	d409      	bmi.n	84800 <_vfiprintf_r+0xab8>
   847ec:	0675      	lsls	r5, r6, #25
   847ee:	d507      	bpl.n	84800 <_vfiprintf_r+0xab8>
   847f0:	f9b2 4000 	ldrsh.w	r4, [r2]
   847f4:	3304      	adds	r3, #4
   847f6:	17e5      	asrs	r5, r4, #31
   847f8:	9304      	str	r3, [sp, #16]
   847fa:	4622      	mov	r2, r4
   847fc:	462b      	mov	r3, r5
   847fe:	e4f7      	b.n	841f0 <_vfiprintf_r+0x4a8>
   84800:	681c      	ldr	r4, [r3, #0]
   84802:	3304      	adds	r3, #4
   84804:	17e5      	asrs	r5, r4, #31
   84806:	9304      	str	r3, [sp, #16]
   84808:	4622      	mov	r2, r4
   8480a:	462b      	mov	r3, r5
   8480c:	e4f0      	b.n	841f0 <_vfiprintf_r+0x4a8>
   8480e:	6814      	ldr	r4, [r2, #0]
   84810:	3204      	adds	r2, #4
   84812:	9204      	str	r2, [sp, #16]
   84814:	2500      	movs	r5, #0
   84816:	e61f      	b.n	84458 <_vfiprintf_r+0x710>
   84818:	f04f 0900 	mov.w	r9, #0
   8481c:	ea54 0305 	orrs.w	r3, r4, r5
   84820:	f47f acf7 	bne.w	84212 <_vfiprintf_r+0x4ca>
   84824:	e5d8      	b.n	843d8 <_vfiprintf_r+0x690>
   84826:	aa0d      	add	r2, sp, #52	; 0x34
   84828:	9900      	ldr	r1, [sp, #0]
   8482a:	9805      	ldr	r0, [sp, #20]
   8482c:	f7ff fa50 	bl	83cd0 <__sprint_r.part.0>
   84830:	2800      	cmp	r0, #0
   84832:	f47f af24 	bne.w	8467e <_vfiprintf_r+0x936>
   84836:	46d3      	mov	fp, sl
   84838:	f7ff bb51 	b.w	83ede <_vfiprintf_r+0x196>
   8483c:	aa0d      	add	r2, sp, #52	; 0x34
   8483e:	9900      	ldr	r1, [sp, #0]
   84840:	9805      	ldr	r0, [sp, #20]
   84842:	f7ff fa45 	bl	83cd0 <__sprint_r.part.0>
   84846:	2800      	cmp	r0, #0
   84848:	f43f af4b 	beq.w	846e2 <_vfiprintf_r+0x99a>
   8484c:	e717      	b.n	8467e <_vfiprintf_r+0x936>
   8484e:	2400      	movs	r4, #0
   84850:	2500      	movs	r5, #0
   84852:	f04f 0900 	mov.w	r9, #0
   84856:	e78d      	b.n	84774 <_vfiprintf_r+0xa2c>
   84858:	aa0d      	add	r2, sp, #52	; 0x34
   8485a:	9900      	ldr	r1, [sp, #0]
   8485c:	9805      	ldr	r0, [sp, #20]
   8485e:	f7ff fa37 	bl	83cd0 <__sprint_r.part.0>
   84862:	2800      	cmp	r0, #0
   84864:	f47f af0b 	bne.w	8467e <_vfiprintf_r+0x936>
   84868:	980e      	ldr	r0, [sp, #56]	; 0x38
   8486a:	46d3      	mov	fp, sl
   8486c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   8486e:	f100 0e01 	add.w	lr, r0, #1
   84872:	f7ff bbed 	b.w	84050 <_vfiprintf_r+0x308>
   84876:	aa0d      	add	r2, sp, #52	; 0x34
   84878:	9900      	ldr	r1, [sp, #0]
   8487a:	9805      	ldr	r0, [sp, #20]
   8487c:	f7ff fa28 	bl	83cd0 <__sprint_r.part.0>
   84880:	2800      	cmp	r0, #0
   84882:	f47f aefc 	bne.w	8467e <_vfiprintf_r+0x936>
   84886:	980e      	ldr	r0, [sp, #56]	; 0x38
   84888:	46d3      	mov	fp, sl
   8488a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   8488c:	f100 0e01 	add.w	lr, r0, #1
   84890:	e69c      	b.n	845cc <_vfiprintf_r+0x884>
   84892:	2a00      	cmp	r2, #0
   84894:	f040 80c8 	bne.w	84a28 <_vfiprintf_r+0xce0>
   84898:	f04f 0e01 	mov.w	lr, #1
   8489c:	4610      	mov	r0, r2
   8489e:	46d3      	mov	fp, sl
   848a0:	e698      	b.n	845d4 <_vfiprintf_r+0x88c>
   848a2:	aa0d      	add	r2, sp, #52	; 0x34
   848a4:	9900      	ldr	r1, [sp, #0]
   848a6:	9805      	ldr	r0, [sp, #20]
   848a8:	f7ff fa12 	bl	83cd0 <__sprint_r.part.0>
   848ac:	2800      	cmp	r0, #0
   848ae:	f47f aee6 	bne.w	8467e <_vfiprintf_r+0x936>
   848b2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   848b4:	46d3      	mov	fp, sl
   848b6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   848b8:	f103 0e01 	add.w	lr, r3, #1
   848bc:	e42c      	b.n	84118 <_vfiprintf_r+0x3d0>
   848be:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
   848c2:	f04f 0300 	mov.w	r3, #0
   848c6:	2230      	movs	r2, #48	; 0x30
   848c8:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
   848cc:	9a01      	ldr	r2, [sp, #4]
   848ce:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
   848d2:	2a00      	cmp	r2, #0
   848d4:	f046 0302 	orr.w	r3, r6, #2
   848d8:	f2c0 80bb 	blt.w	84a52 <_vfiprintf_r+0xd0a>
   848dc:	f026 0680 	bic.w	r6, r6, #128	; 0x80
   848e0:	f046 0602 	orr.w	r6, r6, #2
   848e4:	f04f 0900 	mov.w	r9, #0
   848e8:	e744      	b.n	84774 <_vfiprintf_r+0xa2c>
   848ea:	f04f 0900 	mov.w	r9, #0
   848ee:	488c      	ldr	r0, [pc, #560]	; (84b20 <_vfiprintf_r+0xdd8>)
   848f0:	e740      	b.n	84774 <_vfiprintf_r+0xa2c>
   848f2:	9b01      	ldr	r3, [sp, #4]
   848f4:	4264      	negs	r4, r4
   848f6:	f04f 092d 	mov.w	r9, #45	; 0x2d
   848fa:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
   848fe:	2b00      	cmp	r3, #0
   84900:	f88d 902f 	strb.w	r9, [sp, #47]	; 0x2f
   84904:	f6ff ac85 	blt.w	84212 <_vfiprintf_r+0x4ca>
   84908:	f026 0680 	bic.w	r6, r6, #128	; 0x80
   8490c:	e481      	b.n	84212 <_vfiprintf_r+0x4ca>
   8490e:	9b07      	ldr	r3, [sp, #28]
   84910:	2b00      	cmp	r3, #0
   84912:	d063      	beq.n	849dc <_vfiprintf_r+0xc94>
   84914:	ab0c      	add	r3, sp, #48	; 0x30
   84916:	2202      	movs	r2, #2
   84918:	931a      	str	r3, [sp, #104]	; 0x68
   8491a:	921b      	str	r2, [sp, #108]	; 0x6c
   8491c:	f04f 0e01 	mov.w	lr, #1
   84920:	46d3      	mov	fp, sl
   84922:	e715      	b.n	84750 <_vfiprintf_r+0xa08>
   84924:	f016 0940 	ands.w	r9, r6, #64	; 0x40
   84928:	d03b      	beq.n	849a2 <_vfiprintf_r+0xc5a>
   8492a:	9904      	ldr	r1, [sp, #16]
   8492c:	f88d 202f 	strb.w	r2, [sp, #47]	; 0x2f
   84930:	460b      	mov	r3, r1
   84932:	880c      	ldrh	r4, [r1, #0]
   84934:	9901      	ldr	r1, [sp, #4]
   84936:	3304      	adds	r3, #4
   84938:	2900      	cmp	r1, #0
   8493a:	f04f 0500 	mov.w	r5, #0
   8493e:	f2c0 808c 	blt.w	84a5a <_vfiprintf_r+0xd12>
   84942:	ea54 0105 	orrs.w	r1, r4, r5
   84946:	f026 0680 	bic.w	r6, r6, #128	; 0x80
   8494a:	9304      	str	r3, [sp, #16]
   8494c:	f43f aca5 	beq.w	8429a <_vfiprintf_r+0x552>
   84950:	4691      	mov	r9, r2
   84952:	e4aa      	b.n	842aa <_vfiprintf_r+0x562>
   84954:	06f0      	lsls	r0, r6, #27
   84956:	d40a      	bmi.n	8496e <_vfiprintf_r+0xc26>
   84958:	0671      	lsls	r1, r6, #25
   8495a:	d508      	bpl.n	8496e <_vfiprintf_r+0xc26>
   8495c:	9a04      	ldr	r2, [sp, #16]
   8495e:	6813      	ldr	r3, [r2, #0]
   84960:	3204      	adds	r2, #4
   84962:	9204      	str	r2, [sp, #16]
   84964:	f8bd 2008 	ldrh.w	r2, [sp, #8]
   84968:	801a      	strh	r2, [r3, #0]
   8496a:	f7ff ba1e 	b.w	83daa <_vfiprintf_r+0x62>
   8496e:	9a04      	ldr	r2, [sp, #16]
   84970:	6813      	ldr	r3, [r2, #0]
   84972:	3204      	adds	r2, #4
   84974:	9204      	str	r2, [sp, #16]
   84976:	9a02      	ldr	r2, [sp, #8]
   84978:	601a      	str	r2, [r3, #0]
   8497a:	f7ff ba16 	b.w	83daa <_vfiprintf_r+0x62>
   8497e:	f04f 30ff 	mov.w	r0, #4294967295
   84982:	f7ff bac9 	b.w	83f18 <_vfiprintf_r+0x1d0>
   84986:	4616      	mov	r6, r2
   84988:	4865      	ldr	r0, [pc, #404]	; (84b20 <_vfiprintf_r+0xdd8>)
   8498a:	ea54 0205 	orrs.w	r2, r4, r5
   8498e:	9304      	str	r3, [sp, #16]
   84990:	f04f 0900 	mov.w	r9, #0
   84994:	f47f aeee 	bne.w	84774 <_vfiprintf_r+0xa2c>
   84998:	2400      	movs	r4, #0
   8499a:	2500      	movs	r5, #0
   8499c:	e6ea      	b.n	84774 <_vfiprintf_r+0xa2c>
   8499e:	9b04      	ldr	r3, [sp, #16]
   849a0:	e7f3      	b.n	8498a <_vfiprintf_r+0xc42>
   849a2:	9a04      	ldr	r2, [sp, #16]
   849a4:	f88d 902f 	strb.w	r9, [sp, #47]	; 0x2f
   849a8:	4613      	mov	r3, r2
   849aa:	6814      	ldr	r4, [r2, #0]
   849ac:	9a01      	ldr	r2, [sp, #4]
   849ae:	3304      	adds	r3, #4
   849b0:	2a00      	cmp	r2, #0
   849b2:	f04f 0500 	mov.w	r5, #0
   849b6:	db50      	blt.n	84a5a <_vfiprintf_r+0xd12>
   849b8:	ea54 0205 	orrs.w	r2, r4, r5
   849bc:	f026 0680 	bic.w	r6, r6, #128	; 0x80
   849c0:	9304      	str	r3, [sp, #16]
   849c2:	f47f ac72 	bne.w	842aa <_vfiprintf_r+0x562>
   849c6:	e468      	b.n	8429a <_vfiprintf_r+0x552>
   849c8:	aa0d      	add	r2, sp, #52	; 0x34
   849ca:	9900      	ldr	r1, [sp, #0]
   849cc:	9805      	ldr	r0, [sp, #20]
   849ce:	f7ff f97f 	bl	83cd0 <__sprint_r.part.0>
   849d2:	2800      	cmp	r0, #0
   849d4:	f47f ae53 	bne.w	8467e <_vfiprintf_r+0x936>
   849d8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   849da:	e678      	b.n	846ce <_vfiprintf_r+0x986>
   849dc:	4610      	mov	r0, r2
   849de:	f04f 0e01 	mov.w	lr, #1
   849e2:	46d3      	mov	fp, sl
   849e4:	e5f6      	b.n	845d4 <_vfiprintf_r+0x88c>
   849e6:	9904      	ldr	r1, [sp, #16]
   849e8:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
   849ec:	460a      	mov	r2, r1
   849ee:	880c      	ldrh	r4, [r1, #0]
   849f0:	9901      	ldr	r1, [sp, #4]
   849f2:	3204      	adds	r2, #4
   849f4:	2900      	cmp	r1, #0
   849f6:	f04f 0500 	mov.w	r5, #0
   849fa:	db55      	blt.n	84aa8 <_vfiprintf_r+0xd60>
   849fc:	ea54 0105 	orrs.w	r1, r4, r5
   84a00:	f026 0680 	bic.w	r6, r6, #128	; 0x80
   84a04:	9204      	str	r2, [sp, #16]
   84a06:	4699      	mov	r9, r3
   84a08:	f47f ac03 	bne.w	84212 <_vfiprintf_r+0x4ca>
   84a0c:	e4df      	b.n	843ce <_vfiprintf_r+0x686>
   84a0e:	9304      	str	r3, [sp, #16]
   84a10:	e704      	b.n	8481c <_vfiprintf_r+0xad4>
   84a12:	4638      	mov	r0, r7
   84a14:	9404      	str	r4, [sp, #16]
   84a16:	f7ff f8f9 	bl	83c0c <strlen>
   84a1a:	2300      	movs	r3, #0
   84a1c:	9003      	str	r0, [sp, #12]
   84a1e:	f89d 902f 	ldrb.w	r9, [sp, #47]	; 0x2f
   84a22:	9301      	str	r3, [sp, #4]
   84a24:	f7ff bab6 	b.w	83f94 <_vfiprintf_r+0x24c>
   84a28:	aa0d      	add	r2, sp, #52	; 0x34
   84a2a:	9900      	ldr	r1, [sp, #0]
   84a2c:	9805      	ldr	r0, [sp, #20]
   84a2e:	f7ff f94f 	bl	83cd0 <__sprint_r.part.0>
   84a32:	2800      	cmp	r0, #0
   84a34:	f47f ae23 	bne.w	8467e <_vfiprintf_r+0x936>
   84a38:	980e      	ldr	r0, [sp, #56]	; 0x38
   84a3a:	46d3      	mov	fp, sl
   84a3c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   84a3e:	f100 0e01 	add.w	lr, r0, #1
   84a42:	e5c7      	b.n	845d4 <_vfiprintf_r+0x88c>
   84a44:	980e      	ldr	r0, [sp, #56]	; 0x38
   84a46:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   84a48:	3001      	adds	r0, #1
   84a4a:	f8df 90dc 	ldr.w	r9, [pc, #220]	; 84b28 <_vfiprintf_r+0xde0>
   84a4e:	f7ff baec 	b.w	8402a <_vfiprintf_r+0x2e2>
   84a52:	461e      	mov	r6, r3
   84a54:	f04f 0900 	mov.w	r9, #0
   84a58:	e68c      	b.n	84774 <_vfiprintf_r+0xa2c>
   84a5a:	9304      	str	r3, [sp, #16]
   84a5c:	e423      	b.n	842a6 <_vfiprintf_r+0x55e>
   84a5e:	f04f 0900 	mov.w	r9, #0
   84a62:	e799      	b.n	84998 <_vfiprintf_r+0xc50>
   84a64:	2b06      	cmp	r3, #6
   84a66:	bf28      	it	cs
   84a68:	2306      	movcs	r3, #6
   84a6a:	9303      	str	r3, [sp, #12]
   84a6c:	9404      	str	r4, [sp, #16]
   84a6e:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
   84a72:	4f2c      	ldr	r7, [pc, #176]	; (84b24 <_vfiprintf_r+0xddc>)
   84a74:	e512      	b.n	8449c <_vfiprintf_r+0x754>
   84a76:	9204      	str	r2, [sp, #16]
   84a78:	e415      	b.n	842a6 <_vfiprintf_r+0x55e>
   84a7a:	980e      	ldr	r0, [sp, #56]	; 0x38
   84a7c:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 84b28 <_vfiprintf_r+0xde0>
   84a80:	3001      	adds	r0, #1
   84a82:	f7ff bb88 	b.w	84196 <_vfiprintf_r+0x44e>
   84a86:	46f4      	mov	ip, lr
   84a88:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 84b2c <_vfiprintf_r+0xde4>
   84a8c:	f7ff bb2d 	b.w	840ea <_vfiprintf_r+0x3a2>
   84a90:	2200      	movs	r2, #0
   84a92:	9201      	str	r2, [sp, #4]
   84a94:	f7ff b9c1 	b.w	83e1a <_vfiprintf_r+0xd2>
   84a98:	9b01      	ldr	r3, [sp, #4]
   84a9a:	9404      	str	r4, [sp, #16]
   84a9c:	9303      	str	r3, [sp, #12]
   84a9e:	9001      	str	r0, [sp, #4]
   84aa0:	f89d 902f 	ldrb.w	r9, [sp, #47]	; 0x2f
   84aa4:	f7ff ba76 	b.w	83f94 <_vfiprintf_r+0x24c>
   84aa8:	9204      	str	r2, [sp, #16]
   84aaa:	4699      	mov	r9, r3
   84aac:	e6b6      	b.n	8481c <_vfiprintf_r+0xad4>
   84aae:	9a04      	ldr	r2, [sp, #16]
   84ab0:	6813      	ldr	r3, [r2, #0]
   84ab2:	3204      	adds	r2, #4
   84ab4:	2b00      	cmp	r3, #0
   84ab6:	9301      	str	r3, [sp, #4]
   84ab8:	9204      	str	r2, [sp, #16]
   84aba:	f898 3001 	ldrb.w	r3, [r8, #1]
   84abe:	46a8      	mov	r8, r5
   84ac0:	f6bf a9a9 	bge.w	83e16 <_vfiprintf_r+0xce>
   84ac4:	f04f 32ff 	mov.w	r2, #4294967295
   84ac8:	9201      	str	r2, [sp, #4]
   84aca:	f7ff b9a4 	b.w	83e16 <_vfiprintf_r+0xce>
   84ace:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
   84ad2:	e45f      	b.n	84394 <_vfiprintf_r+0x64c>
   84ad4:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
   84ad8:	f7ff bbc4 	b.w	84264 <_vfiprintf_r+0x51c>
   84adc:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
   84ae0:	f7ff bb77 	b.w	841d2 <_vfiprintf_r+0x48a>
   84ae4:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
   84ae8:	e487      	b.n	843fa <_vfiprintf_r+0x6b2>
   84aea:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
   84aee:	e4a7      	b.n	84440 <_vfiprintf_r+0x6f8>
   84af0:	4699      	mov	r9, r3
   84af2:	07f3      	lsls	r3, r6, #31
   84af4:	d505      	bpl.n	84b02 <_vfiprintf_r+0xdba>
   84af6:	af2a      	add	r7, sp, #168	; 0xa8
   84af8:	2330      	movs	r3, #48	; 0x30
   84afa:	f807 3d41 	strb.w	r3, [r7, #-65]!
   84afe:	f7ff bba2 	b.w	84246 <_vfiprintf_r+0x4fe>
   84b02:	9b01      	ldr	r3, [sp, #4]
   84b04:	4657      	mov	r7, sl
   84b06:	9303      	str	r3, [sp, #12]
   84b08:	f7ff ba44 	b.w	83f94 <_vfiprintf_r+0x24c>
   84b0c:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
   84b10:	e517      	b.n	84542 <_vfiprintf_r+0x7fa>
   84b12:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
   84b16:	e4fa      	b.n	8450e <_vfiprintf_r+0x7c6>
   84b18:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
   84b1c:	e4d2      	b.n	844c4 <_vfiprintf_r+0x77c>
   84b1e:	bf00      	nop
   84b20:	000869b4 	.word	0x000869b4
   84b24:	000869c8 	.word	0x000869c8
   84b28:	000869d0 	.word	0x000869d0
   84b2c:	00086990 	.word	0x00086990

00084b30 <__sbprintf>:
   84b30:	b5f0      	push	{r4, r5, r6, r7, lr}
   84b32:	460c      	mov	r4, r1
   84b34:	8989      	ldrh	r1, [r1, #12]
   84b36:	f2ad 4d6c 	subw	sp, sp, #1132	; 0x46c
   84b3a:	6e65      	ldr	r5, [r4, #100]	; 0x64
   84b3c:	f021 0102 	bic.w	r1, r1, #2
   84b40:	6a66      	ldr	r6, [r4, #36]	; 0x24
   84b42:	f8ad 100c 	strh.w	r1, [sp, #12]
   84b46:	69e1      	ldr	r1, [r4, #28]
   84b48:	89e7      	ldrh	r7, [r4, #14]
   84b4a:	9519      	str	r5, [sp, #100]	; 0x64
   84b4c:	2500      	movs	r5, #0
   84b4e:	9107      	str	r1, [sp, #28]
   84b50:	9609      	str	r6, [sp, #36]	; 0x24
   84b52:	9506      	str	r5, [sp, #24]
   84b54:	ae1a      	add	r6, sp, #104	; 0x68
   84b56:	f44f 6580 	mov.w	r5, #1024	; 0x400
   84b5a:	4669      	mov	r1, sp
   84b5c:	9600      	str	r6, [sp, #0]
   84b5e:	9604      	str	r6, [sp, #16]
   84b60:	9502      	str	r5, [sp, #8]
   84b62:	9505      	str	r5, [sp, #20]
   84b64:	f8ad 700e 	strh.w	r7, [sp, #14]
   84b68:	4606      	mov	r6, r0
   84b6a:	f7ff f8ed 	bl	83d48 <_vfiprintf_r>
   84b6e:	1e05      	subs	r5, r0, #0
   84b70:	db07      	blt.n	84b82 <__sbprintf+0x52>
   84b72:	4630      	mov	r0, r6
   84b74:	4669      	mov	r1, sp
   84b76:	f000 f929 	bl	84dcc <_fflush_r>
   84b7a:	2800      	cmp	r0, #0
   84b7c:	bf18      	it	ne
   84b7e:	f04f 35ff 	movne.w	r5, #4294967295
   84b82:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   84b86:	065b      	lsls	r3, r3, #25
   84b88:	d503      	bpl.n	84b92 <__sbprintf+0x62>
   84b8a:	89a3      	ldrh	r3, [r4, #12]
   84b8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   84b90:	81a3      	strh	r3, [r4, #12]
   84b92:	4628      	mov	r0, r5
   84b94:	f20d 4d6c 	addw	sp, sp, #1132	; 0x46c
   84b98:	bdf0      	pop	{r4, r5, r6, r7, pc}
   84b9a:	bf00      	nop

00084b9c <__swsetup_r>:
   84b9c:	b538      	push	{r3, r4, r5, lr}
   84b9e:	4b30      	ldr	r3, [pc, #192]	; (84c60 <__swsetup_r+0xc4>)
   84ba0:	4605      	mov	r5, r0
   84ba2:	6818      	ldr	r0, [r3, #0]
   84ba4:	460c      	mov	r4, r1
   84ba6:	b110      	cbz	r0, 84bae <__swsetup_r+0x12>
   84ba8:	6b83      	ldr	r3, [r0, #56]	; 0x38
   84baa:	2b00      	cmp	r3, #0
   84bac:	d038      	beq.n	84c20 <__swsetup_r+0x84>
   84bae:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   84bb2:	b293      	uxth	r3, r2
   84bb4:	0718      	lsls	r0, r3, #28
   84bb6:	d50c      	bpl.n	84bd2 <__swsetup_r+0x36>
   84bb8:	6920      	ldr	r0, [r4, #16]
   84bba:	b1a8      	cbz	r0, 84be8 <__swsetup_r+0x4c>
   84bbc:	f013 0201 	ands.w	r2, r3, #1
   84bc0:	d01e      	beq.n	84c00 <__swsetup_r+0x64>
   84bc2:	6963      	ldr	r3, [r4, #20]
   84bc4:	2200      	movs	r2, #0
   84bc6:	425b      	negs	r3, r3
   84bc8:	61a3      	str	r3, [r4, #24]
   84bca:	60a2      	str	r2, [r4, #8]
   84bcc:	b1f0      	cbz	r0, 84c0c <__swsetup_r+0x70>
   84bce:	2000      	movs	r0, #0
   84bd0:	bd38      	pop	{r3, r4, r5, pc}
   84bd2:	06d9      	lsls	r1, r3, #27
   84bd4:	d53b      	bpl.n	84c4e <__swsetup_r+0xb2>
   84bd6:	0758      	lsls	r0, r3, #29
   84bd8:	d425      	bmi.n	84c26 <__swsetup_r+0x8a>
   84bda:	6920      	ldr	r0, [r4, #16]
   84bdc:	f042 0308 	orr.w	r3, r2, #8
   84be0:	81a3      	strh	r3, [r4, #12]
   84be2:	b29b      	uxth	r3, r3
   84be4:	2800      	cmp	r0, #0
   84be6:	d1e9      	bne.n	84bbc <__swsetup_r+0x20>
   84be8:	f403 7220 	and.w	r2, r3, #640	; 0x280
   84bec:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   84bf0:	d0e4      	beq.n	84bbc <__swsetup_r+0x20>
   84bf2:	4628      	mov	r0, r5
   84bf4:	4621      	mov	r1, r4
   84bf6:	f000 fd13 	bl	85620 <__smakebuf_r>
   84bfa:	89a3      	ldrh	r3, [r4, #12]
   84bfc:	6920      	ldr	r0, [r4, #16]
   84bfe:	e7dd      	b.n	84bbc <__swsetup_r+0x20>
   84c00:	0799      	lsls	r1, r3, #30
   84c02:	bf58      	it	pl
   84c04:	6962      	ldrpl	r2, [r4, #20]
   84c06:	60a2      	str	r2, [r4, #8]
   84c08:	2800      	cmp	r0, #0
   84c0a:	d1e0      	bne.n	84bce <__swsetup_r+0x32>
   84c0c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   84c10:	061a      	lsls	r2, r3, #24
   84c12:	d5dd      	bpl.n	84bd0 <__swsetup_r+0x34>
   84c14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   84c18:	81a3      	strh	r3, [r4, #12]
   84c1a:	f04f 30ff 	mov.w	r0, #4294967295
   84c1e:	bd38      	pop	{r3, r4, r5, pc}
   84c20:	f000 f968 	bl	84ef4 <__sinit>
   84c24:	e7c3      	b.n	84bae <__swsetup_r+0x12>
   84c26:	6b21      	ldr	r1, [r4, #48]	; 0x30
   84c28:	b151      	cbz	r1, 84c40 <__swsetup_r+0xa4>
   84c2a:	f104 0340 	add.w	r3, r4, #64	; 0x40
   84c2e:	4299      	cmp	r1, r3
   84c30:	d004      	beq.n	84c3c <__swsetup_r+0xa0>
   84c32:	4628      	mov	r0, r5
   84c34:	f000 fa26 	bl	85084 <_free_r>
   84c38:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   84c3c:	2300      	movs	r3, #0
   84c3e:	6323      	str	r3, [r4, #48]	; 0x30
   84c40:	6920      	ldr	r0, [r4, #16]
   84c42:	2300      	movs	r3, #0
   84c44:	f022 0224 	bic.w	r2, r2, #36	; 0x24
   84c48:	e884 0009 	stmia.w	r4, {r0, r3}
   84c4c:	e7c6      	b.n	84bdc <__swsetup_r+0x40>
   84c4e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   84c52:	2309      	movs	r3, #9
   84c54:	602b      	str	r3, [r5, #0]
   84c56:	f04f 30ff 	mov.w	r0, #4294967295
   84c5a:	81a2      	strh	r2, [r4, #12]
   84c5c:	bd38      	pop	{r3, r4, r5, pc}
   84c5e:	bf00      	nop
   84c60:	20070580 	.word	0x20070580

00084c64 <register_fini>:
   84c64:	4b02      	ldr	r3, [pc, #8]	; (84c70 <register_fini+0xc>)
   84c66:	b113      	cbz	r3, 84c6e <register_fini+0xa>
   84c68:	4802      	ldr	r0, [pc, #8]	; (84c74 <register_fini+0x10>)
   84c6a:	f000 b805 	b.w	84c78 <atexit>
   84c6e:	4770      	bx	lr
   84c70:	00000000 	.word	0x00000000
   84c74:	00084f09 	.word	0x00084f09

00084c78 <atexit>:
   84c78:	2300      	movs	r3, #0
   84c7a:	4601      	mov	r1, r0
   84c7c:	461a      	mov	r2, r3
   84c7e:	4618      	mov	r0, r3
   84c80:	f001 bb58 	b.w	86334 <__register_exitproc>

00084c84 <__sflush_r>:
   84c84:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
   84c88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   84c8c:	b29a      	uxth	r2, r3
   84c8e:	460d      	mov	r5, r1
   84c90:	0711      	lsls	r1, r2, #28
   84c92:	4680      	mov	r8, r0
   84c94:	d43c      	bmi.n	84d10 <__sflush_r+0x8c>
   84c96:	686a      	ldr	r2, [r5, #4]
   84c98:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   84c9c:	2a00      	cmp	r2, #0
   84c9e:	81ab      	strh	r3, [r5, #12]
   84ca0:	dd73      	ble.n	84d8a <__sflush_r+0x106>
   84ca2:	6aac      	ldr	r4, [r5, #40]	; 0x28
   84ca4:	2c00      	cmp	r4, #0
   84ca6:	d04b      	beq.n	84d40 <__sflush_r+0xbc>
   84ca8:	b29b      	uxth	r3, r3
   84caa:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
   84cae:	2100      	movs	r1, #0
   84cb0:	b292      	uxth	r2, r2
   84cb2:	f8d8 6000 	ldr.w	r6, [r8]
   84cb6:	f8c8 1000 	str.w	r1, [r8]
   84cba:	2a00      	cmp	r2, #0
   84cbc:	d069      	beq.n	84d92 <__sflush_r+0x10e>
   84cbe:	6d2a      	ldr	r2, [r5, #80]	; 0x50
   84cc0:	075f      	lsls	r7, r3, #29
   84cc2:	d505      	bpl.n	84cd0 <__sflush_r+0x4c>
   84cc4:	6869      	ldr	r1, [r5, #4]
   84cc6:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   84cc8:	1a52      	subs	r2, r2, r1
   84cca:	b10b      	cbz	r3, 84cd0 <__sflush_r+0x4c>
   84ccc:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   84cce:	1ad2      	subs	r2, r2, r3
   84cd0:	2300      	movs	r3, #0
   84cd2:	69e9      	ldr	r1, [r5, #28]
   84cd4:	4640      	mov	r0, r8
   84cd6:	47a0      	blx	r4
   84cd8:	1c44      	adds	r4, r0, #1
   84cda:	d03c      	beq.n	84d56 <__sflush_r+0xd2>
   84cdc:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
   84ce0:	6929      	ldr	r1, [r5, #16]
   84ce2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   84ce6:	2200      	movs	r2, #0
   84ce8:	81ab      	strh	r3, [r5, #12]
   84cea:	04db      	lsls	r3, r3, #19
   84cec:	e885 0006 	stmia.w	r5, {r1, r2}
   84cf0:	d449      	bmi.n	84d86 <__sflush_r+0x102>
   84cf2:	6b29      	ldr	r1, [r5, #48]	; 0x30
   84cf4:	f8c8 6000 	str.w	r6, [r8]
   84cf8:	b311      	cbz	r1, 84d40 <__sflush_r+0xbc>
   84cfa:	f105 0340 	add.w	r3, r5, #64	; 0x40
   84cfe:	4299      	cmp	r1, r3
   84d00:	d002      	beq.n	84d08 <__sflush_r+0x84>
   84d02:	4640      	mov	r0, r8
   84d04:	f000 f9be 	bl	85084 <_free_r>
   84d08:	2000      	movs	r0, #0
   84d0a:	6328      	str	r0, [r5, #48]	; 0x30
   84d0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   84d10:	692e      	ldr	r6, [r5, #16]
   84d12:	b1ae      	cbz	r6, 84d40 <__sflush_r+0xbc>
   84d14:	0790      	lsls	r0, r2, #30
   84d16:	682c      	ldr	r4, [r5, #0]
   84d18:	bf0c      	ite	eq
   84d1a:	696b      	ldreq	r3, [r5, #20]
   84d1c:	2300      	movne	r3, #0
   84d1e:	602e      	str	r6, [r5, #0]
   84d20:	1ba4      	subs	r4, r4, r6
   84d22:	60ab      	str	r3, [r5, #8]
   84d24:	e00a      	b.n	84d3c <__sflush_r+0xb8>
   84d26:	4623      	mov	r3, r4
   84d28:	4632      	mov	r2, r6
   84d2a:	6a6f      	ldr	r7, [r5, #36]	; 0x24
   84d2c:	69e9      	ldr	r1, [r5, #28]
   84d2e:	4640      	mov	r0, r8
   84d30:	47b8      	blx	r7
   84d32:	2800      	cmp	r0, #0
   84d34:	eba4 0400 	sub.w	r4, r4, r0
   84d38:	4406      	add	r6, r0
   84d3a:	dd04      	ble.n	84d46 <__sflush_r+0xc2>
   84d3c:	2c00      	cmp	r4, #0
   84d3e:	dcf2      	bgt.n	84d26 <__sflush_r+0xa2>
   84d40:	2000      	movs	r0, #0
   84d42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   84d46:	89ab      	ldrh	r3, [r5, #12]
   84d48:	f04f 30ff 	mov.w	r0, #4294967295
   84d4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   84d50:	81ab      	strh	r3, [r5, #12]
   84d52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   84d56:	f8d8 2000 	ldr.w	r2, [r8]
   84d5a:	2a1d      	cmp	r2, #29
   84d5c:	d8f3      	bhi.n	84d46 <__sflush_r+0xc2>
   84d5e:	4b1a      	ldr	r3, [pc, #104]	; (84dc8 <__sflush_r+0x144>)
   84d60:	40d3      	lsrs	r3, r2
   84d62:	f003 0301 	and.w	r3, r3, #1
   84d66:	f083 0401 	eor.w	r4, r3, #1
   84d6a:	2b00      	cmp	r3, #0
   84d6c:	d0eb      	beq.n	84d46 <__sflush_r+0xc2>
   84d6e:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
   84d72:	6929      	ldr	r1, [r5, #16]
   84d74:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   84d78:	6029      	str	r1, [r5, #0]
   84d7a:	04d9      	lsls	r1, r3, #19
   84d7c:	606c      	str	r4, [r5, #4]
   84d7e:	81ab      	strh	r3, [r5, #12]
   84d80:	d5b7      	bpl.n	84cf2 <__sflush_r+0x6e>
   84d82:	2a00      	cmp	r2, #0
   84d84:	d1b5      	bne.n	84cf2 <__sflush_r+0x6e>
   84d86:	6528      	str	r0, [r5, #80]	; 0x50
   84d88:	e7b3      	b.n	84cf2 <__sflush_r+0x6e>
   84d8a:	6bea      	ldr	r2, [r5, #60]	; 0x3c
   84d8c:	2a00      	cmp	r2, #0
   84d8e:	dc88      	bgt.n	84ca2 <__sflush_r+0x1e>
   84d90:	e7d6      	b.n	84d40 <__sflush_r+0xbc>
   84d92:	2301      	movs	r3, #1
   84d94:	69e9      	ldr	r1, [r5, #28]
   84d96:	4640      	mov	r0, r8
   84d98:	47a0      	blx	r4
   84d9a:	1c43      	adds	r3, r0, #1
   84d9c:	4602      	mov	r2, r0
   84d9e:	d002      	beq.n	84da6 <__sflush_r+0x122>
   84da0:	89ab      	ldrh	r3, [r5, #12]
   84da2:	6aac      	ldr	r4, [r5, #40]	; 0x28
   84da4:	e78c      	b.n	84cc0 <__sflush_r+0x3c>
   84da6:	f8d8 3000 	ldr.w	r3, [r8]
   84daa:	2b00      	cmp	r3, #0
   84dac:	d0f8      	beq.n	84da0 <__sflush_r+0x11c>
   84dae:	2b1d      	cmp	r3, #29
   84db0:	d001      	beq.n	84db6 <__sflush_r+0x132>
   84db2:	2b16      	cmp	r3, #22
   84db4:	d102      	bne.n	84dbc <__sflush_r+0x138>
   84db6:	f8c8 6000 	str.w	r6, [r8]
   84dba:	e7c1      	b.n	84d40 <__sflush_r+0xbc>
   84dbc:	89ab      	ldrh	r3, [r5, #12]
   84dbe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   84dc2:	81ab      	strh	r3, [r5, #12]
   84dc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   84dc8:	20400001 	.word	0x20400001

00084dcc <_fflush_r>:
   84dcc:	b510      	push	{r4, lr}
   84dce:	4604      	mov	r4, r0
   84dd0:	b082      	sub	sp, #8
   84dd2:	b108      	cbz	r0, 84dd8 <_fflush_r+0xc>
   84dd4:	6b83      	ldr	r3, [r0, #56]	; 0x38
   84dd6:	b153      	cbz	r3, 84dee <_fflush_r+0x22>
   84dd8:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
   84ddc:	b908      	cbnz	r0, 84de2 <_fflush_r+0x16>
   84dde:	b002      	add	sp, #8
   84de0:	bd10      	pop	{r4, pc}
   84de2:	4620      	mov	r0, r4
   84de4:	b002      	add	sp, #8
   84de6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   84dea:	f7ff bf4b 	b.w	84c84 <__sflush_r>
   84dee:	9101      	str	r1, [sp, #4]
   84df0:	f000 f880 	bl	84ef4 <__sinit>
   84df4:	9901      	ldr	r1, [sp, #4]
   84df6:	e7ef      	b.n	84dd8 <_fflush_r+0xc>

00084df8 <_cleanup_r>:
   84df8:	4901      	ldr	r1, [pc, #4]	; (84e00 <_cleanup_r+0x8>)
   84dfa:	f000 bbaf 	b.w	8555c <_fwalk_reent>
   84dfe:	bf00      	nop
   84e00:	000863fd 	.word	0x000863fd

00084e04 <__sinit.part.1>:
   84e04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   84e08:	4607      	mov	r7, r0
   84e0a:	4835      	ldr	r0, [pc, #212]	; (84ee0 <__sinit.part.1+0xdc>)
   84e0c:	687d      	ldr	r5, [r7, #4]
   84e0e:	2400      	movs	r4, #0
   84e10:	f507 723b 	add.w	r2, r7, #748	; 0x2ec
   84e14:	2304      	movs	r3, #4
   84e16:	2103      	movs	r1, #3
   84e18:	63f8      	str	r0, [r7, #60]	; 0x3c
   84e1a:	f8c7 12e4 	str.w	r1, [r7, #740]	; 0x2e4
   84e1e:	f8c7 22e8 	str.w	r2, [r7, #744]	; 0x2e8
   84e22:	f8c7 42e0 	str.w	r4, [r7, #736]	; 0x2e0
   84e26:	b083      	sub	sp, #12
   84e28:	602c      	str	r4, [r5, #0]
   84e2a:	606c      	str	r4, [r5, #4]
   84e2c:	60ac      	str	r4, [r5, #8]
   84e2e:	666c      	str	r4, [r5, #100]	; 0x64
   84e30:	81ec      	strh	r4, [r5, #14]
   84e32:	612c      	str	r4, [r5, #16]
   84e34:	616c      	str	r4, [r5, #20]
   84e36:	61ac      	str	r4, [r5, #24]
   84e38:	81ab      	strh	r3, [r5, #12]
   84e3a:	4621      	mov	r1, r4
   84e3c:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   84e40:	2208      	movs	r2, #8
   84e42:	f7fe fde5 	bl	83a10 <memset>
   84e46:	f8df b09c 	ldr.w	fp, [pc, #156]	; 84ee4 <__sinit.part.1+0xe0>
   84e4a:	68be      	ldr	r6, [r7, #8]
   84e4c:	f8df a098 	ldr.w	sl, [pc, #152]	; 84ee8 <__sinit.part.1+0xe4>
   84e50:	f8df 9098 	ldr.w	r9, [pc, #152]	; 84eec <__sinit.part.1+0xe8>
   84e54:	f8df 8098 	ldr.w	r8, [pc, #152]	; 84ef0 <__sinit.part.1+0xec>
   84e58:	2301      	movs	r3, #1
   84e5a:	2209      	movs	r2, #9
   84e5c:	f8c5 b020 	str.w	fp, [r5, #32]
   84e60:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
   84e64:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
   84e68:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
   84e6c:	61ed      	str	r5, [r5, #28]
   84e6e:	4621      	mov	r1, r4
   84e70:	81f3      	strh	r3, [r6, #14]
   84e72:	81b2      	strh	r2, [r6, #12]
   84e74:	f106 005c 	add.w	r0, r6, #92	; 0x5c
   84e78:	6034      	str	r4, [r6, #0]
   84e7a:	6074      	str	r4, [r6, #4]
   84e7c:	60b4      	str	r4, [r6, #8]
   84e7e:	6674      	str	r4, [r6, #100]	; 0x64
   84e80:	6134      	str	r4, [r6, #16]
   84e82:	6174      	str	r4, [r6, #20]
   84e84:	61b4      	str	r4, [r6, #24]
   84e86:	2208      	movs	r2, #8
   84e88:	9301      	str	r3, [sp, #4]
   84e8a:	f7fe fdc1 	bl	83a10 <memset>
   84e8e:	68fd      	ldr	r5, [r7, #12]
   84e90:	2012      	movs	r0, #18
   84e92:	2202      	movs	r2, #2
   84e94:	61f6      	str	r6, [r6, #28]
   84e96:	f8c6 b020 	str.w	fp, [r6, #32]
   84e9a:	f8c6 a024 	str.w	sl, [r6, #36]	; 0x24
   84e9e:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
   84ea2:	f8c6 802c 	str.w	r8, [r6, #44]	; 0x2c
   84ea6:	4621      	mov	r1, r4
   84ea8:	81a8      	strh	r0, [r5, #12]
   84eaa:	81ea      	strh	r2, [r5, #14]
   84eac:	602c      	str	r4, [r5, #0]
   84eae:	606c      	str	r4, [r5, #4]
   84eb0:	60ac      	str	r4, [r5, #8]
   84eb2:	666c      	str	r4, [r5, #100]	; 0x64
   84eb4:	612c      	str	r4, [r5, #16]
   84eb6:	616c      	str	r4, [r5, #20]
   84eb8:	61ac      	str	r4, [r5, #24]
   84eba:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   84ebe:	2208      	movs	r2, #8
   84ec0:	f7fe fda6 	bl	83a10 <memset>
   84ec4:	9b01      	ldr	r3, [sp, #4]
   84ec6:	61ed      	str	r5, [r5, #28]
   84ec8:	f8c5 b020 	str.w	fp, [r5, #32]
   84ecc:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
   84ed0:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
   84ed4:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
   84ed8:	63bb      	str	r3, [r7, #56]	; 0x38
   84eda:	b003      	add	sp, #12
   84edc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   84ee0:	00084df9 	.word	0x00084df9
   84ee4:	00086165 	.word	0x00086165
   84ee8:	00086189 	.word	0x00086189
   84eec:	000861c5 	.word	0x000861c5
   84ef0:	000861e5 	.word	0x000861e5

00084ef4 <__sinit>:
   84ef4:	6b83      	ldr	r3, [r0, #56]	; 0x38
   84ef6:	b103      	cbz	r3, 84efa <__sinit+0x6>
   84ef8:	4770      	bx	lr
   84efa:	f7ff bf83 	b.w	84e04 <__sinit.part.1>
   84efe:	bf00      	nop

00084f00 <__sfp_lock_acquire>:
   84f00:	4770      	bx	lr
   84f02:	bf00      	nop

00084f04 <__sfp_lock_release>:
   84f04:	4770      	bx	lr
   84f06:	bf00      	nop

00084f08 <__libc_fini_array>:
   84f08:	b538      	push	{r3, r4, r5, lr}
   84f0a:	4d07      	ldr	r5, [pc, #28]	; (84f28 <__libc_fini_array+0x20>)
   84f0c:	4c07      	ldr	r4, [pc, #28]	; (84f2c <__libc_fini_array+0x24>)
   84f0e:	1b2c      	subs	r4, r5, r4
   84f10:	10a4      	asrs	r4, r4, #2
   84f12:	d005      	beq.n	84f20 <__libc_fini_array+0x18>
   84f14:	3c01      	subs	r4, #1
   84f16:	f855 3d04 	ldr.w	r3, [r5, #-4]!
   84f1a:	4798      	blx	r3
   84f1c:	2c00      	cmp	r4, #0
   84f1e:	d1f9      	bne.n	84f14 <__libc_fini_array+0xc>
   84f20:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   84f24:	f001 bd66 	b.w	869f4 <_fini>
   84f28:	00086a04 	.word	0x00086a04
   84f2c:	00086a00 	.word	0x00086a00

00084f30 <__fputwc>:
   84f30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   84f34:	b082      	sub	sp, #8
   84f36:	4606      	mov	r6, r0
   84f38:	460f      	mov	r7, r1
   84f3a:	4614      	mov	r4, r2
   84f3c:	f000 fb3a 	bl	855b4 <__locale_mb_cur_max>
   84f40:	2801      	cmp	r0, #1
   84f42:	d032      	beq.n	84faa <__fputwc+0x7a>
   84f44:	f104 035c 	add.w	r3, r4, #92	; 0x5c
   84f48:	463a      	mov	r2, r7
   84f4a:	a901      	add	r1, sp, #4
   84f4c:	4630      	mov	r0, r6
   84f4e:	f001 f9a3 	bl	86298 <_wcrtomb_r>
   84f52:	f1b0 3fff 	cmp.w	r0, #4294967295
   84f56:	4680      	mov	r8, r0
   84f58:	d020      	beq.n	84f9c <__fputwc+0x6c>
   84f5a:	b370      	cbz	r0, 84fba <__fputwc+0x8a>
   84f5c:	f89d 1004 	ldrb.w	r1, [sp, #4]
   84f60:	2500      	movs	r5, #0
   84f62:	e008      	b.n	84f76 <__fputwc+0x46>
   84f64:	6823      	ldr	r3, [r4, #0]
   84f66:	1c5a      	adds	r2, r3, #1
   84f68:	6022      	str	r2, [r4, #0]
   84f6a:	7019      	strb	r1, [r3, #0]
   84f6c:	3501      	adds	r5, #1
   84f6e:	4545      	cmp	r5, r8
   84f70:	d223      	bcs.n	84fba <__fputwc+0x8a>
   84f72:	ab01      	add	r3, sp, #4
   84f74:	5d59      	ldrb	r1, [r3, r5]
   84f76:	68a3      	ldr	r3, [r4, #8]
   84f78:	3b01      	subs	r3, #1
   84f7a:	2b00      	cmp	r3, #0
   84f7c:	60a3      	str	r3, [r4, #8]
   84f7e:	daf1      	bge.n	84f64 <__fputwc+0x34>
   84f80:	69a2      	ldr	r2, [r4, #24]
   84f82:	4293      	cmp	r3, r2
   84f84:	db01      	blt.n	84f8a <__fputwc+0x5a>
   84f86:	290a      	cmp	r1, #10
   84f88:	d1ec      	bne.n	84f64 <__fputwc+0x34>
   84f8a:	4622      	mov	r2, r4
   84f8c:	4630      	mov	r0, r6
   84f8e:	f001 f92d 	bl	861ec <__swbuf_r>
   84f92:	1c43      	adds	r3, r0, #1
   84f94:	d1ea      	bne.n	84f6c <__fputwc+0x3c>
   84f96:	b002      	add	sp, #8
   84f98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   84f9c:	89a3      	ldrh	r3, [r4, #12]
   84f9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   84fa2:	81a3      	strh	r3, [r4, #12]
   84fa4:	b002      	add	sp, #8
   84fa6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   84faa:	1e7b      	subs	r3, r7, #1
   84fac:	2bfe      	cmp	r3, #254	; 0xfe
   84fae:	d8c9      	bhi.n	84f44 <__fputwc+0x14>
   84fb0:	b2f9      	uxtb	r1, r7
   84fb2:	4680      	mov	r8, r0
   84fb4:	f88d 1004 	strb.w	r1, [sp, #4]
   84fb8:	e7d2      	b.n	84f60 <__fputwc+0x30>
   84fba:	4638      	mov	r0, r7
   84fbc:	b002      	add	sp, #8
   84fbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   84fc2:	bf00      	nop

00084fc4 <_fputwc_r>:
   84fc4:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
   84fc8:	f413 5f00 	tst.w	r3, #8192	; 0x2000
   84fcc:	d10a      	bne.n	84fe4 <_fputwc_r+0x20>
   84fce:	b410      	push	{r4}
   84fd0:	6e54      	ldr	r4, [r2, #100]	; 0x64
   84fd2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   84fd6:	f444 5400 	orr.w	r4, r4, #8192	; 0x2000
   84fda:	6654      	str	r4, [r2, #100]	; 0x64
   84fdc:	8193      	strh	r3, [r2, #12]
   84fde:	bc10      	pop	{r4}
   84fe0:	f7ff bfa6 	b.w	84f30 <__fputwc>
   84fe4:	f7ff bfa4 	b.w	84f30 <__fputwc>

00084fe8 <_malloc_trim_r>:
   84fe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   84fea:	460c      	mov	r4, r1
   84fec:	4f22      	ldr	r7, [pc, #136]	; (85078 <_malloc_trim_r+0x90>)
   84fee:	4606      	mov	r6, r0
   84ff0:	f000 feb8 	bl	85d64 <__malloc_lock>
   84ff4:	68bb      	ldr	r3, [r7, #8]
   84ff6:	685d      	ldr	r5, [r3, #4]
   84ff8:	f025 0503 	bic.w	r5, r5, #3
   84ffc:	1b29      	subs	r1, r5, r4
   84ffe:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
   85002:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
   85006:	f021 010f 	bic.w	r1, r1, #15
   8500a:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
   8500e:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
   85012:	db07      	blt.n	85024 <_malloc_trim_r+0x3c>
   85014:	2100      	movs	r1, #0
   85016:	4630      	mov	r0, r6
   85018:	f001 f892 	bl	86140 <_sbrk_r>
   8501c:	68bb      	ldr	r3, [r7, #8]
   8501e:	442b      	add	r3, r5
   85020:	4298      	cmp	r0, r3
   85022:	d004      	beq.n	8502e <_malloc_trim_r+0x46>
   85024:	4630      	mov	r0, r6
   85026:	f000 fe9f 	bl	85d68 <__malloc_unlock>
   8502a:	2000      	movs	r0, #0
   8502c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8502e:	4261      	negs	r1, r4
   85030:	4630      	mov	r0, r6
   85032:	f001 f885 	bl	86140 <_sbrk_r>
   85036:	3001      	adds	r0, #1
   85038:	d00d      	beq.n	85056 <_malloc_trim_r+0x6e>
   8503a:	4b10      	ldr	r3, [pc, #64]	; (8507c <_malloc_trim_r+0x94>)
   8503c:	68ba      	ldr	r2, [r7, #8]
   8503e:	6819      	ldr	r1, [r3, #0]
   85040:	1b2d      	subs	r5, r5, r4
   85042:	f045 0501 	orr.w	r5, r5, #1
   85046:	4630      	mov	r0, r6
   85048:	1b09      	subs	r1, r1, r4
   8504a:	6055      	str	r5, [r2, #4]
   8504c:	6019      	str	r1, [r3, #0]
   8504e:	f000 fe8b 	bl	85d68 <__malloc_unlock>
   85052:	2001      	movs	r0, #1
   85054:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   85056:	2100      	movs	r1, #0
   85058:	4630      	mov	r0, r6
   8505a:	f001 f871 	bl	86140 <_sbrk_r>
   8505e:	68ba      	ldr	r2, [r7, #8]
   85060:	1a83      	subs	r3, r0, r2
   85062:	2b0f      	cmp	r3, #15
   85064:	ddde      	ble.n	85024 <_malloc_trim_r+0x3c>
   85066:	4c06      	ldr	r4, [pc, #24]	; (85080 <_malloc_trim_r+0x98>)
   85068:	4904      	ldr	r1, [pc, #16]	; (8507c <_malloc_trim_r+0x94>)
   8506a:	6824      	ldr	r4, [r4, #0]
   8506c:	f043 0301 	orr.w	r3, r3, #1
   85070:	1b00      	subs	r0, r0, r4
   85072:	6053      	str	r3, [r2, #4]
   85074:	6008      	str	r0, [r1, #0]
   85076:	e7d5      	b.n	85024 <_malloc_trim_r+0x3c>
   85078:	200705a8 	.word	0x200705a8
   8507c:	20078c4c 	.word	0x20078c4c
   85080:	200709b4 	.word	0x200709b4

00085084 <_free_r>:
   85084:	2900      	cmp	r1, #0
   85086:	d045      	beq.n	85114 <_free_r+0x90>
   85088:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8508c:	460d      	mov	r5, r1
   8508e:	4680      	mov	r8, r0
   85090:	f000 fe68 	bl	85d64 <__malloc_lock>
   85094:	f855 7c04 	ldr.w	r7, [r5, #-4]
   85098:	496a      	ldr	r1, [pc, #424]	; (85244 <_free_r+0x1c0>)
   8509a:	f1a5 0408 	sub.w	r4, r5, #8
   8509e:	f027 0301 	bic.w	r3, r7, #1
   850a2:	18e2      	adds	r2, r4, r3
   850a4:	688e      	ldr	r6, [r1, #8]
   850a6:	6850      	ldr	r0, [r2, #4]
   850a8:	42b2      	cmp	r2, r6
   850aa:	f020 0003 	bic.w	r0, r0, #3
   850ae:	d062      	beq.n	85176 <_free_r+0xf2>
   850b0:	07fe      	lsls	r6, r7, #31
   850b2:	6050      	str	r0, [r2, #4]
   850b4:	d40b      	bmi.n	850ce <_free_r+0x4a>
   850b6:	f855 7c08 	ldr.w	r7, [r5, #-8]
   850ba:	f101 0e08 	add.w	lr, r1, #8
   850be:	1be4      	subs	r4, r4, r7
   850c0:	68a5      	ldr	r5, [r4, #8]
   850c2:	443b      	add	r3, r7
   850c4:	4575      	cmp	r5, lr
   850c6:	d06f      	beq.n	851a8 <_free_r+0x124>
   850c8:	68e7      	ldr	r7, [r4, #12]
   850ca:	60ef      	str	r7, [r5, #12]
   850cc:	60bd      	str	r5, [r7, #8]
   850ce:	1815      	adds	r5, r2, r0
   850d0:	686d      	ldr	r5, [r5, #4]
   850d2:	07ed      	lsls	r5, r5, #31
   850d4:	d542      	bpl.n	8515c <_free_r+0xd8>
   850d6:	f043 0201 	orr.w	r2, r3, #1
   850da:	6062      	str	r2, [r4, #4]
   850dc:	50e3      	str	r3, [r4, r3]
   850de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   850e2:	d218      	bcs.n	85116 <_free_r+0x92>
   850e4:	08db      	lsrs	r3, r3, #3
   850e6:	6848      	ldr	r0, [r1, #4]
   850e8:	109d      	asrs	r5, r3, #2
   850ea:	2201      	movs	r2, #1
   850ec:	3301      	adds	r3, #1
   850ee:	f851 7033 	ldr.w	r7, [r1, r3, lsl #3]
   850f2:	fa02 f505 	lsl.w	r5, r2, r5
   850f6:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
   850fa:	4328      	orrs	r0, r5
   850fc:	3a08      	subs	r2, #8
   850fe:	60e2      	str	r2, [r4, #12]
   85100:	60a7      	str	r7, [r4, #8]
   85102:	6048      	str	r0, [r1, #4]
   85104:	f841 4033 	str.w	r4, [r1, r3, lsl #3]
   85108:	60fc      	str	r4, [r7, #12]
   8510a:	4640      	mov	r0, r8
   8510c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   85110:	f000 be2a 	b.w	85d68 <__malloc_unlock>
   85114:	4770      	bx	lr
   85116:	0a5a      	lsrs	r2, r3, #9
   85118:	2a04      	cmp	r2, #4
   8511a:	d853      	bhi.n	851c4 <_free_r+0x140>
   8511c:	099a      	lsrs	r2, r3, #6
   8511e:	f102 0739 	add.w	r7, r2, #57	; 0x39
   85122:	007f      	lsls	r7, r7, #1
   85124:	f102 0538 	add.w	r5, r2, #56	; 0x38
   85128:	eb01 0087 	add.w	r0, r1, r7, lsl #2
   8512c:	f851 2027 	ldr.w	r2, [r1, r7, lsl #2]
   85130:	3808      	subs	r0, #8
   85132:	4290      	cmp	r0, r2
   85134:	4943      	ldr	r1, [pc, #268]	; (85244 <_free_r+0x1c0>)
   85136:	d04d      	beq.n	851d4 <_free_r+0x150>
   85138:	6851      	ldr	r1, [r2, #4]
   8513a:	f021 0103 	bic.w	r1, r1, #3
   8513e:	428b      	cmp	r3, r1
   85140:	d202      	bcs.n	85148 <_free_r+0xc4>
   85142:	6892      	ldr	r2, [r2, #8]
   85144:	4290      	cmp	r0, r2
   85146:	d1f7      	bne.n	85138 <_free_r+0xb4>
   85148:	68d0      	ldr	r0, [r2, #12]
   8514a:	60e0      	str	r0, [r4, #12]
   8514c:	60a2      	str	r2, [r4, #8]
   8514e:	6084      	str	r4, [r0, #8]
   85150:	60d4      	str	r4, [r2, #12]
   85152:	4640      	mov	r0, r8
   85154:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   85158:	f000 be06 	b.w	85d68 <__malloc_unlock>
   8515c:	6895      	ldr	r5, [r2, #8]
   8515e:	4f3a      	ldr	r7, [pc, #232]	; (85248 <_free_r+0x1c4>)
   85160:	4403      	add	r3, r0
   85162:	42bd      	cmp	r5, r7
   85164:	d03f      	beq.n	851e6 <_free_r+0x162>
   85166:	68d0      	ldr	r0, [r2, #12]
   85168:	f043 0201 	orr.w	r2, r3, #1
   8516c:	60e8      	str	r0, [r5, #12]
   8516e:	6085      	str	r5, [r0, #8]
   85170:	6062      	str	r2, [r4, #4]
   85172:	50e3      	str	r3, [r4, r3]
   85174:	e7b3      	b.n	850de <_free_r+0x5a>
   85176:	07ff      	lsls	r7, r7, #31
   85178:	4403      	add	r3, r0
   8517a:	d407      	bmi.n	8518c <_free_r+0x108>
   8517c:	f855 5c08 	ldr.w	r5, [r5, #-8]
   85180:	1b64      	subs	r4, r4, r5
   85182:	68e2      	ldr	r2, [r4, #12]
   85184:	68a0      	ldr	r0, [r4, #8]
   85186:	442b      	add	r3, r5
   85188:	60c2      	str	r2, [r0, #12]
   8518a:	6090      	str	r0, [r2, #8]
   8518c:	4a2f      	ldr	r2, [pc, #188]	; (8524c <_free_r+0x1c8>)
   8518e:	f043 0001 	orr.w	r0, r3, #1
   85192:	6812      	ldr	r2, [r2, #0]
   85194:	6060      	str	r0, [r4, #4]
   85196:	4293      	cmp	r3, r2
   85198:	608c      	str	r4, [r1, #8]
   8519a:	d3b6      	bcc.n	8510a <_free_r+0x86>
   8519c:	4b2c      	ldr	r3, [pc, #176]	; (85250 <_free_r+0x1cc>)
   8519e:	4640      	mov	r0, r8
   851a0:	6819      	ldr	r1, [r3, #0]
   851a2:	f7ff ff21 	bl	84fe8 <_malloc_trim_r>
   851a6:	e7b0      	b.n	8510a <_free_r+0x86>
   851a8:	1811      	adds	r1, r2, r0
   851aa:	6849      	ldr	r1, [r1, #4]
   851ac:	07c9      	lsls	r1, r1, #31
   851ae:	d444      	bmi.n	8523a <_free_r+0x1b6>
   851b0:	6891      	ldr	r1, [r2, #8]
   851b2:	4403      	add	r3, r0
   851b4:	68d2      	ldr	r2, [r2, #12]
   851b6:	f043 0001 	orr.w	r0, r3, #1
   851ba:	60ca      	str	r2, [r1, #12]
   851bc:	6091      	str	r1, [r2, #8]
   851be:	6060      	str	r0, [r4, #4]
   851c0:	50e3      	str	r3, [r4, r3]
   851c2:	e7a2      	b.n	8510a <_free_r+0x86>
   851c4:	2a14      	cmp	r2, #20
   851c6:	d817      	bhi.n	851f8 <_free_r+0x174>
   851c8:	f102 075c 	add.w	r7, r2, #92	; 0x5c
   851cc:	007f      	lsls	r7, r7, #1
   851ce:	f102 055b 	add.w	r5, r2, #91	; 0x5b
   851d2:	e7a9      	b.n	85128 <_free_r+0xa4>
   851d4:	10aa      	asrs	r2, r5, #2
   851d6:	684b      	ldr	r3, [r1, #4]
   851d8:	2501      	movs	r5, #1
   851da:	fa05 f202 	lsl.w	r2, r5, r2
   851de:	4313      	orrs	r3, r2
   851e0:	604b      	str	r3, [r1, #4]
   851e2:	4602      	mov	r2, r0
   851e4:	e7b1      	b.n	8514a <_free_r+0xc6>
   851e6:	f043 0201 	orr.w	r2, r3, #1
   851ea:	614c      	str	r4, [r1, #20]
   851ec:	610c      	str	r4, [r1, #16]
   851ee:	60e5      	str	r5, [r4, #12]
   851f0:	60a5      	str	r5, [r4, #8]
   851f2:	6062      	str	r2, [r4, #4]
   851f4:	50e3      	str	r3, [r4, r3]
   851f6:	e788      	b.n	8510a <_free_r+0x86>
   851f8:	2a54      	cmp	r2, #84	; 0x54
   851fa:	d806      	bhi.n	8520a <_free_r+0x186>
   851fc:	0b1a      	lsrs	r2, r3, #12
   851fe:	f102 076f 	add.w	r7, r2, #111	; 0x6f
   85202:	007f      	lsls	r7, r7, #1
   85204:	f102 056e 	add.w	r5, r2, #110	; 0x6e
   85208:	e78e      	b.n	85128 <_free_r+0xa4>
   8520a:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   8520e:	d806      	bhi.n	8521e <_free_r+0x19a>
   85210:	0bda      	lsrs	r2, r3, #15
   85212:	f102 0778 	add.w	r7, r2, #120	; 0x78
   85216:	007f      	lsls	r7, r7, #1
   85218:	f102 0577 	add.w	r5, r2, #119	; 0x77
   8521c:	e784      	b.n	85128 <_free_r+0xa4>
   8521e:	f240 5054 	movw	r0, #1364	; 0x554
   85222:	4282      	cmp	r2, r0
   85224:	d806      	bhi.n	85234 <_free_r+0x1b0>
   85226:	0c9a      	lsrs	r2, r3, #18
   85228:	f102 077d 	add.w	r7, r2, #125	; 0x7d
   8522c:	007f      	lsls	r7, r7, #1
   8522e:	f102 057c 	add.w	r5, r2, #124	; 0x7c
   85232:	e779      	b.n	85128 <_free_r+0xa4>
   85234:	27fe      	movs	r7, #254	; 0xfe
   85236:	257e      	movs	r5, #126	; 0x7e
   85238:	e776      	b.n	85128 <_free_r+0xa4>
   8523a:	f043 0201 	orr.w	r2, r3, #1
   8523e:	6062      	str	r2, [r4, #4]
   85240:	50e3      	str	r3, [r4, r3]
   85242:	e762      	b.n	8510a <_free_r+0x86>
   85244:	200705a8 	.word	0x200705a8
   85248:	200705b0 	.word	0x200705b0
   8524c:	200709b0 	.word	0x200709b0
   85250:	20078c48 	.word	0x20078c48

00085254 <__sfvwrite_r>:
   85254:	6893      	ldr	r3, [r2, #8]
   85256:	2b00      	cmp	r3, #0
   85258:	f000 80ab 	beq.w	853b2 <__sfvwrite_r+0x15e>
   8525c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   85260:	898b      	ldrh	r3, [r1, #12]
   85262:	b085      	sub	sp, #20
   85264:	460c      	mov	r4, r1
   85266:	0719      	lsls	r1, r3, #28
   85268:	9002      	str	r0, [sp, #8]
   8526a:	4616      	mov	r6, r2
   8526c:	d528      	bpl.n	852c0 <__sfvwrite_r+0x6c>
   8526e:	6922      	ldr	r2, [r4, #16]
   85270:	b332      	cbz	r2, 852c0 <__sfvwrite_r+0x6c>
   85272:	f003 0802 	and.w	r8, r3, #2
   85276:	fa1f f088 	uxth.w	r0, r8
   8527a:	6835      	ldr	r5, [r6, #0]
   8527c:	b378      	cbz	r0, 852de <__sfvwrite_r+0x8a>
   8527e:	f04f 0900 	mov.w	r9, #0
   85282:	46c8      	mov	r8, r9
   85284:	f8df a2d0 	ldr.w	sl, [pc, #720]	; 85558 <__sfvwrite_r+0x304>
   85288:	f1b8 0f00 	cmp.w	r8, #0
   8528c:	f000 808b 	beq.w	853a6 <__sfvwrite_r+0x152>
   85290:	45d0      	cmp	r8, sl
   85292:	4643      	mov	r3, r8
   85294:	464a      	mov	r2, r9
   85296:	bf28      	it	cs
   85298:	4653      	movcs	r3, sl
   8529a:	69e1      	ldr	r1, [r4, #28]
   8529c:	9802      	ldr	r0, [sp, #8]
   8529e:	6a67      	ldr	r7, [r4, #36]	; 0x24
   852a0:	47b8      	blx	r7
   852a2:	2800      	cmp	r0, #0
   852a4:	f340 80a5 	ble.w	853f2 <__sfvwrite_r+0x19e>
   852a8:	68b3      	ldr	r3, [r6, #8]
   852aa:	4481      	add	r9, r0
   852ac:	1a1b      	subs	r3, r3, r0
   852ae:	ebc0 0808 	rsb	r8, r0, r8
   852b2:	60b3      	str	r3, [r6, #8]
   852b4:	2b00      	cmp	r3, #0
   852b6:	d1e7      	bne.n	85288 <__sfvwrite_r+0x34>
   852b8:	2000      	movs	r0, #0
   852ba:	b005      	add	sp, #20
   852bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   852c0:	4621      	mov	r1, r4
   852c2:	9802      	ldr	r0, [sp, #8]
   852c4:	f7ff fc6a 	bl	84b9c <__swsetup_r>
   852c8:	2800      	cmp	r0, #0
   852ca:	f040 813c 	bne.w	85546 <__sfvwrite_r+0x2f2>
   852ce:	89a3      	ldrh	r3, [r4, #12]
   852d0:	6835      	ldr	r5, [r6, #0]
   852d2:	f003 0802 	and.w	r8, r3, #2
   852d6:	fa1f f088 	uxth.w	r0, r8
   852da:	2800      	cmp	r0, #0
   852dc:	d1cf      	bne.n	8527e <__sfvwrite_r+0x2a>
   852de:	f013 0901 	ands.w	r9, r3, #1
   852e2:	f040 8090 	bne.w	85406 <__sfvwrite_r+0x1b2>
   852e6:	464f      	mov	r7, r9
   852e8:	9601      	str	r6, [sp, #4]
   852ea:	2f00      	cmp	r7, #0
   852ec:	d056      	beq.n	8539c <__sfvwrite_r+0x148>
   852ee:	059a      	lsls	r2, r3, #22
   852f0:	f8d4 8008 	ldr.w	r8, [r4, #8]
   852f4:	d55f      	bpl.n	853b6 <__sfvwrite_r+0x162>
   852f6:	4547      	cmp	r7, r8
   852f8:	46c2      	mov	sl, r8
   852fa:	f0c0 80bf 	bcc.w	8547c <__sfvwrite_r+0x228>
   852fe:	f413 6f90 	tst.w	r3, #1152	; 0x480
   85302:	f000 80bd 	beq.w	85480 <__sfvwrite_r+0x22c>
   85306:	6962      	ldr	r2, [r4, #20]
   85308:	6820      	ldr	r0, [r4, #0]
   8530a:	6921      	ldr	r1, [r4, #16]
   8530c:	eb02 0842 	add.w	r8, r2, r2, lsl #1
   85310:	ebc1 0a00 	rsb	sl, r1, r0
   85314:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
   85318:	f10a 0001 	add.w	r0, sl, #1
   8531c:	ea4f 0868 	mov.w	r8, r8, asr #1
   85320:	4438      	add	r0, r7
   85322:	4540      	cmp	r0, r8
   85324:	4642      	mov	r2, r8
   85326:	bf84      	itt	hi
   85328:	4680      	movhi	r8, r0
   8532a:	4642      	movhi	r2, r8
   8532c:	055b      	lsls	r3, r3, #21
   8532e:	f140 80f2 	bpl.w	85516 <__sfvwrite_r+0x2c2>
   85332:	4611      	mov	r1, r2
   85334:	9802      	ldr	r0, [sp, #8]
   85336:	f000 f9bf 	bl	856b8 <_malloc_r>
   8533a:	4683      	mov	fp, r0
   8533c:	2800      	cmp	r0, #0
   8533e:	f000 8105 	beq.w	8554c <__sfvwrite_r+0x2f8>
   85342:	4652      	mov	r2, sl
   85344:	6921      	ldr	r1, [r4, #16]
   85346:	f7fe faed 	bl	83924 <memcpy>
   8534a:	89a3      	ldrh	r3, [r4, #12]
   8534c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
   85350:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   85354:	81a3      	strh	r3, [r4, #12]
   85356:	ebca 0308 	rsb	r3, sl, r8
   8535a:	eb0b 000a 	add.w	r0, fp, sl
   8535e:	f8c4 8014 	str.w	r8, [r4, #20]
   85362:	46ba      	mov	sl, r7
   85364:	46b8      	mov	r8, r7
   85366:	f8c4 b010 	str.w	fp, [r4, #16]
   8536a:	6020      	str	r0, [r4, #0]
   8536c:	60a3      	str	r3, [r4, #8]
   8536e:	4652      	mov	r2, sl
   85370:	4649      	mov	r1, r9
   85372:	f000 fc93 	bl	85c9c <memmove>
   85376:	68a0      	ldr	r0, [r4, #8]
   85378:	6823      	ldr	r3, [r4, #0]
   8537a:	ebc8 0000 	rsb	r0, r8, r0
   8537e:	60a0      	str	r0, [r4, #8]
   85380:	4638      	mov	r0, r7
   85382:	4453      	add	r3, sl
   85384:	6023      	str	r3, [r4, #0]
   85386:	9a01      	ldr	r2, [sp, #4]
   85388:	4481      	add	r9, r0
   8538a:	6893      	ldr	r3, [r2, #8]
   8538c:	1a3f      	subs	r7, r7, r0
   8538e:	1a1b      	subs	r3, r3, r0
   85390:	6093      	str	r3, [r2, #8]
   85392:	2b00      	cmp	r3, #0
   85394:	d090      	beq.n	852b8 <__sfvwrite_r+0x64>
   85396:	89a3      	ldrh	r3, [r4, #12]
   85398:	2f00      	cmp	r7, #0
   8539a:	d1a8      	bne.n	852ee <__sfvwrite_r+0x9a>
   8539c:	f8d5 9000 	ldr.w	r9, [r5]
   853a0:	686f      	ldr	r7, [r5, #4]
   853a2:	3508      	adds	r5, #8
   853a4:	e7a1      	b.n	852ea <__sfvwrite_r+0x96>
   853a6:	f8d5 9000 	ldr.w	r9, [r5]
   853aa:	f8d5 8004 	ldr.w	r8, [r5, #4]
   853ae:	3508      	adds	r5, #8
   853b0:	e76a      	b.n	85288 <__sfvwrite_r+0x34>
   853b2:	2000      	movs	r0, #0
   853b4:	4770      	bx	lr
   853b6:	6820      	ldr	r0, [r4, #0]
   853b8:	6923      	ldr	r3, [r4, #16]
   853ba:	4298      	cmp	r0, r3
   853bc:	d803      	bhi.n	853c6 <__sfvwrite_r+0x172>
   853be:	6962      	ldr	r2, [r4, #20]
   853c0:	4297      	cmp	r7, r2
   853c2:	f080 8083 	bcs.w	854cc <__sfvwrite_r+0x278>
   853c6:	45b8      	cmp	r8, r7
   853c8:	bf28      	it	cs
   853ca:	46b8      	movcs	r8, r7
   853cc:	4649      	mov	r1, r9
   853ce:	4642      	mov	r2, r8
   853d0:	f000 fc64 	bl	85c9c <memmove>
   853d4:	68a3      	ldr	r3, [r4, #8]
   853d6:	6822      	ldr	r2, [r4, #0]
   853d8:	ebc8 0303 	rsb	r3, r8, r3
   853dc:	4442      	add	r2, r8
   853de:	60a3      	str	r3, [r4, #8]
   853e0:	6022      	str	r2, [r4, #0]
   853e2:	2b00      	cmp	r3, #0
   853e4:	d148      	bne.n	85478 <__sfvwrite_r+0x224>
   853e6:	4621      	mov	r1, r4
   853e8:	9802      	ldr	r0, [sp, #8]
   853ea:	f7ff fcef 	bl	84dcc <_fflush_r>
   853ee:	2800      	cmp	r0, #0
   853f0:	d042      	beq.n	85478 <__sfvwrite_r+0x224>
   853f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   853f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   853fa:	f04f 30ff 	mov.w	r0, #4294967295
   853fe:	81a3      	strh	r3, [r4, #12]
   85400:	b005      	add	sp, #20
   85402:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   85406:	4680      	mov	r8, r0
   85408:	4682      	mov	sl, r0
   8540a:	4681      	mov	r9, r0
   8540c:	9001      	str	r0, [sp, #4]
   8540e:	f1b9 0f00 	cmp.w	r9, #0
   85412:	d029      	beq.n	85468 <__sfvwrite_r+0x214>
   85414:	9b01      	ldr	r3, [sp, #4]
   85416:	2b00      	cmp	r3, #0
   85418:	d04b      	beq.n	854b2 <__sfvwrite_r+0x25e>
   8541a:	45c8      	cmp	r8, r9
   8541c:	46c3      	mov	fp, r8
   8541e:	bf28      	it	cs
   85420:	46cb      	movcs	fp, r9
   85422:	6820      	ldr	r0, [r4, #0]
   85424:	6923      	ldr	r3, [r4, #16]
   85426:	465f      	mov	r7, fp
   85428:	4298      	cmp	r0, r3
   8542a:	6962      	ldr	r2, [r4, #20]
   8542c:	d903      	bls.n	85436 <__sfvwrite_r+0x1e2>
   8542e:	68a3      	ldr	r3, [r4, #8]
   85430:	4413      	add	r3, r2
   85432:	459b      	cmp	fp, r3
   85434:	dc5c      	bgt.n	854f0 <__sfvwrite_r+0x29c>
   85436:	4593      	cmp	fp, r2
   85438:	db24      	blt.n	85484 <__sfvwrite_r+0x230>
   8543a:	4613      	mov	r3, r2
   8543c:	6a67      	ldr	r7, [r4, #36]	; 0x24
   8543e:	4652      	mov	r2, sl
   85440:	69e1      	ldr	r1, [r4, #28]
   85442:	9802      	ldr	r0, [sp, #8]
   85444:	47b8      	blx	r7
   85446:	1e07      	subs	r7, r0, #0
   85448:	ddd3      	ble.n	853f2 <__sfvwrite_r+0x19e>
   8544a:	ebb8 0807 	subs.w	r8, r8, r7
   8544e:	d027      	beq.n	854a0 <__sfvwrite_r+0x24c>
   85450:	68b3      	ldr	r3, [r6, #8]
   85452:	44ba      	add	sl, r7
   85454:	1bdb      	subs	r3, r3, r7
   85456:	ebc7 0909 	rsb	r9, r7, r9
   8545a:	60b3      	str	r3, [r6, #8]
   8545c:	2b00      	cmp	r3, #0
   8545e:	f43f af2b 	beq.w	852b8 <__sfvwrite_r+0x64>
   85462:	f1b9 0f00 	cmp.w	r9, #0
   85466:	d1d5      	bne.n	85414 <__sfvwrite_r+0x1c0>
   85468:	2300      	movs	r3, #0
   8546a:	f8d5 a000 	ldr.w	sl, [r5]
   8546e:	f8d5 9004 	ldr.w	r9, [r5, #4]
   85472:	9301      	str	r3, [sp, #4]
   85474:	3508      	adds	r5, #8
   85476:	e7ca      	b.n	8540e <__sfvwrite_r+0x1ba>
   85478:	4640      	mov	r0, r8
   8547a:	e784      	b.n	85386 <__sfvwrite_r+0x132>
   8547c:	46b8      	mov	r8, r7
   8547e:	46ba      	mov	sl, r7
   85480:	6820      	ldr	r0, [r4, #0]
   85482:	e774      	b.n	8536e <__sfvwrite_r+0x11a>
   85484:	465a      	mov	r2, fp
   85486:	4651      	mov	r1, sl
   85488:	f000 fc08 	bl	85c9c <memmove>
   8548c:	68a2      	ldr	r2, [r4, #8]
   8548e:	6823      	ldr	r3, [r4, #0]
   85490:	ebcb 0202 	rsb	r2, fp, r2
   85494:	445b      	add	r3, fp
   85496:	ebb8 0807 	subs.w	r8, r8, r7
   8549a:	60a2      	str	r2, [r4, #8]
   8549c:	6023      	str	r3, [r4, #0]
   8549e:	d1d7      	bne.n	85450 <__sfvwrite_r+0x1fc>
   854a0:	4621      	mov	r1, r4
   854a2:	9802      	ldr	r0, [sp, #8]
   854a4:	f7ff fc92 	bl	84dcc <_fflush_r>
   854a8:	2800      	cmp	r0, #0
   854aa:	d1a2      	bne.n	853f2 <__sfvwrite_r+0x19e>
   854ac:	f8cd 8004 	str.w	r8, [sp, #4]
   854b0:	e7ce      	b.n	85450 <__sfvwrite_r+0x1fc>
   854b2:	464a      	mov	r2, r9
   854b4:	210a      	movs	r1, #10
   854b6:	4650      	mov	r0, sl
   854b8:	f000 fbaa 	bl	85c10 <memchr>
   854bc:	2800      	cmp	r0, #0
   854be:	d03d      	beq.n	8553c <__sfvwrite_r+0x2e8>
   854c0:	3001      	adds	r0, #1
   854c2:	2301      	movs	r3, #1
   854c4:	ebca 0800 	rsb	r8, sl, r0
   854c8:	9301      	str	r3, [sp, #4]
   854ca:	e7a6      	b.n	8541a <__sfvwrite_r+0x1c6>
   854cc:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   854d0:	42bb      	cmp	r3, r7
   854d2:	bf28      	it	cs
   854d4:	463b      	movcs	r3, r7
   854d6:	fb93 f3f2 	sdiv	r3, r3, r2
   854da:	69e1      	ldr	r1, [r4, #28]
   854dc:	fb02 f303 	mul.w	r3, r2, r3
   854e0:	9802      	ldr	r0, [sp, #8]
   854e2:	464a      	mov	r2, r9
   854e4:	6a66      	ldr	r6, [r4, #36]	; 0x24
   854e6:	47b0      	blx	r6
   854e8:	2800      	cmp	r0, #0
   854ea:	f73f af4c 	bgt.w	85386 <__sfvwrite_r+0x132>
   854ee:	e780      	b.n	853f2 <__sfvwrite_r+0x19e>
   854f0:	461a      	mov	r2, r3
   854f2:	4651      	mov	r1, sl
   854f4:	9303      	str	r3, [sp, #12]
   854f6:	f000 fbd1 	bl	85c9c <memmove>
   854fa:	6822      	ldr	r2, [r4, #0]
   854fc:	9b03      	ldr	r3, [sp, #12]
   854fe:	4621      	mov	r1, r4
   85500:	441a      	add	r2, r3
   85502:	6022      	str	r2, [r4, #0]
   85504:	9802      	ldr	r0, [sp, #8]
   85506:	f7ff fc61 	bl	84dcc <_fflush_r>
   8550a:	9b03      	ldr	r3, [sp, #12]
   8550c:	2800      	cmp	r0, #0
   8550e:	f47f af70 	bne.w	853f2 <__sfvwrite_r+0x19e>
   85512:	461f      	mov	r7, r3
   85514:	e799      	b.n	8544a <__sfvwrite_r+0x1f6>
   85516:	9802      	ldr	r0, [sp, #8]
   85518:	f000 fc28 	bl	85d6c <_realloc_r>
   8551c:	4683      	mov	fp, r0
   8551e:	2800      	cmp	r0, #0
   85520:	f47f af19 	bne.w	85356 <__sfvwrite_r+0x102>
   85524:	9d02      	ldr	r5, [sp, #8]
   85526:	6921      	ldr	r1, [r4, #16]
   85528:	4628      	mov	r0, r5
   8552a:	f7ff fdab 	bl	85084 <_free_r>
   8552e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   85532:	220c      	movs	r2, #12
   85534:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   85538:	602a      	str	r2, [r5, #0]
   8553a:	e75c      	b.n	853f6 <__sfvwrite_r+0x1a2>
   8553c:	2301      	movs	r3, #1
   8553e:	f109 0801 	add.w	r8, r9, #1
   85542:	9301      	str	r3, [sp, #4]
   85544:	e769      	b.n	8541a <__sfvwrite_r+0x1c6>
   85546:	f04f 30ff 	mov.w	r0, #4294967295
   8554a:	e6b6      	b.n	852ba <__sfvwrite_r+0x66>
   8554c:	9a02      	ldr	r2, [sp, #8]
   8554e:	230c      	movs	r3, #12
   85550:	6013      	str	r3, [r2, #0]
   85552:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   85556:	e74e      	b.n	853f6 <__sfvwrite_r+0x1a2>
   85558:	7ffffc00 	.word	0x7ffffc00

0008555c <_fwalk_reent>:
   8555c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   85560:	f510 7638 	adds.w	r6, r0, #736	; 0x2e0
   85564:	d01e      	beq.n	855a4 <_fwalk_reent+0x48>
   85566:	4688      	mov	r8, r1
   85568:	4607      	mov	r7, r0
   8556a:	f04f 0900 	mov.w	r9, #0
   8556e:	6875      	ldr	r5, [r6, #4]
   85570:	68b4      	ldr	r4, [r6, #8]
   85572:	3d01      	subs	r5, #1
   85574:	d410      	bmi.n	85598 <_fwalk_reent+0x3c>
   85576:	89a3      	ldrh	r3, [r4, #12]
   85578:	3d01      	subs	r5, #1
   8557a:	2b01      	cmp	r3, #1
   8557c:	d908      	bls.n	85590 <_fwalk_reent+0x34>
   8557e:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
   85582:	3301      	adds	r3, #1
   85584:	d004      	beq.n	85590 <_fwalk_reent+0x34>
   85586:	4621      	mov	r1, r4
   85588:	4638      	mov	r0, r7
   8558a:	47c0      	blx	r8
   8558c:	ea49 0900 	orr.w	r9, r9, r0
   85590:	1c6b      	adds	r3, r5, #1
   85592:	f104 0468 	add.w	r4, r4, #104	; 0x68
   85596:	d1ee      	bne.n	85576 <_fwalk_reent+0x1a>
   85598:	6836      	ldr	r6, [r6, #0]
   8559a:	2e00      	cmp	r6, #0
   8559c:	d1e7      	bne.n	8556e <_fwalk_reent+0x12>
   8559e:	4648      	mov	r0, r9
   855a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   855a4:	46b1      	mov	r9, r6
   855a6:	4648      	mov	r0, r9
   855a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000855ac <__locale_charset>:
   855ac:	4800      	ldr	r0, [pc, #0]	; (855b0 <__locale_charset+0x4>)
   855ae:	4770      	bx	lr
   855b0:	20070584 	.word	0x20070584

000855b4 <__locale_mb_cur_max>:
   855b4:	4b01      	ldr	r3, [pc, #4]	; (855bc <__locale_mb_cur_max+0x8>)
   855b6:	6818      	ldr	r0, [r3, #0]
   855b8:	4770      	bx	lr
   855ba:	bf00      	nop
   855bc:	200705a4 	.word	0x200705a4

000855c0 <__swhatbuf_r>:
   855c0:	b570      	push	{r4, r5, r6, lr}
   855c2:	460e      	mov	r6, r1
   855c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   855c8:	b090      	sub	sp, #64	; 0x40
   855ca:	2900      	cmp	r1, #0
   855cc:	4614      	mov	r4, r2
   855ce:	461d      	mov	r5, r3
   855d0:	db14      	blt.n	855fc <__swhatbuf_r+0x3c>
   855d2:	aa01      	add	r2, sp, #4
   855d4:	f000 ff54 	bl	86480 <_fstat_r>
   855d8:	2800      	cmp	r0, #0
   855da:	db0f      	blt.n	855fc <__swhatbuf_r+0x3c>
   855dc:	9a02      	ldr	r2, [sp, #8]
   855de:	f44f 6380 	mov.w	r3, #1024	; 0x400
   855e2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
   855e6:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
   855ea:	fab2 f282 	clz	r2, r2
   855ee:	f44f 6000 	mov.w	r0, #2048	; 0x800
   855f2:	0952      	lsrs	r2, r2, #5
   855f4:	602a      	str	r2, [r5, #0]
   855f6:	6023      	str	r3, [r4, #0]
   855f8:	b010      	add	sp, #64	; 0x40
   855fa:	bd70      	pop	{r4, r5, r6, pc}
   855fc:	89b2      	ldrh	r2, [r6, #12]
   855fe:	2000      	movs	r0, #0
   85600:	f002 0280 	and.w	r2, r2, #128	; 0x80
   85604:	b292      	uxth	r2, r2
   85606:	6028      	str	r0, [r5, #0]
   85608:	b11a      	cbz	r2, 85612 <__swhatbuf_r+0x52>
   8560a:	2340      	movs	r3, #64	; 0x40
   8560c:	6023      	str	r3, [r4, #0]
   8560e:	b010      	add	sp, #64	; 0x40
   85610:	bd70      	pop	{r4, r5, r6, pc}
   85612:	4610      	mov	r0, r2
   85614:	f44f 6380 	mov.w	r3, #1024	; 0x400
   85618:	6023      	str	r3, [r4, #0]
   8561a:	b010      	add	sp, #64	; 0x40
   8561c:	bd70      	pop	{r4, r5, r6, pc}
   8561e:	bf00      	nop

00085620 <__smakebuf_r>:
   85620:	898a      	ldrh	r2, [r1, #12]
   85622:	460b      	mov	r3, r1
   85624:	0792      	lsls	r2, r2, #30
   85626:	d506      	bpl.n	85636 <__smakebuf_r+0x16>
   85628:	f101 0243 	add.w	r2, r1, #67	; 0x43
   8562c:	2101      	movs	r1, #1
   8562e:	601a      	str	r2, [r3, #0]
   85630:	611a      	str	r2, [r3, #16]
   85632:	6159      	str	r1, [r3, #20]
   85634:	4770      	bx	lr
   85636:	b5f0      	push	{r4, r5, r6, r7, lr}
   85638:	b083      	sub	sp, #12
   8563a:	ab01      	add	r3, sp, #4
   8563c:	466a      	mov	r2, sp
   8563e:	460c      	mov	r4, r1
   85640:	4605      	mov	r5, r0
   85642:	f7ff ffbd 	bl	855c0 <__swhatbuf_r>
   85646:	9900      	ldr	r1, [sp, #0]
   85648:	4606      	mov	r6, r0
   8564a:	4628      	mov	r0, r5
   8564c:	f000 f834 	bl	856b8 <_malloc_r>
   85650:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   85654:	b1d0      	cbz	r0, 8568c <__smakebuf_r+0x6c>
   85656:	e89d 0006 	ldmia.w	sp, {r1, r2}
   8565a:	4f12      	ldr	r7, [pc, #72]	; (856a4 <__smakebuf_r+0x84>)
   8565c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   85660:	63ef      	str	r7, [r5, #60]	; 0x3c
   85662:	81a3      	strh	r3, [r4, #12]
   85664:	6020      	str	r0, [r4, #0]
   85666:	6120      	str	r0, [r4, #16]
   85668:	6161      	str	r1, [r4, #20]
   8566a:	b91a      	cbnz	r2, 85674 <__smakebuf_r+0x54>
   8566c:	4333      	orrs	r3, r6
   8566e:	81a3      	strh	r3, [r4, #12]
   85670:	b003      	add	sp, #12
   85672:	bdf0      	pop	{r4, r5, r6, r7, pc}
   85674:	4628      	mov	r0, r5
   85676:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   8567a:	f000 ff15 	bl	864a8 <_isatty_r>
   8567e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   85682:	2800      	cmp	r0, #0
   85684:	d0f2      	beq.n	8566c <__smakebuf_r+0x4c>
   85686:	f043 0301 	orr.w	r3, r3, #1
   8568a:	e7ef      	b.n	8566c <__smakebuf_r+0x4c>
   8568c:	059a      	lsls	r2, r3, #22
   8568e:	d4ef      	bmi.n	85670 <__smakebuf_r+0x50>
   85690:	f104 0243 	add.w	r2, r4, #67	; 0x43
   85694:	f043 0302 	orr.w	r3, r3, #2
   85698:	2101      	movs	r1, #1
   8569a:	81a3      	strh	r3, [r4, #12]
   8569c:	6022      	str	r2, [r4, #0]
   8569e:	6122      	str	r2, [r4, #16]
   856a0:	6161      	str	r1, [r4, #20]
   856a2:	e7e5      	b.n	85670 <__smakebuf_r+0x50>
   856a4:	00084df9 	.word	0x00084df9

000856a8 <malloc>:
   856a8:	4b02      	ldr	r3, [pc, #8]	; (856b4 <malloc+0xc>)
   856aa:	4601      	mov	r1, r0
   856ac:	6818      	ldr	r0, [r3, #0]
   856ae:	f000 b803 	b.w	856b8 <_malloc_r>
   856b2:	bf00      	nop
   856b4:	20070580 	.word	0x20070580

000856b8 <_malloc_r>:
   856b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   856bc:	f101 050b 	add.w	r5, r1, #11
   856c0:	2d16      	cmp	r5, #22
   856c2:	b083      	sub	sp, #12
   856c4:	4606      	mov	r6, r0
   856c6:	f240 80a0 	bls.w	8580a <_malloc_r+0x152>
   856ca:	f035 0507 	bics.w	r5, r5, #7
   856ce:	f100 80c0 	bmi.w	85852 <_malloc_r+0x19a>
   856d2:	42a9      	cmp	r1, r5
   856d4:	f200 80bd 	bhi.w	85852 <_malloc_r+0x19a>
   856d8:	f000 fb44 	bl	85d64 <__malloc_lock>
   856dc:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
   856e0:	f0c0 8290 	bcc.w	85c04 <_malloc_r+0x54c>
   856e4:	0a6b      	lsrs	r3, r5, #9
   856e6:	f000 80bb 	beq.w	85860 <_malloc_r+0x1a8>
   856ea:	2b04      	cmp	r3, #4
   856ec:	f200 8177 	bhi.w	859de <_malloc_r+0x326>
   856f0:	09a8      	lsrs	r0, r5, #6
   856f2:	f100 0e39 	add.w	lr, r0, #57	; 0x39
   856f6:	ea4f 014e 	mov.w	r1, lr, lsl #1
   856fa:	3038      	adds	r0, #56	; 0x38
   856fc:	4fbe      	ldr	r7, [pc, #760]	; (859f8 <_malloc_r+0x340>)
   856fe:	eb07 0181 	add.w	r1, r7, r1, lsl #2
   85702:	684c      	ldr	r4, [r1, #4]
   85704:	3908      	subs	r1, #8
   85706:	42a1      	cmp	r1, r4
   85708:	d107      	bne.n	8571a <_malloc_r+0x62>
   8570a:	e0ae      	b.n	8586a <_malloc_r+0x1b2>
   8570c:	2a00      	cmp	r2, #0
   8570e:	f280 80ae 	bge.w	8586e <_malloc_r+0x1b6>
   85712:	68e4      	ldr	r4, [r4, #12]
   85714:	42a1      	cmp	r1, r4
   85716:	f000 80a8 	beq.w	8586a <_malloc_r+0x1b2>
   8571a:	6863      	ldr	r3, [r4, #4]
   8571c:	f023 0303 	bic.w	r3, r3, #3
   85720:	1b5a      	subs	r2, r3, r5
   85722:	2a0f      	cmp	r2, #15
   85724:	ddf2      	ble.n	8570c <_malloc_r+0x54>
   85726:	49b4      	ldr	r1, [pc, #720]	; (859f8 <_malloc_r+0x340>)
   85728:	693c      	ldr	r4, [r7, #16]
   8572a:	f101 0e08 	add.w	lr, r1, #8
   8572e:	4574      	cmp	r4, lr
   85730:	f000 81a8 	beq.w	85a84 <_malloc_r+0x3cc>
   85734:	6863      	ldr	r3, [r4, #4]
   85736:	f023 0303 	bic.w	r3, r3, #3
   8573a:	1b5a      	subs	r2, r3, r5
   8573c:	2a0f      	cmp	r2, #15
   8573e:	f300 818e 	bgt.w	85a5e <_malloc_r+0x3a6>
   85742:	2a00      	cmp	r2, #0
   85744:	f8c1 e014 	str.w	lr, [r1, #20]
   85748:	f8c1 e010 	str.w	lr, [r1, #16]
   8574c:	f280 8093 	bge.w	85876 <_malloc_r+0x1be>
   85750:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   85754:	f080 815c 	bcs.w	85a10 <_malloc_r+0x358>
   85758:	08db      	lsrs	r3, r3, #3
   8575a:	684a      	ldr	r2, [r1, #4]
   8575c:	ea4f 09a3 	mov.w	r9, r3, asr #2
   85760:	f04f 0c01 	mov.w	ip, #1
   85764:	3301      	adds	r3, #1
   85766:	f851 8033 	ldr.w	r8, [r1, r3, lsl #3]
   8576a:	fa0c f909 	lsl.w	r9, ip, r9
   8576e:	eb01 0cc3 	add.w	ip, r1, r3, lsl #3
   85772:	ea49 0202 	orr.w	r2, r9, r2
   85776:	f1ac 0c08 	sub.w	ip, ip, #8
   8577a:	f8c4 c00c 	str.w	ip, [r4, #12]
   8577e:	f8c4 8008 	str.w	r8, [r4, #8]
   85782:	604a      	str	r2, [r1, #4]
   85784:	f841 4033 	str.w	r4, [r1, r3, lsl #3]
   85788:	f8c8 400c 	str.w	r4, [r8, #12]
   8578c:	1083      	asrs	r3, r0, #2
   8578e:	2401      	movs	r4, #1
   85790:	409c      	lsls	r4, r3
   85792:	4294      	cmp	r4, r2
   85794:	d87c      	bhi.n	85890 <_malloc_r+0x1d8>
   85796:	4214      	tst	r4, r2
   85798:	d106      	bne.n	857a8 <_malloc_r+0xf0>
   8579a:	f020 0003 	bic.w	r0, r0, #3
   8579e:	0064      	lsls	r4, r4, #1
   857a0:	4214      	tst	r4, r2
   857a2:	f100 0004 	add.w	r0, r0, #4
   857a6:	d0fa      	beq.n	8579e <_malloc_r+0xe6>
   857a8:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
   857ac:	46cc      	mov	ip, r9
   857ae:	4680      	mov	r8, r0
   857b0:	f8dc 100c 	ldr.w	r1, [ip, #12]
   857b4:	458c      	cmp	ip, r1
   857b6:	d107      	bne.n	857c8 <_malloc_r+0x110>
   857b8:	e166      	b.n	85a88 <_malloc_r+0x3d0>
   857ba:	2a00      	cmp	r2, #0
   857bc:	f280 8174 	bge.w	85aa8 <_malloc_r+0x3f0>
   857c0:	68c9      	ldr	r1, [r1, #12]
   857c2:	458c      	cmp	ip, r1
   857c4:	f000 8160 	beq.w	85a88 <_malloc_r+0x3d0>
   857c8:	684b      	ldr	r3, [r1, #4]
   857ca:	f023 0303 	bic.w	r3, r3, #3
   857ce:	1b5a      	subs	r2, r3, r5
   857d0:	2a0f      	cmp	r2, #15
   857d2:	ddf2      	ble.n	857ba <_malloc_r+0x102>
   857d4:	460c      	mov	r4, r1
   857d6:	68cb      	ldr	r3, [r1, #12]
   857d8:	f854 cf08 	ldr.w	ip, [r4, #8]!
   857dc:	f045 0801 	orr.w	r8, r5, #1
   857e0:	f8c1 8004 	str.w	r8, [r1, #4]
   857e4:	440d      	add	r5, r1
   857e6:	f042 0101 	orr.w	r1, r2, #1
   857ea:	f8cc 300c 	str.w	r3, [ip, #12]
   857ee:	4630      	mov	r0, r6
   857f0:	f8c3 c008 	str.w	ip, [r3, #8]
   857f4:	617d      	str	r5, [r7, #20]
   857f6:	613d      	str	r5, [r7, #16]
   857f8:	f8c5 e00c 	str.w	lr, [r5, #12]
   857fc:	f8c5 e008 	str.w	lr, [r5, #8]
   85800:	6069      	str	r1, [r5, #4]
   85802:	50aa      	str	r2, [r5, r2]
   85804:	f000 fab0 	bl	85d68 <__malloc_unlock>
   85808:	e01f      	b.n	8584a <_malloc_r+0x192>
   8580a:	2910      	cmp	r1, #16
   8580c:	d821      	bhi.n	85852 <_malloc_r+0x19a>
   8580e:	f000 faa9 	bl	85d64 <__malloc_lock>
   85812:	2510      	movs	r5, #16
   85814:	2306      	movs	r3, #6
   85816:	2002      	movs	r0, #2
   85818:	4f77      	ldr	r7, [pc, #476]	; (859f8 <_malloc_r+0x340>)
   8581a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
   8581e:	685c      	ldr	r4, [r3, #4]
   85820:	f1a3 0208 	sub.w	r2, r3, #8
   85824:	4294      	cmp	r4, r2
   85826:	f000 8138 	beq.w	85a9a <_malloc_r+0x3e2>
   8582a:	6863      	ldr	r3, [r4, #4]
   8582c:	68e1      	ldr	r1, [r4, #12]
   8582e:	f023 0303 	bic.w	r3, r3, #3
   85832:	4423      	add	r3, r4
   85834:	685a      	ldr	r2, [r3, #4]
   85836:	68a5      	ldr	r5, [r4, #8]
   85838:	f042 0201 	orr.w	r2, r2, #1
   8583c:	60e9      	str	r1, [r5, #12]
   8583e:	4630      	mov	r0, r6
   85840:	608d      	str	r5, [r1, #8]
   85842:	605a      	str	r2, [r3, #4]
   85844:	f000 fa90 	bl	85d68 <__malloc_unlock>
   85848:	3408      	adds	r4, #8
   8584a:	4620      	mov	r0, r4
   8584c:	b003      	add	sp, #12
   8584e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   85852:	2400      	movs	r4, #0
   85854:	4620      	mov	r0, r4
   85856:	230c      	movs	r3, #12
   85858:	6033      	str	r3, [r6, #0]
   8585a:	b003      	add	sp, #12
   8585c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   85860:	2180      	movs	r1, #128	; 0x80
   85862:	f04f 0e40 	mov.w	lr, #64	; 0x40
   85866:	203f      	movs	r0, #63	; 0x3f
   85868:	e748      	b.n	856fc <_malloc_r+0x44>
   8586a:	4670      	mov	r0, lr
   8586c:	e75b      	b.n	85726 <_malloc_r+0x6e>
   8586e:	4423      	add	r3, r4
   85870:	685a      	ldr	r2, [r3, #4]
   85872:	68e1      	ldr	r1, [r4, #12]
   85874:	e7df      	b.n	85836 <_malloc_r+0x17e>
   85876:	4423      	add	r3, r4
   85878:	685a      	ldr	r2, [r3, #4]
   8587a:	4630      	mov	r0, r6
   8587c:	f042 0201 	orr.w	r2, r2, #1
   85880:	605a      	str	r2, [r3, #4]
   85882:	3408      	adds	r4, #8
   85884:	f000 fa70 	bl	85d68 <__malloc_unlock>
   85888:	4620      	mov	r0, r4
   8588a:	b003      	add	sp, #12
   8588c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   85890:	68bc      	ldr	r4, [r7, #8]
   85892:	6863      	ldr	r3, [r4, #4]
   85894:	f023 0803 	bic.w	r8, r3, #3
   85898:	45a8      	cmp	r8, r5
   8589a:	d304      	bcc.n	858a6 <_malloc_r+0x1ee>
   8589c:	ebc5 0308 	rsb	r3, r5, r8
   858a0:	2b0f      	cmp	r3, #15
   858a2:	f300 808c 	bgt.w	859be <_malloc_r+0x306>
   858a6:	4b55      	ldr	r3, [pc, #340]	; (859fc <_malloc_r+0x344>)
   858a8:	f8df 9160 	ldr.w	r9, [pc, #352]	; 85a0c <_malloc_r+0x354>
   858ac:	681a      	ldr	r2, [r3, #0]
   858ae:	f8d9 3000 	ldr.w	r3, [r9]
   858b2:	442a      	add	r2, r5
   858b4:	3301      	adds	r3, #1
   858b6:	eb04 0a08 	add.w	sl, r4, r8
   858ba:	f000 8160 	beq.w	85b7e <_malloc_r+0x4c6>
   858be:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
   858c2:	320f      	adds	r2, #15
   858c4:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
   858c8:	f022 020f 	bic.w	r2, r2, #15
   858cc:	4611      	mov	r1, r2
   858ce:	4630      	mov	r0, r6
   858d0:	9201      	str	r2, [sp, #4]
   858d2:	f000 fc35 	bl	86140 <_sbrk_r>
   858d6:	f1b0 3fff 	cmp.w	r0, #4294967295
   858da:	4683      	mov	fp, r0
   858dc:	9a01      	ldr	r2, [sp, #4]
   858de:	f000 8158 	beq.w	85b92 <_malloc_r+0x4da>
   858e2:	4582      	cmp	sl, r0
   858e4:	f200 80fc 	bhi.w	85ae0 <_malloc_r+0x428>
   858e8:	4b45      	ldr	r3, [pc, #276]	; (85a00 <_malloc_r+0x348>)
   858ea:	45da      	cmp	sl, fp
   858ec:	6819      	ldr	r1, [r3, #0]
   858ee:	4411      	add	r1, r2
   858f0:	6019      	str	r1, [r3, #0]
   858f2:	f000 8153 	beq.w	85b9c <_malloc_r+0x4e4>
   858f6:	f8d9 0000 	ldr.w	r0, [r9]
   858fa:	f8df e110 	ldr.w	lr, [pc, #272]	; 85a0c <_malloc_r+0x354>
   858fe:	3001      	adds	r0, #1
   85900:	bf1b      	ittet	ne
   85902:	ebca 0a0b 	rsbne	sl, sl, fp
   85906:	4451      	addne	r1, sl
   85908:	f8ce b000 	streq.w	fp, [lr]
   8590c:	6019      	strne	r1, [r3, #0]
   8590e:	f01b 0107 	ands.w	r1, fp, #7
   85912:	f000 8117 	beq.w	85b44 <_malloc_r+0x48c>
   85916:	f1c1 0008 	rsb	r0, r1, #8
   8591a:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
   8591e:	4483      	add	fp, r0
   85920:	3108      	adds	r1, #8
   85922:	445a      	add	r2, fp
   85924:	f3c2 020b 	ubfx	r2, r2, #0, #12
   85928:	ebc2 0901 	rsb	r9, r2, r1
   8592c:	4649      	mov	r1, r9
   8592e:	4630      	mov	r0, r6
   85930:	9301      	str	r3, [sp, #4]
   85932:	f000 fc05 	bl	86140 <_sbrk_r>
   85936:	1c43      	adds	r3, r0, #1
   85938:	9b01      	ldr	r3, [sp, #4]
   8593a:	f000 813f 	beq.w	85bbc <_malloc_r+0x504>
   8593e:	ebcb 0200 	rsb	r2, fp, r0
   85942:	444a      	add	r2, r9
   85944:	f042 0201 	orr.w	r2, r2, #1
   85948:	6819      	ldr	r1, [r3, #0]
   8594a:	42bc      	cmp	r4, r7
   8594c:	4449      	add	r1, r9
   8594e:	f8c7 b008 	str.w	fp, [r7, #8]
   85952:	6019      	str	r1, [r3, #0]
   85954:	f8cb 2004 	str.w	r2, [fp, #4]
   85958:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 85a00 <_malloc_r+0x348>
   8595c:	d016      	beq.n	8598c <_malloc_r+0x2d4>
   8595e:	f1b8 0f0f 	cmp.w	r8, #15
   85962:	f240 80fd 	bls.w	85b60 <_malloc_r+0x4a8>
   85966:	6862      	ldr	r2, [r4, #4]
   85968:	f1a8 030c 	sub.w	r3, r8, #12
   8596c:	f023 0307 	bic.w	r3, r3, #7
   85970:	f002 0201 	and.w	r2, r2, #1
   85974:	18e0      	adds	r0, r4, r3
   85976:	f04f 0e05 	mov.w	lr, #5
   8597a:	431a      	orrs	r2, r3
   8597c:	2b0f      	cmp	r3, #15
   8597e:	6062      	str	r2, [r4, #4]
   85980:	f8c0 e004 	str.w	lr, [r0, #4]
   85984:	f8c0 e008 	str.w	lr, [r0, #8]
   85988:	f200 811c 	bhi.w	85bc4 <_malloc_r+0x50c>
   8598c:	4b1d      	ldr	r3, [pc, #116]	; (85a04 <_malloc_r+0x34c>)
   8598e:	68bc      	ldr	r4, [r7, #8]
   85990:	681a      	ldr	r2, [r3, #0]
   85992:	4291      	cmp	r1, r2
   85994:	bf88      	it	hi
   85996:	6019      	strhi	r1, [r3, #0]
   85998:	4b1b      	ldr	r3, [pc, #108]	; (85a08 <_malloc_r+0x350>)
   8599a:	681a      	ldr	r2, [r3, #0]
   8599c:	4291      	cmp	r1, r2
   8599e:	6862      	ldr	r2, [r4, #4]
   859a0:	bf88      	it	hi
   859a2:	6019      	strhi	r1, [r3, #0]
   859a4:	f022 0203 	bic.w	r2, r2, #3
   859a8:	4295      	cmp	r5, r2
   859aa:	eba2 0305 	sub.w	r3, r2, r5
   859ae:	d801      	bhi.n	859b4 <_malloc_r+0x2fc>
   859b0:	2b0f      	cmp	r3, #15
   859b2:	dc04      	bgt.n	859be <_malloc_r+0x306>
   859b4:	4630      	mov	r0, r6
   859b6:	f000 f9d7 	bl	85d68 <__malloc_unlock>
   859ba:	2400      	movs	r4, #0
   859bc:	e745      	b.n	8584a <_malloc_r+0x192>
   859be:	f045 0201 	orr.w	r2, r5, #1
   859c2:	f043 0301 	orr.w	r3, r3, #1
   859c6:	4425      	add	r5, r4
   859c8:	6062      	str	r2, [r4, #4]
   859ca:	4630      	mov	r0, r6
   859cc:	60bd      	str	r5, [r7, #8]
   859ce:	3408      	adds	r4, #8
   859d0:	606b      	str	r3, [r5, #4]
   859d2:	f000 f9c9 	bl	85d68 <__malloc_unlock>
   859d6:	4620      	mov	r0, r4
   859d8:	b003      	add	sp, #12
   859da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   859de:	2b14      	cmp	r3, #20
   859e0:	d971      	bls.n	85ac6 <_malloc_r+0x40e>
   859e2:	2b54      	cmp	r3, #84	; 0x54
   859e4:	f200 80a4 	bhi.w	85b30 <_malloc_r+0x478>
   859e8:	0b28      	lsrs	r0, r5, #12
   859ea:	f100 0e6f 	add.w	lr, r0, #111	; 0x6f
   859ee:	ea4f 014e 	mov.w	r1, lr, lsl #1
   859f2:	306e      	adds	r0, #110	; 0x6e
   859f4:	e682      	b.n	856fc <_malloc_r+0x44>
   859f6:	bf00      	nop
   859f8:	200705a8 	.word	0x200705a8
   859fc:	20078c48 	.word	0x20078c48
   85a00:	20078c4c 	.word	0x20078c4c
   85a04:	20078c44 	.word	0x20078c44
   85a08:	20078c40 	.word	0x20078c40
   85a0c:	200709b4 	.word	0x200709b4
   85a10:	0a5a      	lsrs	r2, r3, #9
   85a12:	2a04      	cmp	r2, #4
   85a14:	d95e      	bls.n	85ad4 <_malloc_r+0x41c>
   85a16:	2a14      	cmp	r2, #20
   85a18:	f200 80b3 	bhi.w	85b82 <_malloc_r+0x4ca>
   85a1c:	f102 015c 	add.w	r1, r2, #92	; 0x5c
   85a20:	0049      	lsls	r1, r1, #1
   85a22:	325b      	adds	r2, #91	; 0x5b
   85a24:	eb07 0c81 	add.w	ip, r7, r1, lsl #2
   85a28:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
   85a2c:	f1ac 0c08 	sub.w	ip, ip, #8
   85a30:	458c      	cmp	ip, r1
   85a32:	f8df 81d8 	ldr.w	r8, [pc, #472]	; 85c0c <_malloc_r+0x554>
   85a36:	f000 8088 	beq.w	85b4a <_malloc_r+0x492>
   85a3a:	684a      	ldr	r2, [r1, #4]
   85a3c:	f022 0203 	bic.w	r2, r2, #3
   85a40:	4293      	cmp	r3, r2
   85a42:	d202      	bcs.n	85a4a <_malloc_r+0x392>
   85a44:	6889      	ldr	r1, [r1, #8]
   85a46:	458c      	cmp	ip, r1
   85a48:	d1f7      	bne.n	85a3a <_malloc_r+0x382>
   85a4a:	f8d1 c00c 	ldr.w	ip, [r1, #12]
   85a4e:	687a      	ldr	r2, [r7, #4]
   85a50:	f8c4 c00c 	str.w	ip, [r4, #12]
   85a54:	60a1      	str	r1, [r4, #8]
   85a56:	f8cc 4008 	str.w	r4, [ip, #8]
   85a5a:	60cc      	str	r4, [r1, #12]
   85a5c:	e696      	b.n	8578c <_malloc_r+0xd4>
   85a5e:	f045 0701 	orr.w	r7, r5, #1
   85a62:	f042 0301 	orr.w	r3, r2, #1
   85a66:	4425      	add	r5, r4
   85a68:	6067      	str	r7, [r4, #4]
   85a6a:	4630      	mov	r0, r6
   85a6c:	614d      	str	r5, [r1, #20]
   85a6e:	610d      	str	r5, [r1, #16]
   85a70:	f8c5 e00c 	str.w	lr, [r5, #12]
   85a74:	f8c5 e008 	str.w	lr, [r5, #8]
   85a78:	606b      	str	r3, [r5, #4]
   85a7a:	50aa      	str	r2, [r5, r2]
   85a7c:	3408      	adds	r4, #8
   85a7e:	f000 f973 	bl	85d68 <__malloc_unlock>
   85a82:	e6e2      	b.n	8584a <_malloc_r+0x192>
   85a84:	684a      	ldr	r2, [r1, #4]
   85a86:	e681      	b.n	8578c <_malloc_r+0xd4>
   85a88:	f108 0801 	add.w	r8, r8, #1
   85a8c:	f018 0f03 	tst.w	r8, #3
   85a90:	f10c 0c08 	add.w	ip, ip, #8
   85a94:	f47f ae8c 	bne.w	857b0 <_malloc_r+0xf8>
   85a98:	e030      	b.n	85afc <_malloc_r+0x444>
   85a9a:	68dc      	ldr	r4, [r3, #12]
   85a9c:	42a3      	cmp	r3, r4
   85a9e:	bf08      	it	eq
   85aa0:	3002      	addeq	r0, #2
   85aa2:	f43f ae40 	beq.w	85726 <_malloc_r+0x6e>
   85aa6:	e6c0      	b.n	8582a <_malloc_r+0x172>
   85aa8:	460c      	mov	r4, r1
   85aaa:	440b      	add	r3, r1
   85aac:	685a      	ldr	r2, [r3, #4]
   85aae:	68c9      	ldr	r1, [r1, #12]
   85ab0:	f854 5f08 	ldr.w	r5, [r4, #8]!
   85ab4:	f042 0201 	orr.w	r2, r2, #1
   85ab8:	605a      	str	r2, [r3, #4]
   85aba:	4630      	mov	r0, r6
   85abc:	60e9      	str	r1, [r5, #12]
   85abe:	608d      	str	r5, [r1, #8]
   85ac0:	f000 f952 	bl	85d68 <__malloc_unlock>
   85ac4:	e6c1      	b.n	8584a <_malloc_r+0x192>
   85ac6:	f103 0e5c 	add.w	lr, r3, #92	; 0x5c
   85aca:	f103 005b 	add.w	r0, r3, #91	; 0x5b
   85ace:	ea4f 014e 	mov.w	r1, lr, lsl #1
   85ad2:	e613      	b.n	856fc <_malloc_r+0x44>
   85ad4:	099a      	lsrs	r2, r3, #6
   85ad6:	f102 0139 	add.w	r1, r2, #57	; 0x39
   85ada:	0049      	lsls	r1, r1, #1
   85adc:	3238      	adds	r2, #56	; 0x38
   85ade:	e7a1      	b.n	85a24 <_malloc_r+0x36c>
   85ae0:	42bc      	cmp	r4, r7
   85ae2:	4b4a      	ldr	r3, [pc, #296]	; (85c0c <_malloc_r+0x554>)
   85ae4:	f43f af00 	beq.w	858e8 <_malloc_r+0x230>
   85ae8:	689c      	ldr	r4, [r3, #8]
   85aea:	6862      	ldr	r2, [r4, #4]
   85aec:	f022 0203 	bic.w	r2, r2, #3
   85af0:	e75a      	b.n	859a8 <_malloc_r+0x2f0>
   85af2:	f859 3908 	ldr.w	r3, [r9], #-8
   85af6:	4599      	cmp	r9, r3
   85af8:	f040 8082 	bne.w	85c00 <_malloc_r+0x548>
   85afc:	f010 0f03 	tst.w	r0, #3
   85b00:	f100 30ff 	add.w	r0, r0, #4294967295
   85b04:	d1f5      	bne.n	85af2 <_malloc_r+0x43a>
   85b06:	687b      	ldr	r3, [r7, #4]
   85b08:	ea23 0304 	bic.w	r3, r3, r4
   85b0c:	607b      	str	r3, [r7, #4]
   85b0e:	0064      	lsls	r4, r4, #1
   85b10:	429c      	cmp	r4, r3
   85b12:	f63f aebd 	bhi.w	85890 <_malloc_r+0x1d8>
   85b16:	2c00      	cmp	r4, #0
   85b18:	f43f aeba 	beq.w	85890 <_malloc_r+0x1d8>
   85b1c:	421c      	tst	r4, r3
   85b1e:	4640      	mov	r0, r8
   85b20:	f47f ae42 	bne.w	857a8 <_malloc_r+0xf0>
   85b24:	0064      	lsls	r4, r4, #1
   85b26:	421c      	tst	r4, r3
   85b28:	f100 0004 	add.w	r0, r0, #4
   85b2c:	d0fa      	beq.n	85b24 <_malloc_r+0x46c>
   85b2e:	e63b      	b.n	857a8 <_malloc_r+0xf0>
   85b30:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   85b34:	d818      	bhi.n	85b68 <_malloc_r+0x4b0>
   85b36:	0be8      	lsrs	r0, r5, #15
   85b38:	f100 0e78 	add.w	lr, r0, #120	; 0x78
   85b3c:	ea4f 014e 	mov.w	r1, lr, lsl #1
   85b40:	3077      	adds	r0, #119	; 0x77
   85b42:	e5db      	b.n	856fc <_malloc_r+0x44>
   85b44:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   85b48:	e6eb      	b.n	85922 <_malloc_r+0x26a>
   85b4a:	2101      	movs	r1, #1
   85b4c:	f8d8 3004 	ldr.w	r3, [r8, #4]
   85b50:	1092      	asrs	r2, r2, #2
   85b52:	fa01 f202 	lsl.w	r2, r1, r2
   85b56:	431a      	orrs	r2, r3
   85b58:	f8c8 2004 	str.w	r2, [r8, #4]
   85b5c:	4661      	mov	r1, ip
   85b5e:	e777      	b.n	85a50 <_malloc_r+0x398>
   85b60:	2301      	movs	r3, #1
   85b62:	f8cb 3004 	str.w	r3, [fp, #4]
   85b66:	e725      	b.n	859b4 <_malloc_r+0x2fc>
   85b68:	f240 5254 	movw	r2, #1364	; 0x554
   85b6c:	4293      	cmp	r3, r2
   85b6e:	d820      	bhi.n	85bb2 <_malloc_r+0x4fa>
   85b70:	0ca8      	lsrs	r0, r5, #18
   85b72:	f100 0e7d 	add.w	lr, r0, #125	; 0x7d
   85b76:	ea4f 014e 	mov.w	r1, lr, lsl #1
   85b7a:	307c      	adds	r0, #124	; 0x7c
   85b7c:	e5be      	b.n	856fc <_malloc_r+0x44>
   85b7e:	3210      	adds	r2, #16
   85b80:	e6a4      	b.n	858cc <_malloc_r+0x214>
   85b82:	2a54      	cmp	r2, #84	; 0x54
   85b84:	d826      	bhi.n	85bd4 <_malloc_r+0x51c>
   85b86:	0b1a      	lsrs	r2, r3, #12
   85b88:	f102 016f 	add.w	r1, r2, #111	; 0x6f
   85b8c:	0049      	lsls	r1, r1, #1
   85b8e:	326e      	adds	r2, #110	; 0x6e
   85b90:	e748      	b.n	85a24 <_malloc_r+0x36c>
   85b92:	68bc      	ldr	r4, [r7, #8]
   85b94:	6862      	ldr	r2, [r4, #4]
   85b96:	f022 0203 	bic.w	r2, r2, #3
   85b9a:	e705      	b.n	859a8 <_malloc_r+0x2f0>
   85b9c:	f3ca 000b 	ubfx	r0, sl, #0, #12
   85ba0:	2800      	cmp	r0, #0
   85ba2:	f47f aea8 	bne.w	858f6 <_malloc_r+0x23e>
   85ba6:	4442      	add	r2, r8
   85ba8:	68bb      	ldr	r3, [r7, #8]
   85baa:	f042 0201 	orr.w	r2, r2, #1
   85bae:	605a      	str	r2, [r3, #4]
   85bb0:	e6ec      	b.n	8598c <_malloc_r+0x2d4>
   85bb2:	21fe      	movs	r1, #254	; 0xfe
   85bb4:	f04f 0e7f 	mov.w	lr, #127	; 0x7f
   85bb8:	207e      	movs	r0, #126	; 0x7e
   85bba:	e59f      	b.n	856fc <_malloc_r+0x44>
   85bbc:	2201      	movs	r2, #1
   85bbe:	f04f 0900 	mov.w	r9, #0
   85bc2:	e6c1      	b.n	85948 <_malloc_r+0x290>
   85bc4:	f104 0108 	add.w	r1, r4, #8
   85bc8:	4630      	mov	r0, r6
   85bca:	f7ff fa5b 	bl	85084 <_free_r>
   85bce:	f8d9 1000 	ldr.w	r1, [r9]
   85bd2:	e6db      	b.n	8598c <_malloc_r+0x2d4>
   85bd4:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   85bd8:	d805      	bhi.n	85be6 <_malloc_r+0x52e>
   85bda:	0bda      	lsrs	r2, r3, #15
   85bdc:	f102 0178 	add.w	r1, r2, #120	; 0x78
   85be0:	0049      	lsls	r1, r1, #1
   85be2:	3277      	adds	r2, #119	; 0x77
   85be4:	e71e      	b.n	85a24 <_malloc_r+0x36c>
   85be6:	f240 5154 	movw	r1, #1364	; 0x554
   85bea:	428a      	cmp	r2, r1
   85bec:	d805      	bhi.n	85bfa <_malloc_r+0x542>
   85bee:	0c9a      	lsrs	r2, r3, #18
   85bf0:	f102 017d 	add.w	r1, r2, #125	; 0x7d
   85bf4:	0049      	lsls	r1, r1, #1
   85bf6:	327c      	adds	r2, #124	; 0x7c
   85bf8:	e714      	b.n	85a24 <_malloc_r+0x36c>
   85bfa:	21fe      	movs	r1, #254	; 0xfe
   85bfc:	227e      	movs	r2, #126	; 0x7e
   85bfe:	e711      	b.n	85a24 <_malloc_r+0x36c>
   85c00:	687b      	ldr	r3, [r7, #4]
   85c02:	e784      	b.n	85b0e <_malloc_r+0x456>
   85c04:	08e8      	lsrs	r0, r5, #3
   85c06:	1c43      	adds	r3, r0, #1
   85c08:	005b      	lsls	r3, r3, #1
   85c0a:	e605      	b.n	85818 <_malloc_r+0x160>
   85c0c:	200705a8 	.word	0x200705a8

00085c10 <memchr>:
   85c10:	0783      	lsls	r3, r0, #30
   85c12:	b470      	push	{r4, r5, r6}
   85c14:	b2cd      	uxtb	r5, r1
   85c16:	d03d      	beq.n	85c94 <memchr+0x84>
   85c18:	1e53      	subs	r3, r2, #1
   85c1a:	b302      	cbz	r2, 85c5e <memchr+0x4e>
   85c1c:	7802      	ldrb	r2, [r0, #0]
   85c1e:	42aa      	cmp	r2, r5
   85c20:	d01e      	beq.n	85c60 <memchr+0x50>
   85c22:	1c42      	adds	r2, r0, #1
   85c24:	e004      	b.n	85c30 <memchr+0x20>
   85c26:	b1d3      	cbz	r3, 85c5e <memchr+0x4e>
   85c28:	7804      	ldrb	r4, [r0, #0]
   85c2a:	3b01      	subs	r3, #1
   85c2c:	42ac      	cmp	r4, r5
   85c2e:	d017      	beq.n	85c60 <memchr+0x50>
   85c30:	f012 0f03 	tst.w	r2, #3
   85c34:	4610      	mov	r0, r2
   85c36:	f102 0201 	add.w	r2, r2, #1
   85c3a:	d1f4      	bne.n	85c26 <memchr+0x16>
   85c3c:	2b03      	cmp	r3, #3
   85c3e:	d811      	bhi.n	85c64 <memchr+0x54>
   85c40:	b353      	cbz	r3, 85c98 <memchr+0x88>
   85c42:	7802      	ldrb	r2, [r0, #0]
   85c44:	42aa      	cmp	r2, r5
   85c46:	d00b      	beq.n	85c60 <memchr+0x50>
   85c48:	4403      	add	r3, r0
   85c4a:	1c42      	adds	r2, r0, #1
   85c4c:	e002      	b.n	85c54 <memchr+0x44>
   85c4e:	7801      	ldrb	r1, [r0, #0]
   85c50:	42a9      	cmp	r1, r5
   85c52:	d005      	beq.n	85c60 <memchr+0x50>
   85c54:	4293      	cmp	r3, r2
   85c56:	4610      	mov	r0, r2
   85c58:	f102 0201 	add.w	r2, r2, #1
   85c5c:	d1f7      	bne.n	85c4e <memchr+0x3e>
   85c5e:	2000      	movs	r0, #0
   85c60:	bc70      	pop	{r4, r5, r6}
   85c62:	4770      	bx	lr
   85c64:	4604      	mov	r4, r0
   85c66:	020e      	lsls	r6, r1, #8
   85c68:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
   85c6c:	432e      	orrs	r6, r5
   85c6e:	ea46 4606 	orr.w	r6, r6, r6, lsl #16
   85c72:	6822      	ldr	r2, [r4, #0]
   85c74:	4620      	mov	r0, r4
   85c76:	4072      	eors	r2, r6
   85c78:	f1a2 3101 	sub.w	r1, r2, #16843009	; 0x1010101
   85c7c:	ea21 0202 	bic.w	r2, r1, r2
   85c80:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   85c84:	f104 0404 	add.w	r4, r4, #4
   85c88:	d1db      	bne.n	85c42 <memchr+0x32>
   85c8a:	3b04      	subs	r3, #4
   85c8c:	2b03      	cmp	r3, #3
   85c8e:	4620      	mov	r0, r4
   85c90:	d8ef      	bhi.n	85c72 <memchr+0x62>
   85c92:	e7d5      	b.n	85c40 <memchr+0x30>
   85c94:	4613      	mov	r3, r2
   85c96:	e7d1      	b.n	85c3c <memchr+0x2c>
   85c98:	4618      	mov	r0, r3
   85c9a:	e7e1      	b.n	85c60 <memchr+0x50>

00085c9c <memmove>:
   85c9c:	4288      	cmp	r0, r1
   85c9e:	b5f0      	push	{r4, r5, r6, r7, lr}
   85ca0:	d90d      	bls.n	85cbe <memmove+0x22>
   85ca2:	188b      	adds	r3, r1, r2
   85ca4:	4298      	cmp	r0, r3
   85ca6:	d20a      	bcs.n	85cbe <memmove+0x22>
   85ca8:	1881      	adds	r1, r0, r2
   85caa:	2a00      	cmp	r2, #0
   85cac:	d051      	beq.n	85d52 <memmove+0xb6>
   85cae:	1a9a      	subs	r2, r3, r2
   85cb0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   85cb4:	4293      	cmp	r3, r2
   85cb6:	f801 4d01 	strb.w	r4, [r1, #-1]!
   85cba:	d1f9      	bne.n	85cb0 <memmove+0x14>
   85cbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   85cbe:	2a0f      	cmp	r2, #15
   85cc0:	d948      	bls.n	85d54 <memmove+0xb8>
   85cc2:	ea41 0300 	orr.w	r3, r1, r0
   85cc6:	079b      	lsls	r3, r3, #30
   85cc8:	d146      	bne.n	85d58 <memmove+0xbc>
   85cca:	4615      	mov	r5, r2
   85ccc:	f100 0410 	add.w	r4, r0, #16
   85cd0:	f101 0310 	add.w	r3, r1, #16
   85cd4:	f853 6c10 	ldr.w	r6, [r3, #-16]
   85cd8:	3d10      	subs	r5, #16
   85cda:	f844 6c10 	str.w	r6, [r4, #-16]
   85cde:	f853 6c0c 	ldr.w	r6, [r3, #-12]
   85ce2:	2d0f      	cmp	r5, #15
   85ce4:	f844 6c0c 	str.w	r6, [r4, #-12]
   85ce8:	f853 6c08 	ldr.w	r6, [r3, #-8]
   85cec:	f104 0410 	add.w	r4, r4, #16
   85cf0:	f844 6c18 	str.w	r6, [r4, #-24]
   85cf4:	f853 6c04 	ldr.w	r6, [r3, #-4]
   85cf8:	f103 0310 	add.w	r3, r3, #16
   85cfc:	f844 6c14 	str.w	r6, [r4, #-20]
   85d00:	d8e8      	bhi.n	85cd4 <memmove+0x38>
   85d02:	f1a2 0310 	sub.w	r3, r2, #16
   85d06:	f023 030f 	bic.w	r3, r3, #15
   85d0a:	f002 0e0f 	and.w	lr, r2, #15
   85d0e:	3310      	adds	r3, #16
   85d10:	f1be 0f03 	cmp.w	lr, #3
   85d14:	4419      	add	r1, r3
   85d16:	4403      	add	r3, r0
   85d18:	d921      	bls.n	85d5e <memmove+0xc2>
   85d1a:	460e      	mov	r6, r1
   85d1c:	4674      	mov	r4, lr
   85d1e:	1f1d      	subs	r5, r3, #4
   85d20:	f856 7b04 	ldr.w	r7, [r6], #4
   85d24:	3c04      	subs	r4, #4
   85d26:	2c03      	cmp	r4, #3
   85d28:	f845 7f04 	str.w	r7, [r5, #4]!
   85d2c:	d8f8      	bhi.n	85d20 <memmove+0x84>
   85d2e:	f1ae 0404 	sub.w	r4, lr, #4
   85d32:	f024 0403 	bic.w	r4, r4, #3
   85d36:	3404      	adds	r4, #4
   85d38:	4423      	add	r3, r4
   85d3a:	4421      	add	r1, r4
   85d3c:	f002 0203 	and.w	r2, r2, #3
   85d40:	b162      	cbz	r2, 85d5c <memmove+0xc0>
   85d42:	3b01      	subs	r3, #1
   85d44:	440a      	add	r2, r1
   85d46:	f811 4b01 	ldrb.w	r4, [r1], #1
   85d4a:	428a      	cmp	r2, r1
   85d4c:	f803 4f01 	strb.w	r4, [r3, #1]!
   85d50:	d1f9      	bne.n	85d46 <memmove+0xaa>
   85d52:	bdf0      	pop	{r4, r5, r6, r7, pc}
   85d54:	4603      	mov	r3, r0
   85d56:	e7f3      	b.n	85d40 <memmove+0xa4>
   85d58:	4603      	mov	r3, r0
   85d5a:	e7f2      	b.n	85d42 <memmove+0xa6>
   85d5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   85d5e:	4672      	mov	r2, lr
   85d60:	e7ee      	b.n	85d40 <memmove+0xa4>
   85d62:	bf00      	nop

00085d64 <__malloc_lock>:
   85d64:	4770      	bx	lr
   85d66:	bf00      	nop

00085d68 <__malloc_unlock>:
   85d68:	4770      	bx	lr
   85d6a:	bf00      	nop

00085d6c <_realloc_r>:
   85d6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   85d70:	4617      	mov	r7, r2
   85d72:	b083      	sub	sp, #12
   85d74:	2900      	cmp	r1, #0
   85d76:	f000 808f 	beq.w	85e98 <_realloc_r+0x12c>
   85d7a:	460d      	mov	r5, r1
   85d7c:	4681      	mov	r9, r0
   85d7e:	f107 040b 	add.w	r4, r7, #11
   85d82:	f7ff ffef 	bl	85d64 <__malloc_lock>
   85d86:	f855 ec04 	ldr.w	lr, [r5, #-4]
   85d8a:	2c16      	cmp	r4, #22
   85d8c:	f02e 0603 	bic.w	r6, lr, #3
   85d90:	f1a5 0808 	sub.w	r8, r5, #8
   85d94:	d83c      	bhi.n	85e10 <_realloc_r+0xa4>
   85d96:	2210      	movs	r2, #16
   85d98:	4614      	mov	r4, r2
   85d9a:	42a7      	cmp	r7, r4
   85d9c:	d83d      	bhi.n	85e1a <_realloc_r+0xae>
   85d9e:	4296      	cmp	r6, r2
   85da0:	da42      	bge.n	85e28 <_realloc_r+0xbc>
   85da2:	4bc6      	ldr	r3, [pc, #792]	; (860bc <_realloc_r+0x350>)
   85da4:	eb08 0006 	add.w	r0, r8, r6
   85da8:	6899      	ldr	r1, [r3, #8]
   85daa:	4288      	cmp	r0, r1
   85dac:	6841      	ldr	r1, [r0, #4]
   85dae:	f000 80d7 	beq.w	85f60 <_realloc_r+0x1f4>
   85db2:	f021 0301 	bic.w	r3, r1, #1
   85db6:	4403      	add	r3, r0
   85db8:	685b      	ldr	r3, [r3, #4]
   85dba:	07db      	lsls	r3, r3, #31
   85dbc:	d54c      	bpl.n	85e58 <_realloc_r+0xec>
   85dbe:	f01e 0f01 	tst.w	lr, #1
   85dc2:	f000 809d 	beq.w	85f00 <_realloc_r+0x194>
   85dc6:	4639      	mov	r1, r7
   85dc8:	4648      	mov	r0, r9
   85dca:	f7ff fc75 	bl	856b8 <_malloc_r>
   85dce:	4607      	mov	r7, r0
   85dd0:	2800      	cmp	r0, #0
   85dd2:	d03a      	beq.n	85e4a <_realloc_r+0xde>
   85dd4:	f855 3c04 	ldr.w	r3, [r5, #-4]
   85dd8:	f1a0 0208 	sub.w	r2, r0, #8
   85ddc:	f023 0301 	bic.w	r3, r3, #1
   85de0:	4443      	add	r3, r8
   85de2:	429a      	cmp	r2, r3
   85de4:	f000 813e 	beq.w	86064 <_realloc_r+0x2f8>
   85de8:	1f32      	subs	r2, r6, #4
   85dea:	2a24      	cmp	r2, #36	; 0x24
   85dec:	f200 812b 	bhi.w	86046 <_realloc_r+0x2da>
   85df0:	2a13      	cmp	r2, #19
   85df2:	f200 80ff 	bhi.w	85ff4 <_realloc_r+0x288>
   85df6:	4603      	mov	r3, r0
   85df8:	462a      	mov	r2, r5
   85dfa:	6811      	ldr	r1, [r2, #0]
   85dfc:	6019      	str	r1, [r3, #0]
   85dfe:	6851      	ldr	r1, [r2, #4]
   85e00:	6059      	str	r1, [r3, #4]
   85e02:	6892      	ldr	r2, [r2, #8]
   85e04:	609a      	str	r2, [r3, #8]
   85e06:	4629      	mov	r1, r5
   85e08:	4648      	mov	r0, r9
   85e0a:	f7ff f93b 	bl	85084 <_free_r>
   85e0e:	e01c      	b.n	85e4a <_realloc_r+0xde>
   85e10:	f024 0407 	bic.w	r4, r4, #7
   85e14:	2c00      	cmp	r4, #0
   85e16:	4622      	mov	r2, r4
   85e18:	dabf      	bge.n	85d9a <_realloc_r+0x2e>
   85e1a:	230c      	movs	r3, #12
   85e1c:	2000      	movs	r0, #0
   85e1e:	f8c9 3000 	str.w	r3, [r9]
   85e22:	b003      	add	sp, #12
   85e24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   85e28:	462f      	mov	r7, r5
   85e2a:	1b33      	subs	r3, r6, r4
   85e2c:	2b0f      	cmp	r3, #15
   85e2e:	f8d8 2004 	ldr.w	r2, [r8, #4]
   85e32:	d81d      	bhi.n	85e70 <_realloc_r+0x104>
   85e34:	f002 0201 	and.w	r2, r2, #1
   85e38:	4332      	orrs	r2, r6
   85e3a:	eb08 0106 	add.w	r1, r8, r6
   85e3e:	f8c8 2004 	str.w	r2, [r8, #4]
   85e42:	684b      	ldr	r3, [r1, #4]
   85e44:	f043 0301 	orr.w	r3, r3, #1
   85e48:	604b      	str	r3, [r1, #4]
   85e4a:	4648      	mov	r0, r9
   85e4c:	f7ff ff8c 	bl	85d68 <__malloc_unlock>
   85e50:	4638      	mov	r0, r7
   85e52:	b003      	add	sp, #12
   85e54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   85e58:	f021 0103 	bic.w	r1, r1, #3
   85e5c:	4431      	add	r1, r6
   85e5e:	4291      	cmp	r1, r2
   85e60:	db20      	blt.n	85ea4 <_realloc_r+0x138>
   85e62:	68c3      	ldr	r3, [r0, #12]
   85e64:	6882      	ldr	r2, [r0, #8]
   85e66:	462f      	mov	r7, r5
   85e68:	60d3      	str	r3, [r2, #12]
   85e6a:	460e      	mov	r6, r1
   85e6c:	609a      	str	r2, [r3, #8]
   85e6e:	e7dc      	b.n	85e2a <_realloc_r+0xbe>
   85e70:	f002 0201 	and.w	r2, r2, #1
   85e74:	eb08 0104 	add.w	r1, r8, r4
   85e78:	4314      	orrs	r4, r2
   85e7a:	f043 0201 	orr.w	r2, r3, #1
   85e7e:	f8c8 4004 	str.w	r4, [r8, #4]
   85e82:	440b      	add	r3, r1
   85e84:	604a      	str	r2, [r1, #4]
   85e86:	685a      	ldr	r2, [r3, #4]
   85e88:	3108      	adds	r1, #8
   85e8a:	f042 0201 	orr.w	r2, r2, #1
   85e8e:	605a      	str	r2, [r3, #4]
   85e90:	4648      	mov	r0, r9
   85e92:	f7ff f8f7 	bl	85084 <_free_r>
   85e96:	e7d8      	b.n	85e4a <_realloc_r+0xde>
   85e98:	4611      	mov	r1, r2
   85e9a:	b003      	add	sp, #12
   85e9c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   85ea0:	f7ff bc0a 	b.w	856b8 <_malloc_r>
   85ea4:	f01e 0f01 	tst.w	lr, #1
   85ea8:	d18d      	bne.n	85dc6 <_realloc_r+0x5a>
   85eaa:	f855 3c08 	ldr.w	r3, [r5, #-8]
   85eae:	ebc3 0a08 	rsb	sl, r3, r8
   85eb2:	f8da 3004 	ldr.w	r3, [sl, #4]
   85eb6:	f023 0c03 	bic.w	ip, r3, #3
   85eba:	eb01 0e0c 	add.w	lr, r1, ip
   85ebe:	4596      	cmp	lr, r2
   85ec0:	db26      	blt.n	85f10 <_realloc_r+0x1a4>
   85ec2:	4657      	mov	r7, sl
   85ec4:	68c3      	ldr	r3, [r0, #12]
   85ec6:	6881      	ldr	r1, [r0, #8]
   85ec8:	1f32      	subs	r2, r6, #4
   85eca:	60cb      	str	r3, [r1, #12]
   85ecc:	6099      	str	r1, [r3, #8]
   85ece:	f857 1f08 	ldr.w	r1, [r7, #8]!
   85ed2:	f8da 300c 	ldr.w	r3, [sl, #12]
   85ed6:	2a24      	cmp	r2, #36	; 0x24
   85ed8:	60cb      	str	r3, [r1, #12]
   85eda:	6099      	str	r1, [r3, #8]
   85edc:	f200 80c9 	bhi.w	86072 <_realloc_r+0x306>
   85ee0:	2a13      	cmp	r2, #19
   85ee2:	f240 8092 	bls.w	8600a <_realloc_r+0x29e>
   85ee6:	682b      	ldr	r3, [r5, #0]
   85ee8:	2a1b      	cmp	r2, #27
   85eea:	f8ca 3008 	str.w	r3, [sl, #8]
   85eee:	686b      	ldr	r3, [r5, #4]
   85ef0:	f8ca 300c 	str.w	r3, [sl, #12]
   85ef4:	f200 80cd 	bhi.w	86092 <_realloc_r+0x326>
   85ef8:	3508      	adds	r5, #8
   85efa:	f10a 0310 	add.w	r3, sl, #16
   85efe:	e085      	b.n	8600c <_realloc_r+0x2a0>
   85f00:	f855 3c08 	ldr.w	r3, [r5, #-8]
   85f04:	ebc3 0a08 	rsb	sl, r3, r8
   85f08:	f8da 3004 	ldr.w	r3, [sl, #4]
   85f0c:	f023 0c03 	bic.w	ip, r3, #3
   85f10:	eb06 030c 	add.w	r3, r6, ip
   85f14:	4293      	cmp	r3, r2
   85f16:	f6ff af56 	blt.w	85dc6 <_realloc_r+0x5a>
   85f1a:	4657      	mov	r7, sl
   85f1c:	f8da 100c 	ldr.w	r1, [sl, #12]
   85f20:	f857 0f08 	ldr.w	r0, [r7, #8]!
   85f24:	1f32      	subs	r2, r6, #4
   85f26:	2a24      	cmp	r2, #36	; 0x24
   85f28:	60c1      	str	r1, [r0, #12]
   85f2a:	6088      	str	r0, [r1, #8]
   85f2c:	f200 80aa 	bhi.w	86084 <_realloc_r+0x318>
   85f30:	2a13      	cmp	r2, #19
   85f32:	f240 80a5 	bls.w	86080 <_realloc_r+0x314>
   85f36:	6829      	ldr	r1, [r5, #0]
   85f38:	2a1b      	cmp	r2, #27
   85f3a:	f8ca 1008 	str.w	r1, [sl, #8]
   85f3e:	6869      	ldr	r1, [r5, #4]
   85f40:	f8ca 100c 	str.w	r1, [sl, #12]
   85f44:	f200 80bc 	bhi.w	860c0 <_realloc_r+0x354>
   85f48:	3508      	adds	r5, #8
   85f4a:	f10a 0210 	add.w	r2, sl, #16
   85f4e:	6829      	ldr	r1, [r5, #0]
   85f50:	461e      	mov	r6, r3
   85f52:	6011      	str	r1, [r2, #0]
   85f54:	6869      	ldr	r1, [r5, #4]
   85f56:	46d0      	mov	r8, sl
   85f58:	6051      	str	r1, [r2, #4]
   85f5a:	68ab      	ldr	r3, [r5, #8]
   85f5c:	6093      	str	r3, [r2, #8]
   85f5e:	e764      	b.n	85e2a <_realloc_r+0xbe>
   85f60:	f021 0b03 	bic.w	fp, r1, #3
   85f64:	f104 0010 	add.w	r0, r4, #16
   85f68:	44b3      	add	fp, r6
   85f6a:	4583      	cmp	fp, r0
   85f6c:	da57      	bge.n	8601e <_realloc_r+0x2b2>
   85f6e:	f01e 0f01 	tst.w	lr, #1
   85f72:	f47f af28 	bne.w	85dc6 <_realloc_r+0x5a>
   85f76:	f855 1c08 	ldr.w	r1, [r5, #-8]
   85f7a:	ebc1 0a08 	rsb	sl, r1, r8
   85f7e:	f8da 1004 	ldr.w	r1, [sl, #4]
   85f82:	f021 0c03 	bic.w	ip, r1, #3
   85f86:	44e3      	add	fp, ip
   85f88:	4558      	cmp	r0, fp
   85f8a:	dcc1      	bgt.n	85f10 <_realloc_r+0x1a4>
   85f8c:	4657      	mov	r7, sl
   85f8e:	f8da 100c 	ldr.w	r1, [sl, #12]
   85f92:	f857 0f08 	ldr.w	r0, [r7, #8]!
   85f96:	1f32      	subs	r2, r6, #4
   85f98:	2a24      	cmp	r2, #36	; 0x24
   85f9a:	60c1      	str	r1, [r0, #12]
   85f9c:	6088      	str	r0, [r1, #8]
   85f9e:	f200 80b1 	bhi.w	86104 <_realloc_r+0x398>
   85fa2:	2a13      	cmp	r2, #19
   85fa4:	f240 80a2 	bls.w	860ec <_realloc_r+0x380>
   85fa8:	6829      	ldr	r1, [r5, #0]
   85faa:	2a1b      	cmp	r2, #27
   85fac:	f8ca 1008 	str.w	r1, [sl, #8]
   85fb0:	6869      	ldr	r1, [r5, #4]
   85fb2:	f8ca 100c 	str.w	r1, [sl, #12]
   85fb6:	f200 80ac 	bhi.w	86112 <_realloc_r+0x3a6>
   85fba:	3508      	adds	r5, #8
   85fbc:	f10a 0210 	add.w	r2, sl, #16
   85fc0:	6829      	ldr	r1, [r5, #0]
   85fc2:	6011      	str	r1, [r2, #0]
   85fc4:	6869      	ldr	r1, [r5, #4]
   85fc6:	6051      	str	r1, [r2, #4]
   85fc8:	68a9      	ldr	r1, [r5, #8]
   85fca:	6091      	str	r1, [r2, #8]
   85fcc:	ebc4 020b 	rsb	r2, r4, fp
   85fd0:	eb0a 0104 	add.w	r1, sl, r4
   85fd4:	f042 0201 	orr.w	r2, r2, #1
   85fd8:	6099      	str	r1, [r3, #8]
   85fda:	604a      	str	r2, [r1, #4]
   85fdc:	f8da 3004 	ldr.w	r3, [sl, #4]
   85fe0:	4648      	mov	r0, r9
   85fe2:	f003 0301 	and.w	r3, r3, #1
   85fe6:	431c      	orrs	r4, r3
   85fe8:	f8ca 4004 	str.w	r4, [sl, #4]
   85fec:	f7ff febc 	bl	85d68 <__malloc_unlock>
   85ff0:	4638      	mov	r0, r7
   85ff2:	e72e      	b.n	85e52 <_realloc_r+0xe6>
   85ff4:	682b      	ldr	r3, [r5, #0]
   85ff6:	2a1b      	cmp	r2, #27
   85ff8:	6003      	str	r3, [r0, #0]
   85ffa:	686b      	ldr	r3, [r5, #4]
   85ffc:	6043      	str	r3, [r0, #4]
   85ffe:	d826      	bhi.n	8604e <_realloc_r+0x2e2>
   86000:	f100 0308 	add.w	r3, r0, #8
   86004:	f105 0208 	add.w	r2, r5, #8
   86008:	e6f7      	b.n	85dfa <_realloc_r+0x8e>
   8600a:	463b      	mov	r3, r7
   8600c:	682a      	ldr	r2, [r5, #0]
   8600e:	4676      	mov	r6, lr
   86010:	601a      	str	r2, [r3, #0]
   86012:	686a      	ldr	r2, [r5, #4]
   86014:	46d0      	mov	r8, sl
   86016:	605a      	str	r2, [r3, #4]
   86018:	68aa      	ldr	r2, [r5, #8]
   8601a:	609a      	str	r2, [r3, #8]
   8601c:	e705      	b.n	85e2a <_realloc_r+0xbe>
   8601e:	ebc4 0b0b 	rsb	fp, r4, fp
   86022:	eb08 0104 	add.w	r1, r8, r4
   86026:	f04b 0201 	orr.w	r2, fp, #1
   8602a:	6099      	str	r1, [r3, #8]
   8602c:	604a      	str	r2, [r1, #4]
   8602e:	f855 3c04 	ldr.w	r3, [r5, #-4]
   86032:	4648      	mov	r0, r9
   86034:	f003 0301 	and.w	r3, r3, #1
   86038:	431c      	orrs	r4, r3
   8603a:	f845 4c04 	str.w	r4, [r5, #-4]
   8603e:	f7ff fe93 	bl	85d68 <__malloc_unlock>
   86042:	4628      	mov	r0, r5
   86044:	e705      	b.n	85e52 <_realloc_r+0xe6>
   86046:	4629      	mov	r1, r5
   86048:	f7ff fe28 	bl	85c9c <memmove>
   8604c:	e6db      	b.n	85e06 <_realloc_r+0x9a>
   8604e:	68ab      	ldr	r3, [r5, #8]
   86050:	2a24      	cmp	r2, #36	; 0x24
   86052:	6083      	str	r3, [r0, #8]
   86054:	68eb      	ldr	r3, [r5, #12]
   86056:	60c3      	str	r3, [r0, #12]
   86058:	d027      	beq.n	860aa <_realloc_r+0x33e>
   8605a:	f100 0310 	add.w	r3, r0, #16
   8605e:	f105 0210 	add.w	r2, r5, #16
   86062:	e6ca      	b.n	85dfa <_realloc_r+0x8e>
   86064:	f850 3c04 	ldr.w	r3, [r0, #-4]
   86068:	462f      	mov	r7, r5
   8606a:	f023 0303 	bic.w	r3, r3, #3
   8606e:	441e      	add	r6, r3
   86070:	e6db      	b.n	85e2a <_realloc_r+0xbe>
   86072:	4629      	mov	r1, r5
   86074:	4638      	mov	r0, r7
   86076:	4676      	mov	r6, lr
   86078:	46d0      	mov	r8, sl
   8607a:	f7ff fe0f 	bl	85c9c <memmove>
   8607e:	e6d4      	b.n	85e2a <_realloc_r+0xbe>
   86080:	463a      	mov	r2, r7
   86082:	e764      	b.n	85f4e <_realloc_r+0x1e2>
   86084:	4629      	mov	r1, r5
   86086:	4638      	mov	r0, r7
   86088:	461e      	mov	r6, r3
   8608a:	46d0      	mov	r8, sl
   8608c:	f7ff fe06 	bl	85c9c <memmove>
   86090:	e6cb      	b.n	85e2a <_realloc_r+0xbe>
   86092:	68ab      	ldr	r3, [r5, #8]
   86094:	2a24      	cmp	r2, #36	; 0x24
   86096:	f8ca 3010 	str.w	r3, [sl, #16]
   8609a:	68eb      	ldr	r3, [r5, #12]
   8609c:	f8ca 3014 	str.w	r3, [sl, #20]
   860a0:	d01a      	beq.n	860d8 <_realloc_r+0x36c>
   860a2:	3510      	adds	r5, #16
   860a4:	f10a 0318 	add.w	r3, sl, #24
   860a8:	e7b0      	b.n	8600c <_realloc_r+0x2a0>
   860aa:	692a      	ldr	r2, [r5, #16]
   860ac:	f100 0318 	add.w	r3, r0, #24
   860b0:	6102      	str	r2, [r0, #16]
   860b2:	6969      	ldr	r1, [r5, #20]
   860b4:	f105 0218 	add.w	r2, r5, #24
   860b8:	6141      	str	r1, [r0, #20]
   860ba:	e69e      	b.n	85dfa <_realloc_r+0x8e>
   860bc:	200705a8 	.word	0x200705a8
   860c0:	68a9      	ldr	r1, [r5, #8]
   860c2:	2a24      	cmp	r2, #36	; 0x24
   860c4:	f8ca 1010 	str.w	r1, [sl, #16]
   860c8:	68e9      	ldr	r1, [r5, #12]
   860ca:	f8ca 1014 	str.w	r1, [sl, #20]
   860ce:	d00f      	beq.n	860f0 <_realloc_r+0x384>
   860d0:	3510      	adds	r5, #16
   860d2:	f10a 0218 	add.w	r2, sl, #24
   860d6:	e73a      	b.n	85f4e <_realloc_r+0x1e2>
   860d8:	692a      	ldr	r2, [r5, #16]
   860da:	f10a 0320 	add.w	r3, sl, #32
   860de:	f8ca 2018 	str.w	r2, [sl, #24]
   860e2:	696a      	ldr	r2, [r5, #20]
   860e4:	3518      	adds	r5, #24
   860e6:	f8ca 201c 	str.w	r2, [sl, #28]
   860ea:	e78f      	b.n	8600c <_realloc_r+0x2a0>
   860ec:	463a      	mov	r2, r7
   860ee:	e767      	b.n	85fc0 <_realloc_r+0x254>
   860f0:	6929      	ldr	r1, [r5, #16]
   860f2:	f10a 0220 	add.w	r2, sl, #32
   860f6:	f8ca 1018 	str.w	r1, [sl, #24]
   860fa:	6969      	ldr	r1, [r5, #20]
   860fc:	3518      	adds	r5, #24
   860fe:	f8ca 101c 	str.w	r1, [sl, #28]
   86102:	e724      	b.n	85f4e <_realloc_r+0x1e2>
   86104:	4629      	mov	r1, r5
   86106:	4638      	mov	r0, r7
   86108:	9301      	str	r3, [sp, #4]
   8610a:	f7ff fdc7 	bl	85c9c <memmove>
   8610e:	9b01      	ldr	r3, [sp, #4]
   86110:	e75c      	b.n	85fcc <_realloc_r+0x260>
   86112:	68a9      	ldr	r1, [r5, #8]
   86114:	2a24      	cmp	r2, #36	; 0x24
   86116:	f8ca 1010 	str.w	r1, [sl, #16]
   8611a:	68e9      	ldr	r1, [r5, #12]
   8611c:	f8ca 1014 	str.w	r1, [sl, #20]
   86120:	d003      	beq.n	8612a <_realloc_r+0x3be>
   86122:	3510      	adds	r5, #16
   86124:	f10a 0218 	add.w	r2, sl, #24
   86128:	e74a      	b.n	85fc0 <_realloc_r+0x254>
   8612a:	6929      	ldr	r1, [r5, #16]
   8612c:	f10a 0220 	add.w	r2, sl, #32
   86130:	f8ca 1018 	str.w	r1, [sl, #24]
   86134:	6969      	ldr	r1, [r5, #20]
   86136:	3518      	adds	r5, #24
   86138:	f8ca 101c 	str.w	r1, [sl, #28]
   8613c:	e740      	b.n	85fc0 <_realloc_r+0x254>
   8613e:	bf00      	nop

00086140 <_sbrk_r>:
   86140:	b538      	push	{r3, r4, r5, lr}
   86142:	4c07      	ldr	r4, [pc, #28]	; (86160 <_sbrk_r+0x20>)
   86144:	2300      	movs	r3, #0
   86146:	4605      	mov	r5, r0
   86148:	4608      	mov	r0, r1
   8614a:	6023      	str	r3, [r4, #0]
   8614c:	f7fa fc7e 	bl	80a4c <_sbrk>
   86150:	1c43      	adds	r3, r0, #1
   86152:	d000      	beq.n	86156 <_sbrk_r+0x16>
   86154:	bd38      	pop	{r3, r4, r5, pc}
   86156:	6823      	ldr	r3, [r4, #0]
   86158:	2b00      	cmp	r3, #0
   8615a:	d0fb      	beq.n	86154 <_sbrk_r+0x14>
   8615c:	602b      	str	r3, [r5, #0]
   8615e:	bd38      	pop	{r3, r4, r5, pc}
   86160:	20078ca8 	.word	0x20078ca8

00086164 <__sread>:
   86164:	b510      	push	{r4, lr}
   86166:	460c      	mov	r4, r1
   86168:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   8616c:	f000 f9c4 	bl	864f8 <_read_r>
   86170:	2800      	cmp	r0, #0
   86172:	db03      	blt.n	8617c <__sread+0x18>
   86174:	6d23      	ldr	r3, [r4, #80]	; 0x50
   86176:	4403      	add	r3, r0
   86178:	6523      	str	r3, [r4, #80]	; 0x50
   8617a:	bd10      	pop	{r4, pc}
   8617c:	89a3      	ldrh	r3, [r4, #12]
   8617e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   86182:	81a3      	strh	r3, [r4, #12]
   86184:	bd10      	pop	{r4, pc}
   86186:	bf00      	nop

00086188 <__swrite>:
   86188:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8618c:	460c      	mov	r4, r1
   8618e:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
   86192:	461f      	mov	r7, r3
   86194:	05cb      	lsls	r3, r1, #23
   86196:	4616      	mov	r6, r2
   86198:	4605      	mov	r5, r0
   8619a:	d507      	bpl.n	861ac <__swrite+0x24>
   8619c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   861a0:	2302      	movs	r3, #2
   861a2:	2200      	movs	r2, #0
   861a4:	f000 f992 	bl	864cc <_lseek_r>
   861a8:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
   861ac:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
   861b0:	81a1      	strh	r1, [r4, #12]
   861b2:	463b      	mov	r3, r7
   861b4:	4632      	mov	r2, r6
   861b6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   861ba:	4628      	mov	r0, r5
   861bc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   861c0:	f000 b8a2 	b.w	86308 <_write_r>

000861c4 <__sseek>:
   861c4:	b510      	push	{r4, lr}
   861c6:	460c      	mov	r4, r1
   861c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   861cc:	f000 f97e 	bl	864cc <_lseek_r>
   861d0:	89a3      	ldrh	r3, [r4, #12]
   861d2:	1c42      	adds	r2, r0, #1
   861d4:	bf0e      	itee	eq
   861d6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   861da:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   861de:	6520      	strne	r0, [r4, #80]	; 0x50
   861e0:	81a3      	strh	r3, [r4, #12]
   861e2:	bd10      	pop	{r4, pc}

000861e4 <__sclose>:
   861e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   861e8:	f000 b8f6 	b.w	863d8 <_close_r>

000861ec <__swbuf_r>:
   861ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   861ee:	460e      	mov	r6, r1
   861f0:	4614      	mov	r4, r2
   861f2:	4607      	mov	r7, r0
   861f4:	b110      	cbz	r0, 861fc <__swbuf_r+0x10>
   861f6:	6b83      	ldr	r3, [r0, #56]	; 0x38
   861f8:	2b00      	cmp	r3, #0
   861fa:	d04a      	beq.n	86292 <__swbuf_r+0xa6>
   861fc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   86200:	69a3      	ldr	r3, [r4, #24]
   86202:	b291      	uxth	r1, r2
   86204:	0708      	lsls	r0, r1, #28
   86206:	60a3      	str	r3, [r4, #8]
   86208:	d538      	bpl.n	8627c <__swbuf_r+0x90>
   8620a:	6923      	ldr	r3, [r4, #16]
   8620c:	2b00      	cmp	r3, #0
   8620e:	d035      	beq.n	8627c <__swbuf_r+0x90>
   86210:	0489      	lsls	r1, r1, #18
   86212:	b2f5      	uxtb	r5, r6
   86214:	d515      	bpl.n	86242 <__swbuf_r+0x56>
   86216:	6822      	ldr	r2, [r4, #0]
   86218:	6961      	ldr	r1, [r4, #20]
   8621a:	1ad3      	subs	r3, r2, r3
   8621c:	428b      	cmp	r3, r1
   8621e:	da1c      	bge.n	8625a <__swbuf_r+0x6e>
   86220:	3301      	adds	r3, #1
   86222:	68a1      	ldr	r1, [r4, #8]
   86224:	1c50      	adds	r0, r2, #1
   86226:	3901      	subs	r1, #1
   86228:	60a1      	str	r1, [r4, #8]
   8622a:	6020      	str	r0, [r4, #0]
   8622c:	7016      	strb	r6, [r2, #0]
   8622e:	6962      	ldr	r2, [r4, #20]
   86230:	429a      	cmp	r2, r3
   86232:	d01a      	beq.n	8626a <__swbuf_r+0x7e>
   86234:	89a3      	ldrh	r3, [r4, #12]
   86236:	07db      	lsls	r3, r3, #31
   86238:	d501      	bpl.n	8623e <__swbuf_r+0x52>
   8623a:	2d0a      	cmp	r5, #10
   8623c:	d015      	beq.n	8626a <__swbuf_r+0x7e>
   8623e:	4628      	mov	r0, r5
   86240:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   86242:	6e61      	ldr	r1, [r4, #100]	; 0x64
   86244:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   86248:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
   8624c:	81a2      	strh	r2, [r4, #12]
   8624e:	6822      	ldr	r2, [r4, #0]
   86250:	6661      	str	r1, [r4, #100]	; 0x64
   86252:	6961      	ldr	r1, [r4, #20]
   86254:	1ad3      	subs	r3, r2, r3
   86256:	428b      	cmp	r3, r1
   86258:	dbe2      	blt.n	86220 <__swbuf_r+0x34>
   8625a:	4621      	mov	r1, r4
   8625c:	4638      	mov	r0, r7
   8625e:	f7fe fdb5 	bl	84dcc <_fflush_r>
   86262:	b940      	cbnz	r0, 86276 <__swbuf_r+0x8a>
   86264:	6822      	ldr	r2, [r4, #0]
   86266:	2301      	movs	r3, #1
   86268:	e7db      	b.n	86222 <__swbuf_r+0x36>
   8626a:	4621      	mov	r1, r4
   8626c:	4638      	mov	r0, r7
   8626e:	f7fe fdad 	bl	84dcc <_fflush_r>
   86272:	2800      	cmp	r0, #0
   86274:	d0e3      	beq.n	8623e <__swbuf_r+0x52>
   86276:	f04f 30ff 	mov.w	r0, #4294967295
   8627a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8627c:	4621      	mov	r1, r4
   8627e:	4638      	mov	r0, r7
   86280:	f7fe fc8c 	bl	84b9c <__swsetup_r>
   86284:	2800      	cmp	r0, #0
   86286:	d1f6      	bne.n	86276 <__swbuf_r+0x8a>
   86288:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   8628c:	6923      	ldr	r3, [r4, #16]
   8628e:	b291      	uxth	r1, r2
   86290:	e7be      	b.n	86210 <__swbuf_r+0x24>
   86292:	f7fe fe2f 	bl	84ef4 <__sinit>
   86296:	e7b1      	b.n	861fc <__swbuf_r+0x10>

00086298 <_wcrtomb_r>:
   86298:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8629c:	4605      	mov	r5, r0
   8629e:	b086      	sub	sp, #24
   862a0:	461e      	mov	r6, r3
   862a2:	460c      	mov	r4, r1
   862a4:	b1a1      	cbz	r1, 862d0 <_wcrtomb_r+0x38>
   862a6:	4b10      	ldr	r3, [pc, #64]	; (862e8 <_wcrtomb_r+0x50>)
   862a8:	4617      	mov	r7, r2
   862aa:	f8d3 8000 	ldr.w	r8, [r3]
   862ae:	f7ff f97d 	bl	855ac <__locale_charset>
   862b2:	9600      	str	r6, [sp, #0]
   862b4:	4603      	mov	r3, r0
   862b6:	463a      	mov	r2, r7
   862b8:	4621      	mov	r1, r4
   862ba:	4628      	mov	r0, r5
   862bc:	47c0      	blx	r8
   862be:	1c43      	adds	r3, r0, #1
   862c0:	d103      	bne.n	862ca <_wcrtomb_r+0x32>
   862c2:	2200      	movs	r2, #0
   862c4:	238a      	movs	r3, #138	; 0x8a
   862c6:	6032      	str	r2, [r6, #0]
   862c8:	602b      	str	r3, [r5, #0]
   862ca:	b006      	add	sp, #24
   862cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   862d0:	4b05      	ldr	r3, [pc, #20]	; (862e8 <_wcrtomb_r+0x50>)
   862d2:	681f      	ldr	r7, [r3, #0]
   862d4:	f7ff f96a 	bl	855ac <__locale_charset>
   862d8:	9600      	str	r6, [sp, #0]
   862da:	4603      	mov	r3, r0
   862dc:	4622      	mov	r2, r4
   862de:	a903      	add	r1, sp, #12
   862e0:	4628      	mov	r0, r5
   862e2:	47b8      	blx	r7
   862e4:	e7eb      	b.n	862be <_wcrtomb_r+0x26>
   862e6:	bf00      	nop
   862e8:	200709b8 	.word	0x200709b8

000862ec <__ascii_wctomb>:
   862ec:	b121      	cbz	r1, 862f8 <__ascii_wctomb+0xc>
   862ee:	2aff      	cmp	r2, #255	; 0xff
   862f0:	d804      	bhi.n	862fc <__ascii_wctomb+0x10>
   862f2:	700a      	strb	r2, [r1, #0]
   862f4:	2001      	movs	r0, #1
   862f6:	4770      	bx	lr
   862f8:	4608      	mov	r0, r1
   862fa:	4770      	bx	lr
   862fc:	238a      	movs	r3, #138	; 0x8a
   862fe:	6003      	str	r3, [r0, #0]
   86300:	f04f 30ff 	mov.w	r0, #4294967295
   86304:	4770      	bx	lr
   86306:	bf00      	nop

00086308 <_write_r>:
   86308:	b570      	push	{r4, r5, r6, lr}
   8630a:	460d      	mov	r5, r1
   8630c:	4c08      	ldr	r4, [pc, #32]	; (86330 <_write_r+0x28>)
   8630e:	4611      	mov	r1, r2
   86310:	4606      	mov	r6, r0
   86312:	461a      	mov	r2, r3
   86314:	4628      	mov	r0, r5
   86316:	2300      	movs	r3, #0
   86318:	6023      	str	r3, [r4, #0]
   8631a:	f7fc fabd 	bl	82898 <_write>
   8631e:	1c43      	adds	r3, r0, #1
   86320:	d000      	beq.n	86324 <_write_r+0x1c>
   86322:	bd70      	pop	{r4, r5, r6, pc}
   86324:	6823      	ldr	r3, [r4, #0]
   86326:	2b00      	cmp	r3, #0
   86328:	d0fb      	beq.n	86322 <_write_r+0x1a>
   8632a:	6033      	str	r3, [r6, #0]
   8632c:	bd70      	pop	{r4, r5, r6, pc}
   8632e:	bf00      	nop
   86330:	20078ca8 	.word	0x20078ca8

00086334 <__register_exitproc>:
   86334:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   86338:	4c25      	ldr	r4, [pc, #148]	; (863d0 <__register_exitproc+0x9c>)
   8633a:	4606      	mov	r6, r0
   8633c:	6825      	ldr	r5, [r4, #0]
   8633e:	4688      	mov	r8, r1
   86340:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
   86344:	4692      	mov	sl, r2
   86346:	4699      	mov	r9, r3
   86348:	b3c4      	cbz	r4, 863bc <__register_exitproc+0x88>
   8634a:	6860      	ldr	r0, [r4, #4]
   8634c:	281f      	cmp	r0, #31
   8634e:	dc17      	bgt.n	86380 <__register_exitproc+0x4c>
   86350:	1c41      	adds	r1, r0, #1
   86352:	b176      	cbz	r6, 86372 <__register_exitproc+0x3e>
   86354:	eb04 0380 	add.w	r3, r4, r0, lsl #2
   86358:	f8c3 a088 	str.w	sl, [r3, #136]	; 0x88
   8635c:	f8d4 5188 	ldr.w	r5, [r4, #392]	; 0x188
   86360:	2201      	movs	r2, #1
   86362:	4082      	lsls	r2, r0
   86364:	4315      	orrs	r5, r2
   86366:	2e02      	cmp	r6, #2
   86368:	f8c4 5188 	str.w	r5, [r4, #392]	; 0x188
   8636c:	f8c3 9108 	str.w	r9, [r3, #264]	; 0x108
   86370:	d01e      	beq.n	863b0 <__register_exitproc+0x7c>
   86372:	1c83      	adds	r3, r0, #2
   86374:	6061      	str	r1, [r4, #4]
   86376:	2000      	movs	r0, #0
   86378:	f844 8023 	str.w	r8, [r4, r3, lsl #2]
   8637c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   86380:	4b14      	ldr	r3, [pc, #80]	; (863d4 <__register_exitproc+0xa0>)
   86382:	b303      	cbz	r3, 863c6 <__register_exitproc+0x92>
   86384:	f44f 70c8 	mov.w	r0, #400	; 0x190
   86388:	f7ff f98e 	bl	856a8 <malloc>
   8638c:	4604      	mov	r4, r0
   8638e:	b1d0      	cbz	r0, 863c6 <__register_exitproc+0x92>
   86390:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
   86394:	2700      	movs	r7, #0
   86396:	e884 0088 	stmia.w	r4, {r3, r7}
   8639a:	4638      	mov	r0, r7
   8639c:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
   863a0:	2101      	movs	r1, #1
   863a2:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
   863a6:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
   863aa:	2e00      	cmp	r6, #0
   863ac:	d0e1      	beq.n	86372 <__register_exitproc+0x3e>
   863ae:	e7d1      	b.n	86354 <__register_exitproc+0x20>
   863b0:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
   863b4:	431a      	orrs	r2, r3
   863b6:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
   863ba:	e7da      	b.n	86372 <__register_exitproc+0x3e>
   863bc:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
   863c0:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
   863c4:	e7c1      	b.n	8634a <__register_exitproc+0x16>
   863c6:	f04f 30ff 	mov.w	r0, #4294967295
   863ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   863ce:	bf00      	nop
   863d0:	0008698c 	.word	0x0008698c
   863d4:	000856a9 	.word	0x000856a9

000863d8 <_close_r>:
   863d8:	b538      	push	{r3, r4, r5, lr}
   863da:	4c07      	ldr	r4, [pc, #28]	; (863f8 <_close_r+0x20>)
   863dc:	2300      	movs	r3, #0
   863de:	4605      	mov	r5, r0
   863e0:	4608      	mov	r0, r1
   863e2:	6023      	str	r3, [r4, #0]
   863e4:	f7fa fb4c 	bl	80a80 <_close>
   863e8:	1c43      	adds	r3, r0, #1
   863ea:	d000      	beq.n	863ee <_close_r+0x16>
   863ec:	bd38      	pop	{r3, r4, r5, pc}
   863ee:	6823      	ldr	r3, [r4, #0]
   863f0:	2b00      	cmp	r3, #0
   863f2:	d0fb      	beq.n	863ec <_close_r+0x14>
   863f4:	602b      	str	r3, [r5, #0]
   863f6:	bd38      	pop	{r3, r4, r5, pc}
   863f8:	20078ca8 	.word	0x20078ca8

000863fc <_fclose_r>:
   863fc:	2900      	cmp	r1, #0
   863fe:	d03d      	beq.n	8647c <_fclose_r+0x80>
   86400:	b570      	push	{r4, r5, r6, lr}
   86402:	4605      	mov	r5, r0
   86404:	460c      	mov	r4, r1
   86406:	b108      	cbz	r0, 8640c <_fclose_r+0x10>
   86408:	6b83      	ldr	r3, [r0, #56]	; 0x38
   8640a:	b37b      	cbz	r3, 8646c <_fclose_r+0x70>
   8640c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   86410:	b90b      	cbnz	r3, 86416 <_fclose_r+0x1a>
   86412:	2000      	movs	r0, #0
   86414:	bd70      	pop	{r4, r5, r6, pc}
   86416:	4621      	mov	r1, r4
   86418:	4628      	mov	r0, r5
   8641a:	f7fe fc33 	bl	84c84 <__sflush_r>
   8641e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   86420:	4606      	mov	r6, r0
   86422:	b133      	cbz	r3, 86432 <_fclose_r+0x36>
   86424:	69e1      	ldr	r1, [r4, #28]
   86426:	4628      	mov	r0, r5
   86428:	4798      	blx	r3
   8642a:	2800      	cmp	r0, #0
   8642c:	bfb8      	it	lt
   8642e:	f04f 36ff 	movlt.w	r6, #4294967295
   86432:	89a3      	ldrh	r3, [r4, #12]
   86434:	061b      	lsls	r3, r3, #24
   86436:	d41c      	bmi.n	86472 <_fclose_r+0x76>
   86438:	6b21      	ldr	r1, [r4, #48]	; 0x30
   8643a:	b141      	cbz	r1, 8644e <_fclose_r+0x52>
   8643c:	f104 0340 	add.w	r3, r4, #64	; 0x40
   86440:	4299      	cmp	r1, r3
   86442:	d002      	beq.n	8644a <_fclose_r+0x4e>
   86444:	4628      	mov	r0, r5
   86446:	f7fe fe1d 	bl	85084 <_free_r>
   8644a:	2300      	movs	r3, #0
   8644c:	6323      	str	r3, [r4, #48]	; 0x30
   8644e:	6c61      	ldr	r1, [r4, #68]	; 0x44
   86450:	b121      	cbz	r1, 8645c <_fclose_r+0x60>
   86452:	4628      	mov	r0, r5
   86454:	f7fe fe16 	bl	85084 <_free_r>
   86458:	2300      	movs	r3, #0
   8645a:	6463      	str	r3, [r4, #68]	; 0x44
   8645c:	f7fe fd50 	bl	84f00 <__sfp_lock_acquire>
   86460:	2300      	movs	r3, #0
   86462:	81a3      	strh	r3, [r4, #12]
   86464:	f7fe fd4e 	bl	84f04 <__sfp_lock_release>
   86468:	4630      	mov	r0, r6
   8646a:	bd70      	pop	{r4, r5, r6, pc}
   8646c:	f7fe fd42 	bl	84ef4 <__sinit>
   86470:	e7cc      	b.n	8640c <_fclose_r+0x10>
   86472:	6921      	ldr	r1, [r4, #16]
   86474:	4628      	mov	r0, r5
   86476:	f7fe fe05 	bl	85084 <_free_r>
   8647a:	e7dd      	b.n	86438 <_fclose_r+0x3c>
   8647c:	2000      	movs	r0, #0
   8647e:	4770      	bx	lr

00086480 <_fstat_r>:
   86480:	b538      	push	{r3, r4, r5, lr}
   86482:	460b      	mov	r3, r1
   86484:	4c07      	ldr	r4, [pc, #28]	; (864a4 <_fstat_r+0x24>)
   86486:	4605      	mov	r5, r0
   86488:	4611      	mov	r1, r2
   8648a:	4618      	mov	r0, r3
   8648c:	2300      	movs	r3, #0
   8648e:	6023      	str	r3, [r4, #0]
   86490:	f7fa fafa 	bl	80a88 <_fstat>
   86494:	1c43      	adds	r3, r0, #1
   86496:	d000      	beq.n	8649a <_fstat_r+0x1a>
   86498:	bd38      	pop	{r3, r4, r5, pc}
   8649a:	6823      	ldr	r3, [r4, #0]
   8649c:	2b00      	cmp	r3, #0
   8649e:	d0fb      	beq.n	86498 <_fstat_r+0x18>
   864a0:	602b      	str	r3, [r5, #0]
   864a2:	bd38      	pop	{r3, r4, r5, pc}
   864a4:	20078ca8 	.word	0x20078ca8

000864a8 <_isatty_r>:
   864a8:	b538      	push	{r3, r4, r5, lr}
   864aa:	4c07      	ldr	r4, [pc, #28]	; (864c8 <_isatty_r+0x20>)
   864ac:	2300      	movs	r3, #0
   864ae:	4605      	mov	r5, r0
   864b0:	4608      	mov	r0, r1
   864b2:	6023      	str	r3, [r4, #0]
   864b4:	f7fa faee 	bl	80a94 <_isatty>
   864b8:	1c43      	adds	r3, r0, #1
   864ba:	d000      	beq.n	864be <_isatty_r+0x16>
   864bc:	bd38      	pop	{r3, r4, r5, pc}
   864be:	6823      	ldr	r3, [r4, #0]
   864c0:	2b00      	cmp	r3, #0
   864c2:	d0fb      	beq.n	864bc <_isatty_r+0x14>
   864c4:	602b      	str	r3, [r5, #0]
   864c6:	bd38      	pop	{r3, r4, r5, pc}
   864c8:	20078ca8 	.word	0x20078ca8

000864cc <_lseek_r>:
   864cc:	b570      	push	{r4, r5, r6, lr}
   864ce:	460d      	mov	r5, r1
   864d0:	4c08      	ldr	r4, [pc, #32]	; (864f4 <_lseek_r+0x28>)
   864d2:	4611      	mov	r1, r2
   864d4:	4606      	mov	r6, r0
   864d6:	461a      	mov	r2, r3
   864d8:	4628      	mov	r0, r5
   864da:	2300      	movs	r3, #0
   864dc:	6023      	str	r3, [r4, #0]
   864de:	f7fa fadb 	bl	80a98 <_lseek>
   864e2:	1c43      	adds	r3, r0, #1
   864e4:	d000      	beq.n	864e8 <_lseek_r+0x1c>
   864e6:	bd70      	pop	{r4, r5, r6, pc}
   864e8:	6823      	ldr	r3, [r4, #0]
   864ea:	2b00      	cmp	r3, #0
   864ec:	d0fb      	beq.n	864e6 <_lseek_r+0x1a>
   864ee:	6033      	str	r3, [r6, #0]
   864f0:	bd70      	pop	{r4, r5, r6, pc}
   864f2:	bf00      	nop
   864f4:	20078ca8 	.word	0x20078ca8

000864f8 <_read_r>:
   864f8:	b570      	push	{r4, r5, r6, lr}
   864fa:	460d      	mov	r5, r1
   864fc:	4c08      	ldr	r4, [pc, #32]	; (86520 <_read_r+0x28>)
   864fe:	4611      	mov	r1, r2
   86500:	4606      	mov	r6, r0
   86502:	461a      	mov	r2, r3
   86504:	4628      	mov	r0, r5
   86506:	2300      	movs	r3, #0
   86508:	6023      	str	r3, [r4, #0]
   8650a:	f7f9 fef3 	bl	802f4 <_read>
   8650e:	1c43      	adds	r3, r0, #1
   86510:	d000      	beq.n	86514 <_read_r+0x1c>
   86512:	bd70      	pop	{r4, r5, r6, pc}
   86514:	6823      	ldr	r3, [r4, #0]
   86516:	2b00      	cmp	r3, #0
   86518:	d0fb      	beq.n	86512 <_read_r+0x1a>
   8651a:	6033      	str	r3, [r6, #0]
   8651c:	bd70      	pop	{r4, r5, r6, pc}
   8651e:	bf00      	nop
   86520:	20078ca8 	.word	0x20078ca8

00086524 <__aeabi_uldivmod>:
   86524:	b953      	cbnz	r3, 8653c <__aeabi_uldivmod+0x18>
   86526:	b94a      	cbnz	r2, 8653c <__aeabi_uldivmod+0x18>
   86528:	2900      	cmp	r1, #0
   8652a:	bf08      	it	eq
   8652c:	2800      	cmpeq	r0, #0
   8652e:	bf1c      	itt	ne
   86530:	f04f 31ff 	movne.w	r1, #4294967295
   86534:	f04f 30ff 	movne.w	r0, #4294967295
   86538:	f000 b982 	b.w	86840 <__aeabi_idiv0>
   8653c:	f1ad 0c08 	sub.w	ip, sp, #8
   86540:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   86544:	f000 f806 	bl	86554 <__udivmoddi4>
   86548:	f8dd e004 	ldr.w	lr, [sp, #4]
   8654c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   86550:	b004      	add	sp, #16
   86552:	4770      	bx	lr

00086554 <__udivmoddi4>:
   86554:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   86558:	468c      	mov	ip, r1
   8655a:	460c      	mov	r4, r1
   8655c:	4605      	mov	r5, r0
   8655e:	9e09      	ldr	r6, [sp, #36]	; 0x24
   86560:	2b00      	cmp	r3, #0
   86562:	d14f      	bne.n	86604 <__udivmoddi4+0xb0>
   86564:	428a      	cmp	r2, r1
   86566:	4617      	mov	r7, r2
   86568:	d96b      	bls.n	86642 <__udivmoddi4+0xee>
   8656a:	fab2 fe82 	clz	lr, r2
   8656e:	f1be 0f00 	cmp.w	lr, #0
   86572:	d00b      	beq.n	8658c <__udivmoddi4+0x38>
   86574:	f1ce 0520 	rsb	r5, lr, #32
   86578:	fa20 f505 	lsr.w	r5, r0, r5
   8657c:	fa01 f30e 	lsl.w	r3, r1, lr
   86580:	ea45 0c03 	orr.w	ip, r5, r3
   86584:	fa02 f70e 	lsl.w	r7, r2, lr
   86588:	fa00 f50e 	lsl.w	r5, r0, lr
   8658c:	0c39      	lsrs	r1, r7, #16
   8658e:	fbbc f0f1 	udiv	r0, ip, r1
   86592:	b2ba      	uxth	r2, r7
   86594:	fb01 c310 	mls	r3, r1, r0, ip
   86598:	fb00 f802 	mul.w	r8, r0, r2
   8659c:	ea4f 4c15 	mov.w	ip, r5, lsr #16
   865a0:	ea4c 4403 	orr.w	r4, ip, r3, lsl #16
   865a4:	45a0      	cmp	r8, r4
   865a6:	d909      	bls.n	865bc <__udivmoddi4+0x68>
   865a8:	19e4      	adds	r4, r4, r7
   865aa:	f100 33ff 	add.w	r3, r0, #4294967295
   865ae:	f080 8128 	bcs.w	86802 <__udivmoddi4+0x2ae>
   865b2:	45a0      	cmp	r8, r4
   865b4:	f240 8125 	bls.w	86802 <__udivmoddi4+0x2ae>
   865b8:	3802      	subs	r0, #2
   865ba:	443c      	add	r4, r7
   865bc:	ebc8 0404 	rsb	r4, r8, r4
   865c0:	fbb4 f3f1 	udiv	r3, r4, r1
   865c4:	fb01 4c13 	mls	ip, r1, r3, r4
   865c8:	fb03 f202 	mul.w	r2, r3, r2
   865cc:	b2ac      	uxth	r4, r5
   865ce:	ea44 410c 	orr.w	r1, r4, ip, lsl #16
   865d2:	428a      	cmp	r2, r1
   865d4:	d909      	bls.n	865ea <__udivmoddi4+0x96>
   865d6:	19c9      	adds	r1, r1, r7
   865d8:	f103 34ff 	add.w	r4, r3, #4294967295
   865dc:	f080 810f 	bcs.w	867fe <__udivmoddi4+0x2aa>
   865e0:	428a      	cmp	r2, r1
   865e2:	f240 810c 	bls.w	867fe <__udivmoddi4+0x2aa>
   865e6:	3b02      	subs	r3, #2
   865e8:	4439      	add	r1, r7
   865ea:	1a8a      	subs	r2, r1, r2
   865ec:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
   865f0:	2100      	movs	r1, #0
   865f2:	2e00      	cmp	r6, #0
   865f4:	d063      	beq.n	866be <__udivmoddi4+0x16a>
   865f6:	fa22 f20e 	lsr.w	r2, r2, lr
   865fa:	2300      	movs	r3, #0
   865fc:	e886 000c 	stmia.w	r6, {r2, r3}
   86600:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   86604:	428b      	cmp	r3, r1
   86606:	d907      	bls.n	86618 <__udivmoddi4+0xc4>
   86608:	2e00      	cmp	r6, #0
   8660a:	d056      	beq.n	866ba <__udivmoddi4+0x166>
   8660c:	2100      	movs	r1, #0
   8660e:	e886 0011 	stmia.w	r6, {r0, r4}
   86612:	4608      	mov	r0, r1
   86614:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   86618:	fab3 f183 	clz	r1, r3
   8661c:	2900      	cmp	r1, #0
   8661e:	f040 8093 	bne.w	86748 <__udivmoddi4+0x1f4>
   86622:	42a3      	cmp	r3, r4
   86624:	d302      	bcc.n	8662c <__udivmoddi4+0xd8>
   86626:	4282      	cmp	r2, r0
   86628:	f200 80fe 	bhi.w	86828 <__udivmoddi4+0x2d4>
   8662c:	1a85      	subs	r5, r0, r2
   8662e:	eb64 0303 	sbc.w	r3, r4, r3
   86632:	469c      	mov	ip, r3
   86634:	2001      	movs	r0, #1
   86636:	2e00      	cmp	r6, #0
   86638:	d041      	beq.n	866be <__udivmoddi4+0x16a>
   8663a:	e886 1020 	stmia.w	r6, {r5, ip}
   8663e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   86642:	b912      	cbnz	r2, 8664a <__udivmoddi4+0xf6>
   86644:	2701      	movs	r7, #1
   86646:	fbb7 f7f2 	udiv	r7, r7, r2
   8664a:	fab7 fe87 	clz	lr, r7
   8664e:	f1be 0f00 	cmp.w	lr, #0
   86652:	d136      	bne.n	866c2 <__udivmoddi4+0x16e>
   86654:	1be4      	subs	r4, r4, r7
   86656:	ea4f 4817 	mov.w	r8, r7, lsr #16
   8665a:	fa1f f987 	uxth.w	r9, r7
   8665e:	2101      	movs	r1, #1
   86660:	fbb4 f3f8 	udiv	r3, r4, r8
   86664:	fb08 4413 	mls	r4, r8, r3, r4
   86668:	fb09 f203 	mul.w	r2, r9, r3
   8666c:	ea4f 4c15 	mov.w	ip, r5, lsr #16
   86670:	ea4c 4404 	orr.w	r4, ip, r4, lsl #16
   86674:	42a2      	cmp	r2, r4
   86676:	d907      	bls.n	86688 <__udivmoddi4+0x134>
   86678:	19e4      	adds	r4, r4, r7
   8667a:	f103 30ff 	add.w	r0, r3, #4294967295
   8667e:	d202      	bcs.n	86686 <__udivmoddi4+0x132>
   86680:	42a2      	cmp	r2, r4
   86682:	f200 80d3 	bhi.w	8682c <__udivmoddi4+0x2d8>
   86686:	4603      	mov	r3, r0
   86688:	1aa4      	subs	r4, r4, r2
   8668a:	fbb4 f0f8 	udiv	r0, r4, r8
   8668e:	fb08 4810 	mls	r8, r8, r0, r4
   86692:	fb09 f900 	mul.w	r9, r9, r0
   86696:	b2ac      	uxth	r4, r5
   86698:	ea44 4208 	orr.w	r2, r4, r8, lsl #16
   8669c:	4591      	cmp	r9, r2
   8669e:	d907      	bls.n	866b0 <__udivmoddi4+0x15c>
   866a0:	19d2      	adds	r2, r2, r7
   866a2:	f100 34ff 	add.w	r4, r0, #4294967295
   866a6:	d202      	bcs.n	866ae <__udivmoddi4+0x15a>
   866a8:	4591      	cmp	r9, r2
   866aa:	f200 80ba 	bhi.w	86822 <__udivmoddi4+0x2ce>
   866ae:	4620      	mov	r0, r4
   866b0:	ebc9 0202 	rsb	r2, r9, r2
   866b4:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
   866b8:	e79b      	b.n	865f2 <__udivmoddi4+0x9e>
   866ba:	4631      	mov	r1, r6
   866bc:	4630      	mov	r0, r6
   866be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   866c2:	fa07 f70e 	lsl.w	r7, r7, lr
   866c6:	f1ce 0c20 	rsb	ip, lr, #32
   866ca:	fa24 f30c 	lsr.w	r3, r4, ip
   866ce:	ea4f 4817 	mov.w	r8, r7, lsr #16
   866d2:	fbb3 faf8 	udiv	sl, r3, r8
   866d6:	fa1f f987 	uxth.w	r9, r7
   866da:	fb08 351a 	mls	r5, r8, sl, r3
   866de:	fa20 fc0c 	lsr.w	ip, r0, ip
   866e2:	fa04 f40e 	lsl.w	r4, r4, lr
   866e6:	fb0a fb09 	mul.w	fp, sl, r9
   866ea:	ea4c 0c04 	orr.w	ip, ip, r4
   866ee:	ea4f 421c 	mov.w	r2, ip, lsr #16
   866f2:	ea42 4305 	orr.w	r3, r2, r5, lsl #16
   866f6:	459b      	cmp	fp, r3
   866f8:	fa00 f50e 	lsl.w	r5, r0, lr
   866fc:	d90a      	bls.n	86714 <__udivmoddi4+0x1c0>
   866fe:	19db      	adds	r3, r3, r7
   86700:	f10a 32ff 	add.w	r2, sl, #4294967295
   86704:	f080 808b 	bcs.w	8681e <__udivmoddi4+0x2ca>
   86708:	459b      	cmp	fp, r3
   8670a:	f240 8088 	bls.w	8681e <__udivmoddi4+0x2ca>
   8670e:	f1aa 0a02 	sub.w	sl, sl, #2
   86712:	443b      	add	r3, r7
   86714:	ebcb 0303 	rsb	r3, fp, r3
   86718:	fbb3 f0f8 	udiv	r0, r3, r8
   8671c:	fb08 3310 	mls	r3, r8, r0, r3
   86720:	fb00 f409 	mul.w	r4, r0, r9
   86724:	fa1f fc8c 	uxth.w	ip, ip
   86728:	ea4c 4303 	orr.w	r3, ip, r3, lsl #16
   8672c:	429c      	cmp	r4, r3
   8672e:	d907      	bls.n	86740 <__udivmoddi4+0x1ec>
   86730:	19db      	adds	r3, r3, r7
   86732:	f100 32ff 	add.w	r2, r0, #4294967295
   86736:	d26e      	bcs.n	86816 <__udivmoddi4+0x2c2>
   86738:	429c      	cmp	r4, r3
   8673a:	d96c      	bls.n	86816 <__udivmoddi4+0x2c2>
   8673c:	3802      	subs	r0, #2
   8673e:	443b      	add	r3, r7
   86740:	1b1c      	subs	r4, r3, r4
   86742:	ea40 410a 	orr.w	r1, r0, sl, lsl #16
   86746:	e78b      	b.n	86660 <__udivmoddi4+0x10c>
   86748:	f1c1 0e20 	rsb	lr, r1, #32
   8674c:	408b      	lsls	r3, r1
   8674e:	fa22 fc0e 	lsr.w	ip, r2, lr
   86752:	ea4c 0c03 	orr.w	ip, ip, r3
   86756:	fa24 f70e 	lsr.w	r7, r4, lr
   8675a:	ea4f 491c 	mov.w	r9, ip, lsr #16
   8675e:	fbb7 faf9 	udiv	sl, r7, r9
   86762:	fa1f f38c 	uxth.w	r3, ip
   86766:	fb09 771a 	mls	r7, r9, sl, r7
   8676a:	fa20 f80e 	lsr.w	r8, r0, lr
   8676e:	408c      	lsls	r4, r1
   86770:	fb0a f503 	mul.w	r5, sl, r3
   86774:	ea48 0404 	orr.w	r4, r8, r4
   86778:	ea4f 4814 	mov.w	r8, r4, lsr #16
   8677c:	ea48 4707 	orr.w	r7, r8, r7, lsl #16
   86780:	42bd      	cmp	r5, r7
   86782:	fa02 f201 	lsl.w	r2, r2, r1
   86786:	fa00 fb01 	lsl.w	fp, r0, r1
   8678a:	d909      	bls.n	867a0 <__udivmoddi4+0x24c>
   8678c:	eb17 070c 	adds.w	r7, r7, ip
   86790:	f10a 30ff 	add.w	r0, sl, #4294967295
   86794:	d241      	bcs.n	8681a <__udivmoddi4+0x2c6>
   86796:	42bd      	cmp	r5, r7
   86798:	d93f      	bls.n	8681a <__udivmoddi4+0x2c6>
   8679a:	f1aa 0a02 	sub.w	sl, sl, #2
   8679e:	4467      	add	r7, ip
   867a0:	1b7f      	subs	r7, r7, r5
   867a2:	fbb7 f5f9 	udiv	r5, r7, r9
   867a6:	fb09 7715 	mls	r7, r9, r5, r7
   867aa:	fb05 f303 	mul.w	r3, r5, r3
   867ae:	b2a4      	uxth	r4, r4
   867b0:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
   867b4:	42bb      	cmp	r3, r7
   867b6:	d908      	bls.n	867ca <__udivmoddi4+0x276>
   867b8:	eb17 070c 	adds.w	r7, r7, ip
   867bc:	f105 30ff 	add.w	r0, r5, #4294967295
   867c0:	d227      	bcs.n	86812 <__udivmoddi4+0x2be>
   867c2:	42bb      	cmp	r3, r7
   867c4:	d925      	bls.n	86812 <__udivmoddi4+0x2be>
   867c6:	3d02      	subs	r5, #2
   867c8:	4467      	add	r7, ip
   867ca:	ea45 400a 	orr.w	r0, r5, sl, lsl #16
   867ce:	fba0 8902 	umull	r8, r9, r0, r2
   867d2:	1aff      	subs	r7, r7, r3
   867d4:	454f      	cmp	r7, r9
   867d6:	4645      	mov	r5, r8
   867d8:	464c      	mov	r4, r9
   867da:	d314      	bcc.n	86806 <__udivmoddi4+0x2b2>
   867dc:	d029      	beq.n	86832 <__udivmoddi4+0x2de>
   867de:	b366      	cbz	r6, 8683a <__udivmoddi4+0x2e6>
   867e0:	ebbb 0305 	subs.w	r3, fp, r5
   867e4:	eb67 0704 	sbc.w	r7, r7, r4
   867e8:	fa07 fe0e 	lsl.w	lr, r7, lr
   867ec:	40cb      	lsrs	r3, r1
   867ee:	40cf      	lsrs	r7, r1
   867f0:	ea4e 0303 	orr.w	r3, lr, r3
   867f4:	e886 0088 	stmia.w	r6, {r3, r7}
   867f8:	2100      	movs	r1, #0
   867fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   867fe:	4623      	mov	r3, r4
   86800:	e6f3      	b.n	865ea <__udivmoddi4+0x96>
   86802:	4618      	mov	r0, r3
   86804:	e6da      	b.n	865bc <__udivmoddi4+0x68>
   86806:	ebb8 0502 	subs.w	r5, r8, r2
   8680a:	eb69 040c 	sbc.w	r4, r9, ip
   8680e:	3801      	subs	r0, #1
   86810:	e7e5      	b.n	867de <__udivmoddi4+0x28a>
   86812:	4605      	mov	r5, r0
   86814:	e7d9      	b.n	867ca <__udivmoddi4+0x276>
   86816:	4610      	mov	r0, r2
   86818:	e792      	b.n	86740 <__udivmoddi4+0x1ec>
   8681a:	4682      	mov	sl, r0
   8681c:	e7c0      	b.n	867a0 <__udivmoddi4+0x24c>
   8681e:	4692      	mov	sl, r2
   86820:	e778      	b.n	86714 <__udivmoddi4+0x1c0>
   86822:	3802      	subs	r0, #2
   86824:	443a      	add	r2, r7
   86826:	e743      	b.n	866b0 <__udivmoddi4+0x15c>
   86828:	4608      	mov	r0, r1
   8682a:	e704      	b.n	86636 <__udivmoddi4+0xe2>
   8682c:	3b02      	subs	r3, #2
   8682e:	443c      	add	r4, r7
   86830:	e72a      	b.n	86688 <__udivmoddi4+0x134>
   86832:	45c3      	cmp	fp, r8
   86834:	d3e7      	bcc.n	86806 <__udivmoddi4+0x2b2>
   86836:	463c      	mov	r4, r7
   86838:	e7d1      	b.n	867de <__udivmoddi4+0x28a>
   8683a:	4631      	mov	r1, r6
   8683c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00086840 <__aeabi_idiv0>:
   86840:	4770      	bx	lr
   86842:	bf00      	nop
   86844:	6d726554 	.word	0x6d726554
   86848:	6c616e69 	.word	0x6c616e69
   8684c:	62656420 	.word	0x62656420
   86850:	69676775 	.word	0x69676775
   86854:	6520676e 	.word	0x6520676e
   86858:	6c62616e 	.word	0x6c62616e
   8685c:	000a6465 	.word	0x000a6465
   86860:	73657250 	.word	0x73657250
   86864:	76207465 	.word	0x76207465
   86868:	65756c61 	.word	0x65756c61
   8686c:	000a3a73 	.word	0x000a3a73
   86870:	203a506b 	.word	0x203a506b
   86874:	0d0a7525 	.word	0x0d0a7525
   86878:	00000000 	.word	0x00000000
   8687c:	203a496b 	.word	0x203a496b
   86880:	0d0a7525 	.word	0x0d0a7525
   86884:	00000000 	.word	0x00000000
   86888:	203a446b 	.word	0x203a446b
   8688c:	0d0a7525 	.word	0x0d0a7525
   86890:	00000000 	.word	0x00000000
   86894:	70746553 	.word	0x70746553
   86898:	746e696f 	.word	0x746e696f
   8689c:	7525203a 	.word	0x7525203a
   868a0:	00000d0a 	.word	0x00000d0a
   868a4:	756c6156 	.word	0x756c6156
   868a8:	0a3a7365 	.word	0x0a3a7365
   868ac:	00000000 	.word	0x00000000
   868b0:	0d0a6925 	.word	0x0d0a6925
   868b4:	00000000 	.word	0x00000000
   868b8:	09097325 	.word	0x09097325
   868bc:	25096325 	.word	0x25096325
   868c0:	75250975 	.word	0x75250975
   868c4:	0d752509 	.word	0x0d752509
   868c8:	0000000a 	.word	0x0000000a
   868cc:	454c4449 	.word	0x454c4449
   868d0:	00000000 	.word	0x00000000
   868d4:	20726d54 	.word	0x20726d54
   868d8:	00637653 	.word	0x00637653
   868dc:	00000001 	.word	0x00000001
   868e0:	00000002 	.word	0x00000002
   868e4:	00000004 	.word	0x00000004
   868e8:	00000008 	.word	0x00000008
   868ec:	00000010 	.word	0x00000010
   868f0:	00000020 	.word	0x00000020
   868f4:	00000040 	.word	0x00000040
   868f8:	00000080 	.word	0x00000080
   868fc:	00000100 	.word	0x00000100
   86900:	00000200 	.word	0x00000200
   86904:	00000400 	.word	0x00000400
   86908:	52444950 	.word	0x52444950
   8690c:	6c756765 	.word	0x6c756765
   86910:	6f697461 	.word	0x6f697461
   86914:	0000006e 	.word	0x0000006e
   86918:	6c696146 	.word	0x6c696146
   8691c:	74206465 	.word	0x74206465
   86920:	7263206f 	.word	0x7263206f
   86924:	65746165 	.word	0x65746165
   86928:	44495020 	.word	0x44495020
   8692c:	75676552 	.word	0x75676552
   86930:	6974616c 	.word	0x6974616c
   86934:	61546e6f 	.word	0x61546e6f
   86938:	0a0d6b73 	.word	0x0a0d6b73
   8693c:	00000000 	.word	0x00000000
   86940:	69726553 	.word	0x69726553
   86944:	6f436c61 	.word	0x6f436c61
   86948:	7361546d 	.word	0x7361546d
   8694c:	0000006b 	.word	0x0000006b
   86950:	6c696146 	.word	0x6c696146
   86954:	74206465 	.word	0x74206465
   86958:	7263206f 	.word	0x7263206f
   8695c:	65746165 	.word	0x65746165
   86960:	72655320 	.word	0x72655320
   86964:	436c6169 	.word	0x436c6169
   86968:	61546d6f 	.word	0x61546d6f
   8696c:	0a0d6b73 	.word	0x0a0d6b73
   86970:	00000000 	.word	0x00000000
   86974:	75736e49 	.word	0x75736e49
   86978:	63696666 	.word	0x63696666
   8697c:	746e6569 	.word	0x746e6569
   86980:	4d415220 	.word	0x4d415220
   86984:	00000a0d 	.word	0x00000a0d
   86988:	00000043 	.word	0x00000043

0008698c <_global_impure_ptr>:
   8698c:	20070158                                X.. 

00086990 <zeroes.6993>:
   86990:	30303030 30303030 30303030 30303030     0000000000000000
   869a0:	33323130 37363534 42413938 46454443     0123456789ABCDEF
   869b0:	00000000 33323130 37363534 62613938     ....0123456789ab
   869c0:	66656463 00000000 6c756e28 0000296c     cdef....(null)..

000869d0 <blanks.6992>:
   869d0:	20202020 20202020 20202020 20202020                     

000869e0 <_init>:
   869e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   869e2:	bf00      	nop
   869e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
   869e6:	bc08      	pop	{r3}
   869e8:	469e      	mov	lr, r3
   869ea:	4770      	bx	lr

000869ec <__init_array_start>:
   869ec:	00084c65 	.word	0x00084c65

000869f0 <__frame_dummy_init_array_entry>:
   869f0:	00080119                                ....

000869f4 <_fini>:
   869f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   869f6:	bf00      	nop
   869f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
   869fa:	bc08      	pop	{r3}
   869fc:	469e      	mov	lr, r3
   869fe:	4770      	bx	lr

00086a00 <__fini_array_start>:
   86a00:	000800f5 	.word	0x000800f5

Disassembly of section .relocate:

20070000 <SystemInit>:
__no_inline
RAMFUNC
void SystemInit(void)
{
	/* Set FWS according to SYS_BOARD_MCKR configuration */
	EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
20070000:	f44f 6380 	mov.w	r3, #1024	; 0x400
20070004:	4a20      	ldr	r2, [pc, #128]	; (20070088 <SystemInit+0x88>)
20070006:	6013      	str	r3, [r2, #0]
	EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
20070008:	f502 7200 	add.w	r2, r2, #512	; 0x200
2007000c:	6013      	str	r3, [r2, #0]

	/* Initialize main oscillator */
	if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
2007000e:	4b1f      	ldr	r3, [pc, #124]	; (2007008c <SystemInit+0x8c>)
20070010:	6a1b      	ldr	r3, [r3, #32]
20070012:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
20070016:	d107      	bne.n	20070028 <SystemInit+0x28>
		PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070018:	4a1d      	ldr	r2, [pc, #116]	; (20070090 <SystemInit+0x90>)
2007001a:	4b1c      	ldr	r3, [pc, #112]	; (2007008c <SystemInit+0x8c>)
2007001c:	621a      	str	r2, [r3, #32]
			                     CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN;
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS)) {
2007001e:	461a      	mov	r2, r3
20070020:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070022:	f013 0f01 	tst.w	r3, #1
20070026:	d0fb      	beq.n	20070020 <SystemInit+0x20>
		}
	}

	/* Switch to 3-20MHz Xtal oscillator */
	PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070028:	4a1a      	ldr	r2, [pc, #104]	; (20070094 <SystemInit+0x94>)
2007002a:	4b18      	ldr	r3, [pc, #96]	; (2007008c <SystemInit+0x8c>)
2007002c:	621a      	str	r2, [r3, #32]
	                           CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCSEL;

	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS)) {
2007002e:	461a      	mov	r2, r3
20070030:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070032:	f413 3f80 	tst.w	r3, #65536	; 0x10000
20070036:	d0fb      	beq.n	20070030 <SystemInit+0x30>
	}
 	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | 
20070038:	4a14      	ldr	r2, [pc, #80]	; (2007008c <SystemInit+0x8c>)
2007003a:	6b13      	ldr	r3, [r2, #48]	; 0x30
2007003c:	f023 0303 	bic.w	r3, r3, #3
20070040:	f043 0301 	orr.w	r3, r3, #1
20070044:	6313      	str	r3, [r2, #48]	; 0x30
		                     PMC_MCKR_CSS_MAIN_CLK;
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070046:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070048:	f013 0f08 	tst.w	r3, #8
2007004c:	d0fb      	beq.n	20070046 <SystemInit+0x46>
	}

	/* Initialize PLLA */
	PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
2007004e:	4a12      	ldr	r2, [pc, #72]	; (20070098 <SystemInit+0x98>)
20070050:	4b0e      	ldr	r3, [pc, #56]	; (2007008c <SystemInit+0x8c>)
20070052:	629a      	str	r2, [r3, #40]	; 0x28
	while (!(PMC->PMC_SR & PMC_SR_LOCKA)) {
20070054:	461a      	mov	r2, r3
20070056:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070058:	f013 0f02 	tst.w	r3, #2
2007005c:	d0fb      	beq.n	20070056 <SystemInit+0x56>
	}

	/* Switch to main clock */
	PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
2007005e:	2211      	movs	r2, #17
20070060:	4b0a      	ldr	r3, [pc, #40]	; (2007008c <SystemInit+0x8c>)
20070062:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070064:	461a      	mov	r2, r3
20070066:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070068:	f013 0f08 	tst.w	r3, #8
2007006c:	d0fb      	beq.n	20070066 <SystemInit+0x66>
	}

	/* Switch to PLLA */
	PMC->PMC_MCKR = SYS_BOARD_MCKR;
2007006e:	2212      	movs	r2, #18
20070070:	4b06      	ldr	r3, [pc, #24]	; (2007008c <SystemInit+0x8c>)
20070072:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070074:	461a      	mov	r2, r3
20070076:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070078:	f013 0f08 	tst.w	r3, #8
2007007c:	d0fb      	beq.n	20070076 <SystemInit+0x76>
	}

	SystemCoreClock = CHIP_FREQ_CPU_MAX;
2007007e:	4a07      	ldr	r2, [pc, #28]	; (2007009c <SystemInit+0x9c>)
20070080:	4b07      	ldr	r3, [pc, #28]	; (200700a0 <SystemInit+0xa0>)
20070082:	601a      	str	r2, [r3, #0]
20070084:	4770      	bx	lr
20070086:	bf00      	nop
20070088:	400e0a00 	.word	0x400e0a00
2007008c:	400e0600 	.word	0x400e0600
20070090:	00370809 	.word	0x00370809
20070094:	01370809 	.word	0x01370809
20070098:	200d3f01 	.word	0x200d3f01
2007009c:	0501bd00 	.word	0x0501bd00
200700a0:	2007012c 	.word	0x2007012c

200700a4 <system_init_flash>:
__no_inline
RAMFUNC
void system_init_flash(uint32_t ul_clk)
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
200700a4:	4b1b      	ldr	r3, [pc, #108]	; (20070114 <system_init_flash+0x70>)
200700a6:	4298      	cmp	r0, r3
200700a8:	d806      	bhi.n	200700b8 <system_init_flash+0x14>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
200700aa:	2300      	movs	r3, #0
200700ac:	4a1a      	ldr	r2, [pc, #104]	; (20070118 <system_init_flash+0x74>)
200700ae:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
200700b0:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700b4:	6013      	str	r3, [r2, #0]
200700b6:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
200700b8:	4b18      	ldr	r3, [pc, #96]	; (2007011c <system_init_flash+0x78>)
200700ba:	4298      	cmp	r0, r3
200700bc:	d807      	bhi.n	200700ce <system_init_flash+0x2a>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
200700be:	f44f 7380 	mov.w	r3, #256	; 0x100
200700c2:	4a15      	ldr	r2, [pc, #84]	; (20070118 <system_init_flash+0x74>)
200700c4:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
200700c6:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700ca:	6013      	str	r3, [r2, #0]
200700cc:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
200700ce:	4b14      	ldr	r3, [pc, #80]	; (20070120 <system_init_flash+0x7c>)
200700d0:	4298      	cmp	r0, r3
200700d2:	d807      	bhi.n	200700e4 <system_init_flash+0x40>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
200700d4:	f44f 7300 	mov.w	r3, #512	; 0x200
200700d8:	4a0f      	ldr	r2, [pc, #60]	; (20070118 <system_init_flash+0x74>)
200700da:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
200700dc:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700e0:	6013      	str	r3, [r2, #0]
200700e2:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
200700e4:	4b0f      	ldr	r3, [pc, #60]	; (20070124 <system_init_flash+0x80>)
200700e6:	4298      	cmp	r0, r3
200700e8:	d807      	bhi.n	200700fa <system_init_flash+0x56>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
200700ea:	f44f 7340 	mov.w	r3, #768	; 0x300
200700ee:	4a0a      	ldr	r2, [pc, #40]	; (20070118 <system_init_flash+0x74>)
200700f0:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
200700f2:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700f6:	6013      	str	r3, [r2, #0]
200700f8:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_4) {
200700fa:	4b0b      	ldr	r3, [pc, #44]	; (20070128 <system_init_flash+0x84>)
200700fc:	4298      	cmp	r0, r3
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
200700fe:	bf94      	ite	ls
20070100:	f44f 6380 	movls.w	r3, #1024	; 0x400
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
20070104:	f44f 63a0 	movhi.w	r3, #1280	; 0x500
20070108:	4a03      	ldr	r2, [pc, #12]	; (20070118 <system_init_flash+0x74>)
2007010a:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
2007010c:	f502 7200 	add.w	r2, r2, #512	; 0x200
20070110:	6013      	str	r3, [r2, #0]
20070112:	4770      	bx	lr
20070114:	0121eabf 	.word	0x0121eabf
20070118:	400e0a00 	.word	0x400e0a00
2007011c:	02faf07f 	.word	0x02faf07f
20070120:	03d08fff 	.word	0x03d08fff
20070124:	04c4b3ff 	.word	0x04c4b3ff
20070128:	055d4a7f 	.word	0x055d4a7f

2007012c <SystemCoreClock>:
2007012c:	003d0900                                ..=.

20070130 <adc_filter_values>:
20070130:	00000001 00000001 00000001 00000001     ................
20070140:	00000001                                ....

20070144 <isMatlab>:
20070144:	00000001                                ....

20070148 <uxCriticalNesting>:
20070148:	aaaaaaaa                                ....

2007014c <xFreeBytesRemaining>:
2007014c:	00008000                                ....

20070150 <xNextTaskUnblockTime>:
20070150:	0000ffff 00000000                       ........

20070158 <impure_data>:
20070158:	00000000 20070444 200704ac 20070514     ....D.. ... ... 
	...
2007018c:	00086988 00000000 00000000 00000000     .i..............
	...
20070200:	00000001 00000000 abcd330e e66d1234     .........3..4.m.
20070210:	0005deec 0000000b 00000000 00000000     ................
	...

20070580 <_impure_ptr>:
20070580:	20070158                                X.. 

20070584 <lc_ctype_charset>:
20070584:	49435341 00000049 00000000 00000000     ASCII...........
	...

200705a4 <__mb_cur_max>:
200705a4:	00000001                                ....

200705a8 <__malloc_av_>:
	...
200705b0:	200705a8 200705a8 200705b0 200705b0     ... ... ... ... 
200705c0:	200705b8 200705b8 200705c0 200705c0     ... ... ... ... 
200705d0:	200705c8 200705c8 200705d0 200705d0     ... ... ... ... 
200705e0:	200705d8 200705d8 200705e0 200705e0     ... ... ... ... 
200705f0:	200705e8 200705e8 200705f0 200705f0     ... ... ... ... 
20070600:	200705f8 200705f8 20070600 20070600     ... ... ... ... 
20070610:	20070608 20070608 20070610 20070610     ... ... ... ... 
20070620:	20070618 20070618 20070620 20070620     ... ...  ..  .. 
20070630:	20070628 20070628 20070630 20070630     (.. (.. 0.. 0.. 
20070640:	20070638 20070638 20070640 20070640     8.. 8.. @.. @.. 
20070650:	20070648 20070648 20070650 20070650     H.. H.. P.. P.. 
20070660:	20070658 20070658 20070660 20070660     X.. X.. `.. `.. 
20070670:	20070668 20070668 20070670 20070670     h.. h.. p.. p.. 
20070680:	20070678 20070678 20070680 20070680     x.. x.. ... ... 
20070690:	20070688 20070688 20070690 20070690     ... ... ... ... 
200706a0:	20070698 20070698 200706a0 200706a0     ... ... ... ... 
200706b0:	200706a8 200706a8 200706b0 200706b0     ... ... ... ... 
200706c0:	200706b8 200706b8 200706c0 200706c0     ... ... ... ... 
200706d0:	200706c8 200706c8 200706d0 200706d0     ... ... ... ... 
200706e0:	200706d8 200706d8 200706e0 200706e0     ... ... ... ... 
200706f0:	200706e8 200706e8 200706f0 200706f0     ... ... ... ... 
20070700:	200706f8 200706f8 20070700 20070700     ... ... ... ... 
20070710:	20070708 20070708 20070710 20070710     ... ... ... ... 
20070720:	20070718 20070718 20070720 20070720     ... ...  ..  .. 
20070730:	20070728 20070728 20070730 20070730     (.. (.. 0.. 0.. 
20070740:	20070738 20070738 20070740 20070740     8.. 8.. @.. @.. 
20070750:	20070748 20070748 20070750 20070750     H.. H.. P.. P.. 
20070760:	20070758 20070758 20070760 20070760     X.. X.. `.. `.. 
20070770:	20070768 20070768 20070770 20070770     h.. h.. p.. p.. 
20070780:	20070778 20070778 20070780 20070780     x.. x.. ... ... 
20070790:	20070788 20070788 20070790 20070790     ... ... ... ... 
200707a0:	20070798 20070798 200707a0 200707a0     ... ... ... ... 
200707b0:	200707a8 200707a8 200707b0 200707b0     ... ... ... ... 
200707c0:	200707b8 200707b8 200707c0 200707c0     ... ... ... ... 
200707d0:	200707c8 200707c8 200707d0 200707d0     ... ... ... ... 
200707e0:	200707d8 200707d8 200707e0 200707e0     ... ... ... ... 
200707f0:	200707e8 200707e8 200707f0 200707f0     ... ... ... ... 
20070800:	200707f8 200707f8 20070800 20070800     ... ... ... ... 
20070810:	20070808 20070808 20070810 20070810     ... ... ... ... 
20070820:	20070818 20070818 20070820 20070820     ... ...  ..  .. 
20070830:	20070828 20070828 20070830 20070830     (.. (.. 0.. 0.. 
20070840:	20070838 20070838 20070840 20070840     8.. 8.. @.. @.. 
20070850:	20070848 20070848 20070850 20070850     H.. H.. P.. P.. 
20070860:	20070858 20070858 20070860 20070860     X.. X.. `.. `.. 
20070870:	20070868 20070868 20070870 20070870     h.. h.. p.. p.. 
20070880:	20070878 20070878 20070880 20070880     x.. x.. ... ... 
20070890:	20070888 20070888 20070890 20070890     ... ... ... ... 
200708a0:	20070898 20070898 200708a0 200708a0     ... ... ... ... 
200708b0:	200708a8 200708a8 200708b0 200708b0     ... ... ... ... 
200708c0:	200708b8 200708b8 200708c0 200708c0     ... ... ... ... 
200708d0:	200708c8 200708c8 200708d0 200708d0     ... ... ... ... 
200708e0:	200708d8 200708d8 200708e0 200708e0     ... ... ... ... 
200708f0:	200708e8 200708e8 200708f0 200708f0     ... ... ... ... 
20070900:	200708f8 200708f8 20070900 20070900     ... ... ... ... 
20070910:	20070908 20070908 20070910 20070910     ... ... ... ... 
20070920:	20070918 20070918 20070920 20070920     ... ...  ..  .. 
20070930:	20070928 20070928 20070930 20070930     (.. (.. 0.. 0.. 
20070940:	20070938 20070938 20070940 20070940     8.. 8.. @.. @.. 
20070950:	20070948 20070948 20070950 20070950     H.. H.. P.. P.. 
20070960:	20070958 20070958 20070960 20070960     X.. X.. `.. `.. 
20070970:	20070968 20070968 20070970 20070970     h.. h.. p.. p.. 
20070980:	20070978 20070978 20070980 20070980     x.. x.. ... ... 
20070990:	20070988 20070988 20070990 20070990     ... ... ... ... 
200709a0:	20070998 20070998 200709a0 200709a0     ... ... ... ... 

200709b0 <__malloc_trim_threshold>:
200709b0:	00020000                                ....

200709b4 <__malloc_sbrk_base>:
200709b4:	ffffffff                                ....

200709b8 <__wctomb>:
200709b8:	000862ed                                .b..
